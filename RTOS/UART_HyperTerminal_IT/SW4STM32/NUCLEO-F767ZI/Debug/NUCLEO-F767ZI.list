
NUCLEO-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017e8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080019e0  080019e0  000119e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001a14  08001a14  00011a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001a1c  08001a1c  00011a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001a20  08001a20  00011a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000ac  20000000  08001a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000bc  200000ac  08001ad0  000200ac  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000168  08001ad0  00020168  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200da  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000ca50  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001d2e  00000000  00000000  0002cb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00003a96  00000000  00000000  0002e89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  00032338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b3  00000000  00000000  00032990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027787  00000000  00000000  00033043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8c4  00000000  00000000  0005a7ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f936f  00000000  00000000  0006708e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000103c  00000000  00000000  00160400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000c8  00000000  00000000  0016143c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200000ac 	.word	0x200000ac
 8000214:	00000000 	.word	0x00000000
 8000218:	080019c8 	.word	0x080019c8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000b0 	.word	0x200000b0
 8000234:	080019c8 	.word	0x080019c8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <BSP_LED_Init>:
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <BSP_LED_Init+0x54>)
 8000536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000538:	f042 0202 	orr.w	r2, r2, #2
{
 800053c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
{
 8000540:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE(Led);
 8000542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000544:	4604      	mov	r4, r0
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	b9c8      	cbnz	r0, 8000580 <BSP_LED_Init+0x4c>
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <BSP_LED_Init+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2700      	movs	r7, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000554:	4d0e      	ldr	r5, [pc, #56]	; (8000590 <BSP_LED_Init+0x5c>)
 8000556:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000558:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800055e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000562:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000568:	2303      	movs	r3, #3
 800056a:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800056c:	f000 f960 	bl	8000830 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000570:	463a      	mov	r2, r7
 8000572:	4631      	mov	r1, r6
 8000574:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000578:	f000 fa3c 	bl	80009f4 <HAL_GPIO_WritePin>
}
 800057c:	b009      	add	sp, #36	; 0x24
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000580:	9302      	str	r3, [sp, #8]
 8000582:	9b02      	ldr	r3, [sp, #8]
 8000584:	e7e4      	b.n	8000550 <BSP_LED_Init+0x1c>
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800
 800058c:	080019e0 	.word	0x080019e0
 8000590:	20000000 	.word	0x20000000

08000594 <BSP_LED_On>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <BSP_LED_On+0x14>)
 8000596:	2201      	movs	r2, #1
 8000598:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <BSP_LED_On+0x18>)
 800059e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80005a2:	f000 ba27 	b.w	80009f4 <HAL_GPIO_WritePin>
 80005a6:	bf00      	nop
 80005a8:	080019e0 	.word	0x080019e0
 80005ac:	20000000 	.word	0x20000000

080005b0 <BSP_LED_Toggle>:
  *     @arg  LED3 
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <BSP_LED_Toggle+0x10>)
 80005b2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80005b6:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <BSP_LED_Toggle+0x14>)
 80005b8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80005bc:	f000 ba1f 	b.w	80009fe <HAL_GPIO_TogglePin>
 80005c0:	080019e0 	.word	0x080019e0
 80005c4:	20000000 	.word	0x20000000

080005c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c8:	490f      	ldr	r1, [pc, #60]	; (8000608 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005ca:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005cc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80005d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <SystemInit+0x44>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	f042 0201 	orr.w	r2, r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80005e2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80005ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <SystemInit+0x48>)
 80005f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005fc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000602:	608b      	str	r3, [r1, #8]
#endif
}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000ed00 	.word	0xe000ed00
 800060c:	40023800 	.word	0x40023800
 8000610:	24003010 	.word	0x24003010

08000614 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000614:	4770      	bx	lr
	...

08000618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000618:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800061a:	4e0e      	ldr	r6, [pc, #56]	; (8000654 <HAL_InitTick+0x3c>)
 800061c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8000620:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000622:	7832      	ldrb	r2, [r6, #0]
 8000624:	fbb3 f3f2 	udiv	r3, r3, r2
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <HAL_InitTick+0x40>)
 800062a:	6810      	ldr	r0, [r2, #0]
 800062c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000630:	f000 f8a0 	bl	8000774 <HAL_SYSTICK_Config>
 8000634:	4604      	mov	r4, r0
 8000636:	b950      	cbnz	r0, 800064e <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000638:	2d0f      	cmp	r5, #15
 800063a:	d808      	bhi.n	800064e <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800063c:	4602      	mov	r2, r0
 800063e:	4629      	mov	r1, r5
 8000640:	f04f 30ff 	mov.w	r0, #4294967295
 8000644:	f000 f856 	bl	80006f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000648:	4620      	mov	r0, r4
 800064a:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800064c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800064e:	2001      	movs	r0, #1
 8000650:	e7fc      	b.n	800064c <HAL_InitTick+0x34>
 8000652:	bf00      	nop
 8000654:	20000014 	.word	0x20000014
 8000658:	20000010 	.word	0x20000010

0800065c <HAL_Init>:
{
 800065c:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000668:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000670:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000672:	f000 f82d 	bl	80006d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000676:	200f      	movs	r0, #15
 8000678:	f7ff ffce 	bl	8000618 <HAL_InitTick>
  HAL_MspInit();
 800067c:	f7ff ffca 	bl	8000614 <HAL_MspInit>
}
 8000680:	2000      	movs	r0, #0
 8000682:	bd08      	pop	{r3, pc}
 8000684:	40023c00 	.word	0x40023c00

08000688 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <HAL_IncTick+0x10>)
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <HAL_IncTick+0x14>)
 800068c:	6811      	ldr	r1, [r2, #0]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	440b      	add	r3, r1
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	200000c8 	.word	0x200000c8
 800069c:	20000014 	.word	0x20000014

080006a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <HAL_GetTick+0x8>)
 80006a2:	6818      	ldr	r0, [r3, #0]
}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	200000c8 	.word	0x200000c8

080006ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ac:	b538      	push	{r3, r4, r5, lr}
 80006ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006b0:	f7ff fff6 	bl	80006a0 <HAL_GetTick>
 80006b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006b6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80006b8:	bf1e      	ittt	ne
 80006ba:	4b04      	ldrne	r3, [pc, #16]	; (80006cc <HAL_Delay+0x20>)
 80006bc:	781b      	ldrbne	r3, [r3, #0]
 80006be:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006c0:	f7ff ffee 	bl	80006a0 <HAL_GetTick>
 80006c4:	1b43      	subs	r3, r0, r5
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d3fa      	bcc.n	80006c0 <HAL_Delay+0x14>
  {
  }
}
 80006ca:	bd38      	pop	{r3, r4, r5, pc}
 80006cc:	20000014 	.word	0x20000014

080006d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d0:	4907      	ldr	r1, [pc, #28]	; (80006f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80006de:	0412      	lsls	r2, r2, #16
 80006e0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80006ec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006f6:	b530      	push	{r4, r5, lr}
 80006f8:	68dc      	ldr	r4, [r3, #12]
 80006fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	2b04      	cmp	r3, #4
 8000706:	bf28      	it	cs
 8000708:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000710:	bf8c      	ite	hi
 8000712:	3c03      	subhi	r4, #3
 8000714:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000716:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800071a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000724:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	fa03 f304 	lsl.w	r3, r3, r4
 800072c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000734:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000736:	db06      	blt.n	8000746 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000738:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800073c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000740:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000744:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	f000 000f 	and.w	r0, r0, #15
 800074a:	4a02      	ldr	r2, [pc, #8]	; (8000754 <HAL_NVIC_SetPriority+0x60>)
 800074c:	5413      	strb	r3, [r2, r0]
 800074e:	e7f9      	b.n	8000744 <HAL_NVIC_SetPriority+0x50>
 8000750:	e000ed00 	.word	0xe000ed00
 8000754:	e000ed14 	.word	0xe000ed14

08000758 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000758:	2800      	cmp	r0, #0
 800075a:	db07      	blt.n	800076c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075c:	0941      	lsrs	r1, r0, #5
 800075e:	2301      	movs	r3, #1
 8000760:	f000 001f 	and.w	r0, r0, #31
 8000764:	4a02      	ldr	r2, [pc, #8]	; (8000770 <HAL_NVIC_EnableIRQ+0x18>)
 8000766:	4083      	lsls	r3, r0
 8000768:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000e100 	.word	0xe000e100

08000774 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000774:	3801      	subs	r0, #1
 8000776:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800077a:	d20b      	bcs.n	8000794 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <HAL_SYSTICK_Config+0x24>)
 8000782:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000784:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000786:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800078e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000790:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000792:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000794:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800079c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <HAL_MPU_Disable+0x18>)
 80007a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80007aa:	2200      	movs	r2, #0
 80007ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_MPU_Enable+0x1c>)
 80007ba:	f040 0001 	orr.w	r0, r0, #1
 80007be:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80007c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80007ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007ce:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80007d2:	4770      	bx	lr
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80007d8:	7843      	ldrb	r3, [r0, #1]
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <HAL_MPU_ConfigRegion+0x54>)
{
 80007dc:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80007de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 80007e2:	7801      	ldrb	r1, [r0, #0]
 80007e4:	b1e9      	cbz	r1, 8000822 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80007e6:	6843      	ldr	r3, [r0, #4]
 80007e8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80007ec:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80007ee:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80007f0:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80007f2:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007f6:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80007f8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007fa:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80007fe:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000800:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000804:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000806:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800080a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800080c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000810:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000812:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000816:	7a01      	ldrb	r1, [r0, #8]
 8000818:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800081c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000820:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8000822:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8000826:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 800082a:	e7f9      	b.n	8000820 <HAL_MPU_ConfigRegion+0x48>
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000834:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80009f0 <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800083a:	4a6b      	ldr	r2, [pc, #428]	; (80009e8 <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 800083c:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083e:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000840:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000842:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000846:	43ac      	bics	r4, r5
 8000848:	f040 80b4 	bne.w	80009b4 <HAL_GPIO_Init+0x184>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800084c:	684d      	ldr	r5, [r1, #4]
 800084e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000852:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000854:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000858:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800085c:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800085e:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000860:	2f01      	cmp	r7, #1
 8000862:	d834      	bhi.n	80008ce <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8000864:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000866:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800086a:	68cf      	ldr	r7, [r1, #12]
 800086c:	fa07 f708 	lsl.w	r7, r7, r8
 8000870:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000874:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000876:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000878:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800087c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000880:	409f      	lsls	r7, r3
 8000882:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000886:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000888:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800088a:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800088c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000890:	688f      	ldr	r7, [r1, #8]
 8000892:	fa07 f708 	lsl.w	r7, r7, r8
 8000896:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800089a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800089c:	d119      	bne.n	80008d2 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800089e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008a2:	f003 0b07 	and.w	fp, r3, #7
 80008a6:	f04f 0e0f 	mov.w	lr, #15
 80008aa:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80008ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80008b2:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008b6:	fa0e fe0b 	lsl.w	lr, lr, fp
 80008ba:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80008be:	690f      	ldr	r7, [r1, #16]
 80008c0:	fa07 f70b 	lsl.w	r7, r7, fp
 80008c4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80008c8:	f8ca 7020 	str.w	r7, [sl, #32]
 80008cc:	e001      	b.n	80008d2 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008ce:	2c03      	cmp	r4, #3
 80008d0:	d1da      	bne.n	8000888 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80008d2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008d4:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008d8:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008dc:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008e0:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 80008e4:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008e6:	d065      	beq.n	80009b4 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e8:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80008ec:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008f0:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80008f8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008fc:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8000902:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8000906:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800090a:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800090e:	9401      	str	r4, [sp, #4]
 8000910:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000912:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 8000914:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000918:	40bc      	lsls	r4, r7
 800091a:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800091e:	4c33      	ldr	r4, [pc, #204]	; (80009ec <HAL_GPIO_Init+0x1bc>)
 8000920:	42a0      	cmp	r0, r4
 8000922:	d04e      	beq.n	80009c2 <HAL_GPIO_Init+0x192>
 8000924:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000928:	42a0      	cmp	r0, r4
 800092a:	d04c      	beq.n	80009c6 <HAL_GPIO_Init+0x196>
 800092c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000930:	42a0      	cmp	r0, r4
 8000932:	d04a      	beq.n	80009ca <HAL_GPIO_Init+0x19a>
 8000934:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000938:	42a0      	cmp	r0, r4
 800093a:	d048      	beq.n	80009ce <HAL_GPIO_Init+0x19e>
 800093c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000940:	42a0      	cmp	r0, r4
 8000942:	d046      	beq.n	80009d2 <HAL_GPIO_Init+0x1a2>
 8000944:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000948:	42a0      	cmp	r0, r4
 800094a:	d044      	beq.n	80009d6 <HAL_GPIO_Init+0x1a6>
 800094c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000950:	42a0      	cmp	r0, r4
 8000952:	d042      	beq.n	80009da <HAL_GPIO_Init+0x1aa>
 8000954:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000958:	42a0      	cmp	r0, r4
 800095a:	d040      	beq.n	80009de <HAL_GPIO_Init+0x1ae>
 800095c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000960:	42a0      	cmp	r0, r4
 8000962:	d03e      	beq.n	80009e2 <HAL_GPIO_Init+0x1b2>
 8000964:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000968:	42a0      	cmp	r0, r4
 800096a:	bf0c      	ite	eq
 800096c:	2409      	moveq	r4, #9
 800096e:	240a      	movne	r4, #10
 8000970:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000972:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000974:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000978:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800097a:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800097e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000980:	bf54      	ite	pl
 8000982:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000984:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000988:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 800098a:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800098c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800098e:	bf54      	ite	pl
 8000990:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000992:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000996:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8000998:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800099a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800099c:	bf54      	ite	pl
 800099e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80009a0:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009a4:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80009a6:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80009a8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80009aa:	bf54      	ite	pl
 80009ac:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80009ae:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80009b2:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80009b4:	3301      	adds	r3, #1
 80009b6:	2b10      	cmp	r3, #16
 80009b8:	f47f af40 	bne.w	800083c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80009bc:	b003      	add	sp, #12
 80009be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009c2:	2400      	movs	r4, #0
 80009c4:	e7d4      	b.n	8000970 <HAL_GPIO_Init+0x140>
 80009c6:	2401      	movs	r4, #1
 80009c8:	e7d2      	b.n	8000970 <HAL_GPIO_Init+0x140>
 80009ca:	2402      	movs	r4, #2
 80009cc:	e7d0      	b.n	8000970 <HAL_GPIO_Init+0x140>
 80009ce:	2403      	movs	r4, #3
 80009d0:	e7ce      	b.n	8000970 <HAL_GPIO_Init+0x140>
 80009d2:	2404      	movs	r4, #4
 80009d4:	e7cc      	b.n	8000970 <HAL_GPIO_Init+0x140>
 80009d6:	2405      	movs	r4, #5
 80009d8:	e7ca      	b.n	8000970 <HAL_GPIO_Init+0x140>
 80009da:	2406      	movs	r4, #6
 80009dc:	e7c8      	b.n	8000970 <HAL_GPIO_Init+0x140>
 80009de:	2407      	movs	r4, #7
 80009e0:	e7c6      	b.n	8000970 <HAL_GPIO_Init+0x140>
 80009e2:	2408      	movs	r4, #8
 80009e4:	e7c4      	b.n	8000970 <HAL_GPIO_Init+0x140>
 80009e6:	bf00      	nop
 80009e8:	40013c00 	.word	0x40013c00
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009f4:	b10a      	cbz	r2, 80009fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80009f6:	6181      	str	r1, [r0, #24]
  }
}
 80009f8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80009fa:	0409      	lsls	r1, r1, #16
 80009fc:	e7fb      	b.n	80009f6 <HAL_GPIO_WritePin+0x2>

080009fe <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80009fe:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a00:	ea01 0203 	and.w	r2, r1, r3
 8000a04:	ea21 0103 	bic.w	r1, r1, r3
 8000a08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000a0c:	6181      	str	r1, [r0, #24]
}
 8000a0e:	4770      	bx	lr

08000a10 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000a12:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000a16:	4c19      	ldr	r4, [pc, #100]	; (8000a7c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a2e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a30:	f7ff fe36 	bl	80006a0 <HAL_GetTick>
 8000a34:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000a36:	6863      	ldr	r3, [r4, #4]
 8000a38:	03da      	lsls	r2, r3, #15
 8000a3a:	d50c      	bpl.n	8000a56 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000a3c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000a3e:	4d0f      	ldr	r5, [pc, #60]	; (8000a7c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000a46:	f7ff fe2b 	bl	80006a0 <HAL_GetTick>
 8000a4a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000a4c:	686b      	ldr	r3, [r5, #4]
 8000a4e:	039b      	lsls	r3, r3, #14
 8000a50:	d50a      	bpl.n	8000a68 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000a52:	2000      	movs	r0, #0
 8000a54:	e006      	b.n	8000a64 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000a56:	f7ff fe23 	bl	80006a0 <HAL_GetTick>
 8000a5a:	1b40      	subs	r0, r0, r5
 8000a5c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000a60:	d9e9      	bls.n	8000a36 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000a62:	2003      	movs	r0, #3
}
 8000a64:	b003      	add	sp, #12
 8000a66:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000a68:	f7ff fe1a 	bl	80006a0 <HAL_GetTick>
 8000a6c:	1b00      	subs	r0, r0, r4
 8000a6e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000a72:	d9eb      	bls.n	8000a4c <HAL_PWREx_EnableOverDrive+0x3c>
 8000a74:	e7f5      	b.n	8000a62 <HAL_PWREx_EnableOverDrive+0x52>
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40007000 	.word	0x40007000

08000a80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a84:	4604      	mov	r4, r0
 8000a86:	b340      	cbz	r0, 8000ada <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a88:	6803      	ldr	r3, [r0, #0]
 8000a8a:	07db      	lsls	r3, r3, #31
 8000a8c:	d410      	bmi.n	8000ab0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a8e:	6823      	ldr	r3, [r4, #0]
 8000a90:	079f      	lsls	r7, r3, #30
 8000a92:	d461      	bmi.n	8000b58 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	0719      	lsls	r1, r3, #28
 8000a98:	f100 80a6 	bmi.w	8000be8 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a9c:	6823      	ldr	r3, [r4, #0]
 8000a9e:	075a      	lsls	r2, r3, #29
 8000aa0:	f100 80c7 	bmi.w	8000c32 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aa4:	69a2      	ldr	r2, [r4, #24]
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	f040 8130 	bne.w	8000d0c <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000aac:	2000      	movs	r0, #0
 8000aae:	e02c      	b.n	8000b0a <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ab0:	4b94      	ldr	r3, [pc, #592]	; (8000d04 <HAL_RCC_OscConfig+0x284>)
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	f002 020c 	and.w	r2, r2, #12
 8000ab8:	2a04      	cmp	r2, #4
 8000aba:	d007      	beq.n	8000acc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	f002 020c 	and.w	r2, r2, #12
 8000ac2:	2a08      	cmp	r2, #8
 8000ac4:	d10b      	bne.n	8000ade <HAL_RCC_OscConfig+0x5e>
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	025e      	lsls	r6, r3, #9
 8000aca:	d508      	bpl.n	8000ade <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000acc:	4b8d      	ldr	r3, [pc, #564]	; (8000d04 <HAL_RCC_OscConfig+0x284>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	039d      	lsls	r5, r3, #14
 8000ad2:	d5dc      	bpl.n	8000a8e <HAL_RCC_OscConfig+0xe>
 8000ad4:	6863      	ldr	r3, [r4, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1d9      	bne.n	8000a8e <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8000ada:	2001      	movs	r0, #1
 8000adc:	e015      	b.n	8000b0a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ade:	6863      	ldr	r3, [r4, #4]
 8000ae0:	4d88      	ldr	r5, [pc, #544]	; (8000d04 <HAL_RCC_OscConfig+0x284>)
 8000ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ae6:	d113      	bne.n	8000b10 <HAL_RCC_OscConfig+0x90>
 8000ae8:	682b      	ldr	r3, [r5, #0]
 8000aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000af0:	f7ff fdd6 	bl	80006a0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af4:	4e83      	ldr	r6, [pc, #524]	; (8000d04 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8000af6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af8:	6833      	ldr	r3, [r6, #0]
 8000afa:	0398      	lsls	r0, r3, #14
 8000afc:	d4c7      	bmi.n	8000a8e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000afe:	f7ff fdcf 	bl	80006a0 <HAL_GetTick>
 8000b02:	1b40      	subs	r0, r0, r5
 8000b04:	2864      	cmp	r0, #100	; 0x64
 8000b06:	d9f7      	bls.n	8000af8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8000b08:	2003      	movs	r0, #3
}
 8000b0a:	b002      	add	sp, #8
 8000b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b10:	b99b      	cbnz	r3, 8000b3a <HAL_RCC_OscConfig+0xba>
 8000b12:	682b      	ldr	r3, [r5, #0]
 8000b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b18:	602b      	str	r3, [r5, #0]
 8000b1a:	682b      	ldr	r3, [r5, #0]
 8000b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b20:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b22:	f7ff fdbd 	bl	80006a0 <HAL_GetTick>
 8000b26:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b28:	682b      	ldr	r3, [r5, #0]
 8000b2a:	0399      	lsls	r1, r3, #14
 8000b2c:	d5af      	bpl.n	8000a8e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fdb7 	bl	80006a0 <HAL_GetTick>
 8000b32:	1b80      	subs	r0, r0, r6
 8000b34:	2864      	cmp	r0, #100	; 0x64
 8000b36:	d9f7      	bls.n	8000b28 <HAL_RCC_OscConfig+0xa8>
 8000b38:	e7e6      	b.n	8000b08 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b3e:	682b      	ldr	r3, [r5, #0]
 8000b40:	d103      	bne.n	8000b4a <HAL_RCC_OscConfig+0xca>
 8000b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b46:	602b      	str	r3, [r5, #0]
 8000b48:	e7ce      	b.n	8000ae8 <HAL_RCC_OscConfig+0x68>
 8000b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b4e:	602b      	str	r3, [r5, #0]
 8000b50:	682b      	ldr	r3, [r5, #0]
 8000b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b56:	e7ca      	b.n	8000aee <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b58:	4b6a      	ldr	r3, [pc, #424]	; (8000d04 <HAL_RCC_OscConfig+0x284>)
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	f012 0f0c 	tst.w	r2, #12
 8000b60:	d007      	beq.n	8000b72 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	f002 020c 	and.w	r2, r2, #12
 8000b68:	2a08      	cmp	r2, #8
 8000b6a:	d111      	bne.n	8000b90 <HAL_RCC_OscConfig+0x110>
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	025a      	lsls	r2, r3, #9
 8000b70:	d40e      	bmi.n	8000b90 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b72:	4a64      	ldr	r2, [pc, #400]	; (8000d04 <HAL_RCC_OscConfig+0x284>)
 8000b74:	6813      	ldr	r3, [r2, #0]
 8000b76:	079b      	lsls	r3, r3, #30
 8000b78:	d502      	bpl.n	8000b80 <HAL_RCC_OscConfig+0x100>
 8000b7a:	68e3      	ldr	r3, [r4, #12]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d1ac      	bne.n	8000ada <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b80:	6813      	ldr	r3, [r2, #0]
 8000b82:	6921      	ldr	r1, [r4, #16]
 8000b84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b88:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b8c:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b8e:	e781      	b.n	8000a94 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000b90:	68e3      	ldr	r3, [r4, #12]
 8000b92:	4d5c      	ldr	r5, [pc, #368]	; (8000d04 <HAL_RCC_OscConfig+0x284>)
 8000b94:	b1bb      	cbz	r3, 8000bc6 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8000b96:	682b      	ldr	r3, [r5, #0]
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b9e:	f7ff fd7f 	bl	80006a0 <HAL_GetTick>
 8000ba2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	079f      	lsls	r7, r3, #30
 8000ba8:	d507      	bpl.n	8000bba <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000baa:	682b      	ldr	r3, [r5, #0]
 8000bac:	6922      	ldr	r2, [r4, #16]
 8000bae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bb2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bb6:	602b      	str	r3, [r5, #0]
 8000bb8:	e76c      	b.n	8000a94 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bba:	f7ff fd71 	bl	80006a0 <HAL_GetTick>
 8000bbe:	1b80      	subs	r0, r0, r6
 8000bc0:	2802      	cmp	r0, #2
 8000bc2:	d9ef      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x124>
 8000bc4:	e7a0      	b.n	8000b08 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	f023 0301 	bic.w	r3, r3, #1
 8000bcc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bce:	f7ff fd67 	bl	80006a0 <HAL_GetTick>
 8000bd2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bd4:	682b      	ldr	r3, [r5, #0]
 8000bd6:	0798      	lsls	r0, r3, #30
 8000bd8:	f57f af5c 	bpl.w	8000a94 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bdc:	f7ff fd60 	bl	80006a0 <HAL_GetTick>
 8000be0:	1b80      	subs	r0, r0, r6
 8000be2:	2802      	cmp	r0, #2
 8000be4:	d9f6      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x154>
 8000be6:	e78f      	b.n	8000b08 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000be8:	6963      	ldr	r3, [r4, #20]
 8000bea:	4d46      	ldr	r5, [pc, #280]	; (8000d04 <HAL_RCC_OscConfig+0x284>)
 8000bec:	b183      	cbz	r3, 8000c10 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8000bee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000bf6:	f7ff fd53 	bl	80006a0 <HAL_GetTick>
 8000bfa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bfc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000bfe:	079b      	lsls	r3, r3, #30
 8000c00:	f53f af4c 	bmi.w	8000a9c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c04:	f7ff fd4c 	bl	80006a0 <HAL_GetTick>
 8000c08:	1b80      	subs	r0, r0, r6
 8000c0a:	2802      	cmp	r0, #2
 8000c0c:	d9f6      	bls.n	8000bfc <HAL_RCC_OscConfig+0x17c>
 8000c0e:	e77b      	b.n	8000b08 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8000c10:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c12:	f023 0301 	bic.w	r3, r3, #1
 8000c16:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000c18:	f7ff fd42 	bl	80006a0 <HAL_GetTick>
 8000c1c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c1e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c20:	079f      	lsls	r7, r3, #30
 8000c22:	f57f af3b 	bpl.w	8000a9c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c26:	f7ff fd3b 	bl	80006a0 <HAL_GetTick>
 8000c2a:	1b80      	subs	r0, r0, r6
 8000c2c:	2802      	cmp	r0, #2
 8000c2e:	d9f6      	bls.n	8000c1e <HAL_RCC_OscConfig+0x19e>
 8000c30:	e76a      	b.n	8000b08 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c32:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <HAL_RCC_OscConfig+0x284>)
 8000c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c36:	00d0      	lsls	r0, r2, #3
 8000c38:	d427      	bmi.n	8000c8a <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000c3c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c42:	641a      	str	r2, [r3, #64]	; 0x40
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c4e:	4d2e      	ldr	r5, [pc, #184]	; (8000d08 <HAL_RCC_OscConfig+0x288>)
 8000c50:	682b      	ldr	r3, [r5, #0]
 8000c52:	05d9      	lsls	r1, r3, #23
 8000c54:	d51b      	bpl.n	8000c8e <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c56:	68a3      	ldr	r3, [r4, #8]
 8000c58:	4d2a      	ldr	r5, [pc, #168]	; (8000d04 <HAL_RCC_OscConfig+0x284>)
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d127      	bne.n	8000cae <HAL_RCC_OscConfig+0x22e>
 8000c5e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c66:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c6a:	f7ff fd19 	bl	80006a0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c6e:	4e25      	ldr	r6, [pc, #148]	; (8000d04 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8000c70:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c72:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000c74:	079b      	lsls	r3, r3, #30
 8000c76:	d53f      	bpl.n	8000cf8 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8000c78:	2f00      	cmp	r7, #0
 8000c7a:	f43f af13 	beq.w	8000aa4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c7e:	4a21      	ldr	r2, [pc, #132]	; (8000d04 <HAL_RCC_OscConfig+0x284>)
 8000c80:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	e70c      	b.n	8000aa4 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8000c8a:	2700      	movs	r7, #0
 8000c8c:	e7df      	b.n	8000c4e <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 8000c8e:	682b      	ldr	r3, [r5, #0]
 8000c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c94:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000c96:	f7ff fd03 	bl	80006a0 <HAL_GetTick>
 8000c9a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	05da      	lsls	r2, r3, #23
 8000ca0:	d4d9      	bmi.n	8000c56 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ca2:	f7ff fcfd 	bl	80006a0 <HAL_GetTick>
 8000ca6:	1b80      	subs	r0, r0, r6
 8000ca8:	2864      	cmp	r0, #100	; 0x64
 8000caa:	d9f7      	bls.n	8000c9c <HAL_RCC_OscConfig+0x21c>
 8000cac:	e72c      	b.n	8000b08 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cae:	b9ab      	cbnz	r3, 8000cdc <HAL_RCC_OscConfig+0x25c>
 8000cb0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cb2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cb6:	f023 0301 	bic.w	r3, r3, #1
 8000cba:	672b      	str	r3, [r5, #112]	; 0x70
 8000cbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cbe:	f023 0304 	bic.w	r3, r3, #4
 8000cc2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000cc4:	f7ff fcec 	bl	80006a0 <HAL_GetTick>
 8000cc8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ccc:	0798      	lsls	r0, r3, #30
 8000cce:	d5d3      	bpl.n	8000c78 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cd0:	f7ff fce6 	bl	80006a0 <HAL_GetTick>
 8000cd4:	1b80      	subs	r0, r0, r6
 8000cd6:	4540      	cmp	r0, r8
 8000cd8:	d9f7      	bls.n	8000cca <HAL_RCC_OscConfig+0x24a>
 8000cda:	e715      	b.n	8000b08 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cdc:	2b05      	cmp	r3, #5
 8000cde:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ce0:	d103      	bne.n	8000cea <HAL_RCC_OscConfig+0x26a>
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	672b      	str	r3, [r5, #112]	; 0x70
 8000ce8:	e7b9      	b.n	8000c5e <HAL_RCC_OscConfig+0x1de>
 8000cea:	f023 0301 	bic.w	r3, r3, #1
 8000cee:	672b      	str	r3, [r5, #112]	; 0x70
 8000cf0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cf2:	f023 0304 	bic.w	r3, r3, #4
 8000cf6:	e7b5      	b.n	8000c64 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cf8:	f7ff fcd2 	bl	80006a0 <HAL_GetTick>
 8000cfc:	1b40      	subs	r0, r0, r5
 8000cfe:	4540      	cmp	r0, r8
 8000d00:	d9b7      	bls.n	8000c72 <HAL_RCC_OscConfig+0x1f2>
 8000d02:	e701      	b.n	8000b08 <HAL_RCC_OscConfig+0x88>
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d0c:	4d3c      	ldr	r5, [pc, #240]	; (8000e00 <HAL_RCC_OscConfig+0x380>)
 8000d0e:	68ab      	ldr	r3, [r5, #8]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	d042      	beq.n	8000d9e <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_PLL_DISABLE();
 8000d18:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d1a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000d1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d20:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d22:	d12f      	bne.n	8000d84 <HAL_RCC_OscConfig+0x304>
        tickstart = HAL_GetTick();
 8000d24:	f7ff fcbc 	bl	80006a0 <HAL_GetTick>
 8000d28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d2a:	682b      	ldr	r3, [r5, #0]
 8000d2c:	0199      	lsls	r1, r3, #6
 8000d2e:	d423      	bmi.n	8000d78 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d30:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d38:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000d44:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000d48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d4a:	0852      	lsrs	r2, r2, #1
 8000d4c:	3a01      	subs	r2, #1
 8000d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d52:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d54:	682b      	ldr	r3, [r5, #0]
 8000d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fca0 	bl	80006a0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d60:	4d27      	ldr	r5, [pc, #156]	; (8000e00 <HAL_RCC_OscConfig+0x380>)
        tickstart = HAL_GetTick();
 8000d62:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d64:	682b      	ldr	r3, [r5, #0]
 8000d66:	019a      	lsls	r2, r3, #6
 8000d68:	f53f aea0 	bmi.w	8000aac <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d6c:	f7ff fc98 	bl	80006a0 <HAL_GetTick>
 8000d70:	1b00      	subs	r0, r0, r4
 8000d72:	2802      	cmp	r0, #2
 8000d74:	d9f6      	bls.n	8000d64 <HAL_RCC_OscConfig+0x2e4>
 8000d76:	e6c7      	b.n	8000b08 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d78:	f7ff fc92 	bl	80006a0 <HAL_GetTick>
 8000d7c:	1b80      	subs	r0, r0, r6
 8000d7e:	2802      	cmp	r0, #2
 8000d80:	d9d3      	bls.n	8000d2a <HAL_RCC_OscConfig+0x2aa>
 8000d82:	e6c1      	b.n	8000b08 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8000d84:	f7ff fc8c 	bl	80006a0 <HAL_GetTick>
 8000d88:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d8a:	682b      	ldr	r3, [r5, #0]
 8000d8c:	019b      	lsls	r3, r3, #6
 8000d8e:	f57f ae8d 	bpl.w	8000aac <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d92:	f7ff fc85 	bl	80006a0 <HAL_GetTick>
 8000d96:	1b00      	subs	r0, r0, r4
 8000d98:	2802      	cmp	r0, #2
 8000d9a:	d9f6      	bls.n	8000d8a <HAL_RCC_OscConfig+0x30a>
 8000d9c:	e6b4      	b.n	8000b08 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000d9e:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8000da0:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000da2:	f43f ae9a 	beq.w	8000ada <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000da6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000daa:	69e1      	ldr	r1, [r4, #28]
 8000dac:	428a      	cmp	r2, r1
 8000dae:	f47f ae94 	bne.w	8000ada <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000db2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000db6:	6a21      	ldr	r1, [r4, #32]
 8000db8:	428a      	cmp	r2, r1
 8000dba:	f47f ae8e 	bne.w	8000ada <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000dbe:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000dc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000dca:	f47f ae86 	bne.w	8000ada <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000dce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dd0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000dd4:	0852      	lsrs	r2, r2, #1
 8000dd6:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000dd8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000ddc:	f47f ae7d 	bne.w	8000ada <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000de0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000de4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000de6:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8000dea:	f47f ae76 	bne.w	8000ada <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8000dee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8000df2:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000df4:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8000df8:	f43f ae58 	beq.w	8000aac <HAL_RCC_OscConfig+0x2c>
 8000dfc:	e66d      	b.n	8000ada <HAL_RCC_OscConfig+0x5a>
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e04:	4913      	ldr	r1, [pc, #76]	; (8000e54 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000e06:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e08:	688b      	ldr	r3, [r1, #8]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d01b      	beq.n	8000e4a <HAL_RCC_GetSysClockFreq+0x46>
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	d11b      	bne.n	8000e4e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e16:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000e18:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e1a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e1c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000e20:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e24:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e28:	bf1a      	itte	ne
 8000e2a:	480b      	ldrne	r0, [pc, #44]	; (8000e58 <HAL_RCC_GetSysClockFreq+0x54>)
 8000e2c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e2e:	480b      	ldreq	r0, [pc, #44]	; (8000e5c <HAL_RCC_GetSysClockFreq+0x58>)
 8000e30:	fba1 0100 	umull	r0, r1, r1, r0
 8000e34:	f7ff fa00 	bl	8000238 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_RCC_GetSysClockFreq+0x50>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e40:	3301      	adds	r3, #1
 8000e42:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8000e44:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e48:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e4a:	4803      	ldr	r0, [pc, #12]	; (8000e58 <HAL_RCC_GetSysClockFreq+0x54>)
 8000e4c:	e7fc      	b.n	8000e48 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8000e4e:	4803      	ldr	r0, [pc, #12]	; (8000e5c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000e50:	e7fa      	b.n	8000e48 <HAL_RCC_GetSysClockFreq+0x44>
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	007a1200 	.word	0x007a1200
 8000e5c:	00f42400 	.word	0x00f42400

08000e60 <HAL_RCC_ClockConfig>:
{
 8000e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e64:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000e66:	4604      	mov	r4, r0
 8000e68:	b910      	cbnz	r0, 8000e70 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e6a:	2001      	movs	r0, #1
}
 8000e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e70:	4a45      	ldr	r2, [pc, #276]	; (8000f88 <HAL_RCC_ClockConfig+0x128>)
 8000e72:	6813      	ldr	r3, [r2, #0]
 8000e74:	f003 030f 	and.w	r3, r3, #15
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d328      	bcc.n	8000ece <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e7c:	6821      	ldr	r1, [r4, #0]
 8000e7e:	078f      	lsls	r7, r1, #30
 8000e80:	d430      	bmi.n	8000ee4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e82:	07c8      	lsls	r0, r1, #31
 8000e84:	d443      	bmi.n	8000f0e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e86:	4a40      	ldr	r2, [pc, #256]	; (8000f88 <HAL_RCC_ClockConfig+0x128>)
 8000e88:	6813      	ldr	r3, [r2, #0]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	42ab      	cmp	r3, r5
 8000e90:	d866      	bhi.n	8000f60 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e92:	6822      	ldr	r2, [r4, #0]
 8000e94:	0751      	lsls	r1, r2, #29
 8000e96:	d46f      	bmi.n	8000f78 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e98:	0713      	lsls	r3, r2, #28
 8000e9a:	d507      	bpl.n	8000eac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e9c:	4a3b      	ldr	r2, [pc, #236]	; (8000f8c <HAL_RCC_ClockConfig+0x12c>)
 8000e9e:	6921      	ldr	r1, [r4, #16]
 8000ea0:	6893      	ldr	r3, [r2, #8]
 8000ea2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ea6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000eaa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000eac:	f7ff ffaa 	bl	8000e04 <HAL_RCC_GetSysClockFreq>
 8000eb0:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <HAL_RCC_ClockConfig+0x12c>)
 8000eb2:	4a37      	ldr	r2, [pc, #220]	; (8000f90 <HAL_RCC_ClockConfig+0x130>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	40d8      	lsrs	r0, r3
 8000ebe:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <HAL_RCC_ClockConfig+0x134>)
 8000ec0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000ec2:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <HAL_RCC_ClockConfig+0x138>)
 8000ec4:	6818      	ldr	r0, [r3, #0]
 8000ec6:	f7ff fba7 	bl	8000618 <HAL_InitTick>
  return HAL_OK;
 8000eca:	2000      	movs	r0, #0
 8000ecc:	e7ce      	b.n	8000e6c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ece:	6813      	ldr	r3, [r2, #0]
 8000ed0:	f023 030f 	bic.w	r3, r3, #15
 8000ed4:	430b      	orrs	r3, r1
 8000ed6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ed8:	6813      	ldr	r3, [r2, #0]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d1c3      	bne.n	8000e6a <HAL_RCC_ClockConfig+0xa>
 8000ee2:	e7cb      	b.n	8000e7c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ee4:	f011 0f04 	tst.w	r1, #4
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <HAL_RCC_ClockConfig+0x12c>)
 8000eea:	d003      	beq.n	8000ef4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000ef2:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ef4:	070e      	lsls	r6, r1, #28
 8000ef6:	d503      	bpl.n	8000f00 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000efe:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	68a0      	ldr	r0, [r4, #8]
 8000f04:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f08:	4302      	orrs	r2, r0
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	e7b9      	b.n	8000e82 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f0e:	6861      	ldr	r1, [r4, #4]
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <HAL_RCC_ClockConfig+0x12c>)
 8000f12:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f14:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f16:	d11b      	bne.n	8000f50 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f18:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1c:	d0a5      	beq.n	8000e6a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f1e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f20:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f24:	4f19      	ldr	r7, [pc, #100]	; (8000f8c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f26:	f022 0203 	bic.w	r2, r2, #3
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000f2e:	f7ff fbb7 	bl	80006a0 <HAL_GetTick>
 8000f32:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	6862      	ldr	r2, [r4, #4]
 8000f38:	f003 030c 	and.w	r3, r3, #12
 8000f3c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f40:	d0a1      	beq.n	8000e86 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f42:	f7ff fbad 	bl	80006a0 <HAL_GetTick>
 8000f46:	1b80      	subs	r0, r0, r6
 8000f48:	4540      	cmp	r0, r8
 8000f4a:	d9f3      	bls.n	8000f34 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	e78d      	b.n	8000e6c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f50:	2902      	cmp	r1, #2
 8000f52:	d102      	bne.n	8000f5a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f54:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000f58:	e7e0      	b.n	8000f1c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5a:	f012 0f02 	tst.w	r2, #2
 8000f5e:	e7dd      	b.n	8000f1c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f60:	6813      	ldr	r3, [r2, #0]
 8000f62:	f023 030f 	bic.w	r3, r3, #15
 8000f66:	432b      	orrs	r3, r5
 8000f68:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f6a:	6813      	ldr	r3, [r2, #0]
 8000f6c:	f003 030f 	and.w	r3, r3, #15
 8000f70:	42ab      	cmp	r3, r5
 8000f72:	f47f af7a 	bne.w	8000e6a <HAL_RCC_ClockConfig+0xa>
 8000f76:	e78c      	b.n	8000e92 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f78:	4904      	ldr	r1, [pc, #16]	; (8000f8c <HAL_RCC_ClockConfig+0x12c>)
 8000f7a:	68e0      	ldr	r0, [r4, #12]
 8000f7c:	688b      	ldr	r3, [r1, #8]
 8000f7e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000f82:	4303      	orrs	r3, r0
 8000f84:	608b      	str	r3, [r1, #8]
 8000f86:	e787      	b.n	8000e98 <HAL_RCC_ClockConfig+0x38>
 8000f88:	40023c00 	.word	0x40023c00
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	080019ea 	.word	0x080019ea
 8000f94:	20000010 	.word	0x20000010
 8000f98:	20000018 	.word	0x20000018

08000f9c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000fa6:	5cd3      	ldrb	r3, [r2, r3]
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000faa:	6810      	ldr	r0, [r2, #0]
}
 8000fac:	40d8      	lsrs	r0, r3
 8000fae:	4770      	bx	lr
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	080019fa 	.word	0x080019fa
 8000fb8:	20000010 	.word	0x20000010

08000fbc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000fc6:	5cd3      	ldrb	r3, [r2, r3]
 8000fc8:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000fca:	6810      	ldr	r0, [r2, #0]
}
 8000fcc:	40d8      	lsrs	r0, r3
 8000fce:	4770      	bx	lr
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	080019fa 	.word	0x080019fa
 8000fd8:	20000010 	.word	0x20000010

08000fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000fe0:	69c0      	ldr	r0, [r0, #28]
 8000fe2:	6921      	ldr	r1, [r4, #16]
 8000fe4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000fe6:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000fec:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000fee:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000ff0:	4991      	ldr	r1, [pc, #580]	; (8001238 <UART_SetConfig+0x25c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ff2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000ff4:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8000ff6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000ff8:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ffa:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000ffc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001004:	430a      	orrs	r2, r1
 8001006:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001008:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800100a:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800100c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800100e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8001012:	430a      	orrs	r2, r1
 8001014:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001016:	4a89      	ldr	r2, [pc, #548]	; (800123c <UART_SetConfig+0x260>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d11b      	bne.n	8001054 <UART_SetConfig+0x78>
 800101c:	4b88      	ldr	r3, [pc, #544]	; (8001240 <UART_SetConfig+0x264>)
 800101e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	3b01      	subs	r3, #1
 8001028:	2b02      	cmp	r3, #2
 800102a:	f200 80e8 	bhi.w	80011fe <UART_SetConfig+0x222>
 800102e:	4a85      	ldr	r2, [pc, #532]	; (8001244 <UART_SetConfig+0x268>)
 8001030:	5cd3      	ldrb	r3, [r2, r3]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001032:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001036:	f040 80b9 	bne.w	80011ac <UART_SetConfig+0x1d0>
  {
    switch (clocksource)
 800103a:	2b08      	cmp	r3, #8
 800103c:	d828      	bhi.n	8001090 <UART_SetConfig+0xb4>
 800103e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001042:	0096      	.short	0x0096
 8001044:	009e00e1 	.word	0x009e00e1
 8001048:	00db0027 	.word	0x00db0027
 800104c:	00270027 	.word	0x00270027
 8001050:	009f0027 	.word	0x009f0027
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001054:	4a7c      	ldr	r2, [pc, #496]	; (8001248 <UART_SetConfig+0x26c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d108      	bne.n	800106c <UART_SetConfig+0x90>
 800105a:	4b79      	ldr	r3, [pc, #484]	; (8001240 <UART_SetConfig+0x264>)
 800105c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001060:	4b78      	ldr	r3, [pc, #480]	; (8001244 <UART_SetConfig+0x268>)
 8001062:	f002 020c 	and.w	r2, r2, #12
 8001066:	4413      	add	r3, r2
 8001068:	78db      	ldrb	r3, [r3, #3]
 800106a:	e7e2      	b.n	8001032 <UART_SetConfig+0x56>
 800106c:	4a77      	ldr	r2, [pc, #476]	; (800124c <UART_SetConfig+0x270>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d118      	bne.n	80010a4 <UART_SetConfig+0xc8>
 8001072:	4b73      	ldr	r3, [pc, #460]	; (8001240 <UART_SetConfig+0x264>)
 8001074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001078:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800107c:	2b20      	cmp	r3, #32
 800107e:	f000 80b3 	beq.w	80011e8 <UART_SetConfig+0x20c>
 8001082:	d807      	bhi.n	8001094 <UART_SetConfig+0xb8>
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80c0 	beq.w	800120a <UART_SetConfig+0x22e>
 800108a:	2b10      	cmp	r3, #16
 800108c:	f000 80b1 	beq.w	80011f2 <UART_SetConfig+0x216>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001090:	2001      	movs	r0, #1
 8001092:	e070      	b.n	8001176 <UART_SetConfig+0x19a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001094:	2b30      	cmp	r3, #48	; 0x30
 8001096:	d1fb      	bne.n	8001090 <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001098:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800109c:	d070      	beq.n	8001180 <UART_SetConfig+0x1a4>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800109e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010a2:	e0b9      	b.n	8001218 <UART_SetConfig+0x23c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010a4:	4a6a      	ldr	r2, [pc, #424]	; (8001250 <UART_SetConfig+0x274>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10f      	bne.n	80010ca <UART_SetConfig+0xee>
 80010aa:	4b65      	ldr	r3, [pc, #404]	; (8001240 <UART_SetConfig+0x264>)
 80010ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80010b4:	2b80      	cmp	r3, #128	; 0x80
 80010b6:	f000 8097 	beq.w	80011e8 <UART_SetConfig+0x20c>
 80010ba:	d804      	bhi.n	80010c6 <UART_SetConfig+0xea>
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80a4 	beq.w	800120a <UART_SetConfig+0x22e>
 80010c2:	2b40      	cmp	r3, #64	; 0x40
 80010c4:	e7e2      	b.n	800108c <UART_SetConfig+0xb0>
 80010c6:	2bc0      	cmp	r3, #192	; 0xc0
 80010c8:	e7e5      	b.n	8001096 <UART_SetConfig+0xba>
 80010ca:	4a62      	ldr	r2, [pc, #392]	; (8001254 <UART_SetConfig+0x278>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d112      	bne.n	80010f6 <UART_SetConfig+0x11a>
 80010d0:	4b5b      	ldr	r3, [pc, #364]	; (8001240 <UART_SetConfig+0x264>)
 80010d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010de:	f000 8083 	beq.w	80011e8 <UART_SetConfig+0x20c>
 80010e2:	d805      	bhi.n	80010f0 <UART_SetConfig+0x114>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8090 	beq.w	800120a <UART_SetConfig+0x22e>
 80010ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010ee:	e7cd      	b.n	800108c <UART_SetConfig+0xb0>
 80010f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010f4:	e7cf      	b.n	8001096 <UART_SetConfig+0xba>
 80010f6:	4a58      	ldr	r2, [pc, #352]	; (8001258 <UART_SetConfig+0x27c>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d110      	bne.n	800111e <UART_SetConfig+0x142>
 80010fc:	4b50      	ldr	r3, [pc, #320]	; (8001240 <UART_SetConfig+0x264>)
 80010fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001102:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800110a:	d06d      	beq.n	80011e8 <UART_SetConfig+0x20c>
 800110c:	d804      	bhi.n	8001118 <UART_SetConfig+0x13c>
 800110e:	2b00      	cmp	r3, #0
 8001110:	d075      	beq.n	80011fe <UART_SetConfig+0x222>
 8001112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001116:	e7b9      	b.n	800108c <UART_SetConfig+0xb0>
 8001118:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800111c:	e7bb      	b.n	8001096 <UART_SetConfig+0xba>
 800111e:	4a4f      	ldr	r2, [pc, #316]	; (800125c <UART_SetConfig+0x280>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d110      	bne.n	8001146 <UART_SetConfig+0x16a>
 8001124:	4b46      	ldr	r3, [pc, #280]	; (8001240 <UART_SetConfig+0x264>)
 8001126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800112a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800112e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001132:	d059      	beq.n	80011e8 <UART_SetConfig+0x20c>
 8001134:	d804      	bhi.n	8001140 <UART_SetConfig+0x164>
 8001136:	2b00      	cmp	r3, #0
 8001138:	d067      	beq.n	800120a <UART_SetConfig+0x22e>
 800113a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800113e:	e7a5      	b.n	800108c <UART_SetConfig+0xb0>
 8001140:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001144:	e7a7      	b.n	8001096 <UART_SetConfig+0xba>
 8001146:	4a46      	ldr	r2, [pc, #280]	; (8001260 <UART_SetConfig+0x284>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d1a1      	bne.n	8001090 <UART_SetConfig+0xb4>
 800114c:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <UART_SetConfig+0x264>)
 800114e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001152:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800115a:	d045      	beq.n	80011e8 <UART_SetConfig+0x20c>
 800115c:	d804      	bhi.n	8001168 <UART_SetConfig+0x18c>
 800115e:	2b00      	cmp	r3, #0
 8001160:	d053      	beq.n	800120a <UART_SetConfig+0x22e>
 8001162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001166:	e791      	b.n	800108c <UART_SetConfig+0xb0>
 8001168:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800116c:	e793      	b.n	8001096 <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetPCLK1Freq();
 800116e:	f7ff ff15 	bl	8000f9c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001172:	b928      	cbnz	r0, 8001180 <UART_SetConfig+0x1a4>
 8001174:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001176:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8001178:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68

  return ret;
}
 800117c:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 800117e:	4839      	ldr	r0, [pc, #228]	; (8001264 <UART_SetConfig+0x288>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001180:	6862      	ldr	r2, [r4, #4]
 8001182:	0853      	lsrs	r3, r2, #1
 8001184:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001188:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800118c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001190:	f1a3 0110 	sub.w	r1, r3, #16
 8001194:	4291      	cmp	r1, r2
 8001196:	f63f af7b 	bhi.w	8001090 <UART_SetConfig+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800119a:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800119e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80011a2:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80011a4:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60cb      	str	r3, [r1, #12]
 80011aa:	e7e3      	b.n	8001174 <UART_SetConfig+0x198>
    switch (clocksource)
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	f63f af6f 	bhi.w	8001090 <UART_SetConfig+0xb4>
 80011b2:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <UART_SetConfig+0x1dc>)
 80011b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b8:	08001211 	.word	0x08001211
 80011bc:	080011dd 	.word	0x080011dd
 80011c0:	080011ef 	.word	0x080011ef
 80011c4:	08001091 	.word	0x08001091
 80011c8:	080011e3 	.word	0x080011e3
 80011cc:	08001091 	.word	0x08001091
 80011d0:	08001091 	.word	0x08001091
 80011d4:	08001091 	.word	0x08001091
 80011d8:	0800109f 	.word	0x0800109f
        pclk = HAL_RCC_GetPCLK2Freq();
 80011dc:	f7ff feee 	bl	8000fbc <HAL_RCC_GetPCLK2Freq>
        break;
 80011e0:	e018      	b.n	8001214 <UART_SetConfig+0x238>
        pclk = HAL_RCC_GetSysClockFreq();
 80011e2:	f7ff fe0f 	bl	8000e04 <HAL_RCC_GetSysClockFreq>
        break;
 80011e6:	e015      	b.n	8001214 <UART_SetConfig+0x238>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011e8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80011ec:	d0c7      	beq.n	800117e <UART_SetConfig+0x1a2>
        pclk = (uint32_t) HSI_VALUE;
 80011ee:	481d      	ldr	r0, [pc, #116]	; (8001264 <UART_SetConfig+0x288>)
 80011f0:	e012      	b.n	8001218 <UART_SetConfig+0x23c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80011f6:	d1f4      	bne.n	80011e2 <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetSysClockFreq();
 80011f8:	f7ff fe04 	bl	8000e04 <HAL_RCC_GetSysClockFreq>
        break;
 80011fc:	e7b9      	b.n	8001172 <UART_SetConfig+0x196>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011fe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001202:	d1eb      	bne.n	80011dc <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001204:	f7ff feda 	bl	8000fbc <HAL_RCC_GetPCLK2Freq>
        break;
 8001208:	e7b3      	b.n	8001172 <UART_SetConfig+0x196>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800120a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800120e:	d0ae      	beq.n	800116e <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001210:	f7ff fec4 	bl	8000f9c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001214:	2800      	cmp	r0, #0
 8001216:	d0ad      	beq.n	8001174 <UART_SetConfig+0x198>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001218:	6862      	ldr	r2, [r4, #4]
 800121a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800121e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001222:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001226:	f1a3 0110 	sub.w	r1, r3, #16
 800122a:	4291      	cmp	r1, r2
 800122c:	f63f af30 	bhi.w	8001090 <UART_SetConfig+0xb4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001230:	6822      	ldr	r2, [r4, #0]
 8001232:	60d3      	str	r3, [r2, #12]
 8001234:	e79e      	b.n	8001174 <UART_SetConfig+0x198>
 8001236:	bf00      	nop
 8001238:	efff69f3 	.word	0xefff69f3
 800123c:	40011000 	.word	0x40011000
 8001240:	40023800 	.word	0x40023800
 8001244:	08001a02 	.word	0x08001a02
 8001248:	40004400 	.word	0x40004400
 800124c:	40004800 	.word	0x40004800
 8001250:	40004c00 	.word	0x40004c00
 8001254:	40005000 	.word	0x40005000
 8001258:	40011400 	.word	0x40011400
 800125c:	40007800 	.word	0x40007800
 8001260:	40007c00 	.word	0x40007c00
 8001264:	00f42400 	.word	0x00f42400

08001268 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001268:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800126a:	07da      	lsls	r2, r3, #31
{
 800126c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800126e:	d506      	bpl.n	800127e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001270:	6801      	ldr	r1, [r0, #0]
 8001272:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001274:	684a      	ldr	r2, [r1, #4]
 8001276:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800127a:	4322      	orrs	r2, r4
 800127c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800127e:	079c      	lsls	r4, r3, #30
 8001280:	d506      	bpl.n	8001290 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001282:	6801      	ldr	r1, [r0, #0]
 8001284:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001286:	684a      	ldr	r2, [r1, #4]
 8001288:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800128c:	4322      	orrs	r2, r4
 800128e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001290:	0759      	lsls	r1, r3, #29
 8001292:	d506      	bpl.n	80012a2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001294:	6801      	ldr	r1, [r0, #0]
 8001296:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001298:	684a      	ldr	r2, [r1, #4]
 800129a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800129e:	4322      	orrs	r2, r4
 80012a0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80012a2:	071a      	lsls	r2, r3, #28
 80012a4:	d506      	bpl.n	80012b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80012a6:	6801      	ldr	r1, [r0, #0]
 80012a8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80012aa:	684a      	ldr	r2, [r1, #4]
 80012ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012b0:	4322      	orrs	r2, r4
 80012b2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80012b4:	06dc      	lsls	r4, r3, #27
 80012b6:	d506      	bpl.n	80012c6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80012b8:	6801      	ldr	r1, [r0, #0]
 80012ba:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80012bc:	688a      	ldr	r2, [r1, #8]
 80012be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012c2:	4322      	orrs	r2, r4
 80012c4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80012c6:	0699      	lsls	r1, r3, #26
 80012c8:	d506      	bpl.n	80012d8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80012ca:	6801      	ldr	r1, [r0, #0]
 80012cc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80012ce:	688a      	ldr	r2, [r1, #8]
 80012d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012d4:	4322      	orrs	r2, r4
 80012d6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80012d8:	065a      	lsls	r2, r3, #25
 80012da:	d510      	bpl.n	80012fe <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80012dc:	6801      	ldr	r1, [r0, #0]
 80012de:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80012e0:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80012e2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80012e6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80012ea:	ea42 0204 	orr.w	r2, r2, r4
 80012ee:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80012f0:	d105      	bne.n	80012fe <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80012f2:	684a      	ldr	r2, [r1, #4]
 80012f4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80012f6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80012fa:	4322      	orrs	r2, r4
 80012fc:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80012fe:	061b      	lsls	r3, r3, #24
 8001300:	d506      	bpl.n	8001310 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001302:	6802      	ldr	r2, [r0, #0]
 8001304:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001306:	6853      	ldr	r3, [r2, #4]
 8001308:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800130c:	430b      	orrs	r3, r1
 800130e:	6053      	str	r3, [r2, #4]
  }
}
 8001310:	bd10      	pop	{r4, pc}

08001312 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001316:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800131a:	4604      	mov	r4, r0
 800131c:	460e      	mov	r6, r1
 800131e:	4615      	mov	r5, r2
 8001320:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001322:	6822      	ldr	r2, [r4, #0]
 8001324:	69d3      	ldr	r3, [r2, #28]
 8001326:	ea36 0303 	bics.w	r3, r6, r3
 800132a:	bf0c      	ite	eq
 800132c:	2301      	moveq	r3, #1
 800132e:	2300      	movne	r3, #0
 8001330:	42ab      	cmp	r3, r5
 8001332:	d001      	beq.n	8001338 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001334:	2000      	movs	r0, #0
 8001336:	e026      	b.n	8001386 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8001338:	f1b8 3fff 	cmp.w	r8, #4294967295
 800133c:	d0f2      	beq.n	8001324 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800133e:	f7ff f9af 	bl	80006a0 <HAL_GetTick>
 8001342:	1bc0      	subs	r0, r0, r7
 8001344:	4540      	cmp	r0, r8
 8001346:	6820      	ldr	r0, [r4, #0]
 8001348:	d802      	bhi.n	8001350 <UART_WaitOnFlagUntilTimeout+0x3e>
 800134a:	f1b8 0f00 	cmp.w	r8, #0
 800134e:	d11c      	bne.n	800138a <UART_WaitOnFlagUntilTimeout+0x78>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001350:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001358:	e840 3200 	strex	r2, r3, [r0]
 800135c:	2a00      	cmp	r2, #0
 800135e:	d1f7      	bne.n	8001350 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001360:	f100 0308 	add.w	r3, r0, #8
 8001364:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001368:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800136c:	f100 0108 	add.w	r1, r0, #8
 8001370:	e841 3200 	strex	r2, r3, [r1]
 8001374:	2a00      	cmp	r2, #0
 8001376:	d1f3      	bne.n	8001360 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8001378:	2320      	movs	r3, #32
 800137a:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800137c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8001380:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001382:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
}
 8001386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800138a:	6803      	ldr	r3, [r0, #0]
 800138c:	075a      	lsls	r2, r3, #29
 800138e:	d5c8      	bpl.n	8001322 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001390:	69c3      	ldr	r3, [r0, #28]
 8001392:	051b      	lsls	r3, r3, #20
 8001394:	d5c5      	bpl.n	8001322 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800139a:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800139c:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80013a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013a4:	e840 3200 	strex	r2, r3, [r0]
 80013a8:	2a00      	cmp	r2, #0
 80013aa:	d1f7      	bne.n	800139c <UART_WaitOnFlagUntilTimeout+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013ac:	f100 0308 	add.w	r3, r0, #8
 80013b0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013b4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013b8:	f100 0108 	add.w	r1, r0, #8
 80013bc:	e841 3200 	strex	r2, r3, [r1]
 80013c0:	2a00      	cmp	r2, #0
 80013c2:	d1f3      	bne.n	80013ac <UART_WaitOnFlagUntilTimeout+0x9a>
          huart->gState = HAL_UART_STATE_READY;
 80013c4:	2320      	movs	r3, #32
 80013c6:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80013c8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80013cc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80013d0:	e7d6      	b.n	8001380 <UART_WaitOnFlagUntilTimeout+0x6e>

080013d2 <HAL_UART_Transmit>:
{
 80013d2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80013d6:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80013d8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 80013da:	4604      	mov	r4, r0
 80013dc:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80013de:	2b20      	cmp	r3, #32
{
 80013e0:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80013e2:	d142      	bne.n	800146a <HAL_UART_Transmit+0x98>
    if ((pData == NULL) || (Size == 0U))
 80013e4:	2900      	cmp	r1, #0
 80013e6:	d042      	beq.n	800146e <HAL_UART_Transmit+0x9c>
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d040      	beq.n	800146e <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013ec:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013ee:	2500      	movs	r5, #0
 80013f0:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013f4:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 80013f6:	f7ff f953 	bl	80006a0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013fa:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80013fc:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 80013fe:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001402:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8001406:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800140a:	d103      	bne.n	8001414 <HAL_UART_Transmit+0x42>
 800140c:	6922      	ldr	r2, [r4, #16]
 800140e:	b90a      	cbnz	r2, 8001414 <HAL_UART_Transmit+0x42>
 8001410:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001412:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8001414:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001418:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800141c:	b292      	uxth	r2, r2
 800141e:	b93a      	cbnz	r2, 8001430 <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001420:	2140      	movs	r1, #64	; 0x40
 8001422:	4620      	mov	r0, r4
 8001424:	f7ff ff75 	bl	8001312 <UART_WaitOnFlagUntilTimeout>
 8001428:	b950      	cbnz	r0, 8001440 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 800142a:	2320      	movs	r3, #32
 800142c:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 800142e:	e008      	b.n	8001442 <HAL_UART_Transmit+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001430:	2200      	movs	r2, #0
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	4620      	mov	r0, r4
 8001436:	9303      	str	r3, [sp, #12]
 8001438:	f7ff ff6b 	bl	8001312 <UART_WaitOnFlagUntilTimeout>
 800143c:	9b03      	ldr	r3, [sp, #12]
 800143e:	b118      	cbz	r0, 8001448 <HAL_UART_Transmit+0x76>
        return HAL_TIMEOUT;
 8001440:	2003      	movs	r0, #3
}
 8001442:	b004      	add	sp, #16
 8001444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001448:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 800144a:	b95e      	cbnz	r6, 8001464 <HAL_UART_Transmit+0x92>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800144c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001450:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001454:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8001456:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800145a:	3a01      	subs	r2, #1
 800145c:	b292      	uxth	r2, r2
 800145e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8001462:	e7d7      	b.n	8001414 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001464:	f816 2b01 	ldrb.w	r2, [r6], #1
 8001468:	e7f4      	b.n	8001454 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800146a:	2002      	movs	r0, #2
 800146c:	e7e9      	b.n	8001442 <HAL_UART_Transmit+0x70>
      return  HAL_ERROR;
 800146e:	2001      	movs	r0, #1
 8001470:	e7e7      	b.n	8001442 <HAL_UART_Transmit+0x70>

08001472 <UART_CheckIdleState>:
{
 8001472:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001474:	2500      	movs	r5, #0
{
 8001476:	4604      	mov	r4, r0
 8001478:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800147a:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 800147e:	f7ff f90f 	bl	80006a0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001482:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8001484:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	0711      	lsls	r1, r2, #28
 800148a:	d417      	bmi.n	80014bc <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800148c:	6822      	ldr	r2, [r4, #0]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	0752      	lsls	r2, r2, #29
 8001492:	d509      	bpl.n	80014a8 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001494:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001498:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800149c:	4620      	mov	r0, r4
 800149e:	9200      	str	r2, [sp, #0]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f7ff ff36 	bl	8001312 <UART_WaitOnFlagUntilTimeout>
 80014a6:	b9b0      	cbnz	r0, 80014d6 <UART_CheckIdleState+0x64>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014a8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80014aa:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80014ac:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 80014b0:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80014b2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014b6:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80014b8:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 80014ba:	e00d      	b.n	80014d8 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80014bc:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80014c0:	9003      	str	r0, [sp, #12]
 80014c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80014c6:	4620      	mov	r0, r4
 80014c8:	9200      	str	r2, [sp, #0]
 80014ca:	462a      	mov	r2, r5
 80014cc:	f7ff ff21 	bl	8001312 <UART_WaitOnFlagUntilTimeout>
 80014d0:	9b03      	ldr	r3, [sp, #12]
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d0da      	beq.n	800148c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80014d6:	2003      	movs	r0, #3
}
 80014d8:	b005      	add	sp, #20
 80014da:	bd30      	pop	{r4, r5, pc}

080014dc <HAL_UART_Init>:
{
 80014dc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80014de:	4604      	mov	r4, r0
 80014e0:	b340      	cbz	r0, 8001534 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80014e2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80014e4:	b91b      	cbnz	r3, 80014ee <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80014e6:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 80014ea:	f000 f9d1 	bl	8001890 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80014ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80014f0:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80014f2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80014f4:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80014f6:	6813      	ldr	r3, [r2, #0]
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80014fe:	f7ff fd6d 	bl	8000fdc <UART_SetConfig>
 8001502:	2801      	cmp	r0, #1
 8001504:	d016      	beq.n	8001534 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001508:	b113      	cbz	r3, 8001510 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800150a:	4620      	mov	r0, r4
 800150c:	f7ff feac 	bl	8001268 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001510:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001512:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800151a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001522:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
}
 800152a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800152e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001530:	f7ff bf9f 	b.w	8001472 <UART_CheckIdleState>
}
 8001534:	2001      	movs	r0, #1
 8001536:	bd10      	pop	{r4, pc}

08001538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001570 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800153c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800153e:	e003      	b.n	8001548 <LoopCopyDataInit>

08001540 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001542:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001544:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001546:	3104      	adds	r1, #4

08001548 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800154c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800154e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001550:	d3f6      	bcc.n	8001540 <CopyDataInit>
  ldr  r2, =_sbss
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001554:	e002      	b.n	800155c <LoopFillZerobss>

08001556 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001556:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001558:	f842 3b04 	str.w	r3, [r2], #4

0800155c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800155e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001560:	d3f9      	bcc.n	8001556 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001562:	f7ff f831 	bl	80005c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001566:	f000 fa0b 	bl	8001980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156a:	f000 f817 	bl	800159c <main>
  bx  lr    
 800156e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001570:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001574:	08001a24 	.word	0x08001a24
  ldr  r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800157c:	200000ac 	.word	0x200000ac
  ldr  r2, =_sbss
 8001580:	200000ac 	.word	0x200000ac
  ldr  r3, = _ebss
 8001584:	20000168 	.word	0x20000168

08001588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC_IRQHandler>

0800158a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 800158a:	b508      	push	{r3, lr}
  /* Toggle LED3 for error */
  while(1)
  {
    BSP_LED_Toggle(LED3);
 800158c:	2002      	movs	r0, #2
 800158e:	f7ff f80f 	bl	80005b0 <BSP_LED_Toggle>
    HAL_Delay(1000);
 8001592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001596:	f7ff f889 	bl	80006ac <HAL_Delay>
  while(1)
 800159a:	e7f7      	b.n	800158c <Error_Handler+0x2>

0800159c <main>:
{
 800159c:	b500      	push	{lr}
 800159e:	b093      	sub	sp, #76	; 0x4c
  HAL_MPU_Disable();

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x00;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80015a0:	2400      	movs	r4, #0
  HAL_Init();
 80015a2:	f7ff f85b 	bl	800065c <HAL_Init>
  HAL_MPU_Disable();
 80015a6:	f7ff f8f9 	bl	800079c <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015aa:	2301      	movs	r3, #1
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015ac:	a805      	add	r0, sp, #20
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015ae:	f8ad 3014 	strh.w	r3, [sp, #20]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80015b2:	f248 731f 	movw	r3, #34591	; 0x871f
 80015b6:	e9cd 4306 	strd	r4, r3, [sp, #24]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80015ba:	f240 1301 	movw	r3, #257	; 0x101
 80015be:	9308      	str	r3, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015c0:	f7ff f90a 	bl	80007d8 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80015c4:	2004      	movs	r0, #4
 80015c6:	f7ff f8f7 	bl	80007b8 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015ce:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015d2:	4a69      	ldr	r2, [pc, #420]	; (8001778 <main+0x1dc>)
 80015d4:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015dc:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80015e0:	6953      	ldr	r3, [r2, #20]
 80015e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015ec:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80015f0:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015f4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80015f8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015fc:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001600:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001604:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001608:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800160a:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800160e:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001610:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8001614:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001616:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800161a:	d2f9      	bcs.n	8001610 <main+0x74>
    } while(sets-- != 0U);
 800161c:	3b20      	subs	r3, #32
 800161e:	f113 0f20 	cmn.w	r3, #32
 8001622:	d1f2      	bne.n	800160a <main+0x6e>
 8001624:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001628:	6953      	ldr	r3, [r2, #20]
 800162a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162e:	6153      	str	r3, [r2, #20]
 8001630:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001634:	f3bf 8f6f 	isb	sy
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001638:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800163c:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800163e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8001640:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLR = 7;
 8001642:	2507      	movs	r5, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001644:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001646:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800164a:	2300      	movs	r3, #0
 800164c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001652:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8001656:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800165a:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 7;
 800165e:	2309      	movs	r3, #9
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001660:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = 7;
 8001662:	e9cd 3510 	strd	r3, r5, [sp, #64]	; 0x40
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001666:	f7ff fa0b 	bl	8000a80 <HAL_RCC_OscConfig>
 800166a:	b100      	cbz	r0, 800166e <main+0xd2>
    while(1) {};
 800166c:	e7fe      	b.n	800166c <main+0xd0>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800166e:	f7ff f9cf 	bl	8000a10 <HAL_PWREx_EnableOverDrive>
 8001672:	b100      	cbz	r0, 8001676 <main+0xda>
    while(1) {};
 8001674:	e7fe      	b.n	8001674 <main+0xd8>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001676:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001678:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167c:	9002      	str	r0, [sp, #8]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800167e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001680:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001688:	e9cd 1303 	strd	r1, r3, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800168c:	4629      	mov	r1, r5
 800168e:	f7ff fbe7 	bl	8000e60 <HAL_RCC_ClockConfig>
 8001692:	4605      	mov	r5, r0
 8001694:	b100      	cbz	r0, 8001698 <main+0xfc>
    while(1) {};
 8001696:	e7fe      	b.n	8001696 <main+0xfa>
  BSP_LED_Init(LED1);
 8001698:	f7fe ff4c 	bl	8000534 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800169c:	4630      	mov	r0, r6
 800169e:	f7fe ff49 	bl	8000534 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80016a2:	4620      	mov	r0, r4
 80016a4:	f7fe ff46 	bl	8000534 <BSP_LED_Init>
  UartHandle.Instance        = USARTx;
 80016a8:	4c34      	ldr	r4, [pc, #208]	; (800177c <main+0x1e0>)
  UartHandle.Init.BaudRate   = 9600;
 80016aa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80016ae:	4a34      	ldr	r2, [pc, #208]	; (8001780 <main+0x1e4>)
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80016b0:	4620      	mov	r0, r4
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80016b2:	61a5      	str	r5, [r4, #24]
  UartHandle.Init.BaudRate   = 9600;
 80016b4:	e9c4 2300 	strd	r2, r3, [r4]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 80016b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016bc:	6123      	str	r3, [r4, #16]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80016be:	230c      	movs	r3, #12
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80016c0:	e9c4 5502 	strd	r5, r5, [r4, #8]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80016c4:	6163      	str	r3, [r4, #20]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80016c6:	f7ff ff09 	bl	80014dc <HAL_UART_Init>
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d152      	bne.n	8001774 <main+0x1d8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016ce:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80016d2:	f502 6300 	add.w	r3, r2, #2048	; 0x800
 80016d6:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80016da:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016de:	f502 6000 	add.w	r0, r2, #2048	; 0x800
 80016e2:	e840 3100 	strex	r1, r3, [r0]
 80016e6:	2900      	cmp	r1, #0
 80016e8:	d1f3      	bne.n	80016d2 <main+0x136>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80016ee:	f602 0308 	addw	r3, r2, #2056	; 0x808
 80016f2:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80016f6:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016fa:	f602 0008 	addw	r0, r2, #2056	; 0x808
 80016fe:	e840 3100 	strex	r1, r3, [r0]
 8001702:	2900      	cmp	r1, #0
 8001704:	d1f3      	bne.n	80016ee <main+0x152>
  LL_USART_TransmitData8(USARTx, aTxStartMessage[uwTxIndex++]); 
 8001706:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8001710:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <main+0x1e8>)
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8001712:	5cd2      	ldrb	r2, [r2, r3]
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <main+0x1e4>)
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001718:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800171c:	f502 6300 	add.w	r3, r2, #2048	; 0x800
 8001720:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001728:	f502 6000 	add.w	r0, r2, #2048	; 0x800
 800172c:	e840 3100 	strex	r1, r3, [r0]
 8001730:	2900      	cmp	r1, #0
 8001732:	d1f3      	bne.n	800171c <main+0x180>
  while (ubTxComplete == 0)
 8001734:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0fb      	beq.n	8001734 <main+0x198>
  BSP_LED_On(LED1);
 800173c:	2000      	movs	r0, #0
 800173e:	f7fe ff29 	bl	8000594 <BSP_LED_On>
  while (ubRxComplete == 0)
 8001742:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0fb      	beq.n	8001742 <main+0x1a6>
  BSP_LED_On(LED2);
 800174a:	2001      	movs	r0, #1
 800174c:	f7fe ff22 	bl	8000594 <BSP_LED_On>
  if(HAL_UART_Transmit(&UartHandle, (uint8_t*)aRxBuffer, RXBUFFERSIZE, 1000)!= HAL_OK)
 8001750:	490d      	ldr	r1, [pc, #52]	; (8001788 <main+0x1ec>)
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	220a      	movs	r2, #10
 8001758:	f1a1 008e 	sub.w	r0, r1, #142	; 0x8e
 800175c:	f7ff fe39 	bl	80013d2 <HAL_UART_Transmit>
 8001760:	b940      	cbnz	r0, 8001774 <main+0x1d8>
  if(HAL_UART_Transmit(&UartHandle, (uint8_t*)aTxEndMessage, TXENDMESSAGESIZE, 1000)!= HAL_OK)
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	2215      	movs	r2, #21
 8001768:	4908      	ldr	r1, [pc, #32]	; (800178c <main+0x1f0>)
 800176a:	4804      	ldr	r0, [pc, #16]	; (800177c <main+0x1e0>)
 800176c:	f7ff fe31 	bl	80013d2 <HAL_UART_Transmit>
 8001770:	b900      	cbnz	r0, 8001774 <main+0x1d8>
  while (1)
 8001772:	e7fe      	b.n	8001772 <main+0x1d6>
    Error_Handler();
 8001774:	f7ff ff09 	bl	800158a <Error_Handler>
 8001778:	e000ed00 	.word	0xe000ed00
 800177c:	200000cc 	.word	0x200000cc
 8001780:	40004800 	.word	0x40004800
 8001784:	2000001c 	.word	0x2000001c
 8001788:	2000015a 	.word	0x2000015a
 800178c:	20000093 	.word	0x20000093

08001790 <UART_CharReception_Callback>:
  aRxBuffer[uwRxIndex++] = LL_USART_ReceiveData8(USARTx);
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <UART_CharReception_Callback+0x28>)
 8001792:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001796:	1c51      	adds	r1, r2, #1
 8001798:	441a      	add	r2, r3
 800179a:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800179e:	4907      	ldr	r1, [pc, #28]	; (80017bc <UART_CharReception_Callback+0x2c>)
 80017a0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80017a2:	f882 108e 	strb.w	r1, [r2, #142]	; 0x8e
  if (uwRxIndex == RXBUFFERSIZE)
 80017a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80017aa:	2a0a      	cmp	r2, #10
 80017ac:	d102      	bne.n	80017b4 <UART_CharReception_Callback+0x24>
    ubRxComplete = 1;
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	200000cc 	.word	0x200000cc
 80017bc:	40004800 	.word	0x40004800

080017c0 <UART_TXEmpty_Callback>:
  if(uwTxIndex == (ubSizeToSend - 1))
 80017c0:	4917      	ldr	r1, [pc, #92]	; (8001820 <UART_TXEmpty_Callback+0x60>)
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <UART_TXEmpty_Callback+0x64>)
{
 80017c4:	b510      	push	{r4, lr}
  if(uwTxIndex == (ubSizeToSend - 1))
 80017c6:	f891 308d 	ldrb.w	r3, [r1, #141]	; 0x8d
 80017ca:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 80017ce:	3b01      	subs	r3, #1
 80017d0:	4283      	cmp	r3, r0
 80017d2:	d11b      	bne.n	800180c <UART_TXEmpty_Callback+0x4c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017d4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 80017d8:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80017dc:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80017e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017e4:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 80017e8:	e84c 3400 	strex	r4, r3, [ip]
 80017ec:	2c00      	cmp	r4, #0
 80017ee:	d1f3      	bne.n	80017d8 <UART_TXEmpty_Callback+0x18>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017f0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 80017f4:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80017f8:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80017fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001800:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 8001804:	e84c 3400 	strex	r4, r3, [ip]
 8001808:	2c00      	cmp	r4, #0
 800180a:	d1f3      	bne.n	80017f4 <UART_TXEmpty_Callback+0x34>
  LL_USART_TransmitData8(USARTx, aTxStartMessage[uwTxIndex++]);
 800180c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001810:	1c58      	adds	r0, r3, #1
 8001812:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  USARTx->TDR = Value;
 8001816:	5cca      	ldrb	r2, [r1, r3]
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <UART_TXEmpty_Callback+0x68>)
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800181c:	bd10      	pop	{r4, pc}
 800181e:	bf00      	nop
 8001820:	2000001c 	.word	0x2000001c
 8001824:	200000cc 	.word	0x200000cc
 8001828:	40004800 	.word	0x40004800

0800182c <UART_CharTransmitComplete_Callback>:
  if(uwTxIndex == sizeof(aTxStartMessage))
 800182c:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <UART_CharTransmitComplete_Callback+0x34>)
 800182e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001832:	2b77      	cmp	r3, #119	; 0x77
 8001834:	d113      	bne.n	800185e <UART_CharTransmitComplete_Callback+0x32>
    uwTxIndex = 0;
 8001836:	2300      	movs	r3, #0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001838:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001840:	f501 6300 	add.w	r3, r1, #2048	; 0x800
 8001844:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800184c:	f501 6c00 	add.w	ip, r1, #2048	; 0x800
 8001850:	e84c 3000 	strex	r0, r3, [ip]
 8001854:	2800      	cmp	r0, #0
 8001856:	d1f3      	bne.n	8001840 <UART_CharTransmitComplete_Callback+0x14>
    ubTxComplete = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
}
 800185e:	4770      	bx	lr
 8001860:	200000cc 	.word	0x200000cc

08001864 <UART_Error_Callback>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <UART_Error_Callback+0x24>)
 8001866:	2280      	movs	r2, #128	; 0x80
{
 8001868:	b082      	sub	sp, #8
 800186a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800186e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001872:	f3bf 8f6f 	isb	sy
  isr_reg = LL_USART_ReadReg(USARTx, ISR);
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <UART_Error_Callback+0x28>)
    BSP_LED_On(LED3);
 8001878:	2002      	movs	r0, #2
  isr_reg = LL_USART_ReadReg(USARTx, ISR);
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	9301      	str	r3, [sp, #4]
  if (isr_reg & LL_USART_ISR_NE)
 800187e:	9b01      	ldr	r3, [sp, #4]
}
 8001880:	b002      	add	sp, #8
    BSP_LED_On(LED3);
 8001882:	f7fe be87 	b.w	8000594 <BSP_LED_On>
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100
 800188c:	40004800 	.word	0x40004800

08001890 <HAL_UART_MspInit>:
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <HAL_UART_MspInit+0x80>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001892:	4820      	ldr	r0, [pc, #128]	; (8001914 <HAL_UART_MspInit+0x84>)
  USARTx_TX_GPIO_CLK_ENABLE();
 8001894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001896:	f042 0208 	orr.w	r2, r2, #8
{
 800189a:	b530      	push	{r4, r5, lr}
  USARTx_TX_GPIO_CLK_ENABLE();
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
{
 800189e:	b089      	sub	sp, #36	; 0x24
  USARTx_TX_GPIO_CLK_ENABLE();
 80018a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2401      	movs	r4, #1
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80018a4:	2507      	movs	r5, #7
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80018a6:	a903      	add	r1, sp, #12
  USARTx_TX_GPIO_CLK_ENABLE();
 80018a8:	f002 0208 	and.w	r2, r2, #8
 80018ac:	9200      	str	r2, [sp, #0]
 80018ae:	9a00      	ldr	r2, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 80018b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b2:	f042 0208 	orr.w	r2, r2, #8
 80018b6:	631a      	str	r2, [r3, #48]	; 0x30
 80018b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ba:	f002 0208 	and.w	r2, r2, #8
 80018be:	9201      	str	r2, [sp, #4]
 80018c0:	9a01      	ldr	r2, [sp, #4]
  USARTx_CLK_ENABLE();
 80018c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80018ca:	f44f 7280 	mov.w	r2, #256	; 0x100
  USARTx_CLK_ENABLE();
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80018d0:	9507      	str	r5, [sp, #28]
  USARTx_CLK_ENABLE();
 80018d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e9cd 4305 	strd	r4, r3, [sp, #20]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80018e6:	f7fe ffa3 	bl	8000830 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_RX_PIN;
 80018ea:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80018ee:	a903      	add	r1, sp, #12
 80018f0:	4808      	ldr	r0, [pc, #32]	; (8001914 <HAL_UART_MspInit+0x84>)
  GPIO_InitStruct.Pin       = USARTx_RX_PIN;
 80018f2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80018f4:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80018f6:	f7fe ff9b 	bl	8000830 <HAL_GPIO_Init>
    
  /*##-3- Configure the NVIC for UART ########################################*/   
  /* NVIC for USARTx */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 80018fa:	4622      	mov	r2, r4
 80018fc:	2100      	movs	r1, #0
 80018fe:	2027      	movs	r0, #39	; 0x27
 8001900:	f7fe fef8 	bl	80006f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8001904:	2027      	movs	r0, #39	; 0x27
 8001906:	f7fe ff27 	bl	8000758 <HAL_NVIC_EnableIRQ>
}
 800190a:	b009      	add	sp, #36	; 0x24
 800190c:	bd30      	pop	{r4, r5, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40020c00 	.word	0x40020c00

08001918 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001918:	4770      	bx	lr

0800191a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800191a:	e7fe      	b.n	800191a <HardFault_Handler>

0800191c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800191c:	e7fe      	b.n	800191c <MemManage_Handler>

0800191e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler>

08001920 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler>

08001922 <SVC_Handler>:
 8001922:	4770      	bx	lr

08001924 <DebugMon_Handler>:
 8001924:	4770      	bx	lr

08001926 <PendSV_Handler>:
 8001926:	4770      	bx	lr

08001928 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8001928:	f7fe beae 	b.w	8000688 <HAL_IncTick>

0800192c <USART3_IRQHandler>:
  * @brief  This function handles UART interrupt request.
  * @param  None
  * @retval None
  */
void USARTx_IRQHandler(void)
{
 800192c:	b510      	push	{r4, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800192e:	4c13      	ldr	r4, [pc, #76]	; (800197c <USART3_IRQHandler+0x50>)
 8001930:	69e3      	ldr	r3, [r4, #28]
 8001932:	0699      	lsls	r1, r3, #26
 8001934:	d504      	bpl.n	8001940 <USART3_IRQHandler+0x14>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 8001936:	6823      	ldr	r3, [r4, #0]
 8001938:	069a      	lsls	r2, r3, #26
 800193a:	d501      	bpl.n	8001940 <USART3_IRQHandler+0x14>
  /* Check RXNE flag value in ISR register */
  if(LL_USART_IsActiveFlag_RXNE(USARTx) && LL_USART_IsEnabledIT_RXNE(USARTx))
  {
    /* RXNE flag will be cleared by reading of RDR register (done in call) */
    /* Call function in charge of handling Character reception */
    UART_CharReception_Callback();
 800193c:	f7ff ff28 	bl	8001790 <UART_CharReception_Callback>
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	061b      	lsls	r3, r3, #24
 8001944:	d504      	bpl.n	8001950 <USART3_IRQHandler+0x24>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001946:	69e3      	ldr	r3, [r4, #28]
 8001948:	061c      	lsls	r4, r3, #24
 800194a:	d501      	bpl.n	8001950 <USART3_IRQHandler+0x24>
  if(LL_USART_IsEnabledIT_TXE(USARTx) && LL_USART_IsActiveFlag_TXE(USARTx))
  {
    /* TXE flag will be automatically cleared when writing new data in TDR register */

    /* Call function in charge of handling empty DR => will lead to transmission of next character */
    UART_TXEmpty_Callback();
 800194c:	f7ff ff38 	bl	80017c0 <UART_TXEmpty_Callback>
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8001950:	4c0a      	ldr	r4, [pc, #40]	; (800197c <USART3_IRQHandler+0x50>)
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	0658      	lsls	r0, r3, #25
 8001956:	d506      	bpl.n	8001966 <USART3_IRQHandler+0x3a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001958:	69e3      	ldr	r3, [r4, #28]
 800195a:	0659      	lsls	r1, r3, #25
 800195c:	d503      	bpl.n	8001966 <USART3_IRQHandler+0x3a>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800195e:	2340      	movs	r3, #64	; 0x40
 8001960:	6223      	str	r3, [r4, #32]
  {
    /* Clear TC flag */
    LL_USART_ClearFlag_TC(USARTx);
    /* Call function in charge of handling end of transmission of sent character
       and prepare next charcater transmission */
    UART_CharTransmitComplete_Callback();
 8001962:	f7ff ff63 	bl	800182c <UART_CharTransmitComplete_Callback>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8001966:	68a3      	ldr	r3, [r4, #8]
 8001968:	07da      	lsls	r2, r3, #31
 800196a:	d506      	bpl.n	800197a <USART3_IRQHandler+0x4e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800196c:	69e3      	ldr	r3, [r4, #28]
 800196e:	075b      	lsls	r3, r3, #29
 8001970:	d503      	bpl.n	800197a <USART3_IRQHandler+0x4e>
  if(LL_USART_IsEnabledIT_ERROR(USARTx) && LL_USART_IsActiveFlag_NE(USARTx))
  {
    /* Call Error function */
    UART_Error_Callback();
  }
}
 8001972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UART_Error_Callback();
 8001976:	f7ff bf75 	b.w	8001864 <UART_Error_Callback>
}
 800197a:	bd10      	pop	{r4, pc}
 800197c:	40004800 	.word	0x40004800

08001980 <__libc_init_array>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	4d0d      	ldr	r5, [pc, #52]	; (80019b8 <__libc_init_array+0x38>)
 8001984:	4c0d      	ldr	r4, [pc, #52]	; (80019bc <__libc_init_array+0x3c>)
 8001986:	1b64      	subs	r4, r4, r5
 8001988:	10a4      	asrs	r4, r4, #2
 800198a:	2600      	movs	r6, #0
 800198c:	42a6      	cmp	r6, r4
 800198e:	d109      	bne.n	80019a4 <__libc_init_array+0x24>
 8001990:	4d0b      	ldr	r5, [pc, #44]	; (80019c0 <__libc_init_array+0x40>)
 8001992:	4c0c      	ldr	r4, [pc, #48]	; (80019c4 <__libc_init_array+0x44>)
 8001994:	f000 f818 	bl	80019c8 <_init>
 8001998:	1b64      	subs	r4, r4, r5
 800199a:	10a4      	asrs	r4, r4, #2
 800199c:	2600      	movs	r6, #0
 800199e:	42a6      	cmp	r6, r4
 80019a0:	d105      	bne.n	80019ae <__libc_init_array+0x2e>
 80019a2:	bd70      	pop	{r4, r5, r6, pc}
 80019a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80019a8:	4798      	blx	r3
 80019aa:	3601      	adds	r6, #1
 80019ac:	e7ee      	b.n	800198c <__libc_init_array+0xc>
 80019ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80019b2:	4798      	blx	r3
 80019b4:	3601      	adds	r6, #1
 80019b6:	e7f2      	b.n	800199e <__libc_init_array+0x1e>
 80019b8:	08001a1c 	.word	0x08001a1c
 80019bc:	08001a1c 	.word	0x08001a1c
 80019c0:	08001a1c 	.word	0x08001a1c
 80019c4:	08001a20 	.word	0x08001a20

080019c8 <_init>:
 80019c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ca:	bf00      	nop
 80019cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ce:	bc08      	pop	{r3}
 80019d0:	469e      	mov	lr, r3
 80019d2:	4770      	bx	lr

080019d4 <_fini>:
 80019d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d6:	bf00      	nop
 80019d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019da:	bc08      	pop	{r3}
 80019dc:	469e      	mov	lr, r3
 80019de:	4770      	bx	lr

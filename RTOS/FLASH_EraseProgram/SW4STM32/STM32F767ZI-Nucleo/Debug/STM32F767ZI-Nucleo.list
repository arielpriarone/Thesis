
STM32F767ZI-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013a8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080015a0  080015a0  000115a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080015c4  080015c4  000115c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080015cc  080015cc  000115cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080015d0  080015d0  000115d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000000  080015d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000088  2000001c  080015f0  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200000a4  080015f0  000200a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
 11 .debug_info   00006c65  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001b18  00000000  00000000  00026cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000014be  00000000  00000000  0002880a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000510  00000000  00000000  00029cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000508  00000000  00000000  0002a1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025ece  00000000  00000000  0002a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000844a  00000000  00000000  000505ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecaf5  00000000  00000000  000589f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00000b78  00000000  00000000  001454f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000c7  00000000  00000000  00146068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000001c 	.word	0x2000001c
 8000214:	00000000 	.word	0x00000000
 8000218:	08001588 	.word	0x08001588

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000020 	.word	0x20000020
 8000234:	08001588 	.word	0x08001588

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <BSP_LED_Init>:
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <BSP_LED_Init+0x54>)
 8000536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000538:	f042 0202 	orr.w	r2, r2, #2
{
 800053c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
{
 8000540:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE(Led);
 8000542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000544:	4604      	mov	r4, r0
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	b9c8      	cbnz	r0, 8000580 <BSP_LED_Init+0x4c>
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <BSP_LED_Init+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2700      	movs	r7, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000554:	4d0e      	ldr	r5, [pc, #56]	; (8000590 <BSP_LED_Init+0x5c>)
 8000556:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000558:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800055e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000562:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000568:	2303      	movs	r3, #3
 800056a:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800056c:	f000 fb18 	bl	8000ba0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000570:	463a      	mov	r2, r7
 8000572:	4631      	mov	r1, r6
 8000574:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000578:	f000 fbf4 	bl	8000d64 <HAL_GPIO_WritePin>
}
 800057c:	b009      	add	sp, #36	; 0x24
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000580:	9302      	str	r3, [sp, #8]
 8000582:	9b02      	ldr	r3, [sp, #8]
 8000584:	e7e4      	b.n	8000550 <BSP_LED_Init+0x1c>
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800
 800058c:	080015a0 	.word	0x080015a0
 8000590:	20000000 	.word	0x20000000

08000594 <BSP_LED_On>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <BSP_LED_On+0x14>)
 8000596:	2201      	movs	r2, #1
 8000598:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <BSP_LED_On+0x18>)
 800059e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80005a2:	f000 bbdf 	b.w	8000d64 <HAL_GPIO_WritePin>
 80005a6:	bf00      	nop
 80005a8:	080015a0 	.word	0x080015a0
 80005ac:	20000000 	.word	0x20000000

080005b0 <BSP_LED_Off>:
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <BSP_LED_Off+0x14>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <BSP_LED_Off+0x18>)
 80005ba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80005be:	f000 bbd1 	b.w	8000d64 <HAL_GPIO_WritePin>
 80005c2:	bf00      	nop
 80005c4:	080015a0 	.word	0x080015a0
 80005c8:	20000000 	.word	0x20000000

080005cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005cc:	490f      	ldr	r1, [pc, #60]	; (800060c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005ce:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <SystemInit+0x44>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	f042 0201 	orr.w	r2, r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80005e6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80005ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SystemInit+0x48>)
 80005f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000600:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000602:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000606:	608b      	str	r3, [r1, #8]
#endif
}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00
 8000610:	40023800 	.word	0x40023800
 8000614:	24003010 	.word	0x24003010

08000618 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000618:	4770      	bx	lr
	...

0800061c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800061e:	4e0e      	ldr	r6, [pc, #56]	; (8000658 <HAL_InitTick+0x3c>)
 8000620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8000624:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000626:	7832      	ldrb	r2, [r6, #0]
 8000628:	fbb3 f3f2 	udiv	r3, r3, r2
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <HAL_InitTick+0x40>)
 800062e:	6810      	ldr	r0, [r2, #0]
 8000630:	fbb0 f0f3 	udiv	r0, r0, r3
 8000634:	f000 f880 	bl	8000738 <HAL_SYSTICK_Config>
 8000638:	4604      	mov	r4, r0
 800063a:	b950      	cbnz	r0, 8000652 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063c:	2d0f      	cmp	r5, #15
 800063e:	d808      	bhi.n	8000652 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	4602      	mov	r2, r0
 8000642:	4629      	mov	r1, r5
 8000644:	f04f 30ff 	mov.w	r0, #4294967295
 8000648:	f000 f844 	bl	80006d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800064c:	4620      	mov	r0, r4
 800064e:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000650:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000652:	2001      	movs	r0, #1
 8000654:	e7fc      	b.n	8000650 <HAL_InitTick+0x34>
 8000656:	bf00      	nop
 8000658:	20000014 	.word	0x20000014
 800065c:	20000010 	.word	0x20000010

08000660 <HAL_Init>:
{
 8000660:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800066c:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000674:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000676:	f000 f81b 	bl	80006b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800067a:	200f      	movs	r0, #15
 800067c:	f7ff ffce 	bl	800061c <HAL_InitTick>
  HAL_MspInit();
 8000680:	f7ff ffca 	bl	8000618 <HAL_MspInit>
}
 8000684:	2000      	movs	r0, #0
 8000686:	bd08      	pop	{r3, pc}
 8000688:	40023c00 	.word	0x40023c00

0800068c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800068c:	4a03      	ldr	r2, [pc, #12]	; (800069c <HAL_IncTick+0x10>)
 800068e:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <HAL_IncTick+0x14>)
 8000690:	6811      	ldr	r1, [r2, #0]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	440b      	add	r3, r1
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000038 	.word	0x20000038
 80006a0:	20000014 	.word	0x20000014

080006a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006a4:	4b01      	ldr	r3, [pc, #4]	; (80006ac <HAL_GetTick+0x8>)
 80006a6:	6818      	ldr	r0, [r3, #0]
}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000038 	.word	0x20000038

080006b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b0:	4907      	ldr	r1, [pc, #28]	; (80006d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80006be:	0412      	lsls	r2, r2, #16
 80006c0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80006cc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d6:	b530      	push	{r4, r5, lr}
 80006d8:	68dc      	ldr	r4, [r3, #12]
 80006da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	bf28      	it	cs
 80006e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f0:	bf8c      	ite	hi
 80006f2:	3c03      	subhi	r4, #3
 80006f4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006fa:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fc:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000704:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	fa03 f304 	lsl.w	r3, r3, r4
 800070c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000714:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000716:	db06      	blt.n	8000726 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800071c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000720:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000724:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	f000 000f 	and.w	r0, r0, #15
 800072a:	4a02      	ldr	r2, [pc, #8]	; (8000734 <HAL_NVIC_SetPriority+0x60>)
 800072c:	5413      	strb	r3, [r2, r0]
 800072e:	e7f9      	b.n	8000724 <HAL_NVIC_SetPriority+0x50>
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	e000ed14 	.word	0xe000ed14

08000738 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	3801      	subs	r0, #1
 800073a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800073e:	d20b      	bcs.n	8000758 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000740:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	4a05      	ldr	r2, [pc, #20]	; (800075c <HAL_SYSTICK_Config+0x24>)
 8000746:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000748:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074a:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000750:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000752:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000754:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000756:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000758:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000760:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <HAL_MPU_Disable+0x18>)
 8000766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000768:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800076e:	2200      	movs	r2, #0
 8000770:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_MPU_Enable+0x1c>)
 800077e:	f040 0001 	orr.w	r0, r0, #1
 8000782:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000788:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800078e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000792:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800079c:	7843      	ldrb	r3, [r0, #1]
 800079e:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <HAL_MPU_ConfigRegion+0x54>)
{
 80007a0:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80007a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 80007a6:	7801      	ldrb	r1, [r0, #0]
 80007a8:	b1e9      	cbz	r1, 80007e6 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80007aa:	6843      	ldr	r3, [r0, #4]
 80007ac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80007b0:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80007b2:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80007b4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80007b6:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007ba:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80007bc:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007be:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80007c2:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007c4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80007c8:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007ca:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80007ce:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80007d4:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80007da:	7a01      	ldrb	r1, [r0, #8]
 80007dc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80007e0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80007e4:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80007e6:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80007ea:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 80007ee:	e7f9      	b.n	80007e4 <HAL_MPU_ConfigRegion+0x48>
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80007f4:	490a      	ldr	r1, [pc, #40]	; (8000820 <FLASH_Program_DoubleWord+0x2c>)
{
 80007f6:	b510      	push	{r4, lr}
  FLASH->CR &= CR_PSIZE_MASK;
 80007f8:	690c      	ldr	r4, [r1, #16]
 80007fa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80007fe:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000800:	690c      	ldr	r4, [r1, #16]
 8000802:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000806:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000808:	690c      	ldr	r4, [r1, #16]
 800080a:	f044 0401 	orr.w	r4, r4, #1
 800080e:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000810:	6002      	str	r2, [r0, #0]
 8000812:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000816:	6043      	str	r3, [r0, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000818:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800081c:	bd10      	pop	{r4, pc}
 800081e:	bf00      	nop
 8000820:	40023c00 	.word	0x40023c00

08000824 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <FLASH_Program_Word+0x24>)
 8000826:	691a      	ldr	r2, [r3, #16]
 8000828:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800082c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800082e:	691a      	ldr	r2, [r3, #16]
 8000830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000834:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000836:	691a      	ldr	r2, [r3, #16]
 8000838:	f042 0201 	orr.w	r2, r2, #1
 800083c:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 800083e:	6001      	str	r1, [r0, #0]
 8000840:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40023c00 	.word	0x40023c00

0800084c <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <FLASH_Program_HalfWord+0x24>)
 800084e:	691a      	ldr	r2, [r3, #16]
 8000850:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000854:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000856:	691a      	ldr	r2, [r3, #16]
 8000858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800085c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800085e:	691a      	ldr	r2, [r3, #16]
 8000860:	f042 0201 	orr.w	r2, r2, #1
 8000864:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000866:	8001      	strh	r1, [r0, #0]
 8000868:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023c00 	.word	0x40023c00

08000874 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <FLASH_Program_Byte+0x20>)
 8000876:	691a      	ldr	r2, [r3, #16]
 8000878:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800087c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800087e:	691a      	ldr	r2, [r3, #16]
 8000880:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000882:	691a      	ldr	r2, [r3, #16]
 8000884:	f042 0201 	orr.w	r2, r2, #1
 8000888:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 800088a:	7001      	strb	r1, [r0, #0]
 800088c:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023c00 	.word	0x40023c00

08000898 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000898:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <FLASH_SetErrorCode+0x5c>)
 800089a:	68d3      	ldr	r3, [r2, #12]
 800089c:	079b      	lsls	r3, r3, #30
 800089e:	d504      	bpl.n	80008aa <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80008a0:	4915      	ldr	r1, [pc, #84]	; (80008f8 <FLASH_SetErrorCode+0x60>)
 80008a2:	698b      	ldr	r3, [r1, #24]
 80008a4:	f043 0320 	orr.w	r3, r3, #32
 80008a8:	618b      	str	r3, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80008aa:	68d3      	ldr	r3, [r2, #12]
 80008ac:	06d8      	lsls	r0, r3, #27
 80008ae:	d504      	bpl.n	80008ba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80008b0:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <FLASH_SetErrorCode+0x60>)
 80008b2:	6993      	ldr	r3, [r2, #24]
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <FLASH_SetErrorCode+0x5c>)
 80008bc:	68d3      	ldr	r3, [r2, #12]
 80008be:	0699      	lsls	r1, r3, #26
 80008c0:	d504      	bpl.n	80008cc <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80008c2:	490d      	ldr	r1, [pc, #52]	; (80008f8 <FLASH_SetErrorCode+0x60>)
 80008c4:	698b      	ldr	r3, [r1, #24]
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	618b      	str	r3, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80008cc:	68d3      	ldr	r3, [r2, #12]
 80008ce:	065a      	lsls	r2, r3, #25
 80008d0:	d504      	bpl.n	80008dc <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80008d2:	4a09      	ldr	r2, [pc, #36]	; (80008f8 <FLASH_SetErrorCode+0x60>)
 80008d4:	6993      	ldr	r3, [r2, #24]
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80008dc:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <FLASH_SetErrorCode+0x5c>)
 80008de:	68d3      	ldr	r3, [r2, #12]
 80008e0:	061b      	lsls	r3, r3, #24
 80008e2:	d504      	bpl.n	80008ee <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80008e4:	4904      	ldr	r1, [pc, #16]	; (80008f8 <FLASH_SetErrorCode+0x60>)
 80008e6:	698b      	ldr	r3, [r1, #24]
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	618b      	str	r3, [r1, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80008ee:	23f2      	movs	r3, #242	; 0xf2
 80008f0:	60d3      	str	r3, [r2, #12]
}
 80008f2:	4770      	bx	lr
 80008f4:	40023c00 	.word	0x40023c00
 80008f8:	2000003c 	.word	0x2000003c

080008fc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_FLASH_Unlock+0x1c>)
 80008fe:	691a      	ldr	r2, [r3, #16]
 8000900:	2a00      	cmp	r2, #0
 8000902:	da07      	bge.n	8000914 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000904:	4a05      	ldr	r2, [pc, #20]	; (800091c <HAL_FLASH_Unlock+0x20>)
 8000906:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000908:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800090c:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800090e:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000910:	0fc0      	lsrs	r0, r0, #31
 8000912:	4770      	bx	lr
 8000914:	2000      	movs	r0, #0
}
 8000916:	4770      	bx	lr
 8000918:	40023c00 	.word	0x40023c00
 800091c:	45670123 	.word	0x45670123

08000920 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8000920:	4a03      	ldr	r2, [pc, #12]	; (8000930 <HAL_FLASH_Lock+0x10>)
}
 8000922:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 8000924:	6913      	ldr	r3, [r2, #16]
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	6113      	str	r3, [r2, #16]
}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023c00 	.word	0x40023c00

08000934 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_FLASH_OB_Unlock+0x1c>)
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	07d2      	lsls	r2, r2, #31
 800093a:	d506      	bpl.n	800094a <HAL_FLASH_OB_Unlock+0x16>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800093c:	4a05      	ldr	r2, [pc, #20]	; (8000954 <HAL_FLASH_OB_Unlock+0x20>)
  return HAL_OK;  
 800093e:	2000      	movs	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8000940:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8000942:	f102 3244 	add.w	r2, r2, #1145324612	; 0x44444444
 8000946:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 8000948:	4770      	bx	lr
    return HAL_ERROR;
 800094a:	2001      	movs	r0, #1
}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023c00 	.word	0x40023c00
 8000954:	08192a3b 	.word	0x08192a3b

08000958 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <FLASH_WaitForLastOperation+0x50>)
 800095a:	2200      	movs	r2, #0
{ 
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000960:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000962:	4d12      	ldr	r5, [pc, #72]	; (80009ac <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 8000964:	f7ff fe9e 	bl	80006a4 <HAL_GetTick>
 8000968:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800096a:	68eb      	ldr	r3, [r5, #12]
 800096c:	03db      	lsls	r3, r3, #15
 800096e:	d407      	bmi.n	8000980 <FLASH_WaitForLastOperation+0x28>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8000970:	68eb      	ldr	r3, [r5, #12]
 8000972:	f013 03f2 	ands.w	r3, r3, #242	; 0xf2
 8000976:	d00e      	beq.n	8000996 <FLASH_WaitForLastOperation+0x3e>
    FLASH_SetErrorCode();
 8000978:	f7ff ff8e 	bl	8000898 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800097c:	2001      	movs	r0, #1
 800097e:	e003      	b.n	8000988 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8000980:	1c62      	adds	r2, r4, #1
 8000982:	d0f2      	beq.n	800096a <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000984:	b90c      	cbnz	r4, 800098a <FLASH_WaitForLastOperation+0x32>
        return HAL_TIMEOUT;
 8000986:	2003      	movs	r0, #3
}  
 8000988:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800098a:	f7ff fe8b 	bl	80006a4 <HAL_GetTick>
 800098e:	1b80      	subs	r0, r0, r6
 8000990:	42a0      	cmp	r0, r4
 8000992:	d9ea      	bls.n	800096a <FLASH_WaitForLastOperation+0x12>
 8000994:	e7f7      	b.n	8000986 <FLASH_WaitForLastOperation+0x2e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000996:	68e8      	ldr	r0, [r5, #12]
 8000998:	f010 0001 	ands.w	r0, r0, #1
 800099c:	d0f4      	beq.n	8000988 <FLASH_WaitForLastOperation+0x30>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800099e:	2201      	movs	r2, #1
  return HAL_OK;
 80009a0:	4618      	mov	r0, r3
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80009a2:	60ea      	str	r2, [r5, #12]
 80009a4:	e7f0      	b.n	8000988 <FLASH_WaitForLastOperation+0x30>
 80009a6:	bf00      	nop
 80009a8:	2000003c 	.word	0x2000003c
 80009ac:	40023c00 	.word	0x40023c00

080009b0 <HAL_FLASH_Program>:
{
 80009b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80009b2:	4f1c      	ldr	r7, [pc, #112]	; (8000a24 <HAL_FLASH_Program+0x74>)
{
 80009b4:	4615      	mov	r5, r2
 80009b6:	4606      	mov	r6, r0
 80009b8:	460c      	mov	r4, r1
  __HAL_LOCK(&pFlash);
 80009ba:	7d3a      	ldrb	r2, [r7, #20]
{
 80009bc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(&pFlash);
 80009be:	2a01      	cmp	r2, #1
 80009c0:	d02d      	beq.n	8000a1e <HAL_FLASH_Program+0x6e>
 80009c2:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009c4:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80009c8:	753a      	strb	r2, [r7, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009ca:	f7ff ffc5 	bl	8000958 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80009ce:	b998      	cbnz	r0, 80009f8 <HAL_FLASH_Program+0x48>
    switch(TypeProgram)
 80009d0:	9b01      	ldr	r3, [sp, #4]
 80009d2:	2e03      	cmp	r6, #3
 80009d4:	d807      	bhi.n	80009e6 <HAL_FLASH_Program+0x36>
 80009d6:	e8df f006 	tbb	[pc, r6]
 80009da:	1302      	.short	0x1302
 80009dc:	1d18      	.short	0x1d18
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80009de:	b2e9      	uxtb	r1, r5
 80009e0:	4620      	mov	r0, r4
 80009e2:	f7ff ff47 	bl	8000874 <FLASH_Program_Byte>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009ea:	f7ff ffb5 	bl	8000958 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_FLASH_Program+0x78>)
 80009f0:	6913      	ldr	r3, [r2, #16]
 80009f2:	f023 0301 	bic.w	r3, r3, #1
 80009f6:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80009f8:	2300      	movs	r3, #0
 80009fa:	753b      	strb	r3, [r7, #20]
}
 80009fc:	b003      	add	sp, #12
 80009fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000a00:	b2a9      	uxth	r1, r5
 8000a02:	4620      	mov	r0, r4
 8000a04:	f7ff ff22 	bl	800084c <FLASH_Program_HalfWord>
        break;
 8000a08:	e7ed      	b.n	80009e6 <HAL_FLASH_Program+0x36>
        FLASH_Program_Word(Address, (uint32_t) Data);
 8000a0a:	4629      	mov	r1, r5
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	f7ff ff09 	bl	8000824 <FLASH_Program_Word>
        break;
 8000a12:	e7e8      	b.n	80009e6 <HAL_FLASH_Program+0x36>
        FLASH_Program_DoubleWord(Address, Data);
 8000a14:	462a      	mov	r2, r5
 8000a16:	4620      	mov	r0, r4
 8000a18:	f7ff feec 	bl	80007f4 <FLASH_Program_DoubleWord>
        break;
 8000a1c:	e7e3      	b.n	80009e6 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8000a1e:	2002      	movs	r0, #2
 8000a20:	e7ec      	b.n	80009fc <HAL_FLASH_Program+0x4c>
 8000a22:	bf00      	nop
 8000a24:	2000003c 	.word	0x2000003c
 8000a28:	40023c00 	.word	0x40023c00

08000a2c <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <FLASH_MassErase+0x38>)
  if(Banks == FLASH_BANK_BOTH)
 8000a2e:	2903      	cmp	r1, #3
  FLASH->CR &= CR_PSIZE_MASK;
 8000a30:	691a      	ldr	r2, [r3, #16]
 8000a32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a36:	611a      	str	r2, [r3, #16]
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8000a38:	691a      	ldr	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 8000a3a:	d104      	bne.n	8000a46 <FLASH_MassErase+0x1a>
    FLASH->CR |= FLASH_MER_BIT;
 8000a3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    FLASH->CR |= FLASH_CR_MER2;
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8000a40:	f042 0204 	orr.w	r2, r2, #4
 8000a44:	e003      	b.n	8000a4e <FLASH_MassErase+0x22>
  else if(Banks == FLASH_BANK_2)
 8000a46:	2902      	cmp	r1, #2
 8000a48:	d1fa      	bne.n	8000a40 <FLASH_MassErase+0x14>
    FLASH->CR |= FLASH_CR_MER2;
 8000a4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    FLASH->CR |= FLASH_CR_MER1;    
 8000a4e:	611a      	str	r2, [r3, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8000a50:	691a      	ldr	r2, [r3, #16]
 8000a52:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000a56:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8000a5a:	6118      	str	r0, [r3, #16]
 8000a5c:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 8000a68:	233f      	movs	r3, #63	; 0x3f
  * @retval uint32_t FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <HAL_FLASHEx_OBGetConfig+0x40>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 8000a6c:	6003      	str	r3, [r0, #0]
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_FLASHEx_OBGetConfig+0x44>)
 8000a70:	6959      	ldr	r1, [r3, #20]
 8000a72:	400a      	ands	r2, r1
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 8000a74:	6082      	str	r2, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 8000a76:	7d59      	ldrb	r1, [r3, #21]
 8000a78:	29aa      	cmp	r1, #170	; 0xaa
 8000a7a:	b2ca      	uxtb	r2, r1
 8000a7c:	d003      	beq.n	8000a86 <HAL_FLASHEx_OBGetConfig+0x1e>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 8000a7e:	7d5a      	ldrb	r2, [r3, #21]
  {
    readstatus = OB_RDP_LEVEL_2;
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 8000a80:	2acc      	cmp	r2, #204	; 0xcc
 8000a82:	bf18      	it	ne
 8000a84:	2255      	movne	r2, #85	; 0x55
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8000a86:	60c2      	str	r2, [r0, #12]
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 8000a88:	4a09      	ldr	r2, [pc, #36]	; (8000ab0 <HAL_FLASHEx_OBGetConfig+0x48>)
 8000a8a:	6959      	ldr	r1, [r3, #20]
 8000a8c:	400a      	ands	r2, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8000a8e:	6142      	str	r2, [r0, #20]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 8000a90:	695a      	ldr	r2, [r3, #20]
 8000a92:	f002 020c 	and.w	r2, r2, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 8000a96:	6102      	str	r2, [r0, #16]
  uint32_t Address = 0;
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 8000a98:	699a      	ldr	r2, [r3, #24]
 8000a9a:	b292      	uxth	r2, r2
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 8000a9c:	6182      	str	r2, [r0, #24]
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	0c1b      	lsrs	r3, r3, #16
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 8000aa2:	61c3      	str	r3, [r0, #28]
}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	0fff0000 	.word	0x0fff0000
 8000aac:	40023c00 	.word	0x40023c00
 8000ab0:	f00000f0 	.word	0xf00000f0

08000ab4 <FLASH_Erase_Sector>:
  FLASH->CR &= CR_PSIZE_MASK;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <FLASH_Erase_Sector+0x44>)
 8000ab6:	2902      	cmp	r1, #2
 8000ab8:	691a      	ldr	r2, [r3, #16]
 8000aba:	bf94      	ite	ls
 8000abc:	0209      	lslls	r1, r1, #8
{
 8000abe:	f44f 7140 	movhi.w	r1, #768	; 0x300
  if(Sector > FLASH_SECTOR_11) 
 8000ac2:	280b      	cmp	r0, #11
  FLASH->CR &= CR_PSIZE_MASK;
 8000ac4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    Sector += 4;
 8000ac8:	bf88      	it	hi
 8000aca:	3004      	addhi	r0, #4
  FLASH->CR &= CR_PSIZE_MASK;
 8000acc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000ace:	691a      	ldr	r2, [r3, #16]
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000ad4:	691a      	ldr	r2, [r3, #16]
 8000ad6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000ada:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000adc:	691a      	ldr	r2, [r3, #16]
 8000ade:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000ae2:	f042 0202 	orr.w	r2, r2, #2
 8000ae6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000ae8:	691a      	ldr	r2, [r3, #16]
 8000aea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	f3bf 8f4f 	dsb	sy
}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023c00 	.word	0x40023c00

08000afc <HAL_FLASHEx_Erase>:
{
 8000afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8000b00:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000b9c <HAL_FLASHEx_Erase+0xa0>
{
 8000b04:	4605      	mov	r5, r0
 8000b06:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 8000b08:	f898 3014 	ldrb.w	r3, [r8, #20]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d040      	beq.n	8000b92 <HAL_FLASHEx_Erase+0x96>
 8000b10:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b12:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000b16:	f888 3014 	strb.w	r3, [r8, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b1a:	f7ff ff1d 	bl	8000958 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000b1e:	4604      	mov	r4, r0
 8000b20:	b9a8      	cbnz	r0, 8000b4e <HAL_FLASHEx_Erase+0x52>
    *SectorError = 0xFFFFFFFFU;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	603b      	str	r3, [r7, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000b28:	682b      	ldr	r3, [r5, #0]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d115      	bne.n	8000b5a <HAL_FLASHEx_Erase+0x5e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000b2e:	6869      	ldr	r1, [r5, #4]
 8000b30:	7c28      	ldrb	r0, [r5, #16]
 8000b32:	f7ff ff7b 	bl	8000a2c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b3a:	f7ff ff0d 	bl	8000958 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8000b3e:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <HAL_FLASHEx_Erase+0x9c>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b40:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8000b42:	6913      	ldr	r3, [r2, #16]
 8000b44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b48:	f023 0304 	bic.w	r3, r3, #4
 8000b4c:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f888 3014 	strb.w	r3, [r8, #20]
}
 8000b54:	4620      	mov	r0, r4
 8000b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000b5a:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000b5c:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8000b98 <HAL_FLASHEx_Erase+0x9c>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000b60:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8000b64:	4413      	add	r3, r2
 8000b66:	42b3      	cmp	r3, r6
 8000b68:	d9f1      	bls.n	8000b4e <HAL_FLASHEx_Erase+0x52>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000b6a:	7c29      	ldrb	r1, [r5, #16]
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	f7ff ffa1 	bl	8000ab4 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b76:	f7ff feef 	bl	8000958 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8000b7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000b7e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000b82:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8000b86:	b110      	cbz	r0, 8000b8e <HAL_FLASHEx_Erase+0x92>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b88:	4604      	mov	r4, r0
          *SectorError = index;
 8000b8a:	603e      	str	r6, [r7, #0]
          break;
 8000b8c:	e7df      	b.n	8000b4e <HAL_FLASHEx_Erase+0x52>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000b8e:	3601      	adds	r6, #1
 8000b90:	e7e6      	b.n	8000b60 <HAL_FLASHEx_Erase+0x64>
  __HAL_LOCK(&pFlash);
 8000b92:	2402      	movs	r4, #2
 8000b94:	e7de      	b.n	8000b54 <HAL_FLASHEx_Erase+0x58>
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00
 8000b9c:	2000003c 	.word	0x2000003c

08000ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ba4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8000d60 <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000baa:	4a6b      	ldr	r2, [pc, #428]	; (8000d58 <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 8000bac:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000bb0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000bb6:	43ac      	bics	r4, r5
 8000bb8:	f040 80b4 	bne.w	8000d24 <HAL_GPIO_Init+0x184>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bbc:	684d      	ldr	r5, [r1, #4]
 8000bbe:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bc2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc4:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bc8:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bcc:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bce:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bd0:	2f01      	cmp	r7, #1
 8000bd2:	d834      	bhi.n	8000c3e <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8000bd4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bd6:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bda:	68cf      	ldr	r7, [r1, #12]
 8000bdc:	fa07 f708 	lsl.w	r7, r7, r8
 8000be0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000be4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000be6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be8:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bec:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000bf0:	409f      	lsls	r7, r3
 8000bf2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000bf6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000bf8:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bfa:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bfc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c00:	688f      	ldr	r7, [r1, #8]
 8000c02:	fa07 f708 	lsl.w	r7, r7, r8
 8000c06:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8000c0a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c0c:	d119      	bne.n	8000c42 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8000c0e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c12:	f003 0b07 	and.w	fp, r3, #7
 8000c16:	f04f 0e0f 	mov.w	lr, #15
 8000c1a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000c1e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000c22:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c26:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000c2a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c2e:	690f      	ldr	r7, [r1, #16]
 8000c30:	fa07 f70b 	lsl.w	r7, r7, fp
 8000c34:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8000c38:	f8ca 7020 	str.w	r7, [sl, #32]
 8000c3c:	e001      	b.n	8000c42 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3e:	2c03      	cmp	r4, #3
 8000c40:	d1da      	bne.n	8000bf8 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8000c42:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c44:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c48:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c4c:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c50:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8000c54:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c56:	d065      	beq.n	8000d24 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c58:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8000c5c:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c60:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c64:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000c68:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c6c:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8000c72:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8000c76:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8000c7a:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8000c7e:	9401      	str	r4, [sp, #4]
 8000c80:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c82:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 8000c84:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c88:	40bc      	lsls	r4, r7
 8000c8a:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c8e:	4c33      	ldr	r4, [pc, #204]	; (8000d5c <HAL_GPIO_Init+0x1bc>)
 8000c90:	42a0      	cmp	r0, r4
 8000c92:	d04e      	beq.n	8000d32 <HAL_GPIO_Init+0x192>
 8000c94:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c98:	42a0      	cmp	r0, r4
 8000c9a:	d04c      	beq.n	8000d36 <HAL_GPIO_Init+0x196>
 8000c9c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ca0:	42a0      	cmp	r0, r4
 8000ca2:	d04a      	beq.n	8000d3a <HAL_GPIO_Init+0x19a>
 8000ca4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ca8:	42a0      	cmp	r0, r4
 8000caa:	d048      	beq.n	8000d3e <HAL_GPIO_Init+0x19e>
 8000cac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cb0:	42a0      	cmp	r0, r4
 8000cb2:	d046      	beq.n	8000d42 <HAL_GPIO_Init+0x1a2>
 8000cb4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cb8:	42a0      	cmp	r0, r4
 8000cba:	d044      	beq.n	8000d46 <HAL_GPIO_Init+0x1a6>
 8000cbc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cc0:	42a0      	cmp	r0, r4
 8000cc2:	d042      	beq.n	8000d4a <HAL_GPIO_Init+0x1aa>
 8000cc4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cc8:	42a0      	cmp	r0, r4
 8000cca:	d040      	beq.n	8000d4e <HAL_GPIO_Init+0x1ae>
 8000ccc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cd0:	42a0      	cmp	r0, r4
 8000cd2:	d03e      	beq.n	8000d52 <HAL_GPIO_Init+0x1b2>
 8000cd4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cd8:	42a0      	cmp	r0, r4
 8000cda:	bf0c      	ite	eq
 8000cdc:	2409      	moveq	r4, #9
 8000cde:	240a      	movne	r4, #10
 8000ce0:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ce2:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ce4:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ce8:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cea:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8000cee:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cf0:	bf54      	ite	pl
 8000cf2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000cf4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cf8:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8000cfa:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8000cfc:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cfe:	bf54      	ite	pl
 8000d00:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d02:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d06:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8000d08:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8000d0a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d0c:	bf54      	ite	pl
 8000d0e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d10:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d14:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8000d16:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8000d18:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d1a:	bf54      	ite	pl
 8000d1c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d1e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000d22:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d24:	3301      	adds	r3, #1
 8000d26:	2b10      	cmp	r3, #16
 8000d28:	f47f af40 	bne.w	8000bac <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000d2c:	b003      	add	sp, #12
 8000d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d32:	2400      	movs	r4, #0
 8000d34:	e7d4      	b.n	8000ce0 <HAL_GPIO_Init+0x140>
 8000d36:	2401      	movs	r4, #1
 8000d38:	e7d2      	b.n	8000ce0 <HAL_GPIO_Init+0x140>
 8000d3a:	2402      	movs	r4, #2
 8000d3c:	e7d0      	b.n	8000ce0 <HAL_GPIO_Init+0x140>
 8000d3e:	2403      	movs	r4, #3
 8000d40:	e7ce      	b.n	8000ce0 <HAL_GPIO_Init+0x140>
 8000d42:	2404      	movs	r4, #4
 8000d44:	e7cc      	b.n	8000ce0 <HAL_GPIO_Init+0x140>
 8000d46:	2405      	movs	r4, #5
 8000d48:	e7ca      	b.n	8000ce0 <HAL_GPIO_Init+0x140>
 8000d4a:	2406      	movs	r4, #6
 8000d4c:	e7c8      	b.n	8000ce0 <HAL_GPIO_Init+0x140>
 8000d4e:	2407      	movs	r4, #7
 8000d50:	e7c6      	b.n	8000ce0 <HAL_GPIO_Init+0x140>
 8000d52:	2408      	movs	r4, #8
 8000d54:	e7c4      	b.n	8000ce0 <HAL_GPIO_Init+0x140>
 8000d56:	bf00      	nop
 8000d58:	40013c00 	.word	0x40013c00
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40023800 	.word	0x40023800

08000d64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d64:	b10a      	cbz	r2, 8000d6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d66:	6181      	str	r1, [r0, #24]
  }
}
 8000d68:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d6a:	0409      	lsls	r1, r1, #16
 8000d6c:	e7fb      	b.n	8000d66 <HAL_GPIO_WritePin+0x2>
	...

08000d70 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000d72:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d76:	4c19      	ldr	r4, [pc, #100]	; (8000ddc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d90:	f7ff fc88 	bl	80006a4 <HAL_GetTick>
 8000d94:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d96:	6863      	ldr	r3, [r4, #4]
 8000d98:	03da      	lsls	r2, r3, #15
 8000d9a:	d50c      	bpl.n	8000db6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d9c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d9e:	4d0f      	ldr	r5, [pc, #60]	; (8000ddc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000da6:	f7ff fc7d 	bl	80006a4 <HAL_GetTick>
 8000daa:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000dac:	686b      	ldr	r3, [r5, #4]
 8000dae:	039b      	lsls	r3, r3, #14
 8000db0:	d50a      	bpl.n	8000dc8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000db2:	2000      	movs	r0, #0
 8000db4:	e006      	b.n	8000dc4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000db6:	f7ff fc75 	bl	80006a4 <HAL_GetTick>
 8000dba:	1b40      	subs	r0, r0, r5
 8000dbc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000dc0:	d9e9      	bls.n	8000d96 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000dc2:	2003      	movs	r0, #3
}
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000dc8:	f7ff fc6c 	bl	80006a4 <HAL_GetTick>
 8000dcc:	1b00      	subs	r0, r0, r4
 8000dce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000dd2:	d9eb      	bls.n	8000dac <HAL_PWREx_EnableOverDrive+0x3c>
 8000dd4:	e7f5      	b.n	8000dc2 <HAL_PWREx_EnableOverDrive+0x52>
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40007000 	.word	0x40007000

08000de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de4:	4604      	mov	r4, r0
 8000de6:	b340      	cbz	r0, 8000e3a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de8:	6803      	ldr	r3, [r0, #0]
 8000dea:	07db      	lsls	r3, r3, #31
 8000dec:	d410      	bmi.n	8000e10 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	079f      	lsls	r7, r3, #30
 8000df2:	d461      	bmi.n	8000eb8 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	0719      	lsls	r1, r3, #28
 8000df8:	f100 80a6 	bmi.w	8000f48 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	075a      	lsls	r2, r3, #29
 8000e00:	f100 80c7 	bmi.w	8000f92 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e04:	69a2      	ldr	r2, [r4, #24]
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f040 8130 	bne.w	800106c <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	e02c      	b.n	8000e6a <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e10:	4b94      	ldr	r3, [pc, #592]	; (8001064 <HAL_RCC_OscConfig+0x284>)
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	f002 020c 	and.w	r2, r2, #12
 8000e18:	2a04      	cmp	r2, #4
 8000e1a:	d007      	beq.n	8000e2c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	f002 020c 	and.w	r2, r2, #12
 8000e22:	2a08      	cmp	r2, #8
 8000e24:	d10b      	bne.n	8000e3e <HAL_RCC_OscConfig+0x5e>
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	025e      	lsls	r6, r3, #9
 8000e2a:	d508      	bpl.n	8000e3e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2c:	4b8d      	ldr	r3, [pc, #564]	; (8001064 <HAL_RCC_OscConfig+0x284>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	039d      	lsls	r5, r3, #14
 8000e32:	d5dc      	bpl.n	8000dee <HAL_RCC_OscConfig+0xe>
 8000e34:	6863      	ldr	r3, [r4, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1d9      	bne.n	8000dee <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	e015      	b.n	8000e6a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3e:	6863      	ldr	r3, [r4, #4]
 8000e40:	4d88      	ldr	r5, [pc, #544]	; (8001064 <HAL_RCC_OscConfig+0x284>)
 8000e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e46:	d113      	bne.n	8000e70 <HAL_RCC_OscConfig+0x90>
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e50:	f7ff fc28 	bl	80006a4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e54:	4e83      	ldr	r6, [pc, #524]	; (8001064 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8000e56:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e58:	6833      	ldr	r3, [r6, #0]
 8000e5a:	0398      	lsls	r0, r3, #14
 8000e5c:	d4c7      	bmi.n	8000dee <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e5e:	f7ff fc21 	bl	80006a4 <HAL_GetTick>
 8000e62:	1b40      	subs	r0, r0, r5
 8000e64:	2864      	cmp	r0, #100	; 0x64
 8000e66:	d9f7      	bls.n	8000e58 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8000e68:	2003      	movs	r0, #3
}
 8000e6a:	b002      	add	sp, #8
 8000e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e70:	b99b      	cbnz	r3, 8000e9a <HAL_RCC_OscConfig+0xba>
 8000e72:	682b      	ldr	r3, [r5, #0]
 8000e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e78:	602b      	str	r3, [r5, #0]
 8000e7a:	682b      	ldr	r3, [r5, #0]
 8000e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e80:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e82:	f7ff fc0f 	bl	80006a4 <HAL_GetTick>
 8000e86:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	0399      	lsls	r1, r3, #14
 8000e8c:	d5af      	bpl.n	8000dee <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e8e:	f7ff fc09 	bl	80006a4 <HAL_GetTick>
 8000e92:	1b80      	subs	r0, r0, r6
 8000e94:	2864      	cmp	r0, #100	; 0x64
 8000e96:	d9f7      	bls.n	8000e88 <HAL_RCC_OscConfig+0xa8>
 8000e98:	e7e6      	b.n	8000e68 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e9e:	682b      	ldr	r3, [r5, #0]
 8000ea0:	d103      	bne.n	8000eaa <HAL_RCC_OscConfig+0xca>
 8000ea2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea6:	602b      	str	r3, [r5, #0]
 8000ea8:	e7ce      	b.n	8000e48 <HAL_RCC_OscConfig+0x68>
 8000eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eae:	602b      	str	r3, [r5, #0]
 8000eb0:	682b      	ldr	r3, [r5, #0]
 8000eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb6:	e7ca      	b.n	8000e4e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eb8:	4b6a      	ldr	r3, [pc, #424]	; (8001064 <HAL_RCC_OscConfig+0x284>)
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	f012 0f0c 	tst.w	r2, #12
 8000ec0:	d007      	beq.n	8000ed2 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	f002 020c 	and.w	r2, r2, #12
 8000ec8:	2a08      	cmp	r2, #8
 8000eca:	d111      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x110>
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	025a      	lsls	r2, r3, #9
 8000ed0:	d40e      	bmi.n	8000ef0 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed2:	4a64      	ldr	r2, [pc, #400]	; (8001064 <HAL_RCC_OscConfig+0x284>)
 8000ed4:	6813      	ldr	r3, [r2, #0]
 8000ed6:	079b      	lsls	r3, r3, #30
 8000ed8:	d502      	bpl.n	8000ee0 <HAL_RCC_OscConfig+0x100>
 8000eda:	68e3      	ldr	r3, [r4, #12]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d1ac      	bne.n	8000e3a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee0:	6813      	ldr	r3, [r2, #0]
 8000ee2:	6921      	ldr	r1, [r4, #16]
 8000ee4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ee8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000eec:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eee:	e781      	b.n	8000df4 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000ef0:	68e3      	ldr	r3, [r4, #12]
 8000ef2:	4d5c      	ldr	r5, [pc, #368]	; (8001064 <HAL_RCC_OscConfig+0x284>)
 8000ef4:	b1bb      	cbz	r3, 8000f26 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000efe:	f7ff fbd1 	bl	80006a4 <HAL_GetTick>
 8000f02:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f04:	682b      	ldr	r3, [r5, #0]
 8000f06:	079f      	lsls	r7, r3, #30
 8000f08:	d507      	bpl.n	8000f1a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0a:	682b      	ldr	r3, [r5, #0]
 8000f0c:	6922      	ldr	r2, [r4, #16]
 8000f0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f12:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f16:	602b      	str	r3, [r5, #0]
 8000f18:	e76c      	b.n	8000df4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f1a:	f7ff fbc3 	bl	80006a4 <HAL_GetTick>
 8000f1e:	1b80      	subs	r0, r0, r6
 8000f20:	2802      	cmp	r0, #2
 8000f22:	d9ef      	bls.n	8000f04 <HAL_RCC_OscConfig+0x124>
 8000f24:	e7a0      	b.n	8000e68 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8000f26:	682b      	ldr	r3, [r5, #0]
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fbb9 	bl	80006a4 <HAL_GetTick>
 8000f32:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f34:	682b      	ldr	r3, [r5, #0]
 8000f36:	0798      	lsls	r0, r3, #30
 8000f38:	f57f af5c 	bpl.w	8000df4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fbb2 	bl	80006a4 <HAL_GetTick>
 8000f40:	1b80      	subs	r0, r0, r6
 8000f42:	2802      	cmp	r0, #2
 8000f44:	d9f6      	bls.n	8000f34 <HAL_RCC_OscConfig+0x154>
 8000f46:	e78f      	b.n	8000e68 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000f48:	6963      	ldr	r3, [r4, #20]
 8000f4a:	4d46      	ldr	r5, [pc, #280]	; (8001064 <HAL_RCC_OscConfig+0x284>)
 8000f4c:	b183      	cbz	r3, 8000f70 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8000f4e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000f56:	f7ff fba5 	bl	80006a4 <HAL_GetTick>
 8000f5a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f5c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f5e:	079b      	lsls	r3, r3, #30
 8000f60:	f53f af4c 	bmi.w	8000dfc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f64:	f7ff fb9e 	bl	80006a4 <HAL_GetTick>
 8000f68:	1b80      	subs	r0, r0, r6
 8000f6a:	2802      	cmp	r0, #2
 8000f6c:	d9f6      	bls.n	8000f5c <HAL_RCC_OscConfig+0x17c>
 8000f6e:	e77b      	b.n	8000e68 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8000f70:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f72:	f023 0301 	bic.w	r3, r3, #1
 8000f76:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000f78:	f7ff fb94 	bl	80006a4 <HAL_GetTick>
 8000f7c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f7e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f80:	079f      	lsls	r7, r3, #30
 8000f82:	f57f af3b 	bpl.w	8000dfc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f86:	f7ff fb8d 	bl	80006a4 <HAL_GetTick>
 8000f8a:	1b80      	subs	r0, r0, r6
 8000f8c:	2802      	cmp	r0, #2
 8000f8e:	d9f6      	bls.n	8000f7e <HAL_RCC_OscConfig+0x19e>
 8000f90:	e76a      	b.n	8000e68 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f92:	4b34      	ldr	r3, [pc, #208]	; (8001064 <HAL_RCC_OscConfig+0x284>)
 8000f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f96:	00d0      	lsls	r0, r2, #3
 8000f98:	d427      	bmi.n	8000fea <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000f9c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fa2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fae:	4d2e      	ldr	r5, [pc, #184]	; (8001068 <HAL_RCC_OscConfig+0x288>)
 8000fb0:	682b      	ldr	r3, [r5, #0]
 8000fb2:	05d9      	lsls	r1, r3, #23
 8000fb4:	d51b      	bpl.n	8000fee <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb6:	68a3      	ldr	r3, [r4, #8]
 8000fb8:	4d2a      	ldr	r5, [pc, #168]	; (8001064 <HAL_RCC_OscConfig+0x284>)
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d127      	bne.n	800100e <HAL_RCC_OscConfig+0x22e>
 8000fbe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fc6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000fca:	f7ff fb6b 	bl	80006a4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fce:	4e25      	ldr	r6, [pc, #148]	; (8001064 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8000fd0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000fd4:	079b      	lsls	r3, r3, #30
 8000fd6:	d53f      	bpl.n	8001058 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8000fd8:	2f00      	cmp	r7, #0
 8000fda:	f43f af13 	beq.w	8000e04 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fde:	4a21      	ldr	r2, [pc, #132]	; (8001064 <HAL_RCC_OscConfig+0x284>)
 8000fe0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	e70c      	b.n	8000e04 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8000fea:	2700      	movs	r7, #0
 8000fec:	e7df      	b.n	8000fae <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 8000fee:	682b      	ldr	r3, [r5, #0]
 8000ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fb55 	bl	80006a4 <HAL_GetTick>
 8000ffa:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	05da      	lsls	r2, r3, #23
 8001000:	d4d9      	bmi.n	8000fb6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001002:	f7ff fb4f 	bl	80006a4 <HAL_GetTick>
 8001006:	1b80      	subs	r0, r0, r6
 8001008:	2864      	cmp	r0, #100	; 0x64
 800100a:	d9f7      	bls.n	8000ffc <HAL_RCC_OscConfig+0x21c>
 800100c:	e72c      	b.n	8000e68 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100e:	b9ab      	cbnz	r3, 800103c <HAL_RCC_OscConfig+0x25c>
 8001010:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001012:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	672b      	str	r3, [r5, #112]	; 0x70
 800101c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800101e:	f023 0304 	bic.w	r3, r3, #4
 8001022:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001024:	f7ff fb3e 	bl	80006a4 <HAL_GetTick>
 8001028:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800102a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800102c:	0798      	lsls	r0, r3, #30
 800102e:	d5d3      	bpl.n	8000fd8 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001030:	f7ff fb38 	bl	80006a4 <HAL_GetTick>
 8001034:	1b80      	subs	r0, r0, r6
 8001036:	4540      	cmp	r0, r8
 8001038:	d9f7      	bls.n	800102a <HAL_RCC_OscConfig+0x24a>
 800103a:	e715      	b.n	8000e68 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103c:	2b05      	cmp	r3, #5
 800103e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001040:	d103      	bne.n	800104a <HAL_RCC_OscConfig+0x26a>
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	672b      	str	r3, [r5, #112]	; 0x70
 8001048:	e7b9      	b.n	8000fbe <HAL_RCC_OscConfig+0x1de>
 800104a:	f023 0301 	bic.w	r3, r3, #1
 800104e:	672b      	str	r3, [r5, #112]	; 0x70
 8001050:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001052:	f023 0304 	bic.w	r3, r3, #4
 8001056:	e7b5      	b.n	8000fc4 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001058:	f7ff fb24 	bl	80006a4 <HAL_GetTick>
 800105c:	1b40      	subs	r0, r0, r5
 800105e:	4540      	cmp	r0, r8
 8001060:	d9b7      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x1f2>
 8001062:	e701      	b.n	8000e68 <HAL_RCC_OscConfig+0x88>
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800106c:	4d3c      	ldr	r5, [pc, #240]	; (8001160 <HAL_RCC_OscConfig+0x380>)
 800106e:	68ab      	ldr	r3, [r5, #8]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	2b08      	cmp	r3, #8
 8001076:	d042      	beq.n	80010fe <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_PLL_DISABLE();
 8001078:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800107a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800107c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001080:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001082:	d12f      	bne.n	80010e4 <HAL_RCC_OscConfig+0x304>
        tickstart = HAL_GetTick();
 8001084:	f7ff fb0e 	bl	80006a4 <HAL_GetTick>
 8001088:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800108a:	682b      	ldr	r3, [r5, #0]
 800108c:	0199      	lsls	r1, r3, #6
 800108e:	d423      	bmi.n	80010d8 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001090:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001094:	4313      	orrs	r3, r2
 8001096:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001098:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800109c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800109e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010a4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80010a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010aa:	0852      	lsrs	r2, r2, #1
 80010ac:	3a01      	subs	r2, #1
 80010ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010b2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80010b4:	682b      	ldr	r3, [r5, #0]
 80010b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010bc:	f7ff faf2 	bl	80006a4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c0:	4d27      	ldr	r5, [pc, #156]	; (8001160 <HAL_RCC_OscConfig+0x380>)
        tickstart = HAL_GetTick();
 80010c2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	019a      	lsls	r2, r3, #6
 80010c8:	f53f aea0 	bmi.w	8000e0c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010cc:	f7ff faea 	bl	80006a4 <HAL_GetTick>
 80010d0:	1b00      	subs	r0, r0, r4
 80010d2:	2802      	cmp	r0, #2
 80010d4:	d9f6      	bls.n	80010c4 <HAL_RCC_OscConfig+0x2e4>
 80010d6:	e6c7      	b.n	8000e68 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d8:	f7ff fae4 	bl	80006a4 <HAL_GetTick>
 80010dc:	1b80      	subs	r0, r0, r6
 80010de:	2802      	cmp	r0, #2
 80010e0:	d9d3      	bls.n	800108a <HAL_RCC_OscConfig+0x2aa>
 80010e2:	e6c1      	b.n	8000e68 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 80010e4:	f7ff fade 	bl	80006a4 <HAL_GetTick>
 80010e8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ea:	682b      	ldr	r3, [r5, #0]
 80010ec:	019b      	lsls	r3, r3, #6
 80010ee:	f57f ae8d 	bpl.w	8000e0c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f2:	f7ff fad7 	bl	80006a4 <HAL_GetTick>
 80010f6:	1b00      	subs	r0, r0, r4
 80010f8:	2802      	cmp	r0, #2
 80010fa:	d9f6      	bls.n	80010ea <HAL_RCC_OscConfig+0x30a>
 80010fc:	e6b4      	b.n	8000e68 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010fe:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8001100:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001102:	f43f ae9a 	beq.w	8000e3a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001106:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800110a:	69e1      	ldr	r1, [r4, #28]
 800110c:	428a      	cmp	r2, r1
 800110e:	f47f ae94 	bne.w	8000e3a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001116:	6a21      	ldr	r1, [r4, #32]
 8001118:	428a      	cmp	r2, r1
 800111a:	f47f ae8e 	bne.w	8000e3a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800111e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001122:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001124:	401a      	ands	r2, r3
 8001126:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800112a:	f47f ae86 	bne.w	8000e3a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800112e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001130:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001134:	0852      	lsrs	r2, r2, #1
 8001136:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001138:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800113c:	f47f ae7d 	bne.w	8000e3a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001140:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001144:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001146:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800114a:	f47f ae76 	bne.w	8000e3a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800114e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001152:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001154:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8001158:	f43f ae58 	beq.w	8000e0c <HAL_RCC_OscConfig+0x2c>
 800115c:	e66d      	b.n	8000e3a <HAL_RCC_OscConfig+0x5a>
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001164:	4913      	ldr	r1, [pc, #76]	; (80011b4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001166:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001168:	688b      	ldr	r3, [r1, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b04      	cmp	r3, #4
 8001170:	d01b      	beq.n	80011aa <HAL_RCC_GetSysClockFreq+0x46>
 8001172:	2b08      	cmp	r3, #8
 8001174:	d11b      	bne.n	80011ae <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001176:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001178:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800117a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800117c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001180:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001184:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001188:	bf1a      	itte	ne
 800118a:	480b      	ldrne	r0, [pc, #44]	; (80011b8 <HAL_RCC_GetSysClockFreq+0x54>)
 800118c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800118e:	480b      	ldreq	r0, [pc, #44]	; (80011bc <HAL_RCC_GetSysClockFreq+0x58>)
 8001190:	fba1 0100 	umull	r0, r1, r1, r0
 8001194:	f7ff f850 	bl	8000238 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_RCC_GetSysClockFreq+0x50>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80011a0:	3301      	adds	r3, #1
 80011a2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80011a4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011a8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <HAL_RCC_GetSysClockFreq+0x54>)
 80011ac:	e7fc      	b.n	80011a8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80011b0:	e7fa      	b.n	80011a8 <HAL_RCC_GetSysClockFreq+0x44>
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	007a1200 	.word	0x007a1200
 80011bc:	00f42400 	.word	0x00f42400

080011c0 <HAL_RCC_ClockConfig>:
{
 80011c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011c4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80011c6:	4604      	mov	r4, r0
 80011c8:	b910      	cbnz	r0, 80011d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80011ca:	2001      	movs	r0, #1
}
 80011cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d0:	4a45      	ldr	r2, [pc, #276]	; (80012e8 <HAL_RCC_ClockConfig+0x128>)
 80011d2:	6813      	ldr	r3, [r2, #0]
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	428b      	cmp	r3, r1
 80011da:	d328      	bcc.n	800122e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011dc:	6821      	ldr	r1, [r4, #0]
 80011de:	078f      	lsls	r7, r1, #30
 80011e0:	d430      	bmi.n	8001244 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e2:	07c8      	lsls	r0, r1, #31
 80011e4:	d443      	bmi.n	800126e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011e6:	4a40      	ldr	r2, [pc, #256]	; (80012e8 <HAL_RCC_ClockConfig+0x128>)
 80011e8:	6813      	ldr	r3, [r2, #0]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	42ab      	cmp	r3, r5
 80011f0:	d866      	bhi.n	80012c0 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f2:	6822      	ldr	r2, [r4, #0]
 80011f4:	0751      	lsls	r1, r2, #29
 80011f6:	d46f      	bmi.n	80012d8 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f8:	0713      	lsls	r3, r2, #28
 80011fa:	d507      	bpl.n	800120c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011fc:	4a3b      	ldr	r2, [pc, #236]	; (80012ec <HAL_RCC_ClockConfig+0x12c>)
 80011fe:	6921      	ldr	r1, [r4, #16]
 8001200:	6893      	ldr	r3, [r2, #8]
 8001202:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001206:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800120a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800120c:	f7ff ffaa 	bl	8001164 <HAL_RCC_GetSysClockFreq>
 8001210:	4b36      	ldr	r3, [pc, #216]	; (80012ec <HAL_RCC_ClockConfig+0x12c>)
 8001212:	4a37      	ldr	r2, [pc, #220]	; (80012f0 <HAL_RCC_ClockConfig+0x130>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800121a:	5cd3      	ldrb	r3, [r2, r3]
 800121c:	40d8      	lsrs	r0, r3
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <HAL_RCC_ClockConfig+0x134>)
 8001220:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001222:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <HAL_RCC_ClockConfig+0x138>)
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f7ff f9f9 	bl	800061c <HAL_InitTick>
  return HAL_OK;
 800122a:	2000      	movs	r0, #0
 800122c:	e7ce      	b.n	80011cc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	6813      	ldr	r3, [r2, #0]
 8001230:	f023 030f 	bic.w	r3, r3, #15
 8001234:	430b      	orrs	r3, r1
 8001236:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001238:	6813      	ldr	r3, [r2, #0]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	428b      	cmp	r3, r1
 8001240:	d1c3      	bne.n	80011ca <HAL_RCC_ClockConfig+0xa>
 8001242:	e7cb      	b.n	80011dc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001244:	f011 0f04 	tst.w	r1, #4
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <HAL_RCC_ClockConfig+0x12c>)
 800124a:	d003      	beq.n	8001254 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001252:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001254:	070e      	lsls	r6, r1, #28
 8001256:	d503      	bpl.n	8001260 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800125e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	68a0      	ldr	r0, [r4, #8]
 8001264:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001268:	4302      	orrs	r2, r0
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	e7b9      	b.n	80011e2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126e:	6861      	ldr	r1, [r4, #4]
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <HAL_RCC_ClockConfig+0x12c>)
 8001272:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001274:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001276:	d11b      	bne.n	80012b0 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001278:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	d0a5      	beq.n	80011ca <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800127e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001280:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001284:	4f19      	ldr	r7, [pc, #100]	; (80012ec <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001286:	f022 0203 	bic.w	r2, r2, #3
 800128a:	430a      	orrs	r2, r1
 800128c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800128e:	f7ff fa09 	bl	80006a4 <HAL_GetTick>
 8001292:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	6862      	ldr	r2, [r4, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012a0:	d0a1      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a2:	f7ff f9ff 	bl	80006a4 <HAL_GetTick>
 80012a6:	1b80      	subs	r0, r0, r6
 80012a8:	4540      	cmp	r0, r8
 80012aa:	d9f3      	bls.n	8001294 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80012ac:	2003      	movs	r0, #3
 80012ae:	e78d      	b.n	80011cc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012b0:	2902      	cmp	r1, #2
 80012b2:	d102      	bne.n	80012ba <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80012b8:	e7e0      	b.n	800127c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ba:	f012 0f02 	tst.w	r2, #2
 80012be:	e7dd      	b.n	800127c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c0:	6813      	ldr	r3, [r2, #0]
 80012c2:	f023 030f 	bic.w	r3, r3, #15
 80012c6:	432b      	orrs	r3, r5
 80012c8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	6813      	ldr	r3, [r2, #0]
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	42ab      	cmp	r3, r5
 80012d2:	f47f af7a 	bne.w	80011ca <HAL_RCC_ClockConfig+0xa>
 80012d6:	e78c      	b.n	80011f2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d8:	4904      	ldr	r1, [pc, #16]	; (80012ec <HAL_RCC_ClockConfig+0x12c>)
 80012da:	68e0      	ldr	r0, [r4, #12]
 80012dc:	688b      	ldr	r3, [r1, #8]
 80012de:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80012e2:	4303      	orrs	r3, r0
 80012e4:	608b      	str	r3, [r1, #8]
 80012e6:	e787      	b.n	80011f8 <HAL_RCC_ClockConfig+0x38>
 80012e8:	40023c00 	.word	0x40023c00
 80012ec:	40023800 	.word	0x40023800
 80012f0:	080015aa 	.word	0x080015aa
 80012f4:	20000010 	.word	0x20000010
 80012f8:	20000018 	.word	0x20000018

080012fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001334 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001300:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001302:	e003      	b.n	800130c <LoopCopyDataInit>

08001304 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001306:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001308:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800130a:	3104      	adds	r1, #4

0800130c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001310:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001312:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001314:	d3f6      	bcc.n	8001304 <CopyDataInit>
  ldr  r2, =_sbss
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001318:	e002      	b.n	8001320 <LoopFillZerobss>

0800131a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800131a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800131c:	f842 3b04 	str.w	r3, [r2], #4

08001320 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001322:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001324:	d3f9      	bcc.n	800131a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001326:	f7ff f951 	bl	80005cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132a:	f000 f909 	bl	8001540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132e:	f000 f841 	bl	80013b4 <main>
  bx  lr    
 8001332:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001334:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001338:	080015d4 	.word	0x080015d4
  ldr  r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001340:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8001344:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8001348:	200000a4 	.word	0x200000a4

0800134c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC_IRQHandler>

0800134e <SystemClock_Config>:
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800134e:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001350:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
{
 8001354:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001356:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001358:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 432;  
 800135a:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  RCC_OscInitStruct.PLL.PLLR = 7;
 800135c:	2507      	movs	r5, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135e:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001360:	e9cd 1305 	strd	r1, r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001364:	2300      	movs	r3, #0
 8001366:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001368:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800136c:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8001370:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001374:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 7;
 8001378:	2309      	movs	r3, #9
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = 7;
 800137c:	e9cd 3510 	strd	r3, r5, [sp, #64]	; 0x40
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f7ff fd2e 	bl	8000de0 <HAL_RCC_OscConfig>
 8001384:	b100      	cbz	r0, 8001388 <SystemClock_Config+0x3a>
  {
    while(1) {};
 8001386:	e7fe      	b.n	8001386 <SystemClock_Config+0x38>
  }
  
  /* Activate the OverDrive to reach the 216 Mhz Frequency */
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001388:	f7ff fcf2 	bl	8000d70 <HAL_PWREx_EnableOverDrive>
 800138c:	b100      	cbz	r0, 8001390 <SystemClock_Config+0x42>
  {
    while(1) {};
 800138e:	e7fe      	b.n	800138e <SystemClock_Config+0x40>
  }
  
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001390:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001392:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001396:	9002      	str	r0, [sp, #8]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001398:	4629      	mov	r1, r5
 800139a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139c:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80013a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80013a8:	f7ff ff0a 	bl	80011c0 <HAL_RCC_ClockConfig>
 80013ac:	b100      	cbz	r0, 80013b0 <SystemClock_Config+0x62>
  {
    while(1) {};
 80013ae:	e7fe      	b.n	80013ae <SystemClock_Config+0x60>
  }
}
 80013b0:	b013      	add	sp, #76	; 0x4c
 80013b2:	bd30      	pop	{r4, r5, pc}

080013b4 <main>:
{
 80013b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
static void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 80013b6:	f7ff f9d3 	bl	8000760 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013ba:	2301      	movs	r3, #1
  MPU_InitStruct.BaseAddress = 0x00;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80013bc:	2400      	movs	r4, #0
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013be:	4668      	mov	r0, sp
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013c0:	f8ad 3000 	strh.w	r3, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80013c4:	f248 731f 	movw	r3, #34591	; 0x871f
 80013c8:	e9cd 4301 	strd	r4, r3, [sp, #4]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80013cc:	f240 1301 	movw	r3, #257	; 0x101
 80013d0:	9303      	str	r3, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013d2:	f7ff f9e3 	bl	800079c <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013d6:	2004      	movs	r0, #4
 80013d8:	f7ff f9d0 	bl	800077c <HAL_MPU_Enable>
 80013dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013e0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80013e4:	4a4d      	ldr	r2, [pc, #308]	; (800151c <main+0x168>)
 80013e6:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80013ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013ee:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80013f2:	6953      	ldr	r3, [r2, #20]
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013fe:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001402:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001406:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800140a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800140e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001412:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001416:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800141a:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800141c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001420:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001422:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8001426:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001428:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800142c:	d2f9      	bcs.n	8001422 <main+0x6e>
    } while(sets-- != 0U);
 800142e:	3b20      	subs	r3, #32
 8001430:	f113 0f20 	cmn.w	r3, #32
 8001434:	d1f2      	bne.n	800141c <main+0x68>
 8001436:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800143a:	6953      	ldr	r3, [r2, #20]
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6153      	str	r3, [r2, #20]
 8001442:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001446:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800144a:	f7ff f909 	bl	8000660 <HAL_Init>
  HAL_FLASHEx_OBGetConfig(&OBInit);
 800144e:	4c34      	ldr	r4, [pc, #208]	; (8001520 <main+0x16c>)
  SystemClock_Config();
 8001450:	f7ff ff7d 	bl	800134e <SystemClock_Config>
  BSP_LED_Init(LED1);
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff f86d 	bl	8000534 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff f86a 	bl	8000534 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001460:	2002      	movs	r0, #2
 8001462:	f7ff f867 	bl	8000534 <BSP_LED_Init>
  HAL_FLASH_Unlock();
 8001466:	f7ff fa49 	bl	80008fc <HAL_FLASH_Unlock>
  HAL_FLASH_OB_Unlock();
 800146a:	f7ff fa63 	bl	8000934 <HAL_FLASH_OB_Unlock>
  HAL_FLASHEx_OBGetConfig(&OBInit);
 800146e:	4620      	mov	r0, r4
 8001470:	f7ff fafa 	bl	8000a68 <HAL_FLASHEx_OBGetConfig>
  if((OBInit.USERConfig & OB_NDBANK_SINGLE_BANK) == OB_NDBANK_DUAL_BANK)
 8001474:	6963      	ldr	r3, [r4, #20]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	d409      	bmi.n	800148e <main+0xda>
      BSP_LED_Off(LED1);
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff f898 	bl	80005b0 <BSP_LED_Off>
      BSP_LED_Off(LED2);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff f895 	bl	80005b0 <BSP_LED_Off>
      BSP_LED_On(LED3);
 8001486:	2002      	movs	r0, #2
 8001488:	f7ff f884 	bl	8000594 <BSP_LED_On>
    while(1)
 800148c:	e7f5      	b.n	800147a <main+0xc6>
  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800148e:	2100      	movs	r1, #0
  NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 8001490:	2302      	movs	r3, #2
 8001492:	2204      	movs	r2, #4
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001494:	f104 0028 	add.w	r0, r4, #40	; 0x28
  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001498:	62a1      	str	r1, [r4, #40]	; 0x28
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800149a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800149e:	63a3      	str	r3, [r4, #56]	; 0x38
  NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 80014a0:	e9c4 2308 	strd	r2, r3, [r4, #32]
  EraseInitStruct.NbSectors     = NbOfSectors;
 80014a4:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80014a8:	f7ff fb28 	bl	8000afc <HAL_FLASHEx_Erase>
 80014ac:	b310      	cbz	r0, 80014f4 <main+0x140>
      BSP_LED_On(LED3);
 80014ae:	2002      	movs	r0, #2
 80014b0:	f7ff f870 	bl	8000594 <BSP_LED_On>
    while (1)
 80014b4:	e7fb      	b.n	80014ae <main+0xfa>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, data_to_write) == HAL_OK)
 80014b6:	462a      	mov	r2, r5
 80014b8:	2300      	movs	r3, #0
 80014ba:	2002      	movs	r0, #2
 80014bc:	f7ff fa78 	bl	80009b0 <HAL_FLASH_Program>
 80014c0:	b9a0      	cbnz	r0, 80014ec <main+0x138>
      Address = Address + 4;
 80014c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
      data_to_write ++;
 80014c4:	3501      	adds	r5, #1
      Address = Address + 4;
 80014c6:	3104      	adds	r1, #4
  while (Address < FLASH_USER_END_ADDR)
 80014c8:	42b1      	cmp	r1, r6
  Address = FLASH_USER_START_ADDR;
 80014ca:	6421      	str	r1, [r4, #64]	; 0x40
  while (Address < FLASH_USER_END_ADDR)
 80014cc:	d3f3      	bcc.n	80014b6 <main+0x102>
  HAL_FLASH_Lock();
 80014ce:	f7ff fa27 	bl	8000920 <HAL_FLASH_Lock>
  Address = FLASH_USER_START_ADDR;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <main+0x170>)
  while (Address < FLASH_USER_END_ADDR)
 80014d4:	4814      	ldr	r0, [pc, #80]	; (8001528 <main+0x174>)
  Address = FLASH_USER_START_ADDR;
 80014d6:	6423      	str	r3, [r4, #64]	; 0x40
  MemoryProgramStatus = 0x0;
 80014d8:	2300      	movs	r3, #0
 80014da:	6463      	str	r3, [r4, #68]	; 0x44
  while (Address < FLASH_USER_END_ADDR)
 80014dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014de:	4282      	cmp	r2, r0
 80014e0:	d30c      	bcc.n	80014fc <main+0x148>
  if (MemoryProgramStatus == 0)
 80014e2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80014e4:	b9b0      	cbnz	r0, 8001514 <main+0x160>
    BSP_LED_On(LED1);
 80014e6:	f7ff f855 	bl	8000594 <BSP_LED_On>
  while (1)
 80014ea:	e7fe      	b.n	80014ea <main+0x136>
        BSP_LED_On(LED3);
 80014ec:	2002      	movs	r0, #2
 80014ee:	f7ff f851 	bl	8000594 <BSP_LED_On>
      while (1)
 80014f2:	e7fb      	b.n	80014ec <main+0x138>
 80014f4:	490b      	ldr	r1, [pc, #44]	; (8001524 <main+0x170>)
  uint32_t data_to_write = 0;
 80014f6:	4605      	mov	r5, r0
  while (Address < FLASH_USER_END_ADDR)
 80014f8:	4e0b      	ldr	r6, [pc, #44]	; (8001528 <main+0x174>)
 80014fa:	e7e5      	b.n	80014c8 <main+0x114>
    data32 = *(__IO uint32_t *)Address; // read data
 80014fc:	6811      	ldr	r1, [r2, #0]
 80014fe:	64a1      	str	r1, [r4, #72]	; 0x48
    if (data32 != data_to_write)
 8001500:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001502:	4299      	cmp	r1, r3
 8001504:	d002      	beq.n	800150c <main+0x158>
      MemoryProgramStatus++;
 8001506:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001508:	3101      	adds	r1, #1
 800150a:	6461      	str	r1, [r4, #68]	; 0x44
    Address = Address + 4;
 800150c:	3204      	adds	r2, #4
    data_to_write ++;
 800150e:	3301      	adds	r3, #1
    Address = Address + 4;
 8001510:	6422      	str	r2, [r4, #64]	; 0x40
    data_to_write ++;
 8001512:	e7e3      	b.n	80014dc <main+0x128>
    BSP_LED_On(LED2);
 8001514:	2001      	movs	r0, #1
 8001516:	f7ff f83d 	bl	8000594 <BSP_LED_On>
 800151a:	e7e6      	b.n	80014ea <main+0x136>
 800151c:	e000ed00 	.word	0xe000ed00
 8001520:	20000058 	.word	0x20000058
 8001524:	08020000 	.word	0x08020000
 8001528:	0807ffff 	.word	0x0807ffff

0800152c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800152c:	4770      	bx	lr

0800152e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler>

08001530 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001530:	e7fe      	b.n	8001530 <MemManage_Handler>

08001532 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001532:	e7fe      	b.n	8001532 <BusFault_Handler>

08001534 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler>

08001536 <SVC_Handler>:
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:
 8001538:	4770      	bx	lr

0800153a <PendSV_Handler>:
 800153a:	4770      	bx	lr

0800153c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800153c:	f7ff b8a6 	b.w	800068c <HAL_IncTick>

08001540 <__libc_init_array>:
 8001540:	b570      	push	{r4, r5, r6, lr}
 8001542:	4d0d      	ldr	r5, [pc, #52]	; (8001578 <__libc_init_array+0x38>)
 8001544:	4c0d      	ldr	r4, [pc, #52]	; (800157c <__libc_init_array+0x3c>)
 8001546:	1b64      	subs	r4, r4, r5
 8001548:	10a4      	asrs	r4, r4, #2
 800154a:	2600      	movs	r6, #0
 800154c:	42a6      	cmp	r6, r4
 800154e:	d109      	bne.n	8001564 <__libc_init_array+0x24>
 8001550:	4d0b      	ldr	r5, [pc, #44]	; (8001580 <__libc_init_array+0x40>)
 8001552:	4c0c      	ldr	r4, [pc, #48]	; (8001584 <__libc_init_array+0x44>)
 8001554:	f000 f818 	bl	8001588 <_init>
 8001558:	1b64      	subs	r4, r4, r5
 800155a:	10a4      	asrs	r4, r4, #2
 800155c:	2600      	movs	r6, #0
 800155e:	42a6      	cmp	r6, r4
 8001560:	d105      	bne.n	800156e <__libc_init_array+0x2e>
 8001562:	bd70      	pop	{r4, r5, r6, pc}
 8001564:	f855 3b04 	ldr.w	r3, [r5], #4
 8001568:	4798      	blx	r3
 800156a:	3601      	adds	r6, #1
 800156c:	e7ee      	b.n	800154c <__libc_init_array+0xc>
 800156e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001572:	4798      	blx	r3
 8001574:	3601      	adds	r6, #1
 8001576:	e7f2      	b.n	800155e <__libc_init_array+0x1e>
 8001578:	080015cc 	.word	0x080015cc
 800157c:	080015cc 	.word	0x080015cc
 8001580:	080015cc 	.word	0x080015cc
 8001584:	080015d0 	.word	0x080015d0

08001588 <_init>:
 8001588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158a:	bf00      	nop
 800158c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800158e:	bc08      	pop	{r3}
 8001590:	469e      	mov	lr, r3
 8001592:	4770      	bx	lr

08001594 <_fini>:
 8001594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001596:	bf00      	nop
 8001598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800159a:	bc08      	pop	{r3}
 800159c:	469e      	mov	lr, r3
 800159e:	4770      	bx	lr

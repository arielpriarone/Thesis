
Novelty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006490  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006690  08006690  00016690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006724  08006724  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800672c  0800672c  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800672c  0800672c  0001672c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  0800679c  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  0800683c  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000105c  200001a8  080068dc  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20001204  080068dc  00021204  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201d6  2**0
                  CONTENTS, READONLY
 15 .debug_info   000197b7  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000030d8  00000000  00000000  000399d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001460  00000000  00000000  0003caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000fdc  00000000  00000000  0003df08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c43a  00000000  00000000  0003eee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000192a1  00000000  00000000  0006b31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001120f3  00000000  00000000  000845bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005ed0  00000000  00000000  001966b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  0019c584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a8 	.word	0x200001a8
 800021c:	00000000 	.word	0x00000000
 8000220:	08006678 	.word	0x08006678

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ac 	.word	0x200001ac
 800023c:	08006678 	.word	0x08006678

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	timer_index = 0;
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <main+0x40>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	801a      	strh	r2, [r3, #0]
	snap_flag = true; // begin with inibiiton of acquisition, set to false later
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <main+0x44>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fea5 	bl	800133a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f81c 	bl	800062c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RetargetInit(&huart3); // redirect the printf() and scanf() function to huart
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <main+0x48>)
 80005f6:	f000 fb11 	bl	8000c1c <RetargetInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f9bd 	bl	8000978 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fe:	f000 f95d 	bl	80008bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000602:	f000 f98b 	bl	800091c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000606:	f000 f883 	bl	8000710 <MX_ADC1_Init>
  MX_ETH_Init();
 800060a:	f000 f8d3 	bl	80007b4 <MX_ETH_Init>
  MX_TIM6_Init();
 800060e:	f000 f91f 	bl	8000850 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);  // start the timer
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <main+0x4c>)
 8000614:	f003 fc38 	bl	8003e88 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){
 8000618:	e7fe      	b.n	8000618 <main+0x3c>
 800061a:	bf00      	nop
 800061c:	200010a0 	.word	0x200010a0
 8000620:	200010a2 	.word	0x200010a2
 8000624:	20000340 	.word	0x20000340
 8000628:	200002f4 	.word	0x200002f4

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2234      	movs	r2, #52	; 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 fb3e 	bl	8005cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000650:	f002 fa66 	bl	8002b20 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <SystemClock_Config+0xdc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a2b      	ldr	r2, [pc, #172]	; (8000708 <SystemClock_Config+0xdc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b29      	ldr	r3, [pc, #164]	; (8000708 <SystemClock_Config+0xdc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066c:	4b27      	ldr	r3, [pc, #156]	; (800070c <SystemClock_Config+0xe0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a25      	ldr	r2, [pc, #148]	; (800070c <SystemClock_Config+0xe0>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <SystemClock_Config+0xe0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000690:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006a0:	2360      	movs	r3, #96	; 0x60
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fa93 	bl	8002be0 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c0:	f000 fa68 	bl	8000b94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c4:	f002 fa3c 	bl	8002b40 <HAL_PWREx_EnableOverDrive>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ce:	f000 fa61 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2103      	movs	r1, #3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fd24 	bl	800313c <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006fa:	f000 fa4b 	bl	8000b94 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <MX_ADC1_Init+0x9c>)
 8000726:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_ADC1_Init+0x98>)
 800072a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800072e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_ADC1_Init+0x98>)
 800073e:	2201      	movs	r2, #1
 8000740:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_ADC1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000752:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <MX_ADC1_Init+0xa0>)
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_ADC1_Init+0x98>)
 800075e:	2201      	movs	r2, #1
 8000760:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_ADC1_Init+0x98>)
 800076c:	2201      	movs	r2, #1
 800076e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000772:	f000 fe63 	bl	800143c <HAL_ADC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800077c:	f000 fa0a 	bl	8000b94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000784:	2301      	movs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000792:	f000 fffd 	bl	8001790 <HAL_ADC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800079c:	f000 f9fa 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200001fc 	.word	0x200001fc
 80007ac:	40012000 	.word	0x40012000
 80007b0:	0f000001 	.word	0x0f000001

080007b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_ETH_Init+0x84>)
 80007ba:	4a20      	ldr	r2, [pc, #128]	; (800083c <MX_ETH_Init+0x88>)
 80007bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_ETH_Init+0x8c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_ETH_Init+0x8c>)
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_ETH_Init+0x8c>)
 80007cc:	22e1      	movs	r2, #225	; 0xe1
 80007ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_ETH_Init+0x8c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_ETH_Init+0x8c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_ETH_Init+0x8c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_ETH_Init+0x84>)
 80007e4:	4a16      	ldr	r2, [pc, #88]	; (8000840 <MX_ETH_Init+0x8c>)
 80007e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_ETH_Init+0x84>)
 80007ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_ETH_Init+0x84>)
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MX_ETH_Init+0x90>)
 80007f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_ETH_Init+0x84>)
 80007f8:	4a13      	ldr	r2, [pc, #76]	; (8000848 <MX_ETH_Init+0x94>)
 80007fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_ETH_Init+0x84>)
 80007fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000802:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_ETH_Init+0x84>)
 8000806:	f001 fb25 	bl	8001e54 <HAL_ETH_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000810:	f000 f9c0 	bl	8000b94 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000814:	2238      	movs	r2, #56	; 0x38
 8000816:	2100      	movs	r1, #0
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_ETH_Init+0x98>)
 800081a:	f005 fa4f 	bl	8005cbc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_ETH_Init+0x98>)
 8000820:	2221      	movs	r2, #33	; 0x21
 8000822:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_ETH_Init+0x98>)
 8000826:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800082a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_ETH_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000244 	.word	0x20000244
 800083c:	40028000 	.word	0x40028000
 8000840:	200010a4 	.word	0x200010a4
 8000844:	20000108 	.word	0x20000108
 8000848:	20000068 	.word	0x20000068
 800084c:	200001c4 	.word	0x200001c4

08000850 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_TIM6_Init+0x64>)
 8000862:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <MX_TIM6_Init+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 96-1;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_TIM6_Init+0x64>)
 8000868:	225f      	movs	r2, #95	; 0x5f
 800086a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_TIM6_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_TIM6_Init+0x64>)
 8000874:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000878:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_TIM6_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <MX_TIM6_Init+0x64>)
 8000882:	f003 faa9 	bl	8003dd8 <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800088c:	f000 f982 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_TIM6_Init+0x64>)
 800089e:	f003 fd53 	bl	8004348 <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 f974 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200002f4 	.word	0x200002f4
 80008b8:	40001000 	.word	0x40001000

080008bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USART3_UART_Init+0x58>)
 80008c2:	4a15      	ldr	r2, [pc, #84]	; (8000918 <MX_USART3_UART_Init+0x5c>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_USART3_UART_Init+0x58>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_USART3_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_USART3_UART_Init+0x58>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USART3_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USART3_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USART3_UART_Init+0x58>)
 8000900:	f003 fdce 	bl	80044a0 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800090a:	f000 f943 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000340 	.word	0x20000340
 8000918:	40004800 	.word	0x40004800

0800091c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000926:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2206      	movs	r2, #6
 800092c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	2202      	movs	r2, #2
 8000932:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2202      	movs	r2, #2
 800093e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2201      	movs	r2, #1
 8000944:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000954:	2201      	movs	r2, #1
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000960:	f001 ff96 	bl	8002890 <HAL_PCD_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800096a:	f000 f913 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200003c8 	.word	0x200003c8

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b4b      	ldr	r3, [pc, #300]	; (8000abc <MX_GPIO_Init+0x144>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a4a      	ldr	r2, [pc, #296]	; (8000abc <MX_GPIO_Init+0x144>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b48      	ldr	r3, [pc, #288]	; (8000abc <MX_GPIO_Init+0x144>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	4b45      	ldr	r3, [pc, #276]	; (8000abc <MX_GPIO_Init+0x144>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a44      	ldr	r2, [pc, #272]	; (8000abc <MX_GPIO_Init+0x144>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b42      	ldr	r3, [pc, #264]	; (8000abc <MX_GPIO_Init+0x144>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b3f      	ldr	r3, [pc, #252]	; (8000abc <MX_GPIO_Init+0x144>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a3e      	ldr	r2, [pc, #248]	; (8000abc <MX_GPIO_Init+0x144>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b3c      	ldr	r3, [pc, #240]	; (8000abc <MX_GPIO_Init+0x144>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b39      	ldr	r3, [pc, #228]	; (8000abc <MX_GPIO_Init+0x144>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a38      	ldr	r2, [pc, #224]	; (8000abc <MX_GPIO_Init+0x144>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b36      	ldr	r3, [pc, #216]	; (8000abc <MX_GPIO_Init+0x144>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	4b33      	ldr	r3, [pc, #204]	; (8000abc <MX_GPIO_Init+0x144>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a32      	ldr	r2, [pc, #200]	; (8000abc <MX_GPIO_Init+0x144>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b30      	ldr	r3, [pc, #192]	; (8000abc <MX_GPIO_Init+0x144>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a06:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <MX_GPIO_Init+0x144>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <MX_GPIO_Init+0x144>)
 8000a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <MX_GPIO_Init+0x144>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a24:	4826      	ldr	r0, [pc, #152]	; (8000ac0 <MX_GPIO_Init+0x148>)
 8000a26:	f001 fee7 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	4825      	ldr	r0, [pc, #148]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 8000a30:	f001 fee2 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a40:	2302      	movs	r3, #2
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	481f      	ldr	r0, [pc, #124]	; (8000ac8 <MX_GPIO_Init+0x150>)
 8000a4c:	f001 fd28 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a50:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <MX_GPIO_Init+0x148>)
 8000a6a:	f001 fd19 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a6e:	2340      	movs	r3, #64	; 0x40
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	480f      	ldr	r0, [pc, #60]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 8000a86:	f001 fd0b 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <MX_GPIO_Init+0x14c>)
 8000a9e:	f001 fcff 	bl	80024a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2028      	movs	r0, #40	; 0x28
 8000aa8:	f001 f99d 	bl	8001de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aac:	2028      	movs	r0, #40	; 0x28
 8000aae:	f001 f9b6 	bl	8001e1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3730      	adds	r7, #48	; 0x30
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	40021800 	.word	0x40021800
 8000ac8:	40020800 	.word	0x40020800

08000acc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // GPIO interrupt handler
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == 0x2000){ // if user btn is pressed
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000adc:	d103      	bne.n	8000ae6 <HAL_GPIO_EXTI_Callback+0x1a>
		snap_flag = false; //request a snapshot
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
	}
	else{
		printf("Unknown GPIO interrupt happened");
	}
}
 8000ae4:	e002      	b.n	8000aec <HAL_GPIO_EXTI_Callback+0x20>
		printf("Unknown GPIO interrupt happened");
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000ae8:	f004 fef4 	bl	80058d4 <iprintf>
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200010a2 	.word	0x200010a2
 8000af8:	08006690 	.word	0x08006690

08000afc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	if(htim == &htim6 && snap_flag == false){ // if the timer is the analog management and the conversion is not already done
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d133      	bne.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	f083 0301 	eor.w	r3, r3, #1
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d02c      	beq.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x78>
		// Get ADC value
		    HAL_ADC_Start(&hadc1);
 8000b1a:	481a      	ldr	r0, [pc, #104]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b1c:	f000 fcd2 	bl	80014c4 <HAL_ADC_Start>
		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	4817      	ldr	r0, [pc, #92]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b26:	f000 fd9b 	bl	8001660 <HAL_ADC_PollForConversion>
		    adc_buf[timer_index]= HAL_ADC_GetValue(&hadc1); // save the value in the array
 8000b2a:	4816      	ldr	r0, [pc, #88]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b2c:	f000 fe23 	bl	8001776 <HAL_ADC_GetValue>
 8000b30:	4601      	mov	r1, r0
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	b289      	uxth	r1, r1
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b3c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000b40:	2101      	movs	r1, #1
 8000b42:	4813      	ldr	r0, [pc, #76]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b44:	f001 fe71 	bl	800282a <HAL_GPIO_TogglePin>
		    timer_index ++;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b52:	801a      	strh	r2, [r3, #0]
		    if(timer_index>=ADC_BUF_LEN){
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b5c:	d30a      	bcc.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x78>
		    	timer_index=0;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	801a      	strh	r2, [r3, #0]
		    	SnapReadyCallback(adc_buf, ADC_BUF_LEN);
 8000b64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b68:	4808      	ldr	r0, [pc, #32]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b6a:	f000 f843 	bl	8000bf4 <SnapReadyCallback>
		    	snap_flag = true; // conversion complete flag
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
		    }
	}
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200002f4 	.word	0x200002f4
 8000b80:	200010a2 	.word	0x200010a2
 8000b84:	200001fc 	.word	0x200001fc
 8000b88:	200010a0 	.word	0x200010a0
 8000b8c:	200008d0 	.word	0x200008d0
 8000b90:	40020400 	.word	0x40020400

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000b9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba0:	4801      	ldr	r0, [pc, #4]	; (8000ba8 <Error_Handler+0x14>)
 8000ba2:	f001 fe42 	bl	800282a <HAL_GPIO_TogglePin>
 8000ba6:	e7f9      	b.n	8000b9c <Error_Handler+0x8>
 8000ba8:	40020400 	.word	0x40020400

08000bac <printarray>:
		result += strlen(result);
	}
	sprintf(result, "%u", uintArray[i]);  // Last element without a tab
}

void printarray(const uint16_t *uintarray, size_t length){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
	for (int var = 0; var < length; ++var) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	e00b      	b.n	8000bd4 <printarray+0x28>
		printf("%u\r\n", uintarray[var]);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4808      	ldr	r0, [pc, #32]	; (8000bec <printarray+0x40>)
 8000bca:	f004 fe83 	bl	80058d4 <iprintf>
	for (int var = 0; var < length; ++var) {
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d8ef      	bhi.n	8000bbc <printarray+0x10>
	}
	printf("\r\n");
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <printarray+0x44>)
 8000bde:	f004 fedf 	bl	80059a0 <puts>
}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	080066b4 	.word	0x080066b4
 8000bf0:	080066bc 	.word	0x080066bc

08000bf4 <SnapReadyCallback>:

SnapReadyCallback(const uint16_t *uintarray, size_t length){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
	printf("Snapshot acquired: \r\n");
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <SnapReadyCallback+0x24>)
 8000c00:	f004 fece 	bl	80059a0 <puts>
	printarray(uintarray, length);
 8000c04:	6839      	ldr	r1, [r7, #0]
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ffd0 	bl	8000bac <printarray>
}
 8000c0c:	bf00      	nop
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	080066c0 	.word	0x080066c0

08000c1c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <RetargetInit+0x28>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <RetargetInit+0x2c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6898      	ldr	r0, [r3, #8]
 8000c30:	2300      	movs	r3, #0
 8000c32:	2202      	movs	r2, #2
 8000c34:	2100      	movs	r1, #0
 8000c36:	f004 febb 	bl	80059b0 <setvbuf>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200010ac 	.word	0x200010ac
 8000c48:	20000064 	.word	0x20000064

08000c4c <_isatty>:

int _isatty(int fd) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db04      	blt.n	8000c64 <_isatty+0x18>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	dc01      	bgt.n	8000c64 <_isatty+0x18>
    return 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e005      	b.n	8000c70 <_isatty+0x24>

  errno = EBADF;
 8000c64:	f005 f888 	bl	8005d78 <__errno>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2209      	movs	r2, #9
 8000c6c:	601a      	str	r2, [r3, #0]
  return 0;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_write>:

int _write(int fd, char* ptr, int len) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d002      	beq.n	8000c90 <_write+0x18>
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d111      	bne.n	8000cb4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <_write+0x54>)
 8000c92:	6818      	ldr	r0, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	f003 fc4d 	bl	800453c <HAL_UART_Transmit>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d101      	bne.n	8000cb0 <_write+0x38>
      return len;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	e008      	b.n	8000cc2 <_write+0x4a>
    else
      return EIO;
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	e006      	b.n	8000cc2 <_write+0x4a>
  }
  errno = EBADF;
 8000cb4:	f005 f860 	bl	8005d78 <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2209      	movs	r2, #9
 8000cbc:	601a      	str	r2, [r3, #0]
  return -1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200010ac 	.word	0x200010ac

08000cd0 <_close>:

int _close(int fd) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db04      	blt.n	8000ce8 <_close+0x18>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	dc01      	bgt.n	8000ce8 <_close+0x18>
    return 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e006      	b.n	8000cf6 <_close+0x26>

  errno = EBADF;
 8000ce8:	f005 f846 	bl	8005d78 <__errno>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2209      	movs	r2, #9
 8000cf0:	601a      	str	r2, [r3, #0]
  return -1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000d0a:	f005 f835 	bl	8005d78 <__errno>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2209      	movs	r2, #9
 8000d12:	601a      	str	r2, [r3, #0]
  return -1;
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_read>:

int _read(int fd, char* ptr, int len) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d110      	bne.n	8000d54 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <_read+0x4c>)
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	f003 fc80 	bl	8004642 <HAL_UART_Receive>
 8000d42:	4603      	mov	r3, r0
 8000d44:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d101      	bne.n	8000d50 <_read+0x30>
      return 1;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e008      	b.n	8000d62 <_read+0x42>
    else
      return EIO;
 8000d50:	2305      	movs	r3, #5
 8000d52:	e006      	b.n	8000d62 <_read+0x42>
  }
  errno = EBADF;
 8000d54:	f005 f810 	bl	8005d78 <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2209      	movs	r2, #9
 8000d5c:	601a      	str	r2, [r3, #0]
  return -1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200010ac 	.word	0x200010ac

08000d70 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db08      	blt.n	8000d92 <_fstat+0x22>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	dc05      	bgt.n	8000d92 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d8c:	605a      	str	r2, [r3, #4]
    return 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e005      	b.n	8000d9e <_fstat+0x2e>
  }

  errno = EBADF;
 8000d92:	f004 fff1 	bl	8005d78 <__errno>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2209      	movs	r2, #9
 8000d9a:	601a      	str	r2, [r3, #0]
  return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_MspInit+0x44>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_MspInit+0x44>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_MspInit+0x44>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_MspInit+0x44>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_MspInit+0x44>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_MspInit+0x44>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a15      	ldr	r2, [pc, #84]	; (8000e64 <HAL_ADC_MspInit+0x74>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d123      	bne.n	8000e5a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_ADC_MspInit+0x78>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <HAL_ADC_MspInit+0x78>)
 8000e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_ADC_MspInit+0x78>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_ADC_MspInit+0x78>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <HAL_ADC_MspInit+0x78>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_ADC_MspInit+0x78>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e42:	2301      	movs	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e46:	2303      	movs	r3, #3
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_ADC_MspInit+0x7c>)
 8000e56:	f001 fb23 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40012000 	.word	0x40012000
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000

08000e70 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08e      	sub	sp, #56	; 0x38
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a4e      	ldr	r2, [pc, #312]	; (8000fc8 <HAL_ETH_MspInit+0x158>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	f040 8096 	bne.w	8000fc0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e94:	4b4d      	ldr	r3, [pc, #308]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000e9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea0:	4b4a      	ldr	r3, [pc, #296]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea8:	623b      	str	r3, [r7, #32]
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	4b47      	ldr	r3, [pc, #284]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	4a46      	ldr	r2, [pc, #280]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000eb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb8:	4b44      	ldr	r3, [pc, #272]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ec0:	61fb      	str	r3, [r7, #28]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	4b41      	ldr	r3, [pc, #260]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	4a40      	ldr	r2, [pc, #256]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000eca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ece:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed0:	4b3e      	ldr	r3, [pc, #248]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000edc:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	4a3a      	ldr	r2, [pc, #232]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee8:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b35      	ldr	r3, [pc, #212]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	4a34      	ldr	r2, [pc, #208]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6313      	str	r3, [r2, #48]	; 0x30
 8000f00:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	4a2e      	ldr	r2, [pc, #184]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	6313      	str	r3, [r2, #48]	; 0x30
 8000f18:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_ETH_MspInit+0x15c>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f3c:	2332      	movs	r3, #50	; 0x32
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f4c:	230b      	movs	r3, #11
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f54:	4619      	mov	r1, r3
 8000f56:	481e      	ldr	r0, [pc, #120]	; (8000fd0 <HAL_ETH_MspInit+0x160>)
 8000f58:	f001 faa2 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f5c:	2386      	movs	r3, #134	; 0x86
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6c:	230b      	movs	r3, #11
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f74:	4619      	mov	r1, r3
 8000f76:	4817      	ldr	r0, [pc, #92]	; (8000fd4 <HAL_ETH_MspInit+0x164>)
 8000f78:	f001 fa92 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f8e:	230b      	movs	r3, #11
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	480f      	ldr	r0, [pc, #60]	; (8000fd8 <HAL_ETH_MspInit+0x168>)
 8000f9a:	f001 fa81 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb0:	230b      	movs	r3, #11
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4808      	ldr	r0, [pc, #32]	; (8000fdc <HAL_ETH_MspInit+0x16c>)
 8000fbc:	f001 fa70 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3738      	adds	r7, #56	; 0x38
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40028000 	.word	0x40028000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40021800 	.word	0x40021800

08000fe0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <HAL_TIM_Base_MspInit+0x44>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d113      	bne.n	800101a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_TIM_Base_MspInit+0x48>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <HAL_TIM_Base_MspInit+0x48>)
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_TIM_Base_MspInit+0x48>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	2036      	movs	r0, #54	; 0x36
 8001010:	f000 fee9 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001014:	2036      	movs	r0, #54	; 0x36
 8001016:	f000 ff02 	bl	8001e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40001000 	.word	0x40001000
 8001028:	40023800 	.word	0x40023800

0800102c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0ae      	sub	sp, #184	; 0xb8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2290      	movs	r2, #144	; 0x90
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f004 fe35 	bl	8005cbc <memset>
  if(huart->Instance==USART3)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <HAL_UART_MspInit+0xb4>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d13c      	bne.n	80010d6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800105c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001060:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001062:	2300      	movs	r3, #0
 8001064:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4618      	mov	r0, r3
 800106c:	f002 fa8c 	bl	8003588 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001076:	f7ff fd8d 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 8001080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c4:	2307      	movs	r3, #7
 80010c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HAL_UART_MspInit+0xbc>)
 80010d2:	f001 f9e5 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010d6:	bf00      	nop
 80010d8:	37b8      	adds	r7, #184	; 0xb8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40004800 	.word	0x40004800
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020c00 	.word	0x40020c00

080010ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0ae      	sub	sp, #184	; 0xb8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2290      	movs	r2, #144	; 0x90
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f004 fdd5 	bl	8005cbc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800111a:	d159      	bne.n	80011d0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800111c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001120:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fa2b 	bl	8003588 <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001138:	f7ff fd2c 	bl	8000b94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6313      	str	r3, [r2, #48]	; 0x30
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001154:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001158:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800116e:	230a      	movs	r3, #10
 8001170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001178:	4619      	mov	r1, r3
 800117a:	4818      	ldr	r0, [pc, #96]	; (80011dc <HAL_PCD_MspInit+0xf0>)
 800117c:	f001 f990 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001198:	4619      	mov	r1, r3
 800119a:	4810      	ldr	r0, [pc, #64]	; (80011dc <HAL_PCD_MspInit+0xf0>)
 800119c:	f001 f980 	bl	80024a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 80011a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a4:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 80011a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011aa:	6353      	str	r3, [r2, #52]	; 0x34
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 80011ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 80011be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c2:	6453      	str	r3, [r2, #68]	; 0x44
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <HAL_PCD_MspInit+0xec>)
 80011c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011d0:	bf00      	nop
 80011d2:	37b8      	adds	r7, #184	; 0xb8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f8c2 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001238:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800123c:	f001 fb10 	bl	8002860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <TIM6_DAC_IRQHandler+0x10>)
 800124a:	f002 fe95 	bl	8003f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200002f4 	.word	0x200002f4

08001258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <_sbrk+0x5c>)
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <_sbrk+0x60>)
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <_sbrk+0x64>)
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <_sbrk+0x68>)
 8001278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	429a      	cmp	r2, r3
 8001286:	d207      	bcs.n	8001298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001288:	f004 fd76 	bl	8005d78 <__errno>
 800128c:	4603      	mov	r3, r0
 800128e:	220c      	movs	r2, #12
 8001290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	e009      	b.n	80012ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <_sbrk+0x64>)
 80012a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20080000 	.word	0x20080000
 80012b8:	00000400 	.word	0x00000400
 80012bc:	200010b0 	.word	0x200010b0
 80012c0:	20001208 	.word	0x20001208

080012c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <SystemInit+0x20>)
 80012ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <SystemInit+0x20>)
 80012d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ee:	490e      	ldr	r1, [pc, #56]	; (8001328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001304:	4c0b      	ldr	r4, [pc, #44]	; (8001334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001312:	f7ff ffd7 	bl	80012c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001316:	f004 fd35 	bl	8005d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131a:	f7ff f95f 	bl	80005dc <main>
  bx  lr    
 800131e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001320:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800132c:	08006734 	.word	0x08006734
  ldr r2, =_sbss
 8001330:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8001334:	20001204 	.word	0x20001204

08001338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC_IRQHandler>

0800133a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133e:	2003      	movs	r0, #3
 8001340:	f000 fd46 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001344:	2000      	movs	r0, #0
 8001346:	f000 f805 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134a:	f7ff fd2d 	bl	8000da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_InitTick+0x54>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x58>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	fbb3 f3f1 	udiv	r3, r3, r1
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fd61 	bl	8001e3a <HAL_SYSTICK_Config>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e00e      	b.n	80013a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d80a      	bhi.n	800139e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f000 fd29 	bl	8001de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <HAL_InitTick+0x5c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000004 	.word	0x20000004

080013b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x20>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x24>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_IncTick+0x24>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000008 	.word	0x20000008
 80013d8:	200010b4 	.word	0x200010b4

080013dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_GetTick+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	200010b4 	.word	0x200010b4

080013f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff ffee 	bl	80013dc <HAL_GetTick>
 8001400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140c:	d005      	beq.n	800141a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_Delay+0x44>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141a:	bf00      	nop
 800141c:	f7ff ffde 	bl	80013dc <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d8f7      	bhi.n	800141c <HAL_Delay+0x28>
  {
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000008 	.word	0x20000008

0800143c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e031      	b.n	80014b6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fcc8 	bl	8000df0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	2b00      	cmp	r3, #0
 8001478:	d116      	bne.n	80014a8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <HAL_ADC_Init+0x84>)
 8001480:	4013      	ands	r3, r2
 8001482:	f043 0202 	orr.w	r2, r3, #2
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fad6 	bl	8001a3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f023 0303 	bic.w	r3, r3, #3
 800149e:	f043 0201 	orr.w	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
 80014a6:	e001      	b.n	80014ac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	ffffeefd 	.word	0xffffeefd

080014c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <HAL_ADC_Start+0x1a>
 80014da:	2302      	movs	r3, #2
 80014dc:	e0ad      	b.n	800163a <HAL_ADC_Start+0x176>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d018      	beq.n	8001526 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0201 	orr.w	r2, r2, #1
 8001502:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001504:	4b50      	ldr	r3, [pc, #320]	; (8001648 <HAL_ADC_Start+0x184>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a50      	ldr	r2, [pc, #320]	; (800164c <HAL_ADC_Start+0x188>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	0c9a      	lsrs	r2, r3, #18
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001518:	e002      	b.n	8001520 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3b01      	subs	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f9      	bne.n	800151a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b01      	cmp	r3, #1
 8001532:	d175      	bne.n	8001620 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001538:	4b45      	ldr	r3, [pc, #276]	; (8001650 <HAL_ADC_Start+0x18c>)
 800153a:	4013      	ands	r3, r2
 800153c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800155a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800156e:	d106      	bne.n	800157e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001574:	f023 0206 	bic.w	r2, r3, #6
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	645a      	str	r2, [r3, #68]	; 0x44
 800157c:	e002      	b.n	8001584 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001594:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <HAL_ADC_Start+0x190>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10f      	bne.n	80015c2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d143      	bne.n	8001638 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	e03a      	b.n	8001638 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a24      	ldr	r2, [pc, #144]	; (8001658 <HAL_ADC_Start+0x194>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d10e      	bne.n	80015ea <HAL_ADC_Start+0x126>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d107      	bne.n	80015ea <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015e8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_ADC_Start+0x190>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d120      	bne.n	8001638 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a18      	ldr	r2, [pc, #96]	; (800165c <HAL_ADC_Start+0x198>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d11b      	bne.n	8001638 <HAL_ADC_Start+0x174>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d114      	bne.n	8001638 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	e00b      	b.n	8001638 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f043 0210 	orr.w	r2, r3, #16
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	f043 0201 	orr.w	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000000 	.word	0x20000000
 800164c:	431bde83 	.word	0x431bde83
 8001650:	fffff8fe 	.word	0xfffff8fe
 8001654:	40012300 	.word	0x40012300
 8001658:	40012000 	.word	0x40012000
 800165c:	40012200 	.word	0x40012200

08001660 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167c:	d113      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800168c:	d10b      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f043 0220 	orr.w	r2, r3, #32
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e063      	b.n	800176e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80016a6:	f7ff fe99 	bl	80013dc <HAL_GetTick>
 80016aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016ac:	e021      	b.n	80016f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d01d      	beq.n	80016f2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_ADC_PollForConversion+0x6c>
 80016bc:	f7ff fe8e 	bl	80013dc <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d212      	bcs.n	80016f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d00b      	beq.n	80016f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f043 0204 	orr.w	r2, r3, #4
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e03d      	b.n	800176e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d1d6      	bne.n	80016ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f06f 0212 	mvn.w	r2, #18
 8001708:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d123      	bne.n	800176c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001728:	2b00      	cmp	r3, #0
 800172a:	d11f      	bne.n	800176c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001744:	2b00      	cmp	r3, #0
 8001746:	d111      	bne.n	800176c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x1c>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e136      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x28a>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b09      	cmp	r3, #9
 80017ba:	d93a      	bls.n	8001832 <HAL_ADC_ConfigChannel+0xa2>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017c4:	d035      	beq.n	8001832 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68d9      	ldr	r1, [r3, #12]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	3b1e      	subs	r3, #30
 80017dc:	2207      	movs	r2, #7
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	400a      	ands	r2, r1
 80017ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a8d      	ldr	r2, [pc, #564]	; (8001a28 <HAL_ADC_ConfigChannel+0x298>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d10a      	bne.n	800180c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68d9      	ldr	r1, [r3, #12]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	061a      	lsls	r2, r3, #24
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800180a:	e035      	b.n	8001878 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68d9      	ldr	r1, [r3, #12]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	4603      	mov	r3, r0
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4403      	add	r3, r0
 8001824:	3b1e      	subs	r3, #30
 8001826:	409a      	lsls	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001830:	e022      	b.n	8001878 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6919      	ldr	r1, [r3, #16]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	b29b      	uxth	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	2207      	movs	r2, #7
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43da      	mvns	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	400a      	ands	r2, r1
 8001854:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6919      	ldr	r1, [r3, #16]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	4603      	mov	r3, r0
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4403      	add	r3, r0
 800186e:	409a      	lsls	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b06      	cmp	r3, #6
 800187e:	d824      	bhi.n	80018ca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	3b05      	subs	r3, #5
 8001892:	221f      	movs	r2, #31
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43da      	mvns	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	400a      	ands	r2, r1
 80018a0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	3b05      	subs	r3, #5
 80018bc:	fa00 f203 	lsl.w	r2, r0, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34
 80018c8:	e04c      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d824      	bhi.n	800191c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	3b23      	subs	r3, #35	; 0x23
 80018e4:	221f      	movs	r2, #31
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	400a      	ands	r2, r1
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4618      	mov	r0, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	3b23      	subs	r3, #35	; 0x23
 800190e:	fa00 f203 	lsl.w	r2, r0, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
 800191a:	e023      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	3b41      	subs	r3, #65	; 0x41
 800192e:	221f      	movs	r2, #31
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43da      	mvns	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	400a      	ands	r2, r1
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	4618      	mov	r0, r3
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	3b41      	subs	r3, #65	; 0x41
 8001958:	fa00 f203 	lsl.w	r2, r0, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a30      	ldr	r2, [pc, #192]	; (8001a2c <HAL_ADC_ConfigChannel+0x29c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10a      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1f4>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001976:	d105      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4a2c      	ldr	r2, [pc, #176]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 800197e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001982:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a28      	ldr	r2, [pc, #160]	; (8001a2c <HAL_ADC_ConfigChannel+0x29c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10f      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x21e>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b12      	cmp	r3, #18
 8001994:	d10b      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a25      	ldr	r2, [pc, #148]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 800199c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019a0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4a22      	ldr	r2, [pc, #136]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80019a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <HAL_ADC_ConfigChannel+0x29c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d12b      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x280>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <HAL_ADC_ConfigChannel+0x298>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d003      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x23a>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b11      	cmp	r3, #17
 80019c8:	d122      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80019d0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019d4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80019dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <HAL_ADC_ConfigChannel+0x298>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d111      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_ADC_ConfigChannel+0x2a4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_ADC_ConfigChannel+0x2a8>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	0c9a      	lsrs	r2, r3, #18
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a02:	e002      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f9      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	10000012 	.word	0x10000012
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	40012300 	.word	0x40012300
 8001a34:	20000000 	.word	0x20000000
 8001a38:	431bde83 	.word	0x431bde83

08001a3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a44:	4b78      	ldr	r3, [pc, #480]	; (8001c28 <ADC_Init+0x1ec>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4a77      	ldr	r2, [pc, #476]	; (8001c28 <ADC_Init+0x1ec>)
 8001a4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a4e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a50:	4b75      	ldr	r3, [pc, #468]	; (8001c28 <ADC_Init+0x1ec>)
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4973      	ldr	r1, [pc, #460]	; (8001c28 <ADC_Init+0x1ec>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6859      	ldr	r1, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	021a      	lsls	r2, r3, #8
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6899      	ldr	r1, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <ADC_Init+0x1f0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d022      	beq.n	8001b16 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ade:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6899      	ldr	r1, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6899      	ldr	r1, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	e00f      	b.n	8001b36 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0202 	bic.w	r2, r2, #2
 8001b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6899      	ldr	r1, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	005a      	lsls	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01b      	beq.n	8001b9c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6859      	ldr	r1, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	035a      	lsls	r2, r3, #13
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	e007      	b.n	8001bac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001baa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	051a      	lsls	r2, r3, #20
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6899      	ldr	r1, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bee:	025a      	lsls	r2, r3, #9
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6899      	ldr	r1, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	029a      	lsls	r2, r3, #10
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	609a      	str	r2, [r3, #8]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40012300 	.word	0x40012300
 8001c2c:	0f000001 	.word	0x0f000001

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <__NVIC_SetPriorityGrouping+0x40>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <__NVIC_SetPriorityGrouping+0x40>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00
 8001c74:	05fa0000 	.word	0x05fa0000

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4907      	ldr	r1, [pc, #28]	; (8001ccc <__NVIC_EnableIRQ+0x38>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	; (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
         );
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d9c:	d301      	bcc.n	8001da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00f      	b.n	8001dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <SysTick_Config+0x40>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001daa:	210f      	movs	r1, #15
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f7ff ff8e 	bl	8001cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <SysTick_Config+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <SysTick_Config+0x40>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	e000e010 	.word	0xe000e010

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff29 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff3e 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff8e 	bl	8001d24 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5d 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff31 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffa2 	bl	8001d8c <SysTick_Config>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e06a      	b.n	8001f3c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d106      	bne.n	8001e7e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2223      	movs	r2, #35	; 0x23
 8001e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7fe fff9 	bl	8000e70 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_ETH_Init+0xf0>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	4a30      	ldr	r2, [pc, #192]	; (8001f44 <HAL_ETH_Init+0xf0>)
 8001e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e88:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <HAL_ETH_Init+0xf0>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <HAL_ETH_Init+0xf4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <HAL_ETH_Init+0xf4>)
 8001e9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ea0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ea2:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <HAL_ETH_Init+0xf4>)
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	4927      	ldr	r1, [pc, #156]	; (8001f48 <HAL_ETH_Init+0xf4>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <HAL_ETH_Init+0xf4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ecc:	f7ff fa86 	bl	80013dc <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ed2:	e011      	b.n	8001ef8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ed4:	f7ff fa82 	bl	80013dc <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ee2:	d909      	bls.n	8001ef8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	22e0      	movs	r2, #224	; 0xe0
 8001ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e021      	b.n	8001f3c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1e4      	bne.n	8001ed4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f958 	bl	80021c0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f9ff 	bl	8002314 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fa55 	bl	80023c6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	461a      	mov	r2, r3
 8001f22:	2100      	movs	r1, #0
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f9bd 	bl	80022a4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2210      	movs	r2, #16
 8001f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40013800 	.word	0x40013800

08001f4c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4b51      	ldr	r3, [pc, #324]	; (80020a8 <ETH_SetMACConfig+0x15c>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	7c1b      	ldrb	r3, [r3, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <ETH_SetMACConfig+0x28>
 8001f6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f72:	e000      	b.n	8001f76 <ETH_SetMACConfig+0x2a>
 8001f74:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	7c5b      	ldrb	r3, [r3, #17]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <ETH_SetMACConfig+0x38>
 8001f7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f82:	e000      	b.n	8001f86 <ETH_SetMACConfig+0x3a>
 8001f84:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f86:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	7fdb      	ldrb	r3, [r3, #31]
 8001f92:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f94:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	7f92      	ldrb	r2, [r2, #30]
 8001fa0:	2a00      	cmp	r2, #0
 8001fa2:	d102      	bne.n	8001faa <ETH_SetMACConfig+0x5e>
 8001fa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fa8:	e000      	b.n	8001fac <ETH_SetMACConfig+0x60>
 8001faa:	2200      	movs	r2, #0
                        macconf->Speed |
 8001fac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	7f1b      	ldrb	r3, [r3, #28]
 8001fb2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fb4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	791b      	ldrb	r3, [r3, #4]
 8001fc0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001fc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001fca:	2a00      	cmp	r2, #0
 8001fcc:	d102      	bne.n	8001fd4 <ETH_SetMACConfig+0x88>
 8001fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd2:	e000      	b.n	8001fd6 <ETH_SetMACConfig+0x8a>
 8001fd4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fd6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	7bdb      	ldrb	r3, [r3, #15]
 8001fdc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fde:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fe4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002006:	2001      	movs	r0, #1
 8002008:	f7ff f9f4 	bl	80013f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002022:	4013      	ands	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002032:	2a00      	cmp	r2, #0
 8002034:	d101      	bne.n	800203a <ETH_SetMACConfig+0xee>
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	e000      	b.n	800203c <ETH_SetMACConfig+0xf0>
 800203a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800203c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002042:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800204a:	2a01      	cmp	r2, #1
 800204c:	d101      	bne.n	8002052 <ETH_SetMACConfig+0x106>
 800204e:	2208      	movs	r2, #8
 8002050:	e000      	b.n	8002054 <ETH_SetMACConfig+0x108>
 8002052:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002054:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800205c:	2a01      	cmp	r2, #1
 800205e:	d101      	bne.n	8002064 <ETH_SetMACConfig+0x118>
 8002060:	2204      	movs	r2, #4
 8002062:	e000      	b.n	8002066 <ETH_SetMACConfig+0x11a>
 8002064:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002066:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800206e:	2a01      	cmp	r2, #1
 8002070:	d101      	bne.n	8002076 <ETH_SetMACConfig+0x12a>
 8002072:	2202      	movs	r2, #2
 8002074:	e000      	b.n	8002078 <ETH_SetMACConfig+0x12c>
 8002076:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002078:	4313      	orrs	r3, r2
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002090:	2001      	movs	r0, #1
 8002092:	f7ff f9af 	bl	80013f4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	619a      	str	r2, [r3, #24]
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	ff20810f 	.word	0xff20810f

080020ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <ETH_SetDMAConfig+0x110>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	7b1b      	ldrb	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <ETH_SetDMAConfig+0x2c>
 80020d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020d6:	e000      	b.n	80020da <ETH_SetDMAConfig+0x2e>
 80020d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	7b5b      	ldrb	r3, [r3, #13]
 80020de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	7f52      	ldrb	r2, [r2, #29]
 80020e6:	2a00      	cmp	r2, #0
 80020e8:	d102      	bne.n	80020f0 <ETH_SetDMAConfig+0x44>
 80020ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020ee:	e000      	b.n	80020f2 <ETH_SetDMAConfig+0x46>
 80020f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	7b9b      	ldrb	r3, [r3, #14]
 80020f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002100:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	7f1b      	ldrb	r3, [r3, #28]
 8002106:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002108:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	7f9b      	ldrb	r3, [r3, #30]
 800210e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002110:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002116:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800211e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002120:	4313      	orrs	r3, r2
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002130:	461a      	mov	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002142:	2001      	movs	r0, #1
 8002144:	f7ff f956 	bl	80013f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002150:	461a      	mov	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	791b      	ldrb	r3, [r3, #4]
 800215a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002160:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002166:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800216c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002174:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002176:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800217e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002184:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800218e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002192:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a0:	2001      	movs	r0, #1
 80021a2:	f7ff f927 	bl	80013f4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	f8de3f23 	.word	0xf8de3f23

080021c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0a6      	sub	sp, #152	; 0x98
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80021d4:	2300      	movs	r3, #0
 80021d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80021de:	2301      	movs	r3, #1
 80021e0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021fc:	2300      	movs	r3, #0
 80021fe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002206:	2300      	movs	r3, #0
 8002208:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002222:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002226:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002228:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800222c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002234:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002238:	4619      	mov	r1, r3
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fe86 	bl	8001f4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002240:	2301      	movs	r3, #1
 8002242:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002244:	2301      	movs	r3, #1
 8002246:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002248:	2301      	movs	r3, #1
 800224a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800224e:	2301      	movs	r3, #1
 8002250:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002262:	2300      	movs	r3, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002266:	2301      	movs	r3, #1
 8002268:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800226c:	2301      	movs	r3, #1
 800226e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002274:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002276:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800227a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800227c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002280:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002288:	2300      	movs	r3, #0
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	4619      	mov	r1, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff08 	bl	80020ac <ETH_SetDMAConfig>
}
 800229c:	bf00      	nop
 800229e:	3798      	adds	r7, #152	; 0x98
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3305      	adds	r3, #5
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	3204      	adds	r2, #4
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <ETH_MACAddressConfig+0x68>)
 80022c6:	4413      	add	r3, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3303      	adds	r3, #3
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	061a      	lsls	r2, r3, #24
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3302      	adds	r3, #2
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3301      	adds	r3, #1
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	4313      	orrs	r3, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	7812      	ldrb	r2, [r2, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <ETH_MACAddressConfig+0x6c>)
 80022f6:	4413      	add	r3, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	6013      	str	r3, [r2, #0]
}
 80022fe:	bf00      	nop
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40028040 	.word	0x40028040
 8002310:	40028044 	.word	0x40028044

08002314 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e03e      	b.n	80023a0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68d9      	ldr	r1, [r3, #12]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2200      	movs	r2, #0
 800233e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	3206      	adds	r2, #6
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d80c      	bhi.n	8002384 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68d9      	ldr	r1, [r3, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	461a      	mov	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	e004      	b.n	800238e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	461a      	mov	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3301      	adds	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d9bd      	bls.n	8002322 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b8:	611a      	str	r2, [r3, #16]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	e046      	b.n	8002462 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6919      	ldr	r1, [r3, #16]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2200      	movs	r2, #0
 80023f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2200      	movs	r2, #0
 8002408:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002410:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002418:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	3212      	adds	r2, #18
 800242e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d80c      	bhi.n	8002452 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6919      	ldr	r1, [r3, #16]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	461a      	mov	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	e004      	b.n	800245c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	461a      	mov	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3301      	adds	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d9b5      	bls.n	80023d4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002492:	60da      	str	r2, [r3, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	e175      	b.n	80027ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	429a      	cmp	r2, r3
 80024da:	f040 8164 	bne.w	80027a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d005      	beq.n	80024f6 <HAL_GPIO_Init+0x56>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d130      	bne.n	8002558 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 0201 	and.w	r2, r3, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b03      	cmp	r3, #3
 8002562:	d017      	beq.n	8002594 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d123      	bne.n	80025e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	08da      	lsrs	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	69b9      	ldr	r1, [r7, #24]
 80025e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80be 	beq.w	80027a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <HAL_GPIO_Init+0x324>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <HAL_GPIO_Init+0x324>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_GPIO_Init+0x324>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002642:	4a61      	ldr	r2, [pc, #388]	; (80027c8 <HAL_GPIO_Init+0x328>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_GPIO_Init+0x32c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d037      	beq.n	80026de <HAL_GPIO_Init+0x23e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a57      	ldr	r2, [pc, #348]	; (80027d0 <HAL_GPIO_Init+0x330>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d031      	beq.n	80026da <HAL_GPIO_Init+0x23a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a56      	ldr	r2, [pc, #344]	; (80027d4 <HAL_GPIO_Init+0x334>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d02b      	beq.n	80026d6 <HAL_GPIO_Init+0x236>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a55      	ldr	r2, [pc, #340]	; (80027d8 <HAL_GPIO_Init+0x338>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d025      	beq.n	80026d2 <HAL_GPIO_Init+0x232>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a54      	ldr	r2, [pc, #336]	; (80027dc <HAL_GPIO_Init+0x33c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01f      	beq.n	80026ce <HAL_GPIO_Init+0x22e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a53      	ldr	r2, [pc, #332]	; (80027e0 <HAL_GPIO_Init+0x340>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d019      	beq.n	80026ca <HAL_GPIO_Init+0x22a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a52      	ldr	r2, [pc, #328]	; (80027e4 <HAL_GPIO_Init+0x344>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0x226>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a51      	ldr	r2, [pc, #324]	; (80027e8 <HAL_GPIO_Init+0x348>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00d      	beq.n	80026c2 <HAL_GPIO_Init+0x222>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a50      	ldr	r2, [pc, #320]	; (80027ec <HAL_GPIO_Init+0x34c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x21e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4f      	ldr	r2, [pc, #316]	; (80027f0 <HAL_GPIO_Init+0x350>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_GPIO_Init+0x21a>
 80026b6:	2309      	movs	r3, #9
 80026b8:	e012      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026ba:	230a      	movs	r3, #10
 80026bc:	e010      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026be:	2308      	movs	r3, #8
 80026c0:	e00e      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026c2:	2307      	movs	r3, #7
 80026c4:	e00c      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026c6:	2306      	movs	r3, #6
 80026c8:	e00a      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026ca:	2305      	movs	r3, #5
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026ce:	2304      	movs	r3, #4
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026de:	2300      	movs	r3, #0
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f002 0203 	and.w	r2, r2, #3
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026f0:	4935      	ldr	r1, [pc, #212]	; (80027c8 <HAL_GPIO_Init+0x328>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fe:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <HAL_GPIO_Init+0x354>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002722:	4a34      	ldr	r2, [pc, #208]	; (80027f4 <HAL_GPIO_Init+0x354>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002728:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_GPIO_Init+0x354>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800274c:	4a29      	ldr	r2, [pc, #164]	; (80027f4 <HAL_GPIO_Init+0x354>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002752:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <HAL_GPIO_Init+0x354>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002776:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <HAL_GPIO_Init+0x354>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_GPIO_Init+0x354>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <HAL_GPIO_Init+0x354>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	f67f ae86 	bls.w	80024c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40021400 	.word	0x40021400
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40021c00 	.word	0x40021c00
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40022400 	.word	0x40022400
 80027f4:	40013c00 	.word	0x40013c00

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002814:	e003      	b.n	800281e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800282a:	b480      	push	{r7}
 800282c:	b085      	sub	sp, #20
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800283c:	887a      	ldrh	r2, [r7, #2]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4013      	ands	r3, r2
 8002842:	041a      	lsls	r2, r3, #16
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43d9      	mvns	r1, r3
 8002848:	887b      	ldrh	r3, [r7, #2]
 800284a:	400b      	ands	r3, r1
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	619a      	str	r2, [r3, #24]
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d006      	beq.n	8002884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002876:	4a05      	ldr	r2, [pc, #20]	; (800288c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe f924 	bl	8000acc <HAL_GPIO_EXTI_Callback>
  }
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40013c00 	.word	0x40013c00

08002890 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002892:	b08f      	sub	sp, #60	; 0x3c
 8002894:	af0a      	add	r7, sp, #40	; 0x28
 8002896:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e116      	b.n	8002ad0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7fe fc15 	bl	80010ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2203      	movs	r2, #3
 80028c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 fbe5 	bl	80050b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	687e      	ldr	r6, [r7, #4]
 80028ee:	466d      	mov	r5, sp
 80028f0:	f106 0410 	add.w	r4, r6, #16
 80028f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002900:	e885 0003 	stmia.w	r5, {r0, r1}
 8002904:	1d33      	adds	r3, r6, #4
 8002906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002908:	6838      	ldr	r0, [r7, #0]
 800290a:	f002 fb79 	bl	8005000 <USB_CoreInit>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0d7      	b.n	8002ad0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f002 fbd3 	bl	80050d2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	e04a      	b.n	80029c8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	333d      	adds	r3, #61	; 0x3d
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	333c      	adds	r3, #60	; 0x3c
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	b298      	uxth	r0, r3
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3344      	adds	r3, #68	; 0x44
 800296e:	4602      	mov	r2, r0
 8002970:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3340      	adds	r3, #64	; 0x40
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	3348      	adds	r3, #72	; 0x48
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	334c      	adds	r3, #76	; 0x4c
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	3354      	adds	r3, #84	; 0x54
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	3301      	adds	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d3af      	bcc.n	8002932 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]
 80029d6:	e044      	b.n	8002a62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d3b5      	bcc.n	80029d8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	687e      	ldr	r6, [r7, #4]
 8002a74:	466d      	mov	r5, sp
 8002a76:	f106 0410 	add.w	r4, r6, #16
 8002a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a86:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a8a:	1d33      	adds	r3, r6, #4
 8002a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8e:	6838      	ldr	r0, [r7, #0]
 8002a90:	f002 fb6c 	bl	800516c <USB_DevInit>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e014      	b.n	8002ad0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d102      	bne.n	8002ac4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f80a 	bl	8002ad8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f002 fd2a 	bl	8005522 <USB_DevDisconnect>

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ad8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_PCDEx_ActivateLPM+0x44>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	10000003 	.word	0x10000003

08002b20 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40007000 	.word	0x40007000

08002b40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	4a22      	ldr	r2, [pc, #136]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b54:	6413      	str	r3, [r2, #64]	; 0x40
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1d      	ldr	r2, [pc, #116]	; (8002bdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b6e:	f7fe fc35 	bl	80013dc <HAL_GetTick>
 8002b72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b74:	e009      	b.n	8002b8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b76:	f7fe fc31 	bl	80013dc <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b84:	d901      	bls.n	8002b8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e022      	b.n	8002bd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b8a:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b96:	d1ee      	bne.n	8002b76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b98:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0f      	ldr	r2, [pc, #60]	; (8002bdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ba4:	f7fe fc1a 	bl	80013dc <HAL_GetTick>
 8002ba8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002baa:	e009      	b.n	8002bc0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bac:	f7fe fc16 	bl	80013dc <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bba:	d901      	bls.n	8002bc0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e007      	b.n	8002bd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bcc:	d1ee      	bne.n	8002bac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40007000 	.word	0x40007000

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002be8:	2300      	movs	r3, #0
 8002bea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e29b      	b.n	800312e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8087 	beq.w	8002d12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c04:	4b96      	ldr	r3, [pc, #600]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d00c      	beq.n	8002c2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c10:	4b93      	ldr	r3, [pc, #588]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d112      	bne.n	8002c42 <HAL_RCC_OscConfig+0x62>
 8002c1c:	4b90      	ldr	r3, [pc, #576]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c28:	d10b      	bne.n	8002c42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2a:	4b8d      	ldr	r3, [pc, #564]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d06c      	beq.n	8002d10 <HAL_RCC_OscConfig+0x130>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d168      	bne.n	8002d10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e275      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x7a>
 8002c4c:	4b84      	ldr	r3, [pc, #528]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a83      	ldr	r2, [pc, #524]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	e02e      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x9c>
 8002c62:	4b7f      	ldr	r3, [pc, #508]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7e      	ldr	r2, [pc, #504]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b7c      	ldr	r3, [pc, #496]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a7b      	ldr	r2, [pc, #492]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e01d      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0xc0>
 8002c86:	4b76      	ldr	r3, [pc, #472]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a75      	ldr	r2, [pc, #468]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b73      	ldr	r3, [pc, #460]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a72      	ldr	r2, [pc, #456]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd8>
 8002ca0:	4b6f      	ldr	r3, [pc, #444]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6e      	ldr	r2, [pc, #440]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b6c      	ldr	r3, [pc, #432]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a6b      	ldr	r2, [pc, #428]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fb8c 	bl	80013dc <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fb88 	bl	80013dc <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e229      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b61      	ldr	r3, [pc, #388]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xe8>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fb78 	bl	80013dc <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7fe fb74 	bl	80013dc <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e215      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	4b57      	ldr	r3, [pc, #348]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x110>
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d069      	beq.n	8002df2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1e:	4b50      	ldr	r3, [pc, #320]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2a:	4b4d      	ldr	r3, [pc, #308]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d11c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x190>
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d116      	bne.n	8002d70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_RCC_OscConfig+0x17a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e1e9      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5a:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	493d      	ldr	r1, [pc, #244]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6e:	e040      	b.n	8002df2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d023      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d78:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a38      	ldr	r2, [pc, #224]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fb2a 	bl	80013dc <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8c:	f7fe fb26 	bl	80013dc <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1c7      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9e:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002daa:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4929      	ldr	r1, [pc, #164]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
 8002dbe:	e018      	b.n	8002df2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc0:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a26      	ldr	r2, [pc, #152]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fb06 	bl	80013dc <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fb02 	bl	80013dc <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1a3      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d038      	beq.n	8002e70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d019      	beq.n	8002e3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0a:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e12:	f7fe fae3 	bl	80013dc <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1a:	f7fe fadf 	bl	80013dc <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e180      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x23a>
 8002e38:	e01a      	b.n	8002e70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3e:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7fe fac9 	bl	80013dc <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4e:	f7fe fac5 	bl	80013dc <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d903      	bls.n	8002e64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e166      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
 8002e60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	4b92      	ldr	r3, [pc, #584]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1ee      	bne.n	8002e4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a4 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7e:	4b8c      	ldr	r3, [pc, #560]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8a:	4b89      	ldr	r3, [pc, #548]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	4a88      	ldr	r2, [pc, #544]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e94:	6413      	str	r3, [r2, #64]	; 0x40
 8002e96:	4b86      	ldr	r3, [pc, #536]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea6:	4b83      	ldr	r3, [pc, #524]	; (80030b4 <HAL_RCC_OscConfig+0x4d4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d118      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002eb2:	4b80      	ldr	r3, [pc, #512]	; (80030b4 <HAL_RCC_OscConfig+0x4d4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a7f      	ldr	r2, [pc, #508]	; (80030b4 <HAL_RCC_OscConfig+0x4d4>)
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fa8d 	bl	80013dc <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec6:	f7fe fa89 	bl	80013dc <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b64      	cmp	r3, #100	; 0x64
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e12a      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed8:	4b76      	ldr	r3, [pc, #472]	; (80030b4 <HAL_RCC_OscConfig+0x4d4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x31a>
 8002eec:	4b70      	ldr	r3, [pc, #448]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a6f      	ldr	r2, [pc, #444]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	e02d      	b.n	8002f56 <HAL_RCC_OscConfig+0x376>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x33c>
 8002f02:	4b6b      	ldr	r3, [pc, #428]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	4a6a      	ldr	r2, [pc, #424]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0e:	4b68      	ldr	r3, [pc, #416]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	4a67      	ldr	r2, [pc, #412]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1a:	e01c      	b.n	8002f56 <HAL_RCC_OscConfig+0x376>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d10c      	bne.n	8002f3e <HAL_RCC_OscConfig+0x35e>
 8002f24:	4b62      	ldr	r3, [pc, #392]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	4a61      	ldr	r2, [pc, #388]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f30:	4b5f      	ldr	r3, [pc, #380]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a5e      	ldr	r2, [pc, #376]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3c:	e00b      	b.n	8002f56 <HAL_RCC_OscConfig+0x376>
 8002f3e:	4b5c      	ldr	r3, [pc, #368]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	4a5b      	ldr	r2, [pc, #364]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4a:	4b59      	ldr	r3, [pc, #356]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	4a58      	ldr	r2, [pc, #352]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	f023 0304 	bic.w	r3, r3, #4
 8002f54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d015      	beq.n	8002f8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fa3d 	bl	80013dc <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe fa39 	bl	80013dc <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e0d8      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7c:	4b4c      	ldr	r3, [pc, #304]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ee      	beq.n	8002f66 <HAL_RCC_OscConfig+0x386>
 8002f88:	e014      	b.n	8002fb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fa27 	bl	80013dc <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe fa23 	bl	80013dc <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e0c2      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa8:	4b41      	ldr	r3, [pc, #260]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ee      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d105      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fba:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a3c      	ldr	r2, [pc, #240]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80ae 	beq.w	800312c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd0:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d06d      	beq.n	80030b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d14b      	bne.n	800307c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe4:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a31      	ldr	r2, [pc, #196]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8002fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe f9f4 	bl	80013dc <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fe f9f0 	bl	80013dc <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e091      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69da      	ldr	r2, [r3, #28]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	019b      	lsls	r3, r3, #6
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	3b01      	subs	r3, #1
 8003030:	041b      	lsls	r3, r3, #16
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	061b      	lsls	r3, r3, #24
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	071b      	lsls	r3, r3, #28
 8003042:	491b      	ldr	r1, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a18      	ldr	r2, [pc, #96]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 800304e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe f9c2 	bl	80013dc <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe f9be 	bl	80013dc <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e05f      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x47c>
 800307a:	e057      	b.n	800312c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0b      	ldr	r2, [pc, #44]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 8003082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe f9a8 	bl	80013dc <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe f9a4 	bl	80013dc <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e045      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <HAL_RCC_OscConfig+0x4d0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x4b0>
 80030ae:	e03d      	b.n	800312c <HAL_RCC_OscConfig+0x54c>
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030b8:	4b1f      	ldr	r3, [pc, #124]	; (8003138 <HAL_RCC_OscConfig+0x558>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d030      	beq.n	8003128 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d129      	bne.n	8003128 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d122      	bne.n	8003128 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030e8:	4013      	ands	r3, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d119      	bne.n	8003128 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	3b01      	subs	r3, #1
 8003102:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d10f      	bne.n	8003128 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d107      	bne.n	8003128 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800

0800313c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0d0      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003154:	4b6a      	ldr	r3, [pc, #424]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d910      	bls.n	8003184 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b67      	ldr	r3, [pc, #412]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 020f 	bic.w	r2, r3, #15
 800316a:	4965      	ldr	r1, [pc, #404]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b63      	ldr	r3, [pc, #396]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0b8      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800319c:	4b59      	ldr	r3, [pc, #356]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4a58      	ldr	r2, [pc, #352]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80031a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b4:	4b53      	ldr	r3, [pc, #332]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4a52      	ldr	r2, [pc, #328]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80031ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c0:	4b50      	ldr	r3, [pc, #320]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	494d      	ldr	r1, [pc, #308]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d040      	beq.n	8003260 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d107      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d115      	bne.n	800321e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e07f      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fe:	4b41      	ldr	r3, [pc, #260]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e073      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e06b      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321e:	4b39      	ldr	r3, [pc, #228]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f023 0203 	bic.w	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4936      	ldr	r1, [pc, #216]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	4313      	orrs	r3, r2
 800322e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003230:	f7fe f8d4 	bl	80013dc <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003236:	e00a      	b.n	800324e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003238:	f7fe f8d0 	bl	80013dc <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e053      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 020c 	and.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	429a      	cmp	r2, r3
 800325e:	d1eb      	bne.n	8003238 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003260:	4b27      	ldr	r3, [pc, #156]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d210      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 020f 	bic.w	r2, r3, #15
 8003276:	4922      	ldr	r1, [pc, #136]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e032      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800329c:	4b19      	ldr	r3, [pc, #100]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4916      	ldr	r1, [pc, #88]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	490e      	ldr	r1, [pc, #56]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032ce:	f000 f821 	bl	8003314 <HAL_RCC_GetSysClockFreq>
 80032d2:	4602      	mov	r2, r0
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	490a      	ldr	r1, [pc, #40]	; (8003308 <HAL_RCC_ClockConfig+0x1cc>)
 80032e0:	5ccb      	ldrb	r3, [r1, r3]
 80032e2:	fa22 f303 	lsr.w	r3, r2, r3
 80032e6:	4a09      	ldr	r2, [pc, #36]	; (800330c <HAL_RCC_ClockConfig+0x1d0>)
 80032e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCC_ClockConfig+0x1d4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe f830 	bl	8001354 <HAL_InitTick>

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023c00 	.word	0x40023c00
 8003304:	40023800 	.word	0x40023800
 8003308:	080066d8 	.word	0x080066d8
 800330c:	20000000 	.word	0x20000000
 8003310:	20000004 	.word	0x20000004

08003314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003318:	b094      	sub	sp, #80	; 0x50
 800331a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	647b      	str	r3, [r7, #68]	; 0x44
 8003320:	2300      	movs	r3, #0
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003324:	2300      	movs	r3, #0
 8003326:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800332c:	4b79      	ldr	r3, [pc, #484]	; (8003514 <HAL_RCC_GetSysClockFreq+0x200>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b08      	cmp	r3, #8
 8003336:	d00d      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0x40>
 8003338:	2b08      	cmp	r3, #8
 800333a:	f200 80e1 	bhi.w	8003500 <HAL_RCC_GetSysClockFreq+0x1ec>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0x34>
 8003342:	2b04      	cmp	r3, #4
 8003344:	d003      	beq.n	800334e <HAL_RCC_GetSysClockFreq+0x3a>
 8003346:	e0db      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003348:	4b73      	ldr	r3, [pc, #460]	; (8003518 <HAL_RCC_GetSysClockFreq+0x204>)
 800334a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800334c:	e0db      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800334e:	4b73      	ldr	r3, [pc, #460]	; (800351c <HAL_RCC_GetSysClockFreq+0x208>)
 8003350:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003352:	e0d8      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003354:	4b6f      	ldr	r3, [pc, #444]	; (8003514 <HAL_RCC_GetSysClockFreq+0x200>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800335c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800335e:	4b6d      	ldr	r3, [pc, #436]	; (8003514 <HAL_RCC_GetSysClockFreq+0x200>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d063      	beq.n	8003432 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336a:	4b6a      	ldr	r3, [pc, #424]	; (8003514 <HAL_RCC_GetSysClockFreq+0x200>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	099b      	lsrs	r3, r3, #6
 8003370:	2200      	movs	r2, #0
 8003372:	63bb      	str	r3, [r7, #56]	; 0x38
 8003374:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337c:	633b      	str	r3, [r7, #48]	; 0x30
 800337e:	2300      	movs	r3, #0
 8003380:	637b      	str	r3, [r7, #52]	; 0x34
 8003382:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003386:	4622      	mov	r2, r4
 8003388:	462b      	mov	r3, r5
 800338a:	f04f 0000 	mov.w	r0, #0
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	0159      	lsls	r1, r3, #5
 8003394:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003398:	0150      	lsls	r0, r2, #5
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4621      	mov	r1, r4
 80033a0:	1a51      	subs	r1, r2, r1
 80033a2:	6139      	str	r1, [r7, #16]
 80033a4:	4629      	mov	r1, r5
 80033a6:	eb63 0301 	sbc.w	r3, r3, r1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033b8:	4659      	mov	r1, fp
 80033ba:	018b      	lsls	r3, r1, #6
 80033bc:	4651      	mov	r1, sl
 80033be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033c2:	4651      	mov	r1, sl
 80033c4:	018a      	lsls	r2, r1, #6
 80033c6:	4651      	mov	r1, sl
 80033c8:	ebb2 0801 	subs.w	r8, r2, r1
 80033cc:	4659      	mov	r1, fp
 80033ce:	eb63 0901 	sbc.w	r9, r3, r1
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033e6:	4690      	mov	r8, r2
 80033e8:	4699      	mov	r9, r3
 80033ea:	4623      	mov	r3, r4
 80033ec:	eb18 0303 	adds.w	r3, r8, r3
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	462b      	mov	r3, r5
 80033f4:	eb49 0303 	adc.w	r3, r9, r3
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003406:	4629      	mov	r1, r5
 8003408:	024b      	lsls	r3, r1, #9
 800340a:	4621      	mov	r1, r4
 800340c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003410:	4621      	mov	r1, r4
 8003412:	024a      	lsls	r2, r1, #9
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341a:	2200      	movs	r2, #0
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
 800341e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003420:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003424:	f7fc ff5c 	bl	80002e0 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4613      	mov	r3, r2
 800342e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003430:	e058      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003432:	4b38      	ldr	r3, [pc, #224]	; (8003514 <HAL_RCC_GetSysClockFreq+0x200>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	099b      	lsrs	r3, r3, #6
 8003438:	2200      	movs	r2, #0
 800343a:	4618      	mov	r0, r3
 800343c:	4611      	mov	r1, r2
 800343e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003442:	623b      	str	r3, [r7, #32]
 8003444:	2300      	movs	r3, #0
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
 8003448:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800344c:	4642      	mov	r2, r8
 800344e:	464b      	mov	r3, r9
 8003450:	f04f 0000 	mov.w	r0, #0
 8003454:	f04f 0100 	mov.w	r1, #0
 8003458:	0159      	lsls	r1, r3, #5
 800345a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800345e:	0150      	lsls	r0, r2, #5
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4641      	mov	r1, r8
 8003466:	ebb2 0a01 	subs.w	sl, r2, r1
 800346a:	4649      	mov	r1, r9
 800346c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800347c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003480:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003484:	ebb2 040a 	subs.w	r4, r2, sl
 8003488:	eb63 050b 	sbc.w	r5, r3, fp
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	00eb      	lsls	r3, r5, #3
 8003496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800349a:	00e2      	lsls	r2, r4, #3
 800349c:	4614      	mov	r4, r2
 800349e:	461d      	mov	r5, r3
 80034a0:	4643      	mov	r3, r8
 80034a2:	18e3      	adds	r3, r4, r3
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	464b      	mov	r3, r9
 80034a8:	eb45 0303 	adc.w	r3, r5, r3
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ba:	4629      	mov	r1, r5
 80034bc:	028b      	lsls	r3, r1, #10
 80034be:	4621      	mov	r1, r4
 80034c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c4:	4621      	mov	r1, r4
 80034c6:	028a      	lsls	r2, r1, #10
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ce:	2200      	movs	r2, #0
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	61fa      	str	r2, [r7, #28]
 80034d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034d8:	f7fc ff02 	bl	80002e0 <__aeabi_uldivmod>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4613      	mov	r3, r2
 80034e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	3301      	adds	r3, #1
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80034f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034fe:	e002      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCC_GetSysClockFreq+0x204>)
 8003502:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003508:	4618      	mov	r0, r3
 800350a:	3750      	adds	r7, #80	; 0x50
 800350c:	46bd      	mov	sp, r7
 800350e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	00f42400 	.word	0x00f42400
 800351c:	007a1200 	.word	0x007a1200

08003520 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <HAL_RCC_GetHCLKFreq+0x14>)
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000000 	.word	0x20000000

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800353c:	f7ff fff0 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	0a9b      	lsrs	r3, r3, #10
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4903      	ldr	r1, [pc, #12]	; (800355c <HAL_RCC_GetPCLK1Freq+0x24>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40023800 	.word	0x40023800
 800355c:	080066e8 	.word	0x080066e8

08003560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003564:	f7ff ffdc 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0b5b      	lsrs	r3, r3, #13
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	; (8003584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	080066e8 	.word	0x080066e8

08003588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d012      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035b0:	4b69      	ldr	r3, [pc, #420]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4a68      	ldr	r2, [pc, #416]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035ba:	6093      	str	r3, [r2, #8]
 80035bc:	4b66      	ldr	r3, [pc, #408]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c4:	4964      	ldr	r1, [pc, #400]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d017      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035e2:	4b5d      	ldr	r3, [pc, #372]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	4959      	ldr	r1, [pc, #356]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003600:	d101      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003602:	2301      	movs	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800360e:	2301      	movs	r3, #1
 8003610:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d017      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800361e:	4b4e      	ldr	r3, [pc, #312]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003624:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	494a      	ldr	r1, [pc, #296]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363c:	d101      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800363e:	2301      	movs	r3, #1
 8003640:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800364a:	2301      	movs	r3, #1
 800364c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800365a:	2301      	movs	r3, #1
 800365c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 808b 	beq.w	8003782 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800366c:	4b3a      	ldr	r3, [pc, #232]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	4a39      	ldr	r2, [pc, #228]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003676:	6413      	str	r3, [r2, #64]	; 0x40
 8003678:	4b37      	ldr	r3, [pc, #220]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003684:	4b35      	ldr	r3, [pc, #212]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a34      	ldr	r2, [pc, #208]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800368a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003690:	f7fd fea4 	bl	80013dc <HAL_GetTick>
 8003694:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003698:	f7fd fea0 	bl	80013dc <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e38f      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036aa:	4b2c      	ldr	r3, [pc, #176]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036b6:	4b28      	ldr	r3, [pc, #160]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d035      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d02e      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d4:	4b20      	ldr	r3, [pc, #128]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036de:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036ea:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a1a      	ldr	r2, [pc, #104]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036f6:	4a18      	ldr	r2, [pc, #96]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036fc:	4b16      	ldr	r3, [pc, #88]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d114      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fd fe68 	bl	80013dc <HAL_GetTick>
 800370c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370e:	e00a      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003710:	f7fd fe64 	bl	80013dc <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	; 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e351      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003726:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0ee      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800373e:	d111      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800374e:	400b      	ands	r3, r1
 8003750:	4901      	ldr	r1, [pc, #4]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
 8003756:	e00b      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003758:	40023800 	.word	0x40023800
 800375c:	40007000 	.word	0x40007000
 8003760:	0ffffcff 	.word	0x0ffffcff
 8003764:	4bac      	ldr	r3, [pc, #688]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4aab      	ldr	r2, [pc, #684]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800376a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800376e:	6093      	str	r3, [r2, #8]
 8003770:	4ba9      	ldr	r3, [pc, #676]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003772:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377c:	49a6      	ldr	r1, [pc, #664]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377e:	4313      	orrs	r3, r2
 8003780:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b00      	cmp	r3, #0
 800378c:	d010      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800378e:	4ba2      	ldr	r3, [pc, #648]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003794:	4aa0      	ldr	r2, [pc, #640]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800379a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800379e:	4b9e      	ldr	r3, [pc, #632]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	499b      	ldr	r1, [pc, #620]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037bc:	4b96      	ldr	r3, [pc, #600]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ca:	4993      	ldr	r1, [pc, #588]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037de:	4b8e      	ldr	r3, [pc, #568]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ec:	498a      	ldr	r1, [pc, #552]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003800:	4b85      	ldr	r3, [pc, #532]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380e:	4982      	ldr	r1, [pc, #520]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003822:	4b7d      	ldr	r3, [pc, #500]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	4979      	ldr	r1, [pc, #484]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003844:	4b74      	ldr	r3, [pc, #464]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	4971      	ldr	r1, [pc, #452]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003866:	4b6c      	ldr	r3, [pc, #432]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	f023 020c 	bic.w	r2, r3, #12
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003874:	4968      	ldr	r1, [pc, #416]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003888:	4b63      	ldr	r3, [pc, #396]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	4960      	ldr	r1, [pc, #384]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038aa:	4b5b      	ldr	r3, [pc, #364]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b8:	4957      	ldr	r1, [pc, #348]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038cc:	4b52      	ldr	r3, [pc, #328]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	494f      	ldr	r1, [pc, #316]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038ee:	4b4a      	ldr	r3, [pc, #296]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	4946      	ldr	r1, [pc, #280]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003910:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391e:	493e      	ldr	r1, [pc, #248]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003932:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003940:	4935      	ldr	r1, [pc, #212]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003954:	4b30      	ldr	r3, [pc, #192]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003962:	492d      	ldr	r1, [pc, #180]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d011      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003976:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003984:	4924      	ldr	r1, [pc, #144]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003994:	d101      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003996:	2301      	movs	r3, #1
 8003998:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039a6:	2301      	movs	r3, #1
 80039a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039b6:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c4:	4914      	ldr	r1, [pc, #80]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00b      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039d8:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e8:	490b      	ldr	r1, [pc, #44]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00f      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0c:	4902      	ldr	r1, [pc, #8]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a14:	e002      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00b      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a28:	4b8a      	ldr	r3, [pc, #552]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	4986      	ldr	r1, [pc, #536]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00b      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a4c:	4b81      	ldr	r3, [pc, #516]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a5c:	497d      	ldr	r1, [pc, #500]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d006      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80d6 	beq.w	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a78:	4b76      	ldr	r3, [pc, #472]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a75      	ldr	r2, [pc, #468]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a84:	f7fd fcaa 	bl	80013dc <HAL_GetTick>
 8003a88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a8c:	f7fd fca6 	bl	80013dc <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e195      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a9e:	4b6d      	ldr	r3, [pc, #436]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d021      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d11d      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003abe:	4b65      	ldr	r3, [pc, #404]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003acc:	4b61      	ldr	r3, [pc, #388]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad2:	0e1b      	lsrs	r3, r3, #24
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	019a      	lsls	r2, r3, #6
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	071b      	lsls	r3, r3, #28
 8003af2:	4958      	ldr	r1, [pc, #352]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d02e      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b24:	d129      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b26:	4b4b      	ldr	r3, [pc, #300]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b34:	4b47      	ldr	r3, [pc, #284]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3a:	0f1b      	lsrs	r3, r3, #28
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	019a      	lsls	r2, r3, #6
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	061b      	lsls	r3, r3, #24
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	071b      	lsls	r3, r3, #28
 8003b5a:	493e      	ldr	r1, [pc, #248]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b62:	4b3c      	ldr	r3, [pc, #240]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b68:	f023 021f 	bic.w	r2, r3, #31
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	3b01      	subs	r3, #1
 8003b72:	4938      	ldr	r1, [pc, #224]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01d      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b86:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8c:	0e1b      	lsrs	r3, r3, #24
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b94:	4b2f      	ldr	r3, [pc, #188]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9a:	0f1b      	lsrs	r3, r3, #28
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	019a      	lsls	r2, r3, #6
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	041b      	lsls	r3, r3, #16
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	061b      	lsls	r3, r3, #24
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	071b      	lsls	r3, r3, #28
 8003bba:	4926      	ldr	r1, [pc, #152]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d011      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	019a      	lsls	r2, r3, #6
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	071b      	lsls	r3, r3, #28
 8003bea:	491a      	ldr	r1, [pc, #104]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bf2:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfe:	f7fd fbed 	bl	80013dc <HAL_GetTick>
 8003c02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c06:	f7fd fbe9 	bl	80013dc <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b64      	cmp	r3, #100	; 0x64
 8003c12:	d901      	bls.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e0d8      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c18:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	f040 80ce 	bne.w	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c38:	f7fd fbd0 	bl	80013dc <HAL_GetTick>
 8003c3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c40:	f7fd fbcc 	bl	80013dc <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	; 0x64
 8003c4c:	d904      	bls.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e0bb      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c58:	4b5e      	ldr	r3, [pc, #376]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c64:	d0ec      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d009      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d02e      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d12a      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c8e:	4b51      	ldr	r3, [pc, #324]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c9c:	4b4d      	ldr	r3, [pc, #308]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	0f1b      	lsrs	r3, r3, #28
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	019a      	lsls	r2, r3, #6
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	061b      	lsls	r3, r3, #24
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	071b      	lsls	r3, r3, #28
 8003cc2:	4944      	ldr	r1, [pc, #272]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cca:	4b42      	ldr	r3, [pc, #264]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	493d      	ldr	r1, [pc, #244]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d022      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf8:	d11d      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cfa:	4b36      	ldr	r3, [pc, #216]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	0e1b      	lsrs	r3, r3, #24
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d08:	4b32      	ldr	r3, [pc, #200]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	0f1b      	lsrs	r3, r3, #28
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	019a      	lsls	r2, r3, #6
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	431a      	orrs	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	061b      	lsls	r3, r3, #24
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	071b      	lsls	r3, r3, #28
 8003d2e:	4929      	ldr	r1, [pc, #164]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d028      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	0e1b      	lsrs	r3, r3, #24
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d50:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	0c1b      	lsrs	r3, r3, #16
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	019a      	lsls	r2, r3, #6
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	071b      	lsls	r3, r3, #28
 8003d76:	4917      	ldr	r1, [pc, #92]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d7e:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	4911      	ldr	r1, [pc, #68]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a0e      	ldr	r2, [pc, #56]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da0:	f7fd fb1c 	bl	80013dc <HAL_GetTick>
 8003da4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003da8:	f7fd fb18 	bl	80013dc <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	; 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e007      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc6:	d1ef      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3720      	adds	r7, #32
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800

08003dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e049      	b.n	8003e7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd f8ee 	bl	8000fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f000 f9f6 	bl	8004208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d001      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e054      	b.n	8003f4a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a26      	ldr	r2, [pc, #152]	; (8003f58 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d022      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0x80>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eca:	d01d      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0x80>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d018      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0x80>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <HAL_TIM_Base_Start_IT+0xd8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d013      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0x80>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1f      	ldr	r2, [pc, #124]	; (8003f64 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00e      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0x80>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1e      	ldr	r2, [pc, #120]	; (8003f68 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d009      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0x80>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1c      	ldr	r2, [pc, #112]	; (8003f6c <HAL_TIM_Base_Start_IT+0xe4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0x80>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_TIM_Base_Start_IT+0xe8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d115      	bne.n	8003f34 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_TIM_Base_Start_IT+0xec>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b06      	cmp	r3, #6
 8003f18:	d015      	beq.n	8003f46 <HAL_TIM_Base_Start_IT+0xbe>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f20:	d011      	beq.n	8003f46 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f32:	e008      	b.n	8003f46 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	e000      	b.n	8003f48 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800
 8003f64:	40000c00 	.word	0x40000c00
 8003f68:	40010400 	.word	0x40010400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40001800 	.word	0x40001800
 8003f74:	00010007 	.word	0x00010007

08003f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d122      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0202 	mvn.w	r2, #2
 8003fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f905 	bl	80041ca <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8f7 	bl	80041b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f908 	bl	80041de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d122      	bne.n	8004028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d11b      	bne.n	8004028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0204 	mvn.w	r2, #4
 8003ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f8db 	bl	80041ca <HAL_TIM_IC_CaptureCallback>
 8004014:	e005      	b.n	8004022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f8cd 	bl	80041b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f8de 	bl	80041de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b08      	cmp	r3, #8
 8004034:	d122      	bne.n	800407c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b08      	cmp	r3, #8
 8004042:	d11b      	bne.n	800407c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0208 	mvn.w	r2, #8
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2204      	movs	r2, #4
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f8b1 	bl	80041ca <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f8a3 	bl	80041b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f8b4 	bl	80041de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b10      	cmp	r3, #16
 8004088:	d122      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b10      	cmp	r3, #16
 8004096:	d11b      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0210 	mvn.w	r2, #16
 80040a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2208      	movs	r2, #8
 80040a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f887 	bl	80041ca <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f879 	bl	80041b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f88a 	bl	80041de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d10e      	bne.n	80040fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d107      	bne.n	80040fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0201 	mvn.w	r2, #1
 80040f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc fd00 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b80      	cmp	r3, #128	; 0x80
 8004108:	d10e      	bne.n	8004128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d107      	bne.n	8004128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f9a8 	bl	8004478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004136:	d10e      	bne.n	8004156 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004142:	2b80      	cmp	r3, #128	; 0x80
 8004144:	d107      	bne.n	8004156 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800414e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f99b 	bl	800448c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d10e      	bne.n	8004182 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b40      	cmp	r3, #64	; 0x40
 8004170:	d107      	bne.n	8004182 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800417a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f838 	bl	80041f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b20      	cmp	r3, #32
 800418e:	d10e      	bne.n	80041ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	2b20      	cmp	r3, #32
 800419c:	d107      	bne.n	80041ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f06f 0220 	mvn.w	r2, #32
 80041a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f95b 	bl	8004464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a40      	ldr	r2, [pc, #256]	; (800431c <TIM_Base_SetConfig+0x114>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d013      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004226:	d00f      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a3d      	ldr	r2, [pc, #244]	; (8004320 <TIM_Base_SetConfig+0x118>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00b      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a3c      	ldr	r2, [pc, #240]	; (8004324 <TIM_Base_SetConfig+0x11c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d007      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a3b      	ldr	r2, [pc, #236]	; (8004328 <TIM_Base_SetConfig+0x120>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a3a      	ldr	r2, [pc, #232]	; (800432c <TIM_Base_SetConfig+0x124>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d108      	bne.n	800425a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a2f      	ldr	r2, [pc, #188]	; (800431c <TIM_Base_SetConfig+0x114>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d02b      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004268:	d027      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2c      	ldr	r2, [pc, #176]	; (8004320 <TIM_Base_SetConfig+0x118>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d023      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2b      	ldr	r2, [pc, #172]	; (8004324 <TIM_Base_SetConfig+0x11c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01f      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2a      	ldr	r2, [pc, #168]	; (8004328 <TIM_Base_SetConfig+0x120>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d01b      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a29      	ldr	r2, [pc, #164]	; (800432c <TIM_Base_SetConfig+0x124>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d017      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a28      	ldr	r2, [pc, #160]	; (8004330 <TIM_Base_SetConfig+0x128>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a27      	ldr	r2, [pc, #156]	; (8004334 <TIM_Base_SetConfig+0x12c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00f      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a26      	ldr	r2, [pc, #152]	; (8004338 <TIM_Base_SetConfig+0x130>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00b      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a25      	ldr	r2, [pc, #148]	; (800433c <TIM_Base_SetConfig+0x134>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a24      	ldr	r2, [pc, #144]	; (8004340 <TIM_Base_SetConfig+0x138>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d003      	beq.n	80042ba <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a23      	ldr	r2, [pc, #140]	; (8004344 <TIM_Base_SetConfig+0x13c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d108      	bne.n	80042cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a0a      	ldr	r2, [pc, #40]	; (800431c <TIM_Base_SetConfig+0x114>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_Base_SetConfig+0xf8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a0c      	ldr	r2, [pc, #48]	; (800432c <TIM_Base_SetConfig+0x124>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d103      	bne.n	8004308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	615a      	str	r2, [r3, #20]
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40010400 	.word	0x40010400
 8004330:	40014000 	.word	0x40014000
 8004334:	40014400 	.word	0x40014400
 8004338:	40014800 	.word	0x40014800
 800433c:	40001800 	.word	0x40001800
 8004340:	40001c00 	.word	0x40001c00
 8004344:	40002000 	.word	0x40002000

08004348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800435c:	2302      	movs	r3, #2
 800435e:	e06d      	b.n	800443c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a30      	ldr	r2, [pc, #192]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2f      	ldr	r2, [pc, #188]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d108      	bne.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800439a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a20      	ldr	r2, [pc, #128]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d022      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d2:	d01d      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d018      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d013      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00e      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a15      	ldr	r2, [pc, #84]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d009      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a16      	ldr	r2, [pc, #88]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d004      	beq.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a15      	ldr	r2, [pc, #84]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d10c      	bne.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004416:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	4313      	orrs	r3, r2
 8004420:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	40010000 	.word	0x40010000
 800444c:	40010400 	.word	0x40010400
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800
 8004458:	40000c00 	.word	0x40000c00
 800445c:	40014000 	.word	0x40014000
 8004460:	40001800 	.word	0x40001800

08004464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e040      	b.n	8004534 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fc fdb2 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	; 0x24
 80044cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f974 	bl	80047cc <UART_SetConfig>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e022      	b.n	8004534 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fbcc 	bl	8004c94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800450a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800451a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fc53 	bl	8004dd8 <UART_CheckIdleState>
 8004532:	4603      	mov	r3, r0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	; 0x28
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004550:	2b20      	cmp	r3, #32
 8004552:	d171      	bne.n	8004638 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_UART_Transmit+0x24>
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e06a      	b.n	800463a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2221      	movs	r2, #33	; 0x21
 8004570:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004572:	f7fc ff33 	bl	80013dc <HAL_GetTick>
 8004576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004590:	d108      	bne.n	80045a4 <HAL_UART_Transmit+0x68>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d104      	bne.n	80045a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e003      	b.n	80045ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045ac:	e02c      	b.n	8004608 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2200      	movs	r2, #0
 80045b6:	2180      	movs	r1, #128	; 0x80
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fc5a 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e038      	b.n	800463a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10b      	bne.n	80045e6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	3302      	adds	r3, #2
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	e007      	b.n	80045f6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	781a      	ldrb	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	3301      	adds	r3, #1
 80045f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1cc      	bne.n	80045ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2200      	movs	r2, #0
 800461c:	2140      	movs	r1, #64	; 0x40
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fc27 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e005      	b.n	800463a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e000      	b.n	800463a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b08a      	sub	sp, #40	; 0x28
 8004646:	af02      	add	r7, sp, #8
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	4613      	mov	r3, r2
 8004650:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004658:	2b20      	cmp	r3, #32
 800465a:	f040 80b1 	bne.w	80047c0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <HAL_UART_Receive+0x28>
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e0a9      	b.n	80047c2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2222      	movs	r2, #34	; 0x22
 800467a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004684:	f7fc feaa 	bl	80013dc <HAL_GetTick>
 8004688:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	88fa      	ldrh	r2, [r7, #6]
 800468e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	d10e      	bne.n	80046c2 <HAL_UART_Receive+0x80>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d105      	bne.n	80046b8 <HAL_UART_Receive+0x76>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b6:	e02d      	b.n	8004714 <HAL_UART_Receive+0xd2>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	22ff      	movs	r2, #255	; 0xff
 80046bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046c0:	e028      	b.n	8004714 <HAL_UART_Receive+0xd2>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10d      	bne.n	80046e6 <HAL_UART_Receive+0xa4>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <HAL_UART_Receive+0x9a>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	22ff      	movs	r2, #255	; 0xff
 80046d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046da:	e01b      	b.n	8004714 <HAL_UART_Receive+0xd2>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	227f      	movs	r2, #127	; 0x7f
 80046e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046e4:	e016      	b.n	8004714 <HAL_UART_Receive+0xd2>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ee:	d10d      	bne.n	800470c <HAL_UART_Receive+0xca>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <HAL_UART_Receive+0xc0>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	227f      	movs	r2, #127	; 0x7f
 80046fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004700:	e008      	b.n	8004714 <HAL_UART_Receive+0xd2>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	223f      	movs	r2, #63	; 0x3f
 8004706:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800470a:	e003      	b.n	8004714 <HAL_UART_Receive+0xd2>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800471a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004724:	d108      	bne.n	8004738 <HAL_UART_Receive+0xf6>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	e003      	b.n	8004740 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004740:	e032      	b.n	80047a8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2200      	movs	r2, #0
 800474a:	2120      	movs	r1, #32
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fb90 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e032      	b.n	80047c2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10c      	bne.n	800477c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	b29a      	uxth	r2, r3
 800476a:	8a7b      	ldrh	r3, [r7, #18]
 800476c:	4013      	ands	r3, r2
 800476e:	b29a      	uxth	r2, r3
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	3302      	adds	r3, #2
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	e00c      	b.n	8004796 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	b2da      	uxtb	r2, r3
 8004784:	8a7b      	ldrh	r3, [r7, #18]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	4013      	ands	r3, r2
 800478a:	b2da      	uxtb	r2, r3
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	3301      	adds	r3, #1
 8004794:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1c6      	bne.n	8004742 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e000      	b.n	80047c2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4ba6      	ldr	r3, [pc, #664]	; (8004a90 <UART_SetConfig+0x2c4>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	6979      	ldr	r1, [r7, #20]
 8004800:	430b      	orrs	r3, r1
 8004802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	430a      	orrs	r2, r1
 800483c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a94      	ldr	r2, [pc, #592]	; (8004a94 <UART_SetConfig+0x2c8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d120      	bne.n	800488a <UART_SetConfig+0xbe>
 8004848:	4b93      	ldr	r3, [pc, #588]	; (8004a98 <UART_SetConfig+0x2cc>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b03      	cmp	r3, #3
 8004854:	d816      	bhi.n	8004884 <UART_SetConfig+0xb8>
 8004856:	a201      	add	r2, pc, #4	; (adr r2, 800485c <UART_SetConfig+0x90>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	0800486d 	.word	0x0800486d
 8004860:	08004879 	.word	0x08004879
 8004864:	08004873 	.word	0x08004873
 8004868:	0800487f 	.word	0x0800487f
 800486c:	2301      	movs	r3, #1
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e150      	b.n	8004b14 <UART_SetConfig+0x348>
 8004872:	2302      	movs	r3, #2
 8004874:	77fb      	strb	r3, [r7, #31]
 8004876:	e14d      	b.n	8004b14 <UART_SetConfig+0x348>
 8004878:	2304      	movs	r3, #4
 800487a:	77fb      	strb	r3, [r7, #31]
 800487c:	e14a      	b.n	8004b14 <UART_SetConfig+0x348>
 800487e:	2308      	movs	r3, #8
 8004880:	77fb      	strb	r3, [r7, #31]
 8004882:	e147      	b.n	8004b14 <UART_SetConfig+0x348>
 8004884:	2310      	movs	r3, #16
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e144      	b.n	8004b14 <UART_SetConfig+0x348>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a83      	ldr	r2, [pc, #524]	; (8004a9c <UART_SetConfig+0x2d0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d132      	bne.n	80048fa <UART_SetConfig+0x12e>
 8004894:	4b80      	ldr	r3, [pc, #512]	; (8004a98 <UART_SetConfig+0x2cc>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d828      	bhi.n	80048f4 <UART_SetConfig+0x128>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <UART_SetConfig+0xdc>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048dd 	.word	0x080048dd
 80048ac:	080048f5 	.word	0x080048f5
 80048b0:	080048f5 	.word	0x080048f5
 80048b4:	080048f5 	.word	0x080048f5
 80048b8:	080048e9 	.word	0x080048e9
 80048bc:	080048f5 	.word	0x080048f5
 80048c0:	080048f5 	.word	0x080048f5
 80048c4:	080048f5 	.word	0x080048f5
 80048c8:	080048e3 	.word	0x080048e3
 80048cc:	080048f5 	.word	0x080048f5
 80048d0:	080048f5 	.word	0x080048f5
 80048d4:	080048f5 	.word	0x080048f5
 80048d8:	080048ef 	.word	0x080048ef
 80048dc:	2300      	movs	r3, #0
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e118      	b.n	8004b14 <UART_SetConfig+0x348>
 80048e2:	2302      	movs	r3, #2
 80048e4:	77fb      	strb	r3, [r7, #31]
 80048e6:	e115      	b.n	8004b14 <UART_SetConfig+0x348>
 80048e8:	2304      	movs	r3, #4
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e112      	b.n	8004b14 <UART_SetConfig+0x348>
 80048ee:	2308      	movs	r3, #8
 80048f0:	77fb      	strb	r3, [r7, #31]
 80048f2:	e10f      	b.n	8004b14 <UART_SetConfig+0x348>
 80048f4:	2310      	movs	r3, #16
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e10c      	b.n	8004b14 <UART_SetConfig+0x348>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a68      	ldr	r2, [pc, #416]	; (8004aa0 <UART_SetConfig+0x2d4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d120      	bne.n	8004946 <UART_SetConfig+0x17a>
 8004904:	4b64      	ldr	r3, [pc, #400]	; (8004a98 <UART_SetConfig+0x2cc>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800490e:	2b30      	cmp	r3, #48	; 0x30
 8004910:	d013      	beq.n	800493a <UART_SetConfig+0x16e>
 8004912:	2b30      	cmp	r3, #48	; 0x30
 8004914:	d814      	bhi.n	8004940 <UART_SetConfig+0x174>
 8004916:	2b20      	cmp	r3, #32
 8004918:	d009      	beq.n	800492e <UART_SetConfig+0x162>
 800491a:	2b20      	cmp	r3, #32
 800491c:	d810      	bhi.n	8004940 <UART_SetConfig+0x174>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <UART_SetConfig+0x15c>
 8004922:	2b10      	cmp	r3, #16
 8004924:	d006      	beq.n	8004934 <UART_SetConfig+0x168>
 8004926:	e00b      	b.n	8004940 <UART_SetConfig+0x174>
 8004928:	2300      	movs	r3, #0
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e0f2      	b.n	8004b14 <UART_SetConfig+0x348>
 800492e:	2302      	movs	r3, #2
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e0ef      	b.n	8004b14 <UART_SetConfig+0x348>
 8004934:	2304      	movs	r3, #4
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e0ec      	b.n	8004b14 <UART_SetConfig+0x348>
 800493a:	2308      	movs	r3, #8
 800493c:	77fb      	strb	r3, [r7, #31]
 800493e:	e0e9      	b.n	8004b14 <UART_SetConfig+0x348>
 8004940:	2310      	movs	r3, #16
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e0e6      	b.n	8004b14 <UART_SetConfig+0x348>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a56      	ldr	r2, [pc, #344]	; (8004aa4 <UART_SetConfig+0x2d8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d120      	bne.n	8004992 <UART_SetConfig+0x1c6>
 8004950:	4b51      	ldr	r3, [pc, #324]	; (8004a98 <UART_SetConfig+0x2cc>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004956:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800495a:	2bc0      	cmp	r3, #192	; 0xc0
 800495c:	d013      	beq.n	8004986 <UART_SetConfig+0x1ba>
 800495e:	2bc0      	cmp	r3, #192	; 0xc0
 8004960:	d814      	bhi.n	800498c <UART_SetConfig+0x1c0>
 8004962:	2b80      	cmp	r3, #128	; 0x80
 8004964:	d009      	beq.n	800497a <UART_SetConfig+0x1ae>
 8004966:	2b80      	cmp	r3, #128	; 0x80
 8004968:	d810      	bhi.n	800498c <UART_SetConfig+0x1c0>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <UART_SetConfig+0x1a8>
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d006      	beq.n	8004980 <UART_SetConfig+0x1b4>
 8004972:	e00b      	b.n	800498c <UART_SetConfig+0x1c0>
 8004974:	2300      	movs	r3, #0
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e0cc      	b.n	8004b14 <UART_SetConfig+0x348>
 800497a:	2302      	movs	r3, #2
 800497c:	77fb      	strb	r3, [r7, #31]
 800497e:	e0c9      	b.n	8004b14 <UART_SetConfig+0x348>
 8004980:	2304      	movs	r3, #4
 8004982:	77fb      	strb	r3, [r7, #31]
 8004984:	e0c6      	b.n	8004b14 <UART_SetConfig+0x348>
 8004986:	2308      	movs	r3, #8
 8004988:	77fb      	strb	r3, [r7, #31]
 800498a:	e0c3      	b.n	8004b14 <UART_SetConfig+0x348>
 800498c:	2310      	movs	r3, #16
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	e0c0      	b.n	8004b14 <UART_SetConfig+0x348>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a44      	ldr	r2, [pc, #272]	; (8004aa8 <UART_SetConfig+0x2dc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d125      	bne.n	80049e8 <UART_SetConfig+0x21c>
 800499c:	4b3e      	ldr	r3, [pc, #248]	; (8004a98 <UART_SetConfig+0x2cc>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049aa:	d017      	beq.n	80049dc <UART_SetConfig+0x210>
 80049ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b0:	d817      	bhi.n	80049e2 <UART_SetConfig+0x216>
 80049b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b6:	d00b      	beq.n	80049d0 <UART_SetConfig+0x204>
 80049b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049bc:	d811      	bhi.n	80049e2 <UART_SetConfig+0x216>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <UART_SetConfig+0x1fe>
 80049c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c6:	d006      	beq.n	80049d6 <UART_SetConfig+0x20a>
 80049c8:	e00b      	b.n	80049e2 <UART_SetConfig+0x216>
 80049ca:	2300      	movs	r3, #0
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e0a1      	b.n	8004b14 <UART_SetConfig+0x348>
 80049d0:	2302      	movs	r3, #2
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e09e      	b.n	8004b14 <UART_SetConfig+0x348>
 80049d6:	2304      	movs	r3, #4
 80049d8:	77fb      	strb	r3, [r7, #31]
 80049da:	e09b      	b.n	8004b14 <UART_SetConfig+0x348>
 80049dc:	2308      	movs	r3, #8
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e098      	b.n	8004b14 <UART_SetConfig+0x348>
 80049e2:	2310      	movs	r3, #16
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e095      	b.n	8004b14 <UART_SetConfig+0x348>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a2f      	ldr	r2, [pc, #188]	; (8004aac <UART_SetConfig+0x2e0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d125      	bne.n	8004a3e <UART_SetConfig+0x272>
 80049f2:	4b29      	ldr	r3, [pc, #164]	; (8004a98 <UART_SetConfig+0x2cc>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a00:	d017      	beq.n	8004a32 <UART_SetConfig+0x266>
 8004a02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a06:	d817      	bhi.n	8004a38 <UART_SetConfig+0x26c>
 8004a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0c:	d00b      	beq.n	8004a26 <UART_SetConfig+0x25a>
 8004a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a12:	d811      	bhi.n	8004a38 <UART_SetConfig+0x26c>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <UART_SetConfig+0x254>
 8004a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1c:	d006      	beq.n	8004a2c <UART_SetConfig+0x260>
 8004a1e:	e00b      	b.n	8004a38 <UART_SetConfig+0x26c>
 8004a20:	2301      	movs	r3, #1
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e076      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a26:	2302      	movs	r3, #2
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e073      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e070      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a32:	2308      	movs	r3, #8
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e06d      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e06a      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1b      	ldr	r2, [pc, #108]	; (8004ab0 <UART_SetConfig+0x2e4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d138      	bne.n	8004aba <UART_SetConfig+0x2ee>
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <UART_SetConfig+0x2cc>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a56:	d017      	beq.n	8004a88 <UART_SetConfig+0x2bc>
 8004a58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a5c:	d82a      	bhi.n	8004ab4 <UART_SetConfig+0x2e8>
 8004a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a62:	d00b      	beq.n	8004a7c <UART_SetConfig+0x2b0>
 8004a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a68:	d824      	bhi.n	8004ab4 <UART_SetConfig+0x2e8>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <UART_SetConfig+0x2aa>
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a72:	d006      	beq.n	8004a82 <UART_SetConfig+0x2b6>
 8004a74:	e01e      	b.n	8004ab4 <UART_SetConfig+0x2e8>
 8004a76:	2300      	movs	r3, #0
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e04b      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e048      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a82:	2304      	movs	r3, #4
 8004a84:	77fb      	strb	r3, [r7, #31]
 8004a86:	e045      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a88:	2308      	movs	r3, #8
 8004a8a:	77fb      	strb	r3, [r7, #31]
 8004a8c:	e042      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a8e:	bf00      	nop
 8004a90:	efff69f3 	.word	0xefff69f3
 8004a94:	40011000 	.word	0x40011000
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	40004400 	.word	0x40004400
 8004aa0:	40004800 	.word	0x40004800
 8004aa4:	40004c00 	.word	0x40004c00
 8004aa8:	40005000 	.word	0x40005000
 8004aac:	40011400 	.word	0x40011400
 8004ab0:	40007800 	.word	0x40007800
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e02c      	b.n	8004b14 <UART_SetConfig+0x348>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a72      	ldr	r2, [pc, #456]	; (8004c88 <UART_SetConfig+0x4bc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d125      	bne.n	8004b10 <UART_SetConfig+0x344>
 8004ac4:	4b71      	ldr	r3, [pc, #452]	; (8004c8c <UART_SetConfig+0x4c0>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ace:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ad2:	d017      	beq.n	8004b04 <UART_SetConfig+0x338>
 8004ad4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ad8:	d817      	bhi.n	8004b0a <UART_SetConfig+0x33e>
 8004ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ade:	d00b      	beq.n	8004af8 <UART_SetConfig+0x32c>
 8004ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae4:	d811      	bhi.n	8004b0a <UART_SetConfig+0x33e>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <UART_SetConfig+0x326>
 8004aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aee:	d006      	beq.n	8004afe <UART_SetConfig+0x332>
 8004af0:	e00b      	b.n	8004b0a <UART_SetConfig+0x33e>
 8004af2:	2300      	movs	r3, #0
 8004af4:	77fb      	strb	r3, [r7, #31]
 8004af6:	e00d      	b.n	8004b14 <UART_SetConfig+0x348>
 8004af8:	2302      	movs	r3, #2
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	e00a      	b.n	8004b14 <UART_SetConfig+0x348>
 8004afe:	2304      	movs	r3, #4
 8004b00:	77fb      	strb	r3, [r7, #31]
 8004b02:	e007      	b.n	8004b14 <UART_SetConfig+0x348>
 8004b04:	2308      	movs	r3, #8
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	e004      	b.n	8004b14 <UART_SetConfig+0x348>
 8004b0a:	2310      	movs	r3, #16
 8004b0c:	77fb      	strb	r3, [r7, #31]
 8004b0e:	e001      	b.n	8004b14 <UART_SetConfig+0x348>
 8004b10:	2310      	movs	r3, #16
 8004b12:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1c:	d15b      	bne.n	8004bd6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b1e:	7ffb      	ldrb	r3, [r7, #31]
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d828      	bhi.n	8004b76 <UART_SetConfig+0x3aa>
 8004b24:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <UART_SetConfig+0x360>)
 8004b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2a:	bf00      	nop
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b59 	.word	0x08004b59
 8004b34:	08004b61 	.word	0x08004b61
 8004b38:	08004b77 	.word	0x08004b77
 8004b3c:	08004b67 	.word	0x08004b67
 8004b40:	08004b77 	.word	0x08004b77
 8004b44:	08004b77 	.word	0x08004b77
 8004b48:	08004b77 	.word	0x08004b77
 8004b4c:	08004b6f 	.word	0x08004b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b50:	f7fe fcf2 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004b54:	61b8      	str	r0, [r7, #24]
        break;
 8004b56:	e013      	b.n	8004b80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b58:	f7fe fd02 	bl	8003560 <HAL_RCC_GetPCLK2Freq>
 8004b5c:	61b8      	str	r0, [r7, #24]
        break;
 8004b5e:	e00f      	b.n	8004b80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b60:	4b4b      	ldr	r3, [pc, #300]	; (8004c90 <UART_SetConfig+0x4c4>)
 8004b62:	61bb      	str	r3, [r7, #24]
        break;
 8004b64:	e00c      	b.n	8004b80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b66:	f7fe fbd5 	bl	8003314 <HAL_RCC_GetSysClockFreq>
 8004b6a:	61b8      	str	r0, [r7, #24]
        break;
 8004b6c:	e008      	b.n	8004b80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b72:	61bb      	str	r3, [r7, #24]
        break;
 8004b74:	e004      	b.n	8004b80 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d074      	beq.n	8004c70 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	005a      	lsls	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	441a      	add	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b0f      	cmp	r3, #15
 8004ba0:	d916      	bls.n	8004bd0 <UART_SetConfig+0x404>
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba8:	d212      	bcs.n	8004bd0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f023 030f 	bic.w	r3, r3, #15
 8004bb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	89fb      	ldrh	r3, [r7, #14]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	89fa      	ldrh	r2, [r7, #14]
 8004bcc:	60da      	str	r2, [r3, #12]
 8004bce:	e04f      	b.n	8004c70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	77bb      	strb	r3, [r7, #30]
 8004bd4:	e04c      	b.n	8004c70 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bd6:	7ffb      	ldrb	r3, [r7, #31]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d828      	bhi.n	8004c2e <UART_SetConfig+0x462>
 8004bdc:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <UART_SetConfig+0x418>)
 8004bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004c11 	.word	0x08004c11
 8004bec:	08004c19 	.word	0x08004c19
 8004bf0:	08004c2f 	.word	0x08004c2f
 8004bf4:	08004c1f 	.word	0x08004c1f
 8004bf8:	08004c2f 	.word	0x08004c2f
 8004bfc:	08004c2f 	.word	0x08004c2f
 8004c00:	08004c2f 	.word	0x08004c2f
 8004c04:	08004c27 	.word	0x08004c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c08:	f7fe fc96 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004c0c:	61b8      	str	r0, [r7, #24]
        break;
 8004c0e:	e013      	b.n	8004c38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c10:	f7fe fca6 	bl	8003560 <HAL_RCC_GetPCLK2Freq>
 8004c14:	61b8      	str	r0, [r7, #24]
        break;
 8004c16:	e00f      	b.n	8004c38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c18:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <UART_SetConfig+0x4c4>)
 8004c1a:	61bb      	str	r3, [r7, #24]
        break;
 8004c1c:	e00c      	b.n	8004c38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c1e:	f7fe fb79 	bl	8003314 <HAL_RCC_GetSysClockFreq>
 8004c22:	61b8      	str	r0, [r7, #24]
        break;
 8004c24:	e008      	b.n	8004c38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c2a:	61bb      	str	r3, [r7, #24]
        break;
 8004c2c:	e004      	b.n	8004c38 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	77bb      	strb	r3, [r7, #30]
        break;
 8004c36:	bf00      	nop
    }

    if (pclk != 0U)
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d018      	beq.n	8004c70 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	085a      	lsrs	r2, r3, #1
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	441a      	add	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b0f      	cmp	r3, #15
 8004c56:	d909      	bls.n	8004c6c <UART_SetConfig+0x4a0>
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5e:	d205      	bcs.n	8004c6c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	60da      	str	r2, [r3, #12]
 8004c6a:	e001      	b.n	8004c70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40007c00 	.word	0x40007c00
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	00f42400 	.word	0x00f42400

08004c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01a      	beq.n	8004daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d92:	d10a      	bne.n	8004daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004de8:	f7fc faf8 	bl	80013dc <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d10e      	bne.n	8004e1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f831 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e027      	b.n	8004e6a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d10e      	bne.n	8004e46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f81b 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e011      	b.n	8004e6a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b09c      	sub	sp, #112	; 0x70
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e82:	e0a7      	b.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	f000 80a3 	beq.w	8004fd4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8e:	f7fc faa5 	bl	80013dc <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d302      	bcc.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d13f      	bne.n	8004f24 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eb8:	667b      	str	r3, [r7, #100]	; 0x64
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ec4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ec8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e6      	bne.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	663b      	str	r3, [r7, #96]	; 0x60
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ef6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ef8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004efc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e5      	bne.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e068      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d050      	beq.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f40:	d148      	bne.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e6      	bne.n	8004f4c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3308      	adds	r3, #8
 8004f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f9e:	623a      	str	r2, [r7, #32]
 8004fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	69f9      	ldr	r1, [r7, #28]
 8004fa4:	6a3a      	ldr	r2, [r7, #32]
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e5      	bne.n	8004f7e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e010      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	f43f af48 	beq.w	8004e84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3770      	adds	r7, #112	; 0x70
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005000:	b084      	sub	sp, #16
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	f107 001c 	add.w	r0, r7, #28
 800500e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	2b01      	cmp	r3, #1
 8005016:	d120      	bne.n	800505a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	4b20      	ldr	r3, [pc, #128]	; (80050ac <USB_CoreInit+0xac>)
 800502a:	4013      	ands	r3, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800503c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800503e:	2b01      	cmp	r3, #1
 8005040:	d105      	bne.n	800504e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fa96 	bl	8005580 <USB_CoreReset>
 8005054:	4603      	mov	r3, r0
 8005056:	73fb      	strb	r3, [r7, #15]
 8005058:	e010      	b.n	800507c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fa8a 	bl	8005580 <USB_CoreReset>
 800506c:	4603      	mov	r3, r0
 800506e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	2b01      	cmp	r3, #1
 8005080:	d10b      	bne.n	800509a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f043 0206 	orr.w	r2, r3, #6
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f043 0220 	orr.w	r2, r3, #32
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800509a:	7bfb      	ldrb	r3, [r7, #15]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050a6:	b004      	add	sp, #16
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	ffbdffbf 	.word	0xffbdffbf

080050b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 0201 	bic.w	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	460b      	mov	r3, r1
 80050dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d115      	bne.n	8005120 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005100:	2001      	movs	r0, #1
 8005102:	f7fc f977 	bl	80013f4 <HAL_Delay>
      ms++;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3301      	adds	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fa29 	bl	8005564 <USB_GetMode>
 8005112:	4603      	mov	r3, r0
 8005114:	2b01      	cmp	r3, #1
 8005116:	d01e      	beq.n	8005156 <USB_SetCurrentMode+0x84>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b31      	cmp	r3, #49	; 0x31
 800511c:	d9f0      	bls.n	8005100 <USB_SetCurrentMode+0x2e>
 800511e:	e01a      	b.n	8005156 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d115      	bne.n	8005152 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005132:	2001      	movs	r0, #1
 8005134:	f7fc f95e 	bl	80013f4 <HAL_Delay>
      ms++;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3301      	adds	r3, #1
 800513c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fa10 	bl	8005564 <USB_GetMode>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <USB_SetCurrentMode+0x84>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b31      	cmp	r3, #49	; 0x31
 800514e:	d9f0      	bls.n	8005132 <USB_SetCurrentMode+0x60>
 8005150:	e001      	b.n	8005156 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e005      	b.n	8005162 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b32      	cmp	r3, #50	; 0x32
 800515a:	d101      	bne.n	8005160 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800516c:	b084      	sub	sp, #16
 800516e:	b580      	push	{r7, lr}
 8005170:	b086      	sub	sp, #24
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800517a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	e009      	b.n	80051a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	3340      	adds	r3, #64	; 0x40
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	2200      	movs	r2, #0
 8005198:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	3301      	adds	r3, #1
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b0e      	cmp	r3, #14
 80051a4:	d9f2      	bls.n	800518c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d11c      	bne.n	80051e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ba:	f043 0302 	orr.w	r3, r3, #2
 80051be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e005      	b.n	80051f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051f8:	461a      	mov	r2, r3
 80051fa:	2300      	movs	r3, #0
 80051fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005204:	4619      	mov	r1, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520c:	461a      	mov	r2, r3
 800520e:	680b      	ldr	r3, [r1, #0]
 8005210:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	2b01      	cmp	r3, #1
 8005216:	d10c      	bne.n	8005232 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800521e:	2100      	movs	r1, #0
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f965 	bl	80054f0 <USB_SetDevSpeed>
 8005226:	e008      	b.n	800523a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005228:	2101      	movs	r1, #1
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f960 	bl	80054f0 <USB_SetDevSpeed>
 8005230:	e003      	b.n	800523a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005232:	2103      	movs	r1, #3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f95b 	bl	80054f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800523a:	2110      	movs	r1, #16
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f8f3 	bl	8005428 <USB_FlushTxFifo>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f91f 	bl	8005490 <USB_FlushRxFifo>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005262:	461a      	mov	r2, r3
 8005264:	2300      	movs	r3, #0
 8005266:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526e:	461a      	mov	r2, r3
 8005270:	2300      	movs	r3, #0
 8005272:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527a:	461a      	mov	r2, r3
 800527c:	2300      	movs	r3, #0
 800527e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	e043      	b.n	800530e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800529c:	d118      	bne.n	80052d0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	461a      	mov	r2, r3
 80052b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	e013      	b.n	80052e2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	461a      	mov	r2, r3
 80052c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e008      	b.n	80052e2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	461a      	mov	r2, r3
 80052de:	2300      	movs	r3, #0
 80052e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ee:	461a      	mov	r2, r3
 80052f0:	2300      	movs	r3, #0
 80052f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005300:	461a      	mov	r2, r3
 8005302:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005306:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	3301      	adds	r3, #1
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	429a      	cmp	r2, r3
 8005314:	d3b7      	bcc.n	8005286 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	e043      	b.n	80053a4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800532e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005332:	d118      	bne.n	8005366 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005346:	461a      	mov	r2, r3
 8005348:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e013      	b.n	8005378 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	461a      	mov	r2, r3
 800535e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	e008      	b.n	8005378 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005372:	461a      	mov	r2, r3
 8005374:	2300      	movs	r3, #0
 8005376:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005384:	461a      	mov	r2, r3
 8005386:	2300      	movs	r3, #0
 8005388:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005396:	461a      	mov	r2, r3
 8005398:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800539c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	3301      	adds	r3, #1
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d3b7      	bcc.n	800531c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d105      	bne.n	80053e0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f043 0210 	orr.w	r2, r3, #16
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699a      	ldr	r2, [r3, #24]
 80053e4:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <USB_DevInit+0x2b4>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f043 0208 	orr.w	r2, r3, #8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d105      	bne.n	8005410 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	4b06      	ldr	r3, [pc, #24]	; (8005424 <USB_DevInit+0x2b8>)
 800540a:	4313      	orrs	r3, r2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005410:	7dfb      	ldrb	r3, [r7, #23]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800541c:	b004      	add	sp, #16
 800541e:	4770      	bx	lr
 8005420:	803c3800 	.word	0x803c3800
 8005424:	40000004 	.word	0x40000004

08005428 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4a13      	ldr	r2, [pc, #76]	; (800548c <USB_FlushTxFifo+0x64>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e01b      	b.n	8005480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	daf2      	bge.n	8005436 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	019b      	lsls	r3, r3, #6
 8005458:	f043 0220 	orr.w	r2, r3, #32
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3301      	adds	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a08      	ldr	r2, [pc, #32]	; (800548c <USB_FlushTxFifo+0x64>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d901      	bls.n	8005472 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e006      	b.n	8005480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b20      	cmp	r3, #32
 800547c:	d0f0      	beq.n	8005460 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	00030d40 	.word	0x00030d40

08005490 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4a11      	ldr	r2, [pc, #68]	; (80054ec <USB_FlushRxFifo+0x5c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e018      	b.n	80054e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	daf2      	bge.n	800549c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2210      	movs	r2, #16
 80054be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4a08      	ldr	r2, [pc, #32]	; (80054ec <USB_FlushRxFifo+0x5c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d901      	bls.n	80054d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e006      	b.n	80054e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b10      	cmp	r3, #16
 80054dc:	d0f0      	beq.n	80054c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	00030d40 	.word	0x00030d40

080054f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	68f9      	ldr	r1, [r7, #12]
 800550c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005510:	4313      	orrs	r3, r2
 8005512:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800553c:	f023 0303 	bic.w	r3, r3, #3
 8005540:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005550:	f043 0302 	orr.w	r3, r3, #2
 8005554:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f003 0301 	and.w	r3, r3, #1
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3301      	adds	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <USB_CoreReset+0x64>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d901      	bls.n	800559e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e01b      	b.n	80055d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	daf2      	bge.n	800558c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f043 0201 	orr.w	r2, r3, #1
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3301      	adds	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <USB_CoreReset+0x64>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d901      	bls.n	80055c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e006      	b.n	80055d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d0f0      	beq.n	80055b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	00030d40 	.word	0x00030d40

080055e8 <malloc>:
 80055e8:	4b02      	ldr	r3, [pc, #8]	; (80055f4 <malloc+0xc>)
 80055ea:	4601      	mov	r1, r0
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	f000 b823 	b.w	8005638 <_malloc_r>
 80055f2:	bf00      	nop
 80055f4:	20000064 	.word	0x20000064

080055f8 <sbrk_aligned>:
 80055f8:	b570      	push	{r4, r5, r6, lr}
 80055fa:	4e0e      	ldr	r6, [pc, #56]	; (8005634 <sbrk_aligned+0x3c>)
 80055fc:	460c      	mov	r4, r1
 80055fe:	6831      	ldr	r1, [r6, #0]
 8005600:	4605      	mov	r5, r0
 8005602:	b911      	cbnz	r1, 800560a <sbrk_aligned+0x12>
 8005604:	f000 fb96 	bl	8005d34 <_sbrk_r>
 8005608:	6030      	str	r0, [r6, #0]
 800560a:	4621      	mov	r1, r4
 800560c:	4628      	mov	r0, r5
 800560e:	f000 fb91 	bl	8005d34 <_sbrk_r>
 8005612:	1c43      	adds	r3, r0, #1
 8005614:	d00a      	beq.n	800562c <sbrk_aligned+0x34>
 8005616:	1cc4      	adds	r4, r0, #3
 8005618:	f024 0403 	bic.w	r4, r4, #3
 800561c:	42a0      	cmp	r0, r4
 800561e:	d007      	beq.n	8005630 <sbrk_aligned+0x38>
 8005620:	1a21      	subs	r1, r4, r0
 8005622:	4628      	mov	r0, r5
 8005624:	f000 fb86 	bl	8005d34 <_sbrk_r>
 8005628:	3001      	adds	r0, #1
 800562a:	d101      	bne.n	8005630 <sbrk_aligned+0x38>
 800562c:	f04f 34ff 	mov.w	r4, #4294967295
 8005630:	4620      	mov	r0, r4
 8005632:	bd70      	pop	{r4, r5, r6, pc}
 8005634:	200010bc 	.word	0x200010bc

08005638 <_malloc_r>:
 8005638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800563c:	1ccd      	adds	r5, r1, #3
 800563e:	f025 0503 	bic.w	r5, r5, #3
 8005642:	3508      	adds	r5, #8
 8005644:	2d0c      	cmp	r5, #12
 8005646:	bf38      	it	cc
 8005648:	250c      	movcc	r5, #12
 800564a:	2d00      	cmp	r5, #0
 800564c:	4607      	mov	r7, r0
 800564e:	db01      	blt.n	8005654 <_malloc_r+0x1c>
 8005650:	42a9      	cmp	r1, r5
 8005652:	d905      	bls.n	8005660 <_malloc_r+0x28>
 8005654:	230c      	movs	r3, #12
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	2600      	movs	r6, #0
 800565a:	4630      	mov	r0, r6
 800565c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005660:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005734 <_malloc_r+0xfc>
 8005664:	f000 f868 	bl	8005738 <__malloc_lock>
 8005668:	f8d8 3000 	ldr.w	r3, [r8]
 800566c:	461c      	mov	r4, r3
 800566e:	bb5c      	cbnz	r4, 80056c8 <_malloc_r+0x90>
 8005670:	4629      	mov	r1, r5
 8005672:	4638      	mov	r0, r7
 8005674:	f7ff ffc0 	bl	80055f8 <sbrk_aligned>
 8005678:	1c43      	adds	r3, r0, #1
 800567a:	4604      	mov	r4, r0
 800567c:	d155      	bne.n	800572a <_malloc_r+0xf2>
 800567e:	f8d8 4000 	ldr.w	r4, [r8]
 8005682:	4626      	mov	r6, r4
 8005684:	2e00      	cmp	r6, #0
 8005686:	d145      	bne.n	8005714 <_malloc_r+0xdc>
 8005688:	2c00      	cmp	r4, #0
 800568a:	d048      	beq.n	800571e <_malloc_r+0xe6>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	4631      	mov	r1, r6
 8005690:	4638      	mov	r0, r7
 8005692:	eb04 0903 	add.w	r9, r4, r3
 8005696:	f000 fb4d 	bl	8005d34 <_sbrk_r>
 800569a:	4581      	cmp	r9, r0
 800569c:	d13f      	bne.n	800571e <_malloc_r+0xe6>
 800569e:	6821      	ldr	r1, [r4, #0]
 80056a0:	1a6d      	subs	r5, r5, r1
 80056a2:	4629      	mov	r1, r5
 80056a4:	4638      	mov	r0, r7
 80056a6:	f7ff ffa7 	bl	80055f8 <sbrk_aligned>
 80056aa:	3001      	adds	r0, #1
 80056ac:	d037      	beq.n	800571e <_malloc_r+0xe6>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	442b      	add	r3, r5
 80056b2:	6023      	str	r3, [r4, #0]
 80056b4:	f8d8 3000 	ldr.w	r3, [r8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d038      	beq.n	800572e <_malloc_r+0xf6>
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	42a2      	cmp	r2, r4
 80056c0:	d12b      	bne.n	800571a <_malloc_r+0xe2>
 80056c2:	2200      	movs	r2, #0
 80056c4:	605a      	str	r2, [r3, #4]
 80056c6:	e00f      	b.n	80056e8 <_malloc_r+0xb0>
 80056c8:	6822      	ldr	r2, [r4, #0]
 80056ca:	1b52      	subs	r2, r2, r5
 80056cc:	d41f      	bmi.n	800570e <_malloc_r+0xd6>
 80056ce:	2a0b      	cmp	r2, #11
 80056d0:	d917      	bls.n	8005702 <_malloc_r+0xca>
 80056d2:	1961      	adds	r1, r4, r5
 80056d4:	42a3      	cmp	r3, r4
 80056d6:	6025      	str	r5, [r4, #0]
 80056d8:	bf18      	it	ne
 80056da:	6059      	strne	r1, [r3, #4]
 80056dc:	6863      	ldr	r3, [r4, #4]
 80056de:	bf08      	it	eq
 80056e0:	f8c8 1000 	streq.w	r1, [r8]
 80056e4:	5162      	str	r2, [r4, r5]
 80056e6:	604b      	str	r3, [r1, #4]
 80056e8:	4638      	mov	r0, r7
 80056ea:	f104 060b 	add.w	r6, r4, #11
 80056ee:	f000 f829 	bl	8005744 <__malloc_unlock>
 80056f2:	f026 0607 	bic.w	r6, r6, #7
 80056f6:	1d23      	adds	r3, r4, #4
 80056f8:	1af2      	subs	r2, r6, r3
 80056fa:	d0ae      	beq.n	800565a <_malloc_r+0x22>
 80056fc:	1b9b      	subs	r3, r3, r6
 80056fe:	50a3      	str	r3, [r4, r2]
 8005700:	e7ab      	b.n	800565a <_malloc_r+0x22>
 8005702:	42a3      	cmp	r3, r4
 8005704:	6862      	ldr	r2, [r4, #4]
 8005706:	d1dd      	bne.n	80056c4 <_malloc_r+0x8c>
 8005708:	f8c8 2000 	str.w	r2, [r8]
 800570c:	e7ec      	b.n	80056e8 <_malloc_r+0xb0>
 800570e:	4623      	mov	r3, r4
 8005710:	6864      	ldr	r4, [r4, #4]
 8005712:	e7ac      	b.n	800566e <_malloc_r+0x36>
 8005714:	4634      	mov	r4, r6
 8005716:	6876      	ldr	r6, [r6, #4]
 8005718:	e7b4      	b.n	8005684 <_malloc_r+0x4c>
 800571a:	4613      	mov	r3, r2
 800571c:	e7cc      	b.n	80056b8 <_malloc_r+0x80>
 800571e:	230c      	movs	r3, #12
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	4638      	mov	r0, r7
 8005724:	f000 f80e 	bl	8005744 <__malloc_unlock>
 8005728:	e797      	b.n	800565a <_malloc_r+0x22>
 800572a:	6025      	str	r5, [r4, #0]
 800572c:	e7dc      	b.n	80056e8 <_malloc_r+0xb0>
 800572e:	605b      	str	r3, [r3, #4]
 8005730:	deff      	udf	#255	; 0xff
 8005732:	bf00      	nop
 8005734:	200010b8 	.word	0x200010b8

08005738 <__malloc_lock>:
 8005738:	4801      	ldr	r0, [pc, #4]	; (8005740 <__malloc_lock+0x8>)
 800573a:	f000 bb48 	b.w	8005dce <__retarget_lock_acquire_recursive>
 800573e:	bf00      	nop
 8005740:	20001200 	.word	0x20001200

08005744 <__malloc_unlock>:
 8005744:	4801      	ldr	r0, [pc, #4]	; (800574c <__malloc_unlock+0x8>)
 8005746:	f000 bb43 	b.w	8005dd0 <__retarget_lock_release_recursive>
 800574a:	bf00      	nop
 800574c:	20001200 	.word	0x20001200

08005750 <std>:
 8005750:	2300      	movs	r3, #0
 8005752:	b510      	push	{r4, lr}
 8005754:	4604      	mov	r4, r0
 8005756:	e9c0 3300 	strd	r3, r3, [r0]
 800575a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800575e:	6083      	str	r3, [r0, #8]
 8005760:	8181      	strh	r1, [r0, #12]
 8005762:	6643      	str	r3, [r0, #100]	; 0x64
 8005764:	81c2      	strh	r2, [r0, #14]
 8005766:	6183      	str	r3, [r0, #24]
 8005768:	4619      	mov	r1, r3
 800576a:	2208      	movs	r2, #8
 800576c:	305c      	adds	r0, #92	; 0x5c
 800576e:	f000 faa5 	bl	8005cbc <memset>
 8005772:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <std+0x58>)
 8005774:	6263      	str	r3, [r4, #36]	; 0x24
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <std+0x5c>)
 8005778:	62a3      	str	r3, [r4, #40]	; 0x28
 800577a:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <std+0x60>)
 800577c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800577e:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <std+0x64>)
 8005780:	6323      	str	r3, [r4, #48]	; 0x30
 8005782:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <std+0x68>)
 8005784:	6224      	str	r4, [r4, #32]
 8005786:	429c      	cmp	r4, r3
 8005788:	d006      	beq.n	8005798 <std+0x48>
 800578a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800578e:	4294      	cmp	r4, r2
 8005790:	d002      	beq.n	8005798 <std+0x48>
 8005792:	33d0      	adds	r3, #208	; 0xd0
 8005794:	429c      	cmp	r4, r3
 8005796:	d105      	bne.n	80057a4 <std+0x54>
 8005798:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800579c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a0:	f000 bb14 	b.w	8005dcc <__retarget_lock_init_recursive>
 80057a4:	bd10      	pop	{r4, pc}
 80057a6:	bf00      	nop
 80057a8:	08005b0d 	.word	0x08005b0d
 80057ac:	08005b2f 	.word	0x08005b2f
 80057b0:	08005b67 	.word	0x08005b67
 80057b4:	08005b8b 	.word	0x08005b8b
 80057b8:	200010c0 	.word	0x200010c0

080057bc <stdio_exit_handler>:
 80057bc:	4a02      	ldr	r2, [pc, #8]	; (80057c8 <stdio_exit_handler+0xc>)
 80057be:	4903      	ldr	r1, [pc, #12]	; (80057cc <stdio_exit_handler+0x10>)
 80057c0:	4803      	ldr	r0, [pc, #12]	; (80057d0 <stdio_exit_handler+0x14>)
 80057c2:	f000 b869 	b.w	8005898 <_fwalk_sglue>
 80057c6:	bf00      	nop
 80057c8:	2000000c 	.word	0x2000000c
 80057cc:	08006521 	.word	0x08006521
 80057d0:	20000018 	.word	0x20000018

080057d4 <cleanup_stdio>:
 80057d4:	6841      	ldr	r1, [r0, #4]
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <cleanup_stdio+0x34>)
 80057d8:	4299      	cmp	r1, r3
 80057da:	b510      	push	{r4, lr}
 80057dc:	4604      	mov	r4, r0
 80057de:	d001      	beq.n	80057e4 <cleanup_stdio+0x10>
 80057e0:	f000 fe9e 	bl	8006520 <_fflush_r>
 80057e4:	68a1      	ldr	r1, [r4, #8]
 80057e6:	4b09      	ldr	r3, [pc, #36]	; (800580c <cleanup_stdio+0x38>)
 80057e8:	4299      	cmp	r1, r3
 80057ea:	d002      	beq.n	80057f2 <cleanup_stdio+0x1e>
 80057ec:	4620      	mov	r0, r4
 80057ee:	f000 fe97 	bl	8006520 <_fflush_r>
 80057f2:	68e1      	ldr	r1, [r4, #12]
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <cleanup_stdio+0x3c>)
 80057f6:	4299      	cmp	r1, r3
 80057f8:	d004      	beq.n	8005804 <cleanup_stdio+0x30>
 80057fa:	4620      	mov	r0, r4
 80057fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005800:	f000 be8e 	b.w	8006520 <_fflush_r>
 8005804:	bd10      	pop	{r4, pc}
 8005806:	bf00      	nop
 8005808:	200010c0 	.word	0x200010c0
 800580c:	20001128 	.word	0x20001128
 8005810:	20001190 	.word	0x20001190

08005814 <global_stdio_init.part.0>:
 8005814:	b510      	push	{r4, lr}
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <global_stdio_init.part.0+0x30>)
 8005818:	4c0b      	ldr	r4, [pc, #44]	; (8005848 <global_stdio_init.part.0+0x34>)
 800581a:	4a0c      	ldr	r2, [pc, #48]	; (800584c <global_stdio_init.part.0+0x38>)
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	4620      	mov	r0, r4
 8005820:	2200      	movs	r2, #0
 8005822:	2104      	movs	r1, #4
 8005824:	f7ff ff94 	bl	8005750 <std>
 8005828:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800582c:	2201      	movs	r2, #1
 800582e:	2109      	movs	r1, #9
 8005830:	f7ff ff8e 	bl	8005750 <std>
 8005834:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005838:	2202      	movs	r2, #2
 800583a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800583e:	2112      	movs	r1, #18
 8005840:	f7ff bf86 	b.w	8005750 <std>
 8005844:	200011f8 	.word	0x200011f8
 8005848:	200010c0 	.word	0x200010c0
 800584c:	080057bd 	.word	0x080057bd

08005850 <__sfp_lock_acquire>:
 8005850:	4801      	ldr	r0, [pc, #4]	; (8005858 <__sfp_lock_acquire+0x8>)
 8005852:	f000 babc 	b.w	8005dce <__retarget_lock_acquire_recursive>
 8005856:	bf00      	nop
 8005858:	20001201 	.word	0x20001201

0800585c <__sfp_lock_release>:
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <__sfp_lock_release+0x8>)
 800585e:	f000 bab7 	b.w	8005dd0 <__retarget_lock_release_recursive>
 8005862:	bf00      	nop
 8005864:	20001201 	.word	0x20001201

08005868 <__sinit>:
 8005868:	b510      	push	{r4, lr}
 800586a:	4604      	mov	r4, r0
 800586c:	f7ff fff0 	bl	8005850 <__sfp_lock_acquire>
 8005870:	6a23      	ldr	r3, [r4, #32]
 8005872:	b11b      	cbz	r3, 800587c <__sinit+0x14>
 8005874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005878:	f7ff bff0 	b.w	800585c <__sfp_lock_release>
 800587c:	4b04      	ldr	r3, [pc, #16]	; (8005890 <__sinit+0x28>)
 800587e:	6223      	str	r3, [r4, #32]
 8005880:	4b04      	ldr	r3, [pc, #16]	; (8005894 <__sinit+0x2c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f5      	bne.n	8005874 <__sinit+0xc>
 8005888:	f7ff ffc4 	bl	8005814 <global_stdio_init.part.0>
 800588c:	e7f2      	b.n	8005874 <__sinit+0xc>
 800588e:	bf00      	nop
 8005890:	080057d5 	.word	0x080057d5
 8005894:	200011f8 	.word	0x200011f8

08005898 <_fwalk_sglue>:
 8005898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800589c:	4607      	mov	r7, r0
 800589e:	4688      	mov	r8, r1
 80058a0:	4614      	mov	r4, r2
 80058a2:	2600      	movs	r6, #0
 80058a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058a8:	f1b9 0901 	subs.w	r9, r9, #1
 80058ac:	d505      	bpl.n	80058ba <_fwalk_sglue+0x22>
 80058ae:	6824      	ldr	r4, [r4, #0]
 80058b0:	2c00      	cmp	r4, #0
 80058b2:	d1f7      	bne.n	80058a4 <_fwalk_sglue+0xc>
 80058b4:	4630      	mov	r0, r6
 80058b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ba:	89ab      	ldrh	r3, [r5, #12]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d907      	bls.n	80058d0 <_fwalk_sglue+0x38>
 80058c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058c4:	3301      	adds	r3, #1
 80058c6:	d003      	beq.n	80058d0 <_fwalk_sglue+0x38>
 80058c8:	4629      	mov	r1, r5
 80058ca:	4638      	mov	r0, r7
 80058cc:	47c0      	blx	r8
 80058ce:	4306      	orrs	r6, r0
 80058d0:	3568      	adds	r5, #104	; 0x68
 80058d2:	e7e9      	b.n	80058a8 <_fwalk_sglue+0x10>

080058d4 <iprintf>:
 80058d4:	b40f      	push	{r0, r1, r2, r3}
 80058d6:	b507      	push	{r0, r1, r2, lr}
 80058d8:	4906      	ldr	r1, [pc, #24]	; (80058f4 <iprintf+0x20>)
 80058da:	ab04      	add	r3, sp, #16
 80058dc:	6808      	ldr	r0, [r1, #0]
 80058de:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e2:	6881      	ldr	r1, [r0, #8]
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	f000 faeb 	bl	8005ec0 <_vfiprintf_r>
 80058ea:	b003      	add	sp, #12
 80058ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80058f0:	b004      	add	sp, #16
 80058f2:	4770      	bx	lr
 80058f4:	20000064 	.word	0x20000064

080058f8 <_puts_r>:
 80058f8:	6a03      	ldr	r3, [r0, #32]
 80058fa:	b570      	push	{r4, r5, r6, lr}
 80058fc:	6884      	ldr	r4, [r0, #8]
 80058fe:	4605      	mov	r5, r0
 8005900:	460e      	mov	r6, r1
 8005902:	b90b      	cbnz	r3, 8005908 <_puts_r+0x10>
 8005904:	f7ff ffb0 	bl	8005868 <__sinit>
 8005908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800590a:	07db      	lsls	r3, r3, #31
 800590c:	d405      	bmi.n	800591a <_puts_r+0x22>
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	0598      	lsls	r0, r3, #22
 8005912:	d402      	bmi.n	800591a <_puts_r+0x22>
 8005914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005916:	f000 fa5a 	bl	8005dce <__retarget_lock_acquire_recursive>
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	0719      	lsls	r1, r3, #28
 800591e:	d513      	bpl.n	8005948 <_puts_r+0x50>
 8005920:	6923      	ldr	r3, [r4, #16]
 8005922:	b18b      	cbz	r3, 8005948 <_puts_r+0x50>
 8005924:	3e01      	subs	r6, #1
 8005926:	68a3      	ldr	r3, [r4, #8]
 8005928:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800592c:	3b01      	subs	r3, #1
 800592e:	60a3      	str	r3, [r4, #8]
 8005930:	b9e9      	cbnz	r1, 800596e <_puts_r+0x76>
 8005932:	2b00      	cmp	r3, #0
 8005934:	da2e      	bge.n	8005994 <_puts_r+0x9c>
 8005936:	4622      	mov	r2, r4
 8005938:	210a      	movs	r1, #10
 800593a:	4628      	mov	r0, r5
 800593c:	f000 f929 	bl	8005b92 <__swbuf_r>
 8005940:	3001      	adds	r0, #1
 8005942:	d007      	beq.n	8005954 <_puts_r+0x5c>
 8005944:	250a      	movs	r5, #10
 8005946:	e007      	b.n	8005958 <_puts_r+0x60>
 8005948:	4621      	mov	r1, r4
 800594a:	4628      	mov	r0, r5
 800594c:	f000 f95e 	bl	8005c0c <__swsetup_r>
 8005950:	2800      	cmp	r0, #0
 8005952:	d0e7      	beq.n	8005924 <_puts_r+0x2c>
 8005954:	f04f 35ff 	mov.w	r5, #4294967295
 8005958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800595a:	07da      	lsls	r2, r3, #31
 800595c:	d405      	bmi.n	800596a <_puts_r+0x72>
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	059b      	lsls	r3, r3, #22
 8005962:	d402      	bmi.n	800596a <_puts_r+0x72>
 8005964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005966:	f000 fa33 	bl	8005dd0 <__retarget_lock_release_recursive>
 800596a:	4628      	mov	r0, r5
 800596c:	bd70      	pop	{r4, r5, r6, pc}
 800596e:	2b00      	cmp	r3, #0
 8005970:	da04      	bge.n	800597c <_puts_r+0x84>
 8005972:	69a2      	ldr	r2, [r4, #24]
 8005974:	429a      	cmp	r2, r3
 8005976:	dc06      	bgt.n	8005986 <_puts_r+0x8e>
 8005978:	290a      	cmp	r1, #10
 800597a:	d004      	beq.n	8005986 <_puts_r+0x8e>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	6022      	str	r2, [r4, #0]
 8005982:	7019      	strb	r1, [r3, #0]
 8005984:	e7cf      	b.n	8005926 <_puts_r+0x2e>
 8005986:	4622      	mov	r2, r4
 8005988:	4628      	mov	r0, r5
 800598a:	f000 f902 	bl	8005b92 <__swbuf_r>
 800598e:	3001      	adds	r0, #1
 8005990:	d1c9      	bne.n	8005926 <_puts_r+0x2e>
 8005992:	e7df      	b.n	8005954 <_puts_r+0x5c>
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	250a      	movs	r5, #10
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	6022      	str	r2, [r4, #0]
 800599c:	701d      	strb	r5, [r3, #0]
 800599e:	e7db      	b.n	8005958 <_puts_r+0x60>

080059a0 <puts>:
 80059a0:	4b02      	ldr	r3, [pc, #8]	; (80059ac <puts+0xc>)
 80059a2:	4601      	mov	r1, r0
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	f7ff bfa7 	b.w	80058f8 <_puts_r>
 80059aa:	bf00      	nop
 80059ac:	20000064 	.word	0x20000064

080059b0 <setvbuf>:
 80059b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059b4:	461d      	mov	r5, r3
 80059b6:	4b54      	ldr	r3, [pc, #336]	; (8005b08 <setvbuf+0x158>)
 80059b8:	681f      	ldr	r7, [r3, #0]
 80059ba:	4604      	mov	r4, r0
 80059bc:	460e      	mov	r6, r1
 80059be:	4690      	mov	r8, r2
 80059c0:	b127      	cbz	r7, 80059cc <setvbuf+0x1c>
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	b913      	cbnz	r3, 80059cc <setvbuf+0x1c>
 80059c6:	4638      	mov	r0, r7
 80059c8:	f7ff ff4e 	bl	8005868 <__sinit>
 80059cc:	f1b8 0f02 	cmp.w	r8, #2
 80059d0:	d006      	beq.n	80059e0 <setvbuf+0x30>
 80059d2:	f1b8 0f01 	cmp.w	r8, #1
 80059d6:	f200 8094 	bhi.w	8005b02 <setvbuf+0x152>
 80059da:	2d00      	cmp	r5, #0
 80059dc:	f2c0 8091 	blt.w	8005b02 <setvbuf+0x152>
 80059e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059e2:	07da      	lsls	r2, r3, #31
 80059e4:	d405      	bmi.n	80059f2 <setvbuf+0x42>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	059b      	lsls	r3, r3, #22
 80059ea:	d402      	bmi.n	80059f2 <setvbuf+0x42>
 80059ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ee:	f000 f9ee 	bl	8005dce <__retarget_lock_acquire_recursive>
 80059f2:	4621      	mov	r1, r4
 80059f4:	4638      	mov	r0, r7
 80059f6:	f000 fd93 	bl	8006520 <_fflush_r>
 80059fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059fc:	b141      	cbz	r1, 8005a10 <setvbuf+0x60>
 80059fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a02:	4299      	cmp	r1, r3
 8005a04:	d002      	beq.n	8005a0c <setvbuf+0x5c>
 8005a06:	4638      	mov	r0, r7
 8005a08:	f000 f9e4 	bl	8005dd4 <_free_r>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	6363      	str	r3, [r4, #52]	; 0x34
 8005a10:	2300      	movs	r3, #0
 8005a12:	61a3      	str	r3, [r4, #24]
 8005a14:	6063      	str	r3, [r4, #4]
 8005a16:	89a3      	ldrh	r3, [r4, #12]
 8005a18:	0618      	lsls	r0, r3, #24
 8005a1a:	d503      	bpl.n	8005a24 <setvbuf+0x74>
 8005a1c:	6921      	ldr	r1, [r4, #16]
 8005a1e:	4638      	mov	r0, r7
 8005a20:	f000 f9d8 	bl	8005dd4 <_free_r>
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
 8005a2e:	f1b8 0f02 	cmp.w	r8, #2
 8005a32:	81a3      	strh	r3, [r4, #12]
 8005a34:	d05f      	beq.n	8005af6 <setvbuf+0x146>
 8005a36:	ab01      	add	r3, sp, #4
 8005a38:	466a      	mov	r2, sp
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	f000 fd97 	bl	8006570 <__swhatbuf_r>
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	4318      	orrs	r0, r3
 8005a46:	81a0      	strh	r0, [r4, #12]
 8005a48:	bb2d      	cbnz	r5, 8005a96 <setvbuf+0xe6>
 8005a4a:	9d00      	ldr	r5, [sp, #0]
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f7ff fdcb 	bl	80055e8 <malloc>
 8005a52:	4606      	mov	r6, r0
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d150      	bne.n	8005afa <setvbuf+0x14a>
 8005a58:	f8dd 9000 	ldr.w	r9, [sp]
 8005a5c:	45a9      	cmp	r9, r5
 8005a5e:	d13e      	bne.n	8005ade <setvbuf+0x12e>
 8005a60:	f04f 35ff 	mov.w	r5, #4294967295
 8005a64:	2200      	movs	r2, #0
 8005a66:	60a2      	str	r2, [r4, #8]
 8005a68:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005a6c:	6022      	str	r2, [r4, #0]
 8005a6e:	6122      	str	r2, [r4, #16]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a76:	6162      	str	r2, [r4, #20]
 8005a78:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a7a:	f043 0302 	orr.w	r3, r3, #2
 8005a7e:	07d1      	lsls	r1, r2, #31
 8005a80:	81a3      	strh	r3, [r4, #12]
 8005a82:	d404      	bmi.n	8005a8e <setvbuf+0xde>
 8005a84:	059b      	lsls	r3, r3, #22
 8005a86:	d402      	bmi.n	8005a8e <setvbuf+0xde>
 8005a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a8a:	f000 f9a1 	bl	8005dd0 <__retarget_lock_release_recursive>
 8005a8e:	4628      	mov	r0, r5
 8005a90:	b003      	add	sp, #12
 8005a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a96:	2e00      	cmp	r6, #0
 8005a98:	d0d8      	beq.n	8005a4c <setvbuf+0x9c>
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	b913      	cbnz	r3, 8005aa4 <setvbuf+0xf4>
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	f7ff fee2 	bl	8005868 <__sinit>
 8005aa4:	f1b8 0f01 	cmp.w	r8, #1
 8005aa8:	bf08      	it	eq
 8005aaa:	89a3      	ldrheq	r3, [r4, #12]
 8005aac:	6026      	str	r6, [r4, #0]
 8005aae:	bf04      	itt	eq
 8005ab0:	f043 0301 	orreq.w	r3, r3, #1
 8005ab4:	81a3      	strheq	r3, [r4, #12]
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	f013 0208 	ands.w	r2, r3, #8
 8005abc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005ac0:	d01d      	beq.n	8005afe <setvbuf+0x14e>
 8005ac2:	07da      	lsls	r2, r3, #31
 8005ac4:	bf41      	itttt	mi
 8005ac6:	2200      	movmi	r2, #0
 8005ac8:	426d      	negmi	r5, r5
 8005aca:	60a2      	strmi	r2, [r4, #8]
 8005acc:	61a5      	strmi	r5, [r4, #24]
 8005ace:	bf58      	it	pl
 8005ad0:	60a5      	strpl	r5, [r4, #8]
 8005ad2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005ad4:	f015 0501 	ands.w	r5, r5, #1
 8005ad8:	d0d4      	beq.n	8005a84 <setvbuf+0xd4>
 8005ada:	2500      	movs	r5, #0
 8005adc:	e7d7      	b.n	8005a8e <setvbuf+0xde>
 8005ade:	4648      	mov	r0, r9
 8005ae0:	f7ff fd82 	bl	80055e8 <malloc>
 8005ae4:	4606      	mov	r6, r0
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d0ba      	beq.n	8005a60 <setvbuf+0xb0>
 8005aea:	89a3      	ldrh	r3, [r4, #12]
 8005aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af0:	81a3      	strh	r3, [r4, #12]
 8005af2:	464d      	mov	r5, r9
 8005af4:	e7d1      	b.n	8005a9a <setvbuf+0xea>
 8005af6:	2500      	movs	r5, #0
 8005af8:	e7b4      	b.n	8005a64 <setvbuf+0xb4>
 8005afa:	46a9      	mov	r9, r5
 8005afc:	e7f5      	b.n	8005aea <setvbuf+0x13a>
 8005afe:	60a2      	str	r2, [r4, #8]
 8005b00:	e7e7      	b.n	8005ad2 <setvbuf+0x122>
 8005b02:	f04f 35ff 	mov.w	r5, #4294967295
 8005b06:	e7c2      	b.n	8005a8e <setvbuf+0xde>
 8005b08:	20000064 	.word	0x20000064

08005b0c <__sread>:
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	460c      	mov	r4, r1
 8005b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b14:	f000 f8fc 	bl	8005d10 <_read_r>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	bfab      	itete	ge
 8005b1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b20:	181b      	addge	r3, r3, r0
 8005b22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b26:	bfac      	ite	ge
 8005b28:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b2a:	81a3      	strhlt	r3, [r4, #12]
 8005b2c:	bd10      	pop	{r4, pc}

08005b2e <__swrite>:
 8005b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b32:	461f      	mov	r7, r3
 8005b34:	898b      	ldrh	r3, [r1, #12]
 8005b36:	05db      	lsls	r3, r3, #23
 8005b38:	4605      	mov	r5, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	4616      	mov	r6, r2
 8005b3e:	d505      	bpl.n	8005b4c <__swrite+0x1e>
 8005b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b44:	2302      	movs	r3, #2
 8005b46:	2200      	movs	r2, #0
 8005b48:	f000 f8d0 	bl	8005cec <_lseek_r>
 8005b4c:	89a3      	ldrh	r3, [r4, #12]
 8005b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b56:	81a3      	strh	r3, [r4, #12]
 8005b58:	4632      	mov	r2, r6
 8005b5a:	463b      	mov	r3, r7
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b62:	f000 b8f7 	b.w	8005d54 <_write_r>

08005b66 <__sseek>:
 8005b66:	b510      	push	{r4, lr}
 8005b68:	460c      	mov	r4, r1
 8005b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6e:	f000 f8bd 	bl	8005cec <_lseek_r>
 8005b72:	1c43      	adds	r3, r0, #1
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	bf15      	itete	ne
 8005b78:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b82:	81a3      	strheq	r3, [r4, #12]
 8005b84:	bf18      	it	ne
 8005b86:	81a3      	strhne	r3, [r4, #12]
 8005b88:	bd10      	pop	{r4, pc}

08005b8a <__sclose>:
 8005b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b8e:	f000 b89d 	b.w	8005ccc <_close_r>

08005b92 <__swbuf_r>:
 8005b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b94:	460e      	mov	r6, r1
 8005b96:	4614      	mov	r4, r2
 8005b98:	4605      	mov	r5, r0
 8005b9a:	b118      	cbz	r0, 8005ba4 <__swbuf_r+0x12>
 8005b9c:	6a03      	ldr	r3, [r0, #32]
 8005b9e:	b90b      	cbnz	r3, 8005ba4 <__swbuf_r+0x12>
 8005ba0:	f7ff fe62 	bl	8005868 <__sinit>
 8005ba4:	69a3      	ldr	r3, [r4, #24]
 8005ba6:	60a3      	str	r3, [r4, #8]
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	071a      	lsls	r2, r3, #28
 8005bac:	d525      	bpl.n	8005bfa <__swbuf_r+0x68>
 8005bae:	6923      	ldr	r3, [r4, #16]
 8005bb0:	b31b      	cbz	r3, 8005bfa <__swbuf_r+0x68>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	6922      	ldr	r2, [r4, #16]
 8005bb6:	1a98      	subs	r0, r3, r2
 8005bb8:	6963      	ldr	r3, [r4, #20]
 8005bba:	b2f6      	uxtb	r6, r6
 8005bbc:	4283      	cmp	r3, r0
 8005bbe:	4637      	mov	r7, r6
 8005bc0:	dc04      	bgt.n	8005bcc <__swbuf_r+0x3a>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f000 fcab 	bl	8006520 <_fflush_r>
 8005bca:	b9e0      	cbnz	r0, 8005c06 <__swbuf_r+0x74>
 8005bcc:	68a3      	ldr	r3, [r4, #8]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	60a3      	str	r3, [r4, #8]
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	6022      	str	r2, [r4, #0]
 8005bd8:	701e      	strb	r6, [r3, #0]
 8005bda:	6962      	ldr	r2, [r4, #20]
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d004      	beq.n	8005bec <__swbuf_r+0x5a>
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	07db      	lsls	r3, r3, #31
 8005be6:	d506      	bpl.n	8005bf6 <__swbuf_r+0x64>
 8005be8:	2e0a      	cmp	r6, #10
 8005bea:	d104      	bne.n	8005bf6 <__swbuf_r+0x64>
 8005bec:	4621      	mov	r1, r4
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 fc96 	bl	8006520 <_fflush_r>
 8005bf4:	b938      	cbnz	r0, 8005c06 <__swbuf_r+0x74>
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f000 f805 	bl	8005c0c <__swsetup_r>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d0d5      	beq.n	8005bb2 <__swbuf_r+0x20>
 8005c06:	f04f 37ff 	mov.w	r7, #4294967295
 8005c0a:	e7f4      	b.n	8005bf6 <__swbuf_r+0x64>

08005c0c <__swsetup_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <__swsetup_r+0xac>)
 8005c10:	4605      	mov	r5, r0
 8005c12:	6818      	ldr	r0, [r3, #0]
 8005c14:	460c      	mov	r4, r1
 8005c16:	b118      	cbz	r0, 8005c20 <__swsetup_r+0x14>
 8005c18:	6a03      	ldr	r3, [r0, #32]
 8005c1a:	b90b      	cbnz	r3, 8005c20 <__swsetup_r+0x14>
 8005c1c:	f7ff fe24 	bl	8005868 <__sinit>
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c26:	0718      	lsls	r0, r3, #28
 8005c28:	d422      	bmi.n	8005c70 <__swsetup_r+0x64>
 8005c2a:	06d9      	lsls	r1, r3, #27
 8005c2c:	d407      	bmi.n	8005c3e <__swsetup_r+0x32>
 8005c2e:	2309      	movs	r3, #9
 8005c30:	602b      	str	r3, [r5, #0]
 8005c32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c36:	81a3      	strh	r3, [r4, #12]
 8005c38:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3c:	e034      	b.n	8005ca8 <__swsetup_r+0x9c>
 8005c3e:	0758      	lsls	r0, r3, #29
 8005c40:	d512      	bpl.n	8005c68 <__swsetup_r+0x5c>
 8005c42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c44:	b141      	cbz	r1, 8005c58 <__swsetup_r+0x4c>
 8005c46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c4a:	4299      	cmp	r1, r3
 8005c4c:	d002      	beq.n	8005c54 <__swsetup_r+0x48>
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 f8c0 	bl	8005dd4 <_free_r>
 8005c54:	2300      	movs	r3, #0
 8005c56:	6363      	str	r3, [r4, #52]	; 0x34
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	2300      	movs	r3, #0
 8005c62:	6063      	str	r3, [r4, #4]
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	6023      	str	r3, [r4, #0]
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	f043 0308 	orr.w	r3, r3, #8
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	6923      	ldr	r3, [r4, #16]
 8005c72:	b94b      	cbnz	r3, 8005c88 <__swsetup_r+0x7c>
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c7e:	d003      	beq.n	8005c88 <__swsetup_r+0x7c>
 8005c80:	4621      	mov	r1, r4
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 fc9a 	bl	80065bc <__smakebuf_r>
 8005c88:	89a0      	ldrh	r0, [r4, #12]
 8005c8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c8e:	f010 0301 	ands.w	r3, r0, #1
 8005c92:	d00a      	beq.n	8005caa <__swsetup_r+0x9e>
 8005c94:	2300      	movs	r3, #0
 8005c96:	60a3      	str	r3, [r4, #8]
 8005c98:	6963      	ldr	r3, [r4, #20]
 8005c9a:	425b      	negs	r3, r3
 8005c9c:	61a3      	str	r3, [r4, #24]
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	b943      	cbnz	r3, 8005cb4 <__swsetup_r+0xa8>
 8005ca2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ca6:	d1c4      	bne.n	8005c32 <__swsetup_r+0x26>
 8005ca8:	bd38      	pop	{r3, r4, r5, pc}
 8005caa:	0781      	lsls	r1, r0, #30
 8005cac:	bf58      	it	pl
 8005cae:	6963      	ldrpl	r3, [r4, #20]
 8005cb0:	60a3      	str	r3, [r4, #8]
 8005cb2:	e7f4      	b.n	8005c9e <__swsetup_r+0x92>
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	e7f7      	b.n	8005ca8 <__swsetup_r+0x9c>
 8005cb8:	20000064 	.word	0x20000064

08005cbc <memset>:
 8005cbc:	4402      	add	r2, r0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d100      	bne.n	8005cc6 <memset+0xa>
 8005cc4:	4770      	bx	lr
 8005cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cca:	e7f9      	b.n	8005cc0 <memset+0x4>

08005ccc <_close_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	4d06      	ldr	r5, [pc, #24]	; (8005ce8 <_close_r+0x1c>)
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	602b      	str	r3, [r5, #0]
 8005cd8:	f7fa fffa 	bl	8000cd0 <_close>
 8005cdc:	1c43      	adds	r3, r0, #1
 8005cde:	d102      	bne.n	8005ce6 <_close_r+0x1a>
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	b103      	cbz	r3, 8005ce6 <_close_r+0x1a>
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	200011fc 	.word	0x200011fc

08005cec <_lseek_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4d07      	ldr	r5, [pc, #28]	; (8005d0c <_lseek_r+0x20>)
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	4608      	mov	r0, r1
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	602a      	str	r2, [r5, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f7fa ffff 	bl	8000cfe <_lseek>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	d102      	bne.n	8005d0a <_lseek_r+0x1e>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	b103      	cbz	r3, 8005d0a <_lseek_r+0x1e>
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	bd38      	pop	{r3, r4, r5, pc}
 8005d0c:	200011fc 	.word	0x200011fc

08005d10 <_read_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4d07      	ldr	r5, [pc, #28]	; (8005d30 <_read_r+0x20>)
 8005d14:	4604      	mov	r4, r0
 8005d16:	4608      	mov	r0, r1
 8005d18:	4611      	mov	r1, r2
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	602a      	str	r2, [r5, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f7fa fffe 	bl	8000d20 <_read>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d102      	bne.n	8005d2e <_read_r+0x1e>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	b103      	cbz	r3, 8005d2e <_read_r+0x1e>
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	bd38      	pop	{r3, r4, r5, pc}
 8005d30:	200011fc 	.word	0x200011fc

08005d34 <_sbrk_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	4d06      	ldr	r5, [pc, #24]	; (8005d50 <_sbrk_r+0x1c>)
 8005d38:	2300      	movs	r3, #0
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	f7fb fa8a 	bl	8001258 <_sbrk>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d102      	bne.n	8005d4e <_sbrk_r+0x1a>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	b103      	cbz	r3, 8005d4e <_sbrk_r+0x1a>
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	200011fc 	.word	0x200011fc

08005d54 <_write_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4d07      	ldr	r5, [pc, #28]	; (8005d74 <_write_r+0x20>)
 8005d58:	4604      	mov	r4, r0
 8005d5a:	4608      	mov	r0, r1
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	2200      	movs	r2, #0
 8005d60:	602a      	str	r2, [r5, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	f7fa ff88 	bl	8000c78 <_write>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_write_r+0x1e>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_write_r+0x1e>
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	200011fc 	.word	0x200011fc

08005d78 <__errno>:
 8005d78:	4b01      	ldr	r3, [pc, #4]	; (8005d80 <__errno+0x8>)
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	20000064 	.word	0x20000064

08005d84 <__libc_init_array>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	4d0d      	ldr	r5, [pc, #52]	; (8005dbc <__libc_init_array+0x38>)
 8005d88:	4c0d      	ldr	r4, [pc, #52]	; (8005dc0 <__libc_init_array+0x3c>)
 8005d8a:	1b64      	subs	r4, r4, r5
 8005d8c:	10a4      	asrs	r4, r4, #2
 8005d8e:	2600      	movs	r6, #0
 8005d90:	42a6      	cmp	r6, r4
 8005d92:	d109      	bne.n	8005da8 <__libc_init_array+0x24>
 8005d94:	4d0b      	ldr	r5, [pc, #44]	; (8005dc4 <__libc_init_array+0x40>)
 8005d96:	4c0c      	ldr	r4, [pc, #48]	; (8005dc8 <__libc_init_array+0x44>)
 8005d98:	f000 fc6e 	bl	8006678 <_init>
 8005d9c:	1b64      	subs	r4, r4, r5
 8005d9e:	10a4      	asrs	r4, r4, #2
 8005da0:	2600      	movs	r6, #0
 8005da2:	42a6      	cmp	r6, r4
 8005da4:	d105      	bne.n	8005db2 <__libc_init_array+0x2e>
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dac:	4798      	blx	r3
 8005dae:	3601      	adds	r6, #1
 8005db0:	e7ee      	b.n	8005d90 <__libc_init_array+0xc>
 8005db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db6:	4798      	blx	r3
 8005db8:	3601      	adds	r6, #1
 8005dba:	e7f2      	b.n	8005da2 <__libc_init_array+0x1e>
 8005dbc:	0800672c 	.word	0x0800672c
 8005dc0:	0800672c 	.word	0x0800672c
 8005dc4:	0800672c 	.word	0x0800672c
 8005dc8:	08006730 	.word	0x08006730

08005dcc <__retarget_lock_init_recursive>:
 8005dcc:	4770      	bx	lr

08005dce <__retarget_lock_acquire_recursive>:
 8005dce:	4770      	bx	lr

08005dd0 <__retarget_lock_release_recursive>:
 8005dd0:	4770      	bx	lr
	...

08005dd4 <_free_r>:
 8005dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dd6:	2900      	cmp	r1, #0
 8005dd8:	d044      	beq.n	8005e64 <_free_r+0x90>
 8005dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dde:	9001      	str	r0, [sp, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f1a1 0404 	sub.w	r4, r1, #4
 8005de6:	bfb8      	it	lt
 8005de8:	18e4      	addlt	r4, r4, r3
 8005dea:	f7ff fca5 	bl	8005738 <__malloc_lock>
 8005dee:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <_free_r+0x94>)
 8005df0:	9801      	ldr	r0, [sp, #4]
 8005df2:	6813      	ldr	r3, [r2, #0]
 8005df4:	b933      	cbnz	r3, 8005e04 <_free_r+0x30>
 8005df6:	6063      	str	r3, [r4, #4]
 8005df8:	6014      	str	r4, [r2, #0]
 8005dfa:	b003      	add	sp, #12
 8005dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e00:	f7ff bca0 	b.w	8005744 <__malloc_unlock>
 8005e04:	42a3      	cmp	r3, r4
 8005e06:	d908      	bls.n	8005e1a <_free_r+0x46>
 8005e08:	6825      	ldr	r5, [r4, #0]
 8005e0a:	1961      	adds	r1, r4, r5
 8005e0c:	428b      	cmp	r3, r1
 8005e0e:	bf01      	itttt	eq
 8005e10:	6819      	ldreq	r1, [r3, #0]
 8005e12:	685b      	ldreq	r3, [r3, #4]
 8005e14:	1949      	addeq	r1, r1, r5
 8005e16:	6021      	streq	r1, [r4, #0]
 8005e18:	e7ed      	b.n	8005df6 <_free_r+0x22>
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	b10b      	cbz	r3, 8005e24 <_free_r+0x50>
 8005e20:	42a3      	cmp	r3, r4
 8005e22:	d9fa      	bls.n	8005e1a <_free_r+0x46>
 8005e24:	6811      	ldr	r1, [r2, #0]
 8005e26:	1855      	adds	r5, r2, r1
 8005e28:	42a5      	cmp	r5, r4
 8005e2a:	d10b      	bne.n	8005e44 <_free_r+0x70>
 8005e2c:	6824      	ldr	r4, [r4, #0]
 8005e2e:	4421      	add	r1, r4
 8005e30:	1854      	adds	r4, r2, r1
 8005e32:	42a3      	cmp	r3, r4
 8005e34:	6011      	str	r1, [r2, #0]
 8005e36:	d1e0      	bne.n	8005dfa <_free_r+0x26>
 8005e38:	681c      	ldr	r4, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	6053      	str	r3, [r2, #4]
 8005e3e:	440c      	add	r4, r1
 8005e40:	6014      	str	r4, [r2, #0]
 8005e42:	e7da      	b.n	8005dfa <_free_r+0x26>
 8005e44:	d902      	bls.n	8005e4c <_free_r+0x78>
 8005e46:	230c      	movs	r3, #12
 8005e48:	6003      	str	r3, [r0, #0]
 8005e4a:	e7d6      	b.n	8005dfa <_free_r+0x26>
 8005e4c:	6825      	ldr	r5, [r4, #0]
 8005e4e:	1961      	adds	r1, r4, r5
 8005e50:	428b      	cmp	r3, r1
 8005e52:	bf04      	itt	eq
 8005e54:	6819      	ldreq	r1, [r3, #0]
 8005e56:	685b      	ldreq	r3, [r3, #4]
 8005e58:	6063      	str	r3, [r4, #4]
 8005e5a:	bf04      	itt	eq
 8005e5c:	1949      	addeq	r1, r1, r5
 8005e5e:	6021      	streq	r1, [r4, #0]
 8005e60:	6054      	str	r4, [r2, #4]
 8005e62:	e7ca      	b.n	8005dfa <_free_r+0x26>
 8005e64:	b003      	add	sp, #12
 8005e66:	bd30      	pop	{r4, r5, pc}
 8005e68:	200010b8 	.word	0x200010b8

08005e6c <__sfputc_r>:
 8005e6c:	6893      	ldr	r3, [r2, #8]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	b410      	push	{r4}
 8005e74:	6093      	str	r3, [r2, #8]
 8005e76:	da08      	bge.n	8005e8a <__sfputc_r+0x1e>
 8005e78:	6994      	ldr	r4, [r2, #24]
 8005e7a:	42a3      	cmp	r3, r4
 8005e7c:	db01      	blt.n	8005e82 <__sfputc_r+0x16>
 8005e7e:	290a      	cmp	r1, #10
 8005e80:	d103      	bne.n	8005e8a <__sfputc_r+0x1e>
 8005e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e86:	f7ff be84 	b.w	8005b92 <__swbuf_r>
 8005e8a:	6813      	ldr	r3, [r2, #0]
 8005e8c:	1c58      	adds	r0, r3, #1
 8005e8e:	6010      	str	r0, [r2, #0]
 8005e90:	7019      	strb	r1, [r3, #0]
 8005e92:	4608      	mov	r0, r1
 8005e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <__sfputs_r>:
 8005e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	460f      	mov	r7, r1
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	18d5      	adds	r5, r2, r3
 8005ea4:	42ac      	cmp	r4, r5
 8005ea6:	d101      	bne.n	8005eac <__sfputs_r+0x12>
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	e007      	b.n	8005ebc <__sfputs_r+0x22>
 8005eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb0:	463a      	mov	r2, r7
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f7ff ffda 	bl	8005e6c <__sfputc_r>
 8005eb8:	1c43      	adds	r3, r0, #1
 8005eba:	d1f3      	bne.n	8005ea4 <__sfputs_r+0xa>
 8005ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ec0 <_vfiprintf_r>:
 8005ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	460d      	mov	r5, r1
 8005ec6:	b09d      	sub	sp, #116	; 0x74
 8005ec8:	4614      	mov	r4, r2
 8005eca:	4698      	mov	r8, r3
 8005ecc:	4606      	mov	r6, r0
 8005ece:	b118      	cbz	r0, 8005ed8 <_vfiprintf_r+0x18>
 8005ed0:	6a03      	ldr	r3, [r0, #32]
 8005ed2:	b90b      	cbnz	r3, 8005ed8 <_vfiprintf_r+0x18>
 8005ed4:	f7ff fcc8 	bl	8005868 <__sinit>
 8005ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eda:	07d9      	lsls	r1, r3, #31
 8005edc:	d405      	bmi.n	8005eea <_vfiprintf_r+0x2a>
 8005ede:	89ab      	ldrh	r3, [r5, #12]
 8005ee0:	059a      	lsls	r2, r3, #22
 8005ee2:	d402      	bmi.n	8005eea <_vfiprintf_r+0x2a>
 8005ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ee6:	f7ff ff72 	bl	8005dce <__retarget_lock_acquire_recursive>
 8005eea:	89ab      	ldrh	r3, [r5, #12]
 8005eec:	071b      	lsls	r3, r3, #28
 8005eee:	d501      	bpl.n	8005ef4 <_vfiprintf_r+0x34>
 8005ef0:	692b      	ldr	r3, [r5, #16]
 8005ef2:	b99b      	cbnz	r3, 8005f1c <_vfiprintf_r+0x5c>
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f7ff fe88 	bl	8005c0c <__swsetup_r>
 8005efc:	b170      	cbz	r0, 8005f1c <_vfiprintf_r+0x5c>
 8005efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f00:	07dc      	lsls	r4, r3, #31
 8005f02:	d504      	bpl.n	8005f0e <_vfiprintf_r+0x4e>
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295
 8005f08:	b01d      	add	sp, #116	; 0x74
 8005f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0e:	89ab      	ldrh	r3, [r5, #12]
 8005f10:	0598      	lsls	r0, r3, #22
 8005f12:	d4f7      	bmi.n	8005f04 <_vfiprintf_r+0x44>
 8005f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f16:	f7ff ff5b 	bl	8005dd0 <__retarget_lock_release_recursive>
 8005f1a:	e7f3      	b.n	8005f04 <_vfiprintf_r+0x44>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f20:	2320      	movs	r3, #32
 8005f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f2a:	2330      	movs	r3, #48	; 0x30
 8005f2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80060e0 <_vfiprintf_r+0x220>
 8005f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f34:	f04f 0901 	mov.w	r9, #1
 8005f38:	4623      	mov	r3, r4
 8005f3a:	469a      	mov	sl, r3
 8005f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f40:	b10a      	cbz	r2, 8005f46 <_vfiprintf_r+0x86>
 8005f42:	2a25      	cmp	r2, #37	; 0x25
 8005f44:	d1f9      	bne.n	8005f3a <_vfiprintf_r+0x7a>
 8005f46:	ebba 0b04 	subs.w	fp, sl, r4
 8005f4a:	d00b      	beq.n	8005f64 <_vfiprintf_r+0xa4>
 8005f4c:	465b      	mov	r3, fp
 8005f4e:	4622      	mov	r2, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	4630      	mov	r0, r6
 8005f54:	f7ff ffa1 	bl	8005e9a <__sfputs_r>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	f000 80a9 	beq.w	80060b0 <_vfiprintf_r+0x1f0>
 8005f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f60:	445a      	add	r2, fp
 8005f62:	9209      	str	r2, [sp, #36]	; 0x24
 8005f64:	f89a 3000 	ldrb.w	r3, [sl]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80a1 	beq.w	80060b0 <_vfiprintf_r+0x1f0>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f04f 32ff 	mov.w	r2, #4294967295
 8005f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f78:	f10a 0a01 	add.w	sl, sl, #1
 8005f7c:	9304      	str	r3, [sp, #16]
 8005f7e:	9307      	str	r3, [sp, #28]
 8005f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f84:	931a      	str	r3, [sp, #104]	; 0x68
 8005f86:	4654      	mov	r4, sl
 8005f88:	2205      	movs	r2, #5
 8005f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f8e:	4854      	ldr	r0, [pc, #336]	; (80060e0 <_vfiprintf_r+0x220>)
 8005f90:	f7fa f956 	bl	8000240 <memchr>
 8005f94:	9a04      	ldr	r2, [sp, #16]
 8005f96:	b9d8      	cbnz	r0, 8005fd0 <_vfiprintf_r+0x110>
 8005f98:	06d1      	lsls	r1, r2, #27
 8005f9a:	bf44      	itt	mi
 8005f9c:	2320      	movmi	r3, #32
 8005f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fa2:	0713      	lsls	r3, r2, #28
 8005fa4:	bf44      	itt	mi
 8005fa6:	232b      	movmi	r3, #43	; 0x2b
 8005fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fac:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8005fb2:	d015      	beq.n	8005fe0 <_vfiprintf_r+0x120>
 8005fb4:	9a07      	ldr	r2, [sp, #28]
 8005fb6:	4654      	mov	r4, sl
 8005fb8:	2000      	movs	r0, #0
 8005fba:	f04f 0c0a 	mov.w	ip, #10
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fc4:	3b30      	subs	r3, #48	; 0x30
 8005fc6:	2b09      	cmp	r3, #9
 8005fc8:	d94d      	bls.n	8006066 <_vfiprintf_r+0x1a6>
 8005fca:	b1b0      	cbz	r0, 8005ffa <_vfiprintf_r+0x13a>
 8005fcc:	9207      	str	r2, [sp, #28]
 8005fce:	e014      	b.n	8005ffa <_vfiprintf_r+0x13a>
 8005fd0:	eba0 0308 	sub.w	r3, r0, r8
 8005fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	9304      	str	r3, [sp, #16]
 8005fdc:	46a2      	mov	sl, r4
 8005fde:	e7d2      	b.n	8005f86 <_vfiprintf_r+0xc6>
 8005fe0:	9b03      	ldr	r3, [sp, #12]
 8005fe2:	1d19      	adds	r1, r3, #4
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	9103      	str	r1, [sp, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	bfbb      	ittet	lt
 8005fec:	425b      	neglt	r3, r3
 8005fee:	f042 0202 	orrlt.w	r2, r2, #2
 8005ff2:	9307      	strge	r3, [sp, #28]
 8005ff4:	9307      	strlt	r3, [sp, #28]
 8005ff6:	bfb8      	it	lt
 8005ff8:	9204      	strlt	r2, [sp, #16]
 8005ffa:	7823      	ldrb	r3, [r4, #0]
 8005ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8005ffe:	d10c      	bne.n	800601a <_vfiprintf_r+0x15a>
 8006000:	7863      	ldrb	r3, [r4, #1]
 8006002:	2b2a      	cmp	r3, #42	; 0x2a
 8006004:	d134      	bne.n	8006070 <_vfiprintf_r+0x1b0>
 8006006:	9b03      	ldr	r3, [sp, #12]
 8006008:	1d1a      	adds	r2, r3, #4
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	9203      	str	r2, [sp, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	bfb8      	it	lt
 8006012:	f04f 33ff 	movlt.w	r3, #4294967295
 8006016:	3402      	adds	r4, #2
 8006018:	9305      	str	r3, [sp, #20]
 800601a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80060f0 <_vfiprintf_r+0x230>
 800601e:	7821      	ldrb	r1, [r4, #0]
 8006020:	2203      	movs	r2, #3
 8006022:	4650      	mov	r0, sl
 8006024:	f7fa f90c 	bl	8000240 <memchr>
 8006028:	b138      	cbz	r0, 800603a <_vfiprintf_r+0x17a>
 800602a:	9b04      	ldr	r3, [sp, #16]
 800602c:	eba0 000a 	sub.w	r0, r0, sl
 8006030:	2240      	movs	r2, #64	; 0x40
 8006032:	4082      	lsls	r2, r0
 8006034:	4313      	orrs	r3, r2
 8006036:	3401      	adds	r4, #1
 8006038:	9304      	str	r3, [sp, #16]
 800603a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800603e:	4829      	ldr	r0, [pc, #164]	; (80060e4 <_vfiprintf_r+0x224>)
 8006040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006044:	2206      	movs	r2, #6
 8006046:	f7fa f8fb 	bl	8000240 <memchr>
 800604a:	2800      	cmp	r0, #0
 800604c:	d03f      	beq.n	80060ce <_vfiprintf_r+0x20e>
 800604e:	4b26      	ldr	r3, [pc, #152]	; (80060e8 <_vfiprintf_r+0x228>)
 8006050:	bb1b      	cbnz	r3, 800609a <_vfiprintf_r+0x1da>
 8006052:	9b03      	ldr	r3, [sp, #12]
 8006054:	3307      	adds	r3, #7
 8006056:	f023 0307 	bic.w	r3, r3, #7
 800605a:	3308      	adds	r3, #8
 800605c:	9303      	str	r3, [sp, #12]
 800605e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006060:	443b      	add	r3, r7
 8006062:	9309      	str	r3, [sp, #36]	; 0x24
 8006064:	e768      	b.n	8005f38 <_vfiprintf_r+0x78>
 8006066:	fb0c 3202 	mla	r2, ip, r2, r3
 800606a:	460c      	mov	r4, r1
 800606c:	2001      	movs	r0, #1
 800606e:	e7a6      	b.n	8005fbe <_vfiprintf_r+0xfe>
 8006070:	2300      	movs	r3, #0
 8006072:	3401      	adds	r4, #1
 8006074:	9305      	str	r3, [sp, #20]
 8006076:	4619      	mov	r1, r3
 8006078:	f04f 0c0a 	mov.w	ip, #10
 800607c:	4620      	mov	r0, r4
 800607e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006082:	3a30      	subs	r2, #48	; 0x30
 8006084:	2a09      	cmp	r2, #9
 8006086:	d903      	bls.n	8006090 <_vfiprintf_r+0x1d0>
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0c6      	beq.n	800601a <_vfiprintf_r+0x15a>
 800608c:	9105      	str	r1, [sp, #20]
 800608e:	e7c4      	b.n	800601a <_vfiprintf_r+0x15a>
 8006090:	fb0c 2101 	mla	r1, ip, r1, r2
 8006094:	4604      	mov	r4, r0
 8006096:	2301      	movs	r3, #1
 8006098:	e7f0      	b.n	800607c <_vfiprintf_r+0x1bc>
 800609a:	ab03      	add	r3, sp, #12
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	462a      	mov	r2, r5
 80060a0:	4b12      	ldr	r3, [pc, #72]	; (80060ec <_vfiprintf_r+0x22c>)
 80060a2:	a904      	add	r1, sp, #16
 80060a4:	4630      	mov	r0, r6
 80060a6:	f3af 8000 	nop.w
 80060aa:	4607      	mov	r7, r0
 80060ac:	1c78      	adds	r0, r7, #1
 80060ae:	d1d6      	bne.n	800605e <_vfiprintf_r+0x19e>
 80060b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060b2:	07d9      	lsls	r1, r3, #31
 80060b4:	d405      	bmi.n	80060c2 <_vfiprintf_r+0x202>
 80060b6:	89ab      	ldrh	r3, [r5, #12]
 80060b8:	059a      	lsls	r2, r3, #22
 80060ba:	d402      	bmi.n	80060c2 <_vfiprintf_r+0x202>
 80060bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060be:	f7ff fe87 	bl	8005dd0 <__retarget_lock_release_recursive>
 80060c2:	89ab      	ldrh	r3, [r5, #12]
 80060c4:	065b      	lsls	r3, r3, #25
 80060c6:	f53f af1d 	bmi.w	8005f04 <_vfiprintf_r+0x44>
 80060ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060cc:	e71c      	b.n	8005f08 <_vfiprintf_r+0x48>
 80060ce:	ab03      	add	r3, sp, #12
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	462a      	mov	r2, r5
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <_vfiprintf_r+0x22c>)
 80060d6:	a904      	add	r1, sp, #16
 80060d8:	4630      	mov	r0, r6
 80060da:	f000 f879 	bl	80061d0 <_printf_i>
 80060de:	e7e4      	b.n	80060aa <_vfiprintf_r+0x1ea>
 80060e0:	080066f0 	.word	0x080066f0
 80060e4:	080066fa 	.word	0x080066fa
 80060e8:	00000000 	.word	0x00000000
 80060ec:	08005e9b 	.word	0x08005e9b
 80060f0:	080066f6 	.word	0x080066f6

080060f4 <_printf_common>:
 80060f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f8:	4616      	mov	r6, r2
 80060fa:	4699      	mov	r9, r3
 80060fc:	688a      	ldr	r2, [r1, #8]
 80060fe:	690b      	ldr	r3, [r1, #16]
 8006100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006104:	4293      	cmp	r3, r2
 8006106:	bfb8      	it	lt
 8006108:	4613      	movlt	r3, r2
 800610a:	6033      	str	r3, [r6, #0]
 800610c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006110:	4607      	mov	r7, r0
 8006112:	460c      	mov	r4, r1
 8006114:	b10a      	cbz	r2, 800611a <_printf_common+0x26>
 8006116:	3301      	adds	r3, #1
 8006118:	6033      	str	r3, [r6, #0]
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	0699      	lsls	r1, r3, #26
 800611e:	bf42      	ittt	mi
 8006120:	6833      	ldrmi	r3, [r6, #0]
 8006122:	3302      	addmi	r3, #2
 8006124:	6033      	strmi	r3, [r6, #0]
 8006126:	6825      	ldr	r5, [r4, #0]
 8006128:	f015 0506 	ands.w	r5, r5, #6
 800612c:	d106      	bne.n	800613c <_printf_common+0x48>
 800612e:	f104 0a19 	add.w	sl, r4, #25
 8006132:	68e3      	ldr	r3, [r4, #12]
 8006134:	6832      	ldr	r2, [r6, #0]
 8006136:	1a9b      	subs	r3, r3, r2
 8006138:	42ab      	cmp	r3, r5
 800613a:	dc26      	bgt.n	800618a <_printf_common+0x96>
 800613c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006140:	1e13      	subs	r3, r2, #0
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	bf18      	it	ne
 8006146:	2301      	movne	r3, #1
 8006148:	0692      	lsls	r2, r2, #26
 800614a:	d42b      	bmi.n	80061a4 <_printf_common+0xb0>
 800614c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006150:	4649      	mov	r1, r9
 8006152:	4638      	mov	r0, r7
 8006154:	47c0      	blx	r8
 8006156:	3001      	adds	r0, #1
 8006158:	d01e      	beq.n	8006198 <_printf_common+0xa4>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	6922      	ldr	r2, [r4, #16]
 800615e:	f003 0306 	and.w	r3, r3, #6
 8006162:	2b04      	cmp	r3, #4
 8006164:	bf02      	ittt	eq
 8006166:	68e5      	ldreq	r5, [r4, #12]
 8006168:	6833      	ldreq	r3, [r6, #0]
 800616a:	1aed      	subeq	r5, r5, r3
 800616c:	68a3      	ldr	r3, [r4, #8]
 800616e:	bf0c      	ite	eq
 8006170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006174:	2500      	movne	r5, #0
 8006176:	4293      	cmp	r3, r2
 8006178:	bfc4      	itt	gt
 800617a:	1a9b      	subgt	r3, r3, r2
 800617c:	18ed      	addgt	r5, r5, r3
 800617e:	2600      	movs	r6, #0
 8006180:	341a      	adds	r4, #26
 8006182:	42b5      	cmp	r5, r6
 8006184:	d11a      	bne.n	80061bc <_printf_common+0xc8>
 8006186:	2000      	movs	r0, #0
 8006188:	e008      	b.n	800619c <_printf_common+0xa8>
 800618a:	2301      	movs	r3, #1
 800618c:	4652      	mov	r2, sl
 800618e:	4649      	mov	r1, r9
 8006190:	4638      	mov	r0, r7
 8006192:	47c0      	blx	r8
 8006194:	3001      	adds	r0, #1
 8006196:	d103      	bne.n	80061a0 <_printf_common+0xac>
 8006198:	f04f 30ff 	mov.w	r0, #4294967295
 800619c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a0:	3501      	adds	r5, #1
 80061a2:	e7c6      	b.n	8006132 <_printf_common+0x3e>
 80061a4:	18e1      	adds	r1, r4, r3
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	2030      	movs	r0, #48	; 0x30
 80061aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061ae:	4422      	add	r2, r4
 80061b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061b8:	3302      	adds	r3, #2
 80061ba:	e7c7      	b.n	800614c <_printf_common+0x58>
 80061bc:	2301      	movs	r3, #1
 80061be:	4622      	mov	r2, r4
 80061c0:	4649      	mov	r1, r9
 80061c2:	4638      	mov	r0, r7
 80061c4:	47c0      	blx	r8
 80061c6:	3001      	adds	r0, #1
 80061c8:	d0e6      	beq.n	8006198 <_printf_common+0xa4>
 80061ca:	3601      	adds	r6, #1
 80061cc:	e7d9      	b.n	8006182 <_printf_common+0x8e>
	...

080061d0 <_printf_i>:
 80061d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	7e0f      	ldrb	r7, [r1, #24]
 80061d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061d8:	2f78      	cmp	r7, #120	; 0x78
 80061da:	4691      	mov	r9, r2
 80061dc:	4680      	mov	r8, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	469a      	mov	sl, r3
 80061e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061e6:	d807      	bhi.n	80061f8 <_printf_i+0x28>
 80061e8:	2f62      	cmp	r7, #98	; 0x62
 80061ea:	d80a      	bhi.n	8006202 <_printf_i+0x32>
 80061ec:	2f00      	cmp	r7, #0
 80061ee:	f000 80d4 	beq.w	800639a <_printf_i+0x1ca>
 80061f2:	2f58      	cmp	r7, #88	; 0x58
 80061f4:	f000 80c0 	beq.w	8006378 <_printf_i+0x1a8>
 80061f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006200:	e03a      	b.n	8006278 <_printf_i+0xa8>
 8006202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006206:	2b15      	cmp	r3, #21
 8006208:	d8f6      	bhi.n	80061f8 <_printf_i+0x28>
 800620a:	a101      	add	r1, pc, #4	; (adr r1, 8006210 <_printf_i+0x40>)
 800620c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006210:	08006269 	.word	0x08006269
 8006214:	0800627d 	.word	0x0800627d
 8006218:	080061f9 	.word	0x080061f9
 800621c:	080061f9 	.word	0x080061f9
 8006220:	080061f9 	.word	0x080061f9
 8006224:	080061f9 	.word	0x080061f9
 8006228:	0800627d 	.word	0x0800627d
 800622c:	080061f9 	.word	0x080061f9
 8006230:	080061f9 	.word	0x080061f9
 8006234:	080061f9 	.word	0x080061f9
 8006238:	080061f9 	.word	0x080061f9
 800623c:	08006381 	.word	0x08006381
 8006240:	080062a9 	.word	0x080062a9
 8006244:	0800633b 	.word	0x0800633b
 8006248:	080061f9 	.word	0x080061f9
 800624c:	080061f9 	.word	0x080061f9
 8006250:	080063a3 	.word	0x080063a3
 8006254:	080061f9 	.word	0x080061f9
 8006258:	080062a9 	.word	0x080062a9
 800625c:	080061f9 	.word	0x080061f9
 8006260:	080061f9 	.word	0x080061f9
 8006264:	08006343 	.word	0x08006343
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	1d1a      	adds	r2, r3, #4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	602a      	str	r2, [r5, #0]
 8006270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006278:	2301      	movs	r3, #1
 800627a:	e09f      	b.n	80063bc <_printf_i+0x1ec>
 800627c:	6820      	ldr	r0, [r4, #0]
 800627e:	682b      	ldr	r3, [r5, #0]
 8006280:	0607      	lsls	r7, r0, #24
 8006282:	f103 0104 	add.w	r1, r3, #4
 8006286:	6029      	str	r1, [r5, #0]
 8006288:	d501      	bpl.n	800628e <_printf_i+0xbe>
 800628a:	681e      	ldr	r6, [r3, #0]
 800628c:	e003      	b.n	8006296 <_printf_i+0xc6>
 800628e:	0646      	lsls	r6, r0, #25
 8006290:	d5fb      	bpl.n	800628a <_printf_i+0xba>
 8006292:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006296:	2e00      	cmp	r6, #0
 8006298:	da03      	bge.n	80062a2 <_printf_i+0xd2>
 800629a:	232d      	movs	r3, #45	; 0x2d
 800629c:	4276      	negs	r6, r6
 800629e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a2:	485a      	ldr	r0, [pc, #360]	; (800640c <_printf_i+0x23c>)
 80062a4:	230a      	movs	r3, #10
 80062a6:	e012      	b.n	80062ce <_printf_i+0xfe>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	6820      	ldr	r0, [r4, #0]
 80062ac:	1d19      	adds	r1, r3, #4
 80062ae:	6029      	str	r1, [r5, #0]
 80062b0:	0605      	lsls	r5, r0, #24
 80062b2:	d501      	bpl.n	80062b8 <_printf_i+0xe8>
 80062b4:	681e      	ldr	r6, [r3, #0]
 80062b6:	e002      	b.n	80062be <_printf_i+0xee>
 80062b8:	0641      	lsls	r1, r0, #25
 80062ba:	d5fb      	bpl.n	80062b4 <_printf_i+0xe4>
 80062bc:	881e      	ldrh	r6, [r3, #0]
 80062be:	4853      	ldr	r0, [pc, #332]	; (800640c <_printf_i+0x23c>)
 80062c0:	2f6f      	cmp	r7, #111	; 0x6f
 80062c2:	bf0c      	ite	eq
 80062c4:	2308      	moveq	r3, #8
 80062c6:	230a      	movne	r3, #10
 80062c8:	2100      	movs	r1, #0
 80062ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062ce:	6865      	ldr	r5, [r4, #4]
 80062d0:	60a5      	str	r5, [r4, #8]
 80062d2:	2d00      	cmp	r5, #0
 80062d4:	bfa2      	ittt	ge
 80062d6:	6821      	ldrge	r1, [r4, #0]
 80062d8:	f021 0104 	bicge.w	r1, r1, #4
 80062dc:	6021      	strge	r1, [r4, #0]
 80062de:	b90e      	cbnz	r6, 80062e4 <_printf_i+0x114>
 80062e0:	2d00      	cmp	r5, #0
 80062e2:	d04b      	beq.n	800637c <_printf_i+0x1ac>
 80062e4:	4615      	mov	r5, r2
 80062e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80062ea:	fb03 6711 	mls	r7, r3, r1, r6
 80062ee:	5dc7      	ldrb	r7, [r0, r7]
 80062f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062f4:	4637      	mov	r7, r6
 80062f6:	42bb      	cmp	r3, r7
 80062f8:	460e      	mov	r6, r1
 80062fa:	d9f4      	bls.n	80062e6 <_printf_i+0x116>
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d10b      	bne.n	8006318 <_printf_i+0x148>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	07de      	lsls	r6, r3, #31
 8006304:	d508      	bpl.n	8006318 <_printf_i+0x148>
 8006306:	6923      	ldr	r3, [r4, #16]
 8006308:	6861      	ldr	r1, [r4, #4]
 800630a:	4299      	cmp	r1, r3
 800630c:	bfde      	ittt	le
 800630e:	2330      	movle	r3, #48	; 0x30
 8006310:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006314:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006318:	1b52      	subs	r2, r2, r5
 800631a:	6122      	str	r2, [r4, #16]
 800631c:	f8cd a000 	str.w	sl, [sp]
 8006320:	464b      	mov	r3, r9
 8006322:	aa03      	add	r2, sp, #12
 8006324:	4621      	mov	r1, r4
 8006326:	4640      	mov	r0, r8
 8006328:	f7ff fee4 	bl	80060f4 <_printf_common>
 800632c:	3001      	adds	r0, #1
 800632e:	d14a      	bne.n	80063c6 <_printf_i+0x1f6>
 8006330:	f04f 30ff 	mov.w	r0, #4294967295
 8006334:	b004      	add	sp, #16
 8006336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	f043 0320 	orr.w	r3, r3, #32
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	4833      	ldr	r0, [pc, #204]	; (8006410 <_printf_i+0x240>)
 8006344:	2778      	movs	r7, #120	; 0x78
 8006346:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	6829      	ldr	r1, [r5, #0]
 800634e:	061f      	lsls	r7, r3, #24
 8006350:	f851 6b04 	ldr.w	r6, [r1], #4
 8006354:	d402      	bmi.n	800635c <_printf_i+0x18c>
 8006356:	065f      	lsls	r7, r3, #25
 8006358:	bf48      	it	mi
 800635a:	b2b6      	uxthmi	r6, r6
 800635c:	07df      	lsls	r7, r3, #31
 800635e:	bf48      	it	mi
 8006360:	f043 0320 	orrmi.w	r3, r3, #32
 8006364:	6029      	str	r1, [r5, #0]
 8006366:	bf48      	it	mi
 8006368:	6023      	strmi	r3, [r4, #0]
 800636a:	b91e      	cbnz	r6, 8006374 <_printf_i+0x1a4>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	f023 0320 	bic.w	r3, r3, #32
 8006372:	6023      	str	r3, [r4, #0]
 8006374:	2310      	movs	r3, #16
 8006376:	e7a7      	b.n	80062c8 <_printf_i+0xf8>
 8006378:	4824      	ldr	r0, [pc, #144]	; (800640c <_printf_i+0x23c>)
 800637a:	e7e4      	b.n	8006346 <_printf_i+0x176>
 800637c:	4615      	mov	r5, r2
 800637e:	e7bd      	b.n	80062fc <_printf_i+0x12c>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	6826      	ldr	r6, [r4, #0]
 8006384:	6961      	ldr	r1, [r4, #20]
 8006386:	1d18      	adds	r0, r3, #4
 8006388:	6028      	str	r0, [r5, #0]
 800638a:	0635      	lsls	r5, r6, #24
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	d501      	bpl.n	8006394 <_printf_i+0x1c4>
 8006390:	6019      	str	r1, [r3, #0]
 8006392:	e002      	b.n	800639a <_printf_i+0x1ca>
 8006394:	0670      	lsls	r0, r6, #25
 8006396:	d5fb      	bpl.n	8006390 <_printf_i+0x1c0>
 8006398:	8019      	strh	r1, [r3, #0]
 800639a:	2300      	movs	r3, #0
 800639c:	6123      	str	r3, [r4, #16]
 800639e:	4615      	mov	r5, r2
 80063a0:	e7bc      	b.n	800631c <_printf_i+0x14c>
 80063a2:	682b      	ldr	r3, [r5, #0]
 80063a4:	1d1a      	adds	r2, r3, #4
 80063a6:	602a      	str	r2, [r5, #0]
 80063a8:	681d      	ldr	r5, [r3, #0]
 80063aa:	6862      	ldr	r2, [r4, #4]
 80063ac:	2100      	movs	r1, #0
 80063ae:	4628      	mov	r0, r5
 80063b0:	f7f9 ff46 	bl	8000240 <memchr>
 80063b4:	b108      	cbz	r0, 80063ba <_printf_i+0x1ea>
 80063b6:	1b40      	subs	r0, r0, r5
 80063b8:	6060      	str	r0, [r4, #4]
 80063ba:	6863      	ldr	r3, [r4, #4]
 80063bc:	6123      	str	r3, [r4, #16]
 80063be:	2300      	movs	r3, #0
 80063c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c4:	e7aa      	b.n	800631c <_printf_i+0x14c>
 80063c6:	6923      	ldr	r3, [r4, #16]
 80063c8:	462a      	mov	r2, r5
 80063ca:	4649      	mov	r1, r9
 80063cc:	4640      	mov	r0, r8
 80063ce:	47d0      	blx	sl
 80063d0:	3001      	adds	r0, #1
 80063d2:	d0ad      	beq.n	8006330 <_printf_i+0x160>
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	079b      	lsls	r3, r3, #30
 80063d8:	d413      	bmi.n	8006402 <_printf_i+0x232>
 80063da:	68e0      	ldr	r0, [r4, #12]
 80063dc:	9b03      	ldr	r3, [sp, #12]
 80063de:	4298      	cmp	r0, r3
 80063e0:	bfb8      	it	lt
 80063e2:	4618      	movlt	r0, r3
 80063e4:	e7a6      	b.n	8006334 <_printf_i+0x164>
 80063e6:	2301      	movs	r3, #1
 80063e8:	4632      	mov	r2, r6
 80063ea:	4649      	mov	r1, r9
 80063ec:	4640      	mov	r0, r8
 80063ee:	47d0      	blx	sl
 80063f0:	3001      	adds	r0, #1
 80063f2:	d09d      	beq.n	8006330 <_printf_i+0x160>
 80063f4:	3501      	adds	r5, #1
 80063f6:	68e3      	ldr	r3, [r4, #12]
 80063f8:	9903      	ldr	r1, [sp, #12]
 80063fa:	1a5b      	subs	r3, r3, r1
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	dcf2      	bgt.n	80063e6 <_printf_i+0x216>
 8006400:	e7eb      	b.n	80063da <_printf_i+0x20a>
 8006402:	2500      	movs	r5, #0
 8006404:	f104 0619 	add.w	r6, r4, #25
 8006408:	e7f5      	b.n	80063f6 <_printf_i+0x226>
 800640a:	bf00      	nop
 800640c:	08006701 	.word	0x08006701
 8006410:	08006712 	.word	0x08006712

08006414 <__sflush_r>:
 8006414:	898a      	ldrh	r2, [r1, #12]
 8006416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800641a:	4605      	mov	r5, r0
 800641c:	0710      	lsls	r0, r2, #28
 800641e:	460c      	mov	r4, r1
 8006420:	d458      	bmi.n	80064d4 <__sflush_r+0xc0>
 8006422:	684b      	ldr	r3, [r1, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	dc05      	bgt.n	8006434 <__sflush_r+0x20>
 8006428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800642a:	2b00      	cmp	r3, #0
 800642c:	dc02      	bgt.n	8006434 <__sflush_r+0x20>
 800642e:	2000      	movs	r0, #0
 8006430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006436:	2e00      	cmp	r6, #0
 8006438:	d0f9      	beq.n	800642e <__sflush_r+0x1a>
 800643a:	2300      	movs	r3, #0
 800643c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006440:	682f      	ldr	r7, [r5, #0]
 8006442:	6a21      	ldr	r1, [r4, #32]
 8006444:	602b      	str	r3, [r5, #0]
 8006446:	d032      	beq.n	80064ae <__sflush_r+0x9a>
 8006448:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	075a      	lsls	r2, r3, #29
 800644e:	d505      	bpl.n	800645c <__sflush_r+0x48>
 8006450:	6863      	ldr	r3, [r4, #4]
 8006452:	1ac0      	subs	r0, r0, r3
 8006454:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006456:	b10b      	cbz	r3, 800645c <__sflush_r+0x48>
 8006458:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800645a:	1ac0      	subs	r0, r0, r3
 800645c:	2300      	movs	r3, #0
 800645e:	4602      	mov	r2, r0
 8006460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006462:	6a21      	ldr	r1, [r4, #32]
 8006464:	4628      	mov	r0, r5
 8006466:	47b0      	blx	r6
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	d106      	bne.n	800647c <__sflush_r+0x68>
 800646e:	6829      	ldr	r1, [r5, #0]
 8006470:	291d      	cmp	r1, #29
 8006472:	d82b      	bhi.n	80064cc <__sflush_r+0xb8>
 8006474:	4a29      	ldr	r2, [pc, #164]	; (800651c <__sflush_r+0x108>)
 8006476:	410a      	asrs	r2, r1
 8006478:	07d6      	lsls	r6, r2, #31
 800647a:	d427      	bmi.n	80064cc <__sflush_r+0xb8>
 800647c:	2200      	movs	r2, #0
 800647e:	6062      	str	r2, [r4, #4]
 8006480:	04d9      	lsls	r1, r3, #19
 8006482:	6922      	ldr	r2, [r4, #16]
 8006484:	6022      	str	r2, [r4, #0]
 8006486:	d504      	bpl.n	8006492 <__sflush_r+0x7e>
 8006488:	1c42      	adds	r2, r0, #1
 800648a:	d101      	bne.n	8006490 <__sflush_r+0x7c>
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	b903      	cbnz	r3, 8006492 <__sflush_r+0x7e>
 8006490:	6560      	str	r0, [r4, #84]	; 0x54
 8006492:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006494:	602f      	str	r7, [r5, #0]
 8006496:	2900      	cmp	r1, #0
 8006498:	d0c9      	beq.n	800642e <__sflush_r+0x1a>
 800649a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800649e:	4299      	cmp	r1, r3
 80064a0:	d002      	beq.n	80064a8 <__sflush_r+0x94>
 80064a2:	4628      	mov	r0, r5
 80064a4:	f7ff fc96 	bl	8005dd4 <_free_r>
 80064a8:	2000      	movs	r0, #0
 80064aa:	6360      	str	r0, [r4, #52]	; 0x34
 80064ac:	e7c0      	b.n	8006430 <__sflush_r+0x1c>
 80064ae:	2301      	movs	r3, #1
 80064b0:	4628      	mov	r0, r5
 80064b2:	47b0      	blx	r6
 80064b4:	1c41      	adds	r1, r0, #1
 80064b6:	d1c8      	bne.n	800644a <__sflush_r+0x36>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0c5      	beq.n	800644a <__sflush_r+0x36>
 80064be:	2b1d      	cmp	r3, #29
 80064c0:	d001      	beq.n	80064c6 <__sflush_r+0xb2>
 80064c2:	2b16      	cmp	r3, #22
 80064c4:	d101      	bne.n	80064ca <__sflush_r+0xb6>
 80064c6:	602f      	str	r7, [r5, #0]
 80064c8:	e7b1      	b.n	800642e <__sflush_r+0x1a>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d0:	81a3      	strh	r3, [r4, #12]
 80064d2:	e7ad      	b.n	8006430 <__sflush_r+0x1c>
 80064d4:	690f      	ldr	r7, [r1, #16]
 80064d6:	2f00      	cmp	r7, #0
 80064d8:	d0a9      	beq.n	800642e <__sflush_r+0x1a>
 80064da:	0793      	lsls	r3, r2, #30
 80064dc:	680e      	ldr	r6, [r1, #0]
 80064de:	bf08      	it	eq
 80064e0:	694b      	ldreq	r3, [r1, #20]
 80064e2:	600f      	str	r7, [r1, #0]
 80064e4:	bf18      	it	ne
 80064e6:	2300      	movne	r3, #0
 80064e8:	eba6 0807 	sub.w	r8, r6, r7
 80064ec:	608b      	str	r3, [r1, #8]
 80064ee:	f1b8 0f00 	cmp.w	r8, #0
 80064f2:	dd9c      	ble.n	800642e <__sflush_r+0x1a>
 80064f4:	6a21      	ldr	r1, [r4, #32]
 80064f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064f8:	4643      	mov	r3, r8
 80064fa:	463a      	mov	r2, r7
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b0      	blx	r6
 8006500:	2800      	cmp	r0, #0
 8006502:	dc06      	bgt.n	8006512 <__sflush_r+0xfe>
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	e78e      	b.n	8006430 <__sflush_r+0x1c>
 8006512:	4407      	add	r7, r0
 8006514:	eba8 0800 	sub.w	r8, r8, r0
 8006518:	e7e9      	b.n	80064ee <__sflush_r+0xda>
 800651a:	bf00      	nop
 800651c:	dfbffffe 	.word	0xdfbffffe

08006520 <_fflush_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	690b      	ldr	r3, [r1, #16]
 8006524:	4605      	mov	r5, r0
 8006526:	460c      	mov	r4, r1
 8006528:	b913      	cbnz	r3, 8006530 <_fflush_r+0x10>
 800652a:	2500      	movs	r5, #0
 800652c:	4628      	mov	r0, r5
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	b118      	cbz	r0, 800653a <_fflush_r+0x1a>
 8006532:	6a03      	ldr	r3, [r0, #32]
 8006534:	b90b      	cbnz	r3, 800653a <_fflush_r+0x1a>
 8006536:	f7ff f997 	bl	8005868 <__sinit>
 800653a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0f3      	beq.n	800652a <_fflush_r+0xa>
 8006542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006544:	07d0      	lsls	r0, r2, #31
 8006546:	d404      	bmi.n	8006552 <_fflush_r+0x32>
 8006548:	0599      	lsls	r1, r3, #22
 800654a:	d402      	bmi.n	8006552 <_fflush_r+0x32>
 800654c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800654e:	f7ff fc3e 	bl	8005dce <__retarget_lock_acquire_recursive>
 8006552:	4628      	mov	r0, r5
 8006554:	4621      	mov	r1, r4
 8006556:	f7ff ff5d 	bl	8006414 <__sflush_r>
 800655a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800655c:	07da      	lsls	r2, r3, #31
 800655e:	4605      	mov	r5, r0
 8006560:	d4e4      	bmi.n	800652c <_fflush_r+0xc>
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	059b      	lsls	r3, r3, #22
 8006566:	d4e1      	bmi.n	800652c <_fflush_r+0xc>
 8006568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800656a:	f7ff fc31 	bl	8005dd0 <__retarget_lock_release_recursive>
 800656e:	e7dd      	b.n	800652c <_fflush_r+0xc>

08006570 <__swhatbuf_r>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	460c      	mov	r4, r1
 8006574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006578:	2900      	cmp	r1, #0
 800657a:	b096      	sub	sp, #88	; 0x58
 800657c:	4615      	mov	r5, r2
 800657e:	461e      	mov	r6, r3
 8006580:	da0d      	bge.n	800659e <__swhatbuf_r+0x2e>
 8006582:	89a3      	ldrh	r3, [r4, #12]
 8006584:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006588:	f04f 0100 	mov.w	r1, #0
 800658c:	bf0c      	ite	eq
 800658e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006592:	2340      	movne	r3, #64	; 0x40
 8006594:	2000      	movs	r0, #0
 8006596:	6031      	str	r1, [r6, #0]
 8006598:	602b      	str	r3, [r5, #0]
 800659a:	b016      	add	sp, #88	; 0x58
 800659c:	bd70      	pop	{r4, r5, r6, pc}
 800659e:	466a      	mov	r2, sp
 80065a0:	f000 f848 	bl	8006634 <_fstat_r>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	dbec      	blt.n	8006582 <__swhatbuf_r+0x12>
 80065a8:	9901      	ldr	r1, [sp, #4]
 80065aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80065ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80065b2:	4259      	negs	r1, r3
 80065b4:	4159      	adcs	r1, r3
 80065b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065ba:	e7eb      	b.n	8006594 <__swhatbuf_r+0x24>

080065bc <__smakebuf_r>:
 80065bc:	898b      	ldrh	r3, [r1, #12]
 80065be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065c0:	079d      	lsls	r5, r3, #30
 80065c2:	4606      	mov	r6, r0
 80065c4:	460c      	mov	r4, r1
 80065c6:	d507      	bpl.n	80065d8 <__smakebuf_r+0x1c>
 80065c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	6123      	str	r3, [r4, #16]
 80065d0:	2301      	movs	r3, #1
 80065d2:	6163      	str	r3, [r4, #20]
 80065d4:	b002      	add	sp, #8
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
 80065d8:	ab01      	add	r3, sp, #4
 80065da:	466a      	mov	r2, sp
 80065dc:	f7ff ffc8 	bl	8006570 <__swhatbuf_r>
 80065e0:	9900      	ldr	r1, [sp, #0]
 80065e2:	4605      	mov	r5, r0
 80065e4:	4630      	mov	r0, r6
 80065e6:	f7ff f827 	bl	8005638 <_malloc_r>
 80065ea:	b948      	cbnz	r0, 8006600 <__smakebuf_r+0x44>
 80065ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f0:	059a      	lsls	r2, r3, #22
 80065f2:	d4ef      	bmi.n	80065d4 <__smakebuf_r+0x18>
 80065f4:	f023 0303 	bic.w	r3, r3, #3
 80065f8:	f043 0302 	orr.w	r3, r3, #2
 80065fc:	81a3      	strh	r3, [r4, #12]
 80065fe:	e7e3      	b.n	80065c8 <__smakebuf_r+0xc>
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	6020      	str	r0, [r4, #0]
 8006604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006608:	81a3      	strh	r3, [r4, #12]
 800660a:	9b00      	ldr	r3, [sp, #0]
 800660c:	6163      	str	r3, [r4, #20]
 800660e:	9b01      	ldr	r3, [sp, #4]
 8006610:	6120      	str	r0, [r4, #16]
 8006612:	b15b      	cbz	r3, 800662c <__smakebuf_r+0x70>
 8006614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006618:	4630      	mov	r0, r6
 800661a:	f000 f81d 	bl	8006658 <_isatty_r>
 800661e:	b128      	cbz	r0, 800662c <__smakebuf_r+0x70>
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	f023 0303 	bic.w	r3, r3, #3
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	81a3      	strh	r3, [r4, #12]
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	431d      	orrs	r5, r3
 8006630:	81a5      	strh	r5, [r4, #12]
 8006632:	e7cf      	b.n	80065d4 <__smakebuf_r+0x18>

08006634 <_fstat_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4d07      	ldr	r5, [pc, #28]	; (8006654 <_fstat_r+0x20>)
 8006638:	2300      	movs	r3, #0
 800663a:	4604      	mov	r4, r0
 800663c:	4608      	mov	r0, r1
 800663e:	4611      	mov	r1, r2
 8006640:	602b      	str	r3, [r5, #0]
 8006642:	f7fa fb95 	bl	8000d70 <_fstat>
 8006646:	1c43      	adds	r3, r0, #1
 8006648:	d102      	bne.n	8006650 <_fstat_r+0x1c>
 800664a:	682b      	ldr	r3, [r5, #0]
 800664c:	b103      	cbz	r3, 8006650 <_fstat_r+0x1c>
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	bd38      	pop	{r3, r4, r5, pc}
 8006652:	bf00      	nop
 8006654:	200011fc 	.word	0x200011fc

08006658 <_isatty_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	4d06      	ldr	r5, [pc, #24]	; (8006674 <_isatty_r+0x1c>)
 800665c:	2300      	movs	r3, #0
 800665e:	4604      	mov	r4, r0
 8006660:	4608      	mov	r0, r1
 8006662:	602b      	str	r3, [r5, #0]
 8006664:	f7fa faf2 	bl	8000c4c <_isatty>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	d102      	bne.n	8006672 <_isatty_r+0x1a>
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	b103      	cbz	r3, 8006672 <_isatty_r+0x1a>
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	bd38      	pop	{r3, r4, r5, pc}
 8006674:	200011fc 	.word	0x200011fc

08006678 <_init>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	bf00      	nop
 800667c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667e:	bc08      	pop	{r3}
 8006680:	469e      	mov	lr, r3
 8006682:	4770      	bx	lr

08006684 <_fini>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	bf00      	nop
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr

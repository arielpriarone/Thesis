
Novelty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e78c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000081f8  0800e990  0800e990  0001e990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016b88  08016b88  00030314  2**0
                  CONTENTS
  4 .ARM          00000008  08016b88  08016b88  00026b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016b90  08016b90  00030314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016b90  08016b90  00026b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016b94  08016b94  00026b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08016b98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  08016d6c  000301d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08016e0c  00030274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002fbc  20000314  08016eac  00030314  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200032d0  08016eac  000332d0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030342  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002173f  00000000  00000000  00030385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003a42  00000000  00000000  00051ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001910  00000000  00000000  00055508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000013a9  00000000  00000000  00056e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002cc21  00000000  00000000  000581c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000251de  00000000  00000000  00084de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00113819  00000000  00000000  000a9fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008294  00000000  00000000  001bd7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  001c5a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e974 	.word	0x0800e974

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	0800e974 	.word	0x0800e974

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a8 	b.w	80009f0 <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9e08      	ldr	r6, [sp, #32]
 800072e:	460d      	mov	r5, r1
 8000730:	4604      	mov	r4, r0
 8000732:	460f      	mov	r7, r1
 8000734:	2b00      	cmp	r3, #0
 8000736:	d14a      	bne.n	80007ce <__udivmoddi4+0xa6>
 8000738:	428a      	cmp	r2, r1
 800073a:	4694      	mov	ip, r2
 800073c:	d965      	bls.n	800080a <__udivmoddi4+0xe2>
 800073e:	fab2 f382 	clz	r3, r2
 8000742:	b143      	cbz	r3, 8000756 <__udivmoddi4+0x2e>
 8000744:	fa02 fc03 	lsl.w	ip, r2, r3
 8000748:	f1c3 0220 	rsb	r2, r3, #32
 800074c:	409f      	lsls	r7, r3
 800074e:	fa20 f202 	lsr.w	r2, r0, r2
 8000752:	4317      	orrs	r7, r2
 8000754:	409c      	lsls	r4, r3
 8000756:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800075a:	fa1f f58c 	uxth.w	r5, ip
 800075e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000762:	0c22      	lsrs	r2, r4, #16
 8000764:	fb0e 7711 	mls	r7, lr, r1, r7
 8000768:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800076c:	fb01 f005 	mul.w	r0, r1, r5
 8000770:	4290      	cmp	r0, r2
 8000772:	d90a      	bls.n	800078a <__udivmoddi4+0x62>
 8000774:	eb1c 0202 	adds.w	r2, ip, r2
 8000778:	f101 37ff 	add.w	r7, r1, #4294967295
 800077c:	f080 811c 	bcs.w	80009b8 <__udivmoddi4+0x290>
 8000780:	4290      	cmp	r0, r2
 8000782:	f240 8119 	bls.w	80009b8 <__udivmoddi4+0x290>
 8000786:	3902      	subs	r1, #2
 8000788:	4462      	add	r2, ip
 800078a:	1a12      	subs	r2, r2, r0
 800078c:	b2a4      	uxth	r4, r4
 800078e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000792:	fb0e 2210 	mls	r2, lr, r0, r2
 8000796:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800079a:	fb00 f505 	mul.w	r5, r0, r5
 800079e:	42a5      	cmp	r5, r4
 80007a0:	d90a      	bls.n	80007b8 <__udivmoddi4+0x90>
 80007a2:	eb1c 0404 	adds.w	r4, ip, r4
 80007a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007aa:	f080 8107 	bcs.w	80009bc <__udivmoddi4+0x294>
 80007ae:	42a5      	cmp	r5, r4
 80007b0:	f240 8104 	bls.w	80009bc <__udivmoddi4+0x294>
 80007b4:	4464      	add	r4, ip
 80007b6:	3802      	subs	r0, #2
 80007b8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007bc:	1b64      	subs	r4, r4, r5
 80007be:	2100      	movs	r1, #0
 80007c0:	b11e      	cbz	r6, 80007ca <__udivmoddi4+0xa2>
 80007c2:	40dc      	lsrs	r4, r3
 80007c4:	2300      	movs	r3, #0
 80007c6:	e9c6 4300 	strd	r4, r3, [r6]
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d908      	bls.n	80007e4 <__udivmoddi4+0xbc>
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	f000 80ed 	beq.w	80009b2 <__udivmoddi4+0x28a>
 80007d8:	2100      	movs	r1, #0
 80007da:	e9c6 0500 	strd	r0, r5, [r6]
 80007de:	4608      	mov	r0, r1
 80007e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e4:	fab3 f183 	clz	r1, r3
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d149      	bne.n	8000880 <__udivmoddi4+0x158>
 80007ec:	42ab      	cmp	r3, r5
 80007ee:	d302      	bcc.n	80007f6 <__udivmoddi4+0xce>
 80007f0:	4282      	cmp	r2, r0
 80007f2:	f200 80f8 	bhi.w	80009e6 <__udivmoddi4+0x2be>
 80007f6:	1a84      	subs	r4, r0, r2
 80007f8:	eb65 0203 	sbc.w	r2, r5, r3
 80007fc:	2001      	movs	r0, #1
 80007fe:	4617      	mov	r7, r2
 8000800:	2e00      	cmp	r6, #0
 8000802:	d0e2      	beq.n	80007ca <__udivmoddi4+0xa2>
 8000804:	e9c6 4700 	strd	r4, r7, [r6]
 8000808:	e7df      	b.n	80007ca <__udivmoddi4+0xa2>
 800080a:	b902      	cbnz	r2, 800080e <__udivmoddi4+0xe6>
 800080c:	deff      	udf	#255	; 0xff
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	2b00      	cmp	r3, #0
 8000814:	f040 8090 	bne.w	8000938 <__udivmoddi4+0x210>
 8000818:	1a8a      	subs	r2, r1, r2
 800081a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800081e:	fa1f fe8c 	uxth.w	lr, ip
 8000822:	2101      	movs	r1, #1
 8000824:	fbb2 f5f7 	udiv	r5, r2, r7
 8000828:	fb07 2015 	mls	r0, r7, r5, r2
 800082c:	0c22      	lsrs	r2, r4, #16
 800082e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000832:	fb0e f005 	mul.w	r0, lr, r5
 8000836:	4290      	cmp	r0, r2
 8000838:	d908      	bls.n	800084c <__udivmoddi4+0x124>
 800083a:	eb1c 0202 	adds.w	r2, ip, r2
 800083e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x122>
 8000844:	4290      	cmp	r0, r2
 8000846:	f200 80cb 	bhi.w	80009e0 <__udivmoddi4+0x2b8>
 800084a:	4645      	mov	r5, r8
 800084c:	1a12      	subs	r2, r2, r0
 800084e:	b2a4      	uxth	r4, r4
 8000850:	fbb2 f0f7 	udiv	r0, r2, r7
 8000854:	fb07 2210 	mls	r2, r7, r0, r2
 8000858:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800085c:	fb0e fe00 	mul.w	lr, lr, r0
 8000860:	45a6      	cmp	lr, r4
 8000862:	d908      	bls.n	8000876 <__udivmoddi4+0x14e>
 8000864:	eb1c 0404 	adds.w	r4, ip, r4
 8000868:	f100 32ff 	add.w	r2, r0, #4294967295
 800086c:	d202      	bcs.n	8000874 <__udivmoddi4+0x14c>
 800086e:	45a6      	cmp	lr, r4
 8000870:	f200 80bb 	bhi.w	80009ea <__udivmoddi4+0x2c2>
 8000874:	4610      	mov	r0, r2
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800087e:	e79f      	b.n	80007c0 <__udivmoddi4+0x98>
 8000880:	f1c1 0720 	rsb	r7, r1, #32
 8000884:	408b      	lsls	r3, r1
 8000886:	fa22 fc07 	lsr.w	ip, r2, r7
 800088a:	ea4c 0c03 	orr.w	ip, ip, r3
 800088e:	fa05 f401 	lsl.w	r4, r5, r1
 8000892:	fa20 f307 	lsr.w	r3, r0, r7
 8000896:	40fd      	lsrs	r5, r7
 8000898:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800089c:	4323      	orrs	r3, r4
 800089e:	fbb5 f8f9 	udiv	r8, r5, r9
 80008a2:	fa1f fe8c 	uxth.w	lr, ip
 80008a6:	fb09 5518 	mls	r5, r9, r8, r5
 80008aa:	0c1c      	lsrs	r4, r3, #16
 80008ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008b0:	fb08 f50e 	mul.w	r5, r8, lr
 80008b4:	42a5      	cmp	r5, r4
 80008b6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ba:	fa00 f001 	lsl.w	r0, r0, r1
 80008be:	d90b      	bls.n	80008d8 <__udivmoddi4+0x1b0>
 80008c0:	eb1c 0404 	adds.w	r4, ip, r4
 80008c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008c8:	f080 8088 	bcs.w	80009dc <__udivmoddi4+0x2b4>
 80008cc:	42a5      	cmp	r5, r4
 80008ce:	f240 8085 	bls.w	80009dc <__udivmoddi4+0x2b4>
 80008d2:	f1a8 0802 	sub.w	r8, r8, #2
 80008d6:	4464      	add	r4, ip
 80008d8:	1b64      	subs	r4, r4, r5
 80008da:	b29d      	uxth	r5, r3
 80008dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008e0:	fb09 4413 	mls	r4, r9, r3, r4
 80008e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008e8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008ec:	45a6      	cmp	lr, r4
 80008ee:	d908      	bls.n	8000902 <__udivmoddi4+0x1da>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008f8:	d26c      	bcs.n	80009d4 <__udivmoddi4+0x2ac>
 80008fa:	45a6      	cmp	lr, r4
 80008fc:	d96a      	bls.n	80009d4 <__udivmoddi4+0x2ac>
 80008fe:	3b02      	subs	r3, #2
 8000900:	4464      	add	r4, ip
 8000902:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000906:	fba3 9502 	umull	r9, r5, r3, r2
 800090a:	eba4 040e 	sub.w	r4, r4, lr
 800090e:	42ac      	cmp	r4, r5
 8000910:	46c8      	mov	r8, r9
 8000912:	46ae      	mov	lr, r5
 8000914:	d356      	bcc.n	80009c4 <__udivmoddi4+0x29c>
 8000916:	d053      	beq.n	80009c0 <__udivmoddi4+0x298>
 8000918:	b156      	cbz	r6, 8000930 <__udivmoddi4+0x208>
 800091a:	ebb0 0208 	subs.w	r2, r0, r8
 800091e:	eb64 040e 	sbc.w	r4, r4, lr
 8000922:	fa04 f707 	lsl.w	r7, r4, r7
 8000926:	40ca      	lsrs	r2, r1
 8000928:	40cc      	lsrs	r4, r1
 800092a:	4317      	orrs	r7, r2
 800092c:	e9c6 7400 	strd	r7, r4, [r6]
 8000930:	4618      	mov	r0, r3
 8000932:	2100      	movs	r1, #0
 8000934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000938:	f1c3 0120 	rsb	r1, r3, #32
 800093c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000940:	fa20 f201 	lsr.w	r2, r0, r1
 8000944:	fa25 f101 	lsr.w	r1, r5, r1
 8000948:	409d      	lsls	r5, r3
 800094a:	432a      	orrs	r2, r5
 800094c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000950:	fa1f fe8c 	uxth.w	lr, ip
 8000954:	fbb1 f0f7 	udiv	r0, r1, r7
 8000958:	fb07 1510 	mls	r5, r7, r0, r1
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000962:	fb00 f50e 	mul.w	r5, r0, lr
 8000966:	428d      	cmp	r5, r1
 8000968:	fa04 f403 	lsl.w	r4, r4, r3
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x258>
 800096e:	eb1c 0101 	adds.w	r1, ip, r1
 8000972:	f100 38ff 	add.w	r8, r0, #4294967295
 8000976:	d22f      	bcs.n	80009d8 <__udivmoddi4+0x2b0>
 8000978:	428d      	cmp	r5, r1
 800097a:	d92d      	bls.n	80009d8 <__udivmoddi4+0x2b0>
 800097c:	3802      	subs	r0, #2
 800097e:	4461      	add	r1, ip
 8000980:	1b49      	subs	r1, r1, r5
 8000982:	b292      	uxth	r2, r2
 8000984:	fbb1 f5f7 	udiv	r5, r1, r7
 8000988:	fb07 1115 	mls	r1, r7, r5, r1
 800098c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000990:	fb05 f10e 	mul.w	r1, r5, lr
 8000994:	4291      	cmp	r1, r2
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x282>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f105 38ff 	add.w	r8, r5, #4294967295
 80009a0:	d216      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 80009a2:	4291      	cmp	r1, r2
 80009a4:	d914      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 80009a6:	3d02      	subs	r5, #2
 80009a8:	4462      	add	r2, ip
 80009aa:	1a52      	subs	r2, r2, r1
 80009ac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009b0:	e738      	b.n	8000824 <__udivmoddi4+0xfc>
 80009b2:	4631      	mov	r1, r6
 80009b4:	4630      	mov	r0, r6
 80009b6:	e708      	b.n	80007ca <__udivmoddi4+0xa2>
 80009b8:	4639      	mov	r1, r7
 80009ba:	e6e6      	b.n	800078a <__udivmoddi4+0x62>
 80009bc:	4610      	mov	r0, r2
 80009be:	e6fb      	b.n	80007b8 <__udivmoddi4+0x90>
 80009c0:	4548      	cmp	r0, r9
 80009c2:	d2a9      	bcs.n	8000918 <__udivmoddi4+0x1f0>
 80009c4:	ebb9 0802 	subs.w	r8, r9, r2
 80009c8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009cc:	3b01      	subs	r3, #1
 80009ce:	e7a3      	b.n	8000918 <__udivmoddi4+0x1f0>
 80009d0:	4645      	mov	r5, r8
 80009d2:	e7ea      	b.n	80009aa <__udivmoddi4+0x282>
 80009d4:	462b      	mov	r3, r5
 80009d6:	e794      	b.n	8000902 <__udivmoddi4+0x1da>
 80009d8:	4640      	mov	r0, r8
 80009da:	e7d1      	b.n	8000980 <__udivmoddi4+0x258>
 80009dc:	46d0      	mov	r8, sl
 80009de:	e77b      	b.n	80008d8 <__udivmoddi4+0x1b0>
 80009e0:	3d02      	subs	r5, #2
 80009e2:	4462      	add	r2, ip
 80009e4:	e732      	b.n	800084c <__udivmoddi4+0x124>
 80009e6:	4608      	mov	r0, r1
 80009e8:	e70a      	b.n	8000800 <__udivmoddi4+0xd8>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	e742      	b.n	8000876 <__udivmoddi4+0x14e>

080009f0 <__aeabi_idiv0>:
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	timer_index = 0;
 80009fa:	4b65      	ldr	r3, [pc, #404]	; (8000b90 <main+0x19c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	801a      	strh	r2, [r3, #0]
	snap_flag = true; // begin with inibiiton of acquisition, set to false later
 8000a00:	4b64      	ldr	r3, [pc, #400]	; (8000b94 <main+0x1a0>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 ffea 	bl	80019de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f8d5 	bl	8000bb8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RetargetInit(&huart3); // redirect the printf() and scanf() function to huart
 8000a0e:	4862      	ldr	r0, [pc, #392]	; (8000b98 <main+0x1a4>)
 8000a10:	f000 fc28 	bl	8001264 <RetargetInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a14:	f000 fad2 	bl	8000fbc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a18:	f000 fa72 	bl	8000f00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a1c:	f000 faa0 	bl	8000f60 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000a20:	f000 f93e 	bl	8000ca0 <MX_ADC1_Init>
  MX_ETH_Init();
 8000a24:	f000 f98e 	bl	8000d44 <MX_ETH_Init>
  MX_TIM6_Init();
 8000a28:	f000 fa34 	bl	8000e94 <MX_TIM6_Init>
  MX_RTC_Init();
 8000a2c:	f000 f9d8 	bl	8000de0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);  // start the timer
 8000a30:	485a      	ldr	r0, [pc, #360]	; (8000b9c <main+0x1a8>)
 8000a32:	f003 ffbf 	bl	80049b4 <HAL_TIM_Base_Start_IT>
		int X, Y;
		wave_object obj;
		wtree_object wt;
		double *inp, *oup;

		char *name = "db3";
 8000a36:	4b5a      	ldr	r3, [pc, #360]	; (8000ba0 <main+0x1ac>)
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
		obj = wave_init(name);// Initialize the wavelet
 8000a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a3c:	f007 ff7e 	bl	800893c <wave_init>
 8000a40:	6278      	str	r0, [r7, #36]	; 0x24
		N = 147;
 8000a42:	2393      	movs	r3, #147	; 0x93
 8000a44:	623b      	str	r3, [r7, #32]
		inp = (double*)malloc(sizeof(double)* N);
 8000a46:	6a3b      	ldr	r3, [r7, #32]
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f009 f9cc 	bl	8009de8 <malloc>
 8000a50:	4603      	mov	r3, r0
 8000a52:	61fb      	str	r3, [r7, #28]
		for (i = 1; i < N + 1; ++i) {
 8000a54:	2301      	movs	r3, #1
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a58:	e03b      	b.n	8000ad2 <main+0xde>
			inp[i - 1] = -0.25*i*i*i + 25 * i *i + 10 * i;
 8000a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5c:	ee07 3a90 	vmov	s15, r3
 8000a60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a64:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8000a68:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6e:	ee07 3a90 	vmov	s15, r3
 8000a72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a76:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7c:	ee07 3a90 	vmov	s15, r3
 8000a80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a84:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8a:	fb03 f203 	mul.w	r2, r3, r3
 8000a8e:	4613      	mov	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	009a      	lsls	r2, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	ee07 3a90 	vmov	s15, r3
 8000a9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aa0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	ee07 3a90 	vmov	s15, r3
 8000ab2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ab8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000abc:	4413      	add	r3, r2
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	69fa      	ldr	r2, [r7, #28]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ac8:	ed83 7b00 	vstr	d7, [r3]
		for (i = 1; i < N + 1; ++i) {
 8000acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ace:	3301      	adds	r3, #1
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ad2:	6a3a      	ldr	r2, [r7, #32]
 8000ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	dabf      	bge.n	8000a5a <main+0x66>
		}
		J = 3;
 8000ada:	2303      	movs	r3, #3
 8000adc:	61bb      	str	r3, [r7, #24]

		wt = wtree_init(obj, N, J);// Initialize the wavelet transform object
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	6a39      	ldr	r1, [r7, #32]
 8000ae2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ae4:	f007 ff9e 	bl	8008a24 <wtree_init>
 8000ae8:	6178      	str	r0, [r7, #20]
		setWTREEExtension(wt, "sym");// Options are "per" and "sym". Symmetric is the default option
 8000aea:	492e      	ldr	r1, [pc, #184]	; (8000ba4 <main+0x1b0>)
 8000aec:	6978      	ldr	r0, [r7, #20]
 8000aee:	f008 ff6f 	bl	80099d0 <setWTREEExtension>

		wtree(wt, inp);
 8000af2:	69f9      	ldr	r1, [r7, #28]
 8000af4:	6978      	ldr	r0, [r7, #20]
 8000af6:	f008 fc5b 	bl	80093b0 <wtree>
		wtree_summary(wt);
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f009 f866 	bl	8009bcc <wtree_summary>
		X = 3;
 8000b00:	2303      	movs	r3, #3
 8000b02:	613b      	str	r3, [r7, #16]
		Y = 5;
 8000b04:	2305      	movs	r3, #5
 8000b06:	60fb      	str	r3, [r7, #12]
		len = getWTREENodelength(wt, X);
 8000b08:	6939      	ldr	r1, [r7, #16]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f008 feae 	bl	800986c <getWTREENodelength>
 8000b10:	60b8      	str	r0, [r7, #8]
		printf(" \r\n %d", len);
 8000b12:	68b9      	ldr	r1, [r7, #8]
 8000b14:	4824      	ldr	r0, [pc, #144]	; (8000ba8 <main+0x1b4>)
 8000b16:	f00a f9b3 	bl	800ae80 <iprintf>
		printf(" \r\n");
 8000b1a:	4824      	ldr	r0, [pc, #144]	; (8000bac <main+0x1b8>)
 8000b1c:	f00a fa16 	bl	800af4c <puts>
		oup = (double*)malloc(sizeof(double)* len);
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4618      	mov	r0, r3
 8000b26:	f009 f95f 	bl	8009de8 <malloc>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	607b      	str	r3, [r7, #4]

		printf("Node [%d %d] Coefficients :  \r\n",X,Y);
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	6939      	ldr	r1, [r7, #16]
 8000b32:	481f      	ldr	r0, [pc, #124]	; (8000bb0 <main+0x1bc>)
 8000b34:	f00a f9a4 	bl	800ae80 <iprintf>
		getWTREECoeffs(wt, X, Y, oup, len);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	6939      	ldr	r1, [r7, #16]
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f008 febe 	bl	80098c4 <getWTREECoeffs>
		for (i = 0; i < len; ++i) {
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b4c:	e00b      	b.n	8000b66 <main+0x172>
			printf("%g ", oup[i]);
 8000b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b5a:	4816      	ldr	r0, [pc, #88]	; (8000bb4 <main+0x1c0>)
 8000b5c:	f00a f990 	bl	800ae80 <iprintf>
		for (i = 0; i < len; ++i) {
 8000b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b62:	3301      	adds	r3, #1
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dbef      	blt.n	8000b4e <main+0x15a>
		}
		printf(" \r\n");
 8000b6e:	480f      	ldr	r0, [pc, #60]	; (8000bac <main+0x1b8>)
 8000b70:	f00a f9ec 	bl	800af4c <puts>

		free(inp);
 8000b74:	69f8      	ldr	r0, [r7, #28]
 8000b76:	f009 f93f 	bl	8009df8 <free>
		free(oup);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f009 f93c 	bl	8009df8 <free>
		wave_free(obj);
 8000b80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b82:	f009 f8b9 	bl	8009cf8 <wave_free>
		wtree_free(wt);
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f009 f8c1 	bl	8009d0e <wtree_free>
		while(1){}
 8000b8c:	e7fe      	b.n	8000b8c <main+0x198>
 8000b8e:	bf00      	nop
 8000b90:	2000316c 	.word	0x2000316c
 8000b94:	2000316e 	.word	0x2000316e
 8000b98:	200004cc 	.word	0x200004cc
 8000b9c:	20000480 	.word	0x20000480
 8000ba0:	0800e990 	.word	0x0800e990
 8000ba4:	0800e994 	.word	0x0800e994
 8000ba8:	0800e998 	.word	0x0800e998
 8000bac:	0800e9a0 	.word	0x0800e9a0
 8000bb0:	0800e9a4 	.word	0x0800e9a4
 8000bb4:	0800e9c4 	.word	0x0800e9c4

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b094      	sub	sp, #80	; 0x50
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2234      	movs	r2, #52	; 0x34
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f00a fb6e 	bl	800b2a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bdc:	f002 faf2 	bl	80031c4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be0:	4b2d      	ldr	r3, [pc, #180]	; (8000c98 <SystemClock_Config+0xe0>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a2c      	ldr	r2, [pc, #176]	; (8000c98 <SystemClock_Config+0xe0>)
 8000be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <SystemClock_Config+0xe0>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bf8:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <SystemClock_Config+0xe4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c00:	4a26      	ldr	r2, [pc, #152]	; (8000c9c <SystemClock_Config+0xe4>)
 8000c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <SystemClock_Config+0xe4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000c14:	2309      	movs	r3, #9
 8000c16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c30:	2360      	movs	r3, #96	; 0x60
 8000c32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4618      	mov	r0, r3
 8000c46:	f002 fb1d 	bl	8003284 <HAL_RCC_OscConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c50:	f000 fac4 	bl	80011dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c54:	f002 fac6 	bl	80031e4 <HAL_PWREx_EnableOverDrive>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c5e:	f000 fabd 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c62:	230f      	movs	r3, #15
 8000c64:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c66:	2302      	movs	r3, #2
 8000c68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 fdae 	bl	80037e0 <HAL_RCC_ClockConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000c8a:	f000 faa7 	bl	80011dc <Error_Handler>
  }
}
 8000c8e:	bf00      	nop
 8000c90:	3750      	adds	r7, #80	; 0x50
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40007000 	.word	0x40007000

08000ca0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <MX_ADC1_Init+0x9c>)
 8000cb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <MX_ADC1_Init+0xa0>)
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000d02:	f000 feed 	bl	8001ae0 <HAL_ADC_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d0c:	f000 fa66 	bl	80011dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d10:	2303      	movs	r3, #3
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000d22:	f001 f887 	bl	8001e34 <HAL_ADC_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d2c:	f000 fa56 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000368 	.word	0x20000368
 8000d3c:	40012000 	.word	0x40012000
 8000d40:	0f000001 	.word	0x0f000001

08000d44 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <MX_ETH_Init+0x84>)
 8000d4a:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <MX_ETH_Init+0x88>)
 8000d4c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <MX_ETH_Init+0x8c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_ETH_Init+0x8c>)
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MX_ETH_Init+0x8c>)
 8000d5c:	22e1      	movs	r2, #225	; 0xe1
 8000d5e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <MX_ETH_Init+0x8c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_ETH_Init+0x8c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <MX_ETH_Init+0x8c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_ETH_Init+0x84>)
 8000d74:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <MX_ETH_Init+0x8c>)
 8000d76:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_ETH_Init+0x84>)
 8000d7a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d7e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_ETH_Init+0x84>)
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <MX_ETH_Init+0x90>)
 8000d84:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_ETH_Init+0x84>)
 8000d88:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <MX_ETH_Init+0x94>)
 8000d8a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_ETH_Init+0x84>)
 8000d8e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d92:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <MX_ETH_Init+0x84>)
 8000d96:	f001 fbaf 	bl	80024f8 <HAL_ETH_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000da0:	f000 fa1c 	bl	80011dc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000da4:	2238      	movs	r2, #56	; 0x38
 8000da6:	2100      	movs	r1, #0
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <MX_ETH_Init+0x98>)
 8000daa:	f00a fa7d 	bl	800b2a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_ETH_Init+0x98>)
 8000db0:	2221      	movs	r2, #33	; 0x21
 8000db2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_ETH_Init+0x98>)
 8000db6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000dba:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <MX_ETH_Init+0x98>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200003b0 	.word	0x200003b0
 8000dcc:	40028000 	.word	0x40028000
 8000dd0:	20003170 	.word	0x20003170
 8000dd4:	20000274 	.word	0x20000274
 8000dd8:	200001d4 	.word	0x200001d4
 8000ddc:	20000330 	.word	0x20000330

08000de0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000df4:	2300      	movs	r3, #0
 8000df6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <MX_RTC_Init+0xac>)
 8000dfa:	4a25      	ldr	r2, [pc, #148]	; (8000e90 <MX_RTC_Init+0xb0>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <MX_RTC_Init+0xac>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <MX_RTC_Init+0xac>)
 8000e06:	227f      	movs	r2, #127	; 0x7f
 8000e08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <MX_RTC_Init+0xac>)
 8000e0c:	22ff      	movs	r2, #255	; 0xff
 8000e0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <MX_RTC_Init+0xac>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <MX_RTC_Init+0xac>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_RTC_Init+0xac>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e22:	481a      	ldr	r0, [pc, #104]	; (8000e8c <MX_RTC_Init+0xac>)
 8000e24:	f003 fb2a 	bl	800447c <HAL_RTC_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000e2e:	f000 f9d5 	bl	80011dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8000e32:	230f      	movs	r3, #15
 8000e34:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 36;
 8000e36:	2324      	movs	r3, #36	; 0x24
 8000e38:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480f      	ldr	r0, [pc, #60]	; (8000e8c <MX_RTC_Init+0xac>)
 8000e4e:	f003 fb99 	bl	8004584 <HAL_RTC_SetTime>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000e58:	f000 f9c0 	bl	80011dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8000e60:	2311      	movs	r3, #17
 8000e62:	707b      	strb	r3, [r7, #1]
  sDate.Date = 29;
 8000e64:	231d      	movs	r3, #29
 8000e66:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	; (8000e8c <MX_RTC_Init+0xac>)
 8000e74:	f003 fc20 	bl	80046b8 <HAL_RTC_SetDate>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000e7e:	f000 f9ad 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000460 	.word	0x20000460
 8000e90:	40002800 	.word	0x40002800

08000e94 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_TIM6_Init+0x64>)
 8000ea6:	4a15      	ldr	r2, [pc, #84]	; (8000efc <MX_TIM6_Init+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_TIM6_Init+0x64>)
 8000eac:	2217      	movs	r2, #23
 8000eae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_TIM6_Init+0x64>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 800-1;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <MX_TIM6_Init+0x64>)
 8000eb8:	f240 321f 	movw	r2, #799	; 0x31f
 8000ebc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_TIM6_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <MX_TIM6_Init+0x64>)
 8000ec6:	f003 fd1d 	bl	8004904 <HAL_TIM_Base_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ed0:	f000 f984 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_TIM6_Init+0x64>)
 8000ee2:	f003 ffc7 	bl	8004e74 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000eec:	f000 f976 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000480 	.word	0x20000480
 8000efc:	40001000 	.word	0x40001000

08000f00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_USART3_UART_Init+0x58>)
 8000f06:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <MX_USART3_UART_Init+0x5c>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <MX_USART3_UART_Init+0x58>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_USART3_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_USART3_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_USART3_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_USART3_UART_Init+0x58>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_USART3_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_USART3_UART_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_USART3_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_USART3_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_USART3_UART_Init+0x58>)
 8000f44:	f004 f842 	bl	8004fcc <HAL_UART_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f4e:	f000 f945 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200004cc 	.word	0x200004cc
 8000f5c:	40004800 	.word	0x40004800

08000f60 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f6e:	2206      	movs	r2, #6
 8000f70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f80:	2202      	movs	r2, #2
 8000f82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa4:	f001 ffc6 	bl	8002f34 <HAL_PCD_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fae:	f000 f915 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000554 	.word	0x20000554

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b4b      	ldr	r3, [pc, #300]	; (8001100 <MX_GPIO_Init+0x144>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a4a      	ldr	r2, [pc, #296]	; (8001100 <MX_GPIO_Init+0x144>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b48      	ldr	r3, [pc, #288]	; (8001100 <MX_GPIO_Init+0x144>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	4b45      	ldr	r3, [pc, #276]	; (8001100 <MX_GPIO_Init+0x144>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a44      	ldr	r2, [pc, #272]	; (8001100 <MX_GPIO_Init+0x144>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b42      	ldr	r3, [pc, #264]	; (8001100 <MX_GPIO_Init+0x144>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b3f      	ldr	r3, [pc, #252]	; (8001100 <MX_GPIO_Init+0x144>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a3e      	ldr	r2, [pc, #248]	; (8001100 <MX_GPIO_Init+0x144>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <MX_GPIO_Init+0x144>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b39      	ldr	r3, [pc, #228]	; (8001100 <MX_GPIO_Init+0x144>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a38      	ldr	r2, [pc, #224]	; (8001100 <MX_GPIO_Init+0x144>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b36      	ldr	r3, [pc, #216]	; (8001100 <MX_GPIO_Init+0x144>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <MX_GPIO_Init+0x144>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a32      	ldr	r2, [pc, #200]	; (8001100 <MX_GPIO_Init+0x144>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b30      	ldr	r3, [pc, #192]	; (8001100 <MX_GPIO_Init+0x144>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <MX_GPIO_Init+0x144>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a2c      	ldr	r2, [pc, #176]	; (8001100 <MX_GPIO_Init+0x144>)
 8001050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <MX_GPIO_Init+0x144>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f244 0181 	movw	r1, #16513	; 0x4081
 8001068:	4826      	ldr	r0, [pc, #152]	; (8001104 <MX_GPIO_Init+0x148>)
 800106a:	f001 ff17 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2140      	movs	r1, #64	; 0x40
 8001072:	4825      	ldr	r0, [pc, #148]	; (8001108 <MX_GPIO_Init+0x14c>)
 8001074:	f001 ff12 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001084:	2302      	movs	r3, #2
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	481f      	ldr	r0, [pc, #124]	; (800110c <MX_GPIO_Init+0x150>)
 8001090:	f001 fd58 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001094:	f244 0381 	movw	r3, #16513	; 0x4081
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	4815      	ldr	r0, [pc, #84]	; (8001104 <MX_GPIO_Init+0x148>)
 80010ae:	f001 fd49 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010b2:	2340      	movs	r3, #64	; 0x40
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	480f      	ldr	r0, [pc, #60]	; (8001108 <MX_GPIO_Init+0x14c>)
 80010ca:	f001 fd3b 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4809      	ldr	r0, [pc, #36]	; (8001108 <MX_GPIO_Init+0x14c>)
 80010e2:	f001 fd2f 	bl	8002b44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2028      	movs	r0, #40	; 0x28
 80010ec:	f001 f9cd 	bl	800248a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010f0:	2028      	movs	r0, #40	; 0x28
 80010f2:	f001 f9e6 	bl	80024c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f6:	bf00      	nop
 80010f8:	3730      	adds	r7, #48	; 0x30
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40020400 	.word	0x40020400
 8001108:	40021800 	.word	0x40021800
 800110c:	40020800 	.word	0x40020800

08001110 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // GPIO interrupt handler
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == 0x2000){ // if user btn is pressed
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001120:	d103      	bne.n	800112a <HAL_GPIO_EXTI_Callback+0x1a>
		snap_flag = false; //request a snapshot
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_GPIO_EXTI_Callback+0x28>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
	}
	else{
		printf("Unknown GPIO interrupt happened");
	}
}
 8001128:	e002      	b.n	8001130 <HAL_GPIO_EXTI_Callback+0x20>
		printf("Unknown GPIO interrupt happened");
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <HAL_GPIO_EXTI_Callback+0x2c>)
 800112c:	f009 fea8 	bl	800ae80 <iprintf>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000316e 	.word	0x2000316e
 800113c:	0800e9c8 	.word	0x0800e9c8

08001140 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	if(htim == &htim6 && snap_flag == false){ // if the timer is the analog management and the conversion is not already done
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d134      	bne.n	80011ba <HAL_TIM_PeriodElapsedCallback+0x7a>
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	f083 0301 	eor.w	r3, r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d02d      	beq.n	80011ba <HAL_TIM_PeriodElapsedCallback+0x7a>
		// Get ADC value
		    HAL_ADC_Start(&hadc1);
 800115e:	481b      	ldr	r0, [pc, #108]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001160:	f000 fd02 	bl	8001b68 <HAL_ADC_Start>
		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	4818      	ldr	r0, [pc, #96]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800116a:	f000 fdcb 	bl	8001d04 <HAL_ADC_PollForConversion>
		    adc_buf[timer_index]= HAL_ADC_GetValue(&hadc1); // save the value in the array
 800116e:	4817      	ldr	r0, [pc, #92]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001170:	f000 fe53 	bl	8001e1a <HAL_ADC_GetValue>
 8001174:	4601      	mov	r1, r0
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	b289      	uxth	r1, r1
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001180:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001184:	2101      	movs	r1, #1
 8001186:	4814      	ldr	r0, [pc, #80]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001188:	f001 fea1 	bl	8002ece <HAL_GPIO_TogglePin>
		    timer_index ++;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001196:	801a      	strh	r2, [r3, #0]
		    if(timer_index>=ADC_BUF_LEN){
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	f241 3287 	movw	r2, #4999	; 0x1387
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d90a      	bls.n	80011ba <HAL_TIM_PeriodElapsedCallback+0x7a>
		    	timer_index=0;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	801a      	strh	r2, [r3, #0]
		    	SnapReadyCallback(adc_buf, ADC_BUF_LEN);
 80011aa:	f241 3188 	movw	r1, #5000	; 0x1388
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80011b0:	f000 f844 	bl	800123c <SnapReadyCallback>
		    	snap_flag = true; // conversion complete flag
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
		    }
	}
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000480 	.word	0x20000480
 80011c8:	2000316e 	.word	0x2000316e
 80011cc:	20000368 	.word	0x20000368
 80011d0:	2000316c 	.word	0x2000316c
 80011d4:	20000a5c 	.word	0x20000a5c
 80011d8:	40020400 	.word	0x40020400

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80011e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e8:	4801      	ldr	r0, [pc, #4]	; (80011f0 <Error_Handler+0x14>)
 80011ea:	f001 fe70 	bl	8002ece <HAL_GPIO_TogglePin>
 80011ee:	e7f9      	b.n	80011e4 <Error_Handler+0x8>
 80011f0:	40020400 	.word	0x40020400

080011f4 <printarray>:
		result += strlen(result);
	}
	sprintf(result, "%u", uintArray[i]);  // Last element without a tab
}

void printarray(const uint16_t *uintarray, size_t length){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	for (int var = 0; var < length; ++var) {
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	e00b      	b.n	800121c <printarray+0x28>
		printf("%u\r\n", uintarray[var]);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	4808      	ldr	r0, [pc, #32]	; (8001234 <printarray+0x40>)
 8001212:	f009 fe35 	bl	800ae80 <iprintf>
	for (int var = 0; var < length; ++var) {
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3301      	adds	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8ef      	bhi.n	8001204 <printarray+0x10>
	}
	printf("\r\n");
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <printarray+0x44>)
 8001226:	f009 fe91 	bl	800af4c <puts>
}
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	0800e9ec 	.word	0x0800e9ec
 8001238:	0800e9f4 	.word	0x0800e9f4

0800123c <SnapReadyCallback>:

SnapReadyCallback(const uint16_t *uintarray, size_t length){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	printf("Snapshot acquired: \r\n");
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <SnapReadyCallback+0x24>)
 8001248:	f009 fe80 	bl	800af4c <puts>
	printarray(uintarray, length);
 800124c:	6839      	ldr	r1, [r7, #0]
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffd0 	bl	80011f4 <printarray>
}
 8001254:	bf00      	nop
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	0800e9f8 	.word	0x0800e9f8

08001264 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <RetargetInit+0x28>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <RetargetInit+0x2c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6898      	ldr	r0, [r3, #8]
 8001278:	2300      	movs	r3, #0
 800127a:	2202      	movs	r2, #2
 800127c:	2100      	movs	r1, #0
 800127e:	f009 fe6d 	bl	800af5c <setvbuf>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20003178 	.word	0x20003178
 8001290:	20000064 	.word	0x20000064

08001294 <_isatty>:

int _isatty(int fd) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db04      	blt.n	80012ac <_isatty+0x18>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	dc01      	bgt.n	80012ac <_isatty+0x18>
    return 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e005      	b.n	80012b8 <_isatty+0x24>

  errno = EBADF;
 80012ac:	f00a f874 	bl	800b398 <__errno>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2209      	movs	r2, #9
 80012b4:	601a      	str	r2, [r3, #0]
  return 0;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_write>:

int _write(int fd, char* ptr, int len) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d002      	beq.n	80012d8 <_write+0x18>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d111      	bne.n	80012fc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <_write+0x54>)
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	f003 febf 	bl	8005068 <HAL_UART_Transmit>
 80012ea:	4603      	mov	r3, r0
 80012ec:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <_write+0x38>
      return len;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	e008      	b.n	800130a <_write+0x4a>
    else
      return EIO;
 80012f8:	2305      	movs	r3, #5
 80012fa:	e006      	b.n	800130a <_write+0x4a>
  }
  errno = EBADF;
 80012fc:	f00a f84c 	bl	800b398 <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	2209      	movs	r2, #9
 8001304:	601a      	str	r2, [r3, #0]
  return -1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20003178 	.word	0x20003178

08001318 <_close>:

int _close(int fd) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db04      	blt.n	8001330 <_close+0x18>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b02      	cmp	r3, #2
 800132a:	dc01      	bgt.n	8001330 <_close+0x18>
    return 0;
 800132c:	2300      	movs	r3, #0
 800132e:	e006      	b.n	800133e <_close+0x26>

  errno = EBADF;
 8001330:	f00a f832 	bl	800b398 <__errno>
 8001334:	4603      	mov	r3, r0
 8001336:	2209      	movs	r2, #9
 8001338:	601a      	str	r2, [r3, #0]
  return -1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001352:	f00a f821 	bl	800b398 <__errno>
 8001356:	4603      	mov	r3, r0
 8001358:	2209      	movs	r2, #9
 800135a:	601a      	str	r2, [r3, #0]
  return -1;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_read>:

int _read(int fd, char* ptr, int len) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d110      	bne.n	800139c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <_read+0x4c>)
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	2201      	movs	r2, #1
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	f003 fef2 	bl	800516e <HAL_UART_Receive>
 800138a:	4603      	mov	r3, r0
 800138c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800138e:	7dfb      	ldrb	r3, [r7, #23]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <_read+0x30>
      return 1;
 8001394:	2301      	movs	r3, #1
 8001396:	e008      	b.n	80013aa <_read+0x42>
    else
      return EIO;
 8001398:	2305      	movs	r3, #5
 800139a:	e006      	b.n	80013aa <_read+0x42>
  }
  errno = EBADF;
 800139c:	f009 fffc 	bl	800b398 <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2209      	movs	r2, #9
 80013a4:	601a      	str	r2, [r3, #0]
  return -1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20003178 	.word	0x20003178

080013b8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db08      	blt.n	80013da <_fstat+0x22>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	dc05      	bgt.n	80013da <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d4:	605a      	str	r2, [r3, #4]
    return 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e005      	b.n	80013e6 <_fstat+0x2e>
  }

  errno = EBADF;
 80013da:	f009 ffdd 	bl	800b398 <__errno>
 80013de:	4603      	mov	r3, r0
 80013e0:	2209      	movs	r2, #9
 80013e2:	601a      	str	r2, [r3, #0]
  return 0;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_MspInit+0x44>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_MspInit+0x44>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_MspInit+0x44>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_MspInit+0x44>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_MspInit+0x44>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_MspInit+0x44>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a15      	ldr	r2, [pc, #84]	; (80014ac <HAL_ADC_MspInit+0x74>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d123      	bne.n	80014a2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_ADC_MspInit+0x78>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <HAL_ADC_MspInit+0x78>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_ADC_MspInit+0x78>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_ADC_MspInit+0x78>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <HAL_ADC_MspInit+0x78>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_ADC_MspInit+0x78>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800148a:	2308      	movs	r3, #8
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148e:	2303      	movs	r3, #3
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_ADC_MspInit+0x7c>)
 800149e:	f001 fb51 	bl	8002b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40012000 	.word	0x40012000
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000

080014b8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	; 0x38
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a4e      	ldr	r2, [pc, #312]	; (8001610 <HAL_ETH_MspInit+0x158>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	f040 8096 	bne.w	8001608 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80014dc:	4b4d      	ldr	r3, [pc, #308]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 80014e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e6:	6313      	str	r3, [r2, #48]	; 0x30
 80014e8:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	623b      	str	r3, [r7, #32]
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	4b47      	ldr	r3, [pc, #284]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	4a46      	ldr	r2, [pc, #280]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 80014fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001500:	4b44      	ldr	r3, [pc, #272]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	4b41      	ldr	r3, [pc, #260]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a40      	ldr	r2, [pc, #256]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 8001512:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b3e      	ldr	r3, [pc, #248]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a3a      	ldr	r2, [pc, #232]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6313      	str	r3, [r2, #48]	; 0x30
 8001530:	4b38      	ldr	r3, [pc, #224]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	4b35      	ldr	r3, [pc, #212]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	4a34      	ldr	r2, [pc, #208]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6313      	str	r3, [r2, #48]	; 0x30
 8001548:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001554:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	4a2e      	ldr	r2, [pc, #184]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	6313      	str	r3, [r2, #48]	; 0x30
 8001560:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800156c:	4b29      	ldr	r3, [pc, #164]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	4a28      	ldr	r2, [pc, #160]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 8001572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001576:	6313      	str	r3, [r2, #48]	; 0x30
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <HAL_ETH_MspInit+0x15c>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001584:	2332      	movs	r3, #50	; 0x32
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001594:	230b      	movs	r3, #11
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	4619      	mov	r1, r3
 800159e:	481e      	ldr	r0, [pc, #120]	; (8001618 <HAL_ETH_MspInit+0x160>)
 80015a0:	f001 fad0 	bl	8002b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015a4:	2386      	movs	r3, #134	; 0x86
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b4:	230b      	movs	r3, #11
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4817      	ldr	r0, [pc, #92]	; (800161c <HAL_ETH_MspInit+0x164>)
 80015c0:	f001 fac0 	bl	8002b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015d6:	230b      	movs	r3, #11
 80015d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	480f      	ldr	r0, [pc, #60]	; (8001620 <HAL_ETH_MspInit+0x168>)
 80015e2:	f001 faaf 	bl	8002b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80015e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f8:	230b      	movs	r3, #11
 80015fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4808      	ldr	r0, [pc, #32]	; (8001624 <HAL_ETH_MspInit+0x16c>)
 8001604:	f001 fa9e 	bl	8002b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	3738      	adds	r7, #56	; 0x38
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40028000 	.word	0x40028000
 8001614:	40023800 	.word	0x40023800
 8001618:	40020800 	.word	0x40020800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020400 	.word	0x40020400
 8001624:	40021800 	.word	0x40021800

08001628 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b0a6      	sub	sp, #152	; 0x98
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001630:	f107 0308 	add.w	r3, r7, #8
 8001634:	2290      	movs	r2, #144	; 0x90
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f009 fe35 	bl	800b2a8 <memset>
  if(hrtc->Instance==RTC)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a0e      	ldr	r2, [pc, #56]	; (800167c <HAL_RTC_MspInit+0x54>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d114      	bne.n	8001672 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001648:	2320      	movs	r3, #32
 800164a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800164c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001650:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fae8 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001662:	f7ff fdbb 	bl	80011dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_RTC_MspInit+0x58>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <HAL_RTC_MspInit+0x58>)
 800166c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001670:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3798      	adds	r7, #152	; 0x98
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40002800 	.word	0x40002800
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <HAL_TIM_Base_MspInit+0x44>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d113      	bne.n	80016be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_TIM_Base_MspInit+0x48>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <HAL_TIM_Base_MspInit+0x48>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_TIM_Base_MspInit+0x48>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2036      	movs	r0, #54	; 0x36
 80016b4:	f000 fee9 	bl	800248a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016b8:	2036      	movs	r0, #54	; 0x36
 80016ba:	f000 ff02 	bl	80024c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40001000 	.word	0x40001000
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b0ae      	sub	sp, #184	; 0xb8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2290      	movs	r2, #144	; 0x90
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f009 fdd9 	bl	800b2a8 <memset>
  if(huart->Instance==USART3)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a22      	ldr	r2, [pc, #136]	; (8001784 <HAL_UART_MspInit+0xb4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d13c      	bne.n	800177a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001704:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001706:	2300      	movs	r3, #0
 8001708:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fa8c 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800171a:	f7ff fd5f 	bl	80011dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <HAL_UART_MspInit+0xb8>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a19      	ldr	r2, [pc, #100]	; (8001788 <HAL_UART_MspInit+0xb8>)
 8001724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_UART_MspInit+0xb8>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_UART_MspInit+0xb8>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a13      	ldr	r2, [pc, #76]	; (8001788 <HAL_UART_MspInit+0xb8>)
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_UART_MspInit+0xb8>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800174e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001768:	2307      	movs	r3, #7
 800176a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800176e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <HAL_UART_MspInit+0xbc>)
 8001776:	f001 f9e5 	bl	8002b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	37b8      	adds	r7, #184	; 0xb8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40004800 	.word	0x40004800
 8001788:	40023800 	.word	0x40023800
 800178c:	40020c00 	.word	0x40020c00

08001790 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b0ae      	sub	sp, #184	; 0xb8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2290      	movs	r2, #144	; 0x90
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f009 fd79 	bl	800b2a8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017be:	d159      	bne.n	8001874 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80017c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fa2b 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80017dc:	f7ff fcfe 	bl	80011dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b26      	ldr	r3, [pc, #152]	; (800187c <HAL_PCD_MspInit+0xec>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	4a25      	ldr	r2, [pc, #148]	; (800187c <HAL_PCD_MspInit+0xec>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6313      	str	r3, [r2, #48]	; 0x30
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <HAL_PCD_MspInit+0xec>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017f8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001812:	230a      	movs	r3, #10
 8001814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800181c:	4619      	mov	r1, r3
 800181e:	4818      	ldr	r0, [pc, #96]	; (8001880 <HAL_PCD_MspInit+0xf0>)
 8001820:	f001 f990 	bl	8002b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001828:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800183c:	4619      	mov	r1, r3
 800183e:	4810      	ldr	r0, [pc, #64]	; (8001880 <HAL_PCD_MspInit+0xf0>)
 8001840:	f001 f980 	bl	8002b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_PCD_MspInit+0xec>)
 8001846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001848:	4a0c      	ldr	r2, [pc, #48]	; (800187c <HAL_PCD_MspInit+0xec>)
 800184a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184e:	6353      	str	r3, [r2, #52]	; 0x34
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_PCD_MspInit+0xec>)
 8001852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_PCD_MspInit+0xec>)
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	4a06      	ldr	r2, [pc, #24]	; (800187c <HAL_PCD_MspInit+0xec>)
 8001862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001866:	6453      	str	r3, [r2, #68]	; 0x44
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <HAL_PCD_MspInit+0xec>)
 800186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001874:	bf00      	nop
 8001876:	37b8      	adds	r7, #184	; 0xb8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d0:	f000 f8c2 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80018dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018e0:	f001 fb10 	bl	8002f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <TIM6_DAC_IRQHandler+0x10>)
 80018ee:	f003 f8d9 	bl	8004aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000480 	.word	0x20000480

080018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <_sbrk+0x5c>)
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <_sbrk+0x60>)
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_sbrk+0x64>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_sbrk+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d207      	bcs.n	800193c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800192c:	f009 fd34 	bl	800b398 <__errno>
 8001930:	4603      	mov	r3, r0
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e009      	b.n	8001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20080000 	.word	0x20080000
 800195c:	00000400 	.word	0x00000400
 8001960:	2000317c 	.word	0x2000317c
 8001964:	200032d0 	.word	0x200032d0

08001968 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <SystemInit+0x20>)
 800196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <SystemInit+0x20>)
 8001974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001992:	490e      	ldr	r1, [pc, #56]	; (80019cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a8:	4c0b      	ldr	r4, [pc, #44]	; (80019d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019b6:	f7ff ffd7 	bl	8001968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f009 fcf3 	bl	800b3a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7ff f819 	bl	80009f4 <main>
  bx  lr    
 80019c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019d0:	08016b98 	.word	0x08016b98
  ldr r2, =_sbss
 80019d4:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 80019d8:	200032d0 	.word	0x200032d0

080019dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC_IRQHandler>

080019de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e2:	2003      	movs	r0, #3
 80019e4:	f000 fd46 	bl	8002474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f000 f805 	bl	80019f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ee:	f7ff fcff 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_InitTick+0x54>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x58>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 fd61 	bl	80024de <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f000 fd29 	bl	800248a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_InitTick+0x5c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20003180 	.word	0x20003180

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20003180 	.word	0x20003180

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_Delay+0x44>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000008 	.word	0x20000008

08001ae0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e031      	b.n	8001b5a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fc9a 	bl	8001438 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d116      	bne.n	8001b4c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_ADC_Init+0x84>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	f043 0202 	orr.w	r2, r3, #2
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fad6 	bl	80020e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f023 0303 	bic.w	r3, r3, #3
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
 8001b4a:	e001      	b.n	8001b50 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	ffffeefd 	.word	0xffffeefd

08001b68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_Start+0x1a>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e0ad      	b.n	8001cde <HAL_ADC_Start+0x176>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d018      	beq.n	8001bca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001ba8:	4b50      	ldr	r3, [pc, #320]	; (8001cec <HAL_ADC_Start+0x184>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a50      	ldr	r2, [pc, #320]	; (8001cf0 <HAL_ADC_Start+0x188>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0c9a      	lsrs	r2, r3, #18
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001bbc:	e002      	b.n	8001bc4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f9      	bne.n	8001bbe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d175      	bne.n	8001cc4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bdc:	4b45      	ldr	r3, [pc, #276]	; (8001cf4 <HAL_ADC_Start+0x18c>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c12:	d106      	bne.n	8001c22 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	f023 0206 	bic.w	r2, r3, #6
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	645a      	str	r2, [r3, #68]	; 0x44
 8001c20:	e002      	b.n	8001c28 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c38:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c3a:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <HAL_ADC_Start+0x190>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10f      	bne.n	8001c66 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d143      	bne.n	8001cdc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	e03a      	b.n	8001cdc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a24      	ldr	r2, [pc, #144]	; (8001cfc <HAL_ADC_Start+0x194>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d10e      	bne.n	8001c8e <HAL_ADC_Start+0x126>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c8c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <HAL_ADC_Start+0x190>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d120      	bne.n	8001cdc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <HAL_ADC_Start+0x198>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d11b      	bne.n	8001cdc <HAL_ADC_Start+0x174>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d114      	bne.n	8001cdc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	e00b      	b.n	8001cdc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f043 0210 	orr.w	r2, r3, #16
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd4:	f043 0201 	orr.w	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	431bde83 	.word	0x431bde83
 8001cf4:	fffff8fe 	.word	0xfffff8fe
 8001cf8:	40012300 	.word	0x40012300
 8001cfc:	40012000 	.word	0x40012000
 8001d00:	40012200 	.word	0x40012200

08001d04 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d20:	d113      	bne.n	8001d4a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d30:	d10b      	bne.n	8001d4a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f043 0220 	orr.w	r2, r3, #32
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e063      	b.n	8001e12 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d4a:	f7ff fe99 	bl	8001a80 <HAL_GetTick>
 8001d4e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d50:	e021      	b.n	8001d96 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d01d      	beq.n	8001d96 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_ADC_PollForConversion+0x6c>
 8001d60:	f7ff fe8e 	bl	8001a80 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d212      	bcs.n	8001d96 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d00b      	beq.n	8001d96 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f043 0204 	orr.w	r2, r3, #4
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e03d      	b.n	8001e12 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d1d6      	bne.n	8001d52 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0212 	mvn.w	r2, #18
 8001dac:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d123      	bne.n	8001e10 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d11f      	bne.n	8001e10 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d111      	bne.n	8001e10 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1c>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e136      	b.n	80020be <HAL_ADC_ConfigChannel+0x28a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b09      	cmp	r3, #9
 8001e5e:	d93a      	bls.n	8001ed6 <HAL_ADC_ConfigChannel+0xa2>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e68:	d035      	beq.n	8001ed6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68d9      	ldr	r1, [r3, #12]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b1e      	subs	r3, #30
 8001e80:	2207      	movs	r2, #7
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a8d      	ldr	r2, [pc, #564]	; (80020cc <HAL_ADC_ConfigChannel+0x298>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d10a      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68d9      	ldr	r1, [r3, #12]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	061a      	lsls	r2, r3, #24
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eae:	e035      	b.n	8001f1c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68d9      	ldr	r1, [r3, #12]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4403      	add	r3, r0
 8001ec8:	3b1e      	subs	r3, #30
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ed4:	e022      	b.n	8001f1c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6919      	ldr	r1, [r3, #16]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	2207      	movs	r2, #7
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6919      	ldr	r1, [r3, #16]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4403      	add	r3, r0
 8001f12:	409a      	lsls	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b06      	cmp	r3, #6
 8001f22:	d824      	bhi.n	8001f6e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	3b05      	subs	r3, #5
 8001f36:	221f      	movs	r2, #31
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	400a      	ands	r2, r1
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3b05      	subs	r3, #5
 8001f60:	fa00 f203 	lsl.w	r2, r0, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f6c:	e04c      	b.n	8002008 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d824      	bhi.n	8001fc0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	3b23      	subs	r3, #35	; 0x23
 8001f88:	221f      	movs	r2, #31
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	400a      	ands	r2, r1
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b23      	subs	r3, #35	; 0x23
 8001fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbe:	e023      	b.n	8002008 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b41      	subs	r3, #65	; 0x41
 8001fd2:	221f      	movs	r2, #31
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43da      	mvns	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	400a      	ands	r2, r1
 8001fe0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3b41      	subs	r3, #65	; 0x41
 8001ffc:	fa00 f203 	lsl.w	r2, r0, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a30      	ldr	r2, [pc, #192]	; (80020d0 <HAL_ADC_ConfigChannel+0x29c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d10a      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x1f4>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800201a:	d105      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800201c:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a2c      	ldr	r2, [pc, #176]	; (80020d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002022:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002026:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a28      	ldr	r2, [pc, #160]	; (80020d0 <HAL_ADC_ConfigChannel+0x29c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d10f      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x21e>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b12      	cmp	r3, #18
 8002038:	d10b      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800203a:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002040:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002044:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002046:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800204c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002050:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <HAL_ADC_ConfigChannel+0x29c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d12b      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x280>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1a      	ldr	r2, [pc, #104]	; (80020cc <HAL_ADC_ConfigChannel+0x298>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d003      	beq.n	800206e <HAL_ADC_ConfigChannel+0x23a>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b11      	cmp	r3, #17
 800206c:	d122      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002074:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002078:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002080:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002084:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a10      	ldr	r2, [pc, #64]	; (80020cc <HAL_ADC_ConfigChannel+0x298>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d111      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_ADC_ConfigChannel+0x2a8>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0c9a      	lsrs	r2, r3, #18
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020a6:	e002      	b.n	80020ae <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f9      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	10000012 	.word	0x10000012
 80020d0:	40012000 	.word	0x40012000
 80020d4:	40012300 	.word	0x40012300
 80020d8:	20000000 	.word	0x20000000
 80020dc:	431bde83 	.word	0x431bde83

080020e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020e8:	4b78      	ldr	r3, [pc, #480]	; (80022cc <ADC_Init+0x1ec>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4a77      	ldr	r2, [pc, #476]	; (80022cc <ADC_Init+0x1ec>)
 80020ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020f2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020f4:	4b75      	ldr	r3, [pc, #468]	; (80022cc <ADC_Init+0x1ec>)
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4973      	ldr	r1, [pc, #460]	; (80022cc <ADC_Init+0x1ec>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	021a      	lsls	r2, r3, #8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6899      	ldr	r1, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	4a58      	ldr	r2, [pc, #352]	; (80022d0 <ADC_Init+0x1f0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d022      	beq.n	80021ba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002182:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6899      	ldr	r1, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6899      	ldr	r1, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	e00f      	b.n	80021da <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0202 	bic.w	r2, r2, #2
 80021e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	005a      	lsls	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01b      	beq.n	8002240 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002216:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002226:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	3b01      	subs	r3, #1
 8002234:	035a      	lsls	r2, r3, #13
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	e007      	b.n	8002250 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	3b01      	subs	r3, #1
 800226c:	051a      	lsls	r2, r3, #20
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002284:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6899      	ldr	r1, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002292:	025a      	lsls	r2, r3, #9
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6899      	ldr	r1, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	029a      	lsls	r2, r3, #10
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	609a      	str	r2, [r3, #8]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40012300 	.word	0x40012300
 80022d0:	0f000001 	.word	0x0f000001

080022d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <__NVIC_SetPriorityGrouping+0x40>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <__NVIC_SetPriorityGrouping+0x40>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00
 8002318:	05fa0000 	.word	0x05fa0000

0800231c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <__NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	2b00      	cmp	r3, #0
 8002348:	db0b      	blt.n	8002362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	f003 021f 	and.w	r2, r3, #31
 8002350:	4907      	ldr	r1, [pc, #28]	; (8002370 <__NVIC_EnableIRQ+0x38>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2001      	movs	r0, #1
 800235a:	fa00 f202 	lsl.w	r2, r0, r2
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000e100 	.word	0xe000e100

08002374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	db0a      	blt.n	800239e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	b2da      	uxtb	r2, r3
 800238c:	490c      	ldr	r1, [pc, #48]	; (80023c0 <__NVIC_SetPriority+0x4c>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	0112      	lsls	r2, r2, #4
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	440b      	add	r3, r1
 8002398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800239c:	e00a      	b.n	80023b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4908      	ldr	r1, [pc, #32]	; (80023c4 <__NVIC_SetPriority+0x50>)
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	3b04      	subs	r3, #4
 80023ac:	0112      	lsls	r2, r2, #4
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	440b      	add	r3, r1
 80023b2:	761a      	strb	r2, [r3, #24]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000e100 	.word	0xe000e100
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f1c3 0307 	rsb	r3, r3, #7
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	bf28      	it	cs
 80023e6:	2304      	movcs	r3, #4
 80023e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d902      	bls.n	80023f8 <NVIC_EncodePriority+0x30>
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3b03      	subs	r3, #3
 80023f6:	e000      	b.n	80023fa <NVIC_EncodePriority+0x32>
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	401a      	ands	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002410:	f04f 31ff 	mov.w	r1, #4294967295
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	43d9      	mvns	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	4313      	orrs	r3, r2
         );
}
 8002422:	4618      	mov	r0, r3
 8002424:	3724      	adds	r7, #36	; 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002440:	d301      	bcc.n	8002446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002442:	2301      	movs	r3, #1
 8002444:	e00f      	b.n	8002466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <SysTick_Config+0x40>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244e:	210f      	movs	r1, #15
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f7ff ff8e 	bl	8002374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <SysTick_Config+0x40>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <SysTick_Config+0x40>)
 8002460:	2207      	movs	r2, #7
 8002462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	e000e010 	.word	0xe000e010

08002474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff29 	bl	80022d4 <__NVIC_SetPriorityGrouping>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800249c:	f7ff ff3e 	bl	800231c <__NVIC_GetPriorityGrouping>
 80024a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	6978      	ldr	r0, [r7, #20]
 80024a8:	f7ff ff8e 	bl	80023c8 <NVIC_EncodePriority>
 80024ac:	4602      	mov	r2, r0
 80024ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff5d 	bl	8002374 <__NVIC_SetPriority>
}
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff31 	bl	8002338 <__NVIC_EnableIRQ>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffa2 	bl	8002430 <SysTick_Config>
 80024ec:	4603      	mov	r3, r0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06a      	b.n	80025e0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002510:	2b00      	cmp	r3, #0
 8002512:	d106      	bne.n	8002522 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2223      	movs	r2, #35	; 0x23
 8002518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7fe ffcb 	bl	80014b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002522:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <HAL_ETH_Init+0xf0>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	4a30      	ldr	r2, [pc, #192]	; (80025e8 <HAL_ETH_Init+0xf0>)
 8002528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800252c:	6453      	str	r3, [r2, #68]	; 0x44
 800252e:	4b2e      	ldr	r3, [pc, #184]	; (80025e8 <HAL_ETH_Init+0xf0>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800253a:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <HAL_ETH_Init+0xf4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <HAL_ETH_Init+0xf4>)
 8002540:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002544:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002546:	4b29      	ldr	r3, [pc, #164]	; (80025ec <HAL_ETH_Init+0xf4>)
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4927      	ldr	r1, [pc, #156]	; (80025ec <HAL_ETH_Init+0xf4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_ETH_Init+0xf4>)
 8002556:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800256e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002570:	f7ff fa86 	bl	8001a80 <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002576:	e011      	b.n	800259c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002578:	f7ff fa82 	bl	8001a80 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002586:	d909      	bls.n	800259c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2204      	movs	r2, #4
 800258c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	22e0      	movs	r2, #224	; 0xe0
 8002594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e021      	b.n	80025e0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1e4      	bne.n	8002578 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f958 	bl	8002864 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f9ff 	bl	80029b8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fa55 	bl	8002a6a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	461a      	mov	r2, r3
 80025c6:	2100      	movs	r1, #0
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f9bd 	bl	8002948 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2210      	movs	r2, #16
 80025da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40013800 	.word	0x40013800

080025f0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4b51      	ldr	r3, [pc, #324]	; (800274c <ETH_SetMACConfig+0x15c>)
 8002606:	4013      	ands	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	7c1b      	ldrb	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <ETH_SetMACConfig+0x28>
 8002612:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002616:	e000      	b.n	800261a <ETH_SetMACConfig+0x2a>
 8002618:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	7c5b      	ldrb	r3, [r3, #17]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <ETH_SetMACConfig+0x38>
 8002622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002626:	e000      	b.n	800262a <ETH_SetMACConfig+0x3a>
 8002628:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800262a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002630:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	7fdb      	ldrb	r3, [r3, #31]
 8002636:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002638:	431a      	orrs	r2, r3
                        macconf->Speed |
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800263e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	7f92      	ldrb	r2, [r2, #30]
 8002644:	2a00      	cmp	r2, #0
 8002646:	d102      	bne.n	800264e <ETH_SetMACConfig+0x5e>
 8002648:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800264c:	e000      	b.n	8002650 <ETH_SetMACConfig+0x60>
 800264e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002650:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	7f1b      	ldrb	r3, [r3, #28]
 8002656:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002658:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800265e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	791b      	ldrb	r3, [r3, #4]
 8002664:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002666:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800266e:	2a00      	cmp	r2, #0
 8002670:	d102      	bne.n	8002678 <ETH_SetMACConfig+0x88>
 8002672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002676:	e000      	b.n	800267a <ETH_SetMACConfig+0x8a>
 8002678:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800267a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	7bdb      	ldrb	r3, [r3, #15]
 8002680:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002682:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002688:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002690:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002692:	4313      	orrs	r3, r2
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f7ff f9f4 	bl	8001a98 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80026c6:	4013      	ands	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ce:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80026d6:	2a00      	cmp	r2, #0
 80026d8:	d101      	bne.n	80026de <ETH_SetMACConfig+0xee>
 80026da:	2280      	movs	r2, #128	; 0x80
 80026dc:	e000      	b.n	80026e0 <ETH_SetMACConfig+0xf0>
 80026de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026e0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80026ee:	2a01      	cmp	r2, #1
 80026f0:	d101      	bne.n	80026f6 <ETH_SetMACConfig+0x106>
 80026f2:	2208      	movs	r2, #8
 80026f4:	e000      	b.n	80026f8 <ETH_SetMACConfig+0x108>
 80026f6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80026f8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002700:	2a01      	cmp	r2, #1
 8002702:	d101      	bne.n	8002708 <ETH_SetMACConfig+0x118>
 8002704:	2204      	movs	r2, #4
 8002706:	e000      	b.n	800270a <ETH_SetMACConfig+0x11a>
 8002708:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800270a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002712:	2a01      	cmp	r2, #1
 8002714:	d101      	bne.n	800271a <ETH_SetMACConfig+0x12a>
 8002716:	2202      	movs	r2, #2
 8002718:	e000      	b.n	800271c <ETH_SetMACConfig+0x12c>
 800271a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800271c:	4313      	orrs	r3, r2
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4313      	orrs	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002734:	2001      	movs	r0, #1
 8002736:	f7ff f9af 	bl	8001a98 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	619a      	str	r2, [r3, #24]
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	ff20810f 	.word	0xff20810f

08002750 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <ETH_SetDMAConfig+0x110>)
 800276a:	4013      	ands	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	7b1b      	ldrb	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <ETH_SetDMAConfig+0x2c>
 8002776:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800277a:	e000      	b.n	800277e <ETH_SetDMAConfig+0x2e>
 800277c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	7b5b      	ldrb	r3, [r3, #13]
 8002782:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002784:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	7f52      	ldrb	r2, [r2, #29]
 800278a:	2a00      	cmp	r2, #0
 800278c:	d102      	bne.n	8002794 <ETH_SetDMAConfig+0x44>
 800278e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002792:	e000      	b.n	8002796 <ETH_SetDMAConfig+0x46>
 8002794:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002796:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	7b9b      	ldrb	r3, [r3, #14]
 800279c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800279e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	7f1b      	ldrb	r3, [r3, #28]
 80027aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80027ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	7f9b      	ldrb	r3, [r3, #30]
 80027b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027c4:	4313      	orrs	r3, r2
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d4:	461a      	mov	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027e6:	2001      	movs	r0, #1
 80027e8:	f7ff f956 	bl	8001a98 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f4:	461a      	mov	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	791b      	ldrb	r3, [r3, #4]
 80027fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002804:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800280a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002810:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002818:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800281a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002822:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002828:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002832:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002836:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002844:	2001      	movs	r0, #1
 8002846:	f7ff f927 	bl	8001a98 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002852:	461a      	mov	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6013      	str	r3, [r2, #0]
}
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	f8de3f23 	.word	0xf8de3f23

08002864 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b0a6      	sub	sp, #152	; 0x98
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800286c:	2301      	movs	r3, #1
 800286e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002878:	2300      	movs	r3, #0
 800287a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002888:	2300      	movs	r3, #0
 800288a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800288e:	2301      	movs	r3, #1
 8002890:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028a0:	2300      	movs	r3, #0
 80028a2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ca:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fe86 	bl	80025f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80028e4:	2301      	movs	r3, #1
 80028e6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80028e8:	2301      	movs	r3, #1
 80028ea:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80028ec:	2301      	movs	r3, #1
 80028ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002900:	2300      	movs	r3, #0
 8002902:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002906:	2300      	movs	r3, #0
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800290a:	2301      	movs	r3, #1
 800290c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002910:	2301      	movs	r3, #1
 8002912:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002918:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800291a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800291e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002924:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002926:	2301      	movs	r3, #1
 8002928:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800292c:	2300      	movs	r3, #0
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002934:	f107 0308 	add.w	r3, r7, #8
 8002938:	4619      	mov	r1, r3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ff08 	bl	8002750 <ETH_SetDMAConfig>
}
 8002940:	bf00      	nop
 8002942:	3798      	adds	r7, #152	; 0x98
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3305      	adds	r3, #5
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	3204      	adds	r2, #4
 8002960:	7812      	ldrb	r2, [r2, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <ETH_MACAddressConfig+0x68>)
 800296a:	4413      	add	r3, r2
 800296c:	461a      	mov	r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3303      	adds	r3, #3
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	061a      	lsls	r2, r3, #24
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3302      	adds	r3, #2
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	041b      	lsls	r3, r3, #16
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3301      	adds	r3, #1
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	4313      	orrs	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	7812      	ldrb	r2, [r2, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <ETH_MACAddressConfig+0x6c>)
 800299a:	4413      	add	r3, r2
 800299c:	461a      	mov	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	6013      	str	r3, [r2, #0]
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40028040 	.word	0x40028040
 80029b4:	40028044 	.word	0x40028044

080029b8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e03e      	b.n	8002a44 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68d9      	ldr	r1, [r3, #12]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2200      	movs	r2, #0
 80029e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	3206      	adds	r2, #6
 80029f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d80c      	bhi.n	8002a28 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68d9      	ldr	r1, [r3, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	440b      	add	r3, r1
 8002a20:	461a      	mov	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	e004      	b.n	8002a32 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3301      	adds	r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d9bd      	bls.n	80029c6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5c:	611a      	str	r2, [r3, #16]
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e046      	b.n	8002b06 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6919      	ldr	r1, [r3, #16]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	440b      	add	r3, r1
 8002a88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2200      	movs	r2, #0
 8002a94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ab4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002abc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	3212      	adds	r2, #18
 8002ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d80c      	bhi.n	8002af6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6919      	ldr	r1, [r3, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	60da      	str	r2, [r3, #12]
 8002af4:	e004      	b.n	8002b00 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3301      	adds	r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d9b5      	bls.n	8002a78 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b36:	60da      	str	r2, [r3, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	; 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e175      	b.n	8002e50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	f040 8164 	bne.w	8002e4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d005      	beq.n	8002b9a <HAL_GPIO_Init+0x56>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d130      	bne.n	8002bfc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 0201 	and.w	r2, r3, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d017      	beq.n	8002c38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d123      	bne.n	8002c8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	08da      	lsrs	r2, r3, #3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3208      	adds	r2, #8
 8002c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	08da      	lsrs	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3208      	adds	r2, #8
 8002c86:	69b9      	ldr	r1, [r7, #24]
 8002c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0203 	and.w	r2, r3, #3
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80be 	beq.w	8002e4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cce:	4b66      	ldr	r3, [pc, #408]	; (8002e68 <HAL_GPIO_Init+0x324>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	4a65      	ldr	r2, [pc, #404]	; (8002e68 <HAL_GPIO_Init+0x324>)
 8002cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cda:	4b63      	ldr	r3, [pc, #396]	; (8002e68 <HAL_GPIO_Init+0x324>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ce6:	4a61      	ldr	r2, [pc, #388]	; (8002e6c <HAL_GPIO_Init+0x328>)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	089b      	lsrs	r3, r3, #2
 8002cec:	3302      	adds	r3, #2
 8002cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	220f      	movs	r2, #15
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a58      	ldr	r2, [pc, #352]	; (8002e70 <HAL_GPIO_Init+0x32c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d037      	beq.n	8002d82 <HAL_GPIO_Init+0x23e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a57      	ldr	r2, [pc, #348]	; (8002e74 <HAL_GPIO_Init+0x330>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d031      	beq.n	8002d7e <HAL_GPIO_Init+0x23a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a56      	ldr	r2, [pc, #344]	; (8002e78 <HAL_GPIO_Init+0x334>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d02b      	beq.n	8002d7a <HAL_GPIO_Init+0x236>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a55      	ldr	r2, [pc, #340]	; (8002e7c <HAL_GPIO_Init+0x338>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d025      	beq.n	8002d76 <HAL_GPIO_Init+0x232>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a54      	ldr	r2, [pc, #336]	; (8002e80 <HAL_GPIO_Init+0x33c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d01f      	beq.n	8002d72 <HAL_GPIO_Init+0x22e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a53      	ldr	r2, [pc, #332]	; (8002e84 <HAL_GPIO_Init+0x340>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d019      	beq.n	8002d6e <HAL_GPIO_Init+0x22a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_GPIO_Init+0x344>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d013      	beq.n	8002d6a <HAL_GPIO_Init+0x226>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a51      	ldr	r2, [pc, #324]	; (8002e8c <HAL_GPIO_Init+0x348>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00d      	beq.n	8002d66 <HAL_GPIO_Init+0x222>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a50      	ldr	r2, [pc, #320]	; (8002e90 <HAL_GPIO_Init+0x34c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d007      	beq.n	8002d62 <HAL_GPIO_Init+0x21e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4f      	ldr	r2, [pc, #316]	; (8002e94 <HAL_GPIO_Init+0x350>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <HAL_GPIO_Init+0x21a>
 8002d5a:	2309      	movs	r3, #9
 8002d5c:	e012      	b.n	8002d84 <HAL_GPIO_Init+0x240>
 8002d5e:	230a      	movs	r3, #10
 8002d60:	e010      	b.n	8002d84 <HAL_GPIO_Init+0x240>
 8002d62:	2308      	movs	r3, #8
 8002d64:	e00e      	b.n	8002d84 <HAL_GPIO_Init+0x240>
 8002d66:	2307      	movs	r3, #7
 8002d68:	e00c      	b.n	8002d84 <HAL_GPIO_Init+0x240>
 8002d6a:	2306      	movs	r3, #6
 8002d6c:	e00a      	b.n	8002d84 <HAL_GPIO_Init+0x240>
 8002d6e:	2305      	movs	r3, #5
 8002d70:	e008      	b.n	8002d84 <HAL_GPIO_Init+0x240>
 8002d72:	2304      	movs	r3, #4
 8002d74:	e006      	b.n	8002d84 <HAL_GPIO_Init+0x240>
 8002d76:	2303      	movs	r3, #3
 8002d78:	e004      	b.n	8002d84 <HAL_GPIO_Init+0x240>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e002      	b.n	8002d84 <HAL_GPIO_Init+0x240>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_GPIO_Init+0x240>
 8002d82:	2300      	movs	r3, #0
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	f002 0203 	and.w	r2, r2, #3
 8002d8a:	0092      	lsls	r2, r2, #2
 8002d8c:	4093      	lsls	r3, r2
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d94:	4935      	ldr	r1, [pc, #212]	; (8002e6c <HAL_GPIO_Init+0x328>)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002da2:	4b3d      	ldr	r3, [pc, #244]	; (8002e98 <HAL_GPIO_Init+0x354>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dc6:	4a34      	ldr	r2, [pc, #208]	; (8002e98 <HAL_GPIO_Init+0x354>)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dcc:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <HAL_GPIO_Init+0x354>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002df0:	4a29      	ldr	r2, [pc, #164]	; (8002e98 <HAL_GPIO_Init+0x354>)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002df6:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_GPIO_Init+0x354>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e1a:	4a1f      	ldr	r2, [pc, #124]	; (8002e98 <HAL_GPIO_Init+0x354>)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e20:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <HAL_GPIO_Init+0x354>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e44:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <HAL_GPIO_Init+0x354>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b0f      	cmp	r3, #15
 8002e54:	f67f ae86 	bls.w	8002b64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3724      	adds	r7, #36	; 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40013800 	.word	0x40013800
 8002e70:	40020000 	.word	0x40020000
 8002e74:	40020400 	.word	0x40020400
 8002e78:	40020800 	.word	0x40020800
 8002e7c:	40020c00 	.word	0x40020c00
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40021400 	.word	0x40021400
 8002e88:	40021800 	.word	0x40021800
 8002e8c:	40021c00 	.word	0x40021c00
 8002e90:	40022000 	.word	0x40022000
 8002e94:	40022400 	.word	0x40022400
 8002e98:	40013c00 	.word	0x40013c00

08002e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eac:	787b      	ldrb	r3, [r7, #1]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002eb8:	e003      	b.n	8002ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	041a      	lsls	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	619a      	str	r2, [r3, #24]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ee0:	887a      	ldrh	r2, [r7, #2]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	041a      	lsls	r2, r3, #16
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	887b      	ldrh	r3, [r7, #2]
 8002eee:	400b      	ands	r3, r1
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	619a      	str	r2, [r3, #24]
}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d006      	beq.n	8002f28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f1a:	4a05      	ldr	r2, [pc, #20]	; (8002f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe f8f4 	bl	8001110 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40013c00 	.word	0x40013c00

08002f34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f36:	b08f      	sub	sp, #60	; 0x3c
 8002f38:	af0a      	add	r7, sp, #40	; 0x28
 8002f3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e116      	b.n	8003174 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d106      	bne.n	8002f66 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7fe fc15 	bl	8001790 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2203      	movs	r2, #3
 8002f6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f002 fe29 	bl	8005bdc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	687e      	ldr	r6, [r7, #4]
 8002f92:	466d      	mov	r5, sp
 8002f94:	f106 0410 	add.w	r4, r6, #16
 8002f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fa4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fa8:	1d33      	adds	r3, r6, #4
 8002faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fac:	6838      	ldr	r0, [r7, #0]
 8002fae:	f002 fdbd 	bl	8005b2c <USB_CoreInit>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0d7      	b.n	8003174 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f002 fe17 	bl	8005bfe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	e04a      	b.n	800306c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	333d      	adds	r3, #61	; 0x3d
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	333c      	adds	r3, #60	; 0x3c
 8002ffa:	7bfa      	ldrb	r2, [r7, #15]
 8002ffc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	b298      	uxth	r0, r3
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3344      	adds	r3, #68	; 0x44
 8003012:	4602      	mov	r2, r0
 8003014:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3340      	adds	r3, #64	; 0x40
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800302a:	7bfa      	ldrb	r2, [r7, #15]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3348      	adds	r3, #72	; 0x48
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	334c      	adds	r3, #76	; 0x4c
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	3354      	adds	r3, #84	; 0x54
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	3301      	adds	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	d3af      	bcc.n	8002fd6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	e044      	b.n	8003106 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	3301      	adds	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	d3b5      	bcc.n	800307c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	687e      	ldr	r6, [r7, #4]
 8003118:	466d      	mov	r5, sp
 800311a:	f106 0410 	add.w	r4, r6, #16
 800311e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003126:	e894 0003 	ldmia.w	r4, {r0, r1}
 800312a:	e885 0003 	stmia.w	r5, {r0, r1}
 800312e:	1d33      	adds	r3, r6, #4
 8003130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003132:	6838      	ldr	r0, [r7, #0]
 8003134:	f002 fdb0 	bl	8005c98 <USB_DevInit>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e014      	b.n	8003174 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f80a 	bl	800317c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f002 ff6e 	bl	800604e <USB_DevDisconnect>

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800317c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	10000003 	.word	0x10000003

080031c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40007000 	.word	0x40007000

080031e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	4b23      	ldr	r3, [pc, #140]	; (800327c <HAL_PWREx_EnableOverDrive+0x98>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a22      	ldr	r2, [pc, #136]	; (800327c <HAL_PWREx_EnableOverDrive+0x98>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <HAL_PWREx_EnableOverDrive+0x98>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003206:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003212:	f7fe fc35 	bl	8001a80 <HAL_GetTick>
 8003216:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003218:	e009      	b.n	800322e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800321a:	f7fe fc31 	bl	8001a80 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003228:	d901      	bls.n	800322e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e022      	b.n	8003274 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323a:	d1ee      	bne.n	800321a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a0f      	ldr	r2, [pc, #60]	; (8003280 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003246:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003248:	f7fe fc1a 	bl	8001a80 <HAL_GetTick>
 800324c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800324e:	e009      	b.n	8003264 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003250:	f7fe fc16 	bl	8001a80 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800325e:	d901      	bls.n	8003264 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e007      	b.n	8003274 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003270:	d1ee      	bne.n	8003250 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40023800 	.word	0x40023800
 8003280:	40007000 	.word	0x40007000

08003284 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800328c:	2300      	movs	r3, #0
 800328e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e29b      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8087 	beq.w	80033b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a8:	4b96      	ldr	r3, [pc, #600]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d00c      	beq.n	80032ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b4:	4b93      	ldr	r3, [pc, #588]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d112      	bne.n	80032e6 <HAL_RCC_OscConfig+0x62>
 80032c0:	4b90      	ldr	r3, [pc, #576]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032cc:	d10b      	bne.n	80032e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ce:	4b8d      	ldr	r3, [pc, #564]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d06c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x130>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d168      	bne.n	80033b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e275      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ee:	d106      	bne.n	80032fe <HAL_RCC_OscConfig+0x7a>
 80032f0:	4b84      	ldr	r3, [pc, #528]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a83      	ldr	r2, [pc, #524]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80032f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	e02e      	b.n	800335c <HAL_RCC_OscConfig+0xd8>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0x9c>
 8003306:	4b7f      	ldr	r3, [pc, #508]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a7e      	ldr	r2, [pc, #504]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 800330c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b7c      	ldr	r3, [pc, #496]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a7b      	ldr	r2, [pc, #492]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e01d      	b.n	800335c <HAL_RCC_OscConfig+0xd8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0xc0>
 800332a:	4b76      	ldr	r3, [pc, #472]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a75      	ldr	r2, [pc, #468]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b73      	ldr	r3, [pc, #460]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a72      	ldr	r2, [pc, #456]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0xd8>
 8003344:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a6e      	ldr	r2, [pc, #440]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b6c      	ldr	r3, [pc, #432]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6b      	ldr	r2, [pc, #428]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fb8c 	bl	8001a80 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fb88 	bl	8001a80 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e229      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b61      	ldr	r3, [pc, #388]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0xe8>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fe fb78 	bl	8001a80 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe fb74 	bl	8001a80 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e215      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	4b57      	ldr	r3, [pc, #348]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x110>
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d069      	beq.n	8003496 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033c2:	4b50      	ldr	r3, [pc, #320]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ce:	4b4d      	ldr	r3, [pc, #308]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d11c      	bne.n	8003414 <HAL_RCC_OscConfig+0x190>
 80033da:	4b4a      	ldr	r3, [pc, #296]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d116      	bne.n	8003414 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_RCC_OscConfig+0x17a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e1e9      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fe:	4b41      	ldr	r3, [pc, #260]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	493d      	ldr	r1, [pc, #244]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003412:	e040      	b.n	8003496 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d023      	beq.n	8003464 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800341c:	4b39      	ldr	r3, [pc, #228]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a38      	ldr	r2, [pc, #224]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe fb2a 	bl	8001a80 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003430:	f7fe fb26 	bl	8001a80 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1c7      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003442:	4b30      	ldr	r3, [pc, #192]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4929      	ldr	r1, [pc, #164]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
 8003462:	e018      	b.n	8003496 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003464:	4b27      	ldr	r3, [pc, #156]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a26      	ldr	r2, [pc, #152]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe fb06 	bl	8001a80 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003478:	f7fe fb02 	bl	8001a80 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e1a3      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348a:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d038      	beq.n	8003514 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d019      	beq.n	80034de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034aa:	4b16      	ldr	r3, [pc, #88]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80034ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ae:	4a15      	ldr	r2, [pc, #84]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fe fae3 	bl	8001a80 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034be:	f7fe fadf 	bl	8001a80 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e180      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80034d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x23a>
 80034dc:	e01a      	b.n	8003514 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80034e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e2:	4a08      	ldr	r2, [pc, #32]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fe fac9 	bl	8001a80 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	e00a      	b.n	8003508 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fe fac5 	bl	8001a80 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d903      	bls.n	8003508 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e166      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
 8003504:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003508:	4b92      	ldr	r3, [pc, #584]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ee      	bne.n	80034f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80a4 	beq.w	800366a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003522:	4b8c      	ldr	r3, [pc, #560]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10d      	bne.n	800354a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	4b89      	ldr	r3, [pc, #548]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	4a88      	ldr	r2, [pc, #544]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003538:	6413      	str	r3, [r2, #64]	; 0x40
 800353a:	4b86      	ldr	r3, [pc, #536]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800354a:	4b83      	ldr	r3, [pc, #524]	; (8003758 <HAL_RCC_OscConfig+0x4d4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d118      	bne.n	8003588 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003556:	4b80      	ldr	r3, [pc, #512]	; (8003758 <HAL_RCC_OscConfig+0x4d4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a7f      	ldr	r2, [pc, #508]	; (8003758 <HAL_RCC_OscConfig+0x4d4>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003562:	f7fe fa8d 	bl	8001a80 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356a:	f7fe fa89 	bl	8001a80 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b64      	cmp	r3, #100	; 0x64
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e12a      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800357c:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_RCC_OscConfig+0x4d4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x31a>
 8003590:	4b70      	ldr	r3, [pc, #448]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	4a6f      	ldr	r2, [pc, #444]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6713      	str	r3, [r2, #112]	; 0x70
 800359c:	e02d      	b.n	80035fa <HAL_RCC_OscConfig+0x376>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x33c>
 80035a6:	4b6b      	ldr	r3, [pc, #428]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a6a      	ldr	r2, [pc, #424]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
 80035b2:	4b68      	ldr	r3, [pc, #416]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	4a67      	ldr	r2, [pc, #412]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	6713      	str	r3, [r2, #112]	; 0x70
 80035be:	e01c      	b.n	80035fa <HAL_RCC_OscConfig+0x376>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d10c      	bne.n	80035e2 <HAL_RCC_OscConfig+0x35e>
 80035c8:	4b62      	ldr	r3, [pc, #392]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	4a61      	ldr	r2, [pc, #388]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	6713      	str	r3, [r2, #112]	; 0x70
 80035d4:	4b5f      	ldr	r3, [pc, #380]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4a5e      	ldr	r2, [pc, #376]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
 80035e0:	e00b      	b.n	80035fa <HAL_RCC_OscConfig+0x376>
 80035e2:	4b5c      	ldr	r3, [pc, #368]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	4a5b      	ldr	r2, [pc, #364]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70
 80035ee:	4b59      	ldr	r3, [pc, #356]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	4a58      	ldr	r2, [pc, #352]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d015      	beq.n	800362e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003602:	f7fe fa3d 	bl	8001a80 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003608:	e00a      	b.n	8003620 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f7fe fa39 	bl	8001a80 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	; 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0d8      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003620:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ee      	beq.n	800360a <HAL_RCC_OscConfig+0x386>
 800362c:	e014      	b.n	8003658 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fe fa27 	bl	8001a80 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003634:	e00a      	b.n	800364c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fe fa23 	bl	8001a80 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	; 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e0c2      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364c:	4b41      	ldr	r3, [pc, #260]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ee      	bne.n	8003636 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d105      	bne.n	800366a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365e:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	4a3c      	ldr	r2, [pc, #240]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 8003664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003668:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80ae 	beq.w	80037d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003674:	4b37      	ldr	r3, [pc, #220]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b08      	cmp	r3, #8
 800367e:	d06d      	beq.n	800375c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d14b      	bne.n	8003720 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003688:	4b32      	ldr	r3, [pc, #200]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a31      	ldr	r2, [pc, #196]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 800368e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fe f9f4 	bl	8001a80 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369c:	f7fe f9f0 	bl	8001a80 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e091      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	4b29      	ldr	r3, [pc, #164]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	019b      	lsls	r3, r3, #6
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	3b01      	subs	r3, #1
 80036d4:	041b      	lsls	r3, r3, #16
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	071b      	lsls	r3, r3, #28
 80036e6:	491b      	ldr	r1, [pc, #108]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 80036f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fe f9c2 	bl	8001a80 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003700:	f7fe f9be 	bl	8001a80 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e05f      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x47c>
 800371e:	e057      	b.n	80037d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 8003726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800372a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fe f9a8 	bl	8001a80 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe f9a4 	bl	8001a80 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e045      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	4b03      	ldr	r3, [pc, #12]	; (8003754 <HAL_RCC_OscConfig+0x4d0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x4b0>
 8003752:	e03d      	b.n	80037d0 <HAL_RCC_OscConfig+0x54c>
 8003754:	40023800 	.word	0x40023800
 8003758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800375c:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <HAL_RCC_OscConfig+0x558>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d030      	beq.n	80037cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d129      	bne.n	80037cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d122      	bne.n	80037cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800378c:	4013      	ands	r3, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003792:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003794:	4293      	cmp	r3, r2
 8003796:	d119      	bne.n	80037cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	3b01      	subs	r3, #1
 80037a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d10f      	bne.n	80037cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800

080037e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0d0      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f8:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d910      	bls.n	8003828 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b67      	ldr	r3, [pc, #412]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 020f 	bic.w	r2, r3, #15
 800380e:	4965      	ldr	r1, [pc, #404]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0b8      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003840:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a58      	ldr	r2, [pc, #352]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800384a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003858:	4b53      	ldr	r3, [pc, #332]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a52      	ldr	r2, [pc, #328]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 800385e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003862:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003864:	4b50      	ldr	r3, [pc, #320]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	494d      	ldr	r1, [pc, #308]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d040      	beq.n	8003904 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d115      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a2:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e073      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b2:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e06b      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c2:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f023 0203 	bic.w	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4936      	ldr	r1, [pc, #216]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d4:	f7fe f8d4 	bl	8001a80 <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038dc:	f7fe f8d0 	bl	8001a80 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e053      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 020c 	and.w	r2, r3, #12
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	429a      	cmp	r2, r3
 8003902:	d1eb      	bne.n	80038dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003904:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d210      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 020f 	bic.w	r2, r3, #15
 800391a:	4922      	ldr	r1, [pc, #136]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e032      	b.n	800399a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4916      	ldr	r1, [pc, #88]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	490e      	ldr	r1, [pc, #56]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003972:	f000 f821 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8003976:	4602      	mov	r2, r0
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	490a      	ldr	r1, [pc, #40]	; (80039ac <HAL_RCC_ClockConfig+0x1cc>)
 8003984:	5ccb      	ldrb	r3, [r1, r3]
 8003986:	fa22 f303 	lsr.w	r3, r2, r3
 800398a:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <HAL_RCC_ClockConfig+0x1d0>)
 800398c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1d4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe f830 	bl	80019f8 <HAL_InitTick>

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023c00 	.word	0x40023c00
 80039a8:	40023800 	.word	0x40023800
 80039ac:	0800fb84 	.word	0x0800fb84
 80039b0:	20000000 	.word	0x20000000
 80039b4:	20000004 	.word	0x20000004

080039b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b094      	sub	sp, #80	; 0x50
 80039be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	647b      	str	r3, [r7, #68]	; 0x44
 80039c4:	2300      	movs	r3, #0
 80039c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c8:	2300      	movs	r3, #0
 80039ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039d0:	4b79      	ldr	r3, [pc, #484]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d00d      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x40>
 80039dc:	2b08      	cmp	r3, #8
 80039de:	f200 80e1 	bhi.w	8003ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x34>
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d003      	beq.n	80039f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ea:	e0db      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039ec:	4b73      	ldr	r3, [pc, #460]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x204>)
 80039ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039f0:	e0db      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039f2:	4b73      	ldr	r3, [pc, #460]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x208>)
 80039f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039f6:	e0d8      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f8:	4b6f      	ldr	r3, [pc, #444]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a00:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a02:	4b6d      	ldr	r3, [pc, #436]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d063      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0e:	4b6a      	ldr	r3, [pc, #424]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	099b      	lsrs	r3, r3, #6
 8003a14:	2200      	movs	r2, #0
 8003a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a20:	633b      	str	r3, [r7, #48]	; 0x30
 8003a22:	2300      	movs	r3, #0
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
 8003a26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a2a:	4622      	mov	r2, r4
 8003a2c:	462b      	mov	r3, r5
 8003a2e:	f04f 0000 	mov.w	r0, #0
 8003a32:	f04f 0100 	mov.w	r1, #0
 8003a36:	0159      	lsls	r1, r3, #5
 8003a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a3c:	0150      	lsls	r0, r2, #5
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4621      	mov	r1, r4
 8003a44:	1a51      	subs	r1, r2, r1
 8003a46:	6139      	str	r1, [r7, #16]
 8003a48:	4629      	mov	r1, r5
 8003a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a5c:	4659      	mov	r1, fp
 8003a5e:	018b      	lsls	r3, r1, #6
 8003a60:	4651      	mov	r1, sl
 8003a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a66:	4651      	mov	r1, sl
 8003a68:	018a      	lsls	r2, r1, #6
 8003a6a:	4651      	mov	r1, sl
 8003a6c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a70:	4659      	mov	r1, fp
 8003a72:	eb63 0901 	sbc.w	r9, r3, r1
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a8a:	4690      	mov	r8, r2
 8003a8c:	4699      	mov	r9, r3
 8003a8e:	4623      	mov	r3, r4
 8003a90:	eb18 0303 	adds.w	r3, r8, r3
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	462b      	mov	r3, r5
 8003a98:	eb49 0303 	adc.w	r3, r9, r3
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aaa:	4629      	mov	r1, r5
 8003aac:	024b      	lsls	r3, r1, #9
 8003aae:	4621      	mov	r1, r4
 8003ab0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	024a      	lsls	r2, r1, #9
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003abe:	2200      	movs	r2, #0
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ac4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ac8:	f7fc fdde 	bl	8000688 <__aeabi_uldivmod>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad4:	e058      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad6:	4b38      	ldr	r3, [pc, #224]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	099b      	lsrs	r3, r3, #6
 8003adc:	2200      	movs	r2, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
 8003aec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003af0:	4642      	mov	r2, r8
 8003af2:	464b      	mov	r3, r9
 8003af4:	f04f 0000 	mov.w	r0, #0
 8003af8:	f04f 0100 	mov.w	r1, #0
 8003afc:	0159      	lsls	r1, r3, #5
 8003afe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b02:	0150      	lsls	r0, r2, #5
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4641      	mov	r1, r8
 8003b0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b0e:	4649      	mov	r1, r9
 8003b10:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b28:	ebb2 040a 	subs.w	r4, r2, sl
 8003b2c:	eb63 050b 	sbc.w	r5, r3, fp
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	00eb      	lsls	r3, r5, #3
 8003b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b3e:	00e2      	lsls	r2, r4, #3
 8003b40:	4614      	mov	r4, r2
 8003b42:	461d      	mov	r5, r3
 8003b44:	4643      	mov	r3, r8
 8003b46:	18e3      	adds	r3, r4, r3
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	464b      	mov	r3, r9
 8003b4c:	eb45 0303 	adc.w	r3, r5, r3
 8003b50:	607b      	str	r3, [r7, #4]
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b5e:	4629      	mov	r1, r5
 8003b60:	028b      	lsls	r3, r1, #10
 8003b62:	4621      	mov	r1, r4
 8003b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b68:	4621      	mov	r1, r4
 8003b6a:	028a      	lsls	r2, r1, #10
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b72:	2200      	movs	r2, #0
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	61fa      	str	r2, [r7, #28]
 8003b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b7c:	f7fc fd84 	bl	8000688 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4613      	mov	r3, r2
 8003b86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	0c1b      	lsrs	r3, r3, #16
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	3301      	adds	r3, #1
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ba2:	e002      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ba6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3750      	adds	r7, #80	; 0x50
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	007a1200 	.word	0x007a1200

08003bc4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000000 	.word	0x20000000

08003bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003be0:	f7ff fff0 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0a9b      	lsrs	r3, r3, #10
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4903      	ldr	r1, [pc, #12]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	0800fb94 	.word	0x0800fb94

08003c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c08:	f7ff ffdc 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0b5b      	lsrs	r3, r3, #13
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4903      	ldr	r1, [pc, #12]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	0800fb94 	.word	0x0800fb94

08003c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d012      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c54:	4b69      	ldr	r3, [pc, #420]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4a68      	ldr	r2, [pc, #416]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c5e:	6093      	str	r3, [r2, #8]
 8003c60:	4b66      	ldr	r3, [pc, #408]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c68:	4964      	ldr	r1, [pc, #400]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d017      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c86:	4b5d      	ldr	r3, [pc, #372]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	4959      	ldr	r1, [pc, #356]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca4:	d101      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d017      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cc2:	4b4e      	ldr	r3, [pc, #312]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	494a      	ldr	r1, [pc, #296]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 808b 	beq.w	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d10:	4b3a      	ldr	r3, [pc, #232]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	4a39      	ldr	r2, [pc, #228]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1c:	4b37      	ldr	r3, [pc, #220]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d28:	4b35      	ldr	r3, [pc, #212]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a34      	ldr	r2, [pc, #208]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d34:	f7fd fea4 	bl	8001a80 <HAL_GetTick>
 8003d38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3c:	f7fd fea0 	bl	8001a80 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e38f      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d4e:	4b2c      	ldr	r3, [pc, #176]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d5a:	4b28      	ldr	r3, [pc, #160]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d035      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d02e      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d78:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d82:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8e:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	4a1a      	ldr	r2, [pc, #104]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d9a:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003da0:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d114      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fd fe68 	bl	8001a80 <HAL_GetTick>
 8003db0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db2:	e00a      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db4:	f7fd fe64 	bl	8001a80 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e351      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ee      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003de2:	d111      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003df2:	400b      	ands	r3, r1
 8003df4:	4901      	ldr	r1, [pc, #4]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	608b      	str	r3, [r1, #8]
 8003dfa:	e00b      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	40007000 	.word	0x40007000
 8003e04:	0ffffcff 	.word	0x0ffffcff
 8003e08:	4bac      	ldr	r3, [pc, #688]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4aab      	ldr	r2, [pc, #684]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e12:	6093      	str	r3, [r2, #8]
 8003e14:	4ba9      	ldr	r3, [pc, #676]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e20:	49a6      	ldr	r1, [pc, #664]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d010      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e32:	4ba2      	ldr	r3, [pc, #648]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e38:	4aa0      	ldr	r2, [pc, #640]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e42:	4b9e      	ldr	r3, [pc, #632]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e44:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	499b      	ldr	r1, [pc, #620]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e60:	4b96      	ldr	r3, [pc, #600]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e6e:	4993      	ldr	r1, [pc, #588]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e82:	4b8e      	ldr	r3, [pc, #568]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e90:	498a      	ldr	r1, [pc, #552]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ea4:	4b85      	ldr	r3, [pc, #532]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb2:	4982      	ldr	r1, [pc, #520]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ec6:	4b7d      	ldr	r3, [pc, #500]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4979      	ldr	r1, [pc, #484]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ee8:	4b74      	ldr	r3, [pc, #464]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	f023 0203 	bic.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	4971      	ldr	r1, [pc, #452]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f0a:	4b6c      	ldr	r3, [pc, #432]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f10:	f023 020c 	bic.w	r2, r3, #12
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f18:	4968      	ldr	r1, [pc, #416]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f2c:	4b63      	ldr	r3, [pc, #396]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3a:	4960      	ldr	r1, [pc, #384]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f4e:	4b5b      	ldr	r3, [pc, #364]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5c:	4957      	ldr	r1, [pc, #348]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f70:	4b52      	ldr	r3, [pc, #328]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	494f      	ldr	r1, [pc, #316]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f92:	4b4a      	ldr	r3, [pc, #296]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa0:	4946      	ldr	r1, [pc, #280]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003fb4:	4b41      	ldr	r3, [pc, #260]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc2:	493e      	ldr	r1, [pc, #248]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fd6:	4b39      	ldr	r3, [pc, #228]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe4:	4935      	ldr	r1, [pc, #212]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ff8:	4b30      	ldr	r3, [pc, #192]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004006:	492d      	ldr	r1, [pc, #180]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d011      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800401a:	4b28      	ldr	r3, [pc, #160]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004028:	4924      	ldr	r1, [pc, #144]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004038:	d101      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800403a:	2301      	movs	r3, #1
 800403c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800405a:	4b18      	ldr	r3, [pc, #96]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004068:	4914      	ldr	r1, [pc, #80]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00b      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800408c:	490b      	ldr	r1, [pc, #44]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00f      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b0:	4902      	ldr	r1, [pc, #8]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040b8:	e002      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00b      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040cc:	4b8a      	ldr	r3, [pc, #552]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040dc:	4986      	ldr	r1, [pc, #536]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00b      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040f0:	4b81      	ldr	r3, [pc, #516]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004100:	497d      	ldr	r1, [pc, #500]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d006      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80d6 	beq.w	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800411c:	4b76      	ldr	r3, [pc, #472]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a75      	ldr	r2, [pc, #468]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004122:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004128:	f7fd fcaa 	bl	8001a80 <HAL_GetTick>
 800412c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004130:	f7fd fca6 	bl	8001a80 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	; 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e195      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004142:	4b6d      	ldr	r3, [pc, #436]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d021      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11d      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004162:	4b65      	ldr	r3, [pc, #404]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004170:	4b61      	ldr	r3, [pc, #388]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004176:	0e1b      	lsrs	r3, r3, #24
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	019a      	lsls	r2, r3, #6
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	431a      	orrs	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	071b      	lsls	r3, r3, #28
 8004196:	4958      	ldr	r1, [pc, #352]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d004      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d02e      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c8:	d129      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041ca:	4b4b      	ldr	r3, [pc, #300]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041d8:	4b47      	ldr	r3, [pc, #284]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041de:	0f1b      	lsrs	r3, r3, #28
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	019a      	lsls	r2, r3, #6
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	041b      	lsls	r3, r3, #16
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	061b      	lsls	r3, r3, #24
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	071b      	lsls	r3, r3, #28
 80041fe:	493e      	ldr	r1, [pc, #248]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004206:	4b3c      	ldr	r3, [pc, #240]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800420c:	f023 021f 	bic.w	r2, r3, #31
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	3b01      	subs	r3, #1
 8004216:	4938      	ldr	r1, [pc, #224]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01d      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800422a:	4b33      	ldr	r3, [pc, #204]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004230:	0e1b      	lsrs	r3, r3, #24
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004238:	4b2f      	ldr	r3, [pc, #188]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800423a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423e:	0f1b      	lsrs	r3, r3, #28
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	019a      	lsls	r2, r3, #6
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	041b      	lsls	r3, r3, #16
 8004252:	431a      	orrs	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	061b      	lsls	r3, r3, #24
 8004258:	431a      	orrs	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	071b      	lsls	r3, r3, #28
 800425e:	4926      	ldr	r1, [pc, #152]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d011      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	019a      	lsls	r2, r3, #6
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	041b      	lsls	r3, r3, #16
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	061b      	lsls	r3, r3, #24
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	071b      	lsls	r3, r3, #28
 800428e:	491a      	ldr	r1, [pc, #104]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004296:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a17      	ldr	r2, [pc, #92]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a2:	f7fd fbed 	bl	8001a80 <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042aa:	f7fd fbe9 	bl	8001a80 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b64      	cmp	r3, #100	; 0x64
 80042b6:	d901      	bls.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e0d8      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042bc:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	f040 80ce 	bne.w	800446c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042d0:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a08      	ldr	r2, [pc, #32]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042dc:	f7fd fbd0 	bl	8001a80 <HAL_GetTick>
 80042e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042e2:	e00b      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042e4:	f7fd fbcc 	bl	8001a80 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d904      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e0bb      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042fc:	4b5e      	ldr	r3, [pc, #376]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004308:	d0ec      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004326:	2b00      	cmp	r3, #0
 8004328:	d02e      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	d12a      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004332:	4b51      	ldr	r3, [pc, #324]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004340:	4b4d      	ldr	r3, [pc, #308]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	0f1b      	lsrs	r3, r3, #28
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	019a      	lsls	r2, r3, #6
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	041b      	lsls	r3, r3, #16
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	061b      	lsls	r3, r3, #24
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	071b      	lsls	r3, r3, #28
 8004366:	4944      	ldr	r1, [pc, #272]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800436e:	4b42      	ldr	r3, [pc, #264]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004374:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	3b01      	subs	r3, #1
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	493d      	ldr	r1, [pc, #244]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d022      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800439c:	d11d      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800439e:	4b36      	ldr	r3, [pc, #216]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a4:	0e1b      	lsrs	r3, r3, #24
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043ac:	4b32      	ldr	r3, [pc, #200]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b2:	0f1b      	lsrs	r3, r3, #28
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	019a      	lsls	r2, r3, #6
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	431a      	orrs	r2, r3
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	061b      	lsls	r3, r3, #24
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	071b      	lsls	r3, r3, #28
 80043d2:	4929      	ldr	r1, [pc, #164]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d028      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043e6:	4b24      	ldr	r3, [pc, #144]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ec:	0e1b      	lsrs	r3, r3, #24
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043f4:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	0c1b      	lsrs	r3, r3, #16
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	019a      	lsls	r2, r3, #6
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	431a      	orrs	r2, r3
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	061b      	lsls	r3, r3, #24
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	071b      	lsls	r3, r3, #28
 800441a:	4917      	ldr	r1, [pc, #92]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004422:	4b15      	ldr	r3, [pc, #84]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	4911      	ldr	r1, [pc, #68]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004438:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a0e      	ldr	r2, [pc, #56]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004444:	f7fd fb1c 	bl	8001a80 <HAL_GetTick>
 8004448:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800444a:	e008      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800444c:	f7fd fb18 	bl	8001a80 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b64      	cmp	r3, #100	; 0x64
 8004458:	d901      	bls.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e007      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800446a:	d1ef      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40023800 	.word	0x40023800

0800447c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e071      	b.n	8004576 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	7f5b      	ldrb	r3, [r3, #29]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fd f8c0 	bl	8001628 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d053      	beq.n	8004564 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	22ca      	movs	r2, #202	; 0xca
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2253      	movs	r2, #83	; 0x53
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f99f 	bl	8004810 <RTC_EnterInitMode>
 80044d2:	4603      	mov	r3, r0
 80044d4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d12a      	bne.n	8004532 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6899      	ldr	r1, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4b26      	ldr	r3, [pc, #152]	; (8004580 <HAL_RTC_Init+0x104>)
 80044e8:	400b      	ands	r3, r1
 80044ea:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6899      	ldr	r1, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68d2      	ldr	r2, [r2, #12]
 8004512:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6919      	ldr	r1, [r3, #16]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	041a      	lsls	r2, r3, #16
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f9a8 	bl	800487e <RTC_ExitInitMode>
 800452e:	4603      	mov	r3, r0
 8004530:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d110      	bne.n	800455a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0208 	bic.w	r2, r2, #8
 8004546:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	22ff      	movs	r2, #255	; 0xff
 8004560:	625a      	str	r2, [r3, #36]	; 0x24
 8004562:	e001      	b.n	8004568 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004574:	7bfb      	ldrb	r3, [r7, #15]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	ff8fffbf 	.word	0xff8fffbf

08004584 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	7f1b      	ldrb	r3, [r3, #28]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_RTC_SetTime+0x1c>
 800459c:	2302      	movs	r3, #2
 800459e:	e085      	b.n	80046ac <HAL_RTC_SetTime+0x128>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2202      	movs	r2, #2
 80045aa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d126      	bne.n	8004600 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2200      	movs	r2, #0
 80045c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 f97c 	bl	80048c8 <RTC_ByteToBcd2>
 80045d0:	4603      	mov	r3, r0
 80045d2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	785b      	ldrb	r3, [r3, #1]
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 f975 	bl	80048c8 <RTC_ByteToBcd2>
 80045de:	4603      	mov	r3, r0
 80045e0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80045e2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	789b      	ldrb	r3, [r3, #2]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 f96d 	bl	80048c8 <RTC_ByteToBcd2>
 80045ee:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045f0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	78db      	ldrb	r3, [r3, #3]
 80045f8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	e018      	b.n	8004632 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2200      	movs	r2, #0
 8004612:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	785b      	ldrb	r3, [r3, #1]
 800461e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004620:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004626:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	78db      	ldrb	r3, [r3, #3]
 800462c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	22ca      	movs	r2, #202	; 0xca
 8004638:	625a      	str	r2, [r3, #36]	; 0x24
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2253      	movs	r2, #83	; 0x53
 8004640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f8e4 	bl	8004810 <RTC_EnterInitMode>
 8004648:	4603      	mov	r3, r0
 800464a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800464c:	7cfb      	ldrb	r3, [r7, #19]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d11e      	bne.n	8004690 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	6979      	ldr	r1, [r7, #20]
 8004658:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <HAL_RTC_SetTime+0x130>)
 800465a:	400b      	ands	r3, r1
 800465c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800466c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6899      	ldr	r1, [r3, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	431a      	orrs	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f8f9 	bl	800487e <RTC_ExitInitMode>
 800468c:	4603      	mov	r3, r0
 800468e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	22ff      	movs	r2, #255	; 0xff
 80046a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	771a      	strb	r2, [r3, #28]

  return status;
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd90      	pop	{r4, r7, pc}
 80046b4:	007f7f7f 	.word	0x007f7f7f

080046b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	7f1b      	ldrb	r3, [r3, #28]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_RTC_SetDate+0x1c>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e06f      	b.n	80047b4 <HAL_RTC_SetDate+0xfc>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2202      	movs	r2, #2
 80046de:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10e      	bne.n	8004704 <HAL_RTC_SetDate+0x4c>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	785b      	ldrb	r3, [r3, #1]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d008      	beq.n	8004704 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	785b      	ldrb	r3, [r3, #1]
 80046f6:	f023 0310 	bic.w	r3, r3, #16
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	330a      	adds	r3, #10
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d11c      	bne.n	8004744 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	78db      	ldrb	r3, [r3, #3]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f8da 	bl	80048c8 <RTC_ByteToBcd2>
 8004714:	4603      	mov	r3, r0
 8004716:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	785b      	ldrb	r3, [r3, #1]
 800471c:	4618      	mov	r0, r3
 800471e:	f000 f8d3 	bl	80048c8 <RTC_ByteToBcd2>
 8004722:	4603      	mov	r3, r0
 8004724:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004726:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	789b      	ldrb	r3, [r3, #2]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 f8cb 	bl	80048c8 <RTC_ByteToBcd2>
 8004732:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004734:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	e00e      	b.n	8004762 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	78db      	ldrb	r3, [r3, #3]
 8004748:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	785b      	ldrb	r3, [r3, #1]
 800474e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004750:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004756:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	22ca      	movs	r2, #202	; 0xca
 8004768:	625a      	str	r2, [r3, #36]	; 0x24
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2253      	movs	r2, #83	; 0x53
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f84c 	bl	8004810 <RTC_EnterInitMode>
 8004778:	4603      	mov	r3, r0
 800477a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800477c:	7cfb      	ldrb	r3, [r7, #19]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10a      	bne.n	8004798 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	6979      	ldr	r1, [r7, #20]
 8004788:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <HAL_RTC_SetDate+0x104>)
 800478a:	400b      	ands	r3, r1
 800478c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f875 	bl	800487e <RTC_ExitInitMode>
 8004794:	4603      	mov	r3, r0
 8004796:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	22ff      	movs	r2, #255	; 0xff
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	771a      	strb	r2, [r3, #28]

  return status;
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd90      	pop	{r4, r7, pc}
 80047bc:	00ffff3f 	.word	0x00ffff3f

080047c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047da:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047dc:	f7fd f950 	bl	8001a80 <HAL_GetTick>
 80047e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047e2:	e009      	b.n	80047f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047e4:	f7fd f94c 	bl	8001a80 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047f2:	d901      	bls.n	80047f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e007      	b.n	8004808 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ee      	beq.n	80047e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d122      	bne.n	8004874 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800483c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800483e:	f7fd f91f 	bl	8001a80 <HAL_GetTick>
 8004842:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004844:	e00c      	b.n	8004860 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004846:	f7fd f91b 	bl	8001a80 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004854:	d904      	bls.n	8004860 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2204      	movs	r2, #4
 800485a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d102      	bne.n	8004874 <RTC_EnterInitMode+0x64>
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d1e8      	bne.n	8004846 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004898:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff ff89 	bl	80047c0 <HAL_RTC_WaitForSynchro>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d004      	beq.n	80048be <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2204      	movs	r2, #4
 80048b8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80048d6:	e005      	b.n	80048e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3301      	adds	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	3b0a      	subs	r3, #10
 80048e2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	2b09      	cmp	r3, #9
 80048e8:	d8f6      	bhi.n	80048d8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	b2db      	uxtb	r3, r3
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e049      	b.n	80049aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fc feaa 	bl	8001684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f000 f9f6 	bl	8004d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d001      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e054      	b.n	8004a76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a26      	ldr	r2, [pc, #152]	; (8004a84 <HAL_TIM_Base_Start_IT+0xd0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d022      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f6:	d01d      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a22      	ldr	r2, [pc, #136]	; (8004a88 <HAL_TIM_Base_Start_IT+0xd4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d018      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a21      	ldr	r2, [pc, #132]	; (8004a8c <HAL_TIM_Base_Start_IT+0xd8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a1f      	ldr	r2, [pc, #124]	; (8004a90 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00e      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a1e      	ldr	r2, [pc, #120]	; (8004a94 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a1c      	ldr	r2, [pc, #112]	; (8004a98 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a1b      	ldr	r2, [pc, #108]	; (8004a9c <HAL_TIM_Base_Start_IT+0xe8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d115      	bne.n	8004a60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <HAL_TIM_Base_Start_IT+0xec>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d015      	beq.n	8004a72 <HAL_TIM_Base_Start_IT+0xbe>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d011      	beq.n	8004a72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5e:	e008      	b.n	8004a72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	e000      	b.n	8004a74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800
 8004a90:	40000c00 	.word	0x40000c00
 8004a94:	40010400 	.word	0x40010400
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40001800 	.word	0x40001800
 8004aa0:	00010007 	.word	0x00010007

08004aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d122      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d11b      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0202 	mvn.w	r2, #2
 8004ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f905 	bl	8004cf6 <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f8f7 	bl	8004ce2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f908 	bl	8004d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d122      	bne.n	8004b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d11b      	bne.n	8004b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0204 	mvn.w	r2, #4
 8004b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f8db 	bl	8004cf6 <HAL_TIM_IC_CaptureCallback>
 8004b40:	e005      	b.n	8004b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f8cd 	bl	8004ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f8de 	bl	8004d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d122      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d11b      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0208 	mvn.w	r2, #8
 8004b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f8b1 	bl	8004cf6 <HAL_TIM_IC_CaptureCallback>
 8004b94:	e005      	b.n	8004ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f8a3 	bl	8004ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f8b4 	bl	8004d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b10      	cmp	r3, #16
 8004bb4:	d122      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d11b      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0210 	mvn.w	r2, #16
 8004bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f887 	bl	8004cf6 <HAL_TIM_IC_CaptureCallback>
 8004be8:	e005      	b.n	8004bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f879 	bl	8004ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f88a 	bl	8004d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d10e      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d107      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0201 	mvn.w	r2, #1
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fc fa8c 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c32:	2b80      	cmp	r3, #128	; 0x80
 8004c34:	d10e      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c40:	2b80      	cmp	r3, #128	; 0x80
 8004c42:	d107      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f9a8 	bl	8004fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c62:	d10e      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6e:	2b80      	cmp	r3, #128	; 0x80
 8004c70:	d107      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f99b 	bl	8004fb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d10e      	bne.n	8004cae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	d107      	bne.n	8004cae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f838 	bl	8004d1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d10e      	bne.n	8004cda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d107      	bne.n	8004cda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f06f 0220 	mvn.w	r2, #32
 8004cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f95b 	bl	8004f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a40      	ldr	r2, [pc, #256]	; (8004e48 <TIM_Base_SetConfig+0x114>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d013      	beq.n	8004d74 <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d52:	d00f      	beq.n	8004d74 <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a3d      	ldr	r2, [pc, #244]	; (8004e4c <TIM_Base_SetConfig+0x118>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00b      	beq.n	8004d74 <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a3c      	ldr	r2, [pc, #240]	; (8004e50 <TIM_Base_SetConfig+0x11c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d007      	beq.n	8004d74 <TIM_Base_SetConfig+0x40>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a3b      	ldr	r2, [pc, #236]	; (8004e54 <TIM_Base_SetConfig+0x120>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d003      	beq.n	8004d74 <TIM_Base_SetConfig+0x40>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a3a      	ldr	r2, [pc, #232]	; (8004e58 <TIM_Base_SetConfig+0x124>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d108      	bne.n	8004d86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2f      	ldr	r2, [pc, #188]	; (8004e48 <TIM_Base_SetConfig+0x114>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d02b      	beq.n	8004de6 <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d94:	d027      	beq.n	8004de6 <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a2c      	ldr	r2, [pc, #176]	; (8004e4c <TIM_Base_SetConfig+0x118>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d023      	beq.n	8004de6 <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a2b      	ldr	r2, [pc, #172]	; (8004e50 <TIM_Base_SetConfig+0x11c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01f      	beq.n	8004de6 <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a2a      	ldr	r2, [pc, #168]	; (8004e54 <TIM_Base_SetConfig+0x120>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d01b      	beq.n	8004de6 <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a29      	ldr	r2, [pc, #164]	; (8004e58 <TIM_Base_SetConfig+0x124>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d017      	beq.n	8004de6 <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a28      	ldr	r2, [pc, #160]	; (8004e5c <TIM_Base_SetConfig+0x128>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d013      	beq.n	8004de6 <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a27      	ldr	r2, [pc, #156]	; (8004e60 <TIM_Base_SetConfig+0x12c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00f      	beq.n	8004de6 <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a26      	ldr	r2, [pc, #152]	; (8004e64 <TIM_Base_SetConfig+0x130>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00b      	beq.n	8004de6 <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a25      	ldr	r2, [pc, #148]	; (8004e68 <TIM_Base_SetConfig+0x134>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d007      	beq.n	8004de6 <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a24      	ldr	r2, [pc, #144]	; (8004e6c <TIM_Base_SetConfig+0x138>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d003      	beq.n	8004de6 <TIM_Base_SetConfig+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a23      	ldr	r2, [pc, #140]	; (8004e70 <TIM_Base_SetConfig+0x13c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d108      	bne.n	8004df8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a0a      	ldr	r2, [pc, #40]	; (8004e48 <TIM_Base_SetConfig+0x114>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d003      	beq.n	8004e2c <TIM_Base_SetConfig+0xf8>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a0c      	ldr	r2, [pc, #48]	; (8004e58 <TIM_Base_SetConfig+0x124>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d103      	bne.n	8004e34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	615a      	str	r2, [r3, #20]
}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40010000 	.word	0x40010000
 8004e4c:	40000400 	.word	0x40000400
 8004e50:	40000800 	.word	0x40000800
 8004e54:	40000c00 	.word	0x40000c00
 8004e58:	40010400 	.word	0x40010400
 8004e5c:	40014000 	.word	0x40014000
 8004e60:	40014400 	.word	0x40014400
 8004e64:	40014800 	.word	0x40014800
 8004e68:	40001800 	.word	0x40001800
 8004e6c:	40001c00 	.word	0x40001c00
 8004e70:	40002000 	.word	0x40002000

08004e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e06d      	b.n	8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a30      	ldr	r2, [pc, #192]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2f      	ldr	r2, [pc, #188]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d108      	bne.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ec6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a20      	ldr	r2, [pc, #128]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d022      	beq.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d01d      	beq.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1d      	ldr	r2, [pc, #116]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d018      	beq.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d013      	beq.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1a      	ldr	r2, [pc, #104]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00e      	beq.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d009      	beq.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a16      	ldr	r2, [pc, #88]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a15      	ldr	r2, [pc, #84]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d10c      	bne.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	40010000 	.word	0x40010000
 8004f78:	40010400 	.word	0x40010400
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40001800 	.word	0x40001800

08004f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e040      	b.n	8005060 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fc fb6e 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2224      	movs	r2, #36	; 0x24
 8004ff8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0201 	bic.w	r2, r2, #1
 8005008:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f974 	bl	80052f8 <UART_SetConfig>
 8005010:	4603      	mov	r3, r0
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e022      	b.n	8005060 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fbcc 	bl	80057c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fc53 	bl	8005904 <UART_CheckIdleState>
 800505e:	4603      	mov	r3, r0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	4613      	mov	r3, r2
 8005076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800507c:	2b20      	cmp	r3, #32
 800507e:	d171      	bne.n	8005164 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_UART_Transmit+0x24>
 8005086:	88fb      	ldrh	r3, [r7, #6]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e06a      	b.n	8005166 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2221      	movs	r2, #33	; 0x21
 800509c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800509e:	f7fc fcef 	bl	8001a80 <HAL_GetTick>
 80050a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	88fa      	ldrh	r2, [r7, #6]
 80050a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	88fa      	ldrh	r2, [r7, #6]
 80050b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050bc:	d108      	bne.n	80050d0 <HAL_UART_Transmit+0x68>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d104      	bne.n	80050d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	61bb      	str	r3, [r7, #24]
 80050ce:	e003      	b.n	80050d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050d8:	e02c      	b.n	8005134 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2200      	movs	r2, #0
 80050e2:	2180      	movs	r1, #128	; 0x80
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fc5a 	bl	800599e <UART_WaitOnFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e038      	b.n	8005166 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005108:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	3302      	adds	r3, #2
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	e007      	b.n	8005122 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	3301      	adds	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1cc      	bne.n	80050da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2200      	movs	r2, #0
 8005148:	2140      	movs	r1, #64	; 0x40
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 fc27 	bl	800599e <UART_WaitOnFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e005      	b.n	8005166 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	e000      	b.n	8005166 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005164:	2302      	movs	r3, #2
  }
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b08a      	sub	sp, #40	; 0x28
 8005172:	af02      	add	r7, sp, #8
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	4613      	mov	r3, r2
 800517c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005184:	2b20      	cmp	r3, #32
 8005186:	f040 80b1 	bne.w	80052ec <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <HAL_UART_Receive+0x28>
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e0a9      	b.n	80052ee <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2222      	movs	r2, #34	; 0x22
 80051a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051b0:	f7fc fc66 	bl	8001a80 <HAL_GetTick>
 80051b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	88fa      	ldrh	r2, [r7, #6]
 80051ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	88fa      	ldrh	r2, [r7, #6]
 80051c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ce:	d10e      	bne.n	80051ee <HAL_UART_Receive+0x80>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d105      	bne.n	80051e4 <HAL_UART_Receive+0x76>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80051de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051e2:	e02d      	b.n	8005240 <HAL_UART_Receive+0xd2>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	22ff      	movs	r2, #255	; 0xff
 80051e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051ec:	e028      	b.n	8005240 <HAL_UART_Receive+0xd2>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10d      	bne.n	8005212 <HAL_UART_Receive+0xa4>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d104      	bne.n	8005208 <HAL_UART_Receive+0x9a>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	22ff      	movs	r2, #255	; 0xff
 8005202:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005206:	e01b      	b.n	8005240 <HAL_UART_Receive+0xd2>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	227f      	movs	r2, #127	; 0x7f
 800520c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005210:	e016      	b.n	8005240 <HAL_UART_Receive+0xd2>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800521a:	d10d      	bne.n	8005238 <HAL_UART_Receive+0xca>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d104      	bne.n	800522e <HAL_UART_Receive+0xc0>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	227f      	movs	r2, #127	; 0x7f
 8005228:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800522c:	e008      	b.n	8005240 <HAL_UART_Receive+0xd2>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	223f      	movs	r2, #63	; 0x3f
 8005232:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005236:	e003      	b.n	8005240 <HAL_UART_Receive+0xd2>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005246:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005250:	d108      	bne.n	8005264 <HAL_UART_Receive+0xf6>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d104      	bne.n	8005264 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800525a:	2300      	movs	r3, #0
 800525c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	e003      	b.n	800526c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800526c:	e032      	b.n	80052d4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2200      	movs	r2, #0
 8005276:	2120      	movs	r1, #32
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fb90 	bl	800599e <UART_WaitOnFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e032      	b.n	80052ee <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10c      	bne.n	80052a8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	b29a      	uxth	r2, r3
 8005296:	8a7b      	ldrh	r3, [r7, #18]
 8005298:	4013      	ands	r3, r2
 800529a:	b29a      	uxth	r2, r3
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	3302      	adds	r3, #2
 80052a4:	61bb      	str	r3, [r7, #24]
 80052a6:	e00c      	b.n	80052c2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	8a7b      	ldrh	r3, [r7, #18]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	4013      	ands	r3, r2
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	3301      	adds	r3, #1
 80052c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1c6      	bne.n	800526e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e000      	b.n	80052ee <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80052ec:	2302      	movs	r3, #2
  }
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4ba6      	ldr	r3, [pc, #664]	; (80055bc <UART_SetConfig+0x2c4>)
 8005324:	4013      	ands	r3, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	6979      	ldr	r1, [r7, #20]
 800532c:	430b      	orrs	r3, r1
 800532e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	430a      	orrs	r2, r1
 8005368:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a94      	ldr	r2, [pc, #592]	; (80055c0 <UART_SetConfig+0x2c8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d120      	bne.n	80053b6 <UART_SetConfig+0xbe>
 8005374:	4b93      	ldr	r3, [pc, #588]	; (80055c4 <UART_SetConfig+0x2cc>)
 8005376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	2b03      	cmp	r3, #3
 8005380:	d816      	bhi.n	80053b0 <UART_SetConfig+0xb8>
 8005382:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <UART_SetConfig+0x90>)
 8005384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005388:	08005399 	.word	0x08005399
 800538c:	080053a5 	.word	0x080053a5
 8005390:	0800539f 	.word	0x0800539f
 8005394:	080053ab 	.word	0x080053ab
 8005398:	2301      	movs	r3, #1
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e150      	b.n	8005640 <UART_SetConfig+0x348>
 800539e:	2302      	movs	r3, #2
 80053a0:	77fb      	strb	r3, [r7, #31]
 80053a2:	e14d      	b.n	8005640 <UART_SetConfig+0x348>
 80053a4:	2304      	movs	r3, #4
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e14a      	b.n	8005640 <UART_SetConfig+0x348>
 80053aa:	2308      	movs	r3, #8
 80053ac:	77fb      	strb	r3, [r7, #31]
 80053ae:	e147      	b.n	8005640 <UART_SetConfig+0x348>
 80053b0:	2310      	movs	r3, #16
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	e144      	b.n	8005640 <UART_SetConfig+0x348>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a83      	ldr	r2, [pc, #524]	; (80055c8 <UART_SetConfig+0x2d0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d132      	bne.n	8005426 <UART_SetConfig+0x12e>
 80053c0:	4b80      	ldr	r3, [pc, #512]	; (80055c4 <UART_SetConfig+0x2cc>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b0c      	cmp	r3, #12
 80053cc:	d828      	bhi.n	8005420 <UART_SetConfig+0x128>
 80053ce:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <UART_SetConfig+0xdc>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	08005409 	.word	0x08005409
 80053d8:	08005421 	.word	0x08005421
 80053dc:	08005421 	.word	0x08005421
 80053e0:	08005421 	.word	0x08005421
 80053e4:	08005415 	.word	0x08005415
 80053e8:	08005421 	.word	0x08005421
 80053ec:	08005421 	.word	0x08005421
 80053f0:	08005421 	.word	0x08005421
 80053f4:	0800540f 	.word	0x0800540f
 80053f8:	08005421 	.word	0x08005421
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005421 	.word	0x08005421
 8005404:	0800541b 	.word	0x0800541b
 8005408:	2300      	movs	r3, #0
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e118      	b.n	8005640 <UART_SetConfig+0x348>
 800540e:	2302      	movs	r3, #2
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	e115      	b.n	8005640 <UART_SetConfig+0x348>
 8005414:	2304      	movs	r3, #4
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e112      	b.n	8005640 <UART_SetConfig+0x348>
 800541a:	2308      	movs	r3, #8
 800541c:	77fb      	strb	r3, [r7, #31]
 800541e:	e10f      	b.n	8005640 <UART_SetConfig+0x348>
 8005420:	2310      	movs	r3, #16
 8005422:	77fb      	strb	r3, [r7, #31]
 8005424:	e10c      	b.n	8005640 <UART_SetConfig+0x348>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a68      	ldr	r2, [pc, #416]	; (80055cc <UART_SetConfig+0x2d4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d120      	bne.n	8005472 <UART_SetConfig+0x17a>
 8005430:	4b64      	ldr	r3, [pc, #400]	; (80055c4 <UART_SetConfig+0x2cc>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800543a:	2b30      	cmp	r3, #48	; 0x30
 800543c:	d013      	beq.n	8005466 <UART_SetConfig+0x16e>
 800543e:	2b30      	cmp	r3, #48	; 0x30
 8005440:	d814      	bhi.n	800546c <UART_SetConfig+0x174>
 8005442:	2b20      	cmp	r3, #32
 8005444:	d009      	beq.n	800545a <UART_SetConfig+0x162>
 8005446:	2b20      	cmp	r3, #32
 8005448:	d810      	bhi.n	800546c <UART_SetConfig+0x174>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <UART_SetConfig+0x15c>
 800544e:	2b10      	cmp	r3, #16
 8005450:	d006      	beq.n	8005460 <UART_SetConfig+0x168>
 8005452:	e00b      	b.n	800546c <UART_SetConfig+0x174>
 8005454:	2300      	movs	r3, #0
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e0f2      	b.n	8005640 <UART_SetConfig+0x348>
 800545a:	2302      	movs	r3, #2
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e0ef      	b.n	8005640 <UART_SetConfig+0x348>
 8005460:	2304      	movs	r3, #4
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	e0ec      	b.n	8005640 <UART_SetConfig+0x348>
 8005466:	2308      	movs	r3, #8
 8005468:	77fb      	strb	r3, [r7, #31]
 800546a:	e0e9      	b.n	8005640 <UART_SetConfig+0x348>
 800546c:	2310      	movs	r3, #16
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e0e6      	b.n	8005640 <UART_SetConfig+0x348>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a56      	ldr	r2, [pc, #344]	; (80055d0 <UART_SetConfig+0x2d8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d120      	bne.n	80054be <UART_SetConfig+0x1c6>
 800547c:	4b51      	ldr	r3, [pc, #324]	; (80055c4 <UART_SetConfig+0x2cc>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005486:	2bc0      	cmp	r3, #192	; 0xc0
 8005488:	d013      	beq.n	80054b2 <UART_SetConfig+0x1ba>
 800548a:	2bc0      	cmp	r3, #192	; 0xc0
 800548c:	d814      	bhi.n	80054b8 <UART_SetConfig+0x1c0>
 800548e:	2b80      	cmp	r3, #128	; 0x80
 8005490:	d009      	beq.n	80054a6 <UART_SetConfig+0x1ae>
 8005492:	2b80      	cmp	r3, #128	; 0x80
 8005494:	d810      	bhi.n	80054b8 <UART_SetConfig+0x1c0>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <UART_SetConfig+0x1a8>
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	d006      	beq.n	80054ac <UART_SetConfig+0x1b4>
 800549e:	e00b      	b.n	80054b8 <UART_SetConfig+0x1c0>
 80054a0:	2300      	movs	r3, #0
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e0cc      	b.n	8005640 <UART_SetConfig+0x348>
 80054a6:	2302      	movs	r3, #2
 80054a8:	77fb      	strb	r3, [r7, #31]
 80054aa:	e0c9      	b.n	8005640 <UART_SetConfig+0x348>
 80054ac:	2304      	movs	r3, #4
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e0c6      	b.n	8005640 <UART_SetConfig+0x348>
 80054b2:	2308      	movs	r3, #8
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	e0c3      	b.n	8005640 <UART_SetConfig+0x348>
 80054b8:	2310      	movs	r3, #16
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e0c0      	b.n	8005640 <UART_SetConfig+0x348>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a44      	ldr	r2, [pc, #272]	; (80055d4 <UART_SetConfig+0x2dc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d125      	bne.n	8005514 <UART_SetConfig+0x21c>
 80054c8:	4b3e      	ldr	r3, [pc, #248]	; (80055c4 <UART_SetConfig+0x2cc>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d6:	d017      	beq.n	8005508 <UART_SetConfig+0x210>
 80054d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054dc:	d817      	bhi.n	800550e <UART_SetConfig+0x216>
 80054de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e2:	d00b      	beq.n	80054fc <UART_SetConfig+0x204>
 80054e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e8:	d811      	bhi.n	800550e <UART_SetConfig+0x216>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <UART_SetConfig+0x1fe>
 80054ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f2:	d006      	beq.n	8005502 <UART_SetConfig+0x20a>
 80054f4:	e00b      	b.n	800550e <UART_SetConfig+0x216>
 80054f6:	2300      	movs	r3, #0
 80054f8:	77fb      	strb	r3, [r7, #31]
 80054fa:	e0a1      	b.n	8005640 <UART_SetConfig+0x348>
 80054fc:	2302      	movs	r3, #2
 80054fe:	77fb      	strb	r3, [r7, #31]
 8005500:	e09e      	b.n	8005640 <UART_SetConfig+0x348>
 8005502:	2304      	movs	r3, #4
 8005504:	77fb      	strb	r3, [r7, #31]
 8005506:	e09b      	b.n	8005640 <UART_SetConfig+0x348>
 8005508:	2308      	movs	r3, #8
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e098      	b.n	8005640 <UART_SetConfig+0x348>
 800550e:	2310      	movs	r3, #16
 8005510:	77fb      	strb	r3, [r7, #31]
 8005512:	e095      	b.n	8005640 <UART_SetConfig+0x348>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a2f      	ldr	r2, [pc, #188]	; (80055d8 <UART_SetConfig+0x2e0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d125      	bne.n	800556a <UART_SetConfig+0x272>
 800551e:	4b29      	ldr	r3, [pc, #164]	; (80055c4 <UART_SetConfig+0x2cc>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005528:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800552c:	d017      	beq.n	800555e <UART_SetConfig+0x266>
 800552e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005532:	d817      	bhi.n	8005564 <UART_SetConfig+0x26c>
 8005534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005538:	d00b      	beq.n	8005552 <UART_SetConfig+0x25a>
 800553a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553e:	d811      	bhi.n	8005564 <UART_SetConfig+0x26c>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <UART_SetConfig+0x254>
 8005544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005548:	d006      	beq.n	8005558 <UART_SetConfig+0x260>
 800554a:	e00b      	b.n	8005564 <UART_SetConfig+0x26c>
 800554c:	2301      	movs	r3, #1
 800554e:	77fb      	strb	r3, [r7, #31]
 8005550:	e076      	b.n	8005640 <UART_SetConfig+0x348>
 8005552:	2302      	movs	r3, #2
 8005554:	77fb      	strb	r3, [r7, #31]
 8005556:	e073      	b.n	8005640 <UART_SetConfig+0x348>
 8005558:	2304      	movs	r3, #4
 800555a:	77fb      	strb	r3, [r7, #31]
 800555c:	e070      	b.n	8005640 <UART_SetConfig+0x348>
 800555e:	2308      	movs	r3, #8
 8005560:	77fb      	strb	r3, [r7, #31]
 8005562:	e06d      	b.n	8005640 <UART_SetConfig+0x348>
 8005564:	2310      	movs	r3, #16
 8005566:	77fb      	strb	r3, [r7, #31]
 8005568:	e06a      	b.n	8005640 <UART_SetConfig+0x348>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a1b      	ldr	r2, [pc, #108]	; (80055dc <UART_SetConfig+0x2e4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d138      	bne.n	80055e6 <UART_SetConfig+0x2ee>
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <UART_SetConfig+0x2cc>)
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800557e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005582:	d017      	beq.n	80055b4 <UART_SetConfig+0x2bc>
 8005584:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005588:	d82a      	bhi.n	80055e0 <UART_SetConfig+0x2e8>
 800558a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800558e:	d00b      	beq.n	80055a8 <UART_SetConfig+0x2b0>
 8005590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005594:	d824      	bhi.n	80055e0 <UART_SetConfig+0x2e8>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <UART_SetConfig+0x2aa>
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	d006      	beq.n	80055ae <UART_SetConfig+0x2b6>
 80055a0:	e01e      	b.n	80055e0 <UART_SetConfig+0x2e8>
 80055a2:	2300      	movs	r3, #0
 80055a4:	77fb      	strb	r3, [r7, #31]
 80055a6:	e04b      	b.n	8005640 <UART_SetConfig+0x348>
 80055a8:	2302      	movs	r3, #2
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e048      	b.n	8005640 <UART_SetConfig+0x348>
 80055ae:	2304      	movs	r3, #4
 80055b0:	77fb      	strb	r3, [r7, #31]
 80055b2:	e045      	b.n	8005640 <UART_SetConfig+0x348>
 80055b4:	2308      	movs	r3, #8
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e042      	b.n	8005640 <UART_SetConfig+0x348>
 80055ba:	bf00      	nop
 80055bc:	efff69f3 	.word	0xefff69f3
 80055c0:	40011000 	.word	0x40011000
 80055c4:	40023800 	.word	0x40023800
 80055c8:	40004400 	.word	0x40004400
 80055cc:	40004800 	.word	0x40004800
 80055d0:	40004c00 	.word	0x40004c00
 80055d4:	40005000 	.word	0x40005000
 80055d8:	40011400 	.word	0x40011400
 80055dc:	40007800 	.word	0x40007800
 80055e0:	2310      	movs	r3, #16
 80055e2:	77fb      	strb	r3, [r7, #31]
 80055e4:	e02c      	b.n	8005640 <UART_SetConfig+0x348>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a72      	ldr	r2, [pc, #456]	; (80057b4 <UART_SetConfig+0x4bc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d125      	bne.n	800563c <UART_SetConfig+0x344>
 80055f0:	4b71      	ldr	r3, [pc, #452]	; (80057b8 <UART_SetConfig+0x4c0>)
 80055f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80055fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055fe:	d017      	beq.n	8005630 <UART_SetConfig+0x338>
 8005600:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005604:	d817      	bhi.n	8005636 <UART_SetConfig+0x33e>
 8005606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560a:	d00b      	beq.n	8005624 <UART_SetConfig+0x32c>
 800560c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005610:	d811      	bhi.n	8005636 <UART_SetConfig+0x33e>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <UART_SetConfig+0x326>
 8005616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800561a:	d006      	beq.n	800562a <UART_SetConfig+0x332>
 800561c:	e00b      	b.n	8005636 <UART_SetConfig+0x33e>
 800561e:	2300      	movs	r3, #0
 8005620:	77fb      	strb	r3, [r7, #31]
 8005622:	e00d      	b.n	8005640 <UART_SetConfig+0x348>
 8005624:	2302      	movs	r3, #2
 8005626:	77fb      	strb	r3, [r7, #31]
 8005628:	e00a      	b.n	8005640 <UART_SetConfig+0x348>
 800562a:	2304      	movs	r3, #4
 800562c:	77fb      	strb	r3, [r7, #31]
 800562e:	e007      	b.n	8005640 <UART_SetConfig+0x348>
 8005630:	2308      	movs	r3, #8
 8005632:	77fb      	strb	r3, [r7, #31]
 8005634:	e004      	b.n	8005640 <UART_SetConfig+0x348>
 8005636:	2310      	movs	r3, #16
 8005638:	77fb      	strb	r3, [r7, #31]
 800563a:	e001      	b.n	8005640 <UART_SetConfig+0x348>
 800563c:	2310      	movs	r3, #16
 800563e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005648:	d15b      	bne.n	8005702 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800564a:	7ffb      	ldrb	r3, [r7, #31]
 800564c:	2b08      	cmp	r3, #8
 800564e:	d828      	bhi.n	80056a2 <UART_SetConfig+0x3aa>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <UART_SetConfig+0x360>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	0800567d 	.word	0x0800567d
 800565c:	08005685 	.word	0x08005685
 8005660:	0800568d 	.word	0x0800568d
 8005664:	080056a3 	.word	0x080056a3
 8005668:	08005693 	.word	0x08005693
 800566c:	080056a3 	.word	0x080056a3
 8005670:	080056a3 	.word	0x080056a3
 8005674:	080056a3 	.word	0x080056a3
 8005678:	0800569b 	.word	0x0800569b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800567c:	f7fe faae 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 8005680:	61b8      	str	r0, [r7, #24]
        break;
 8005682:	e013      	b.n	80056ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005684:	f7fe fabe 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 8005688:	61b8      	str	r0, [r7, #24]
        break;
 800568a:	e00f      	b.n	80056ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800568c:	4b4b      	ldr	r3, [pc, #300]	; (80057bc <UART_SetConfig+0x4c4>)
 800568e:	61bb      	str	r3, [r7, #24]
        break;
 8005690:	e00c      	b.n	80056ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005692:	f7fe f991 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8005696:	61b8      	str	r0, [r7, #24]
        break;
 8005698:	e008      	b.n	80056ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800569a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800569e:	61bb      	str	r3, [r7, #24]
        break;
 80056a0:	e004      	b.n	80056ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	77bb      	strb	r3, [r7, #30]
        break;
 80056aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d074      	beq.n	800579c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	005a      	lsls	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	441a      	add	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b0f      	cmp	r3, #15
 80056cc:	d916      	bls.n	80056fc <UART_SetConfig+0x404>
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d4:	d212      	bcs.n	80056fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f023 030f 	bic.w	r3, r3, #15
 80056de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	085b      	lsrs	r3, r3, #1
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	89fb      	ldrh	r3, [r7, #14]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	89fa      	ldrh	r2, [r7, #14]
 80056f8:	60da      	str	r2, [r3, #12]
 80056fa:	e04f      	b.n	800579c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	77bb      	strb	r3, [r7, #30]
 8005700:	e04c      	b.n	800579c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005702:	7ffb      	ldrb	r3, [r7, #31]
 8005704:	2b08      	cmp	r3, #8
 8005706:	d828      	bhi.n	800575a <UART_SetConfig+0x462>
 8005708:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <UART_SetConfig+0x418>)
 800570a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570e:	bf00      	nop
 8005710:	08005735 	.word	0x08005735
 8005714:	0800573d 	.word	0x0800573d
 8005718:	08005745 	.word	0x08005745
 800571c:	0800575b 	.word	0x0800575b
 8005720:	0800574b 	.word	0x0800574b
 8005724:	0800575b 	.word	0x0800575b
 8005728:	0800575b 	.word	0x0800575b
 800572c:	0800575b 	.word	0x0800575b
 8005730:	08005753 	.word	0x08005753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005734:	f7fe fa52 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 8005738:	61b8      	str	r0, [r7, #24]
        break;
 800573a:	e013      	b.n	8005764 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800573c:	f7fe fa62 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 8005740:	61b8      	str	r0, [r7, #24]
        break;
 8005742:	e00f      	b.n	8005764 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005744:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <UART_SetConfig+0x4c4>)
 8005746:	61bb      	str	r3, [r7, #24]
        break;
 8005748:	e00c      	b.n	8005764 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800574a:	f7fe f935 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 800574e:	61b8      	str	r0, [r7, #24]
        break;
 8005750:	e008      	b.n	8005764 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005756:	61bb      	str	r3, [r7, #24]
        break;
 8005758:	e004      	b.n	8005764 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	77bb      	strb	r3, [r7, #30]
        break;
 8005762:	bf00      	nop
    }

    if (pclk != 0U)
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d018      	beq.n	800579c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	085a      	lsrs	r2, r3, #1
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	441a      	add	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b0f      	cmp	r3, #15
 8005782:	d909      	bls.n	8005798 <UART_SetConfig+0x4a0>
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578a:	d205      	bcs.n	8005798 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	b29a      	uxth	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	e001      	b.n	800579c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3720      	adds	r7, #32
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40007c00 	.word	0x40007c00
 80057b8:	40023800 	.word	0x40023800
 80057bc:	00f42400 	.word	0x00f42400

080057c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01a      	beq.n	80058d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058be:	d10a      	bne.n	80058d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	605a      	str	r2, [r3, #4]
  }
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af02      	add	r7, sp, #8
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005914:	f7fc f8b4 	bl	8001a80 <HAL_GetTick>
 8005918:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b08      	cmp	r3, #8
 8005926:	d10e      	bne.n	8005946 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f831 	bl	800599e <UART_WaitOnFlagUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e027      	b.n	8005996 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b04      	cmp	r3, #4
 8005952:	d10e      	bne.n	8005972 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f81b 	bl	800599e <UART_WaitOnFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e011      	b.n	8005996 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b09c      	sub	sp, #112	; 0x70
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	603b      	str	r3, [r7, #0]
 80059aa:	4613      	mov	r3, r2
 80059ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ae:	e0a7      	b.n	8005b00 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b6:	f000 80a3 	beq.w	8005b00 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ba:	f7fc f861 	bl	8001a80 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d302      	bcc.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80059ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d13f      	bne.n	8005a50 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059e4:	667b      	str	r3, [r7, #100]	; 0x64
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e6      	bne.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3308      	adds	r3, #8
 8005a08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	663b      	str	r3, [r7, #96]	; 0x60
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3308      	adds	r3, #8
 8005a20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a22:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e5      	bne.n	8005a02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e068      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d050      	beq.n	8005b00 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6c:	d148      	bne.n	8005b00 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a76:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a96:	637b      	str	r3, [r7, #52]	; 0x34
 8005a98:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e6      	bne.n	8005a78 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f023 0301 	bic.w	r3, r3, #1
 8005ac0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005aca:	623a      	str	r2, [r7, #32]
 8005acc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	69f9      	ldr	r1, [r7, #28]
 8005ad0:	6a3a      	ldr	r2, [r7, #32]
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e5      	bne.n	8005aaa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e010      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	bf0c      	ite	eq
 8005b10:	2301      	moveq	r3, #1
 8005b12:	2300      	movne	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	f43f af48 	beq.w	80059b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3770      	adds	r7, #112	; 0x70
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	f107 001c 	add.w	r0, r7, #28
 8005b3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d120      	bne.n	8005b86 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	4b20      	ldr	r3, [pc, #128]	; (8005bd8 <USB_CoreInit+0xac>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d105      	bne.n	8005b7a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa96 	bl	80060ac <USB_CoreReset>
 8005b80:	4603      	mov	r3, r0
 8005b82:	73fb      	strb	r3, [r7, #15]
 8005b84:	e010      	b.n	8005ba8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa8a 	bl	80060ac <USB_CoreReset>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d10b      	bne.n	8005bc6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f043 0206 	orr.w	r2, r3, #6
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f043 0220 	orr.w	r2, r3, #32
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bd2:	b004      	add	sp, #16
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	ffbdffbf 	.word	0xffbdffbf

08005bdc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f023 0201 	bic.w	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	460b      	mov	r3, r1
 8005c08:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d115      	bne.n	8005c4c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	f7fb ff33 	bl	8001a98 <HAL_Delay>
      ms++;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3301      	adds	r3, #1
 8005c36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fa29 	bl	8006090 <USB_GetMode>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d01e      	beq.n	8005c82 <USB_SetCurrentMode+0x84>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b31      	cmp	r3, #49	; 0x31
 8005c48:	d9f0      	bls.n	8005c2c <USB_SetCurrentMode+0x2e>
 8005c4a:	e01a      	b.n	8005c82 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d115      	bne.n	8005c7e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c5e:	2001      	movs	r0, #1
 8005c60:	f7fb ff1a 	bl	8001a98 <HAL_Delay>
      ms++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fa10 	bl	8006090 <USB_GetMode>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <USB_SetCurrentMode+0x84>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b31      	cmp	r3, #49	; 0x31
 8005c7a:	d9f0      	bls.n	8005c5e <USB_SetCurrentMode+0x60>
 8005c7c:	e001      	b.n	8005c82 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e005      	b.n	8005c8e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b32      	cmp	r3, #50	; 0x32
 8005c86:	d101      	bne.n	8005c8c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c98:	b084      	sub	sp, #16
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b086      	sub	sp, #24
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	e009      	b.n	8005ccc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	3340      	adds	r3, #64	; 0x40
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	2b0e      	cmp	r3, #14
 8005cd0:	d9f2      	bls.n	8005cb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d11c      	bne.n	8005d12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce6:	f043 0302 	orr.w	r3, r3, #2
 8005cea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e005      	b.n	8005d1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d24:	461a      	mov	r2, r3
 8005d26:	2300      	movs	r3, #0
 8005d28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d30:	4619      	mov	r1, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d38:	461a      	mov	r2, r3
 8005d3a:	680b      	ldr	r3, [r1, #0]
 8005d3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d10c      	bne.n	8005d5e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d104      	bne.n	8005d54 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f965 	bl	800601c <USB_SetDevSpeed>
 8005d52:	e008      	b.n	8005d66 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d54:	2101      	movs	r1, #1
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f960 	bl	800601c <USB_SetDevSpeed>
 8005d5c:	e003      	b.n	8005d66 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d5e:	2103      	movs	r1, #3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f95b 	bl	800601c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d66:	2110      	movs	r1, #16
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f8f3 	bl	8005f54 <USB_FlushTxFifo>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f91f 	bl	8005fbc <USB_FlushRxFifo>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2300      	movs	r3, #0
 8005d92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da6:	461a      	mov	r2, r3
 8005da8:	2300      	movs	r3, #0
 8005daa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dac:	2300      	movs	r3, #0
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	e043      	b.n	8005e3a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc8:	d118      	bne.n	8005dfc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	e013      	b.n	8005e0e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df2:	461a      	mov	r2, r3
 8005df4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	e008      	b.n	8005e0e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e08:	461a      	mov	r2, r3
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	3301      	adds	r3, #1
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d3b7      	bcc.n	8005db2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e42:	2300      	movs	r3, #0
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	e043      	b.n	8005ed0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e5e:	d118      	bne.n	8005e92 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10a      	bne.n	8005e7c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e72:	461a      	mov	r2, r3
 8005e74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	e013      	b.n	8005ea4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	e008      	b.n	8005ea4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ec8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d3b7      	bcc.n	8005e48 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ef8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d105      	bne.n	8005f0c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	f043 0210 	orr.w	r2, r3, #16
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699a      	ldr	r2, [r3, #24]
 8005f10:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <USB_DevInit+0x2b4>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f043 0208 	orr.w	r2, r3, #8
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d105      	bne.n	8005f3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699a      	ldr	r2, [r3, #24]
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <USB_DevInit+0x2b8>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f48:	b004      	add	sp, #16
 8005f4a:	4770      	bx	lr
 8005f4c:	803c3800 	.word	0x803c3800
 8005f50:	40000004 	.word	0x40000004

08005f54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3301      	adds	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <USB_FlushTxFifo+0x64>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d901      	bls.n	8005f74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e01b      	b.n	8005fac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	daf2      	bge.n	8005f62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	019b      	lsls	r3, r3, #6
 8005f84:	f043 0220 	orr.w	r2, r3, #32
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <USB_FlushTxFifo+0x64>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e006      	b.n	8005fac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d0f0      	beq.n	8005f8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	00030d40 	.word	0x00030d40

08005fbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4a11      	ldr	r2, [pc, #68]	; (8006018 <USB_FlushRxFifo+0x5c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e018      	b.n	800600c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	daf2      	bge.n	8005fc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2210      	movs	r2, #16
 8005fea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4a08      	ldr	r2, [pc, #32]	; (8006018 <USB_FlushRxFifo+0x5c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e006      	b.n	800600c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	2b10      	cmp	r3, #16
 8006008:	d0f0      	beq.n	8005fec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	00030d40 	.word	0x00030d40

0800601c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800603c:	4313      	orrs	r3, r2
 800603e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006068:	f023 0303 	bic.w	r3, r3, #3
 800606c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800607c:	f043 0302 	orr.w	r3, r3, #2
 8006080:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f003 0301 	and.w	r3, r3, #1
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4a13      	ldr	r2, [pc, #76]	; (8006110 <USB_CoreReset+0x64>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e01b      	b.n	8006102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	daf2      	bge.n	80060b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f043 0201 	orr.w	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3301      	adds	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4a09      	ldr	r2, [pc, #36]	; (8006110 <USB_CoreReset+0x64>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d901      	bls.n	80060f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e006      	b.n	8006102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d0f0      	beq.n	80060e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	00030d40 	.word	0x00030d40

08006114 <filtlength>:
    0.000000449585560,
    0.000001278766757,
    -0.000001509740857,
    0.0};

int filtlength(const char* name) {
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
    int len = strlen(name);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fa f8ef 	bl	8000300 <strlen>
 8006122:	4603      	mov	r3, r0
 8006124:	613b      	str	r3, [r7, #16]
    int i = 0;
 8006126:	2300      	movs	r3, #0
 8006128:	617b      	str	r3, [r7, #20]
    char *new_str = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
    int N = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	60bb      	str	r3, [r7, #8]
	if (!strcmp(name,"haar") || !strcmp(name,"db1")) {
 8006132:	49a1      	ldr	r1, [pc, #644]	; (80063b8 <filtlength+0x2a4>)
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7fa f883 	bl	8000240 <strcmp>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d006      	beq.n	800614e <filtlength+0x3a>
 8006140:	499e      	ldr	r1, [pc, #632]	; (80063bc <filtlength+0x2a8>)
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fa f87c 	bl	8000240 <strcmp>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <filtlength+0x3e>
		return 2;
 800614e:	2302      	movs	r3, #2
 8006150:	e206      	b.n	8006560 <filtlength+0x44c>
	}
    else if (len > 2 && strstr(name, "db") != NULL)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b02      	cmp	r3, #2
 8006156:	dd33      	ble.n	80061c0 <filtlength+0xac>
 8006158:	4999      	ldr	r1, [pc, #612]	; (80063c0 <filtlength+0x2ac>)
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f005 f8ac 	bl	800b2b8 <strstr>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d02c      	beq.n	80061c0 <filtlength+0xac>
    {
        new_str = (char*)malloc(sizeof(char)*(len-2 + 1));
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	3b01      	subs	r3, #1
 800616a:	4618      	mov	r0, r3
 800616c:	f003 fe3c 	bl	8009de8 <malloc>
 8006170:	4603      	mov	r3, r0
 8006172:	60fb      	str	r3, [r7, #12]
        for (i = 2; i < len + 1; i++)
 8006174:	2302      	movs	r3, #2
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	e00b      	b.n	8006192 <filtlength+0x7e>
            new_str[i - 2] = name[i];
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	441a      	add	r2, r3
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	3b02      	subs	r3, #2
 8006184:	68f9      	ldr	r1, [r7, #12]
 8006186:	440b      	add	r3, r1
 8006188:	7812      	ldrb	r2, [r2, #0]
 800618a:	701a      	strb	r2, [r3, #0]
        for (i = 2; i < len + 1; i++)
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	3301      	adds	r3, #1
 8006190:	617b      	str	r3, [r7, #20]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	429a      	cmp	r2, r3
 8006198:	daef      	bge.n	800617a <filtlength+0x66>

        N = atoi(new_str);
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f003 fdf8 	bl	8009d90 <atoi>
 80061a0:	60b8      	str	r0, [r7, #8]
        free(new_str);
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f003 fe28 	bl	8009df8 <free>
        if (N>38)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b26      	cmp	r3, #38	; 0x26
 80061ac:	dd05      	ble.n	80061ba <filtlength+0xa6>
        {
            printf("\n Filter Not in Database \n");
 80061ae:	4885      	ldr	r0, [pc, #532]	; (80063c4 <filtlength+0x2b0>)
 80061b0:	f004 fecc 	bl	800af4c <puts>
            return -1;
 80061b4:	f04f 33ff 	mov.w	r3, #4294967295
 80061b8:	e1d2      	b.n	8006560 <filtlength+0x44c>
        }

        return N * 2;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	e1cf      	b.n	8006560 <filtlength+0x44c>
    }
	else if (!strcmp(name,"bior1.1")){
 80061c0:	4981      	ldr	r1, [pc, #516]	; (80063c8 <filtlength+0x2b4>)
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fa f83c 	bl	8000240 <strcmp>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <filtlength+0xbe>
		return 2;
 80061ce:	2302      	movs	r3, #2
 80061d0:	e1c6      	b.n	8006560 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior1.3")){
 80061d2:	497e      	ldr	r1, [pc, #504]	; (80063cc <filtlength+0x2b8>)
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7fa f833 	bl	8000240 <strcmp>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <filtlength+0xd0>
		return 6;
 80061e0:	2306      	movs	r3, #6
 80061e2:	e1bd      	b.n	8006560 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior1.5")){
 80061e4:	497a      	ldr	r1, [pc, #488]	; (80063d0 <filtlength+0x2bc>)
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fa f82a 	bl	8000240 <strcmp>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <filtlength+0xe2>
		return 10;
 80061f2:	230a      	movs	r3, #10
 80061f4:	e1b4      	b.n	8006560 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior2.2")){
 80061f6:	4977      	ldr	r1, [pc, #476]	; (80063d4 <filtlength+0x2c0>)
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7fa f821 	bl	8000240 <strcmp>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <filtlength+0xf4>
		return 6;
 8006204:	2306      	movs	r3, #6
 8006206:	e1ab      	b.n	8006560 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior2.4")){
 8006208:	4973      	ldr	r1, [pc, #460]	; (80063d8 <filtlength+0x2c4>)
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7fa f818 	bl	8000240 <strcmp>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <filtlength+0x106>
		return 10;
 8006216:	230a      	movs	r3, #10
 8006218:	e1a2      	b.n	8006560 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior2.6")){
 800621a:	4970      	ldr	r1, [pc, #448]	; (80063dc <filtlength+0x2c8>)
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7fa f80f 	bl	8000240 <strcmp>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <filtlength+0x118>
		return 14;
 8006228:	230e      	movs	r3, #14
 800622a:	e199      	b.n	8006560 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior2.8")){
 800622c:	496c      	ldr	r1, [pc, #432]	; (80063e0 <filtlength+0x2cc>)
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fa f806 	bl	8000240 <strcmp>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <filtlength+0x12a>
		return 18;
 800623a:	2312      	movs	r3, #18
 800623c:	e190      	b.n	8006560 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior3.1")){
 800623e:	4969      	ldr	r1, [pc, #420]	; (80063e4 <filtlength+0x2d0>)
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7f9 fffd 	bl	8000240 <strcmp>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <filtlength+0x13c>
		return 4;
 800624c:	2304      	movs	r3, #4
 800624e:	e187      	b.n	8006560 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior3.3")){
 8006250:	4965      	ldr	r1, [pc, #404]	; (80063e8 <filtlength+0x2d4>)
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7f9 fff4 	bl	8000240 <strcmp>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <filtlength+0x14e>
		return 8;
 800625e:	2308      	movs	r3, #8
 8006260:	e17e      	b.n	8006560 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior3.5")){
 8006262:	4962      	ldr	r1, [pc, #392]	; (80063ec <filtlength+0x2d8>)
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7f9 ffeb 	bl	8000240 <strcmp>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <filtlength+0x160>
		return 12;
 8006270:	230c      	movs	r3, #12
 8006272:	e175      	b.n	8006560 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior3.7")){
 8006274:	495e      	ldr	r1, [pc, #376]	; (80063f0 <filtlength+0x2dc>)
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7f9 ffe2 	bl	8000240 <strcmp>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <filtlength+0x172>
		return 16;
 8006282:	2310      	movs	r3, #16
 8006284:	e16c      	b.n	8006560 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior3.9")){
 8006286:	495b      	ldr	r1, [pc, #364]	; (80063f4 <filtlength+0x2e0>)
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7f9 ffd9 	bl	8000240 <strcmp>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <filtlength+0x184>
		return 20;
 8006294:	2314      	movs	r3, #20
 8006296:	e163      	b.n	8006560 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior4.4")){
 8006298:	4957      	ldr	r1, [pc, #348]	; (80063f8 <filtlength+0x2e4>)
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7f9 ffd0 	bl	8000240 <strcmp>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <filtlength+0x196>
		return 10;
 80062a6:	230a      	movs	r3, #10
 80062a8:	e15a      	b.n	8006560 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior5.5")){
 80062aa:	4954      	ldr	r1, [pc, #336]	; (80063fc <filtlength+0x2e8>)
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7f9 ffc7 	bl	8000240 <strcmp>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <filtlength+0x1a8>
		return 12;
 80062b8:	230c      	movs	r3, #12
 80062ba:	e151      	b.n	8006560 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior6.8")){
 80062bc:	4950      	ldr	r1, [pc, #320]	; (8006400 <filtlength+0x2ec>)
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7f9 ffbe 	bl	8000240 <strcmp>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <filtlength+0x1ba>
		return 18;
 80062ca:	2312      	movs	r3, #18
 80062cc:	e148      	b.n	8006560 <filtlength+0x44c>
	}
    else if (!strcmp(name, "rbior1.1")){
 80062ce:	494d      	ldr	r1, [pc, #308]	; (8006404 <filtlength+0x2f0>)
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7f9 ffb5 	bl	8000240 <strcmp>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <filtlength+0x1cc>
        return 2;
 80062dc:	2302      	movs	r3, #2
 80062de:	e13f      	b.n	8006560 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior1.3")){
 80062e0:	4949      	ldr	r1, [pc, #292]	; (8006408 <filtlength+0x2f4>)
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7f9 ffac 	bl	8000240 <strcmp>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <filtlength+0x1de>
        return 6;
 80062ee:	2306      	movs	r3, #6
 80062f0:	e136      	b.n	8006560 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior1.5")){
 80062f2:	4946      	ldr	r1, [pc, #280]	; (800640c <filtlength+0x2f8>)
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7f9 ffa3 	bl	8000240 <strcmp>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <filtlength+0x1f0>
        return 10;
 8006300:	230a      	movs	r3, #10
 8006302:	e12d      	b.n	8006560 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior2.2")){
 8006304:	4942      	ldr	r1, [pc, #264]	; (8006410 <filtlength+0x2fc>)
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7f9 ff9a 	bl	8000240 <strcmp>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <filtlength+0x202>
        return 6;
 8006312:	2306      	movs	r3, #6
 8006314:	e124      	b.n	8006560 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior2.4")){
 8006316:	493f      	ldr	r1, [pc, #252]	; (8006414 <filtlength+0x300>)
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7f9 ff91 	bl	8000240 <strcmp>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <filtlength+0x214>
        return 10;
 8006324:	230a      	movs	r3, #10
 8006326:	e11b      	b.n	8006560 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior2.6")){
 8006328:	493b      	ldr	r1, [pc, #236]	; (8006418 <filtlength+0x304>)
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7f9 ff88 	bl	8000240 <strcmp>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <filtlength+0x226>
        return 14;
 8006336:	230e      	movs	r3, #14
 8006338:	e112      	b.n	8006560 <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior2.8")){
 800633a:	4938      	ldr	r1, [pc, #224]	; (800641c <filtlength+0x308>)
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7f9 ff7f 	bl	8000240 <strcmp>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <filtlength+0x238>
        return 18;
 8006348:	2312      	movs	r3, #18
 800634a:	e109      	b.n	8006560 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior3.1")){
 800634c:	4934      	ldr	r1, [pc, #208]	; (8006420 <filtlength+0x30c>)
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7f9 ff76 	bl	8000240 <strcmp>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <filtlength+0x24a>
        return 4;
 800635a:	2304      	movs	r3, #4
 800635c:	e100      	b.n	8006560 <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior3.3")){
 800635e:	4931      	ldr	r1, [pc, #196]	; (8006424 <filtlength+0x310>)
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7f9 ff6d 	bl	8000240 <strcmp>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <filtlength+0x25c>
        return 8;
 800636c:	2308      	movs	r3, #8
 800636e:	e0f7      	b.n	8006560 <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior3.5")){
 8006370:	492d      	ldr	r1, [pc, #180]	; (8006428 <filtlength+0x314>)
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7f9 ff64 	bl	8000240 <strcmp>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <filtlength+0x26e>
        return 12;
 800637e:	230c      	movs	r3, #12
 8006380:	e0ee      	b.n	8006560 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior3.7")){
 8006382:	492a      	ldr	r1, [pc, #168]	; (800642c <filtlength+0x318>)
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7f9 ff5b 	bl	8000240 <strcmp>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <filtlength+0x280>
        return 16;
 8006390:	2310      	movs	r3, #16
 8006392:	e0e5      	b.n	8006560 <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior3.9")){
 8006394:	4926      	ldr	r1, [pc, #152]	; (8006430 <filtlength+0x31c>)
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7f9 ff52 	bl	8000240 <strcmp>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <filtlength+0x292>
        return 20;
 80063a2:	2314      	movs	r3, #20
 80063a4:	e0dc      	b.n	8006560 <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior4.4")){
 80063a6:	4923      	ldr	r1, [pc, #140]	; (8006434 <filtlength+0x320>)
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7f9 ff49 	bl	8000240 <strcmp>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d141      	bne.n	8006438 <filtlength+0x324>
        return 10;
 80063b4:	230a      	movs	r3, #10
 80063b6:	e0d3      	b.n	8006560 <filtlength+0x44c>
 80063b8:	0800ea48 	.word	0x0800ea48
 80063bc:	0800ea50 	.word	0x0800ea50
 80063c0:	0800ea54 	.word	0x0800ea54
 80063c4:	0800ea58 	.word	0x0800ea58
 80063c8:	0800ea74 	.word	0x0800ea74
 80063cc:	0800ea7c 	.word	0x0800ea7c
 80063d0:	0800ea84 	.word	0x0800ea84
 80063d4:	0800ea8c 	.word	0x0800ea8c
 80063d8:	0800ea94 	.word	0x0800ea94
 80063dc:	0800ea9c 	.word	0x0800ea9c
 80063e0:	0800eaa4 	.word	0x0800eaa4
 80063e4:	0800eaac 	.word	0x0800eaac
 80063e8:	0800eab4 	.word	0x0800eab4
 80063ec:	0800eabc 	.word	0x0800eabc
 80063f0:	0800eac4 	.word	0x0800eac4
 80063f4:	0800eacc 	.word	0x0800eacc
 80063f8:	0800ead4 	.word	0x0800ead4
 80063fc:	0800eadc 	.word	0x0800eadc
 8006400:	0800eae4 	.word	0x0800eae4
 8006404:	0800eaec 	.word	0x0800eaec
 8006408:	0800eaf8 	.word	0x0800eaf8
 800640c:	0800eb04 	.word	0x0800eb04
 8006410:	0800eb10 	.word	0x0800eb10
 8006414:	0800eb1c 	.word	0x0800eb1c
 8006418:	0800eb28 	.word	0x0800eb28
 800641c:	0800eb34 	.word	0x0800eb34
 8006420:	0800eb40 	.word	0x0800eb40
 8006424:	0800eb4c 	.word	0x0800eb4c
 8006428:	0800eb58 	.word	0x0800eb58
 800642c:	0800eb64 	.word	0x0800eb64
 8006430:	0800eb70 	.word	0x0800eb70
 8006434:	0800eb7c 	.word	0x0800eb7c
    }
    else if (!strcmp(name, "rbior5.5")){
 8006438:	494b      	ldr	r1, [pc, #300]	; (8006568 <filtlength+0x454>)
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7f9 ff00 	bl	8000240 <strcmp>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <filtlength+0x336>
        return 12;
 8006446:	230c      	movs	r3, #12
 8006448:	e08a      	b.n	8006560 <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior6.8")){
 800644a:	4948      	ldr	r1, [pc, #288]	; (800656c <filtlength+0x458>)
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7f9 fef7 	bl	8000240 <strcmp>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <filtlength+0x348>
        return 18;
 8006458:	2312      	movs	r3, #18
 800645a:	e081      	b.n	8006560 <filtlength+0x44c>
    }
    else if (len > 4 && strstr(name, "coif") != NULL)
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b04      	cmp	r3, #4
 8006460:	dd36      	ble.n	80064d0 <filtlength+0x3bc>
 8006462:	4943      	ldr	r1, [pc, #268]	; (8006570 <filtlength+0x45c>)
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f004 ff27 	bl	800b2b8 <strstr>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d02f      	beq.n	80064d0 <filtlength+0x3bc>
    {
        new_str = (char*)malloc(sizeof(char)*(len - 4 + 1));
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	3b03      	subs	r3, #3
 8006474:	4618      	mov	r0, r3
 8006476:	f003 fcb7 	bl	8009de8 <malloc>
 800647a:	4603      	mov	r3, r0
 800647c:	60fb      	str	r3, [r7, #12]
        for (i = 4; i < len + 1; i++)
 800647e:	2304      	movs	r3, #4
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	e00b      	b.n	800649c <filtlength+0x388>
            new_str[i - 4] = name[i];
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	441a      	add	r2, r3
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	3b04      	subs	r3, #4
 800648e:	68f9      	ldr	r1, [r7, #12]
 8006490:	440b      	add	r3, r1
 8006492:	7812      	ldrb	r2, [r2, #0]
 8006494:	701a      	strb	r2, [r3, #0]
        for (i = 4; i < len + 1; i++)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	3301      	adds	r3, #1
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	daef      	bge.n	8006484 <filtlength+0x370>

        N = atoi(new_str);
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f003 fc73 	bl	8009d90 <atoi>
 80064aa:	60b8      	str	r0, [r7, #8]
        free(new_str);
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f003 fca3 	bl	8009df8 <free>
        if (N>17)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b11      	cmp	r3, #17
 80064b6:	dd05      	ble.n	80064c4 <filtlength+0x3b0>
        {
            printf("\n Filter Not in Database \n");
 80064b8:	482e      	ldr	r0, [pc, #184]	; (8006574 <filtlength+0x460>)
 80064ba:	f004 fd47 	bl	800af4c <puts>
            return -1;
 80064be:	f04f 33ff 	mov.w	r3, #4294967295
 80064c2:	e04d      	b.n	8006560 <filtlength+0x44c>
        }

        return N * 6;
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	4413      	add	r3, r2
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	e047      	b.n	8006560 <filtlength+0x44c>
    }
    else if (len > 3 && strstr(name, "sym") != NULL)
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	dd36      	ble.n	8006544 <filtlength+0x430>
 80064d6:	4928      	ldr	r1, [pc, #160]	; (8006578 <filtlength+0x464>)
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f004 feed 	bl	800b2b8 <strstr>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d02f      	beq.n	8006544 <filtlength+0x430>
    {
        new_str = (char*)malloc(sizeof(char)*(len - 3 + 1));
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	3b02      	subs	r3, #2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f003 fc7d 	bl	8009de8 <malloc>
 80064ee:	4603      	mov	r3, r0
 80064f0:	60fb      	str	r3, [r7, #12]
        for (i = 3; i < len + 1; i++)
 80064f2:	2303      	movs	r3, #3
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	e00b      	b.n	8006510 <filtlength+0x3fc>
            new_str[i - 3] = name[i];
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	441a      	add	r2, r3
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	3b03      	subs	r3, #3
 8006502:	68f9      	ldr	r1, [r7, #12]
 8006504:	440b      	add	r3, r1
 8006506:	7812      	ldrb	r2, [r2, #0]
 8006508:	701a      	strb	r2, [r3, #0]
        for (i = 3; i < len + 1; i++)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	3301      	adds	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	429a      	cmp	r2, r3
 8006516:	daef      	bge.n	80064f8 <filtlength+0x3e4>

        N = atoi(new_str);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f003 fc39 	bl	8009d90 <atoi>
 800651e:	60b8      	str	r0, [r7, #8]
        free(new_str);
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f003 fc69 	bl	8009df8 <free>
        if (N>20 || N < 2)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b14      	cmp	r3, #20
 800652a:	dc02      	bgt.n	8006532 <filtlength+0x41e>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b01      	cmp	r3, #1
 8006530:	dc05      	bgt.n	800653e <filtlength+0x42a>
        {
            printf("\n Filter Not in Database \n");
 8006532:	4810      	ldr	r0, [pc, #64]	; (8006574 <filtlength+0x460>)
 8006534:	f004 fd0a 	bl	800af4c <puts>
            return -1;
 8006538:	f04f 33ff 	mov.w	r3, #4294967295
 800653c:	e010      	b.n	8006560 <filtlength+0x44c>
        }

        return N * 2;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	e00d      	b.n	8006560 <filtlength+0x44c>
    }
    else if (!strcmp(name, "meyer")){
 8006544:	490d      	ldr	r1, [pc, #52]	; (800657c <filtlength+0x468>)
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7f9 fe7a 	bl	8000240 <strcmp>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <filtlength+0x442>
        return 102;
 8006552:	2366      	movs	r3, #102	; 0x66
 8006554:	e004      	b.n	8006560 <filtlength+0x44c>
    }
	else {
		printf("\n Filter Not in Database \n");
 8006556:	4807      	ldr	r0, [pc, #28]	; (8006574 <filtlength+0x460>)
 8006558:	f004 fcf8 	bl	800af4c <puts>
		return -1;
 800655c:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	0800eb88 	.word	0x0800eb88
 800656c:	0800eb94 	.word	0x0800eb94
 8006570:	0800eba0 	.word	0x0800eba0
 8006574:	0800ea58 	.word	0x0800ea58
 8006578:	0800eba8 	.word	0x0800eba8
 800657c:	0800ebac 	.word	0x0800ebac

08006580 <copy_reverse>:

void copy_reverse(const double *in, int N,double *out)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
    int count = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]
    for (count = 0; count < N; count++)
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	e014      	b.n	80065c0 <copy_reverse+0x40>
        out[count] = in[N - count - 1];
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	461a      	mov	r2, r3
 800659e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80065a2:	4413      	add	r3, r2
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	00d2      	lsls	r2, r2, #3
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	4411      	add	r1, r2
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	e9c1 2300 	strd	r2, r3, [r1]
    for (count = 0; count < N; count++)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	3301      	adds	r3, #1
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	dbe6      	blt.n	8006596 <copy_reverse+0x16>
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <qmf_wrev>:

void qmf_wrev(const double *in, int N, double *out)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b086      	sub	sp, #24
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	607a      	str	r2, [r7, #4]
    double *sigOutTemp;
    sigOutTemp = (double*)malloc(N*sizeof(double));
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	4618      	mov	r0, r3
 80065e8:	f003 fbfe 	bl	8009de8 <malloc>
 80065ec:	4603      	mov	r3, r0
 80065ee:	617b      	str	r3, [r7, #20]

    qmf_even(in, N, sigOutTemp);
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f80c 	bl	8006612 <qmf_even>
    copy_reverse(sigOutTemp, N, out);
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	68b9      	ldr	r1, [r7, #8]
 80065fe:	6978      	ldr	r0, [r7, #20]
 8006600:	f7ff ffbe 	bl	8006580 <copy_reverse>

    free(sigOutTemp);
 8006604:	6978      	ldr	r0, [r7, #20]
 8006606:	f003 fbf7 	bl	8009df8 <free>
    return;
 800660a:	bf00      	nop
}
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <qmf_even>:

void qmf_even(const double *in, int N,double *out)
{
 8006612:	b480      	push	{r7}
 8006614:	b087      	sub	sp, #28
 8006616:	af00      	add	r7, sp, #0
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	607a      	str	r2, [r7, #4]
    int count = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]
    for (count = 0; count < N; count++)
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	e027      	b.n	8006678 <qmf_even+0x66>
    {
        out[count] = in[N - count - 1];
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	461a      	mov	r2, r3
 8006630:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006634:	4413      	add	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	00d2      	lsls	r2, r2, #3
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	4411      	add	r1, r2
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	e9c1 2300 	strd	r2, r3, [r1]
        if (count % 2 != 0)
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00d      	beq.n	8006672 <qmf_even+0x60>
        {
            out[count] = -1 * out[count];
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	4413      	add	r3, r2
 800665e:	ed93 7b00 	vldr	d7, [r3]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	4413      	add	r3, r2
 800666a:	eeb1 7b47 	vneg.f64	d7, d7
 800666e:	ed83 7b00 	vstr	d7, [r3]
    for (count = 0; count < N; count++)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	3301      	adds	r3, #1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	429a      	cmp	r2, r3
 800667e:	dbd3      	blt.n	8006628 <qmf_even+0x16>
        }
    }
}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <copy>:
void copy(const double *in, int N, double *out)
{
 800668e:	b480      	push	{r7}
 8006690:	b087      	sub	sp, #28
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
    int count = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]
    for (count = 0; count < N; count++)
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	e00e      	b.n	80066c2 <copy+0x34>
        out[count] = in[count];
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4413      	add	r3, r2
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	00d2      	lsls	r2, r2, #3
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4411      	add	r1, r2
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	e9c1 2300 	strd	r2, r3, [r1]
    for (count = 0; count < N; count++)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	3301      	adds	r3, #1
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	dbec      	blt.n	80066a4 <copy+0x16>
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <filtcoef>:

int filtcoef(const char* name, double *lp1, double *hp1, double *lp2, double *hp2) {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b098      	sub	sp, #96	; 0x60
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
    int i = 0; 
 80066e6:	2300      	movs	r3, #0
 80066e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    int N = filtlength(name);
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff fd12 	bl	8006114 <filtlength>
 80066f0:	65b8      	str	r0, [r7, #88]	; 0x58
	if (!strcmp(name,"haar") || !strcmp(name,"db1")) {
 80066f2:	4999      	ldr	r1, [pc, #612]	; (8006958 <filtcoef+0x280>)
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f7f9 fda3 	bl	8000240 <strcmp>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d006      	beq.n	800670e <filtcoef+0x36>
 8006700:	4996      	ldr	r1, [pc, #600]	; (800695c <filtcoef+0x284>)
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7f9 fd9c 	bl	8000240 <strcmp>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d116      	bne.n	800673c <filtcoef+0x64>
        copy_reverse(db1, N, lp1);
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006712:	4893      	ldr	r0, [pc, #588]	; (8006960 <filtcoef+0x288>)
 8006714:	f7ff ff34 	bl	8006580 <copy_reverse>
        qmf_wrev(db1, N, hp1);
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800671c:	4890      	ldr	r0, [pc, #576]	; (8006960 <filtcoef+0x288>)
 800671e:	f7ff ff5a 	bl	80065d6 <qmf_wrev>
        copy(db1, N, lp2);
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006726:	488e      	ldr	r0, [pc, #568]	; (8006960 <filtcoef+0x288>)
 8006728:	f7ff ffb1 	bl	800668e <copy>
        qmf_even(db1, N, hp2);
 800672c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800672e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006730:	488b      	ldr	r0, [pc, #556]	; (8006960 <filtcoef+0x288>)
 8006732:	f7ff ff6e 	bl	8006612 <qmf_even>

		return N;
 8006736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006738:	f002 b8e6 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db2")){
 800673c:	4989      	ldr	r1, [pc, #548]	; (8006964 <filtcoef+0x28c>)
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7f9 fd7e 	bl	8000240 <strcmp>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d116      	bne.n	8006778 <filtcoef+0xa0>
        copy_reverse(db2, N, lp1);
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800674e:	4886      	ldr	r0, [pc, #536]	; (8006968 <filtcoef+0x290>)
 8006750:	f7ff ff16 	bl	8006580 <copy_reverse>
        qmf_wrev(db2, N, hp1);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006758:	4883      	ldr	r0, [pc, #524]	; (8006968 <filtcoef+0x290>)
 800675a:	f7ff ff3c 	bl	80065d6 <qmf_wrev>
        copy(db2, N, lp2);
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006762:	4881      	ldr	r0, [pc, #516]	; (8006968 <filtcoef+0x290>)
 8006764:	f7ff ff93 	bl	800668e <copy>
        qmf_even(db2, N, hp2);
 8006768:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800676a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800676c:	487e      	ldr	r0, [pc, #504]	; (8006968 <filtcoef+0x290>)
 800676e:	f7ff ff50 	bl	8006612 <qmf_even>

        return N;
 8006772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006774:	f002 b8c8 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db3")){
 8006778:	497c      	ldr	r1, [pc, #496]	; (800696c <filtcoef+0x294>)
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7f9 fd60 	bl	8000240 <strcmp>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d116      	bne.n	80067b4 <filtcoef+0xdc>
        copy_reverse(db3, N, lp1);
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800678a:	4879      	ldr	r0, [pc, #484]	; (8006970 <filtcoef+0x298>)
 800678c:	f7ff fef8 	bl	8006580 <copy_reverse>
        qmf_wrev(db3, N, hp1);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006794:	4876      	ldr	r0, [pc, #472]	; (8006970 <filtcoef+0x298>)
 8006796:	f7ff ff1e 	bl	80065d6 <qmf_wrev>
        copy(db3, N, lp2);
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800679e:	4874      	ldr	r0, [pc, #464]	; (8006970 <filtcoef+0x298>)
 80067a0:	f7ff ff75 	bl	800668e <copy>
        qmf_even(db3, N, hp2);
 80067a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067a8:	4871      	ldr	r0, [pc, #452]	; (8006970 <filtcoef+0x298>)
 80067aa:	f7ff ff32 	bl	8006612 <qmf_even>

        return N;
 80067ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067b0:	f002 b8aa 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db4")){
 80067b4:	496f      	ldr	r1, [pc, #444]	; (8006974 <filtcoef+0x29c>)
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f7f9 fd42 	bl	8000240 <strcmp>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d116      	bne.n	80067f0 <filtcoef+0x118>
        copy_reverse(db4, N, lp1);
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067c6:	486c      	ldr	r0, [pc, #432]	; (8006978 <filtcoef+0x2a0>)
 80067c8:	f7ff feda 	bl	8006580 <copy_reverse>
        qmf_wrev(db4, N, hp1);
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067d0:	4869      	ldr	r0, [pc, #420]	; (8006978 <filtcoef+0x2a0>)
 80067d2:	f7ff ff00 	bl	80065d6 <qmf_wrev>
        copy(db4, N, lp2);
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067da:	4867      	ldr	r0, [pc, #412]	; (8006978 <filtcoef+0x2a0>)
 80067dc:	f7ff ff57 	bl	800668e <copy>
        qmf_even(db4, N, hp2);
 80067e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067e4:	4864      	ldr	r0, [pc, #400]	; (8006978 <filtcoef+0x2a0>)
 80067e6:	f7ff ff14 	bl	8006612 <qmf_even>

        return N;
 80067ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ec:	f002 b88c 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db5")){
 80067f0:	4962      	ldr	r1, [pc, #392]	; (800697c <filtcoef+0x2a4>)
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7f9 fd24 	bl	8000240 <strcmp>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d116      	bne.n	800682c <filtcoef+0x154>
        copy_reverse(db5, N, lp1);
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006802:	485f      	ldr	r0, [pc, #380]	; (8006980 <filtcoef+0x2a8>)
 8006804:	f7ff febc 	bl	8006580 <copy_reverse>
        qmf_wrev(db5, N, hp1);
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800680c:	485c      	ldr	r0, [pc, #368]	; (8006980 <filtcoef+0x2a8>)
 800680e:	f7ff fee2 	bl	80065d6 <qmf_wrev>
        copy(db5, N, lp2);
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006816:	485a      	ldr	r0, [pc, #360]	; (8006980 <filtcoef+0x2a8>)
 8006818:	f7ff ff39 	bl	800668e <copy>
        qmf_even(db5, N, hp2);
 800681c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800681e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006820:	4857      	ldr	r0, [pc, #348]	; (8006980 <filtcoef+0x2a8>)
 8006822:	f7ff fef6 	bl	8006612 <qmf_even>

        return N;
 8006826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006828:	f002 b86e 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db6")){
 800682c:	4955      	ldr	r1, [pc, #340]	; (8006984 <filtcoef+0x2ac>)
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7f9 fd06 	bl	8000240 <strcmp>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d116      	bne.n	8006868 <filtcoef+0x190>
        copy_reverse(db6, N, lp1);
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800683e:	4852      	ldr	r0, [pc, #328]	; (8006988 <filtcoef+0x2b0>)
 8006840:	f7ff fe9e 	bl	8006580 <copy_reverse>
        qmf_wrev(db6, N, hp1);
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006848:	484f      	ldr	r0, [pc, #316]	; (8006988 <filtcoef+0x2b0>)
 800684a:	f7ff fec4 	bl	80065d6 <qmf_wrev>
        copy(db6, N, lp2);
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006852:	484d      	ldr	r0, [pc, #308]	; (8006988 <filtcoef+0x2b0>)
 8006854:	f7ff ff1b 	bl	800668e <copy>
        qmf_even(db6, N, hp2);
 8006858:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800685a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800685c:	484a      	ldr	r0, [pc, #296]	; (8006988 <filtcoef+0x2b0>)
 800685e:	f7ff fed8 	bl	8006612 <qmf_even>

        return N;
 8006862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006864:	f002 b850 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db7")){
 8006868:	4948      	ldr	r1, [pc, #288]	; (800698c <filtcoef+0x2b4>)
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7f9 fce8 	bl	8000240 <strcmp>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d116      	bne.n	80068a4 <filtcoef+0x1cc>
        copy_reverse(db7, N, lp1);
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800687a:	4845      	ldr	r0, [pc, #276]	; (8006990 <filtcoef+0x2b8>)
 800687c:	f7ff fe80 	bl	8006580 <copy_reverse>
        qmf_wrev(db7, N, hp1);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006884:	4842      	ldr	r0, [pc, #264]	; (8006990 <filtcoef+0x2b8>)
 8006886:	f7ff fea6 	bl	80065d6 <qmf_wrev>
        copy(db7, N, lp2);
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800688e:	4840      	ldr	r0, [pc, #256]	; (8006990 <filtcoef+0x2b8>)
 8006890:	f7ff fefd 	bl	800668e <copy>
        qmf_even(db7, N, hp2);
 8006894:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006896:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006898:	483d      	ldr	r0, [pc, #244]	; (8006990 <filtcoef+0x2b8>)
 800689a:	f7ff feba 	bl	8006612 <qmf_even>

        return N;
 800689e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068a0:	f002 b832 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db8")){
 80068a4:	493b      	ldr	r1, [pc, #236]	; (8006994 <filtcoef+0x2bc>)
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f7f9 fcca 	bl	8000240 <strcmp>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d116      	bne.n	80068e0 <filtcoef+0x208>
        copy_reverse(db8, N, lp1);
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068b6:	4838      	ldr	r0, [pc, #224]	; (8006998 <filtcoef+0x2c0>)
 80068b8:	f7ff fe62 	bl	8006580 <copy_reverse>
        qmf_wrev(db8, N, hp1);
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068c0:	4835      	ldr	r0, [pc, #212]	; (8006998 <filtcoef+0x2c0>)
 80068c2:	f7ff fe88 	bl	80065d6 <qmf_wrev>
        copy(db8, N, lp2);
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068ca:	4833      	ldr	r0, [pc, #204]	; (8006998 <filtcoef+0x2c0>)
 80068cc:	f7ff fedf 	bl	800668e <copy>
        qmf_even(db8, N, hp2);
 80068d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068d4:	4830      	ldr	r0, [pc, #192]	; (8006998 <filtcoef+0x2c0>)
 80068d6:	f7ff fe9c 	bl	8006612 <qmf_even>

        return N;
 80068da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068dc:	f002 b814 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db9")){
 80068e0:	492e      	ldr	r1, [pc, #184]	; (800699c <filtcoef+0x2c4>)
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7f9 fcac 	bl	8000240 <strcmp>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d116      	bne.n	800691c <filtcoef+0x244>
        copy_reverse(db9, N, lp1);
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068f2:	482b      	ldr	r0, [pc, #172]	; (80069a0 <filtcoef+0x2c8>)
 80068f4:	f7ff fe44 	bl	8006580 <copy_reverse>
        qmf_wrev(db9, N, hp1);
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068fc:	4828      	ldr	r0, [pc, #160]	; (80069a0 <filtcoef+0x2c8>)
 80068fe:	f7ff fe6a 	bl	80065d6 <qmf_wrev>
        copy(db9, N, lp2);
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006906:	4826      	ldr	r0, [pc, #152]	; (80069a0 <filtcoef+0x2c8>)
 8006908:	f7ff fec1 	bl	800668e <copy>
        qmf_even(db9, N, hp2);
 800690c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800690e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006910:	4823      	ldr	r0, [pc, #140]	; (80069a0 <filtcoef+0x2c8>)
 8006912:	f7ff fe7e 	bl	8006612 <qmf_even>

        return N;
 8006916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006918:	f001 bff6 	b.w	8008908 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"db10")){
 800691c:	4921      	ldr	r1, [pc, #132]	; (80069a4 <filtcoef+0x2cc>)
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7f9 fc8e 	bl	8000240 <strcmp>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d140      	bne.n	80069ac <filtcoef+0x2d4>
        copy_reverse(db10, N, lp1);
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800692e:	481e      	ldr	r0, [pc, #120]	; (80069a8 <filtcoef+0x2d0>)
 8006930:	f7ff fe26 	bl	8006580 <copy_reverse>
        qmf_wrev(db10, N, hp1);
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006938:	481b      	ldr	r0, [pc, #108]	; (80069a8 <filtcoef+0x2d0>)
 800693a:	f7ff fe4c 	bl	80065d6 <qmf_wrev>
        copy(db10, N, lp2);
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006942:	4819      	ldr	r0, [pc, #100]	; (80069a8 <filtcoef+0x2d0>)
 8006944:	f7ff fea3 	bl	800668e <copy>
        qmf_even(db10, N, hp2);
 8006948:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800694a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800694c:	4816      	ldr	r0, [pc, #88]	; (80069a8 <filtcoef+0x2d0>)
 800694e:	f7ff fe60 	bl	8006612 <qmf_even>

        return N;
 8006952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006954:	f001 bfd8 	b.w	8008908 <filtcoef+0x2230>
 8006958:	0800ea48 	.word	0x0800ea48
 800695c:	0800ea50 	.word	0x0800ea50
 8006960:	0800fba0 	.word	0x0800fba0
 8006964:	0800ebb4 	.word	0x0800ebb4
 8006968:	0800fbb0 	.word	0x0800fbb0
 800696c:	0800ebb8 	.word	0x0800ebb8
 8006970:	0800fbd0 	.word	0x0800fbd0
 8006974:	0800ebbc 	.word	0x0800ebbc
 8006978:	0800fc00 	.word	0x0800fc00
 800697c:	0800ebc0 	.word	0x0800ebc0
 8006980:	0800fc40 	.word	0x0800fc40
 8006984:	0800ebc4 	.word	0x0800ebc4
 8006988:	0800fc90 	.word	0x0800fc90
 800698c:	0800ebc8 	.word	0x0800ebc8
 8006990:	0800fcf0 	.word	0x0800fcf0
 8006994:	0800ebcc 	.word	0x0800ebcc
 8006998:	0800fd60 	.word	0x0800fd60
 800699c:	0800ebd0 	.word	0x0800ebd0
 80069a0:	0800fde0 	.word	0x0800fde0
 80069a4:	0800ebd4 	.word	0x0800ebd4
 80069a8:	0800fe70 	.word	0x0800fe70
	}

	else if (!strcmp(name,"db11")){
 80069ac:	4995      	ldr	r1, [pc, #596]	; (8006c04 <filtcoef+0x52c>)
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f7f9 fc46 	bl	8000240 <strcmp>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d116      	bne.n	80069e8 <filtcoef+0x310>
        copy_reverse(db11, N, lp1);
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069be:	4892      	ldr	r0, [pc, #584]	; (8006c08 <filtcoef+0x530>)
 80069c0:	f7ff fdde 	bl	8006580 <copy_reverse>
        qmf_wrev(db11, N, hp1);
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069c8:	488f      	ldr	r0, [pc, #572]	; (8006c08 <filtcoef+0x530>)
 80069ca:	f7ff fe04 	bl	80065d6 <qmf_wrev>
        copy(db11, N, lp2);
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069d2:	488d      	ldr	r0, [pc, #564]	; (8006c08 <filtcoef+0x530>)
 80069d4:	f7ff fe5b 	bl	800668e <copy>
        qmf_even(db11, N, hp2);
 80069d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069dc:	488a      	ldr	r0, [pc, #552]	; (8006c08 <filtcoef+0x530>)
 80069de:	f7ff fe18 	bl	8006612 <qmf_even>

        return N;
 80069e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069e4:	f001 bf90 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db12")){
 80069e8:	4988      	ldr	r1, [pc, #544]	; (8006c0c <filtcoef+0x534>)
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f7f9 fc28 	bl	8000240 <strcmp>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d116      	bne.n	8006a24 <filtcoef+0x34c>
        copy_reverse(db12, N, lp1);
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069fa:	4885      	ldr	r0, [pc, #532]	; (8006c10 <filtcoef+0x538>)
 80069fc:	f7ff fdc0 	bl	8006580 <copy_reverse>
        qmf_wrev(db12, N, hp1);
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a04:	4882      	ldr	r0, [pc, #520]	; (8006c10 <filtcoef+0x538>)
 8006a06:	f7ff fde6 	bl	80065d6 <qmf_wrev>
        copy(db12, N, lp2);
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a0e:	4880      	ldr	r0, [pc, #512]	; (8006c10 <filtcoef+0x538>)
 8006a10:	f7ff fe3d 	bl	800668e <copy>
        qmf_even(db12, N, hp2);
 8006a14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a18:	487d      	ldr	r0, [pc, #500]	; (8006c10 <filtcoef+0x538>)
 8006a1a:	f7ff fdfa 	bl	8006612 <qmf_even>

        return N;
 8006a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a20:	f001 bf72 	b.w	8008908 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"db13")){
 8006a24:	497b      	ldr	r1, [pc, #492]	; (8006c14 <filtcoef+0x53c>)
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7f9 fc0a 	bl	8000240 <strcmp>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d116      	bne.n	8006a60 <filtcoef+0x388>
        copy_reverse(db13, N, lp1);
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a36:	4878      	ldr	r0, [pc, #480]	; (8006c18 <filtcoef+0x540>)
 8006a38:	f7ff fda2 	bl	8006580 <copy_reverse>
        qmf_wrev(db13, N, hp1);
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a40:	4875      	ldr	r0, [pc, #468]	; (8006c18 <filtcoef+0x540>)
 8006a42:	f7ff fdc8 	bl	80065d6 <qmf_wrev>
        copy(db13, N, lp2);
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a4a:	4873      	ldr	r0, [pc, #460]	; (8006c18 <filtcoef+0x540>)
 8006a4c:	f7ff fe1f 	bl	800668e <copy>
        qmf_even(db13, N, hp2);
 8006a50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a54:	4870      	ldr	r0, [pc, #448]	; (8006c18 <filtcoef+0x540>)
 8006a56:	f7ff fddc 	bl	8006612 <qmf_even>

        return N;
 8006a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a5c:	f001 bf54 	b.w	8008908 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"db14")){
 8006a60:	496e      	ldr	r1, [pc, #440]	; (8006c1c <filtcoef+0x544>)
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7f9 fbec 	bl	8000240 <strcmp>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d116      	bne.n	8006a9c <filtcoef+0x3c4>
        copy_reverse(db14, N, lp1);
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a72:	486b      	ldr	r0, [pc, #428]	; (8006c20 <filtcoef+0x548>)
 8006a74:	f7ff fd84 	bl	8006580 <copy_reverse>
        qmf_wrev(db14, N, hp1);
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a7c:	4868      	ldr	r0, [pc, #416]	; (8006c20 <filtcoef+0x548>)
 8006a7e:	f7ff fdaa 	bl	80065d6 <qmf_wrev>
        copy(db14, N, lp2);
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a86:	4866      	ldr	r0, [pc, #408]	; (8006c20 <filtcoef+0x548>)
 8006a88:	f7ff fe01 	bl	800668e <copy>
        qmf_even(db14, N, hp2);
 8006a8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a90:	4863      	ldr	r0, [pc, #396]	; (8006c20 <filtcoef+0x548>)
 8006a92:	f7ff fdbe 	bl	8006612 <qmf_even>

        return N;
 8006a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a98:	f001 bf36 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db15")){
 8006a9c:	4961      	ldr	r1, [pc, #388]	; (8006c24 <filtcoef+0x54c>)
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7f9 fbce 	bl	8000240 <strcmp>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d116      	bne.n	8006ad8 <filtcoef+0x400>
        copy_reverse(db15, N, lp1);
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006aae:	485e      	ldr	r0, [pc, #376]	; (8006c28 <filtcoef+0x550>)
 8006ab0:	f7ff fd66 	bl	8006580 <copy_reverse>
        qmf_wrev(db15, N, hp1);
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ab8:	485b      	ldr	r0, [pc, #364]	; (8006c28 <filtcoef+0x550>)
 8006aba:	f7ff fd8c 	bl	80065d6 <qmf_wrev>
        copy(db15, N, lp2);
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ac2:	4859      	ldr	r0, [pc, #356]	; (8006c28 <filtcoef+0x550>)
 8006ac4:	f7ff fde3 	bl	800668e <copy>
        qmf_even(db15, N, hp2);
 8006ac8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006aca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006acc:	4856      	ldr	r0, [pc, #344]	; (8006c28 <filtcoef+0x550>)
 8006ace:	f7ff fda0 	bl	8006612 <qmf_even>

        return N;
 8006ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ad4:	f001 bf18 	b.w	8008908 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "db16")){
 8006ad8:	4954      	ldr	r1, [pc, #336]	; (8006c2c <filtcoef+0x554>)
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7f9 fbb0 	bl	8000240 <strcmp>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d116      	bne.n	8006b14 <filtcoef+0x43c>
        copy_reverse(db16, N, lp1);
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006aea:	4851      	ldr	r0, [pc, #324]	; (8006c30 <filtcoef+0x558>)
 8006aec:	f7ff fd48 	bl	8006580 <copy_reverse>
        qmf_wrev(db16, N, hp1);
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006af4:	484e      	ldr	r0, [pc, #312]	; (8006c30 <filtcoef+0x558>)
 8006af6:	f7ff fd6e 	bl	80065d6 <qmf_wrev>
        copy(db16, N, lp2);
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006afe:	484c      	ldr	r0, [pc, #304]	; (8006c30 <filtcoef+0x558>)
 8006b00:	f7ff fdc5 	bl	800668e <copy>
        qmf_even(db16, N, hp2);
 8006b04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b08:	4849      	ldr	r0, [pc, #292]	; (8006c30 <filtcoef+0x558>)
 8006b0a:	f7ff fd82 	bl	8006612 <qmf_even>

        return N;
 8006b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b10:	f001 befa 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db17")){
 8006b14:	4947      	ldr	r1, [pc, #284]	; (8006c34 <filtcoef+0x55c>)
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7f9 fb92 	bl	8000240 <strcmp>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d116      	bne.n	8006b50 <filtcoef+0x478>
        copy_reverse(db17, N, lp1);
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b26:	4844      	ldr	r0, [pc, #272]	; (8006c38 <filtcoef+0x560>)
 8006b28:	f7ff fd2a 	bl	8006580 <copy_reverse>
        qmf_wrev(db17, N, hp1);
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b30:	4841      	ldr	r0, [pc, #260]	; (8006c38 <filtcoef+0x560>)
 8006b32:	f7ff fd50 	bl	80065d6 <qmf_wrev>
        copy(db17, N, lp2);
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b3a:	483f      	ldr	r0, [pc, #252]	; (8006c38 <filtcoef+0x560>)
 8006b3c:	f7ff fda7 	bl	800668e <copy>
        qmf_even(db17, N, hp2);
 8006b40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b44:	483c      	ldr	r0, [pc, #240]	; (8006c38 <filtcoef+0x560>)
 8006b46:	f7ff fd64 	bl	8006612 <qmf_even>

        return N;
 8006b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b4c:	f001 bedc 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db18")){
 8006b50:	493a      	ldr	r1, [pc, #232]	; (8006c3c <filtcoef+0x564>)
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7f9 fb74 	bl	8000240 <strcmp>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d116      	bne.n	8006b8c <filtcoef+0x4b4>
        copy_reverse(db18, N, lp1);
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b62:	4837      	ldr	r0, [pc, #220]	; (8006c40 <filtcoef+0x568>)
 8006b64:	f7ff fd0c 	bl	8006580 <copy_reverse>
        qmf_wrev(db18, N, hp1);
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b6c:	4834      	ldr	r0, [pc, #208]	; (8006c40 <filtcoef+0x568>)
 8006b6e:	f7ff fd32 	bl	80065d6 <qmf_wrev>
        copy(db18, N, lp2);
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b76:	4832      	ldr	r0, [pc, #200]	; (8006c40 <filtcoef+0x568>)
 8006b78:	f7ff fd89 	bl	800668e <copy>
        qmf_even(db18, N, hp2);
 8006b7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b80:	482f      	ldr	r0, [pc, #188]	; (8006c40 <filtcoef+0x568>)
 8006b82:	f7ff fd46 	bl	8006612 <qmf_even>

        return N;
 8006b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b88:	f001 bebe 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db19")){
 8006b8c:	492d      	ldr	r1, [pc, #180]	; (8006c44 <filtcoef+0x56c>)
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f7f9 fb56 	bl	8000240 <strcmp>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d116      	bne.n	8006bc8 <filtcoef+0x4f0>
        copy_reverse(db19, N, lp1);
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b9e:	482a      	ldr	r0, [pc, #168]	; (8006c48 <filtcoef+0x570>)
 8006ba0:	f7ff fcee 	bl	8006580 <copy_reverse>
        qmf_wrev(db19, N, hp1);
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ba8:	4827      	ldr	r0, [pc, #156]	; (8006c48 <filtcoef+0x570>)
 8006baa:	f7ff fd14 	bl	80065d6 <qmf_wrev>
        copy(db19, N, lp2);
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bb2:	4825      	ldr	r0, [pc, #148]	; (8006c48 <filtcoef+0x570>)
 8006bb4:	f7ff fd6b 	bl	800668e <copy>
        qmf_even(db19, N, hp2);
 8006bb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bbc:	4822      	ldr	r0, [pc, #136]	; (8006c48 <filtcoef+0x570>)
 8006bbe:	f7ff fd28 	bl	8006612 <qmf_even>

        return N;
 8006bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bc4:	f001 bea0 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db20")){
 8006bc8:	4920      	ldr	r1, [pc, #128]	; (8006c4c <filtcoef+0x574>)
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f7f9 fb38 	bl	8000240 <strcmp>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d13e      	bne.n	8006c54 <filtcoef+0x57c>
        copy_reverse(db20, N, lp1);
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bda:	481d      	ldr	r0, [pc, #116]	; (8006c50 <filtcoef+0x578>)
 8006bdc:	f7ff fcd0 	bl	8006580 <copy_reverse>
        qmf_wrev(db20, N, hp1);
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006be4:	481a      	ldr	r0, [pc, #104]	; (8006c50 <filtcoef+0x578>)
 8006be6:	f7ff fcf6 	bl	80065d6 <qmf_wrev>
        copy(db20, N, lp2);
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bee:	4818      	ldr	r0, [pc, #96]	; (8006c50 <filtcoef+0x578>)
 8006bf0:	f7ff fd4d 	bl	800668e <copy>
        qmf_even(db20, N, hp2);
 8006bf4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bf8:	4815      	ldr	r0, [pc, #84]	; (8006c50 <filtcoef+0x578>)
 8006bfa:	f7ff fd0a 	bl	8006612 <qmf_even>

        return N;
 8006bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c00:	f001 be82 	b.w	8008908 <filtcoef+0x2230>
 8006c04:	0800ebdc 	.word	0x0800ebdc
 8006c08:	0800ff10 	.word	0x0800ff10
 8006c0c:	0800ebe4 	.word	0x0800ebe4
 8006c10:	0800ffc0 	.word	0x0800ffc0
 8006c14:	0800ebec 	.word	0x0800ebec
 8006c18:	08010080 	.word	0x08010080
 8006c1c:	0800ebf4 	.word	0x0800ebf4
 8006c20:	08010150 	.word	0x08010150
 8006c24:	0800ebfc 	.word	0x0800ebfc
 8006c28:	08010230 	.word	0x08010230
 8006c2c:	0800ec04 	.word	0x0800ec04
 8006c30:	08010320 	.word	0x08010320
 8006c34:	0800ec0c 	.word	0x0800ec0c
 8006c38:	08010420 	.word	0x08010420
 8006c3c:	0800ec14 	.word	0x0800ec14
 8006c40:	08010530 	.word	0x08010530
 8006c44:	0800ec1c 	.word	0x0800ec1c
 8006c48:	08010650 	.word	0x08010650
 8006c4c:	0800ec24 	.word	0x0800ec24
 8006c50:	08010780 	.word	0x08010780
    }
    else if (!strcmp(name, "db21")){
 8006c54:	4995      	ldr	r1, [pc, #596]	; (8006eac <filtcoef+0x7d4>)
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f7f9 faf2 	bl	8000240 <strcmp>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d116      	bne.n	8006c90 <filtcoef+0x5b8>
        copy_reverse(db21, N, lp1);
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c66:	4892      	ldr	r0, [pc, #584]	; (8006eb0 <filtcoef+0x7d8>)
 8006c68:	f7ff fc8a 	bl	8006580 <copy_reverse>
        qmf_wrev(db21, N, hp1);
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c70:	488f      	ldr	r0, [pc, #572]	; (8006eb0 <filtcoef+0x7d8>)
 8006c72:	f7ff fcb0 	bl	80065d6 <qmf_wrev>
        copy(db21, N, lp2);
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c7a:	488d      	ldr	r0, [pc, #564]	; (8006eb0 <filtcoef+0x7d8>)
 8006c7c:	f7ff fd07 	bl	800668e <copy>
        qmf_even(db21, N, hp2);
 8006c80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c84:	488a      	ldr	r0, [pc, #552]	; (8006eb0 <filtcoef+0x7d8>)
 8006c86:	f7ff fcc4 	bl	8006612 <qmf_even>

        return N;
 8006c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c8c:	f001 be3c 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db22")){
 8006c90:	4988      	ldr	r1, [pc, #544]	; (8006eb4 <filtcoef+0x7dc>)
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f7f9 fad4 	bl	8000240 <strcmp>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d116      	bne.n	8006ccc <filtcoef+0x5f4>
        copy_reverse(db22, N, lp1);
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ca2:	4885      	ldr	r0, [pc, #532]	; (8006eb8 <filtcoef+0x7e0>)
 8006ca4:	f7ff fc6c 	bl	8006580 <copy_reverse>
        qmf_wrev(db22, N, hp1);
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cac:	4882      	ldr	r0, [pc, #520]	; (8006eb8 <filtcoef+0x7e0>)
 8006cae:	f7ff fc92 	bl	80065d6 <qmf_wrev>
        copy(db22, N, lp2);
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cb6:	4880      	ldr	r0, [pc, #512]	; (8006eb8 <filtcoef+0x7e0>)
 8006cb8:	f7ff fce9 	bl	800668e <copy>
        qmf_even(db22, N, hp2);
 8006cbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006cbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cc0:	487d      	ldr	r0, [pc, #500]	; (8006eb8 <filtcoef+0x7e0>)
 8006cc2:	f7ff fca6 	bl	8006612 <qmf_even>

        return N;
 8006cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cc8:	f001 be1e 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db23")){
 8006ccc:	497b      	ldr	r1, [pc, #492]	; (8006ebc <filtcoef+0x7e4>)
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7f9 fab6 	bl	8000240 <strcmp>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d116      	bne.n	8006d08 <filtcoef+0x630>
        copy_reverse(db23, N, lp1);
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cde:	4878      	ldr	r0, [pc, #480]	; (8006ec0 <filtcoef+0x7e8>)
 8006ce0:	f7ff fc4e 	bl	8006580 <copy_reverse>
        qmf_wrev(db23, N, hp1);
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ce8:	4875      	ldr	r0, [pc, #468]	; (8006ec0 <filtcoef+0x7e8>)
 8006cea:	f7ff fc74 	bl	80065d6 <qmf_wrev>
        copy(db23, N, lp2);
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cf2:	4873      	ldr	r0, [pc, #460]	; (8006ec0 <filtcoef+0x7e8>)
 8006cf4:	f7ff fccb 	bl	800668e <copy>
        qmf_even(db23, N, hp2);
 8006cf8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006cfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cfc:	4870      	ldr	r0, [pc, #448]	; (8006ec0 <filtcoef+0x7e8>)
 8006cfe:	f7ff fc88 	bl	8006612 <qmf_even>

        return N;
 8006d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d04:	f001 be00 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db24")){
 8006d08:	496e      	ldr	r1, [pc, #440]	; (8006ec4 <filtcoef+0x7ec>)
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7f9 fa98 	bl	8000240 <strcmp>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d116      	bne.n	8006d44 <filtcoef+0x66c>
        copy_reverse(db24, N, lp1);
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d1a:	486b      	ldr	r0, [pc, #428]	; (8006ec8 <filtcoef+0x7f0>)
 8006d1c:	f7ff fc30 	bl	8006580 <copy_reverse>
        qmf_wrev(db24, N, hp1);
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d24:	4868      	ldr	r0, [pc, #416]	; (8006ec8 <filtcoef+0x7f0>)
 8006d26:	f7ff fc56 	bl	80065d6 <qmf_wrev>
        copy(db24, N, lp2);
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d2e:	4866      	ldr	r0, [pc, #408]	; (8006ec8 <filtcoef+0x7f0>)
 8006d30:	f7ff fcad 	bl	800668e <copy>
        qmf_even(db24, N, hp2);
 8006d34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d38:	4863      	ldr	r0, [pc, #396]	; (8006ec8 <filtcoef+0x7f0>)
 8006d3a:	f7ff fc6a 	bl	8006612 <qmf_even>

        return N;
 8006d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d40:	f001 bde2 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db25")){
 8006d44:	4961      	ldr	r1, [pc, #388]	; (8006ecc <filtcoef+0x7f4>)
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f7f9 fa7a 	bl	8000240 <strcmp>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d116      	bne.n	8006d80 <filtcoef+0x6a8>
        copy_reverse(db25, N, lp1);
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d56:	485e      	ldr	r0, [pc, #376]	; (8006ed0 <filtcoef+0x7f8>)
 8006d58:	f7ff fc12 	bl	8006580 <copy_reverse>
        qmf_wrev(db25, N, hp1);
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d60:	485b      	ldr	r0, [pc, #364]	; (8006ed0 <filtcoef+0x7f8>)
 8006d62:	f7ff fc38 	bl	80065d6 <qmf_wrev>
        copy(db25, N, lp2);
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d6a:	4859      	ldr	r0, [pc, #356]	; (8006ed0 <filtcoef+0x7f8>)
 8006d6c:	f7ff fc8f 	bl	800668e <copy>
        qmf_even(db25, N, hp2);
 8006d70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d74:	4856      	ldr	r0, [pc, #344]	; (8006ed0 <filtcoef+0x7f8>)
 8006d76:	f7ff fc4c 	bl	8006612 <qmf_even>

        return N;
 8006d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d7c:	f001 bdc4 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db26")){
 8006d80:	4954      	ldr	r1, [pc, #336]	; (8006ed4 <filtcoef+0x7fc>)
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7f9 fa5c 	bl	8000240 <strcmp>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d116      	bne.n	8006dbc <filtcoef+0x6e4>
        copy_reverse(db26, N, lp1);
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d92:	4851      	ldr	r0, [pc, #324]	; (8006ed8 <filtcoef+0x800>)
 8006d94:	f7ff fbf4 	bl	8006580 <copy_reverse>
        qmf_wrev(db26, N, hp1);
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d9c:	484e      	ldr	r0, [pc, #312]	; (8006ed8 <filtcoef+0x800>)
 8006d9e:	f7ff fc1a 	bl	80065d6 <qmf_wrev>
        copy(db26, N, lp2);
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006da6:	484c      	ldr	r0, [pc, #304]	; (8006ed8 <filtcoef+0x800>)
 8006da8:	f7ff fc71 	bl	800668e <copy>
        qmf_even(db26, N, hp2);
 8006dac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006db0:	4849      	ldr	r0, [pc, #292]	; (8006ed8 <filtcoef+0x800>)
 8006db2:	f7ff fc2e 	bl	8006612 <qmf_even>
        return N;
 8006db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006db8:	f001 bda6 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db27")){
 8006dbc:	4947      	ldr	r1, [pc, #284]	; (8006edc <filtcoef+0x804>)
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f7f9 fa3e 	bl	8000240 <strcmp>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d116      	bne.n	8006df8 <filtcoef+0x720>
        copy_reverse(db27, N, lp1);
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dce:	4844      	ldr	r0, [pc, #272]	; (8006ee0 <filtcoef+0x808>)
 8006dd0:	f7ff fbd6 	bl	8006580 <copy_reverse>
        qmf_wrev(db27, N, hp1);
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dd8:	4841      	ldr	r0, [pc, #260]	; (8006ee0 <filtcoef+0x808>)
 8006dda:	f7ff fbfc 	bl	80065d6 <qmf_wrev>
        copy(db27, N, lp2);
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006de2:	483f      	ldr	r0, [pc, #252]	; (8006ee0 <filtcoef+0x808>)
 8006de4:	f7ff fc53 	bl	800668e <copy>
        qmf_even(db27, N, hp2);
 8006de8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dec:	483c      	ldr	r0, [pc, #240]	; (8006ee0 <filtcoef+0x808>)
 8006dee:	f7ff fc10 	bl	8006612 <qmf_even>

        return N;
 8006df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006df4:	f001 bd88 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db28")){
 8006df8:	493a      	ldr	r1, [pc, #232]	; (8006ee4 <filtcoef+0x80c>)
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7f9 fa20 	bl	8000240 <strcmp>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d116      	bne.n	8006e34 <filtcoef+0x75c>
        copy_reverse(db28, N, lp1);
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e0a:	4837      	ldr	r0, [pc, #220]	; (8006ee8 <filtcoef+0x810>)
 8006e0c:	f7ff fbb8 	bl	8006580 <copy_reverse>
        qmf_wrev(db28, N, hp1);
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e14:	4834      	ldr	r0, [pc, #208]	; (8006ee8 <filtcoef+0x810>)
 8006e16:	f7ff fbde 	bl	80065d6 <qmf_wrev>
        copy(db28, N, lp2);
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e1e:	4832      	ldr	r0, [pc, #200]	; (8006ee8 <filtcoef+0x810>)
 8006e20:	f7ff fc35 	bl	800668e <copy>
        qmf_even(db28, N, hp2);
 8006e24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e28:	482f      	ldr	r0, [pc, #188]	; (8006ee8 <filtcoef+0x810>)
 8006e2a:	f7ff fbf2 	bl	8006612 <qmf_even>

        return N;
 8006e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e30:	f001 bd6a 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db29")){
 8006e34:	492d      	ldr	r1, [pc, #180]	; (8006eec <filtcoef+0x814>)
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7f9 fa02 	bl	8000240 <strcmp>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d116      	bne.n	8006e70 <filtcoef+0x798>
        copy_reverse(db29, N, lp1);
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e46:	482a      	ldr	r0, [pc, #168]	; (8006ef0 <filtcoef+0x818>)
 8006e48:	f7ff fb9a 	bl	8006580 <copy_reverse>
        qmf_wrev(db29, N, hp1);
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e50:	4827      	ldr	r0, [pc, #156]	; (8006ef0 <filtcoef+0x818>)
 8006e52:	f7ff fbc0 	bl	80065d6 <qmf_wrev>
        copy(db29, N, lp2);
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e5a:	4825      	ldr	r0, [pc, #148]	; (8006ef0 <filtcoef+0x818>)
 8006e5c:	f7ff fc17 	bl	800668e <copy>
        qmf_even(db29, N, hp2);
 8006e60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e64:	4822      	ldr	r0, [pc, #136]	; (8006ef0 <filtcoef+0x818>)
 8006e66:	f7ff fbd4 	bl	8006612 <qmf_even>

        return N;
 8006e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e6c:	f001 bd4c 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db30")){
 8006e70:	4920      	ldr	r1, [pc, #128]	; (8006ef4 <filtcoef+0x81c>)
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f7f9 f9e4 	bl	8000240 <strcmp>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d13e      	bne.n	8006efc <filtcoef+0x824>
        copy_reverse(db30, N, lp1);
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e82:	481d      	ldr	r0, [pc, #116]	; (8006ef8 <filtcoef+0x820>)
 8006e84:	f7ff fb7c 	bl	8006580 <copy_reverse>
        qmf_wrev(db30, N, hp1);
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e8c:	481a      	ldr	r0, [pc, #104]	; (8006ef8 <filtcoef+0x820>)
 8006e8e:	f7ff fba2 	bl	80065d6 <qmf_wrev>
        copy(db30, N, lp2);
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e96:	4818      	ldr	r0, [pc, #96]	; (8006ef8 <filtcoef+0x820>)
 8006e98:	f7ff fbf9 	bl	800668e <copy>
        qmf_even(db30, N, hp2);
 8006e9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ea0:	4815      	ldr	r0, [pc, #84]	; (8006ef8 <filtcoef+0x820>)
 8006ea2:	f7ff fbb6 	bl	8006612 <qmf_even>

        return N;
 8006ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ea8:	f001 bd2e 	b.w	8008908 <filtcoef+0x2230>
 8006eac:	0800ec2c 	.word	0x0800ec2c
 8006eb0:	080108c0 	.word	0x080108c0
 8006eb4:	0800ec34 	.word	0x0800ec34
 8006eb8:	08010a10 	.word	0x08010a10
 8006ebc:	0800ec3c 	.word	0x0800ec3c
 8006ec0:	08010b70 	.word	0x08010b70
 8006ec4:	0800ec44 	.word	0x0800ec44
 8006ec8:	08010ce0 	.word	0x08010ce0
 8006ecc:	0800ec4c 	.word	0x0800ec4c
 8006ed0:	08010e60 	.word	0x08010e60
 8006ed4:	0800ec54 	.word	0x0800ec54
 8006ed8:	08010ff0 	.word	0x08010ff0
 8006edc:	0800ec5c 	.word	0x0800ec5c
 8006ee0:	08011190 	.word	0x08011190
 8006ee4:	0800ec64 	.word	0x0800ec64
 8006ee8:	08011340 	.word	0x08011340
 8006eec:	0800ec6c 	.word	0x0800ec6c
 8006ef0:	08011500 	.word	0x08011500
 8006ef4:	0800ec74 	.word	0x0800ec74
 8006ef8:	080116d0 	.word	0x080116d0
    }
    else if (!strcmp(name, "db31")){
 8006efc:	4997      	ldr	r1, [pc, #604]	; (800715c <filtcoef+0xa84>)
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f7f9 f99e 	bl	8000240 <strcmp>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d116      	bne.n	8006f38 <filtcoef+0x860>
        copy_reverse(db31, N, lp1);
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f0e:	4894      	ldr	r0, [pc, #592]	; (8007160 <filtcoef+0xa88>)
 8006f10:	f7ff fb36 	bl	8006580 <copy_reverse>
        qmf_wrev(db31, N, hp1);
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f18:	4891      	ldr	r0, [pc, #580]	; (8007160 <filtcoef+0xa88>)
 8006f1a:	f7ff fb5c 	bl	80065d6 <qmf_wrev>
        copy(db31, N, lp2);
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f22:	488f      	ldr	r0, [pc, #572]	; (8007160 <filtcoef+0xa88>)
 8006f24:	f7ff fbb3 	bl	800668e <copy>
        qmf_even(db31, N, hp2);
 8006f28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f2c:	488c      	ldr	r0, [pc, #560]	; (8007160 <filtcoef+0xa88>)
 8006f2e:	f7ff fb70 	bl	8006612 <qmf_even>

        return N;
 8006f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f34:	f001 bce8 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db32")){
 8006f38:	498a      	ldr	r1, [pc, #552]	; (8007164 <filtcoef+0xa8c>)
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f7f9 f980 	bl	8000240 <strcmp>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d116      	bne.n	8006f74 <filtcoef+0x89c>
        copy_reverse(db32, N, lp1);
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f4a:	4887      	ldr	r0, [pc, #540]	; (8007168 <filtcoef+0xa90>)
 8006f4c:	f7ff fb18 	bl	8006580 <copy_reverse>
        qmf_wrev(db32, N, hp1);
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f54:	4884      	ldr	r0, [pc, #528]	; (8007168 <filtcoef+0xa90>)
 8006f56:	f7ff fb3e 	bl	80065d6 <qmf_wrev>
        copy(db32, N, lp2);
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f5e:	4882      	ldr	r0, [pc, #520]	; (8007168 <filtcoef+0xa90>)
 8006f60:	f7ff fb95 	bl	800668e <copy>
        qmf_even(db32, N, hp2);
 8006f64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f68:	487f      	ldr	r0, [pc, #508]	; (8007168 <filtcoef+0xa90>)
 8006f6a:	f7ff fb52 	bl	8006612 <qmf_even>

        return N;
 8006f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f70:	f001 bcca 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db33")){
 8006f74:	497d      	ldr	r1, [pc, #500]	; (800716c <filtcoef+0xa94>)
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f7f9 f962 	bl	8000240 <strcmp>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d116      	bne.n	8006fb0 <filtcoef+0x8d8>
        copy_reverse(db33, N, lp1);
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f86:	487a      	ldr	r0, [pc, #488]	; (8007170 <filtcoef+0xa98>)
 8006f88:	f7ff fafa 	bl	8006580 <copy_reverse>
        qmf_wrev(db33, N, hp1);
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f90:	4877      	ldr	r0, [pc, #476]	; (8007170 <filtcoef+0xa98>)
 8006f92:	f7ff fb20 	bl	80065d6 <qmf_wrev>
        copy(db33, N, lp2);
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f9a:	4875      	ldr	r0, [pc, #468]	; (8007170 <filtcoef+0xa98>)
 8006f9c:	f7ff fb77 	bl	800668e <copy>
        qmf_even(db33, N, hp2);
 8006fa0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fa2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fa4:	4872      	ldr	r0, [pc, #456]	; (8007170 <filtcoef+0xa98>)
 8006fa6:	f7ff fb34 	bl	8006612 <qmf_even>

        return N;
 8006faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fac:	f001 bcac 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db34")){
 8006fb0:	4970      	ldr	r1, [pc, #448]	; (8007174 <filtcoef+0xa9c>)
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7f9 f944 	bl	8000240 <strcmp>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d116      	bne.n	8006fec <filtcoef+0x914>
        copy_reverse(db34, N, lp1);
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fc2:	486d      	ldr	r0, [pc, #436]	; (8007178 <filtcoef+0xaa0>)
 8006fc4:	f7ff fadc 	bl	8006580 <copy_reverse>
        qmf_wrev(db34, N, hp1);
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fcc:	486a      	ldr	r0, [pc, #424]	; (8007178 <filtcoef+0xaa0>)
 8006fce:	f7ff fb02 	bl	80065d6 <qmf_wrev>
        copy(db34, N, lp2);
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fd6:	4868      	ldr	r0, [pc, #416]	; (8007178 <filtcoef+0xaa0>)
 8006fd8:	f7ff fb59 	bl	800668e <copy>
        qmf_even(db34, N, hp2);
 8006fdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fe0:	4865      	ldr	r0, [pc, #404]	; (8007178 <filtcoef+0xaa0>)
 8006fe2:	f7ff fb16 	bl	8006612 <qmf_even>

        return N;
 8006fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fe8:	f001 bc8e 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db35")){
 8006fec:	4963      	ldr	r1, [pc, #396]	; (800717c <filtcoef+0xaa4>)
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f7f9 f926 	bl	8000240 <strcmp>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d116      	bne.n	8007028 <filtcoef+0x950>
        copy_reverse(db35, N, lp1);
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ffe:	4860      	ldr	r0, [pc, #384]	; (8007180 <filtcoef+0xaa8>)
 8007000:	f7ff fabe 	bl	8006580 <copy_reverse>
        qmf_wrev(db35, N, hp1);
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007008:	485d      	ldr	r0, [pc, #372]	; (8007180 <filtcoef+0xaa8>)
 800700a:	f7ff fae4 	bl	80065d6 <qmf_wrev>
        copy(db35, N, lp2);
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007012:	485b      	ldr	r0, [pc, #364]	; (8007180 <filtcoef+0xaa8>)
 8007014:	f7ff fb3b 	bl	800668e <copy>
        qmf_even(db35, N, hp2);
 8007018:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800701a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800701c:	4858      	ldr	r0, [pc, #352]	; (8007180 <filtcoef+0xaa8>)
 800701e:	f7ff faf8 	bl	8006612 <qmf_even>

        return N;
 8007022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007024:	f001 bc70 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db36")){
 8007028:	4956      	ldr	r1, [pc, #344]	; (8007184 <filtcoef+0xaac>)
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f7f9 f908 	bl	8000240 <strcmp>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d116      	bne.n	8007064 <filtcoef+0x98c>
        copy_reverse(db36, N, lp1);
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800703a:	4853      	ldr	r0, [pc, #332]	; (8007188 <filtcoef+0xab0>)
 800703c:	f7ff faa0 	bl	8006580 <copy_reverse>
        qmf_wrev(db36, N, hp1);
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007044:	4850      	ldr	r0, [pc, #320]	; (8007188 <filtcoef+0xab0>)
 8007046:	f7ff fac6 	bl	80065d6 <qmf_wrev>
        copy(db36, N, lp2);
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800704e:	484e      	ldr	r0, [pc, #312]	; (8007188 <filtcoef+0xab0>)
 8007050:	f7ff fb1d 	bl	800668e <copy>
        qmf_even(db36, N, hp2);
 8007054:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007056:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007058:	484b      	ldr	r0, [pc, #300]	; (8007188 <filtcoef+0xab0>)
 800705a:	f7ff fada 	bl	8006612 <qmf_even>

        return N;
 800705e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007060:	f001 bc52 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db37")){
 8007064:	4949      	ldr	r1, [pc, #292]	; (800718c <filtcoef+0xab4>)
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f7f9 f8ea 	bl	8000240 <strcmp>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d116      	bne.n	80070a0 <filtcoef+0x9c8>
        copy_reverse(db37, N, lp1);
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007076:	4846      	ldr	r0, [pc, #280]	; (8007190 <filtcoef+0xab8>)
 8007078:	f7ff fa82 	bl	8006580 <copy_reverse>
        qmf_wrev(db37, N, hp1);
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007080:	4843      	ldr	r0, [pc, #268]	; (8007190 <filtcoef+0xab8>)
 8007082:	f7ff faa8 	bl	80065d6 <qmf_wrev>
        copy(db37, N, lp2);
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800708a:	4841      	ldr	r0, [pc, #260]	; (8007190 <filtcoef+0xab8>)
 800708c:	f7ff faff 	bl	800668e <copy>
        qmf_even(db37, N, hp2);
 8007090:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007092:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007094:	483e      	ldr	r0, [pc, #248]	; (8007190 <filtcoef+0xab8>)
 8007096:	f7ff fabc 	bl	8006612 <qmf_even>

        return N;
 800709a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800709c:	f001 bc34 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db38")){
 80070a0:	493c      	ldr	r1, [pc, #240]	; (8007194 <filtcoef+0xabc>)
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f7f9 f8cc 	bl	8000240 <strcmp>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d116      	bne.n	80070dc <filtcoef+0xa04>
        copy_reverse(db38, N, lp1);
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070b2:	4839      	ldr	r0, [pc, #228]	; (8007198 <filtcoef+0xac0>)
 80070b4:	f7ff fa64 	bl	8006580 <copy_reverse>
        qmf_wrev(db38, N, hp1);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070bc:	4836      	ldr	r0, [pc, #216]	; (8007198 <filtcoef+0xac0>)
 80070be:	f7ff fa8a 	bl	80065d6 <qmf_wrev>
        copy(db38, N, lp2);
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070c6:	4834      	ldr	r0, [pc, #208]	; (8007198 <filtcoef+0xac0>)
 80070c8:	f7ff fae1 	bl	800668e <copy>
        qmf_even(db38, N, hp2);
 80070cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070d0:	4831      	ldr	r0, [pc, #196]	; (8007198 <filtcoef+0xac0>)
 80070d2:	f7ff fa9e 	bl	8006612 <qmf_even>

        return N;
 80070d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070d8:	f001 bc16 	b.w	8008908 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior1.1")){
 80070dc:	492f      	ldr	r1, [pc, #188]	; (800719c <filtcoef+0xac4>)
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f7f9 f8ae 	bl	8000240 <strcmp>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d118      	bne.n	800711c <filtcoef+0xa44>
        copy_reverse(hm1_11, N, lp1);
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070ee:	482c      	ldr	r0, [pc, #176]	; (80071a0 <filtcoef+0xac8>)
 80070f0:	f7ff fa46 	bl	8006580 <copy_reverse>
        qmf_wrev(h1 + 4, N, hp1);
 80070f4:	4b2b      	ldr	r3, [pc, #172]	; (80071a4 <filtcoef+0xacc>)
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff fa6b 	bl	80065d6 <qmf_wrev>
        copy(h1 + 4, N, lp2);
 8007100:	4b28      	ldr	r3, [pc, #160]	; (80071a4 <filtcoef+0xacc>)
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff fac1 	bl	800668e <copy>
        qmf_even(hm1_11, N, hp2);
 800710c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800710e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007110:	4823      	ldr	r0, [pc, #140]	; (80071a0 <filtcoef+0xac8>)
 8007112:	f7ff fa7e 	bl	8006612 <qmf_even>
        return N;
 8007116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007118:	f001 bbf6 	b.w	8008908 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"bior1.3")){
 800711c:	4922      	ldr	r1, [pc, #136]	; (80071a8 <filtcoef+0xad0>)
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f7f9 f88e 	bl	8000240 <strcmp>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d144      	bne.n	80071b4 <filtcoef+0xadc>
        copy_reverse(hm1_13, N, lp1);
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800712e:	481f      	ldr	r0, [pc, #124]	; (80071ac <filtcoef+0xad4>)
 8007130:	f7ff fa26 	bl	8006580 <copy_reverse>
        qmf_wrev(h1 + 2, N, hp1);
 8007134:	4b1e      	ldr	r3, [pc, #120]	; (80071b0 <filtcoef+0xad8>)
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff fa4b 	bl	80065d6 <qmf_wrev>
        copy(h1 + 2, N, lp2);
 8007140:	4b1b      	ldr	r3, [pc, #108]	; (80071b0 <filtcoef+0xad8>)
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007146:	4618      	mov	r0, r3
 8007148:	f7ff faa1 	bl	800668e <copy>
        qmf_even(hm1_13, N, hp2);
 800714c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800714e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007150:	4816      	ldr	r0, [pc, #88]	; (80071ac <filtcoef+0xad4>)
 8007152:	f7ff fa5e 	bl	8006612 <qmf_even>
        return N;
 8007156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007158:	f001 bbd6 	b.w	8008908 <filtcoef+0x2230>
 800715c:	0800ec7c 	.word	0x0800ec7c
 8007160:	080118b0 	.word	0x080118b0
 8007164:	0800ec84 	.word	0x0800ec84
 8007168:	08011aa0 	.word	0x08011aa0
 800716c:	0800ec8c 	.word	0x0800ec8c
 8007170:	08011ca0 	.word	0x08011ca0
 8007174:	0800ec94 	.word	0x0800ec94
 8007178:	08011eb0 	.word	0x08011eb0
 800717c:	0800ec9c 	.word	0x0800ec9c
 8007180:	080120d0 	.word	0x080120d0
 8007184:	0800eca4 	.word	0x0800eca4
 8007188:	08012300 	.word	0x08012300
 800718c:	0800ecac 	.word	0x0800ecac
 8007190:	08012540 	.word	0x08012540
 8007194:	0800ecb4 	.word	0x0800ecb4
 8007198:	08012790 	.word	0x08012790
 800719c:	0800ea74 	.word	0x0800ea74
 80071a0:	08015400 	.word	0x08015400
 80071a4:	080153d0 	.word	0x080153d0
 80071a8:	0800ea7c 	.word	0x0800ea7c
 80071ac:	08015410 	.word	0x08015410
 80071b0:	080153c0 	.word	0x080153c0
	}

	else if (!strcmp(name,"bior1.5")){
 80071b4:	499c      	ldr	r1, [pc, #624]	; (8007428 <filtcoef+0xd50>)
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7f9 f842 	bl	8000240 <strcmp>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d116      	bne.n	80071f0 <filtcoef+0xb18>
        copy_reverse(hm1_15, N, lp1);
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071c6:	4899      	ldr	r0, [pc, #612]	; (800742c <filtcoef+0xd54>)
 80071c8:	f7ff f9da 	bl	8006580 <copy_reverse>
        qmf_wrev(h1, N, hp1);
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071d0:	4897      	ldr	r0, [pc, #604]	; (8007430 <filtcoef+0xd58>)
 80071d2:	f7ff fa00 	bl	80065d6 <qmf_wrev>
        copy(h1, N, lp2);
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071da:	4895      	ldr	r0, [pc, #596]	; (8007430 <filtcoef+0xd58>)
 80071dc:	f7ff fa57 	bl	800668e <copy>
        qmf_even(hm1_15, N, hp2);
 80071e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071e4:	4891      	ldr	r0, [pc, #580]	; (800742c <filtcoef+0xd54>)
 80071e6:	f7ff fa14 	bl	8006612 <qmf_even>
        return N;
 80071ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071ec:	f001 bb8c 	b.w	8008908 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"bior2.2")){
 80071f0:	4990      	ldr	r1, [pc, #576]	; (8007434 <filtcoef+0xd5c>)
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f7f9 f824 	bl	8000240 <strcmp>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d118      	bne.n	8007230 <filtcoef+0xb58>
        copy_reverse(hm2_22, N, lp1);
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007202:	488d      	ldr	r0, [pc, #564]	; (8007438 <filtcoef+0xd60>)
 8007204:	f7ff f9bc 	bl	8006580 <copy_reverse>
        qmf_wrev(h2 + 6, N, hp1);
 8007208:	4b8c      	ldr	r3, [pc, #560]	; (800743c <filtcoef+0xd64>)
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff f9e1 	bl	80065d6 <qmf_wrev>
        copy(h2 + 6, N, lp2);
 8007214:	4b89      	ldr	r3, [pc, #548]	; (800743c <filtcoef+0xd64>)
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fa37 	bl	800668e <copy>
        qmf_even(hm2_22, N, hp2);
 8007220:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007222:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007224:	4884      	ldr	r0, [pc, #528]	; (8007438 <filtcoef+0xd60>)
 8007226:	f7ff f9f4 	bl	8006612 <qmf_even>
        return N;
 800722a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800722c:	f001 bb6c 	b.w	8008908 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "bior2.4")){
 8007230:	4983      	ldr	r1, [pc, #524]	; (8007440 <filtcoef+0xd68>)
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f7f9 f804 	bl	8000240 <strcmp>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d118      	bne.n	8007270 <filtcoef+0xb98>
        copy_reverse(hm2_24, N, lp1);
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007242:	4880      	ldr	r0, [pc, #512]	; (8007444 <filtcoef+0xd6c>)
 8007244:	f7ff f99c 	bl	8006580 <copy_reverse>
        qmf_wrev(h2 + 4, N, hp1);
 8007248:	4b7f      	ldr	r3, [pc, #508]	; (8007448 <filtcoef+0xd70>)
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800724e:	4618      	mov	r0, r3
 8007250:	f7ff f9c1 	bl	80065d6 <qmf_wrev>
        copy(h2 + 4, N, lp2);
 8007254:	4b7c      	ldr	r3, [pc, #496]	; (8007448 <filtcoef+0xd70>)
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff fa17 	bl	800668e <copy>
        qmf_even(hm2_24, N, hp2);
 8007260:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007262:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007264:	4877      	ldr	r0, [pc, #476]	; (8007444 <filtcoef+0xd6c>)
 8007266:	f7ff f9d4 	bl	8006612 <qmf_even>
        return N;
 800726a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800726c:	f001 bb4c 	b.w	8008908 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior2.6")){
 8007270:	4976      	ldr	r1, [pc, #472]	; (800744c <filtcoef+0xd74>)
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7f8 ffe4 	bl	8000240 <strcmp>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d118      	bne.n	80072b0 <filtcoef+0xbd8>
        copy_reverse(hm2_26, N, lp1);
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007282:	4873      	ldr	r0, [pc, #460]	; (8007450 <filtcoef+0xd78>)
 8007284:	f7ff f97c 	bl	8006580 <copy_reverse>
        qmf_wrev(h2 + 2, N, hp1);
 8007288:	4b72      	ldr	r3, [pc, #456]	; (8007454 <filtcoef+0xd7c>)
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff f9a1 	bl	80065d6 <qmf_wrev>
        copy(h2 + 2, N, lp2);
 8007294:	4b6f      	ldr	r3, [pc, #444]	; (8007454 <filtcoef+0xd7c>)
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff f9f7 	bl	800668e <copy>
        qmf_even(hm2_26, N, hp2);
 80072a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072a4:	486a      	ldr	r0, [pc, #424]	; (8007450 <filtcoef+0xd78>)
 80072a6:	f7ff f9b4 	bl	8006612 <qmf_even>
        return N;
 80072aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072ac:	f001 bb2c 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"bior2.8")){
 80072b0:	4969      	ldr	r1, [pc, #420]	; (8007458 <filtcoef+0xd80>)
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f7f8 ffc4 	bl	8000240 <strcmp>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d116      	bne.n	80072ec <filtcoef+0xc14>
        copy_reverse(hm2_28, N, lp1);
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072c2:	4866      	ldr	r0, [pc, #408]	; (800745c <filtcoef+0xd84>)
 80072c4:	f7ff f95c 	bl	8006580 <copy_reverse>
        qmf_wrev(h2, N, hp1);
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072cc:	4864      	ldr	r0, [pc, #400]	; (8007460 <filtcoef+0xd88>)
 80072ce:	f7ff f982 	bl	80065d6 <qmf_wrev>
        copy(h2, N, lp2);
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072d6:	4862      	ldr	r0, [pc, #392]	; (8007460 <filtcoef+0xd88>)
 80072d8:	f7ff f9d9 	bl	800668e <copy>
        qmf_even(hm2_28, N, hp2);
 80072dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072e0:	485e      	ldr	r0, [pc, #376]	; (800745c <filtcoef+0xd84>)
 80072e2:	f7ff f996 	bl	8006612 <qmf_even>
        return N;
 80072e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072e8:	f001 bb0e 	b.w	8008908 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"bior3.1")){
 80072ec:	495d      	ldr	r1, [pc, #372]	; (8007464 <filtcoef+0xd8c>)
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7f8 ffa6 	bl	8000240 <strcmp>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d118      	bne.n	800732c <filtcoef+0xc54>
        copy_reverse(hm3_31, N, lp1);
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072fe:	485a      	ldr	r0, [pc, #360]	; (8007468 <filtcoef+0xd90>)
 8007300:	f7ff f93e 	bl	8006580 <copy_reverse>
        qmf_wrev(h3 + 8, N, hp1);
 8007304:	4b59      	ldr	r3, [pc, #356]	; (800746c <filtcoef+0xd94>)
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800730a:	4618      	mov	r0, r3
 800730c:	f7ff f963 	bl	80065d6 <qmf_wrev>
        copy(h3 + 8, N, lp2);
 8007310:	4b56      	ldr	r3, [pc, #344]	; (800746c <filtcoef+0xd94>)
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff f9b9 	bl	800668e <copy>
        qmf_even(hm3_31, N, hp2);
 800731c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800731e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007320:	4851      	ldr	r0, [pc, #324]	; (8007468 <filtcoef+0xd90>)
 8007322:	f7ff f976 	bl	8006612 <qmf_even>
        return N;
 8007326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007328:	f001 baee 	b.w	8008908 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "bior3.3")){
 800732c:	4950      	ldr	r1, [pc, #320]	; (8007470 <filtcoef+0xd98>)
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f7f8 ff86 	bl	8000240 <strcmp>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d118      	bne.n	800736c <filtcoef+0xc94>
        copy_reverse(hm3_33, N, lp1);
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800733e:	484d      	ldr	r0, [pc, #308]	; (8007474 <filtcoef+0xd9c>)
 8007340:	f7ff f91e 	bl	8006580 <copy_reverse>
        qmf_wrev(h3 + 6, N, hp1);
 8007344:	4b4c      	ldr	r3, [pc, #304]	; (8007478 <filtcoef+0xda0>)
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff f943 	bl	80065d6 <qmf_wrev>
        copy(h3 + 6, N, lp2);
 8007350:	4b49      	ldr	r3, [pc, #292]	; (8007478 <filtcoef+0xda0>)
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff f999 	bl	800668e <copy>
        qmf_even(hm3_33, N, hp2);
 800735c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800735e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007360:	4844      	ldr	r0, [pc, #272]	; (8007474 <filtcoef+0xd9c>)
 8007362:	f7ff f956 	bl	8006612 <qmf_even>
        return N;
 8007366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007368:	f001 bace 	b.w	8008908 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior3.5")){
 800736c:	4943      	ldr	r1, [pc, #268]	; (800747c <filtcoef+0xda4>)
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7f8 ff66 	bl	8000240 <strcmp>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d118      	bne.n	80073ac <filtcoef+0xcd4>
        copy_reverse(hm3_35, N, lp1);
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800737e:	4840      	ldr	r0, [pc, #256]	; (8007480 <filtcoef+0xda8>)
 8007380:	f7ff f8fe 	bl	8006580 <copy_reverse>
        qmf_wrev(h3 + 4, N, hp1);
 8007384:	4b3f      	ldr	r3, [pc, #252]	; (8007484 <filtcoef+0xdac>)
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff f923 	bl	80065d6 <qmf_wrev>
        copy(h3 + 4, N, lp2);
 8007390:	4b3c      	ldr	r3, [pc, #240]	; (8007484 <filtcoef+0xdac>)
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff f979 	bl	800668e <copy>
        qmf_even(hm3_35, N, hp2);
 800739c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800739e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073a0:	4837      	ldr	r0, [pc, #220]	; (8007480 <filtcoef+0xda8>)
 80073a2:	f7ff f936 	bl	8006612 <qmf_even>
        return N;
 80073a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073a8:	f001 baae 	b.w	8008908 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "bior3.7")){
 80073ac:	4936      	ldr	r1, [pc, #216]	; (8007488 <filtcoef+0xdb0>)
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7f8 ff46 	bl	8000240 <strcmp>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d118      	bne.n	80073ec <filtcoef+0xd14>
        copy_reverse(hm3_37, N, lp1);
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073be:	4833      	ldr	r0, [pc, #204]	; (800748c <filtcoef+0xdb4>)
 80073c0:	f7ff f8de 	bl	8006580 <copy_reverse>
        qmf_wrev(h3 + 2, N, hp1);
 80073c4:	4b32      	ldr	r3, [pc, #200]	; (8007490 <filtcoef+0xdb8>)
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff f903 	bl	80065d6 <qmf_wrev>
        copy(h3 +2, N, lp2);
 80073d0:	4b2f      	ldr	r3, [pc, #188]	; (8007490 <filtcoef+0xdb8>)
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff f959 	bl	800668e <copy>
        qmf_even(hm3_37, N, hp2);
 80073dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073e0:	482a      	ldr	r0, [pc, #168]	; (800748c <filtcoef+0xdb4>)
 80073e2:	f7ff f916 	bl	8006612 <qmf_even>
        return N;
 80073e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073e8:	f001 ba8e 	b.w	8008908 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior3.9")){
 80073ec:	4929      	ldr	r1, [pc, #164]	; (8007494 <filtcoef+0xdbc>)
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7f8 ff26 	bl	8000240 <strcmp>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d152      	bne.n	80074a0 <filtcoef+0xdc8>
        copy_reverse(hm3_39, N, lp1);
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073fe:	4826      	ldr	r0, [pc, #152]	; (8007498 <filtcoef+0xdc0>)
 8007400:	f7ff f8be 	bl	8006580 <copy_reverse>
        qmf_wrev(h3, N, hp1);
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007408:	4824      	ldr	r0, [pc, #144]	; (800749c <filtcoef+0xdc4>)
 800740a:	f7ff f8e4 	bl	80065d6 <qmf_wrev>
        copy(h3, N, lp2);
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007412:	4822      	ldr	r0, [pc, #136]	; (800749c <filtcoef+0xdc4>)
 8007414:	f7ff f93b 	bl	800668e <copy>
        qmf_even(hm3_39, N, hp2);
 8007418:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800741a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800741c:	481e      	ldr	r0, [pc, #120]	; (8007498 <filtcoef+0xdc0>)
 800741e:	f7ff f8f8 	bl	8006612 <qmf_even>
        return N;
 8007422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007424:	f001 ba70 	b.w	8008908 <filtcoef+0x2230>
 8007428:	0800ea84 	.word	0x0800ea84
 800742c:	08015440 	.word	0x08015440
 8007430:	080153b0 	.word	0x080153b0
 8007434:	0800ea8c 	.word	0x0800ea8c
 8007438:	08015520 	.word	0x08015520
 800743c:	080154c0 	.word	0x080154c0
 8007440:	0800ea94 	.word	0x0800ea94
 8007444:	08015550 	.word	0x08015550
 8007448:	080154b0 	.word	0x080154b0
 800744c:	0800ea9c 	.word	0x0800ea9c
 8007450:	080155a0 	.word	0x080155a0
 8007454:	080154a0 	.word	0x080154a0
 8007458:	0800eaa4 	.word	0x0800eaa4
 800745c:	08015610 	.word	0x08015610
 8007460:	08015490 	.word	0x08015490
 8007464:	0800eaac 	.word	0x0800eaac
 8007468:	08015740 	.word	0x08015740
 800746c:	080156e0 	.word	0x080156e0
 8007470:	0800eab4 	.word	0x0800eab4
 8007474:	08015760 	.word	0x08015760
 8007478:	080156d0 	.word	0x080156d0
 800747c:	0800eabc 	.word	0x0800eabc
 8007480:	080157a0 	.word	0x080157a0
 8007484:	080156c0 	.word	0x080156c0
 8007488:	0800eac4 	.word	0x0800eac4
 800748c:	08015800 	.word	0x08015800
 8007490:	080156b0 	.word	0x080156b0
 8007494:	0800eacc 	.word	0x0800eacc
 8007498:	08015880 	.word	0x08015880
 800749c:	080156a0 	.word	0x080156a0
	}
	else if (!strcmp(name,"bior4.4")){
 80074a0:	499a      	ldr	r1, [pc, #616]	; (800770c <filtcoef+0x1034>)
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7f8 fecc 	bl	8000240 <strcmp>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d116      	bne.n	80074dc <filtcoef+0xe04>
        copy_reverse(hm4_44, N, lp1);
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074b2:	4897      	ldr	r0, [pc, #604]	; (8007710 <filtcoef+0x1038>)
 80074b4:	f7ff f864 	bl	8006580 <copy_reverse>
        qmf_wrev(h4, N, hp1);
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074bc:	4895      	ldr	r0, [pc, #596]	; (8007714 <filtcoef+0x103c>)
 80074be:	f7ff f88a 	bl	80065d6 <qmf_wrev>
        copy(h4, N, lp2);
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074c6:	4893      	ldr	r0, [pc, #588]	; (8007714 <filtcoef+0x103c>)
 80074c8:	f7ff f8e1 	bl	800668e <copy>
        qmf_even(hm4_44, N, hp2);
 80074cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074d0:	488f      	ldr	r0, [pc, #572]	; (8007710 <filtcoef+0x1038>)
 80074d2:	f7ff f89e 	bl	8006612 <qmf_even>
        return N;
 80074d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074d8:	f001 ba16 	b.w	8008908 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "bior5.5")){
 80074dc:	498e      	ldr	r1, [pc, #568]	; (8007718 <filtcoef+0x1040>)
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7f8 feae 	bl	8000240 <strcmp>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d116      	bne.n	8007518 <filtcoef+0xe40>
        copy_reverse(hm5_55, N, lp1);
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074ee:	488b      	ldr	r0, [pc, #556]	; (800771c <filtcoef+0x1044>)
 80074f0:	f7ff f846 	bl	8006580 <copy_reverse>
        qmf_wrev(h5, N, hp1);
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074f8:	4889      	ldr	r0, [pc, #548]	; (8007720 <filtcoef+0x1048>)
 80074fa:	f7ff f86c 	bl	80065d6 <qmf_wrev>
        copy(h5, N, lp2);
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007502:	4887      	ldr	r0, [pc, #540]	; (8007720 <filtcoef+0x1048>)
 8007504:	f7ff f8c3 	bl	800668e <copy>
        qmf_even(hm5_55, N, hp2);
 8007508:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800750a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800750c:	4883      	ldr	r0, [pc, #524]	; (800771c <filtcoef+0x1044>)
 800750e:	f7ff f880 	bl	8006612 <qmf_even>
        return N;
 8007512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007514:	f001 b9f8 	b.w	8008908 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior6.8")){
 8007518:	4982      	ldr	r1, [pc, #520]	; (8007724 <filtcoef+0x104c>)
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7f8 fe90 	bl	8000240 <strcmp>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d116      	bne.n	8007554 <filtcoef+0xe7c>
        copy_reverse(hm6_68, N, lp1);
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800752a:	487f      	ldr	r0, [pc, #508]	; (8007728 <filtcoef+0x1050>)
 800752c:	f7ff f828 	bl	8006580 <copy_reverse>
        qmf_wrev(h6, N, hp1);
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007534:	487d      	ldr	r0, [pc, #500]	; (800772c <filtcoef+0x1054>)
 8007536:	f7ff f84e 	bl	80065d6 <qmf_wrev>
        copy(h6, N, lp2);
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800753e:	487b      	ldr	r0, [pc, #492]	; (800772c <filtcoef+0x1054>)
 8007540:	f7ff f8a5 	bl	800668e <copy>
        qmf_even(hm6_68, N, hp2);
 8007544:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007546:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007548:	4877      	ldr	r0, [pc, #476]	; (8007728 <filtcoef+0x1050>)
 800754a:	f7ff f862 	bl	8006612 <qmf_even>
        return N;
 800754e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007550:	f001 b9da 	b.w	8008908 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "rbior1.1")){
 8007554:	4976      	ldr	r1, [pc, #472]	; (8007730 <filtcoef+0x1058>)
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7f8 fe72 	bl	8000240 <strcmp>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d118      	bne.n	8007594 <filtcoef+0xebc>
        copy_reverse(h1 + 4, N, lp1);
 8007562:	4b74      	ldr	r3, [pc, #464]	; (8007734 <filtcoef+0x105c>)
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff f809 	bl	8006580 <copy_reverse>
        qmf_wrev(hm1_11, N, hp1);
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007572:	4871      	ldr	r0, [pc, #452]	; (8007738 <filtcoef+0x1060>)
 8007574:	f7ff f82f 	bl	80065d6 <qmf_wrev>
        copy(hm1_11, N, lp2);
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800757c:	486e      	ldr	r0, [pc, #440]	; (8007738 <filtcoef+0x1060>)
 800757e:	f7ff f886 	bl	800668e <copy>
        qmf_even(h1 + 4, N, hp2);
 8007582:	4b6c      	ldr	r3, [pc, #432]	; (8007734 <filtcoef+0x105c>)
 8007584:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007586:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff f842 	bl	8006612 <qmf_even>
        return N;
 800758e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007590:	f001 b9ba 	b.w	8008908 <filtcoef+0x2230>
    }

    else if (!strcmp(name, "rbior1.3")){
 8007594:	4969      	ldr	r1, [pc, #420]	; (800773c <filtcoef+0x1064>)
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7f8 fe52 	bl	8000240 <strcmp>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d118      	bne.n	80075d4 <filtcoef+0xefc>
        copy_reverse(h1 + 2, N, lp1);
 80075a2:	4b67      	ldr	r3, [pc, #412]	; (8007740 <filtcoef+0x1068>)
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe ffe9 	bl	8006580 <copy_reverse>
        qmf_wrev(hm1_13, N, hp1);
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075b2:	4864      	ldr	r0, [pc, #400]	; (8007744 <filtcoef+0x106c>)
 80075b4:	f7ff f80f 	bl	80065d6 <qmf_wrev>
        copy(hm1_13, N, lp2);
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075bc:	4861      	ldr	r0, [pc, #388]	; (8007744 <filtcoef+0x106c>)
 80075be:	f7ff f866 	bl	800668e <copy>
        qmf_even(h1 + 2, N, hp2);
 80075c2:	4b5f      	ldr	r3, [pc, #380]	; (8007740 <filtcoef+0x1068>)
 80075c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff f822 	bl	8006612 <qmf_even>
        return N;
 80075ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075d0:	f001 b99a 	b.w	8008908 <filtcoef+0x2230>
    }

    else if (!strcmp(name, "rbior1.5")){
 80075d4:	495c      	ldr	r1, [pc, #368]	; (8007748 <filtcoef+0x1070>)
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f7f8 fe32 	bl	8000240 <strcmp>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d116      	bne.n	8007610 <filtcoef+0xf38>
        copy_reverse(h1, N, lp1);
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075e6:	4859      	ldr	r0, [pc, #356]	; (800774c <filtcoef+0x1074>)
 80075e8:	f7fe ffca 	bl	8006580 <copy_reverse>
        qmf_wrev(hm1_15, N, hp1);
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075f0:	4857      	ldr	r0, [pc, #348]	; (8007750 <filtcoef+0x1078>)
 80075f2:	f7fe fff0 	bl	80065d6 <qmf_wrev>
        copy(hm1_15, N, lp2);
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075fa:	4855      	ldr	r0, [pc, #340]	; (8007750 <filtcoef+0x1078>)
 80075fc:	f7ff f847 	bl	800668e <copy>
        qmf_even(h1, N, hp2);
 8007600:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007604:	4851      	ldr	r0, [pc, #324]	; (800774c <filtcoef+0x1074>)
 8007606:	f7ff f804 	bl	8006612 <qmf_even>
        return N;
 800760a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800760c:	f001 b97c 	b.w	8008908 <filtcoef+0x2230>
    }

    else if (!strcmp(name, "rbior2.2")){
 8007610:	4950      	ldr	r1, [pc, #320]	; (8007754 <filtcoef+0x107c>)
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f7f8 fe14 	bl	8000240 <strcmp>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d118      	bne.n	8007650 <filtcoef+0xf78>
        copy_reverse(h2 + 6, N, lp1);
 800761e:	4b4e      	ldr	r3, [pc, #312]	; (8007758 <filtcoef+0x1080>)
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007624:	4618      	mov	r0, r3
 8007626:	f7fe ffab 	bl	8006580 <copy_reverse>
        qmf_wrev(hm2_22, N, hp1);
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800762e:	484b      	ldr	r0, [pc, #300]	; (800775c <filtcoef+0x1084>)
 8007630:	f7fe ffd1 	bl	80065d6 <qmf_wrev>
        copy(hm2_22, N, lp2);
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007638:	4848      	ldr	r0, [pc, #288]	; (800775c <filtcoef+0x1084>)
 800763a:	f7ff f828 	bl	800668e <copy>
        qmf_even(h2 + 6, N, hp2);
 800763e:	4b46      	ldr	r3, [pc, #280]	; (8007758 <filtcoef+0x1080>)
 8007640:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007642:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe ffe4 	bl	8006612 <qmf_even>
        return N;
 800764a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800764c:	f001 b95c 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior2.4")){
 8007650:	4943      	ldr	r1, [pc, #268]	; (8007760 <filtcoef+0x1088>)
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f7f8 fdf4 	bl	8000240 <strcmp>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d118      	bne.n	8007690 <filtcoef+0xfb8>
        copy_reverse(h2 + 4, N, lp1);
 800765e:	4b41      	ldr	r3, [pc, #260]	; (8007764 <filtcoef+0x108c>)
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007664:	4618      	mov	r0, r3
 8007666:	f7fe ff8b 	bl	8006580 <copy_reverse>
        qmf_wrev(hm2_24, N, hp1);
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800766e:	483e      	ldr	r0, [pc, #248]	; (8007768 <filtcoef+0x1090>)
 8007670:	f7fe ffb1 	bl	80065d6 <qmf_wrev>
        copy(hm2_24, N, lp2);
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007678:	483b      	ldr	r0, [pc, #236]	; (8007768 <filtcoef+0x1090>)
 800767a:	f7ff f808 	bl	800668e <copy>
        qmf_even(h2 + 4, N, hp2);
 800767e:	4b39      	ldr	r3, [pc, #228]	; (8007764 <filtcoef+0x108c>)
 8007680:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007682:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe ffc4 	bl	8006612 <qmf_even>
        return N;
 800768a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800768c:	f001 b93c 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior2.6")){
 8007690:	4936      	ldr	r1, [pc, #216]	; (800776c <filtcoef+0x1094>)
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f7f8 fdd4 	bl	8000240 <strcmp>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d118      	bne.n	80076d0 <filtcoef+0xff8>
        copy_reverse(h2 + 2, N, lp1);
 800769e:	4b34      	ldr	r3, [pc, #208]	; (8007770 <filtcoef+0x1098>)
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe ff6b 	bl	8006580 <copy_reverse>
        qmf_wrev(hm2_26, N, hp1);
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076ae:	4831      	ldr	r0, [pc, #196]	; (8007774 <filtcoef+0x109c>)
 80076b0:	f7fe ff91 	bl	80065d6 <qmf_wrev>
        copy(hm2_26, N, lp2);
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076b8:	482e      	ldr	r0, [pc, #184]	; (8007774 <filtcoef+0x109c>)
 80076ba:	f7fe ffe8 	bl	800668e <copy>
        qmf_even(h2 + 2, N, hp2);
 80076be:	4b2c      	ldr	r3, [pc, #176]	; (8007770 <filtcoef+0x1098>)
 80076c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fe ffa4 	bl	8006612 <qmf_even>
        return N;
 80076ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076cc:	f001 b91c 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior2.8")){
 80076d0:	4929      	ldr	r1, [pc, #164]	; (8007778 <filtcoef+0x10a0>)
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7f8 fdb4 	bl	8000240 <strcmp>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d152      	bne.n	8007784 <filtcoef+0x10ac>
        copy_reverse(h2, N, lp1);
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076e2:	4826      	ldr	r0, [pc, #152]	; (800777c <filtcoef+0x10a4>)
 80076e4:	f7fe ff4c 	bl	8006580 <copy_reverse>
        qmf_wrev(hm2_28, N, hp1);
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076ec:	4824      	ldr	r0, [pc, #144]	; (8007780 <filtcoef+0x10a8>)
 80076ee:	f7fe ff72 	bl	80065d6 <qmf_wrev>
        copy(hm2_28, N, lp2);
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076f6:	4822      	ldr	r0, [pc, #136]	; (8007780 <filtcoef+0x10a8>)
 80076f8:	f7fe ffc9 	bl	800668e <copy>
        qmf_even(h2, N, hp2);
 80076fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007700:	481e      	ldr	r0, [pc, #120]	; (800777c <filtcoef+0x10a4>)
 8007702:	f7fe ff86 	bl	8006612 <qmf_even>
        return N;
 8007706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007708:	f001 b8fe 	b.w	8008908 <filtcoef+0x2230>
 800770c:	0800ead4 	.word	0x0800ead4
 8007710:	08015970 	.word	0x08015970
 8007714:	08015920 	.word	0x08015920
 8007718:	0800eadc 	.word	0x0800eadc
 800771c:	08015a20 	.word	0x08015a20
 8007720:	080159c0 	.word	0x080159c0
 8007724:	0800eae4 	.word	0x0800eae4
 8007728:	08015b10 	.word	0x08015b10
 800772c:	08015a80 	.word	0x08015a80
 8007730:	0800eaec 	.word	0x0800eaec
 8007734:	080153d0 	.word	0x080153d0
 8007738:	08015400 	.word	0x08015400
 800773c:	0800eaf8 	.word	0x0800eaf8
 8007740:	080153c0 	.word	0x080153c0
 8007744:	08015410 	.word	0x08015410
 8007748:	0800eb04 	.word	0x0800eb04
 800774c:	080153b0 	.word	0x080153b0
 8007750:	08015440 	.word	0x08015440
 8007754:	0800eb10 	.word	0x0800eb10
 8007758:	080154c0 	.word	0x080154c0
 800775c:	08015520 	.word	0x08015520
 8007760:	0800eb1c 	.word	0x0800eb1c
 8007764:	080154b0 	.word	0x080154b0
 8007768:	08015550 	.word	0x08015550
 800776c:	0800eb28 	.word	0x0800eb28
 8007770:	080154a0 	.word	0x080154a0
 8007774:	080155a0 	.word	0x080155a0
 8007778:	0800eb34 	.word	0x0800eb34
 800777c:	08015490 	.word	0x08015490
 8007780:	08015610 	.word	0x08015610
    }

    else if (!strcmp(name, "rbior3.1")){
 8007784:	49a2      	ldr	r1, [pc, #648]	; (8007a10 <filtcoef+0x1338>)
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f7f8 fd5a 	bl	8000240 <strcmp>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d118      	bne.n	80077c4 <filtcoef+0x10ec>
        copy_reverse(h3 + 8, N, lp1);
 8007792:	4ba0      	ldr	r3, [pc, #640]	; (8007a14 <filtcoef+0x133c>)
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007798:	4618      	mov	r0, r3
 800779a:	f7fe fef1 	bl	8006580 <copy_reverse>
        qmf_wrev(hm3_31, N, hp1);
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077a2:	489d      	ldr	r0, [pc, #628]	; (8007a18 <filtcoef+0x1340>)
 80077a4:	f7fe ff17 	bl	80065d6 <qmf_wrev>
        copy(hm3_31, N, lp2);
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077ac:	489a      	ldr	r0, [pc, #616]	; (8007a18 <filtcoef+0x1340>)
 80077ae:	f7fe ff6e 	bl	800668e <copy>
        qmf_even(h3 + 8, N, hp2);
 80077b2:	4b98      	ldr	r3, [pc, #608]	; (8007a14 <filtcoef+0x133c>)
 80077b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fe ff2a 	bl	8006612 <qmf_even>
        return N;
 80077be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077c0:	f001 b8a2 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior3.3")){
 80077c4:	4995      	ldr	r1, [pc, #596]	; (8007a1c <filtcoef+0x1344>)
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f7f8 fd3a 	bl	8000240 <strcmp>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d118      	bne.n	8007804 <filtcoef+0x112c>
        copy_reverse(h3 + 6, N, lp1);
 80077d2:	4b93      	ldr	r3, [pc, #588]	; (8007a20 <filtcoef+0x1348>)
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fe fed1 	bl	8006580 <copy_reverse>
        qmf_wrev(hm3_33, N, hp1);
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077e2:	4890      	ldr	r0, [pc, #576]	; (8007a24 <filtcoef+0x134c>)
 80077e4:	f7fe fef7 	bl	80065d6 <qmf_wrev>
        copy(hm3_33, N, lp2);
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077ec:	488d      	ldr	r0, [pc, #564]	; (8007a24 <filtcoef+0x134c>)
 80077ee:	f7fe ff4e 	bl	800668e <copy>
        qmf_even(h3 + 6, N, hp2);
 80077f2:	4b8b      	ldr	r3, [pc, #556]	; (8007a20 <filtcoef+0x1348>)
 80077f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fe ff0a 	bl	8006612 <qmf_even>
        return N;
 80077fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007800:	f001 b882 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior3.5")){
 8007804:	4988      	ldr	r1, [pc, #544]	; (8007a28 <filtcoef+0x1350>)
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f7f8 fd1a 	bl	8000240 <strcmp>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d118      	bne.n	8007844 <filtcoef+0x116c>
        copy_reverse(h3 + 4, N, lp1);
 8007812:	4b86      	ldr	r3, [pc, #536]	; (8007a2c <filtcoef+0x1354>)
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe feb1 	bl	8006580 <copy_reverse>
        qmf_wrev(hm3_35, N, hp1);
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007822:	4883      	ldr	r0, [pc, #524]	; (8007a30 <filtcoef+0x1358>)
 8007824:	f7fe fed7 	bl	80065d6 <qmf_wrev>
        copy(hm3_35, N, lp2);
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800782c:	4880      	ldr	r0, [pc, #512]	; (8007a30 <filtcoef+0x1358>)
 800782e:	f7fe ff2e 	bl	800668e <copy>
        qmf_even(h3 + 4, N, hp2);
 8007832:	4b7e      	ldr	r3, [pc, #504]	; (8007a2c <filtcoef+0x1354>)
 8007834:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007838:	4618      	mov	r0, r3
 800783a:	f7fe feea 	bl	8006612 <qmf_even>
        return N;
 800783e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007840:	f001 b862 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior3.7")){
 8007844:	497b      	ldr	r1, [pc, #492]	; (8007a34 <filtcoef+0x135c>)
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f7f8 fcfa 	bl	8000240 <strcmp>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d118      	bne.n	8007884 <filtcoef+0x11ac>
        copy_reverse(h3 + 2, N, lp1);
 8007852:	4b79      	ldr	r3, [pc, #484]	; (8007a38 <filtcoef+0x1360>)
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007858:	4618      	mov	r0, r3
 800785a:	f7fe fe91 	bl	8006580 <copy_reverse>
        qmf_wrev(hm3_37, N, hp1);
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007862:	4876      	ldr	r0, [pc, #472]	; (8007a3c <filtcoef+0x1364>)
 8007864:	f7fe feb7 	bl	80065d6 <qmf_wrev>
        copy(hm3_37, N, lp2);
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800786c:	4873      	ldr	r0, [pc, #460]	; (8007a3c <filtcoef+0x1364>)
 800786e:	f7fe ff0e 	bl	800668e <copy>
        qmf_even(h3 + 2, N, hp2);
 8007872:	4b71      	ldr	r3, [pc, #452]	; (8007a38 <filtcoef+0x1360>)
 8007874:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007876:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe feca 	bl	8006612 <qmf_even>
        return N;
 800787e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007880:	f001 b842 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior3.9")){
 8007884:	496e      	ldr	r1, [pc, #440]	; (8007a40 <filtcoef+0x1368>)
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7f8 fcda 	bl	8000240 <strcmp>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d116      	bne.n	80078c0 <filtcoef+0x11e8>
        copy_reverse(h3, N, lp1);
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007896:	486b      	ldr	r0, [pc, #428]	; (8007a44 <filtcoef+0x136c>)
 8007898:	f7fe fe72 	bl	8006580 <copy_reverse>
        qmf_wrev(hm3_39, N, hp1);
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078a0:	4869      	ldr	r0, [pc, #420]	; (8007a48 <filtcoef+0x1370>)
 80078a2:	f7fe fe98 	bl	80065d6 <qmf_wrev>
        copy(hm3_39, N, lp2);
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078aa:	4867      	ldr	r0, [pc, #412]	; (8007a48 <filtcoef+0x1370>)
 80078ac:	f7fe feef 	bl	800668e <copy>
        qmf_even(h3, N, hp2);
 80078b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078b4:	4863      	ldr	r0, [pc, #396]	; (8007a44 <filtcoef+0x136c>)
 80078b6:	f7fe feac 	bl	8006612 <qmf_even>
        return N;
 80078ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078bc:	f001 b824 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior4.4")){
 80078c0:	4962      	ldr	r1, [pc, #392]	; (8007a4c <filtcoef+0x1374>)
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f7f8 fcbc 	bl	8000240 <strcmp>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d116      	bne.n	80078fc <filtcoef+0x1224>
        copy_reverse(h4, N, lp1);
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078d2:	485f      	ldr	r0, [pc, #380]	; (8007a50 <filtcoef+0x1378>)
 80078d4:	f7fe fe54 	bl	8006580 <copy_reverse>
        qmf_wrev(hm4_44, N, hp1);
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078dc:	485d      	ldr	r0, [pc, #372]	; (8007a54 <filtcoef+0x137c>)
 80078de:	f7fe fe7a 	bl	80065d6 <qmf_wrev>
        copy(hm4_44, N, lp2);
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078e6:	485b      	ldr	r0, [pc, #364]	; (8007a54 <filtcoef+0x137c>)
 80078e8:	f7fe fed1 	bl	800668e <copy>
        qmf_even(h4, N, hp2);
 80078ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078f0:	4857      	ldr	r0, [pc, #348]	; (8007a50 <filtcoef+0x1378>)
 80078f2:	f7fe fe8e 	bl	8006612 <qmf_even>
        return N;
 80078f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078f8:	f001 b806 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior5.5")){
 80078fc:	4956      	ldr	r1, [pc, #344]	; (8007a58 <filtcoef+0x1380>)
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f7f8 fc9e 	bl	8000240 <strcmp>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d116      	bne.n	8007938 <filtcoef+0x1260>
        copy_reverse(h5, N, lp1);
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800790e:	4853      	ldr	r0, [pc, #332]	; (8007a5c <filtcoef+0x1384>)
 8007910:	f7fe fe36 	bl	8006580 <copy_reverse>
        qmf_wrev(hm5_55, N, hp1);
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007918:	4851      	ldr	r0, [pc, #324]	; (8007a60 <filtcoef+0x1388>)
 800791a:	f7fe fe5c 	bl	80065d6 <qmf_wrev>
        copy(hm5_55, N, lp2);
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007922:	484f      	ldr	r0, [pc, #316]	; (8007a60 <filtcoef+0x1388>)
 8007924:	f7fe feb3 	bl	800668e <copy>
        qmf_even(h5, N, hp2);
 8007928:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800792a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800792c:	484b      	ldr	r0, [pc, #300]	; (8007a5c <filtcoef+0x1384>)
 800792e:	f7fe fe70 	bl	8006612 <qmf_even>
        return N;
 8007932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007934:	f000 bfe8 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior6.8")){
 8007938:	494a      	ldr	r1, [pc, #296]	; (8007a64 <filtcoef+0x138c>)
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f7f8 fc80 	bl	8000240 <strcmp>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d116      	bne.n	8007974 <filtcoef+0x129c>
        copy_reverse(h6, N, lp1);
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800794a:	4847      	ldr	r0, [pc, #284]	; (8007a68 <filtcoef+0x1390>)
 800794c:	f7fe fe18 	bl	8006580 <copy_reverse>
        qmf_wrev(hm6_68, N, hp1);
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007954:	4845      	ldr	r0, [pc, #276]	; (8007a6c <filtcoef+0x1394>)
 8007956:	f7fe fe3e 	bl	80065d6 <qmf_wrev>
        copy(hm6_68, N, lp2);
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800795e:	4843      	ldr	r0, [pc, #268]	; (8007a6c <filtcoef+0x1394>)
 8007960:	f7fe fe95 	bl	800668e <copy>
        qmf_even(h6, N, hp2);
 8007964:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007966:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007968:	483f      	ldr	r0, [pc, #252]	; (8007a68 <filtcoef+0x1390>)
 800796a:	f7fe fe52 	bl	8006612 <qmf_even>
        return N;
 800796e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007970:	f000 bfca 	b.w	8008908 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"coif1")){
 8007974:	493e      	ldr	r1, [pc, #248]	; (8007a70 <filtcoef+0x1398>)
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7f8 fc62 	bl	8000240 <strcmp>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d17a      	bne.n	8007a78 <filtcoef+0x13a0>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8007982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	4618      	mov	r0, r3
 8007988:	f002 fa2e 	bl	8009de8 <malloc>
 800798c:	4603      	mov	r3, r0
 800798e:	617b      	str	r3, [r7, #20]

        copy(coif1, N, coeffTemp);
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007994:	4837      	ldr	r0, [pc, #220]	; (8007a74 <filtcoef+0x139c>)
 8007996:	f7fe fe7a 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 800799a:	2300      	movs	r3, #0
 800799c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800799e:	e012      	b.n	80079c6 <filtcoef+0x12ee>
            coeffTemp[i] *= M_SQRT2;
 80079a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	4413      	add	r3, r2
 80079a8:	ed93 7b00 	vldr	d7, [r3]
 80079ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	4413      	add	r3, r2
 80079b4:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8007a08 <filtcoef+0x1330>
 80079b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80079bc:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80079c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079c2:	3301      	adds	r3, #1
 80079c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079ca:	429a      	cmp	r2, r3
 80079cc:	dbe8      	blt.n	80079a0 <filtcoef+0x12c8>
        }

        copy_reverse(coeffTemp, N, lp1);
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079d2:	6978      	ldr	r0, [r7, #20]
 80079d4:	f7fe fdd4 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079dc:	6978      	ldr	r0, [r7, #20]
 80079de:	f7fe fdfa 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079e6:	6978      	ldr	r0, [r7, #20]
 80079e8:	f7fe fe51 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 80079ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079f0:	6978      	ldr	r0, [r7, #20]
 80079f2:	f7fe fe0e 	bl	8006612 <qmf_even>
        free(coeffTemp);
 80079f6:	6978      	ldr	r0, [r7, #20]
 80079f8:	f002 f9fe 	bl	8009df8 <free>

        return N;
 80079fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079fe:	f000 bf83 	b.w	8008908 <filtcoef+0x2230>
 8007a02:	bf00      	nop
 8007a04:	f3af 8000 	nop.w
 8007a08:	667f3bcd 	.word	0x667f3bcd
 8007a0c:	3ff6a09e 	.word	0x3ff6a09e
 8007a10:	0800eb40 	.word	0x0800eb40
 8007a14:	080156e0 	.word	0x080156e0
 8007a18:	08015740 	.word	0x08015740
 8007a1c:	0800eb4c 	.word	0x0800eb4c
 8007a20:	080156d0 	.word	0x080156d0
 8007a24:	08015760 	.word	0x08015760
 8007a28:	0800eb58 	.word	0x0800eb58
 8007a2c:	080156c0 	.word	0x080156c0
 8007a30:	080157a0 	.word	0x080157a0
 8007a34:	0800eb64 	.word	0x0800eb64
 8007a38:	080156b0 	.word	0x080156b0
 8007a3c:	08015800 	.word	0x08015800
 8007a40:	0800eb70 	.word	0x0800eb70
 8007a44:	080156a0 	.word	0x080156a0
 8007a48:	08015880 	.word	0x08015880
 8007a4c:	0800eb7c 	.word	0x0800eb7c
 8007a50:	08015920 	.word	0x08015920
 8007a54:	08015970 	.word	0x08015970
 8007a58:	0800eb88 	.word	0x0800eb88
 8007a5c:	080159c0 	.word	0x080159c0
 8007a60:	08015a20 	.word	0x08015a20
 8007a64:	0800eb94 	.word	0x0800eb94
 8007a68:	08015a80 	.word	0x08015a80
 8007a6c:	08015b10 	.word	0x08015b10
 8007a70:	0800ecbc 	.word	0x0800ecbc
 8007a74:	080129f0 	.word	0x080129f0
	}
	else if (!strcmp(name,"coif2")){
 8007a78:	499b      	ldr	r1, [pc, #620]	; (8007ce8 <filtcoef+0x1610>)
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f7f8 fbe0 	bl	8000240 <strcmp>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d13f      	bne.n	8007b06 <filtcoef+0x142e>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8007a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a88:	00db      	lsls	r3, r3, #3
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f002 f9ac 	bl	8009de8 <malloc>
 8007a90:	4603      	mov	r3, r0
 8007a92:	61bb      	str	r3, [r7, #24]

        copy(coif2, N, coeffTemp);
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a98:	4894      	ldr	r0, [pc, #592]	; (8007cec <filtcoef+0x1614>)
 8007a9a:	f7fe fdf8 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aa2:	e012      	b.n	8007aca <filtcoef+0x13f2>
            coeffTemp[i] *= M_SQRT2;
 8007aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aa6:	00db      	lsls	r3, r3, #3
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	4413      	add	r3, r2
 8007aac:	ed93 7b00 	vldr	d7, [r3]
 8007ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8007ce0 <filtcoef+0x1608>
 8007abc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ac0:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8007ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007acc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	dbe8      	blt.n	8007aa4 <filtcoef+0x13cc>
        }

        copy_reverse(coeffTemp, N, lp1);
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ad6:	69b8      	ldr	r0, [r7, #24]
 8007ad8:	f7fe fd52 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ae0:	69b8      	ldr	r0, [r7, #24]
 8007ae2:	f7fe fd78 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007aea:	69b8      	ldr	r0, [r7, #24]
 8007aec:	f7fe fdcf 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 8007af0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007af2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007af4:	69b8      	ldr	r0, [r7, #24]
 8007af6:	f7fe fd8c 	bl	8006612 <qmf_even>
        free(coeffTemp);
 8007afa:	69b8      	ldr	r0, [r7, #24]
 8007afc:	f002 f97c 	bl	8009df8 <free>

        return N;
 8007b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b02:	f000 bf01 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"coif3")){
 8007b06:	497a      	ldr	r1, [pc, #488]	; (8007cf0 <filtcoef+0x1618>)
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f7f8 fb99 	bl	8000240 <strcmp>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d13f      	bne.n	8007b94 <filtcoef+0x14bc>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8007b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f002 f965 	bl	8009de8 <malloc>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	61fb      	str	r3, [r7, #28]

        copy(coif3, N, coeffTemp);
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b26:	4873      	ldr	r0, [pc, #460]	; (8007cf4 <filtcoef+0x161c>)
 8007b28:	f7fe fdb1 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b30:	e012      	b.n	8007b58 <filtcoef+0x1480>
            coeffTemp[i] *= M_SQRT2;
 8007b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	69fa      	ldr	r2, [r7, #28]
 8007b38:	4413      	add	r3, r2
 8007b3a:	ed93 7b00 	vldr	d7, [r3]
 8007b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b40:	00db      	lsls	r3, r3, #3
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	4413      	add	r3, r2
 8007b46:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007ce0 <filtcoef+0x1608>
 8007b4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b4e:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8007b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b54:	3301      	adds	r3, #1
 8007b56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	dbe8      	blt.n	8007b32 <filtcoef+0x145a>
        }

        copy_reverse(coeffTemp, N, lp1);
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b64:	69f8      	ldr	r0, [r7, #28]
 8007b66:	f7fe fd0b 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b6e:	69f8      	ldr	r0, [r7, #28]
 8007b70:	f7fe fd31 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b78:	69f8      	ldr	r0, [r7, #28]
 8007b7a:	f7fe fd88 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 8007b7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b82:	69f8      	ldr	r0, [r7, #28]
 8007b84:	f7fe fd45 	bl	8006612 <qmf_even>
        free(coeffTemp);
 8007b88:	69f8      	ldr	r0, [r7, #28]
 8007b8a:	f002 f935 	bl	8009df8 <free>

        return N;
 8007b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b90:	f000 beba 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"coif4")){
 8007b94:	4958      	ldr	r1, [pc, #352]	; (8007cf8 <filtcoef+0x1620>)
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7f8 fb52 	bl	8000240 <strcmp>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d13f      	bne.n	8007c22 <filtcoef+0x154a>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8007ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ba4:	00db      	lsls	r3, r3, #3
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f002 f91e 	bl	8009de8 <malloc>
 8007bac:	4603      	mov	r3, r0
 8007bae:	623b      	str	r3, [r7, #32]

        copy(coif4, N, coeffTemp);
 8007bb0:	6a3a      	ldr	r2, [r7, #32]
 8007bb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bb4:	4851      	ldr	r0, [pc, #324]	; (8007cfc <filtcoef+0x1624>)
 8007bb6:	f7fe fd6a 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 8007bba:	2300      	movs	r3, #0
 8007bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bbe:	e012      	b.n	8007be6 <filtcoef+0x150e>
            coeffTemp[i] *= M_SQRT2;
 8007bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	6a3a      	ldr	r2, [r7, #32]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	ed93 7b00 	vldr	d7, [r3]
 8007bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	6a3a      	ldr	r2, [r7, #32]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8007ce0 <filtcoef+0x1608>
 8007bd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007bdc:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8007be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007be2:	3301      	adds	r3, #1
 8007be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007be6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bea:	429a      	cmp	r2, r3
 8007bec:	dbe8      	blt.n	8007bc0 <filtcoef+0x14e8>
        }

        copy_reverse(coeffTemp, N, lp1);
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bf2:	6a38      	ldr	r0, [r7, #32]
 8007bf4:	f7fe fcc4 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bfc:	6a38      	ldr	r0, [r7, #32]
 8007bfe:	f7fe fcea 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c06:	6a38      	ldr	r0, [r7, #32]
 8007c08:	f7fe fd41 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 8007c0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c10:	6a38      	ldr	r0, [r7, #32]
 8007c12:	f7fe fcfe 	bl	8006612 <qmf_even>
        free(coeffTemp);
 8007c16:	6a38      	ldr	r0, [r7, #32]
 8007c18:	f002 f8ee 	bl	8009df8 <free>

        return N;
 8007c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c1e:	f000 be73 	b.w	8008908 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"coif5")){
 8007c22:	4937      	ldr	r1, [pc, #220]	; (8007d00 <filtcoef+0x1628>)
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7f8 fb0b 	bl	8000240 <strcmp>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d13f      	bne.n	8007cb0 <filtcoef+0x15d8>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8007c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	4618      	mov	r0, r3
 8007c36:	f002 f8d7 	bl	8009de8 <malloc>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24

        copy(coif5, N, coeffTemp);
 8007c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c42:	4830      	ldr	r0, [pc, #192]	; (8007d04 <filtcoef+0x162c>)
 8007c44:	f7fe fd23 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 8007c48:	2300      	movs	r3, #0
 8007c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c4c:	e012      	b.n	8007c74 <filtcoef+0x159c>
            coeffTemp[i] *= M_SQRT2;
 8007c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c54:	4413      	add	r3, r2
 8007c56:	ed93 7b00 	vldr	d7, [r3]
 8007c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c5c:	00db      	lsls	r3, r3, #3
 8007c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c60:	4413      	add	r3, r2
 8007c62:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8007ce0 <filtcoef+0x1608>
 8007c66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c6a:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8007c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c70:	3301      	adds	r3, #1
 8007c72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	dbe8      	blt.n	8007c4e <filtcoef+0x1576>
        }

        copy_reverse(coeffTemp, N, lp1);
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c82:	f7fe fc7d 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c8c:	f7fe fca3 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c96:	f7fe fcfa 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 8007c9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ca0:	f7fe fcb7 	bl	8006612 <qmf_even>
        free(coeffTemp);
 8007ca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ca6:	f002 f8a7 	bl	8009df8 <free>

        return N;
 8007caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cac:	f000 be2c 	b.w	8008908 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "coif6")){
 8007cb0:	4915      	ldr	r1, [pc, #84]	; (8007d08 <filtcoef+0x1630>)
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f7f8 fac4 	bl	8000240 <strcmp>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d159      	bne.n	8007d72 <filtcoef+0x169a>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8007cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cc0:	00db      	lsls	r3, r3, #3
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f002 f890 	bl	8009de8 <malloc>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	62bb      	str	r3, [r7, #40]	; 0x28

        copy(coif6, N, coeffTemp);
 8007ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cd0:	480e      	ldr	r0, [pc, #56]	; (8007d0c <filtcoef+0x1634>)
 8007cd2:	f7fe fcdc 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cda:	e02c      	b.n	8007d36 <filtcoef+0x165e>
 8007cdc:	f3af 8000 	nop.w
 8007ce0:	667f3bcd 	.word	0x667f3bcd
 8007ce4:	3ff6a09e 	.word	0x3ff6a09e
 8007ce8:	0800ecc4 	.word	0x0800ecc4
 8007cec:	08012a20 	.word	0x08012a20
 8007cf0:	0800eccc 	.word	0x0800eccc
 8007cf4:	08012a80 	.word	0x08012a80
 8007cf8:	0800ecd4 	.word	0x0800ecd4
 8007cfc:	08012b10 	.word	0x08012b10
 8007d00:	0800ecdc 	.word	0x0800ecdc
 8007d04:	08012bd0 	.word	0x08012bd0
 8007d08:	0800ece4 	.word	0x0800ece4
 8007d0c:	08012cc0 	.word	0x08012cc0
            coeffTemp[i] *= M_SQRT2;
 8007d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d16:	4413      	add	r3, r2
 8007d18:	ed93 7b00 	vldr	d7, [r3]
 8007d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d22:	4413      	add	r3, r2
 8007d24:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8007fb0 <filtcoef+0x18d8>
 8007d28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d2c:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8007d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d32:	3301      	adds	r3, #1
 8007d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	dbe8      	blt.n	8007d10 <filtcoef+0x1638>
        }

        copy_reverse(coeffTemp, N, lp1);
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d44:	f7fe fc1c 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d4e:	f7fe fc42 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d58:	f7fe fc99 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 8007d5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d62:	f7fe fc56 	bl	8006612 <qmf_even>
        free(coeffTemp);
 8007d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d68:	f002 f846 	bl	8009df8 <free>

        return N;
 8007d6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d6e:	f000 bdcb 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif7")){
 8007d72:	4991      	ldr	r1, [pc, #580]	; (8007fb8 <filtcoef+0x18e0>)
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f7f8 fa63 	bl	8000240 <strcmp>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d13f      	bne.n	8007e00 <filtcoef+0x1728>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8007d80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	4618      	mov	r0, r3
 8007d86:	f002 f82f 	bl	8009de8 <malloc>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c

        copy(coif7, N, coeffTemp);
 8007d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d92:	488a      	ldr	r0, [pc, #552]	; (8007fbc <filtcoef+0x18e4>)
 8007d94:	f7fe fc7b 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 8007d98:	2300      	movs	r3, #0
 8007d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d9c:	e012      	b.n	8007dc4 <filtcoef+0x16ec>
            coeffTemp[i] *= M_SQRT2;
 8007d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007da4:	4413      	add	r3, r2
 8007da6:	ed93 7b00 	vldr	d7, [r3]
 8007daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007db0:	4413      	add	r3, r2
 8007db2:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8007fb0 <filtcoef+0x18d8>
 8007db6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007dba:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8007dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	dbe8      	blt.n	8007d9e <filtcoef+0x16c6>
        }

        copy_reverse(coeffTemp, N, lp1);
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007dd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dd2:	f7fe fbd5 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ddc:	f7fe fbfb 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007de4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007de6:	f7fe fc52 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 8007dea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007dec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007dee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007df0:	f7fe fc0f 	bl	8006612 <qmf_even>
        free(coeffTemp);
 8007df4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007df6:	f001 ffff 	bl	8009df8 <free>

        return N;
 8007dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dfc:	f000 bd84 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif8")){
 8007e00:	496f      	ldr	r1, [pc, #444]	; (8007fc0 <filtcoef+0x18e8>)
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7f8 fa1c 	bl	8000240 <strcmp>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d13f      	bne.n	8007e8e <filtcoef+0x17b6>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8007e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e10:	00db      	lsls	r3, r3, #3
 8007e12:	4618      	mov	r0, r3
 8007e14:	f001 ffe8 	bl	8009de8 <malloc>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	633b      	str	r3, [r7, #48]	; 0x30

        copy(coif8, N, coeffTemp);
 8007e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e20:	4868      	ldr	r0, [pc, #416]	; (8007fc4 <filtcoef+0x18ec>)
 8007e22:	f7fe fc34 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 8007e26:	2300      	movs	r3, #0
 8007e28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e2a:	e012      	b.n	8007e52 <filtcoef+0x177a>
            coeffTemp[i] *= M_SQRT2;
 8007e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e32:	4413      	add	r3, r2
 8007e34:	ed93 7b00 	vldr	d7, [r3]
 8007e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e3e:	4413      	add	r3, r2
 8007e40:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8007fb0 <filtcoef+0x18d8>
 8007e44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e48:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8007e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e4e:	3301      	adds	r3, #1
 8007e50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e56:	429a      	cmp	r2, r3
 8007e58:	dbe8      	blt.n	8007e2c <filtcoef+0x1754>
        }

        copy_reverse(coeffTemp, N, lp1);
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e60:	f7fe fb8e 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e6a:	f7fe fbb4 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e74:	f7fe fc0b 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 8007e78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e7e:	f7fe fbc8 	bl	8006612 <qmf_even>
        free(coeffTemp);
 8007e82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e84:	f001 ffb8 	bl	8009df8 <free>

        return N;
 8007e88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e8a:	f000 bd3d 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif9")){
 8007e8e:	494e      	ldr	r1, [pc, #312]	; (8007fc8 <filtcoef+0x18f0>)
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f7f8 f9d5 	bl	8000240 <strcmp>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d13f      	bne.n	8007f1c <filtcoef+0x1844>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8007e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f001 ffa1 	bl	8009de8 <malloc>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	637b      	str	r3, [r7, #52]	; 0x34

        copy(coif9, N, coeffTemp);
 8007eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007eae:	4847      	ldr	r0, [pc, #284]	; (8007fcc <filtcoef+0x18f4>)
 8007eb0:	f7fe fbed 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eb8:	e012      	b.n	8007ee0 <filtcoef+0x1808>
            coeffTemp[i] *= M_SQRT2;
 8007eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ebc:	00db      	lsls	r3, r3, #3
 8007ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ec0:	4413      	add	r3, r2
 8007ec2:	ed93 7b00 	vldr	d7, [r3]
 8007ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ecc:	4413      	add	r3, r2
 8007ece:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8007fb0 <filtcoef+0x18d8>
 8007ed2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ed6:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8007eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007edc:	3301      	adds	r3, #1
 8007ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ee0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	dbe8      	blt.n	8007eba <filtcoef+0x17e2>
        }

        copy_reverse(coeffTemp, N, lp1);
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007eec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007eee:	f7fe fb47 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ef6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007ef8:	f7fe fb6d 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007f02:	f7fe fbc4 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 8007f06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007f0c:	f7fe fb81 	bl	8006612 <qmf_even>
        free(coeffTemp);
 8007f10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007f12:	f001 ff71 	bl	8009df8 <free>

        return N;
 8007f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f18:	f000 bcf6 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif10")){
 8007f1c:	492c      	ldr	r1, [pc, #176]	; (8007fd0 <filtcoef+0x18f8>)
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f7f8 f98e 	bl	8000240 <strcmp>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d156      	bne.n	8007fd8 <filtcoef+0x1900>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8007f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f001 ff5a 	bl	8009de8 <malloc>
 8007f34:	4603      	mov	r3, r0
 8007f36:	63bb      	str	r3, [r7, #56]	; 0x38

        copy(coif10, N, coeffTemp);
 8007f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f3c:	4825      	ldr	r0, [pc, #148]	; (8007fd4 <filtcoef+0x18fc>)
 8007f3e:	f7fe fba6 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 8007f42:	2300      	movs	r3, #0
 8007f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f46:	e012      	b.n	8007f6e <filtcoef+0x1896>
            coeffTemp[i] *= M_SQRT2;
 8007f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f4e:	4413      	add	r3, r2
 8007f50:	ed93 7b00 	vldr	d7, [r3]
 8007f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f5a:	4413      	add	r3, r2
 8007f5c:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8007fb0 <filtcoef+0x18d8>
 8007f60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007f64:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8007f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f72:	429a      	cmp	r2, r3
 8007f74:	dbe8      	blt.n	8007f48 <filtcoef+0x1870>
        }

        copy_reverse(coeffTemp, N, lp1);
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f7c:	f7fe fb00 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f86:	f7fe fb26 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f90:	f7fe fb7d 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 8007f94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f9a:	f7fe fb3a 	bl	8006612 <qmf_even>
        free(coeffTemp);
 8007f9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fa0:	f001 ff2a 	bl	8009df8 <free>

        return N;
 8007fa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fa6:	f000 bcaf 	b.w	8008908 <filtcoef+0x2230>
 8007faa:	bf00      	nop
 8007fac:	f3af 8000 	nop.w
 8007fb0:	667f3bcd 	.word	0x667f3bcd
 8007fb4:	3ff6a09e 	.word	0x3ff6a09e
 8007fb8:	0800ecec 	.word	0x0800ecec
 8007fbc:	08012de0 	.word	0x08012de0
 8007fc0:	0800ecf4 	.word	0x0800ecf4
 8007fc4:	08012f30 	.word	0x08012f30
 8007fc8:	0800ecfc 	.word	0x0800ecfc
 8007fcc:	080130b0 	.word	0x080130b0
 8007fd0:	0800ed04 	.word	0x0800ed04
 8007fd4:	08013260 	.word	0x08013260
    }
    else if (!strcmp(name, "coif11")){
 8007fd8:	4999      	ldr	r1, [pc, #612]	; (8008240 <filtcoef+0x1b68>)
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7f8 f930 	bl	8000240 <strcmp>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d13f      	bne.n	8008066 <filtcoef+0x198e>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8007fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	4618      	mov	r0, r3
 8007fec:	f001 fefc 	bl	8009de8 <malloc>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	63fb      	str	r3, [r7, #60]	; 0x3c

        copy(coif11, N, coeffTemp);
 8007ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ff6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ff8:	4892      	ldr	r0, [pc, #584]	; (8008244 <filtcoef+0x1b6c>)
 8007ffa:	f7fe fb48 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 8007ffe:	2300      	movs	r3, #0
 8008000:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008002:	e012      	b.n	800802a <filtcoef+0x1952>
            coeffTemp[i] *= M_SQRT2;
 8008004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800800a:	4413      	add	r3, r2
 800800c:	ed93 7b00 	vldr	d7, [r3]
 8008010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008016:	4413      	add	r3, r2
 8008018:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8008238 <filtcoef+0x1b60>
 800801c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008020:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8008024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008026:	3301      	adds	r3, #1
 8008028:	65fb      	str	r3, [r7, #92]	; 0x5c
 800802a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800802c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800802e:	429a      	cmp	r2, r3
 8008030:	dbe8      	blt.n	8008004 <filtcoef+0x192c>
        }

        copy_reverse(coeffTemp, N, lp1);
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008036:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008038:	f7fe faa2 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008040:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008042:	f7fe fac8 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800804a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800804c:	f7fe fb1f 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 8008050:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008052:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008054:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008056:	f7fe fadc 	bl	8006612 <qmf_even>
        free(coeffTemp);
 800805a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800805c:	f001 fecc 	bl	8009df8 <free>

        return N;
 8008060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008062:	f000 bc51 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif12")){
 8008066:	4978      	ldr	r1, [pc, #480]	; (8008248 <filtcoef+0x1b70>)
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f7f8 f8e9 	bl	8000240 <strcmp>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d13f      	bne.n	80080f4 <filtcoef+0x1a1c>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8008074:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	4618      	mov	r0, r3
 800807a:	f001 feb5 	bl	8009de8 <malloc>
 800807e:	4603      	mov	r3, r0
 8008080:	643b      	str	r3, [r7, #64]	; 0x40

        copy(coif12, N, coeffTemp);
 8008082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008084:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008086:	4871      	ldr	r0, [pc, #452]	; (800824c <filtcoef+0x1b74>)
 8008088:	f7fe fb01 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 800808c:	2300      	movs	r3, #0
 800808e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008090:	e012      	b.n	80080b8 <filtcoef+0x19e0>
            coeffTemp[i] *= M_SQRT2;
 8008092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008098:	4413      	add	r3, r2
 800809a:	ed93 7b00 	vldr	d7, [r3]
 800809e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080a0:	00db      	lsls	r3, r3, #3
 80080a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080a4:	4413      	add	r3, r2
 80080a6:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8008238 <filtcoef+0x1b60>
 80080aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080ae:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80080b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080b4:	3301      	adds	r3, #1
 80080b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080bc:	429a      	cmp	r2, r3
 80080be:	dbe8      	blt.n	8008092 <filtcoef+0x19ba>
        }

        copy_reverse(coeffTemp, N, lp1);
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080c4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80080c6:	f7fe fa5b 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80080d0:	f7fe fa81 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80080da:	f7fe fad8 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 80080de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080e2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80080e4:	f7fe fa95 	bl	8006612 <qmf_even>
        free(coeffTemp);
 80080e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80080ea:	f001 fe85 	bl	8009df8 <free>

        return N;
 80080ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080f0:	f000 bc0a 	b.w	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif13")){
 80080f4:	4956      	ldr	r1, [pc, #344]	; (8008250 <filtcoef+0x1b78>)
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f7f8 f8a2 	bl	8000240 <strcmp>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d13e      	bne.n	8008180 <filtcoef+0x1aa8>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8008102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	4618      	mov	r0, r3
 8008108:	f001 fe6e 	bl	8009de8 <malloc>
 800810c:	4603      	mov	r3, r0
 800810e:	647b      	str	r3, [r7, #68]	; 0x44

        copy(coif13, N, coeffTemp);
 8008110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008112:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008114:	484f      	ldr	r0, [pc, #316]	; (8008254 <filtcoef+0x1b7c>)
 8008116:	f7fe faba 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 800811a:	2300      	movs	r3, #0
 800811c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800811e:	e012      	b.n	8008146 <filtcoef+0x1a6e>
            coeffTemp[i] *= M_SQRT2;
 8008120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008122:	00db      	lsls	r3, r3, #3
 8008124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008126:	4413      	add	r3, r2
 8008128:	ed93 7b00 	vldr	d7, [r3]
 800812c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008132:	4413      	add	r3, r2
 8008134:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8008238 <filtcoef+0x1b60>
 8008138:	ee27 7b06 	vmul.f64	d7, d7, d6
 800813c:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8008140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008142:	3301      	adds	r3, #1
 8008144:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008146:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800814a:	429a      	cmp	r2, r3
 800814c:	dbe8      	blt.n	8008120 <filtcoef+0x1a48>
        }

        copy_reverse(coeffTemp, N, lp1);
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008152:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008154:	f7fe fa14 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800815c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800815e:	f7fe fa3a 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008166:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008168:	f7fe fa91 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 800816c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800816e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008170:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008172:	f7fe fa4e 	bl	8006612 <qmf_even>
        free(coeffTemp);
 8008176:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008178:	f001 fe3e 	bl	8009df8 <free>

        return N;
 800817c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800817e:	e3c3      	b.n	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif14")){
 8008180:	4935      	ldr	r1, [pc, #212]	; (8008258 <filtcoef+0x1b80>)
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7f8 f85c 	bl	8000240 <strcmp>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d13e      	bne.n	800820c <filtcoef+0x1b34>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 800818e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	4618      	mov	r0, r3
 8008194:	f001 fe28 	bl	8009de8 <malloc>
 8008198:	4603      	mov	r3, r0
 800819a:	64bb      	str	r3, [r7, #72]	; 0x48

        copy(coif14, N, coeffTemp);
 800819c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800819e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081a0:	482e      	ldr	r0, [pc, #184]	; (800825c <filtcoef+0x1b84>)
 80081a2:	f7fe fa74 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 80081a6:	2300      	movs	r3, #0
 80081a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081aa:	e012      	b.n	80081d2 <filtcoef+0x1afa>
            coeffTemp[i] *= M_SQRT2;
 80081ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ae:	00db      	lsls	r3, r3, #3
 80081b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081b2:	4413      	add	r3, r2
 80081b4:	ed93 7b00 	vldr	d7, [r3]
 80081b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081be:	4413      	add	r3, r2
 80081c0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8008238 <filtcoef+0x1b60>
 80081c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80081c8:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80081cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ce:	3301      	adds	r3, #1
 80081d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081d6:	429a      	cmp	r2, r3
 80081d8:	dbe8      	blt.n	80081ac <filtcoef+0x1ad4>
        }

        copy_reverse(coeffTemp, N, lp1);
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081de:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80081e0:	f7fe f9ce 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081e8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80081ea:	f7fe f9f4 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081f2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80081f4:	f7fe fa4b 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 80081f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80081fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80081fe:	f7fe fa08 	bl	8006612 <qmf_even>
        free(coeffTemp);
 8008202:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008204:	f001 fdf8 	bl	8009df8 <free>

        return N;
 8008208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800820a:	e37d      	b.n	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif15")){
 800820c:	4914      	ldr	r1, [pc, #80]	; (8008260 <filtcoef+0x1b88>)
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f7f8 f816 	bl	8000240 <strcmp>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d156      	bne.n	80082c8 <filtcoef+0x1bf0>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 800821a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	4618      	mov	r0, r3
 8008220:	f001 fde2 	bl	8009de8 <malloc>
 8008224:	4603      	mov	r3, r0
 8008226:	64fb      	str	r3, [r7, #76]	; 0x4c

        copy(coif15, N, coeffTemp);
 8008228:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800822a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800822c:	480d      	ldr	r0, [pc, #52]	; (8008264 <filtcoef+0x1b8c>)
 800822e:	f7fe fa2e 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 8008232:	2300      	movs	r3, #0
 8008234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008236:	e02a      	b.n	800828e <filtcoef+0x1bb6>
 8008238:	667f3bcd 	.word	0x667f3bcd
 800823c:	3ff6a09e 	.word	0x3ff6a09e
 8008240:	0800ed0c 	.word	0x0800ed0c
 8008244:	08013440 	.word	0x08013440
 8008248:	0800ed14 	.word	0x0800ed14
 800824c:	08013650 	.word	0x08013650
 8008250:	0800ed1c 	.word	0x0800ed1c
 8008254:	08013890 	.word	0x08013890
 8008258:	0800ed24 	.word	0x0800ed24
 800825c:	08013b00 	.word	0x08013b00
 8008260:	0800ed2c 	.word	0x0800ed2c
 8008264:	08013da0 	.word	0x08013da0
            coeffTemp[i] *= M_SQRT2;
 8008268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800826e:	4413      	add	r3, r2
 8008270:	ed93 7b00 	vldr	d7, [r3]
 8008274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800827a:	4413      	add	r3, r2
 800827c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8008508 <filtcoef+0x1e30>
 8008280:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008284:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8008288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800828a:	3301      	adds	r3, #1
 800828c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800828e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008292:	429a      	cmp	r2, r3
 8008294:	dbe8      	blt.n	8008268 <filtcoef+0x1b90>
        }

        copy_reverse(coeffTemp, N, lp1);
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800829a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800829c:	f7fe f970 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80082a6:	f7fe f996 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082ae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80082b0:	f7fe f9ed 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 80082b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80082ba:	f7fe f9aa 	bl	8006612 <qmf_even>
        free(coeffTemp);
 80082be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80082c0:	f001 fd9a 	bl	8009df8 <free>

        return N;
 80082c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082c6:	e31f      	b.n	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif16")){
 80082c8:	4991      	ldr	r1, [pc, #580]	; (8008510 <filtcoef+0x1e38>)
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f7f7 ffb8 	bl	8000240 <strcmp>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d13e      	bne.n	8008354 <filtcoef+0x1c7c>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 80082d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 fd84 	bl	8009de8 <malloc>
 80082e0:	4603      	mov	r3, r0
 80082e2:	653b      	str	r3, [r7, #80]	; 0x50

        copy(coif16, N, coeffTemp);
 80082e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082e8:	488a      	ldr	r0, [pc, #552]	; (8008514 <filtcoef+0x1e3c>)
 80082ea:	f7fe f9d0 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 80082ee:	2300      	movs	r3, #0
 80082f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082f2:	e012      	b.n	800831a <filtcoef+0x1c42>
            coeffTemp[i] *= M_SQRT2;
 80082f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082f6:	00db      	lsls	r3, r3, #3
 80082f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082fa:	4413      	add	r3, r2
 80082fc:	ed93 7b00 	vldr	d7, [r3]
 8008300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008306:	4413      	add	r3, r2
 8008308:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8008508 <filtcoef+0x1e30>
 800830c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008310:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8008314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008316:	3301      	adds	r3, #1
 8008318:	65fb      	str	r3, [r7, #92]	; 0x5c
 800831a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800831c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800831e:	429a      	cmp	r2, r3
 8008320:	dbe8      	blt.n	80082f4 <filtcoef+0x1c1c>
        }

        copy_reverse(coeffTemp, N, lp1);
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008326:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008328:	f7fe f92a 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008330:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008332:	f7fe f950 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800833a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800833c:	f7fe f9a7 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 8008340:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008342:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008344:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008346:	f7fe f964 	bl	8006612 <qmf_even>
        free(coeffTemp);
 800834a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800834c:	f001 fd54 	bl	8009df8 <free>

        return N;
 8008350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008352:	e2d9      	b.n	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif17")){
 8008354:	4970      	ldr	r1, [pc, #448]	; (8008518 <filtcoef+0x1e40>)
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7f7 ff72 	bl	8000240 <strcmp>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d13e      	bne.n	80083e0 <filtcoef+0x1d08>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8008362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008364:	00db      	lsls	r3, r3, #3
 8008366:	4618      	mov	r0, r3
 8008368:	f001 fd3e 	bl	8009de8 <malloc>
 800836c:	4603      	mov	r3, r0
 800836e:	657b      	str	r3, [r7, #84]	; 0x54

        copy(coif17, N, coeffTemp);
 8008370:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008372:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008374:	4869      	ldr	r0, [pc, #420]	; (800851c <filtcoef+0x1e44>)
 8008376:	f7fe f98a 	bl	800668e <copy>
        for (i = 0; i < N; ++i) {
 800837a:	2300      	movs	r3, #0
 800837c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800837e:	e012      	b.n	80083a6 <filtcoef+0x1cce>
            coeffTemp[i] *= M_SQRT2;
 8008380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008386:	4413      	add	r3, r2
 8008388:	ed93 7b00 	vldr	d7, [r3]
 800838c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008392:	4413      	add	r3, r2
 8008394:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8008508 <filtcoef+0x1e30>
 8008398:	ee27 7b06 	vmul.f64	d7, d7, d6
 800839c:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80083a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083a2:	3301      	adds	r3, #1
 80083a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083aa:	429a      	cmp	r2, r3
 80083ac:	dbe8      	blt.n	8008380 <filtcoef+0x1ca8>
        }

        copy_reverse(coeffTemp, N, lp1);
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083b2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80083b4:	f7fe f8e4 	bl	8006580 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083bc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80083be:	f7fe f90a 	bl	80065d6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80083c8:	f7fe f961 	bl	800668e <copy>
        qmf_even(coeffTemp, N, hp2);
 80083cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80083d2:	f7fe f91e 	bl	8006612 <qmf_even>
        free(coeffTemp);
 80083d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80083d8:	f001 fd0e 	bl	8009df8 <free>

        return N;
 80083dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083de:	e293      	b.n	8008908 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"sym2")){
 80083e0:	494f      	ldr	r1, [pc, #316]	; (8008520 <filtcoef+0x1e48>)
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f7f7 ff2c 	bl	8000240 <strcmp>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d115      	bne.n	800841a <filtcoef+0x1d42>
        copy_reverse(sym2, N, lp1);
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083f2:	484c      	ldr	r0, [pc, #304]	; (8008524 <filtcoef+0x1e4c>)
 80083f4:	f7fe f8c4 	bl	8006580 <copy_reverse>
        qmf_wrev(sym2, N, hp1);
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083fc:	4849      	ldr	r0, [pc, #292]	; (8008524 <filtcoef+0x1e4c>)
 80083fe:	f7fe f8ea 	bl	80065d6 <qmf_wrev>
        copy(sym2, N, lp2);
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008406:	4847      	ldr	r0, [pc, #284]	; (8008524 <filtcoef+0x1e4c>)
 8008408:	f7fe f941 	bl	800668e <copy>
        qmf_even(sym2, N, hp2);
 800840c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800840e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008410:	4844      	ldr	r0, [pc, #272]	; (8008524 <filtcoef+0x1e4c>)
 8008412:	f7fe f8fe 	bl	8006612 <qmf_even>
        return N;
 8008416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008418:	e276      	b.n	8008908 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym3")){
 800841a:	4943      	ldr	r1, [pc, #268]	; (8008528 <filtcoef+0x1e50>)
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f7f7 ff0f 	bl	8000240 <strcmp>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d115      	bne.n	8008454 <filtcoef+0x1d7c>
        copy_reverse(sym3, N, lp1);
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800842c:	483f      	ldr	r0, [pc, #252]	; (800852c <filtcoef+0x1e54>)
 800842e:	f7fe f8a7 	bl	8006580 <copy_reverse>
        qmf_wrev(sym3, N, hp1);
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008436:	483d      	ldr	r0, [pc, #244]	; (800852c <filtcoef+0x1e54>)
 8008438:	f7fe f8cd 	bl	80065d6 <qmf_wrev>
        copy(sym3, N, lp2);
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008440:	483a      	ldr	r0, [pc, #232]	; (800852c <filtcoef+0x1e54>)
 8008442:	f7fe f924 	bl	800668e <copy>
        qmf_even(sym3, N, hp2);
 8008446:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008448:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800844a:	4838      	ldr	r0, [pc, #224]	; (800852c <filtcoef+0x1e54>)
 800844c:	f7fe f8e1 	bl	8006612 <qmf_even>
        return N;
 8008450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008452:	e259      	b.n	8008908 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym4")){
 8008454:	4936      	ldr	r1, [pc, #216]	; (8008530 <filtcoef+0x1e58>)
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7f7 fef2 	bl	8000240 <strcmp>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d115      	bne.n	800848e <filtcoef+0x1db6>
        copy_reverse(sym4, N, lp1);
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008466:	4833      	ldr	r0, [pc, #204]	; (8008534 <filtcoef+0x1e5c>)
 8008468:	f7fe f88a 	bl	8006580 <copy_reverse>
        qmf_wrev(sym4, N, hp1);
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008470:	4830      	ldr	r0, [pc, #192]	; (8008534 <filtcoef+0x1e5c>)
 8008472:	f7fe f8b0 	bl	80065d6 <qmf_wrev>
        copy(sym4, N, lp2);
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800847a:	482e      	ldr	r0, [pc, #184]	; (8008534 <filtcoef+0x1e5c>)
 800847c:	f7fe f907 	bl	800668e <copy>
        qmf_even(sym4, N, hp2);
 8008480:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008482:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008484:	482b      	ldr	r0, [pc, #172]	; (8008534 <filtcoef+0x1e5c>)
 8008486:	f7fe f8c4 	bl	8006612 <qmf_even>
        return N;
 800848a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800848c:	e23c      	b.n	8008908 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym5")){
 800848e:	492a      	ldr	r1, [pc, #168]	; (8008538 <filtcoef+0x1e60>)
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f7f7 fed5 	bl	8000240 <strcmp>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d115      	bne.n	80084c8 <filtcoef+0x1df0>
        copy_reverse(sym5, N, lp1);
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084a0:	4826      	ldr	r0, [pc, #152]	; (800853c <filtcoef+0x1e64>)
 80084a2:	f7fe f86d 	bl	8006580 <copy_reverse>
        qmf_wrev(sym5, N, hp1);
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084aa:	4824      	ldr	r0, [pc, #144]	; (800853c <filtcoef+0x1e64>)
 80084ac:	f7fe f893 	bl	80065d6 <qmf_wrev>
        copy(sym5, N, lp2);
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084b4:	4821      	ldr	r0, [pc, #132]	; (800853c <filtcoef+0x1e64>)
 80084b6:	f7fe f8ea 	bl	800668e <copy>
        qmf_even(sym5, N, hp2);
 80084ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084be:	481f      	ldr	r0, [pc, #124]	; (800853c <filtcoef+0x1e64>)
 80084c0:	f7fe f8a7 	bl	8006612 <qmf_even>
        return N;
 80084c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084c6:	e21f      	b.n	8008908 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym6")){
 80084c8:	491d      	ldr	r1, [pc, #116]	; (8008540 <filtcoef+0x1e68>)
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7f7 feb8 	bl	8000240 <strcmp>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d138      	bne.n	8008548 <filtcoef+0x1e70>
        copy_reverse(sym6, N, lp1);
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084da:	481a      	ldr	r0, [pc, #104]	; (8008544 <filtcoef+0x1e6c>)
 80084dc:	f7fe f850 	bl	8006580 <copy_reverse>
        qmf_wrev(sym6, N, hp1);
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084e4:	4817      	ldr	r0, [pc, #92]	; (8008544 <filtcoef+0x1e6c>)
 80084e6:	f7fe f876 	bl	80065d6 <qmf_wrev>
        copy(sym6, N, lp2);
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084ee:	4815      	ldr	r0, [pc, #84]	; (8008544 <filtcoef+0x1e6c>)
 80084f0:	f7fe f8cd 	bl	800668e <copy>
        qmf_even(sym6, N, hp2);
 80084f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084f8:	4812      	ldr	r0, [pc, #72]	; (8008544 <filtcoef+0x1e6c>)
 80084fa:	f7fe f88a 	bl	8006612 <qmf_even>
        return N;
 80084fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008500:	e202      	b.n	8008908 <filtcoef+0x2230>
 8008502:	bf00      	nop
 8008504:	f3af 8000 	nop.w
 8008508:	667f3bcd 	.word	0x667f3bcd
 800850c:	3ff6a09e 	.word	0x3ff6a09e
 8008510:	0800ed34 	.word	0x0800ed34
 8008514:	08014070 	.word	0x08014070
 8008518:	0800ed3c 	.word	0x0800ed3c
 800851c:	08014370 	.word	0x08014370
 8008520:	0800ed44 	.word	0x0800ed44
 8008524:	080146a0 	.word	0x080146a0
 8008528:	0800ed4c 	.word	0x0800ed4c
 800852c:	080146c0 	.word	0x080146c0
 8008530:	0800ed54 	.word	0x0800ed54
 8008534:	080146f0 	.word	0x080146f0
 8008538:	0800ed5c 	.word	0x0800ed5c
 800853c:	08014730 	.word	0x08014730
 8008540:	0800ed64 	.word	0x0800ed64
 8008544:	08014780 	.word	0x08014780
	}

	else if (!strcmp(name,"sym7")){
 8008548:	4990      	ldr	r1, [pc, #576]	; (800878c <filtcoef+0x20b4>)
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f7f7 fe78 	bl	8000240 <strcmp>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d115      	bne.n	8008582 <filtcoef+0x1eaa>
        copy_reverse(sym7, N, lp1);
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800855a:	488d      	ldr	r0, [pc, #564]	; (8008790 <filtcoef+0x20b8>)
 800855c:	f7fe f810 	bl	8006580 <copy_reverse>
        qmf_wrev(sym7, N, hp1);
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008564:	488a      	ldr	r0, [pc, #552]	; (8008790 <filtcoef+0x20b8>)
 8008566:	f7fe f836 	bl	80065d6 <qmf_wrev>
        copy(sym7, N, lp2);
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800856e:	4888      	ldr	r0, [pc, #544]	; (8008790 <filtcoef+0x20b8>)
 8008570:	f7fe f88d 	bl	800668e <copy>
        qmf_even(sym7, N, hp2);
 8008574:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008576:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008578:	4885      	ldr	r0, [pc, #532]	; (8008790 <filtcoef+0x20b8>)
 800857a:	f7fe f84a 	bl	8006612 <qmf_even>
        return N;
 800857e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008580:	e1c2      	b.n	8008908 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym8")){
 8008582:	4984      	ldr	r1, [pc, #528]	; (8008794 <filtcoef+0x20bc>)
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7f7 fe5b 	bl	8000240 <strcmp>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d115      	bne.n	80085bc <filtcoef+0x1ee4>
        copy_reverse(sym8, N, lp1);
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008594:	4880      	ldr	r0, [pc, #512]	; (8008798 <filtcoef+0x20c0>)
 8008596:	f7fd fff3 	bl	8006580 <copy_reverse>
        qmf_wrev(sym8, N, hp1);
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800859e:	487e      	ldr	r0, [pc, #504]	; (8008798 <filtcoef+0x20c0>)
 80085a0:	f7fe f819 	bl	80065d6 <qmf_wrev>
        copy(sym8, N, lp2);
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085a8:	487b      	ldr	r0, [pc, #492]	; (8008798 <filtcoef+0x20c0>)
 80085aa:	f7fe f870 	bl	800668e <copy>
        qmf_even(sym8, N, hp2);
 80085ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085b2:	4879      	ldr	r0, [pc, #484]	; (8008798 <filtcoef+0x20c0>)
 80085b4:	f7fe f82d 	bl	8006612 <qmf_even>
        return N;
 80085b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085ba:	e1a5      	b.n	8008908 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym9")){
 80085bc:	4977      	ldr	r1, [pc, #476]	; (800879c <filtcoef+0x20c4>)
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7f7 fe3e 	bl	8000240 <strcmp>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d115      	bne.n	80085f6 <filtcoef+0x1f1e>
        copy_reverse(sym9, N, lp1);
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085ce:	4874      	ldr	r0, [pc, #464]	; (80087a0 <filtcoef+0x20c8>)
 80085d0:	f7fd ffd6 	bl	8006580 <copy_reverse>
        qmf_wrev(sym9, N, hp1);
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085d8:	4871      	ldr	r0, [pc, #452]	; (80087a0 <filtcoef+0x20c8>)
 80085da:	f7fd fffc 	bl	80065d6 <qmf_wrev>
        copy(sym9, N, lp2);
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085e2:	486f      	ldr	r0, [pc, #444]	; (80087a0 <filtcoef+0x20c8>)
 80085e4:	f7fe f853 	bl	800668e <copy>
        qmf_even(sym9, N, hp2);
 80085e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085ec:	486c      	ldr	r0, [pc, #432]	; (80087a0 <filtcoef+0x20c8>)
 80085ee:	f7fe f810 	bl	8006612 <qmf_even>
        return N;
 80085f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085f4:	e188      	b.n	8008908 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym10")){
 80085f6:	496b      	ldr	r1, [pc, #428]	; (80087a4 <filtcoef+0x20cc>)
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f7f7 fe21 	bl	8000240 <strcmp>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d115      	bne.n	8008630 <filtcoef+0x1f58>
        copy_reverse(sym10, N, lp1);
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008608:	4867      	ldr	r0, [pc, #412]	; (80087a8 <filtcoef+0x20d0>)
 800860a:	f7fd ffb9 	bl	8006580 <copy_reverse>
        qmf_wrev(sym10, N, hp1);
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008612:	4865      	ldr	r0, [pc, #404]	; (80087a8 <filtcoef+0x20d0>)
 8008614:	f7fd ffdf 	bl	80065d6 <qmf_wrev>
        copy(sym10, N, lp2);
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800861c:	4862      	ldr	r0, [pc, #392]	; (80087a8 <filtcoef+0x20d0>)
 800861e:	f7fe f836 	bl	800668e <copy>
        qmf_even(sym10, N, hp2);
 8008622:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008624:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008626:	4860      	ldr	r0, [pc, #384]	; (80087a8 <filtcoef+0x20d0>)
 8008628:	f7fd fff3 	bl	8006612 <qmf_even>
        return N;
 800862c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800862e:	e16b      	b.n	8008908 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "sym11")){
 8008630:	495e      	ldr	r1, [pc, #376]	; (80087ac <filtcoef+0x20d4>)
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7f7 fe04 	bl	8000240 <strcmp>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d115      	bne.n	800866a <filtcoef+0x1f92>
        copy_reverse(sym11, N, lp1);
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008642:	485b      	ldr	r0, [pc, #364]	; (80087b0 <filtcoef+0x20d8>)
 8008644:	f7fd ff9c 	bl	8006580 <copy_reverse>
        qmf_wrev(sym11, N, hp1);
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800864c:	4858      	ldr	r0, [pc, #352]	; (80087b0 <filtcoef+0x20d8>)
 800864e:	f7fd ffc2 	bl	80065d6 <qmf_wrev>
        copy(sym11, N, lp2);
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008656:	4856      	ldr	r0, [pc, #344]	; (80087b0 <filtcoef+0x20d8>)
 8008658:	f7fe f819 	bl	800668e <copy>
        qmf_even(sym11, N, hp2);
 800865c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800865e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008660:	4853      	ldr	r0, [pc, #332]	; (80087b0 <filtcoef+0x20d8>)
 8008662:	f7fd ffd6 	bl	8006612 <qmf_even>
        return N;
 8008666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008668:	e14e      	b.n	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym12")){
 800866a:	4952      	ldr	r1, [pc, #328]	; (80087b4 <filtcoef+0x20dc>)
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f7f7 fde7 	bl	8000240 <strcmp>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d115      	bne.n	80086a4 <filtcoef+0x1fcc>
        copy_reverse(sym12, N, lp1);
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800867c:	484e      	ldr	r0, [pc, #312]	; (80087b8 <filtcoef+0x20e0>)
 800867e:	f7fd ff7f 	bl	8006580 <copy_reverse>
        qmf_wrev(sym12, N, hp1);
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008686:	484c      	ldr	r0, [pc, #304]	; (80087b8 <filtcoef+0x20e0>)
 8008688:	f7fd ffa5 	bl	80065d6 <qmf_wrev>
        copy(sym12, N, lp2);
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008690:	4849      	ldr	r0, [pc, #292]	; (80087b8 <filtcoef+0x20e0>)
 8008692:	f7fd fffc 	bl	800668e <copy>
        qmf_even(sym12, N, hp2);
 8008696:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008698:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800869a:	4847      	ldr	r0, [pc, #284]	; (80087b8 <filtcoef+0x20e0>)
 800869c:	f7fd ffb9 	bl	8006612 <qmf_even>
        return N;
 80086a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086a2:	e131      	b.n	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym13")){
 80086a4:	4945      	ldr	r1, [pc, #276]	; (80087bc <filtcoef+0x20e4>)
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7f7 fdca 	bl	8000240 <strcmp>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d115      	bne.n	80086de <filtcoef+0x2006>
        copy_reverse(sym13, N, lp1);
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086b6:	4842      	ldr	r0, [pc, #264]	; (80087c0 <filtcoef+0x20e8>)
 80086b8:	f7fd ff62 	bl	8006580 <copy_reverse>
        qmf_wrev(sym13, N, hp1);
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086c0:	483f      	ldr	r0, [pc, #252]	; (80087c0 <filtcoef+0x20e8>)
 80086c2:	f7fd ff88 	bl	80065d6 <qmf_wrev>
        copy(sym13, N, lp2);
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086ca:	483d      	ldr	r0, [pc, #244]	; (80087c0 <filtcoef+0x20e8>)
 80086cc:	f7fd ffdf 	bl	800668e <copy>
        qmf_even(sym13, N, hp2);
 80086d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086d4:	483a      	ldr	r0, [pc, #232]	; (80087c0 <filtcoef+0x20e8>)
 80086d6:	f7fd ff9c 	bl	8006612 <qmf_even>
        return N;
 80086da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086dc:	e114      	b.n	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym14")){
 80086de:	4939      	ldr	r1, [pc, #228]	; (80087c4 <filtcoef+0x20ec>)
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f7f7 fdad 	bl	8000240 <strcmp>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d115      	bne.n	8008718 <filtcoef+0x2040>
        copy_reverse(sym14, N, lp1);
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086f0:	4835      	ldr	r0, [pc, #212]	; (80087c8 <filtcoef+0x20f0>)
 80086f2:	f7fd ff45 	bl	8006580 <copy_reverse>
        qmf_wrev(sym14, N, hp1);
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086fa:	4833      	ldr	r0, [pc, #204]	; (80087c8 <filtcoef+0x20f0>)
 80086fc:	f7fd ff6b 	bl	80065d6 <qmf_wrev>
        copy(sym14, N, lp2);
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008704:	4830      	ldr	r0, [pc, #192]	; (80087c8 <filtcoef+0x20f0>)
 8008706:	f7fd ffc2 	bl	800668e <copy>
        qmf_even(sym14, N, hp2);
 800870a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800870c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800870e:	482e      	ldr	r0, [pc, #184]	; (80087c8 <filtcoef+0x20f0>)
 8008710:	f7fd ff7f 	bl	8006612 <qmf_even>
        return N;
 8008714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008716:	e0f7      	b.n	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym15")){
 8008718:	492c      	ldr	r1, [pc, #176]	; (80087cc <filtcoef+0x20f4>)
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f7f7 fd90 	bl	8000240 <strcmp>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d115      	bne.n	8008752 <filtcoef+0x207a>
        copy_reverse(sym15, N, lp1);
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800872a:	4829      	ldr	r0, [pc, #164]	; (80087d0 <filtcoef+0x20f8>)
 800872c:	f7fd ff28 	bl	8006580 <copy_reverse>
        qmf_wrev(sym15, N, hp1);
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008734:	4826      	ldr	r0, [pc, #152]	; (80087d0 <filtcoef+0x20f8>)
 8008736:	f7fd ff4e 	bl	80065d6 <qmf_wrev>
        copy(sym15, N, lp2);
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800873e:	4824      	ldr	r0, [pc, #144]	; (80087d0 <filtcoef+0x20f8>)
 8008740:	f7fd ffa5 	bl	800668e <copy>
        qmf_even(sym15, N, hp2);
 8008744:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008746:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008748:	4821      	ldr	r0, [pc, #132]	; (80087d0 <filtcoef+0x20f8>)
 800874a:	f7fd ff62 	bl	8006612 <qmf_even>
        return N;
 800874e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008750:	e0da      	b.n	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym16")){
 8008752:	4920      	ldr	r1, [pc, #128]	; (80087d4 <filtcoef+0x20fc>)
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f7f7 fd73 	bl	8000240 <strcmp>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d13d      	bne.n	80087dc <filtcoef+0x2104>
        copy_reverse(sym16, N, lp1);
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008764:	481c      	ldr	r0, [pc, #112]	; (80087d8 <filtcoef+0x2100>)
 8008766:	f7fd ff0b 	bl	8006580 <copy_reverse>
        qmf_wrev(sym16, N, hp1);
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800876e:	481a      	ldr	r0, [pc, #104]	; (80087d8 <filtcoef+0x2100>)
 8008770:	f7fd ff31 	bl	80065d6 <qmf_wrev>
        copy(sym16, N, lp2);
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008778:	4817      	ldr	r0, [pc, #92]	; (80087d8 <filtcoef+0x2100>)
 800877a:	f7fd ff88 	bl	800668e <copy>
        qmf_even(sym16, N, hp2);
 800877e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008780:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008782:	4815      	ldr	r0, [pc, #84]	; (80087d8 <filtcoef+0x2100>)
 8008784:	f7fd ff45 	bl	8006612 <qmf_even>
        return N;
 8008788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800878a:	e0bd      	b.n	8008908 <filtcoef+0x2230>
 800878c:	0800ed6c 	.word	0x0800ed6c
 8008790:	080147e0 	.word	0x080147e0
 8008794:	0800ed74 	.word	0x0800ed74
 8008798:	08014850 	.word	0x08014850
 800879c:	0800ed7c 	.word	0x0800ed7c
 80087a0:	080148d0 	.word	0x080148d0
 80087a4:	0800ed84 	.word	0x0800ed84
 80087a8:	08014960 	.word	0x08014960
 80087ac:	0800ed8c 	.word	0x0800ed8c
 80087b0:	08014a00 	.word	0x08014a00
 80087b4:	0800ed94 	.word	0x0800ed94
 80087b8:	08014ab0 	.word	0x08014ab0
 80087bc:	0800ed9c 	.word	0x0800ed9c
 80087c0:	08014b70 	.word	0x08014b70
 80087c4:	0800eda4 	.word	0x0800eda4
 80087c8:	08014c40 	.word	0x08014c40
 80087cc:	0800edac 	.word	0x0800edac
 80087d0:	08014d20 	.word	0x08014d20
 80087d4:	0800edb4 	.word	0x0800edb4
 80087d8:	08014e10 	.word	0x08014e10
    }
    else if (!strcmp(name, "sym17")){
 80087dc:	494c      	ldr	r1, [pc, #304]	; (8008910 <filtcoef+0x2238>)
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7f7 fd2e 	bl	8000240 <strcmp>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d115      	bne.n	8008816 <filtcoef+0x213e>
        copy_reverse(sym17, N, lp1);
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087ee:	4849      	ldr	r0, [pc, #292]	; (8008914 <filtcoef+0x223c>)
 80087f0:	f7fd fec6 	bl	8006580 <copy_reverse>
        qmf_wrev(sym17, N, hp1);
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087f8:	4846      	ldr	r0, [pc, #280]	; (8008914 <filtcoef+0x223c>)
 80087fa:	f7fd feec 	bl	80065d6 <qmf_wrev>
        copy(sym17, N, lp2);
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008802:	4844      	ldr	r0, [pc, #272]	; (8008914 <filtcoef+0x223c>)
 8008804:	f7fd ff43 	bl	800668e <copy>
        qmf_even(sym17, N, hp2);
 8008808:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800880a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800880c:	4841      	ldr	r0, [pc, #260]	; (8008914 <filtcoef+0x223c>)
 800880e:	f7fd ff00 	bl	8006612 <qmf_even>
        return N;
 8008812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008814:	e078      	b.n	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym18")){
 8008816:	4940      	ldr	r1, [pc, #256]	; (8008918 <filtcoef+0x2240>)
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f7f7 fd11 	bl	8000240 <strcmp>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d115      	bne.n	8008850 <filtcoef+0x2178>
        copy_reverse(sym18, N, lp1);
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008828:	483c      	ldr	r0, [pc, #240]	; (800891c <filtcoef+0x2244>)
 800882a:	f7fd fea9 	bl	8006580 <copy_reverse>
        qmf_wrev(sym18, N, hp1);
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008832:	483a      	ldr	r0, [pc, #232]	; (800891c <filtcoef+0x2244>)
 8008834:	f7fd fecf 	bl	80065d6 <qmf_wrev>
        copy(sym18, N, lp2);
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800883c:	4837      	ldr	r0, [pc, #220]	; (800891c <filtcoef+0x2244>)
 800883e:	f7fd ff26 	bl	800668e <copy>
        qmf_even(sym18, N, hp2);
 8008842:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008844:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008846:	4835      	ldr	r0, [pc, #212]	; (800891c <filtcoef+0x2244>)
 8008848:	f7fd fee3 	bl	8006612 <qmf_even>
        return N;
 800884c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800884e:	e05b      	b.n	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym19")){
 8008850:	4933      	ldr	r1, [pc, #204]	; (8008920 <filtcoef+0x2248>)
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7f7 fcf4 	bl	8000240 <strcmp>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d115      	bne.n	800888a <filtcoef+0x21b2>
        copy_reverse(sym19, N, lp1);
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008862:	4830      	ldr	r0, [pc, #192]	; (8008924 <filtcoef+0x224c>)
 8008864:	f7fd fe8c 	bl	8006580 <copy_reverse>
        qmf_wrev(sym19, N, hp1);
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800886c:	482d      	ldr	r0, [pc, #180]	; (8008924 <filtcoef+0x224c>)
 800886e:	f7fd feb2 	bl	80065d6 <qmf_wrev>
        copy(sym19, N, lp2);
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008876:	482b      	ldr	r0, [pc, #172]	; (8008924 <filtcoef+0x224c>)
 8008878:	f7fd ff09 	bl	800668e <copy>
        qmf_even(sym19, N, hp2);
 800887c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800887e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008880:	4828      	ldr	r0, [pc, #160]	; (8008924 <filtcoef+0x224c>)
 8008882:	f7fd fec6 	bl	8006612 <qmf_even>
        return N;
 8008886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008888:	e03e      	b.n	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym20")){
 800888a:	4927      	ldr	r1, [pc, #156]	; (8008928 <filtcoef+0x2250>)
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7f7 fcd7 	bl	8000240 <strcmp>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d115      	bne.n	80088c4 <filtcoef+0x21ec>
        copy_reverse(sym20, N, lp1);
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800889c:	4823      	ldr	r0, [pc, #140]	; (800892c <filtcoef+0x2254>)
 800889e:	f7fd fe6f 	bl	8006580 <copy_reverse>
        qmf_wrev(sym20, N, hp1);
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088a6:	4821      	ldr	r0, [pc, #132]	; (800892c <filtcoef+0x2254>)
 80088a8:	f7fd fe95 	bl	80065d6 <qmf_wrev>
        copy(sym20, N, lp2);
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088b0:	481e      	ldr	r0, [pc, #120]	; (800892c <filtcoef+0x2254>)
 80088b2:	f7fd feec 	bl	800668e <copy>
        qmf_even(sym20, N, hp2);
 80088b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088ba:	481c      	ldr	r0, [pc, #112]	; (800892c <filtcoef+0x2254>)
 80088bc:	f7fd fea9 	bl	8006612 <qmf_even>
        return N;
 80088c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088c2:	e021      	b.n	8008908 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "meyer")){
 80088c4:	491a      	ldr	r1, [pc, #104]	; (8008930 <filtcoef+0x2258>)
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7f7 fcba 	bl	8000240 <strcmp>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d115      	bne.n	80088fe <filtcoef+0x2226>
        copy_reverse(meyer, N, lp1);
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088d6:	4817      	ldr	r0, [pc, #92]	; (8008934 <filtcoef+0x225c>)
 80088d8:	f7fd fe52 	bl	8006580 <copy_reverse>
        qmf_wrev(meyer, N, hp1);
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088e0:	4814      	ldr	r0, [pc, #80]	; (8008934 <filtcoef+0x225c>)
 80088e2:	f7fd fe78 	bl	80065d6 <qmf_wrev>
        copy(meyer, N, lp2);
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088ea:	4812      	ldr	r0, [pc, #72]	; (8008934 <filtcoef+0x225c>)
 80088ec:	f7fd fecf 	bl	800668e <copy>
        qmf_even(meyer, N, hp2);
 80088f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088f4:	480f      	ldr	r0, [pc, #60]	; (8008934 <filtcoef+0x225c>)
 80088f6:	f7fd fe8c 	bl	8006612 <qmf_even>
        return N;
 80088fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088fc:	e004      	b.n	8008908 <filtcoef+0x2230>
    }

	else {
		printf("\n Filter Not in Database \n");
 80088fe:	480e      	ldr	r0, [pc, #56]	; (8008938 <filtcoef+0x2260>)
 8008900:	f002 fb24 	bl	800af4c <puts>
		return -1;
 8008904:	f04f 33ff 	mov.w	r3, #4294967295
	}

	return 0;
}
 8008908:	4618      	mov	r0, r3
 800890a:	3760      	adds	r7, #96	; 0x60
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	0800edbc 	.word	0x0800edbc
 8008914:	08014f10 	.word	0x08014f10
 8008918:	0800edc4 	.word	0x0800edc4
 800891c:	08015020 	.word	0x08015020
 8008920:	0800edcc 	.word	0x0800edcc
 8008924:	08015140 	.word	0x08015140
 8008928:	0800edd4 	.word	0x0800edd4
 800892c:	08015270 	.word	0x08015270
 8008930:	0800ebac 	.word	0x0800ebac
 8008934:	08015ba0 	.word	0x08015ba0
 8008938:	0800ea58 	.word	0x0800ea58

0800893c <wave_init>:

#include "cwt.h"
#include "../header/wavelib.h"
#include "wtmath.h"

wave_object wave_init(const char* wname) {
 800893c:	b5b0      	push	{r4, r5, r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af02      	add	r7, sp, #8
 8008942:	6078      	str	r0, [r7, #4]
	wave_object obj = NULL;
 8008944:	2300      	movs	r3, #0
 8008946:	60bb      	str	r3, [r7, #8]
	int retval;
	retval = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	60fb      	str	r3, [r7, #12]

	if (wname != NULL) {
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <wave_init+0x1e>
		retval = filtlength(wname);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7fd fbde 	bl	8006114 <filtlength>
 8008958:	60f8      	str	r0, [r7, #12]
		//obj->filtlength = retval;
		//strcopy(obj->wname, wname);
	}

	obj = (wave_object)malloc(sizeof(struct wave_set) + sizeof(double)* 4 * retval);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	015b      	lsls	r3, r3, #5
 800895e:	3358      	adds	r3, #88	; 0x58
 8008960:	4618      	mov	r0, r3
 8008962:	f001 fa41 	bl	8009de8 <malloc>
 8008966:	4603      	mov	r3, r0
 8008968:	60bb      	str	r3, [r7, #8]

	obj->filtlength = retval;
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	635a      	str	r2, [r3, #52]	; 0x34
	obj->lpd_len = obj->hpd_len = obj->lpr_len = obj->hpr_len = obj->filtlength;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	645a      	str	r2, [r3, #68]	; 0x44
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	641a      	str	r2, [r3, #64]	; 0x40
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	63da      	str	r2, [r3, #60]	; 0x3c
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	639a      	str	r2, [r3, #56]	; 0x38
	strcpy(obj->wname, wname);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	4618      	mov	r0, r3
 8008996:	f002 fd2c 	bl	800b3f2 <strcpy>
	if (wname != NULL) {
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01e      	beq.n	80089de <wave_init+0xa2>
		filtcoef(wname,obj->params,obj->params+retval,obj->params+2*retval,obj->params+3*retval);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	18d4      	adds	r4, r2, r3
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	011b      	lsls	r3, r3, #4
 80089bc:	18d5      	adds	r5, r2, r3
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	4613      	mov	r3, r2
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	4413      	add	r3, r2
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	440b      	add	r3, r1
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	462b      	mov	r3, r5
 80089d4:	4622      	mov	r2, r4
 80089d6:	4601      	mov	r1, r0
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7fd fe7d 	bl	80066d8 <filtcoef>
	}
	obj->lpd = &obj->params[0];
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	649a      	str	r2, [r3, #72]	; 0x48
	obj->hpd = &obj->params[retval];
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	330b      	adds	r3, #11
 80089ec:	00db      	lsls	r3, r3, #3
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	441a      	add	r2, r3
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	64da      	str	r2, [r3, #76]	; 0x4c
	obj->lpr = &obj->params[2 * retval];
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	330b      	adds	r3, #11
 80089fc:	00db      	lsls	r3, r3, #3
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	441a      	add	r2, r3
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	651a      	str	r2, [r3, #80]	; 0x50
	obj->hpr = &obj->params[3 * retval];
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	4413      	add	r3, r2
 8008a0e:	330b      	adds	r3, #11
 8008a10:	00db      	lsls	r3, r3, #3
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	441a      	add	r2, r3
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	655a      	str	r2, [r3, #84]	; 0x54
	return obj;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bdb0      	pop	{r4, r5, r7, pc}

08008a24 <wtree_init>:
	//wave_summary(obj->wave);

	return obj;
}

wtree_object wtree_init(wave_object wave, int siglength,int J) {
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08c      	sub	sp, #48	; 0x30
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
    int size,i,MaxIter,temp,temp2,elength,nodes;
	wtree_object obj = NULL;
 8008a30:	2300      	movs	r3, #0
 8008a32:	61fb      	str	r3, [r7, #28]

	size = wave->filtlength;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a38:	61bb      	str	r3, [r7, #24]

	if (J > 100) {
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b64      	cmp	r3, #100	; 0x64
 8008a3e:	dd06      	ble.n	8008a4e <wtree_init+0x2a>
		printf(" \r\n The Decomposition Iterations Cannot Exceed 100. Exiting  \r\n");
 8008a40:	4865      	ldr	r0, [pc, #404]	; (8008bd8 <wtree_init+0x1b4>)
 8008a42:	f002 fa83 	bl	800af4c <puts>
		exit(-1);
 8008a46:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4a:	f001 f9bb 	bl	8009dc4 <exit>
	}


	MaxIter = wmaxiter(siglength, size);
 8008a4e:	69b9      	ldr	r1, [r7, #24]
 8008a50:	68b8      	ldr	r0, [r7, #8]
 8008a52:	f001 f969 	bl	8009d28 <wmaxiter>
 8008a56:	6178      	str	r0, [r7, #20]
	if (J > MaxIter) {
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	dd07      	ble.n	8008a70 <wtree_init+0x4c>
		printf(" \r\n Error - The Signal Can only be iterated %d times using this wavelet. Exiting \r\n", MaxIter);
 8008a60:	6979      	ldr	r1, [r7, #20]
 8008a62:	485e      	ldr	r0, [pc, #376]	; (8008bdc <wtree_init+0x1b8>)
 8008a64:	f002 fa0c 	bl	800ae80 <iprintf>
		exit(-1);
 8008a68:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6c:	f001 f9aa 	bl	8009dc4 <exit>
	}
	temp = 1;
 8008a70:	2301      	movs	r3, #1
 8008a72:	62bb      	str	r3, [r7, #40]	; 0x28
	elength = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24
	nodes = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	623b      	str	r3, [r7, #32]
	for(i = 0; i < J;++i) {
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a80:	e014      	b.n	8008aac <wtree_init+0x88>
	  temp *= 2;
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	62bb      	str	r3, [r7, #40]	; 0x28
	  nodes += temp;
 8008a88:	6a3a      	ldr	r2, [r7, #32]
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	4413      	add	r3, r2
 8008a8e:	623b      	str	r3, [r7, #32]
	  temp2 = (size - 2) * (temp - 1);
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	3b02      	subs	r3, #2
 8008a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a96:	3a01      	subs	r2, #1
 8008a98:	fb02 f303 	mul.w	r3, r2, r3
 8008a9c:	613b      	str	r3, [r7, #16]
	  elength += temp2;
 8008a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
	for(i = 0; i < J;++i) {
 8008aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	dbe6      	blt.n	8008a82 <wtree_init+0x5e>
	}

	obj = (wtree_object)malloc(sizeof(struct wtree_set) + sizeof(double)* (siglength * (J + 1) + elength + nodes + J + 1));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	fb03 f202 	mul.w	r2, r3, r2
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	441a      	add	r2, r3
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	441a      	add	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	333f      	adds	r3, #63	; 0x3f
 8008acc:	00db      	lsls	r3, r3, #3
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f001 f98a 	bl	8009de8 <malloc>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	61fb      	str	r3, [r7, #28]
	obj->outlength = siglength * (J + 1) + elength;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	3301      	adds	r3, #1
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	fb03 f202 	mul.w	r2, r3, r2
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	441a      	add	r2, r3
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	619a      	str	r2, [r3, #24]
	strcpy(obj->ext, "sym");
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	332c      	adds	r3, #44	; 0x2c
 8008aee:	4a3c      	ldr	r2, [pc, #240]	; (8008be0 <wtree_init+0x1bc>)
 8008af0:	6810      	ldr	r0, [r2, #0]
 8008af2:	6018      	str	r0, [r3, #0]

	obj->wave = wave;
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	601a      	str	r2, [r3, #0]
	obj->siglength = siglength;
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	615a      	str	r2, [r3, #20]
	obj->J = J;
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	621a      	str	r2, [r3, #32]
	obj->MaxIter = MaxIter;
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	625a      	str	r2, [r3, #36]	; 0x24
	strcpy(obj->method, "dwt");
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	3308      	adds	r3, #8
 8008b10:	4a34      	ldr	r2, [pc, #208]	; (8008be4 <wtree_init+0x1c0>)
 8008b12:	6810      	ldr	r0, [r2, #0]
 8008b14:	6018      	str	r0, [r3, #0]

	if (siglength % 2 == 0) {
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d103      	bne.n	8008b28 <wtree_init+0x104>
		obj->even = 1;
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	2201      	movs	r2, #1
 8008b24:	629a      	str	r2, [r3, #40]	; 0x28
 8008b26:	e002      	b.n	8008b2e <wtree_init+0x10a>
	}
	else {
		obj->even = 0;
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	629a      	str	r2, [r3, #40]	; 0x28
	}

	obj->cobj = NULL;
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	2200      	movs	r2, #0
 8008b32:	605a      	str	r2, [r3, #4]
	obj->nodes = nodes;
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	6a3a      	ldr	r2, [r7, #32]
 8008b38:	63da      	str	r2, [r3, #60]	; 0x3c

	obj->cfftset = 0;
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	641a      	str	r2, [r3, #64]	; 0x40
	obj->lenlength = J + 2;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	1c9a      	adds	r2, r3, #2
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	61da      	str	r2, [r3, #28]
	obj->output = &obj->params[0];
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	obj->nodelength = (int*) &obj->params[siglength * (J + 1) + elength];
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3301      	adds	r3, #1
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	fb03 f202 	mul.w	r2, r3, r2
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	4413      	add	r3, r2
 8008b62:	333e      	adds	r3, #62	; 0x3e
 8008b64:	00db      	lsls	r3, r3, #3
 8008b66:	69fa      	ldr	r2, [r7, #28]
 8008b68:	441a      	add	r2, r3
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	obj->coeflength = (int*)&obj->params[siglength * (J + 1) + elength + nodes];
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3301      	adds	r3, #1
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	fb03 f202 	mul.w	r2, r3, r2
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	441a      	add	r2, r3
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	4413      	add	r3, r2
 8008b82:	333e      	adds	r3, #62	; 0x3e
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	69fa      	ldr	r2, [r7, #28]
 8008b88:	441a      	add	r2, r3
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for (i = 0; i < siglength * (J + 1) + elength + nodes + J + 1; ++i) {
 8008b90:	2300      	movs	r3, #0
 8008b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b94:	e00d      	b.n	8008bb2 <wtree_init+0x18e>
	       obj->params[i] = 0.0;
 8008b96:	69fa      	ldr	r2, [r7, #28]
 8008b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9a:	333e      	adds	r3, #62	; 0x3e
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	18d1      	adds	r1, r2, r3
 8008ba0:	f04f 0200 	mov.w	r2, #0
 8008ba4:	f04f 0300 	mov.w	r3, #0
 8008ba8:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < siglength * (J + 1) + elength + nodes + J + 1; ++i) {
 8008bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bae:	3301      	adds	r3, #1
 8008bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	fb03 f202 	mul.w	r2, r3, r2
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	441a      	add	r2, r3
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	441a      	add	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	dde3      	ble.n	8008b96 <wtree_init+0x172>
	}

	//wave_summary(obj->wave);

	return obj;
 8008bce:	69fb      	ldr	r3, [r7, #28]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3730      	adds	r7, #48	; 0x30
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	0800eddc 	.word	0x0800eddc
 8008bdc:	0800ee1c 	.word	0x0800ee1c
 8008be0:	0800ee70 	.word	0x0800ee70
 8008be4:	0800ee74 	.word	0x0800ee74

08008be8 <wtree_per>:

	dwt_per_stride(inp,N,wt->wave->lpd,wt->wave->hpd,wt->wave->lpd_len,cA,len_cA,cD,1,1);

}

static void wtree_per(wtree_object wt, double *inp, int N, double *cA, int len_cA, double *cD) {
 8008be8:	b480      	push	{r7}
 8008bea:	b08b      	sub	sp, #44	; 0x2c
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	603b      	str	r3, [r7, #0]
	int l, l2, isodd, i, t, len_avg;

	len_avg = wt->wave->lpd_len;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfc:	61fb      	str	r3, [r7, #28]
	l2 = len_avg / 2;
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	da00      	bge.n	8008c06 <wtree_per+0x1e>
 8008c04:	3301      	adds	r3, #1
 8008c06:	105b      	asrs	r3, r3, #1
 8008c08:	61bb      	str	r3, [r7, #24]
	isodd = N % 2;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	bfb8      	it	lt
 8008c14:	425b      	neglt	r3, r3
 8008c16:	617b      	str	r3, [r7, #20]

	for (i = 0; i < len_cA; ++i) {
 8008c18:	2300      	movs	r3, #0
 8008c1a:	623b      	str	r3, [r7, #32]
 8008c1c:	e28e      	b.n	800913c <wtree_per+0x554>
		t = 2 * i + l2;
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	4413      	add	r3, r2
 8008c26:	613b      	str	r3, [r7, #16]
		cA[i] = 0.0;
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	00db      	lsls	r3, r3, #3
 8008c2c:	683a      	ldr	r2, [r7, #0]
 8008c2e:	18d1      	adds	r1, r2, r3
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	e9c1 2300 	strd	r2, r3, [r1]
		cD[i] = 0.0;
 8008c3c:	6a3b      	ldr	r3, [r7, #32]
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c42:	18d1      	adds	r1, r2, r3
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	f04f 0300 	mov.w	r3, #0
 8008c4c:	e9c1 2300 	strd	r2, r3, [r1]
		for (l = 0; l < len_avg; ++l) {
 8008c50:	2300      	movs	r3, #0
 8008c52:	627b      	str	r3, [r7, #36]	; 0x24
 8008c54:	e26a      	b.n	800912c <wtree_per+0x544>
			if ((t - l) >= l2 && (t - l) < N) {
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	dc46      	bgt.n	8008cf0 <wtree_per+0x108>
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	dd40      	ble.n	8008cf0 <wtree_per+0x108>
				cA[i] += wt->wave->lpd[l] * inp[t - l];
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	4413      	add	r3, r2
 8008c76:	ed93 6b00 	vldr	d6, [r3]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	00db      	lsls	r3, r3, #3
 8008c84:	4413      	add	r3, r2
 8008c86:	ed93 5b00 	vldr	d5, [r3]
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	4413      	add	r3, r2
 8008c96:	ed93 7b00 	vldr	d7, [r3]
 8008c9a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008caa:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l];
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cb4:	4413      	add	r3, r2
 8008cb6:	ed93 6b00 	vldr	d6, [r3]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	00db      	lsls	r3, r3, #3
 8008cc4:	4413      	add	r3, r2
 8008cc6:	ed93 5b00 	vldr	d5, [r3]
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	ed93 7b00 	vldr	d7, [r3]
 8008cda:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008cde:	6a3b      	ldr	r3, [r7, #32]
 8008ce0:	00db      	lsls	r3, r3, #3
 8008ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ce4:	4413      	add	r3, r2
 8008ce6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008cea:	ed83 7b00 	vstr	d7, [r3]
 8008cee:	e21a      	b.n	8009126 <wtree_per+0x53e>
			}
			else if ((t - l) < l2 && (t - l) >= 0) {
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	dd45      	ble.n	8008d88 <wtree_per+0x1a0>
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	db40      	blt.n	8008d88 <wtree_per+0x1a0>
				cA[i] += wt->wave->lpd[l] * inp[t - l];
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	00db      	lsls	r3, r3, #3
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	ed93 6b00 	vldr	d6, [r3]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	4413      	add	r3, r2
 8008d1e:	ed93 5b00 	vldr	d5, [r3]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	00db      	lsls	r3, r3, #3
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	ed93 7b00 	vldr	d7, [r3]
 8008d32:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008d36:	6a3b      	ldr	r3, [r7, #32]
 8008d38:	00db      	lsls	r3, r3, #3
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008d42:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l];
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d4c:	4413      	add	r3, r2
 8008d4e:	ed93 6b00 	vldr	d6, [r3]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	00db      	lsls	r3, r3, #3
 8008d5c:	4413      	add	r3, r2
 8008d5e:	ed93 5b00 	vldr	d5, [r3]
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	ed93 7b00 	vldr	d7, [r3]
 8008d72:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d7c:	4413      	add	r3, r2
 8008d7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008d82:	ed83 7b00 	vstr	d7, [r3]
 8008d86:	e1ce      	b.n	8009126 <wtree_per+0x53e>
			}
			else if ((t - l) < 0 && isodd == 0) {
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	da47      	bge.n	8008e22 <wtree_per+0x23a>
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d144      	bne.n	8008e22 <wtree_per+0x23a>
				cA[i] += wt->wave->lpd[l] * inp[t - l + N];
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	4413      	add	r3, r2
 8008da0:	ed93 6b00 	vldr	d6, [r3]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	4413      	add	r3, r2
 8008db0:	ed93 5b00 	vldr	d5, [r3]
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	1ad2      	subs	r2, r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	00db      	lsls	r3, r3, #3
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	ed93 7b00 	vldr	d7, [r3]
 8008dc8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008dd8:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l + N];
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008de2:	4413      	add	r3, r2
 8008de4:	ed93 6b00 	vldr	d6, [r3]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df0:	00db      	lsls	r3, r3, #3
 8008df2:	4413      	add	r3, r2
 8008df4:	ed93 5b00 	vldr	d5, [r3]
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	1ad2      	subs	r2, r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4413      	add	r3, r2
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	4413      	add	r3, r2
 8008e08:	ed93 7b00 	vldr	d7, [r3]
 8008e0c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e16:	4413      	add	r3, r2
 8008e18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008e1c:	ed83 7b00 	vstr	d7, [r3]
 8008e20:	e181      	b.n	8009126 <wtree_per+0x53e>
			}
			else if ((t - l) < 0 && isodd == 1) {
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f280 8094 	bge.w	8008f56 <wtree_per+0x36e>
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	f040 8090 	bne.w	8008f56 <wtree_per+0x36e>
				if ((t - l) != -1) {
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e40:	d046      	beq.n	8008ed0 <wtree_per+0x2e8>
					cA[i] += wt->wave->lpd[l] * inp[t - l + N + 1];
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	00db      	lsls	r3, r3, #3
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	4413      	add	r3, r2
 8008e4a:	ed93 6b00 	vldr	d6, [r3]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	4413      	add	r3, r2
 8008e5a:	ed93 5b00 	vldr	d5, [r3]
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	1ad2      	subs	r2, r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4413      	add	r3, r2
 8008e68:	3301      	adds	r3, #1
 8008e6a:	00db      	lsls	r3, r3, #3
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	4413      	add	r3, r2
 8008e70:	ed93 7b00 	vldr	d7, [r3]
 8008e74:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	683a      	ldr	r2, [r7, #0]
 8008e7e:	4413      	add	r3, r2
 8008e80:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008e84:	ed83 7b00 	vstr	d7, [r3]
					cD[i] += wt->wave->hpd[l] * inp[t - l + N + 1];
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	00db      	lsls	r3, r3, #3
 8008e8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e8e:	4413      	add	r3, r2
 8008e90:	ed93 6b00 	vldr	d6, [r3]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	4413      	add	r3, r2
 8008ea0:	ed93 5b00 	vldr	d5, [r3]
 8008ea4:	693a      	ldr	r2, [r7, #16]
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	1ad2      	subs	r2, r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4413      	add	r3, r2
 8008eae:	3301      	adds	r3, #1
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	ed93 7b00 	vldr	d7, [r3]
 8008eba:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ec4:	4413      	add	r3, r2
 8008ec6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008eca:	ed83 7b00 	vstr	d7, [r3]
				if ((t - l) != -1) {
 8008ece:	e12a      	b.n	8009126 <wtree_per+0x53e>
				}
				else {
					cA[i] += wt->wave->lpd[l] * inp[N - 1];
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	ed93 6b00 	vldr	d6, [r3]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	00db      	lsls	r3, r3, #3
 8008ee6:	4413      	add	r3, r2
 8008ee8:	ed93 5b00 	vldr	d5, [r3]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8008ef2:	4413      	add	r3, r2
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	4413      	add	r3, r2
 8008efa:	ed93 7b00 	vldr	d7, [r3]
 8008efe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	4413      	add	r3, r2
 8008f0a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008f0e:	ed83 7b00 	vstr	d7, [r3]
					cD[i] += wt->wave->hpd[l] * inp[N - 1];
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	00db      	lsls	r3, r3, #3
 8008f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f18:	4413      	add	r3, r2
 8008f1a:	ed93 6b00 	vldr	d6, [r3]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	00db      	lsls	r3, r3, #3
 8008f28:	4413      	add	r3, r2
 8008f2a:	ed93 5b00 	vldr	d5, [r3]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8008f34:	4413      	add	r3, r2
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	ed93 7b00 	vldr	d7, [r3]
 8008f40:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	00db      	lsls	r3, r3, #3
 8008f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f4a:	4413      	add	r3, r2
 8008f4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008f50:	ed83 7b00 	vstr	d7, [r3]
				if ((t - l) != -1) {
 8008f54:	e0e7      	b.n	8009126 <wtree_per+0x53e>
				}
			}
			else if ((t - l) >= N && isodd == 0) {
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	dc47      	bgt.n	8008ff2 <wtree_per+0x40a>
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d144      	bne.n	8008ff2 <wtree_per+0x40a>
				cA[i] += wt->wave->lpd[l] * inp[t - l - N];
 8008f68:	6a3b      	ldr	r3, [r7, #32]
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	4413      	add	r3, r2
 8008f70:	ed93 6b00 	vldr	d6, [r3]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	4413      	add	r3, r2
 8008f80:	ed93 5b00 	vldr	d5, [r3]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	1ad2      	subs	r2, r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	00db      	lsls	r3, r3, #3
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	4413      	add	r3, r2
 8008f94:	ed93 7b00 	vldr	d7, [r3]
 8008f98:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008fa8:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l - N];
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fb2:	4413      	add	r3, r2
 8008fb4:	ed93 6b00 	vldr	d6, [r3]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	4413      	add	r3, r2
 8008fc4:	ed93 5b00 	vldr	d5, [r3]
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	1ad2      	subs	r2, r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	ed93 7b00 	vldr	d7, [r3]
 8008fdc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fe6:	4413      	add	r3, r2
 8008fe8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008fec:	ed83 7b00 	vstr	d7, [r3]
 8008ff0:	e099      	b.n	8009126 <wtree_per+0x53e>
			}
			else if ((t - l) >= N && isodd == 1) {
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	f300 8093 	bgt.w	8009126 <wtree_per+0x53e>
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	2b01      	cmp	r3, #1
 8009004:	f040 808f 	bne.w	8009126 <wtree_per+0x53e>
				if (t - l != N) {
 8009008:	693a      	ldr	r2, [r7, #16]
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	429a      	cmp	r2, r3
 8009012:	d046      	beq.n	80090a2 <wtree_per+0x4ba>
					cA[i] += wt->wave->lpd[l] * inp[t - l - (N + 1)];
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	4413      	add	r3, r2
 800901c:	ed93 6b00 	vldr	d6, [r3]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	00db      	lsls	r3, r3, #3
 800902a:	4413      	add	r3, r2
 800902c:	ed93 5b00 	vldr	d5, [r3]
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	1ad2      	subs	r2, r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3301      	adds	r3, #1
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	4413      	add	r3, r2
 8009042:	ed93 7b00 	vldr	d7, [r3]
 8009046:	ee25 7b07 	vmul.f64	d7, d5, d7
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	00db      	lsls	r3, r3, #3
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	4413      	add	r3, r2
 8009052:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009056:	ed83 7b00 	vstr	d7, [r3]
					cD[i] += wt->wave->hpd[l] * inp[t - l - (N + 1)];
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	00db      	lsls	r3, r3, #3
 800905e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009060:	4413      	add	r3, r2
 8009062:	ed93 6b00 	vldr	d6, [r3]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	4413      	add	r3, r2
 8009072:	ed93 5b00 	vldr	d5, [r3]
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	1ad2      	subs	r2, r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3301      	adds	r3, #1
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	4413      	add	r3, r2
 8009088:	ed93 7b00 	vldr	d7, [r3]
 800908c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009096:	4413      	add	r3, r2
 8009098:	ee36 7b07 	vadd.f64	d7, d6, d7
 800909c:	ed83 7b00 	vstr	d7, [r3]
 80090a0:	e041      	b.n	8009126 <wtree_per+0x53e>
				}
				else {
					cA[i] += wt->wave->lpd[l] * inp[N - 1];
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	00db      	lsls	r3, r3, #3
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	4413      	add	r3, r2
 80090aa:	ed93 6b00 	vldr	d6, [r3]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	00db      	lsls	r3, r3, #3
 80090b8:	4413      	add	r3, r2
 80090ba:	ed93 5b00 	vldr	d5, [r3]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80090c4:	4413      	add	r3, r2
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	4413      	add	r3, r2
 80090cc:	ed93 7b00 	vldr	d7, [r3]
 80090d0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	00db      	lsls	r3, r3, #3
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	4413      	add	r3, r2
 80090dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80090e0:	ed83 7b00 	vstr	d7, [r3]
					cD[i] += wt->wave->hpd[l] * inp[N - 1];
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	00db      	lsls	r3, r3, #3
 80090e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090ea:	4413      	add	r3, r2
 80090ec:	ed93 6b00 	vldr	d6, [r3]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f8:	00db      	lsls	r3, r3, #3
 80090fa:	4413      	add	r3, r2
 80090fc:	ed93 5b00 	vldr	d5, [r3]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009106:	4413      	add	r3, r2
 8009108:	00db      	lsls	r3, r3, #3
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	4413      	add	r3, r2
 800910e:	ed93 7b00 	vldr	d7, [r3]
 8009112:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	00db      	lsls	r3, r3, #3
 800911a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800911c:	4413      	add	r3, r2
 800911e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009122:	ed83 7b00 	vstr	d7, [r3]
		for (l = 0; l < len_avg; ++l) {
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	3301      	adds	r3, #1
 800912a:	627b      	str	r3, [r7, #36]	; 0x24
 800912c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	429a      	cmp	r2, r3
 8009132:	f6ff ad90 	blt.w	8008c56 <wtree_per+0x6e>
	for (i = 0; i < len_cA; ++i) {
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	3301      	adds	r3, #1
 800913a:	623b      	str	r3, [r7, #32]
 800913c:	6a3a      	ldr	r2, [r7, #32]
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	429a      	cmp	r2, r3
 8009142:	f6ff ad6c 	blt.w	8008c1e <wtree_per+0x36>
		}
	}



}
 8009146:	bf00      	nop
 8009148:	bf00      	nop
 800914a:	372c      	adds	r7, #44	; 0x2c
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <wtree_sym>:
static void dwt_sym(wt_object wt, double *inp, int N, double *cA, int len_cA, double *cD) {

	dwt_sym_stride(inp,N,wt->wave->lpd,wt->wave->hpd,wt->wave->lpd_len,cA,len_cA,cD,1,1);
}

static void wtree_sym(wtree_object wt, double *inp, int N, double *cA, int len_cA, double *cD) {
 8009154:	b480      	push	{r7}
 8009156:	b089      	sub	sp, #36	; 0x24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
	int i, l, t, len_avg;

	len_avg = wt->wave->lpd_len;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009168:	617b      	str	r3, [r7, #20]

	for (i = 0; i < len_cA; ++i) {
 800916a:	2300      	movs	r3, #0
 800916c:	61fb      	str	r3, [r7, #28]
 800916e:	e113      	b.n	8009398 <wtree_sym+0x244>
		t = 2 * i + 1;
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	3301      	adds	r3, #1
 8009176:	613b      	str	r3, [r7, #16]
		cA[i] = 0.0;
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	18d1      	adds	r1, r2, r3
 8009180:	f04f 0200 	mov.w	r2, #0
 8009184:	f04f 0300 	mov.w	r3, #0
 8009188:	e9c1 2300 	strd	r2, r3, [r1]
		cD[i] = 0.0;
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009192:	18d1      	adds	r1, r2, r3
 8009194:	f04f 0200 	mov.w	r2, #0
 8009198:	f04f 0300 	mov.w	r3, #0
 800919c:	e9c1 2300 	strd	r2, r3, [r1]
		for (l = 0; l < len_avg; ++l) {
 80091a0:	2300      	movs	r3, #0
 80091a2:	61bb      	str	r3, [r7, #24]
 80091a4:	e0f0      	b.n	8009388 <wtree_sym+0x234>
			if ((t - l) >= 0 && (t - l) < N) {
 80091a6:	693a      	ldr	r2, [r7, #16]
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	db46      	blt.n	800923e <wtree_sym+0xea>
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	dd40      	ble.n	800923e <wtree_sym+0xea>
				cA[i] += wt->wave->lpd[l] * inp[t - l];
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	00db      	lsls	r3, r3, #3
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	4413      	add	r3, r2
 80091c4:	ed93 6b00 	vldr	d6, [r3]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	00db      	lsls	r3, r3, #3
 80091d2:	4413      	add	r3, r2
 80091d4:	ed93 5b00 	vldr	d5, [r3]
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	4413      	add	r3, r2
 80091e4:	ed93 7b00 	vldr	d7, [r3]
 80091e8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	00db      	lsls	r3, r3, #3
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	4413      	add	r3, r2
 80091f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80091f8:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l];
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	00db      	lsls	r3, r3, #3
 8009200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009202:	4413      	add	r3, r2
 8009204:	ed93 6b00 	vldr	d6, [r3]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	00db      	lsls	r3, r3, #3
 8009212:	4413      	add	r3, r2
 8009214:	ed93 5b00 	vldr	d5, [r3]
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	00db      	lsls	r3, r3, #3
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	4413      	add	r3, r2
 8009224:	ed93 7b00 	vldr	d7, [r3]
 8009228:	ee25 7b07 	vmul.f64	d7, d5, d7
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009232:	4413      	add	r3, r2
 8009234:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009238:	ed83 7b00 	vstr	d7, [r3]
 800923c:	e0a1      	b.n	8009382 <wtree_sym+0x22e>
			}
			else if ((t - l) < 0) {
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	da48      	bge.n	80092da <wtree_sym+0x186>
				cA[i] += wt->wave->lpd[l] * inp[-t + l - 1];
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	00db      	lsls	r3, r3, #3
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	4413      	add	r3, r2
 8009250:	ed93 6b00 	vldr	d6, [r3]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	4413      	add	r3, r2
 8009260:	ed93 5b00 	vldr	d5, [r3]
 8009264:	69ba      	ldr	r2, [r7, #24]
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	461a      	mov	r2, r3
 800926c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009270:	4413      	add	r3, r2
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	4413      	add	r3, r2
 8009278:	ed93 7b00 	vldr	d7, [r3]
 800927c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	4413      	add	r3, r2
 8009288:	ee36 7b07 	vadd.f64	d7, d6, d7
 800928c:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[-t + l - 1];
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009296:	4413      	add	r3, r2
 8009298:	ed93 6b00 	vldr	d6, [r3]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	00db      	lsls	r3, r3, #3
 80092a6:	4413      	add	r3, r2
 80092a8:	ed93 5b00 	vldr	d5, [r3]
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	461a      	mov	r2, r3
 80092b4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80092b8:	4413      	add	r3, r2
 80092ba:	00db      	lsls	r3, r3, #3
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	4413      	add	r3, r2
 80092c0:	ed93 7b00 	vldr	d7, [r3]
 80092c4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092ce:	4413      	add	r3, r2
 80092d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80092d4:	ed83 7b00 	vstr	d7, [r3]
 80092d8:	e053      	b.n	8009382 <wtree_sym+0x22e>
			}
			else if ((t - l) >= N) {
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	dc4d      	bgt.n	8009382 <wtree_sym+0x22e>
				cA[i] += wt->wave->lpd[l] * inp[2 * N - t + l - 1];
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	00db      	lsls	r3, r3, #3
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	4413      	add	r3, r2
 80092ee:	ed93 6b00 	vldr	d6, [r3]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	4413      	add	r3, r2
 80092fe:	ed93 5b00 	vldr	d5, [r3]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	005a      	lsls	r2, r3, #1
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	1ad2      	subs	r2, r2, r3
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	4413      	add	r3, r2
 800930e:	461a      	mov	r2, r3
 8009310:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009314:	4413      	add	r3, r2
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	4413      	add	r3, r2
 800931c:	ed93 7b00 	vldr	d7, [r3]
 8009320:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	4413      	add	r3, r2
 800932c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009330:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[2 * N - t + l - 1];
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800933a:	4413      	add	r3, r2
 800933c:	ed93 6b00 	vldr	d6, [r3]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	00db      	lsls	r3, r3, #3
 800934a:	4413      	add	r3, r2
 800934c:	ed93 5b00 	vldr	d5, [r3]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	005a      	lsls	r2, r3, #1
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	1ad2      	subs	r2, r2, r3
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	4413      	add	r3, r2
 800935c:	461a      	mov	r2, r3
 800935e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009362:	4413      	add	r3, r2
 8009364:	00db      	lsls	r3, r3, #3
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	4413      	add	r3, r2
 800936a:	ed93 7b00 	vldr	d7, [r3]
 800936e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	00db      	lsls	r3, r3, #3
 8009376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009378:	4413      	add	r3, r2
 800937a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800937e:	ed83 7b00 	vstr	d7, [r3]
		for (l = 0; l < len_avg; ++l) {
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	3301      	adds	r3, #1
 8009386:	61bb      	str	r3, [r7, #24]
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	429a      	cmp	r2, r3
 800938e:	f6ff af0a 	blt.w	80091a6 <wtree_sym+0x52>
	for (i = 0; i < len_cA; ++i) {
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	3301      	adds	r3, #1
 8009396:	61fb      	str	r3, [r7, #28]
 8009398:	69fa      	ldr	r2, [r7, #28]
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	429a      	cmp	r2, r3
 800939e:	f6ff aee7 	blt.w	8009170 <wtree_sym+0x1c>

		}
	}


}
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
 80093a6:	3724      	adds	r7, #36	; 0x24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <wtree>:
	}
	
	return mra;
}

void wtree(wtree_object wt,const double *inp) {
 80093b0:	b590      	push	{r4, r7, lr}
 80093b2:	b095      	sub	sp, #84	; 0x54
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
	int i,J,temp_len,iter,N,lp,p2,k,N2,Np;
	int len_cA,t,t2,it1;
	double *orig;

	temp_len = wt->siglength;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	643b      	str	r3, [r7, #64]	; 0x40
	J = wt->J;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	61bb      	str	r3, [r7, #24]
	wt->length[J + 1] = temp_len;
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	3212      	adds	r2, #18
 80093ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	wt->outlength = 0;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	619a      	str	r2, [r3, #24]
	wt->zpad = 0;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	645a      	str	r2, [r3, #68]	; 0x44
	orig = (double*)malloc(sizeof(double)* temp_len);
 80093e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e2:	00db      	lsls	r3, r3, #3
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 fcff 	bl	8009de8 <malloc>
 80093ea:	4603      	mov	r3, r0
 80093ec:	617b      	str	r3, [r7, #20]
		wt->zpad = 1;
		temp_len++;
		orig = (double*)malloc(sizeof(double)* temp_len);
	}
	*/
	for (i = 0; i < wt->siglength; ++i) {
 80093ee:	2300      	movs	r3, #0
 80093f0:	647b      	str	r3, [r7, #68]	; 0x44
 80093f2:	e00e      	b.n	8009412 <wtree+0x62>
		orig[i] = inp[i];
 80093f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	4413      	add	r3, r2
 80093fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093fe:	00d2      	lsls	r2, r2, #3
 8009400:	6979      	ldr	r1, [r7, #20]
 8009402:	4411      	add	r1, r2
 8009404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009408:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < wt->siglength; ++i) {
 800940c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800940e:	3301      	adds	r3, #1
 8009410:	647b      	str	r3, [r7, #68]	; 0x44
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009418:	429a      	cmp	r2, r3
 800941a:	dbeb      	blt.n	80093f4 <wtree+0x44>
	}

	if (wt->zpad == 1) {
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009420:	2b01      	cmp	r3, #1
 8009422:	d110      	bne.n	8009446 <wtree+0x96>
		orig[temp_len - 1] = orig[temp_len - 2];
 8009424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009426:	4ba0      	ldr	r3, [pc, #640]	; (80096a8 <wtree+0x2f8>)
 8009428:	4413      	add	r3, r2
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	441a      	add	r2, r3
 8009430:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009432:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009436:	440b      	add	r3, r1
 8009438:	00db      	lsls	r3, r3, #3
 800943a:	6979      	ldr	r1, [r7, #20]
 800943c:	4419      	add	r1, r3
 800943e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009442:	e9c1 2300 	strd	r2, r3, [r1]
	}

	N = temp_len;
 8009446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009448:	63bb      	str	r3, [r7, #56]	; 0x38
	lp = wt->wave->lpd_len;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009450:	613b      	str	r3, [r7, #16]
        p2 = 1;
 8009452:	2301      	movs	r3, #1
 8009454:	637b      	str	r3, [r7, #52]	; 0x34

	if (!strcmp(wt->ext,"per")) {
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	332c      	adds	r3, #44	; 0x2c
 800945a:	4994      	ldr	r1, [pc, #592]	; (80096ac <wtree+0x2fc>)
 800945c:	4618      	mov	r0, r3
 800945e:	f7f6 feef 	bl	8000240 <strcmp>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	f040 80b7 	bne.w	80095d8 <wtree+0x228>
		i = J;
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	647b      	str	r3, [r7, #68]	; 0x44
                p2 = 2;
 800946e:	2302      	movs	r3, #2
 8009470:	637b      	str	r3, [r7, #52]	; 0x34
		while (i > 0) {
 8009472:	e02c      	b.n	80094ce <wtree+0x11e>
			N = (int)ceil((double)N / 2.0);
 8009474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800947e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009482:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8009486:	eeb0 0b46 	vmov.f64	d0, d6
 800948a:	f005 f9e9 	bl	800e860 <ceil>
 800948e:	eeb0 7b40 	vmov.f64	d7, d0
 8009492:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009496:	ee17 3a90 	vmov	r3, s15
 800949a:	63bb      	str	r3, [r7, #56]	; 0x38
			wt->length[i] = N;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094a0:	3212      	adds	r2, #18
 80094a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			wt->outlength += p2 * (wt->length[i]);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	699a      	ldr	r2, [r3, #24]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094b0:	3112      	adds	r1, #18
 80094b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80094b8:	fb01 f303 	mul.w	r3, r1, r3
 80094bc:	441a      	add	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	619a      	str	r2, [r3, #24]
			i--;
 80094c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094c4:	3b01      	subs	r3, #1
 80094c6:	647b      	str	r3, [r7, #68]	; 0x44
                        p2 *= 2;
 80094c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ca:	005b      	lsls	r3, r3, #1
 80094cc:	637b      	str	r3, [r7, #52]	; 0x34
		while (i > 0) {
 80094ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	dccf      	bgt.n	8009474 <wtree+0xc4>
		}
		wt->length[0] = wt->length[1];
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	649a      	str	r2, [r3, #72]	; 0x48

		N2 = N = wt->outlength;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                p2 = 1;
 80094e6:	2301      	movs	r3, #1
 80094e8:	637b      	str	r3, [r7, #52]	; 0x34
		for (iter = 0; iter < J; ++iter) {
 80094ea:	2300      	movs	r3, #0
 80094ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094ee:	e06e      	b.n	80095ce <wtree+0x21e>
			len_cA = wt->length[J - iter];
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f4:	1ad2      	subs	r2, r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	3212      	adds	r2, #18
 80094fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094fe:	60fb      	str	r3, [r7, #12]
                        N2 -= 2 * p2 * len_cA;
 8009500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	fb02 f303 	mul.w	r3, r2, r3
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        N = N2;
 8009510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009512:	63bb      	str	r3, [r7, #56]	; 0x38
                        for(k = 0; k < p2;++k) {
 8009514:	2300      	movs	r3, #0
 8009516:	633b      	str	r3, [r7, #48]	; 0x30
 8009518:	e045      	b.n	80095a6 <wtree+0x1f6>
                            if (iter == 0) {
 800951a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d117      	bne.n	8009550 <wtree+0x1a0>
                               wtree_per(wt, orig, temp_len, wt->params + N, len_cA, wt->params + N + len_cA);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 8009526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009528:	00db      	lsls	r3, r3, #3
 800952a:	18d0      	adds	r0, r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 8009532:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	440b      	add	r3, r1
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	4413      	add	r3, r2
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	4603      	mov	r3, r0
 8009544:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009546:	6979      	ldr	r1, [r7, #20]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7ff fb4d 	bl	8008be8 <wtree_per>
 800954e:	e022      	b.n	8009596 <wtree+0x1e6>
                            } else {
                                wtree_per(wt, wt->params + Np + k * temp_len, temp_len, wt->params + N, len_cA, wt->params + N + len_cA);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800955a:	fb01 f303 	mul.w	r3, r1, r3
 800955e:	4619      	mov	r1, r3
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	440b      	add	r3, r1
 8009564:	00db      	lsls	r3, r3, #3
 8009566:	18d0      	adds	r0, r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800956e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	18d4      	adds	r4, r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800957a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	440b      	add	r3, r1
 8009580:	00db      	lsls	r3, r3, #3
 8009582:	4413      	add	r3, r2
 8009584:	9301      	str	r3, [sp, #4]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	4623      	mov	r3, r4
 800958c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800958e:	4601      	mov	r1, r0
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff fb29 	bl	8008be8 <wtree_per>
                            }
                            N += 2 * len_cA;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	005b      	lsls	r3, r3, #1
 800959a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800959c:	4413      	add	r3, r2
 800959e:	63bb      	str	r3, [r7, #56]	; 0x38
                        for(k = 0; k < p2;++k) {
 80095a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a2:	3301      	adds	r3, #1
 80095a4:	633b      	str	r3, [r7, #48]	; 0x30
 80095a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095aa:	429a      	cmp	r2, r3
 80095ac:	dbb5      	blt.n	800951a <wtree+0x16a>
                        }

			temp_len = wt->length[J - iter];
 80095ae:	69ba      	ldr	r2, [r7, #24]
 80095b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b2:	1ad2      	subs	r2, r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3212      	adds	r2, #18
 80095b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095bc:	643b      	str	r3, [r7, #64]	; 0x40
			p2 = 2 * p2;
 80095be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c0:	005b      	lsls	r3, r3, #1
 80095c2:	637b      	str	r3, [r7, #52]	; 0x34
            Np = N2;
 80095c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c6:	62bb      	str	r3, [r7, #40]	; 0x28
		for (iter = 0; iter < J; ++iter) {
 80095c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ca:	3301      	adds	r3, #1
 80095cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	db8c      	blt.n	80094f0 <wtree+0x140>
 80095d6:	e0d3      	b.n	8009780 <wtree+0x3d0>
		}
	}
	else if (!strcmp(wt->ext,"sym")) {
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	332c      	adds	r3, #44	; 0x2c
 80095dc:	4934      	ldr	r1, [pc, #208]	; (80096b0 <wtree+0x300>)
 80095de:	4618      	mov	r0, r3
 80095e0:	f7f6 fe2e 	bl	8000240 <strcmp>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f040 80c3 	bne.w	8009772 <wtree+0x3c2>
		//printf(" \r\n YES %s  \r\n", wt->ext);
		i = J;
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	647b      	str	r3, [r7, #68]	; 0x44
                p2 = 2;
 80095f0:	2302      	movs	r3, #2
 80095f2:	637b      	str	r3, [r7, #52]	; 0x34
		while (i > 0) {
 80095f4:	e031      	b.n	800965a <wtree+0x2aa>
			N = N + lp - 2;
 80095f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	4413      	add	r3, r2
 80095fc:	3b02      	subs	r3, #2
 80095fe:	63bb      	str	r3, [r7, #56]	; 0x38
			N = (int) ceil((double)N / 2.0);
 8009600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009602:	ee07 3a90 	vmov	s15, r3
 8009606:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800960a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800960e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8009612:	eeb0 0b46 	vmov.f64	d0, d6
 8009616:	f005 f923 	bl	800e860 <ceil>
 800961a:	eeb0 7b40 	vmov.f64	d7, d0
 800961e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009622:	ee17 3a90 	vmov	r3, s15
 8009626:	63bb      	str	r3, [r7, #56]	; 0x38
			wt->length[i] = N;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800962c:	3212      	adds	r2, #18
 800962e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			wt->outlength += p2 * (wt->length[i]);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	699a      	ldr	r2, [r3, #24]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800963c:	3112      	adds	r1, #18
 800963e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009642:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009644:	fb01 f303 	mul.w	r3, r1, r3
 8009648:	441a      	add	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	619a      	str	r2, [r3, #24]
			i--;
 800964e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009650:	3b01      	subs	r3, #1
 8009652:	647b      	str	r3, [r7, #68]	; 0x44
                        p2 *= 2;
 8009654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009656:	005b      	lsls	r3, r3, #1
 8009658:	637b      	str	r3, [r7, #52]	; 0x34
		while (i > 0) {
 800965a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800965c:	2b00      	cmp	r3, #0
 800965e:	dcca      	bgt.n	80095f6 <wtree+0x246>
		}
		wt->length[0] = wt->length[1];
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	649a      	str	r2, [r3, #72]	; 0x48

		N2 = N = wt->outlength;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	63bb      	str	r3, [r7, #56]	; 0x38
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	62fb      	str	r3, [r7, #44]	; 0x2c
                p2 = 1;
 8009672:	2301      	movs	r3, #1
 8009674:	637b      	str	r3, [r7, #52]	; 0x34

                for (iter = 0; iter < J; ++iter) {
 8009676:	2300      	movs	r3, #0
 8009678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800967a:	e075      	b.n	8009768 <wtree+0x3b8>
			len_cA = wt->length[J - iter];
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009680:	1ad2      	subs	r2, r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	3212      	adds	r2, #18
 8009686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968a:	60fb      	str	r3, [r7, #12]
                        N2 -= 2 * p2 * len_cA;
 800968c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	fb02 f303 	mul.w	r3, r2, r3
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        N = N2;
 800969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969e:	63bb      	str	r3, [r7, #56]	; 0x38
                        for(k = 0; k < p2;++k) {
 80096a0:	2300      	movs	r3, #0
 80096a2:	633b      	str	r3, [r7, #48]	; 0x30
 80096a4:	e04c      	b.n	8009740 <wtree+0x390>
 80096a6:	bf00      	nop
 80096a8:	1ffffffe 	.word	0x1ffffffe
 80096ac:	0800eec0 	.word	0x0800eec0
 80096b0:	0800ee70 	.word	0x0800ee70
                            if (iter == 0) {
 80096b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d117      	bne.n	80096ea <wtree+0x33a>
                                wtree_sym(wt, orig, temp_len, wt->params + N, len_cA, wt->params + N + len_cA);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 80096c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c2:	00db      	lsls	r3, r3, #3
 80096c4:	18d0      	adds	r0, r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 80096cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	440b      	add	r3, r1
 80096d2:	00db      	lsls	r3, r3, #3
 80096d4:	4413      	add	r3, r2
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	4603      	mov	r3, r0
 80096de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096e0:	6979      	ldr	r1, [r7, #20]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7ff fd36 	bl	8009154 <wtree_sym>
 80096e8:	e022      	b.n	8009730 <wtree+0x380>
                            } else {
                                wtree_sym(wt, wt->params + Np + k * temp_len, temp_len, wt->params + N, len_cA, wt->params + N + len_cA);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 80096f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096f4:	fb01 f303 	mul.w	r3, r1, r3
 80096f8:	4619      	mov	r1, r3
 80096fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fc:	440b      	add	r3, r1
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	18d0      	adds	r0, r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 8009708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970a:	00db      	lsls	r3, r3, #3
 800970c:	18d4      	adds	r4, r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 8009714:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	440b      	add	r3, r1
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	4413      	add	r3, r2
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	4623      	mov	r3, r4
 8009726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009728:	4601      	mov	r1, r0
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7ff fd12 	bl	8009154 <wtree_sym>
                            }
                            N += 2 * len_cA;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	005b      	lsls	r3, r3, #1
 8009734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009736:	4413      	add	r3, r2
 8009738:	63bb      	str	r3, [r7, #56]	; 0x38
                        for(k = 0; k < p2;++k) {
 800973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973c:	3301      	adds	r3, #1
 800973e:	633b      	str	r3, [r7, #48]	; 0x30
 8009740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009744:	429a      	cmp	r2, r3
 8009746:	dbb5      	blt.n	80096b4 <wtree+0x304>
                        }

			temp_len = wt->length[J - iter];
 8009748:	69ba      	ldr	r2, [r7, #24]
 800974a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974c:	1ad2      	subs	r2, r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	3212      	adds	r2, #18
 8009752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009756:	643b      	str	r3, [r7, #64]	; 0x40
			p2 = 2 * p2;
 8009758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	637b      	str	r3, [r7, #52]	; 0x34
            Np = N2;
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	62bb      	str	r3, [r7, #40]	; 0x28
                for (iter = 0; iter < J; ++iter) {
 8009762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009764:	3301      	adds	r3, #1
 8009766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	429a      	cmp	r2, r3
 800976e:	db85      	blt.n	800967c <wtree+0x2cc>
 8009770:	e006      	b.n	8009780 <wtree+0x3d0>
		}

	}
	else {
		printf("Signal extension can be either per or sym");
 8009772:	483d      	ldr	r0, [pc, #244]	; (8009868 <wtree+0x4b8>)
 8009774:	f001 fb84 	bl	800ae80 <iprintf>
		exit(-1);
 8009778:	f04f 30ff 	mov.w	r0, #4294967295
 800977c:	f000 fb22 	bl	8009dc4 <exit>
	}

	J = wt->J;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a1b      	ldr	r3, [r3, #32]
 8009784:	61bb      	str	r3, [r7, #24]
	t2 = wt->outlength - 2 * wt->length[J];
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699a      	ldr	r2, [r3, #24]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	69b9      	ldr	r1, [r7, #24]
 800978e:	3112      	adds	r1, #18
 8009790:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	623b      	str	r3, [r7, #32]
	p2 = 2;
 800979a:	2302      	movs	r3, #2
 800979c:	637b      	str	r3, [r7, #52]	; 0x34
	it1 = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < J; ++i) {
 80097a2:	2300      	movs	r3, #0
 80097a4:	647b      	str	r3, [r7, #68]	; 0x44
 80097a6:	e034      	b.n	8009812 <wtree+0x462>
		t = t2;
 80097a8:	6a3b      	ldr	r3, [r7, #32]
 80097aa:	627b      	str	r3, [r7, #36]	; 0x24
		for (k = 0; k < p2; ++k) {
 80097ac:	2300      	movs	r3, #0
 80097ae:	633b      	str	r3, [r7, #48]	; 0x30
 80097b0:	e017      	b.n	80097e2 <wtree+0x432>
			wt->nodelength[it1] = t;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c0:	601a      	str	r2, [r3, #0]
			it1++;
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	3301      	adds	r3, #1
 80097c6:	61fb      	str	r3, [r7, #28]
			t += wt->length[J - i];
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097cc:	1ad2      	subs	r2, r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3212      	adds	r2, #18
 80097d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d8:	4413      	add	r3, r2
 80097da:	627b      	str	r3, [r7, #36]	; 0x24
		for (k = 0; k < p2; ++k) {
 80097dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097de:	3301      	adds	r3, #1
 80097e0:	633b      	str	r3, [r7, #48]	; 0x30
 80097e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e6:	429a      	cmp	r2, r3
 80097e8:	dbe3      	blt.n	80097b2 <wtree+0x402>
		}
		p2 *= 2;
 80097ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	637b      	str	r3, [r7, #52]	; 0x34
		t2 = t2 - p2 * wt->length[J - i - 1];
 80097f0:	69ba      	ldr	r2, [r7, #24]
 80097f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097f4:	1ad3      	subs	r3, r2, r3
 80097f6:	1e5a      	subs	r2, r3, #1
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	3212      	adds	r2, #18
 80097fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009802:	fb02 f303 	mul.w	r3, r2, r3
 8009806:	6a3a      	ldr	r2, [r7, #32]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	623b      	str	r3, [r7, #32]
	for (i = 0; i < J; ++i) {
 800980c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800980e:	3301      	adds	r3, #1
 8009810:	647b      	str	r3, [r7, #68]	; 0x44
 8009812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	429a      	cmp	r2, r3
 8009818:	dbc6      	blt.n	80097a8 <wtree+0x3f8>
	}

	wt->coeflength[0] = wt->siglength;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	6952      	ldr	r2, [r2, #20]
 8009824:	601a      	str	r2, [r3, #0]

	for (i = 1; i < J + 1; ++i) {
 8009826:	2301      	movs	r3, #1
 8009828:	647b      	str	r3, [r7, #68]	; 0x44
 800982a:	e011      	b.n	8009850 <wtree+0x4a0>
		wt->coeflength[i] = wt->length[J - i + 1];
 800982c:	69ba      	ldr	r2, [r7, #24]
 800982e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	1c59      	adds	r1, r3, #1
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 800983a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	3112      	adds	r1, #18
 8009844:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009848:	601a      	str	r2, [r3, #0]
	for (i = 1; i < J + 1; ++i) {
 800984a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800984c:	3301      	adds	r3, #1
 800984e:	647b      	str	r3, [r7, #68]	; 0x44
 8009850:	69ba      	ldr	r2, [r7, #24]
 8009852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009854:	429a      	cmp	r2, r3
 8009856:	dae9      	bge.n	800982c <wtree+0x47c>
	}

	free(orig);
 8009858:	6978      	ldr	r0, [r7, #20]
 800985a:	f000 facd 	bl	8009df8 <free>
}
 800985e:	bf00      	nop
 8009860:	374c      	adds	r7, #76	; 0x4c
 8009862:	46bd      	mov	sp, r7
 8009864:	bd90      	pop	{r4, r7, pc}
 8009866:	bf00      	nop
 8009868:	0800f0e0 	.word	0x0800f0e0

0800986c <getWTREENodelength>:
	free(orig);
	free(tree);
	free(nodelength);
}

int getWTREENodelength(wtree_object wt, int X) {
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
	int N;
	N = -1;
 8009876:	f04f 33ff 	mov.w	r3, #4294967295
 800987a:	60fb      	str	r3, [r7, #12]
	/*
	X - Level. All Nodes at any level have the same length
	*/
	if (X <= 0 || X > wt->J) {
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	dd04      	ble.n	800988c <getWTREENodelength+0x20>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	429a      	cmp	r2, r3
 800988a:	dd09      	ble.n	80098a0 <getWTREENodelength+0x34>
		printf("X co-ordinate must be >= 1 and <= %d", wt->J);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	4619      	mov	r1, r3
 8009892:	480b      	ldr	r0, [pc, #44]	; (80098c0 <getWTREENodelength+0x54>)
 8009894:	f001 faf4 	bl	800ae80 <iprintf>
		exit(-1);
 8009898:	f04f 30ff 	mov.w	r0, #4294967295
 800989c:	f000 fa92 	bl	8009dc4 <exit>
	}

	N = wt->length[wt->J -X + 1];
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a1a      	ldr	r2, [r3, #32]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	1c5a      	adds	r2, r3, #1
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	3212      	adds	r2, #18
 80098ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b2:	60fb      	str	r3, [r7, #12]

	return N;
 80098b4:	68fb      	ldr	r3, [r7, #12]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	0800f118 	.word	0x0800f118

080098c4 <getWTREECoeffs>:
	N = wt->length[wt->J - X + 1];

	return N;
}

void getWTREECoeffs(wtree_object wt, int X,int Y,double *coeffs,int N) {
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	603b      	str	r3, [r7, #0]
	int ymax,i,t,t2;

	if (X <= 0 || X > wt->J) {
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	dd04      	ble.n	80098e2 <getWTREECoeffs+0x1e>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	429a      	cmp	r2, r3
 80098e0:	dd09      	ble.n	80098f6 <getWTREECoeffs+0x32>
		printf("X co-ordinate must be >= 1 and <= %d", wt->J);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	4619      	mov	r1, r3
 80098e8:	4837      	ldr	r0, [pc, #220]	; (80099c8 <getWTREECoeffs+0x104>)
 80098ea:	f001 fac9 	bl	800ae80 <iprintf>
		exit(-1);
 80098ee:	f04f 30ff 	mov.w	r0, #4294967295
 80098f2:	f000 fa67 	bl	8009dc4 <exit>
	}
	ymax = 1;
 80098f6:	2301      	movs	r3, #1
 80098f8:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < X; ++i) {
 80098fa:	2300      	movs	r3, #0
 80098fc:	61bb      	str	r3, [r7, #24]
 80098fe:	e005      	b.n	800990c <getWTREECoeffs+0x48>
		ymax *= 2;
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	005b      	lsls	r3, r3, #1
 8009904:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < X; ++i) {
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	3301      	adds	r3, #1
 800990a:	61bb      	str	r3, [r7, #24]
 800990c:	69ba      	ldr	r2, [r7, #24]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	429a      	cmp	r2, r3
 8009912:	dbf5      	blt.n	8009900 <getWTREECoeffs+0x3c>
	}

	ymax -= 1;
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	3b01      	subs	r3, #1
 8009918:	61fb      	str	r3, [r7, #28]

	if (Y < 0 ||Y > ymax) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	db03      	blt.n	8009928 <getWTREECoeffs+0x64>
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	429a      	cmp	r2, r3
 8009926:	dd07      	ble.n	8009938 <getWTREECoeffs+0x74>
		printf("Y co-ordinate must be >= 0 and <= %d", ymax);
 8009928:	69f9      	ldr	r1, [r7, #28]
 800992a:	4828      	ldr	r0, [pc, #160]	; (80099cc <getWTREECoeffs+0x108>)
 800992c:	f001 faa8 	bl	800ae80 <iprintf>
		exit(-1);
 8009930:	f04f 30ff 	mov.w	r0, #4294967295
 8009934:	f000 fa46 	bl	8009dc4 <exit>
	}

	if (X == 1) {
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d102      	bne.n	8009944 <getWTREECoeffs+0x80>
		t = 0;
 800993e:	2300      	movs	r3, #0
 8009940:	617b      	str	r3, [r7, #20]
 8009942:	e015      	b.n	8009970 <getWTREECoeffs+0xac>
	}
	else {
		t = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	617b      	str	r3, [r7, #20]
		t2 = 1;
 8009948:	2301      	movs	r3, #1
 800994a:	613b      	str	r3, [r7, #16]
		for (i = 0; i < X - 1; ++i) {
 800994c:	2300      	movs	r3, #0
 800994e:	61bb      	str	r3, [r7, #24]
 8009950:	e009      	b.n	8009966 <getWTREECoeffs+0xa2>
			t2 *= 2;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	005b      	lsls	r3, r3, #1
 8009956:	613b      	str	r3, [r7, #16]
			t += t2;
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	4413      	add	r3, r2
 800995e:	617b      	str	r3, [r7, #20]
		for (i = 0; i < X - 1; ++i) {
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	3301      	adds	r3, #1
 8009964:	61bb      	str	r3, [r7, #24]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	3b01      	subs	r3, #1
 800996a:	69ba      	ldr	r2, [r7, #24]
 800996c:	429a      	cmp	r2, r3
 800996e:	dbf0      	blt.n	8009952 <getWTREECoeffs+0x8e>
		}
	}

	t += Y;
 8009970:	697a      	ldr	r2, [r7, #20]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4413      	add	r3, r2
 8009976:	617b      	str	r3, [r7, #20]
	t2 = wt->nodelength[t];
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	613b      	str	r3, [r7, #16]
	for (i = 0; i < N; ++i) {
 8009988:	2300      	movs	r3, #0
 800998a:	61bb      	str	r3, [r7, #24]
 800998c:	e012      	b.n	80099b4 <getWTREECoeffs+0xf0>
		coeffs[i] = wt->output[t2+i];
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8009994:	6939      	ldr	r1, [r7, #16]
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	440b      	add	r3, r1
 800999a:	00db      	lsls	r3, r3, #3
 800999c:	4413      	add	r3, r2
 800999e:	69ba      	ldr	r2, [r7, #24]
 80099a0:	00d2      	lsls	r2, r2, #3
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	4411      	add	r1, r2
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < N; ++i) {
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	3301      	adds	r3, #1
 80099b2:	61bb      	str	r3, [r7, #24]
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b8:	429a      	cmp	r2, r3
 80099ba:	dbe8      	blt.n	800998e <getWTREECoeffs+0xca>
	}

}
 80099bc:	bf00      	nop
 80099be:	bf00      	nop
 80099c0:	3720      	adds	r7, #32
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	0800f118 	.word	0x0800f118
 80099cc:	0800f140 	.word	0x0800f140

080099d0 <setWTREEExtension>:
		printf("Signal extension can be either per or sym");
		exit(-1);
	}
}

void setWTREEExtension(wtree_object wt, const char *extension) {
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
	if (!strcmp(extension, "sym")) {
 80099da:	4912      	ldr	r1, [pc, #72]	; (8009a24 <setWTREEExtension+0x54>)
 80099dc:	6838      	ldr	r0, [r7, #0]
 80099de:	f7f6 fc2f 	bl	8000240 <strcmp>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d105      	bne.n	80099f4 <setWTREEExtension+0x24>
		strcpy(wt->ext, "sym");
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	332c      	adds	r3, #44	; 0x2c
 80099ec:	4a0d      	ldr	r2, [pc, #52]	; (8009a24 <setWTREEExtension+0x54>)
 80099ee:	6810      	ldr	r0, [r2, #0]
 80099f0:	6018      	str	r0, [r3, #0]
	}
	else {
		printf("Signal extension can be either per or sym");
		exit(-1);
	}
}
 80099f2:	e013      	b.n	8009a1c <setWTREEExtension+0x4c>
	else if (!strcmp(extension, "per")) {
 80099f4:	490c      	ldr	r1, [pc, #48]	; (8009a28 <setWTREEExtension+0x58>)
 80099f6:	6838      	ldr	r0, [r7, #0]
 80099f8:	f7f6 fc22 	bl	8000240 <strcmp>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d105      	bne.n	8009a0e <setWTREEExtension+0x3e>
		strcpy(wt->ext, "per");
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	332c      	adds	r3, #44	; 0x2c
 8009a06:	4a08      	ldr	r2, [pc, #32]	; (8009a28 <setWTREEExtension+0x58>)
 8009a08:	6810      	ldr	r0, [r2, #0]
 8009a0a:	6018      	str	r0, [r3, #0]
}
 8009a0c:	e006      	b.n	8009a1c <setWTREEExtension+0x4c>
		printf("Signal extension can be either per or sym");
 8009a0e:	4807      	ldr	r0, [pc, #28]	; (8009a2c <setWTREEExtension+0x5c>)
 8009a10:	f001 fa36 	bl	800ae80 <iprintf>
		exit(-1);
 8009a14:	f04f 30ff 	mov.w	r0, #4294967295
 8009a18:	f000 f9d4 	bl	8009dc4 <exit>
}
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	0800ee70 	.word	0x0800ee70
 8009a28:	0800eec0 	.word	0x0800eec0
 8009a2c:	0800f0e0 	.word	0x0800f0e0

08009a30 <wave_summary>:
		}
		printf(":R%d  \r\n", i);
	}
}

void wave_summary(wave_object obj) {
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
	int i,N;
	N = obj->filtlength;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3c:	60bb      	str	r3, [r7, #8]
	printf(" \r\n");
 8009a3e:	4859      	ldr	r0, [pc, #356]	; (8009ba4 <wave_summary+0x174>)
 8009a40:	f001 fa84 	bl	800af4c <puts>
	printf("Wavelet Name : %s  \r\n",obj->wname);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4619      	mov	r1, r3
 8009a48:	4857      	ldr	r0, [pc, #348]	; (8009ba8 <wave_summary+0x178>)
 8009a4a:	f001 fa19 	bl	800ae80 <iprintf>
	printf(" \r\n");
 8009a4e:	4855      	ldr	r0, [pc, #340]	; (8009ba4 <wave_summary+0x174>)
 8009a50:	f001 fa7c 	bl	800af4c <puts>
	printf("Wavelet Filters  \r\n \r\n");
 8009a54:	4855      	ldr	r0, [pc, #340]	; (8009bac <wave_summary+0x17c>)
 8009a56:	f001 fa79 	bl	800af4c <puts>
	printf("lpd : [");
 8009a5a:	4855      	ldr	r0, [pc, #340]	; (8009bb0 <wave_summary+0x180>)
 8009a5c:	f001 fa10 	bl	800ae80 <iprintf>
	for (i = 0; i < N-1; ++i) {
 8009a60:	2300      	movs	r3, #0
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	e00c      	b.n	8009a80 <wave_summary+0x50>
		printf("%g,", obj->lpd[i]);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	00db      	lsls	r3, r3, #3
 8009a6e:	4413      	add	r3, r2
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	484f      	ldr	r0, [pc, #316]	; (8009bb4 <wave_summary+0x184>)
 8009a76:	f001 fa03 	bl	800ae80 <iprintf>
	for (i = 0; i < N-1; ++i) {
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	60fb      	str	r3, [r7, #12]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	dbed      	blt.n	8009a66 <wave_summary+0x36>
	}
	printf("%g", obj->lpd[N-1]);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009a94:	440b      	add	r3, r1
 8009a96:	00db      	lsls	r3, r3, #3
 8009a98:	4413      	add	r3, r2
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	4846      	ldr	r0, [pc, #280]	; (8009bb8 <wave_summary+0x188>)
 8009aa0:	f001 f9ee 	bl	800ae80 <iprintf>
	printf("]  \r\n \r\n");
 8009aa4:	4845      	ldr	r0, [pc, #276]	; (8009bbc <wave_summary+0x18c>)
 8009aa6:	f001 fa51 	bl	800af4c <puts>
	printf("hpd : [");
 8009aaa:	4845      	ldr	r0, [pc, #276]	; (8009bc0 <wave_summary+0x190>)
 8009aac:	f001 f9e8 	bl	800ae80 <iprintf>
	for (i = 0; i < N-1; ++i) {
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	e00c      	b.n	8009ad0 <wave_summary+0xa0>
		printf("%g,", obj->hpd[i]);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	4413      	add	r3, r2
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	483b      	ldr	r0, [pc, #236]	; (8009bb4 <wave_summary+0x184>)
 8009ac6:	f001 f9db 	bl	800ae80 <iprintf>
	for (i = 0; i < N-1; ++i) {
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3301      	adds	r3, #1
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	dbed      	blt.n	8009ab6 <wave_summary+0x86>
	}
	printf("%g", obj->hpd[N - 1]);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ade:	68b9      	ldr	r1, [r7, #8]
 8009ae0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009ae4:	440b      	add	r3, r1
 8009ae6:	00db      	lsls	r3, r3, #3
 8009ae8:	4413      	add	r3, r2
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	4832      	ldr	r0, [pc, #200]	; (8009bb8 <wave_summary+0x188>)
 8009af0:	f001 f9c6 	bl	800ae80 <iprintf>
	printf("]  \r\n \r\n");
 8009af4:	4831      	ldr	r0, [pc, #196]	; (8009bbc <wave_summary+0x18c>)
 8009af6:	f001 fa29 	bl	800af4c <puts>
	printf("lpr : [");
 8009afa:	4832      	ldr	r0, [pc, #200]	; (8009bc4 <wave_summary+0x194>)
 8009afc:	f001 f9c0 	bl	800ae80 <iprintf>
	for (i = 0; i < N-1; ++i) {
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	e00c      	b.n	8009b20 <wave_summary+0xf0>
		printf("%g,", obj->lpr[i]);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	00db      	lsls	r3, r3, #3
 8009b0e:	4413      	add	r3, r2
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	4827      	ldr	r0, [pc, #156]	; (8009bb4 <wave_summary+0x184>)
 8009b16:	f001 f9b3 	bl	800ae80 <iprintf>
	for (i = 0; i < N-1; ++i) {
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	dbed      	blt.n	8009b06 <wave_summary+0xd6>
	}
	printf("%g", obj->lpr[N - 1]);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b2e:	68b9      	ldr	r1, [r7, #8]
 8009b30:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009b34:	440b      	add	r3, r1
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	4413      	add	r3, r2
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	481e      	ldr	r0, [pc, #120]	; (8009bb8 <wave_summary+0x188>)
 8009b40:	f001 f99e 	bl	800ae80 <iprintf>
	printf("]  \r\n \r\n");
 8009b44:	481d      	ldr	r0, [pc, #116]	; (8009bbc <wave_summary+0x18c>)
 8009b46:	f001 fa01 	bl	800af4c <puts>
	printf("hpr : [");
 8009b4a:	481f      	ldr	r0, [pc, #124]	; (8009bc8 <wave_summary+0x198>)
 8009b4c:	f001 f998 	bl	800ae80 <iprintf>
	for (i = 0; i < N-1; ++i) {
 8009b50:	2300      	movs	r3, #0
 8009b52:	60fb      	str	r3, [r7, #12]
 8009b54:	e00c      	b.n	8009b70 <wave_summary+0x140>
		printf("%g,", obj->hpr[i]);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	4413      	add	r3, r2
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	4813      	ldr	r0, [pc, #76]	; (8009bb4 <wave_summary+0x184>)
 8009b66:	f001 f98b 	bl	800ae80 <iprintf>
	for (i = 0; i < N-1; ++i) {
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	3b01      	subs	r3, #1
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	dbed      	blt.n	8009b56 <wave_summary+0x126>
	}
	printf("%g", obj->hpr[N - 1]);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b7e:	68b9      	ldr	r1, [r7, #8]
 8009b80:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009b84:	440b      	add	r3, r1
 8009b86:	00db      	lsls	r3, r3, #3
 8009b88:	4413      	add	r3, r2
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	480a      	ldr	r0, [pc, #40]	; (8009bb8 <wave_summary+0x188>)
 8009b90:	f001 f976 	bl	800ae80 <iprintf>
	printf("]  \r\n \r\n");
 8009b94:	4809      	ldr	r0, [pc, #36]	; (8009bbc <wave_summary+0x18c>)
 8009b96:	f001 f9d9 	bl	800af4c <puts>
}
 8009b9a:	bf00      	nop
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	0800f554 	.word	0x0800f554
 8009ba8:	0800f558 	.word	0x0800f558
 8009bac:	0800f570 	.word	0x0800f570
 8009bb0:	0800f588 	.word	0x0800f588
 8009bb4:	0800f590 	.word	0x0800f590
 8009bb8:	0800f594 	.word	0x0800f594
 8009bbc:	0800f598 	.word	0x0800f598
 8009bc0:	0800f5a0 	.word	0x0800f5a0
 8009bc4:	0800f5a8 	.word	0x0800f5a8
 8009bc8:	0800f5b0 	.word	0x0800f5b0

08009bcc <wtree_summary>:
	}
	printf(" \r\n");

}

void wtree_summary(wtree_object wt) {
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08a      	sub	sp, #40	; 0x28
 8009bd0:	af02      	add	r7, sp, #8
 8009bd2:	6078      	str	r0, [r7, #4]
	int i,k,p2;
	int J,t;
	J = wt->J;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a1b      	ldr	r3, [r3, #32]
 8009bd8:	60fb      	str	r3, [r7, #12]
	wave_summary(wt->wave);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7ff ff26 	bl	8009a30 <wave_summary>
	printf(" \r\n");
 8009be4:	483a      	ldr	r0, [pc, #232]	; (8009cd0 <wtree_summary+0x104>)
 8009be6:	f001 f9b1 	bl	800af4c <puts>
	printf("Wavelet Transform : %s  \r\n", wt->method);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	3308      	adds	r3, #8
 8009bee:	4619      	mov	r1, r3
 8009bf0:	4838      	ldr	r0, [pc, #224]	; (8009cd4 <wtree_summary+0x108>)
 8009bf2:	f001 f945 	bl	800ae80 <iprintf>
	printf(" \r\n");
 8009bf6:	4836      	ldr	r0, [pc, #216]	; (8009cd0 <wtree_summary+0x104>)
 8009bf8:	f001 f9a8 	bl	800af4c <puts>
	printf("Signal Extension : %s  \r\n", wt->ext);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	332c      	adds	r3, #44	; 0x2c
 8009c00:	4619      	mov	r1, r3
 8009c02:	4835      	ldr	r0, [pc, #212]	; (8009cd8 <wtree_summary+0x10c>)
 8009c04:	f001 f93c 	bl	800ae80 <iprintf>
	printf(" \r\n");
 8009c08:	4831      	ldr	r0, [pc, #196]	; (8009cd0 <wtree_summary+0x104>)
 8009c0a:	f001 f99f 	bl	800af4c <puts>
	printf("Number of Decomposition Levels %d  \r\n", wt->J);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	4619      	mov	r1, r3
 8009c14:	4831      	ldr	r0, [pc, #196]	; (8009cdc <wtree_summary+0x110>)
 8009c16:	f001 f933 	bl	800ae80 <iprintf>
	printf(" \r\n");
 8009c1a:	482d      	ldr	r0, [pc, #180]	; (8009cd0 <wtree_summary+0x104>)
 8009c1c:	f001 f996 	bl	800af4c <puts>
	printf("Length of Input Signal %d  \r\n", wt->siglength);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	4619      	mov	r1, r3
 8009c26:	482e      	ldr	r0, [pc, #184]	; (8009ce0 <wtree_summary+0x114>)
 8009c28:	f001 f92a 	bl	800ae80 <iprintf>
	printf(" \r\n");
 8009c2c:	4828      	ldr	r0, [pc, #160]	; (8009cd0 <wtree_summary+0x104>)
 8009c2e:	f001 f98d 	bl	800af4c <puts>
	printf("Length of WT Output Vector %d  \r\n", wt->outlength);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	4619      	mov	r1, r3
 8009c38:	482a      	ldr	r0, [pc, #168]	; (8009ce4 <wtree_summary+0x118>)
 8009c3a:	f001 f921 	bl	800ae80 <iprintf>
	printf(" \r\n");
 8009c3e:	4824      	ldr	r0, [pc, #144]	; (8009cd0 <wtree_summary+0x104>)
 8009c40:	f001 f984 	bl	800af4c <puts>
	printf("Wavelet Coefficients are contained in vector : %s  \r\n", "output");
 8009c44:	4928      	ldr	r1, [pc, #160]	; (8009ce8 <wtree_summary+0x11c>)
 8009c46:	4829      	ldr	r0, [pc, #164]	; (8009cec <wtree_summary+0x120>)
 8009c48:	f001 f91a 	bl	800ae80 <iprintf>
	printf(" \r\n");
 8009c4c:	4820      	ldr	r0, [pc, #128]	; (8009cd0 <wtree_summary+0x104>)
 8009c4e:	f001 f97d 	bl	800af4c <puts>
	printf("Coefficients Access  \r\n");
 8009c52:	4827      	ldr	r0, [pc, #156]	; (8009cf0 <wtree_summary+0x124>)
 8009c54:	f001 f97a 	bl	800af4c <puts>
	t = 0;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	613b      	str	r3, [r7, #16]
	p2 = 2;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	617b      	str	r3, [r7, #20]
	for (i = 0; i < J; ++i) {
 8009c60:	2300      	movs	r3, #0
 8009c62:	61fb      	str	r3, [r7, #28]
 8009c64:	e028      	b.n	8009cb8 <wtree_summary+0xec>
		for (k = 0; k < p2; ++k) {
 8009c66:	2300      	movs	r3, #0
 8009c68:	61bb      	str	r3, [r7, #24]
 8009c6a:	e01b      	b.n	8009ca4 <wtree_summary+0xd8>
			printf("Node %d %d Access : output[%d] Length : %d  \r\n", i + 1, k, wt->nodelength[t], wt->length[J - i]);
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	1c59      	adds	r1, r3, #1
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	6818      	ldr	r0, [r3, #0]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	1ad2      	subs	r2, r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3212      	adds	r2, #18
 8009c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	4603      	mov	r3, r0
 8009c90:	69ba      	ldr	r2, [r7, #24]
 8009c92:	4818      	ldr	r0, [pc, #96]	; (8009cf4 <wtree_summary+0x128>)
 8009c94:	f001 f8f4 	bl	800ae80 <iprintf>
			t++;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	613b      	str	r3, [r7, #16]
		for (k = 0; k < p2; ++k) {
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	61bb      	str	r3, [r7, #24]
 8009ca4:	69ba      	ldr	r2, [r7, #24]
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	dbdf      	blt.n	8009c6c <wtree_summary+0xa0>
		}
		p2 *= 2;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	005b      	lsls	r3, r3, #1
 8009cb0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < J; ++i) {
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	61fb      	str	r3, [r7, #28]
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	dbd2      	blt.n	8009c66 <wtree_summary+0x9a>
	}
	printf(" \r\n");
 8009cc0:	4803      	ldr	r0, [pc, #12]	; (8009cd0 <wtree_summary+0x104>)
 8009cc2:	f001 f943 	bl	800af4c <puts>

}
 8009cc6:	bf00      	nop
 8009cc8:	3720      	adds	r7, #32
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	0800f554 	.word	0x0800f554
 8009cd4:	0800f5b8 	.word	0x0800f5b8
 8009cd8:	0800f5d4 	.word	0x0800f5d4
 8009cdc:	0800f610 	.word	0x0800f610
 8009ce0:	0800f638 	.word	0x0800f638
 8009ce4:	0800f658 	.word	0x0800f658
 8009ce8:	0800f67c 	.word	0x0800f67c
 8009cec:	0800f684 	.word	0x0800f684
 8009cf0:	0800f724 	.word	0x0800f724
 8009cf4:	0800f73c 	.word	0x0800f73c

08009cf8 <wave_free>:
		printf("Diagonal Coefficients access at wt->coeffaccess[%d]=%d, Vector size:%d  \r\n \r\n", t, wt->coeffaccess[t], vsize);
	}

}

void wave_free(wave_object object) {
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	free(object);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f879 	bl	8009df8 <free>
}
 8009d06:	bf00      	nop
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <wtree_free>:

void wt_free(wt_object object) {
	free(object);
}

void wtree_free(wtree_object object) {
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
	free(object);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f86e 	bl	8009df8 <free>
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	0000      	movs	r0, r0
	...

08009d28 <wmaxiter>:

	return ret;

}

int wmaxiter(int sig_len, int filt_len) {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
	int lev;
	double temp;

	temp = log((double)sig_len / ((double)filt_len - 1.0)) / log(2.0);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	ee07 3a90 	vmov	s15, r3
 8009d38:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	ee07 3a90 	vmov	s15, r3
 8009d42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009d46:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8009d4a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009d4e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8009d52:	eeb0 0b45 	vmov.f64	d0, d5
 8009d56:	f004 fc8b 	bl	800e670 <log>
 8009d5a:	eeb0 6b40 	vmov.f64	d6, d0
 8009d5e:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8009d88 <wmaxiter+0x60>
 8009d62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009d66:	ed87 7b04 	vstr	d7, [r7, #16]
	lev = (int)temp;
 8009d6a:	ed97 7b04 	vldr	d7, [r7, #16]
 8009d6e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009d72:	ee17 3a90 	vmov	r3, s15
 8009d76:	60fb      	str	r3, [r7, #12]

	return lev;
 8009d78:	68fb      	ldr	r3, [r7, #12]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	f3af 8000 	nop.w
 8009d88:	fefa39ef 	.word	0xfefa39ef
 8009d8c:	3fe62e42 	.word	0x3fe62e42

08009d90 <atoi>:
 8009d90:	220a      	movs	r2, #10
 8009d92:	2100      	movs	r1, #0
 8009d94:	f000 b968 	b.w	800a068 <strtol>

08009d98 <_calloc_r>:
 8009d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d9a:	fba1 2402 	umull	r2, r4, r1, r2
 8009d9e:	b94c      	cbnz	r4, 8009db4 <_calloc_r+0x1c>
 8009da0:	4611      	mov	r1, r2
 8009da2:	9201      	str	r2, [sp, #4]
 8009da4:	f000 f850 	bl	8009e48 <_malloc_r>
 8009da8:	9a01      	ldr	r2, [sp, #4]
 8009daa:	4605      	mov	r5, r0
 8009dac:	b930      	cbnz	r0, 8009dbc <_calloc_r+0x24>
 8009dae:	4628      	mov	r0, r5
 8009db0:	b003      	add	sp, #12
 8009db2:	bd30      	pop	{r4, r5, pc}
 8009db4:	220c      	movs	r2, #12
 8009db6:	6002      	str	r2, [r0, #0]
 8009db8:	2500      	movs	r5, #0
 8009dba:	e7f8      	b.n	8009dae <_calloc_r+0x16>
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	f001 fa73 	bl	800b2a8 <memset>
 8009dc2:	e7f4      	b.n	8009dae <_calloc_r+0x16>

08009dc4 <exit>:
 8009dc4:	b508      	push	{r3, lr}
 8009dc6:	4b06      	ldr	r3, [pc, #24]	; (8009de0 <exit+0x1c>)
 8009dc8:	4604      	mov	r4, r0
 8009dca:	b113      	cbz	r3, 8009dd2 <exit+0xe>
 8009dcc:	2100      	movs	r1, #0
 8009dce:	f3af 8000 	nop.w
 8009dd2:	4b04      	ldr	r3, [pc, #16]	; (8009de4 <exit+0x20>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	b103      	cbz	r3, 8009dda <exit+0x16>
 8009dd8:	4798      	blx	r3
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f004 fdc8 	bl	800e970 <_exit>
 8009de0:	00000000 	.word	0x00000000
 8009de4:	200032c4 	.word	0x200032c4

08009de8 <malloc>:
 8009de8:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <malloc+0xc>)
 8009dea:	4601      	mov	r1, r0
 8009dec:	6818      	ldr	r0, [r3, #0]
 8009dee:	f000 b82b 	b.w	8009e48 <_malloc_r>
 8009df2:	bf00      	nop
 8009df4:	20000064 	.word	0x20000064

08009df8 <free>:
 8009df8:	4b02      	ldr	r3, [pc, #8]	; (8009e04 <free+0xc>)
 8009dfa:	4601      	mov	r1, r0
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	f002 b90b 	b.w	800c018 <_free_r>
 8009e02:	bf00      	nop
 8009e04:	20000064 	.word	0x20000064

08009e08 <sbrk_aligned>:
 8009e08:	b570      	push	{r4, r5, r6, lr}
 8009e0a:	4e0e      	ldr	r6, [pc, #56]	; (8009e44 <sbrk_aligned+0x3c>)
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	6831      	ldr	r1, [r6, #0]
 8009e10:	4605      	mov	r5, r0
 8009e12:	b911      	cbnz	r1, 8009e1a <sbrk_aligned+0x12>
 8009e14:	f001 fa9e 	bl	800b354 <_sbrk_r>
 8009e18:	6030      	str	r0, [r6, #0]
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	f001 fa99 	bl	800b354 <_sbrk_r>
 8009e22:	1c43      	adds	r3, r0, #1
 8009e24:	d00a      	beq.n	8009e3c <sbrk_aligned+0x34>
 8009e26:	1cc4      	adds	r4, r0, #3
 8009e28:	f024 0403 	bic.w	r4, r4, #3
 8009e2c:	42a0      	cmp	r0, r4
 8009e2e:	d007      	beq.n	8009e40 <sbrk_aligned+0x38>
 8009e30:	1a21      	subs	r1, r4, r0
 8009e32:	4628      	mov	r0, r5
 8009e34:	f001 fa8e 	bl	800b354 <_sbrk_r>
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d101      	bne.n	8009e40 <sbrk_aligned+0x38>
 8009e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8009e40:	4620      	mov	r0, r4
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	20003188 	.word	0x20003188

08009e48 <_malloc_r>:
 8009e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e4c:	1ccd      	adds	r5, r1, #3
 8009e4e:	f025 0503 	bic.w	r5, r5, #3
 8009e52:	3508      	adds	r5, #8
 8009e54:	2d0c      	cmp	r5, #12
 8009e56:	bf38      	it	cc
 8009e58:	250c      	movcc	r5, #12
 8009e5a:	2d00      	cmp	r5, #0
 8009e5c:	4607      	mov	r7, r0
 8009e5e:	db01      	blt.n	8009e64 <_malloc_r+0x1c>
 8009e60:	42a9      	cmp	r1, r5
 8009e62:	d905      	bls.n	8009e70 <_malloc_r+0x28>
 8009e64:	230c      	movs	r3, #12
 8009e66:	603b      	str	r3, [r7, #0]
 8009e68:	2600      	movs	r6, #0
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009f44 <_malloc_r+0xfc>
 8009e74:	f000 f868 	bl	8009f48 <__malloc_lock>
 8009e78:	f8d8 3000 	ldr.w	r3, [r8]
 8009e7c:	461c      	mov	r4, r3
 8009e7e:	bb5c      	cbnz	r4, 8009ed8 <_malloc_r+0x90>
 8009e80:	4629      	mov	r1, r5
 8009e82:	4638      	mov	r0, r7
 8009e84:	f7ff ffc0 	bl	8009e08 <sbrk_aligned>
 8009e88:	1c43      	adds	r3, r0, #1
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	d155      	bne.n	8009f3a <_malloc_r+0xf2>
 8009e8e:	f8d8 4000 	ldr.w	r4, [r8]
 8009e92:	4626      	mov	r6, r4
 8009e94:	2e00      	cmp	r6, #0
 8009e96:	d145      	bne.n	8009f24 <_malloc_r+0xdc>
 8009e98:	2c00      	cmp	r4, #0
 8009e9a:	d048      	beq.n	8009f2e <_malloc_r+0xe6>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	eb04 0903 	add.w	r9, r4, r3
 8009ea6:	f001 fa55 	bl	800b354 <_sbrk_r>
 8009eaa:	4581      	cmp	r9, r0
 8009eac:	d13f      	bne.n	8009f2e <_malloc_r+0xe6>
 8009eae:	6821      	ldr	r1, [r4, #0]
 8009eb0:	1a6d      	subs	r5, r5, r1
 8009eb2:	4629      	mov	r1, r5
 8009eb4:	4638      	mov	r0, r7
 8009eb6:	f7ff ffa7 	bl	8009e08 <sbrk_aligned>
 8009eba:	3001      	adds	r0, #1
 8009ebc:	d037      	beq.n	8009f2e <_malloc_r+0xe6>
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	442b      	add	r3, r5
 8009ec2:	6023      	str	r3, [r4, #0]
 8009ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d038      	beq.n	8009f3e <_malloc_r+0xf6>
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	42a2      	cmp	r2, r4
 8009ed0:	d12b      	bne.n	8009f2a <_malloc_r+0xe2>
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	605a      	str	r2, [r3, #4]
 8009ed6:	e00f      	b.n	8009ef8 <_malloc_r+0xb0>
 8009ed8:	6822      	ldr	r2, [r4, #0]
 8009eda:	1b52      	subs	r2, r2, r5
 8009edc:	d41f      	bmi.n	8009f1e <_malloc_r+0xd6>
 8009ede:	2a0b      	cmp	r2, #11
 8009ee0:	d917      	bls.n	8009f12 <_malloc_r+0xca>
 8009ee2:	1961      	adds	r1, r4, r5
 8009ee4:	42a3      	cmp	r3, r4
 8009ee6:	6025      	str	r5, [r4, #0]
 8009ee8:	bf18      	it	ne
 8009eea:	6059      	strne	r1, [r3, #4]
 8009eec:	6863      	ldr	r3, [r4, #4]
 8009eee:	bf08      	it	eq
 8009ef0:	f8c8 1000 	streq.w	r1, [r8]
 8009ef4:	5162      	str	r2, [r4, r5]
 8009ef6:	604b      	str	r3, [r1, #4]
 8009ef8:	4638      	mov	r0, r7
 8009efa:	f104 060b 	add.w	r6, r4, #11
 8009efe:	f000 f829 	bl	8009f54 <__malloc_unlock>
 8009f02:	f026 0607 	bic.w	r6, r6, #7
 8009f06:	1d23      	adds	r3, r4, #4
 8009f08:	1af2      	subs	r2, r6, r3
 8009f0a:	d0ae      	beq.n	8009e6a <_malloc_r+0x22>
 8009f0c:	1b9b      	subs	r3, r3, r6
 8009f0e:	50a3      	str	r3, [r4, r2]
 8009f10:	e7ab      	b.n	8009e6a <_malloc_r+0x22>
 8009f12:	42a3      	cmp	r3, r4
 8009f14:	6862      	ldr	r2, [r4, #4]
 8009f16:	d1dd      	bne.n	8009ed4 <_malloc_r+0x8c>
 8009f18:	f8c8 2000 	str.w	r2, [r8]
 8009f1c:	e7ec      	b.n	8009ef8 <_malloc_r+0xb0>
 8009f1e:	4623      	mov	r3, r4
 8009f20:	6864      	ldr	r4, [r4, #4]
 8009f22:	e7ac      	b.n	8009e7e <_malloc_r+0x36>
 8009f24:	4634      	mov	r4, r6
 8009f26:	6876      	ldr	r6, [r6, #4]
 8009f28:	e7b4      	b.n	8009e94 <_malloc_r+0x4c>
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	e7cc      	b.n	8009ec8 <_malloc_r+0x80>
 8009f2e:	230c      	movs	r3, #12
 8009f30:	603b      	str	r3, [r7, #0]
 8009f32:	4638      	mov	r0, r7
 8009f34:	f000 f80e 	bl	8009f54 <__malloc_unlock>
 8009f38:	e797      	b.n	8009e6a <_malloc_r+0x22>
 8009f3a:	6025      	str	r5, [r4, #0]
 8009f3c:	e7dc      	b.n	8009ef8 <_malloc_r+0xb0>
 8009f3e:	605b      	str	r3, [r3, #4]
 8009f40:	deff      	udf	#255	; 0xff
 8009f42:	bf00      	nop
 8009f44:	20003184 	.word	0x20003184

08009f48 <__malloc_lock>:
 8009f48:	4801      	ldr	r0, [pc, #4]	; (8009f50 <__malloc_lock+0x8>)
 8009f4a:	f001 ba50 	b.w	800b3ee <__retarget_lock_acquire_recursive>
 8009f4e:	bf00      	nop
 8009f50:	200032cc 	.word	0x200032cc

08009f54 <__malloc_unlock>:
 8009f54:	4801      	ldr	r0, [pc, #4]	; (8009f5c <__malloc_unlock+0x8>)
 8009f56:	f001 ba4b 	b.w	800b3f0 <__retarget_lock_release_recursive>
 8009f5a:	bf00      	nop
 8009f5c:	200032cc 	.word	0x200032cc

08009f60 <_strtol_l.constprop.0>:
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f66:	d001      	beq.n	8009f6c <_strtol_l.constprop.0+0xc>
 8009f68:	2b24      	cmp	r3, #36	; 0x24
 8009f6a:	d906      	bls.n	8009f7a <_strtol_l.constprop.0+0x1a>
 8009f6c:	f001 fa14 	bl	800b398 <__errno>
 8009f70:	2316      	movs	r3, #22
 8009f72:	6003      	str	r3, [r0, #0]
 8009f74:	2000      	movs	r0, #0
 8009f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a060 <_strtol_l.constprop.0+0x100>
 8009f7e:	460d      	mov	r5, r1
 8009f80:	462e      	mov	r6, r5
 8009f82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f86:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009f8a:	f017 0708 	ands.w	r7, r7, #8
 8009f8e:	d1f7      	bne.n	8009f80 <_strtol_l.constprop.0+0x20>
 8009f90:	2c2d      	cmp	r4, #45	; 0x2d
 8009f92:	d132      	bne.n	8009ffa <_strtol_l.constprop.0+0x9a>
 8009f94:	782c      	ldrb	r4, [r5, #0]
 8009f96:	2701      	movs	r7, #1
 8009f98:	1cb5      	adds	r5, r6, #2
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d05b      	beq.n	800a056 <_strtol_l.constprop.0+0xf6>
 8009f9e:	2b10      	cmp	r3, #16
 8009fa0:	d109      	bne.n	8009fb6 <_strtol_l.constprop.0+0x56>
 8009fa2:	2c30      	cmp	r4, #48	; 0x30
 8009fa4:	d107      	bne.n	8009fb6 <_strtol_l.constprop.0+0x56>
 8009fa6:	782c      	ldrb	r4, [r5, #0]
 8009fa8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009fac:	2c58      	cmp	r4, #88	; 0x58
 8009fae:	d14d      	bne.n	800a04c <_strtol_l.constprop.0+0xec>
 8009fb0:	786c      	ldrb	r4, [r5, #1]
 8009fb2:	2310      	movs	r3, #16
 8009fb4:	3502      	adds	r5, #2
 8009fb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009fba:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fbe:	f04f 0e00 	mov.w	lr, #0
 8009fc2:	fbb8 f9f3 	udiv	r9, r8, r3
 8009fc6:	4676      	mov	r6, lr
 8009fc8:	fb03 8a19 	mls	sl, r3, r9, r8
 8009fcc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009fd0:	f1bc 0f09 	cmp.w	ip, #9
 8009fd4:	d816      	bhi.n	800a004 <_strtol_l.constprop.0+0xa4>
 8009fd6:	4664      	mov	r4, ip
 8009fd8:	42a3      	cmp	r3, r4
 8009fda:	dd24      	ble.n	800a026 <_strtol_l.constprop.0+0xc6>
 8009fdc:	f1be 3fff 	cmp.w	lr, #4294967295
 8009fe0:	d008      	beq.n	8009ff4 <_strtol_l.constprop.0+0x94>
 8009fe2:	45b1      	cmp	r9, r6
 8009fe4:	d31c      	bcc.n	800a020 <_strtol_l.constprop.0+0xc0>
 8009fe6:	d101      	bne.n	8009fec <_strtol_l.constprop.0+0x8c>
 8009fe8:	45a2      	cmp	sl, r4
 8009fea:	db19      	blt.n	800a020 <_strtol_l.constprop.0+0xc0>
 8009fec:	fb06 4603 	mla	r6, r6, r3, r4
 8009ff0:	f04f 0e01 	mov.w	lr, #1
 8009ff4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ff8:	e7e8      	b.n	8009fcc <_strtol_l.constprop.0+0x6c>
 8009ffa:	2c2b      	cmp	r4, #43	; 0x2b
 8009ffc:	bf04      	itt	eq
 8009ffe:	782c      	ldrbeq	r4, [r5, #0]
 800a000:	1cb5      	addeq	r5, r6, #2
 800a002:	e7ca      	b.n	8009f9a <_strtol_l.constprop.0+0x3a>
 800a004:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a008:	f1bc 0f19 	cmp.w	ip, #25
 800a00c:	d801      	bhi.n	800a012 <_strtol_l.constprop.0+0xb2>
 800a00e:	3c37      	subs	r4, #55	; 0x37
 800a010:	e7e2      	b.n	8009fd8 <_strtol_l.constprop.0+0x78>
 800a012:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a016:	f1bc 0f19 	cmp.w	ip, #25
 800a01a:	d804      	bhi.n	800a026 <_strtol_l.constprop.0+0xc6>
 800a01c:	3c57      	subs	r4, #87	; 0x57
 800a01e:	e7db      	b.n	8009fd8 <_strtol_l.constprop.0+0x78>
 800a020:	f04f 3eff 	mov.w	lr, #4294967295
 800a024:	e7e6      	b.n	8009ff4 <_strtol_l.constprop.0+0x94>
 800a026:	f1be 3fff 	cmp.w	lr, #4294967295
 800a02a:	d105      	bne.n	800a038 <_strtol_l.constprop.0+0xd8>
 800a02c:	2322      	movs	r3, #34	; 0x22
 800a02e:	6003      	str	r3, [r0, #0]
 800a030:	4646      	mov	r6, r8
 800a032:	b942      	cbnz	r2, 800a046 <_strtol_l.constprop.0+0xe6>
 800a034:	4630      	mov	r0, r6
 800a036:	e79e      	b.n	8009f76 <_strtol_l.constprop.0+0x16>
 800a038:	b107      	cbz	r7, 800a03c <_strtol_l.constprop.0+0xdc>
 800a03a:	4276      	negs	r6, r6
 800a03c:	2a00      	cmp	r2, #0
 800a03e:	d0f9      	beq.n	800a034 <_strtol_l.constprop.0+0xd4>
 800a040:	f1be 0f00 	cmp.w	lr, #0
 800a044:	d000      	beq.n	800a048 <_strtol_l.constprop.0+0xe8>
 800a046:	1e69      	subs	r1, r5, #1
 800a048:	6011      	str	r1, [r2, #0]
 800a04a:	e7f3      	b.n	800a034 <_strtol_l.constprop.0+0xd4>
 800a04c:	2430      	movs	r4, #48	; 0x30
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1b1      	bne.n	8009fb6 <_strtol_l.constprop.0+0x56>
 800a052:	2308      	movs	r3, #8
 800a054:	e7af      	b.n	8009fb6 <_strtol_l.constprop.0+0x56>
 800a056:	2c30      	cmp	r4, #48	; 0x30
 800a058:	d0a5      	beq.n	8009fa6 <_strtol_l.constprop.0+0x46>
 800a05a:	230a      	movs	r3, #10
 800a05c:	e7ab      	b.n	8009fb6 <_strtol_l.constprop.0+0x56>
 800a05e:	bf00      	nop
 800a060:	08015ed1 	.word	0x08015ed1

0800a064 <_strtol_r>:
 800a064:	f7ff bf7c 	b.w	8009f60 <_strtol_l.constprop.0>

0800a068 <strtol>:
 800a068:	4613      	mov	r3, r2
 800a06a:	460a      	mov	r2, r1
 800a06c:	4601      	mov	r1, r0
 800a06e:	4802      	ldr	r0, [pc, #8]	; (800a078 <strtol+0x10>)
 800a070:	6800      	ldr	r0, [r0, #0]
 800a072:	f7ff bf75 	b.w	8009f60 <_strtol_l.constprop.0>
 800a076:	bf00      	nop
 800a078:	20000064 	.word	0x20000064

0800a07c <__cvt>:
 800a07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a07e:	ed2d 8b02 	vpush	{d8}
 800a082:	eeb0 8b40 	vmov.f64	d8, d0
 800a086:	b085      	sub	sp, #20
 800a088:	4617      	mov	r7, r2
 800a08a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a08c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a08e:	ee18 2a90 	vmov	r2, s17
 800a092:	f025 0520 	bic.w	r5, r5, #32
 800a096:	2a00      	cmp	r2, #0
 800a098:	bfb6      	itet	lt
 800a09a:	222d      	movlt	r2, #45	; 0x2d
 800a09c:	2200      	movge	r2, #0
 800a09e:	eeb1 8b40 	vneglt.f64	d8, d0
 800a0a2:	2d46      	cmp	r5, #70	; 0x46
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	701a      	strb	r2, [r3, #0]
 800a0a8:	d004      	beq.n	800a0b4 <__cvt+0x38>
 800a0aa:	2d45      	cmp	r5, #69	; 0x45
 800a0ac:	d100      	bne.n	800a0b0 <__cvt+0x34>
 800a0ae:	3401      	adds	r4, #1
 800a0b0:	2102      	movs	r1, #2
 800a0b2:	e000      	b.n	800a0b6 <__cvt+0x3a>
 800a0b4:	2103      	movs	r1, #3
 800a0b6:	ab03      	add	r3, sp, #12
 800a0b8:	9301      	str	r3, [sp, #4]
 800a0ba:	ab02      	add	r3, sp, #8
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	4622      	mov	r2, r4
 800a0c0:	4633      	mov	r3, r6
 800a0c2:	eeb0 0b48 	vmov.f64	d0, d8
 800a0c6:	f001 fa3b 	bl	800b540 <_dtoa_r>
 800a0ca:	2d47      	cmp	r5, #71	; 0x47
 800a0cc:	d101      	bne.n	800a0d2 <__cvt+0x56>
 800a0ce:	07fb      	lsls	r3, r7, #31
 800a0d0:	d51a      	bpl.n	800a108 <__cvt+0x8c>
 800a0d2:	2d46      	cmp	r5, #70	; 0x46
 800a0d4:	eb00 0204 	add.w	r2, r0, r4
 800a0d8:	d10c      	bne.n	800a0f4 <__cvt+0x78>
 800a0da:	7803      	ldrb	r3, [r0, #0]
 800a0dc:	2b30      	cmp	r3, #48	; 0x30
 800a0de:	d107      	bne.n	800a0f0 <__cvt+0x74>
 800a0e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e8:	bf1c      	itt	ne
 800a0ea:	f1c4 0401 	rsbne	r4, r4, #1
 800a0ee:	6034      	strne	r4, [r6, #0]
 800a0f0:	6833      	ldr	r3, [r6, #0]
 800a0f2:	441a      	add	r2, r3
 800a0f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fc:	bf08      	it	eq
 800a0fe:	9203      	streq	r2, [sp, #12]
 800a100:	2130      	movs	r1, #48	; 0x30
 800a102:	9b03      	ldr	r3, [sp, #12]
 800a104:	4293      	cmp	r3, r2
 800a106:	d307      	bcc.n	800a118 <__cvt+0x9c>
 800a108:	9b03      	ldr	r3, [sp, #12]
 800a10a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a10c:	1a1b      	subs	r3, r3, r0
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	b005      	add	sp, #20
 800a112:	ecbd 8b02 	vpop	{d8}
 800a116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a118:	1c5c      	adds	r4, r3, #1
 800a11a:	9403      	str	r4, [sp, #12]
 800a11c:	7019      	strb	r1, [r3, #0]
 800a11e:	e7f0      	b.n	800a102 <__cvt+0x86>

0800a120 <__exponent>:
 800a120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a122:	4603      	mov	r3, r0
 800a124:	2900      	cmp	r1, #0
 800a126:	bfb8      	it	lt
 800a128:	4249      	neglt	r1, r1
 800a12a:	f803 2b02 	strb.w	r2, [r3], #2
 800a12e:	bfb4      	ite	lt
 800a130:	222d      	movlt	r2, #45	; 0x2d
 800a132:	222b      	movge	r2, #43	; 0x2b
 800a134:	2909      	cmp	r1, #9
 800a136:	7042      	strb	r2, [r0, #1]
 800a138:	dd2a      	ble.n	800a190 <__exponent+0x70>
 800a13a:	f10d 0207 	add.w	r2, sp, #7
 800a13e:	4617      	mov	r7, r2
 800a140:	260a      	movs	r6, #10
 800a142:	4694      	mov	ip, r2
 800a144:	fb91 f5f6 	sdiv	r5, r1, r6
 800a148:	fb06 1415 	mls	r4, r6, r5, r1
 800a14c:	3430      	adds	r4, #48	; 0x30
 800a14e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a152:	460c      	mov	r4, r1
 800a154:	2c63      	cmp	r4, #99	; 0x63
 800a156:	f102 32ff 	add.w	r2, r2, #4294967295
 800a15a:	4629      	mov	r1, r5
 800a15c:	dcf1      	bgt.n	800a142 <__exponent+0x22>
 800a15e:	3130      	adds	r1, #48	; 0x30
 800a160:	f1ac 0402 	sub.w	r4, ip, #2
 800a164:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a168:	1c41      	adds	r1, r0, #1
 800a16a:	4622      	mov	r2, r4
 800a16c:	42ba      	cmp	r2, r7
 800a16e:	d30a      	bcc.n	800a186 <__exponent+0x66>
 800a170:	f10d 0209 	add.w	r2, sp, #9
 800a174:	eba2 020c 	sub.w	r2, r2, ip
 800a178:	42bc      	cmp	r4, r7
 800a17a:	bf88      	it	hi
 800a17c:	2200      	movhi	r2, #0
 800a17e:	4413      	add	r3, r2
 800a180:	1a18      	subs	r0, r3, r0
 800a182:	b003      	add	sp, #12
 800a184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a186:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a18a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a18e:	e7ed      	b.n	800a16c <__exponent+0x4c>
 800a190:	2330      	movs	r3, #48	; 0x30
 800a192:	3130      	adds	r1, #48	; 0x30
 800a194:	7083      	strb	r3, [r0, #2]
 800a196:	70c1      	strb	r1, [r0, #3]
 800a198:	1d03      	adds	r3, r0, #4
 800a19a:	e7f1      	b.n	800a180 <__exponent+0x60>
 800a19c:	0000      	movs	r0, r0
	...

0800a1a0 <_printf_float>:
 800a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a4:	b08b      	sub	sp, #44	; 0x2c
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a1ac:	4616      	mov	r6, r2
 800a1ae:	461f      	mov	r7, r3
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	f001 f897 	bl	800b2e4 <_localeconv_r>
 800a1b6:	f8d0 b000 	ldr.w	fp, [r0]
 800a1ba:	4658      	mov	r0, fp
 800a1bc:	f7f6 f8a0 	bl	8000300 <strlen>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	9308      	str	r3, [sp, #32]
 800a1c4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a1cc:	6822      	ldr	r2, [r4, #0]
 800a1ce:	3307      	adds	r3, #7
 800a1d0:	f023 0307 	bic.w	r3, r3, #7
 800a1d4:	f103 0108 	add.w	r1, r3, #8
 800a1d8:	f8c8 1000 	str.w	r1, [r8]
 800a1dc:	ed93 0b00 	vldr	d0, [r3]
 800a1e0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800a440 <_printf_float+0x2a0>
 800a1e4:	eeb0 7bc0 	vabs.f64	d7, d0
 800a1e8:	eeb4 7b46 	vcmp.f64	d7, d6
 800a1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800a1f4:	4682      	mov	sl, r0
 800a1f6:	dd24      	ble.n	800a242 <_printf_float+0xa2>
 800a1f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a200:	d502      	bpl.n	800a208 <_printf_float+0x68>
 800a202:	232d      	movs	r3, #45	; 0x2d
 800a204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a208:	498f      	ldr	r1, [pc, #572]	; (800a448 <_printf_float+0x2a8>)
 800a20a:	4b90      	ldr	r3, [pc, #576]	; (800a44c <_printf_float+0x2ac>)
 800a20c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a210:	bf94      	ite	ls
 800a212:	4688      	movls	r8, r1
 800a214:	4698      	movhi	r8, r3
 800a216:	2303      	movs	r3, #3
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	f022 0204 	bic.w	r2, r2, #4
 800a21e:	2300      	movs	r3, #0
 800a220:	6022      	str	r2, [r4, #0]
 800a222:	9304      	str	r3, [sp, #16]
 800a224:	9700      	str	r7, [sp, #0]
 800a226:	4633      	mov	r3, r6
 800a228:	aa09      	add	r2, sp, #36	; 0x24
 800a22a:	4621      	mov	r1, r4
 800a22c:	4628      	mov	r0, r5
 800a22e:	f000 f9d1 	bl	800a5d4 <_printf_common>
 800a232:	3001      	adds	r0, #1
 800a234:	f040 808a 	bne.w	800a34c <_printf_float+0x1ac>
 800a238:	f04f 30ff 	mov.w	r0, #4294967295
 800a23c:	b00b      	add	sp, #44	; 0x2c
 800a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a242:	eeb4 0b40 	vcmp.f64	d0, d0
 800a246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a24a:	d709      	bvc.n	800a260 <_printf_float+0xc0>
 800a24c:	ee10 3a90 	vmov	r3, s1
 800a250:	2b00      	cmp	r3, #0
 800a252:	bfbc      	itt	lt
 800a254:	232d      	movlt	r3, #45	; 0x2d
 800a256:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a25a:	497d      	ldr	r1, [pc, #500]	; (800a450 <_printf_float+0x2b0>)
 800a25c:	4b7d      	ldr	r3, [pc, #500]	; (800a454 <_printf_float+0x2b4>)
 800a25e:	e7d5      	b.n	800a20c <_printf_float+0x6c>
 800a260:	6863      	ldr	r3, [r4, #4]
 800a262:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a266:	9104      	str	r1, [sp, #16]
 800a268:	1c59      	adds	r1, r3, #1
 800a26a:	d13c      	bne.n	800a2e6 <_printf_float+0x146>
 800a26c:	2306      	movs	r3, #6
 800a26e:	6063      	str	r3, [r4, #4]
 800a270:	2300      	movs	r3, #0
 800a272:	9303      	str	r3, [sp, #12]
 800a274:	ab08      	add	r3, sp, #32
 800a276:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a27a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a27e:	ab07      	add	r3, sp, #28
 800a280:	6861      	ldr	r1, [r4, #4]
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	6022      	str	r2, [r4, #0]
 800a286:	f10d 031b 	add.w	r3, sp, #27
 800a28a:	4628      	mov	r0, r5
 800a28c:	f7ff fef6 	bl	800a07c <__cvt>
 800a290:	9b04      	ldr	r3, [sp, #16]
 800a292:	9907      	ldr	r1, [sp, #28]
 800a294:	2b47      	cmp	r3, #71	; 0x47
 800a296:	4680      	mov	r8, r0
 800a298:	d108      	bne.n	800a2ac <_printf_float+0x10c>
 800a29a:	1cc8      	adds	r0, r1, #3
 800a29c:	db02      	blt.n	800a2a4 <_printf_float+0x104>
 800a29e:	6863      	ldr	r3, [r4, #4]
 800a2a0:	4299      	cmp	r1, r3
 800a2a2:	dd41      	ble.n	800a328 <_printf_float+0x188>
 800a2a4:	f1a9 0902 	sub.w	r9, r9, #2
 800a2a8:	fa5f f989 	uxtb.w	r9, r9
 800a2ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a2b0:	d820      	bhi.n	800a2f4 <_printf_float+0x154>
 800a2b2:	3901      	subs	r1, #1
 800a2b4:	464a      	mov	r2, r9
 800a2b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a2ba:	9107      	str	r1, [sp, #28]
 800a2bc:	f7ff ff30 	bl	800a120 <__exponent>
 800a2c0:	9a08      	ldr	r2, [sp, #32]
 800a2c2:	9004      	str	r0, [sp, #16]
 800a2c4:	1813      	adds	r3, r2, r0
 800a2c6:	2a01      	cmp	r2, #1
 800a2c8:	6123      	str	r3, [r4, #16]
 800a2ca:	dc02      	bgt.n	800a2d2 <_printf_float+0x132>
 800a2cc:	6822      	ldr	r2, [r4, #0]
 800a2ce:	07d2      	lsls	r2, r2, #31
 800a2d0:	d501      	bpl.n	800a2d6 <_printf_float+0x136>
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	6123      	str	r3, [r4, #16]
 800a2d6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0a2      	beq.n	800a224 <_printf_float+0x84>
 800a2de:	232d      	movs	r3, #45	; 0x2d
 800a2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2e4:	e79e      	b.n	800a224 <_printf_float+0x84>
 800a2e6:	9904      	ldr	r1, [sp, #16]
 800a2e8:	2947      	cmp	r1, #71	; 0x47
 800a2ea:	d1c1      	bne.n	800a270 <_printf_float+0xd0>
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1bf      	bne.n	800a270 <_printf_float+0xd0>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e7bc      	b.n	800a26e <_printf_float+0xce>
 800a2f4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a2f8:	d118      	bne.n	800a32c <_printf_float+0x18c>
 800a2fa:	2900      	cmp	r1, #0
 800a2fc:	6863      	ldr	r3, [r4, #4]
 800a2fe:	dd0b      	ble.n	800a318 <_printf_float+0x178>
 800a300:	6121      	str	r1, [r4, #16]
 800a302:	b913      	cbnz	r3, 800a30a <_printf_float+0x16a>
 800a304:	6822      	ldr	r2, [r4, #0]
 800a306:	07d0      	lsls	r0, r2, #31
 800a308:	d502      	bpl.n	800a310 <_printf_float+0x170>
 800a30a:	3301      	adds	r3, #1
 800a30c:	440b      	add	r3, r1
 800a30e:	6123      	str	r3, [r4, #16]
 800a310:	2300      	movs	r3, #0
 800a312:	65a1      	str	r1, [r4, #88]	; 0x58
 800a314:	9304      	str	r3, [sp, #16]
 800a316:	e7de      	b.n	800a2d6 <_printf_float+0x136>
 800a318:	b913      	cbnz	r3, 800a320 <_printf_float+0x180>
 800a31a:	6822      	ldr	r2, [r4, #0]
 800a31c:	07d2      	lsls	r2, r2, #31
 800a31e:	d501      	bpl.n	800a324 <_printf_float+0x184>
 800a320:	3302      	adds	r3, #2
 800a322:	e7f4      	b.n	800a30e <_printf_float+0x16e>
 800a324:	2301      	movs	r3, #1
 800a326:	e7f2      	b.n	800a30e <_printf_float+0x16e>
 800a328:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a32c:	9b08      	ldr	r3, [sp, #32]
 800a32e:	4299      	cmp	r1, r3
 800a330:	db05      	blt.n	800a33e <_printf_float+0x19e>
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	6121      	str	r1, [r4, #16]
 800a336:	07d8      	lsls	r0, r3, #31
 800a338:	d5ea      	bpl.n	800a310 <_printf_float+0x170>
 800a33a:	1c4b      	adds	r3, r1, #1
 800a33c:	e7e7      	b.n	800a30e <_printf_float+0x16e>
 800a33e:	2900      	cmp	r1, #0
 800a340:	bfd4      	ite	le
 800a342:	f1c1 0202 	rsble	r2, r1, #2
 800a346:	2201      	movgt	r2, #1
 800a348:	4413      	add	r3, r2
 800a34a:	e7e0      	b.n	800a30e <_printf_float+0x16e>
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	055a      	lsls	r2, r3, #21
 800a350:	d407      	bmi.n	800a362 <_printf_float+0x1c2>
 800a352:	6923      	ldr	r3, [r4, #16]
 800a354:	4642      	mov	r2, r8
 800a356:	4631      	mov	r1, r6
 800a358:	4628      	mov	r0, r5
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	d12a      	bne.n	800a3b6 <_printf_float+0x216>
 800a360:	e76a      	b.n	800a238 <_printf_float+0x98>
 800a362:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a366:	f240 80e0 	bls.w	800a52a <_printf_float+0x38a>
 800a36a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a36e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a376:	d133      	bne.n	800a3e0 <_printf_float+0x240>
 800a378:	4a37      	ldr	r2, [pc, #220]	; (800a458 <_printf_float+0x2b8>)
 800a37a:	2301      	movs	r3, #1
 800a37c:	4631      	mov	r1, r6
 800a37e:	4628      	mov	r0, r5
 800a380:	47b8      	blx	r7
 800a382:	3001      	adds	r0, #1
 800a384:	f43f af58 	beq.w	800a238 <_printf_float+0x98>
 800a388:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	db02      	blt.n	800a396 <_printf_float+0x1f6>
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	07d8      	lsls	r0, r3, #31
 800a394:	d50f      	bpl.n	800a3b6 <_printf_float+0x216>
 800a396:	4653      	mov	r3, sl
 800a398:	465a      	mov	r2, fp
 800a39a:	4631      	mov	r1, r6
 800a39c:	4628      	mov	r0, r5
 800a39e:	47b8      	blx	r7
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	f43f af49 	beq.w	800a238 <_printf_float+0x98>
 800a3a6:	f04f 0800 	mov.w	r8, #0
 800a3aa:	f104 091a 	add.w	r9, r4, #26
 800a3ae:	9b08      	ldr	r3, [sp, #32]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	4543      	cmp	r3, r8
 800a3b4:	dc09      	bgt.n	800a3ca <_printf_float+0x22a>
 800a3b6:	6823      	ldr	r3, [r4, #0]
 800a3b8:	079b      	lsls	r3, r3, #30
 800a3ba:	f100 8106 	bmi.w	800a5ca <_printf_float+0x42a>
 800a3be:	68e0      	ldr	r0, [r4, #12]
 800a3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c2:	4298      	cmp	r0, r3
 800a3c4:	bfb8      	it	lt
 800a3c6:	4618      	movlt	r0, r3
 800a3c8:	e738      	b.n	800a23c <_printf_float+0x9c>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	464a      	mov	r2, r9
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	47b8      	blx	r7
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	f43f af2f 	beq.w	800a238 <_printf_float+0x98>
 800a3da:	f108 0801 	add.w	r8, r8, #1
 800a3de:	e7e6      	b.n	800a3ae <_printf_float+0x20e>
 800a3e0:	9b07      	ldr	r3, [sp, #28]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	dc3a      	bgt.n	800a45c <_printf_float+0x2bc>
 800a3e6:	4a1c      	ldr	r2, [pc, #112]	; (800a458 <_printf_float+0x2b8>)
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	47b8      	blx	r7
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	f43f af21 	beq.w	800a238 <_printf_float+0x98>
 800a3f6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	d102      	bne.n	800a404 <_printf_float+0x264>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	07d9      	lsls	r1, r3, #31
 800a402:	d5d8      	bpl.n	800a3b6 <_printf_float+0x216>
 800a404:	4653      	mov	r3, sl
 800a406:	465a      	mov	r2, fp
 800a408:	4631      	mov	r1, r6
 800a40a:	4628      	mov	r0, r5
 800a40c:	47b8      	blx	r7
 800a40e:	3001      	adds	r0, #1
 800a410:	f43f af12 	beq.w	800a238 <_printf_float+0x98>
 800a414:	f04f 0900 	mov.w	r9, #0
 800a418:	f104 0a1a 	add.w	sl, r4, #26
 800a41c:	9b07      	ldr	r3, [sp, #28]
 800a41e:	425b      	negs	r3, r3
 800a420:	454b      	cmp	r3, r9
 800a422:	dc01      	bgt.n	800a428 <_printf_float+0x288>
 800a424:	9b08      	ldr	r3, [sp, #32]
 800a426:	e795      	b.n	800a354 <_printf_float+0x1b4>
 800a428:	2301      	movs	r3, #1
 800a42a:	4652      	mov	r2, sl
 800a42c:	4631      	mov	r1, r6
 800a42e:	4628      	mov	r0, r5
 800a430:	47b8      	blx	r7
 800a432:	3001      	adds	r0, #1
 800a434:	f43f af00 	beq.w	800a238 <_printf_float+0x98>
 800a438:	f109 0901 	add.w	r9, r9, #1
 800a43c:	e7ee      	b.n	800a41c <_printf_float+0x27c>
 800a43e:	bf00      	nop
 800a440:	ffffffff 	.word	0xffffffff
 800a444:	7fefffff 	.word	0x7fefffff
 800a448:	08015fd1 	.word	0x08015fd1
 800a44c:	08015fd5 	.word	0x08015fd5
 800a450:	08015fd9 	.word	0x08015fd9
 800a454:	08015fdd 	.word	0x08015fdd
 800a458:	08015fe1 	.word	0x08015fe1
 800a45c:	9a08      	ldr	r2, [sp, #32]
 800a45e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a460:	429a      	cmp	r2, r3
 800a462:	bfa8      	it	ge
 800a464:	461a      	movge	r2, r3
 800a466:	2a00      	cmp	r2, #0
 800a468:	4691      	mov	r9, r2
 800a46a:	dc38      	bgt.n	800a4de <_printf_float+0x33e>
 800a46c:	2300      	movs	r3, #0
 800a46e:	9305      	str	r3, [sp, #20]
 800a470:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a474:	f104 021a 	add.w	r2, r4, #26
 800a478:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a47a:	9905      	ldr	r1, [sp, #20]
 800a47c:	9304      	str	r3, [sp, #16]
 800a47e:	eba3 0309 	sub.w	r3, r3, r9
 800a482:	428b      	cmp	r3, r1
 800a484:	dc33      	bgt.n	800a4ee <_printf_float+0x34e>
 800a486:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	db3c      	blt.n	800a508 <_printf_float+0x368>
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	07da      	lsls	r2, r3, #31
 800a492:	d439      	bmi.n	800a508 <_printf_float+0x368>
 800a494:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a498:	eba2 0903 	sub.w	r9, r2, r3
 800a49c:	9b04      	ldr	r3, [sp, #16]
 800a49e:	1ad2      	subs	r2, r2, r3
 800a4a0:	4591      	cmp	r9, r2
 800a4a2:	bfa8      	it	ge
 800a4a4:	4691      	movge	r9, r2
 800a4a6:	f1b9 0f00 	cmp.w	r9, #0
 800a4aa:	dc35      	bgt.n	800a518 <_printf_float+0x378>
 800a4ac:	f04f 0800 	mov.w	r8, #0
 800a4b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4b4:	f104 0a1a 	add.w	sl, r4, #26
 800a4b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a4bc:	1a9b      	subs	r3, r3, r2
 800a4be:	eba3 0309 	sub.w	r3, r3, r9
 800a4c2:	4543      	cmp	r3, r8
 800a4c4:	f77f af77 	ble.w	800a3b6 <_printf_float+0x216>
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	4652      	mov	r2, sl
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	47b8      	blx	r7
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	f43f aeb0 	beq.w	800a238 <_printf_float+0x98>
 800a4d8:	f108 0801 	add.w	r8, r8, #1
 800a4dc:	e7ec      	b.n	800a4b8 <_printf_float+0x318>
 800a4de:	4613      	mov	r3, r2
 800a4e0:	4631      	mov	r1, r6
 800a4e2:	4642      	mov	r2, r8
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	47b8      	blx	r7
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	d1bf      	bne.n	800a46c <_printf_float+0x2cc>
 800a4ec:	e6a4      	b.n	800a238 <_printf_float+0x98>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	9204      	str	r2, [sp, #16]
 800a4f6:	47b8      	blx	r7
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	f43f ae9d 	beq.w	800a238 <_printf_float+0x98>
 800a4fe:	9b05      	ldr	r3, [sp, #20]
 800a500:	9a04      	ldr	r2, [sp, #16]
 800a502:	3301      	adds	r3, #1
 800a504:	9305      	str	r3, [sp, #20]
 800a506:	e7b7      	b.n	800a478 <_printf_float+0x2d8>
 800a508:	4653      	mov	r3, sl
 800a50a:	465a      	mov	r2, fp
 800a50c:	4631      	mov	r1, r6
 800a50e:	4628      	mov	r0, r5
 800a510:	47b8      	blx	r7
 800a512:	3001      	adds	r0, #1
 800a514:	d1be      	bne.n	800a494 <_printf_float+0x2f4>
 800a516:	e68f      	b.n	800a238 <_printf_float+0x98>
 800a518:	9a04      	ldr	r2, [sp, #16]
 800a51a:	464b      	mov	r3, r9
 800a51c:	4442      	add	r2, r8
 800a51e:	4631      	mov	r1, r6
 800a520:	4628      	mov	r0, r5
 800a522:	47b8      	blx	r7
 800a524:	3001      	adds	r0, #1
 800a526:	d1c1      	bne.n	800a4ac <_printf_float+0x30c>
 800a528:	e686      	b.n	800a238 <_printf_float+0x98>
 800a52a:	9a08      	ldr	r2, [sp, #32]
 800a52c:	2a01      	cmp	r2, #1
 800a52e:	dc01      	bgt.n	800a534 <_printf_float+0x394>
 800a530:	07db      	lsls	r3, r3, #31
 800a532:	d537      	bpl.n	800a5a4 <_printf_float+0x404>
 800a534:	2301      	movs	r3, #1
 800a536:	4642      	mov	r2, r8
 800a538:	4631      	mov	r1, r6
 800a53a:	4628      	mov	r0, r5
 800a53c:	47b8      	blx	r7
 800a53e:	3001      	adds	r0, #1
 800a540:	f43f ae7a 	beq.w	800a238 <_printf_float+0x98>
 800a544:	4653      	mov	r3, sl
 800a546:	465a      	mov	r2, fp
 800a548:	4631      	mov	r1, r6
 800a54a:	4628      	mov	r0, r5
 800a54c:	47b8      	blx	r7
 800a54e:	3001      	adds	r0, #1
 800a550:	f43f ae72 	beq.w	800a238 <_printf_float+0x98>
 800a554:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a558:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a560:	9b08      	ldr	r3, [sp, #32]
 800a562:	d01a      	beq.n	800a59a <_printf_float+0x3fa>
 800a564:	3b01      	subs	r3, #1
 800a566:	f108 0201 	add.w	r2, r8, #1
 800a56a:	4631      	mov	r1, r6
 800a56c:	4628      	mov	r0, r5
 800a56e:	47b8      	blx	r7
 800a570:	3001      	adds	r0, #1
 800a572:	d10e      	bne.n	800a592 <_printf_float+0x3f2>
 800a574:	e660      	b.n	800a238 <_printf_float+0x98>
 800a576:	2301      	movs	r3, #1
 800a578:	464a      	mov	r2, r9
 800a57a:	4631      	mov	r1, r6
 800a57c:	4628      	mov	r0, r5
 800a57e:	47b8      	blx	r7
 800a580:	3001      	adds	r0, #1
 800a582:	f43f ae59 	beq.w	800a238 <_printf_float+0x98>
 800a586:	f108 0801 	add.w	r8, r8, #1
 800a58a:	9b08      	ldr	r3, [sp, #32]
 800a58c:	3b01      	subs	r3, #1
 800a58e:	4543      	cmp	r3, r8
 800a590:	dcf1      	bgt.n	800a576 <_printf_float+0x3d6>
 800a592:	9b04      	ldr	r3, [sp, #16]
 800a594:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a598:	e6dd      	b.n	800a356 <_printf_float+0x1b6>
 800a59a:	f04f 0800 	mov.w	r8, #0
 800a59e:	f104 091a 	add.w	r9, r4, #26
 800a5a2:	e7f2      	b.n	800a58a <_printf_float+0x3ea>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	4642      	mov	r2, r8
 800a5a8:	e7df      	b.n	800a56a <_printf_float+0x3ca>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	464a      	mov	r2, r9
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	47b8      	blx	r7
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	f43f ae3f 	beq.w	800a238 <_printf_float+0x98>
 800a5ba:	f108 0801 	add.w	r8, r8, #1
 800a5be:	68e3      	ldr	r3, [r4, #12]
 800a5c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5c2:	1a5b      	subs	r3, r3, r1
 800a5c4:	4543      	cmp	r3, r8
 800a5c6:	dcf0      	bgt.n	800a5aa <_printf_float+0x40a>
 800a5c8:	e6f9      	b.n	800a3be <_printf_float+0x21e>
 800a5ca:	f04f 0800 	mov.w	r8, #0
 800a5ce:	f104 0919 	add.w	r9, r4, #25
 800a5d2:	e7f4      	b.n	800a5be <_printf_float+0x41e>

0800a5d4 <_printf_common>:
 800a5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d8:	4616      	mov	r6, r2
 800a5da:	4699      	mov	r9, r3
 800a5dc:	688a      	ldr	r2, [r1, #8]
 800a5de:	690b      	ldr	r3, [r1, #16]
 800a5e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	bfb8      	it	lt
 800a5e8:	4613      	movlt	r3, r2
 800a5ea:	6033      	str	r3, [r6, #0]
 800a5ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5f0:	4607      	mov	r7, r0
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	b10a      	cbz	r2, 800a5fa <_printf_common+0x26>
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	6033      	str	r3, [r6, #0]
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	0699      	lsls	r1, r3, #26
 800a5fe:	bf42      	ittt	mi
 800a600:	6833      	ldrmi	r3, [r6, #0]
 800a602:	3302      	addmi	r3, #2
 800a604:	6033      	strmi	r3, [r6, #0]
 800a606:	6825      	ldr	r5, [r4, #0]
 800a608:	f015 0506 	ands.w	r5, r5, #6
 800a60c:	d106      	bne.n	800a61c <_printf_common+0x48>
 800a60e:	f104 0a19 	add.w	sl, r4, #25
 800a612:	68e3      	ldr	r3, [r4, #12]
 800a614:	6832      	ldr	r2, [r6, #0]
 800a616:	1a9b      	subs	r3, r3, r2
 800a618:	42ab      	cmp	r3, r5
 800a61a:	dc26      	bgt.n	800a66a <_printf_common+0x96>
 800a61c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a620:	1e13      	subs	r3, r2, #0
 800a622:	6822      	ldr	r2, [r4, #0]
 800a624:	bf18      	it	ne
 800a626:	2301      	movne	r3, #1
 800a628:	0692      	lsls	r2, r2, #26
 800a62a:	d42b      	bmi.n	800a684 <_printf_common+0xb0>
 800a62c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a630:	4649      	mov	r1, r9
 800a632:	4638      	mov	r0, r7
 800a634:	47c0      	blx	r8
 800a636:	3001      	adds	r0, #1
 800a638:	d01e      	beq.n	800a678 <_printf_common+0xa4>
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	6922      	ldr	r2, [r4, #16]
 800a63e:	f003 0306 	and.w	r3, r3, #6
 800a642:	2b04      	cmp	r3, #4
 800a644:	bf02      	ittt	eq
 800a646:	68e5      	ldreq	r5, [r4, #12]
 800a648:	6833      	ldreq	r3, [r6, #0]
 800a64a:	1aed      	subeq	r5, r5, r3
 800a64c:	68a3      	ldr	r3, [r4, #8]
 800a64e:	bf0c      	ite	eq
 800a650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a654:	2500      	movne	r5, #0
 800a656:	4293      	cmp	r3, r2
 800a658:	bfc4      	itt	gt
 800a65a:	1a9b      	subgt	r3, r3, r2
 800a65c:	18ed      	addgt	r5, r5, r3
 800a65e:	2600      	movs	r6, #0
 800a660:	341a      	adds	r4, #26
 800a662:	42b5      	cmp	r5, r6
 800a664:	d11a      	bne.n	800a69c <_printf_common+0xc8>
 800a666:	2000      	movs	r0, #0
 800a668:	e008      	b.n	800a67c <_printf_common+0xa8>
 800a66a:	2301      	movs	r3, #1
 800a66c:	4652      	mov	r2, sl
 800a66e:	4649      	mov	r1, r9
 800a670:	4638      	mov	r0, r7
 800a672:	47c0      	blx	r8
 800a674:	3001      	adds	r0, #1
 800a676:	d103      	bne.n	800a680 <_printf_common+0xac>
 800a678:	f04f 30ff 	mov.w	r0, #4294967295
 800a67c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a680:	3501      	adds	r5, #1
 800a682:	e7c6      	b.n	800a612 <_printf_common+0x3e>
 800a684:	18e1      	adds	r1, r4, r3
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	2030      	movs	r0, #48	; 0x30
 800a68a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a68e:	4422      	add	r2, r4
 800a690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a698:	3302      	adds	r3, #2
 800a69a:	e7c7      	b.n	800a62c <_printf_common+0x58>
 800a69c:	2301      	movs	r3, #1
 800a69e:	4622      	mov	r2, r4
 800a6a0:	4649      	mov	r1, r9
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	47c0      	blx	r8
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	d0e6      	beq.n	800a678 <_printf_common+0xa4>
 800a6aa:	3601      	adds	r6, #1
 800a6ac:	e7d9      	b.n	800a662 <_printf_common+0x8e>
	...

0800a6b0 <_printf_i>:
 800a6b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b4:	7e0f      	ldrb	r7, [r1, #24]
 800a6b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6b8:	2f78      	cmp	r7, #120	; 0x78
 800a6ba:	4691      	mov	r9, r2
 800a6bc:	4680      	mov	r8, r0
 800a6be:	460c      	mov	r4, r1
 800a6c0:	469a      	mov	sl, r3
 800a6c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6c6:	d807      	bhi.n	800a6d8 <_printf_i+0x28>
 800a6c8:	2f62      	cmp	r7, #98	; 0x62
 800a6ca:	d80a      	bhi.n	800a6e2 <_printf_i+0x32>
 800a6cc:	2f00      	cmp	r7, #0
 800a6ce:	f000 80d4 	beq.w	800a87a <_printf_i+0x1ca>
 800a6d2:	2f58      	cmp	r7, #88	; 0x58
 800a6d4:	f000 80c0 	beq.w	800a858 <_printf_i+0x1a8>
 800a6d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6e0:	e03a      	b.n	800a758 <_printf_i+0xa8>
 800a6e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6e6:	2b15      	cmp	r3, #21
 800a6e8:	d8f6      	bhi.n	800a6d8 <_printf_i+0x28>
 800a6ea:	a101      	add	r1, pc, #4	; (adr r1, 800a6f0 <_printf_i+0x40>)
 800a6ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6f0:	0800a749 	.word	0x0800a749
 800a6f4:	0800a75d 	.word	0x0800a75d
 800a6f8:	0800a6d9 	.word	0x0800a6d9
 800a6fc:	0800a6d9 	.word	0x0800a6d9
 800a700:	0800a6d9 	.word	0x0800a6d9
 800a704:	0800a6d9 	.word	0x0800a6d9
 800a708:	0800a75d 	.word	0x0800a75d
 800a70c:	0800a6d9 	.word	0x0800a6d9
 800a710:	0800a6d9 	.word	0x0800a6d9
 800a714:	0800a6d9 	.word	0x0800a6d9
 800a718:	0800a6d9 	.word	0x0800a6d9
 800a71c:	0800a861 	.word	0x0800a861
 800a720:	0800a789 	.word	0x0800a789
 800a724:	0800a81b 	.word	0x0800a81b
 800a728:	0800a6d9 	.word	0x0800a6d9
 800a72c:	0800a6d9 	.word	0x0800a6d9
 800a730:	0800a883 	.word	0x0800a883
 800a734:	0800a6d9 	.word	0x0800a6d9
 800a738:	0800a789 	.word	0x0800a789
 800a73c:	0800a6d9 	.word	0x0800a6d9
 800a740:	0800a6d9 	.word	0x0800a6d9
 800a744:	0800a823 	.word	0x0800a823
 800a748:	682b      	ldr	r3, [r5, #0]
 800a74a:	1d1a      	adds	r2, r3, #4
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	602a      	str	r2, [r5, #0]
 800a750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a758:	2301      	movs	r3, #1
 800a75a:	e09f      	b.n	800a89c <_printf_i+0x1ec>
 800a75c:	6820      	ldr	r0, [r4, #0]
 800a75e:	682b      	ldr	r3, [r5, #0]
 800a760:	0607      	lsls	r7, r0, #24
 800a762:	f103 0104 	add.w	r1, r3, #4
 800a766:	6029      	str	r1, [r5, #0]
 800a768:	d501      	bpl.n	800a76e <_printf_i+0xbe>
 800a76a:	681e      	ldr	r6, [r3, #0]
 800a76c:	e003      	b.n	800a776 <_printf_i+0xc6>
 800a76e:	0646      	lsls	r6, r0, #25
 800a770:	d5fb      	bpl.n	800a76a <_printf_i+0xba>
 800a772:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a776:	2e00      	cmp	r6, #0
 800a778:	da03      	bge.n	800a782 <_printf_i+0xd2>
 800a77a:	232d      	movs	r3, #45	; 0x2d
 800a77c:	4276      	negs	r6, r6
 800a77e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a782:	485a      	ldr	r0, [pc, #360]	; (800a8ec <_printf_i+0x23c>)
 800a784:	230a      	movs	r3, #10
 800a786:	e012      	b.n	800a7ae <_printf_i+0xfe>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	6820      	ldr	r0, [r4, #0]
 800a78c:	1d19      	adds	r1, r3, #4
 800a78e:	6029      	str	r1, [r5, #0]
 800a790:	0605      	lsls	r5, r0, #24
 800a792:	d501      	bpl.n	800a798 <_printf_i+0xe8>
 800a794:	681e      	ldr	r6, [r3, #0]
 800a796:	e002      	b.n	800a79e <_printf_i+0xee>
 800a798:	0641      	lsls	r1, r0, #25
 800a79a:	d5fb      	bpl.n	800a794 <_printf_i+0xe4>
 800a79c:	881e      	ldrh	r6, [r3, #0]
 800a79e:	4853      	ldr	r0, [pc, #332]	; (800a8ec <_printf_i+0x23c>)
 800a7a0:	2f6f      	cmp	r7, #111	; 0x6f
 800a7a2:	bf0c      	ite	eq
 800a7a4:	2308      	moveq	r3, #8
 800a7a6:	230a      	movne	r3, #10
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7ae:	6865      	ldr	r5, [r4, #4]
 800a7b0:	60a5      	str	r5, [r4, #8]
 800a7b2:	2d00      	cmp	r5, #0
 800a7b4:	bfa2      	ittt	ge
 800a7b6:	6821      	ldrge	r1, [r4, #0]
 800a7b8:	f021 0104 	bicge.w	r1, r1, #4
 800a7bc:	6021      	strge	r1, [r4, #0]
 800a7be:	b90e      	cbnz	r6, 800a7c4 <_printf_i+0x114>
 800a7c0:	2d00      	cmp	r5, #0
 800a7c2:	d04b      	beq.n	800a85c <_printf_i+0x1ac>
 800a7c4:	4615      	mov	r5, r2
 800a7c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7ca:	fb03 6711 	mls	r7, r3, r1, r6
 800a7ce:	5dc7      	ldrb	r7, [r0, r7]
 800a7d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7d4:	4637      	mov	r7, r6
 800a7d6:	42bb      	cmp	r3, r7
 800a7d8:	460e      	mov	r6, r1
 800a7da:	d9f4      	bls.n	800a7c6 <_printf_i+0x116>
 800a7dc:	2b08      	cmp	r3, #8
 800a7de:	d10b      	bne.n	800a7f8 <_printf_i+0x148>
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	07de      	lsls	r6, r3, #31
 800a7e4:	d508      	bpl.n	800a7f8 <_printf_i+0x148>
 800a7e6:	6923      	ldr	r3, [r4, #16]
 800a7e8:	6861      	ldr	r1, [r4, #4]
 800a7ea:	4299      	cmp	r1, r3
 800a7ec:	bfde      	ittt	le
 800a7ee:	2330      	movle	r3, #48	; 0x30
 800a7f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7f8:	1b52      	subs	r2, r2, r5
 800a7fa:	6122      	str	r2, [r4, #16]
 800a7fc:	f8cd a000 	str.w	sl, [sp]
 800a800:	464b      	mov	r3, r9
 800a802:	aa03      	add	r2, sp, #12
 800a804:	4621      	mov	r1, r4
 800a806:	4640      	mov	r0, r8
 800a808:	f7ff fee4 	bl	800a5d4 <_printf_common>
 800a80c:	3001      	adds	r0, #1
 800a80e:	d14a      	bne.n	800a8a6 <_printf_i+0x1f6>
 800a810:	f04f 30ff 	mov.w	r0, #4294967295
 800a814:	b004      	add	sp, #16
 800a816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	f043 0320 	orr.w	r3, r3, #32
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	4833      	ldr	r0, [pc, #204]	; (800a8f0 <_printf_i+0x240>)
 800a824:	2778      	movs	r7, #120	; 0x78
 800a826:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	6829      	ldr	r1, [r5, #0]
 800a82e:	061f      	lsls	r7, r3, #24
 800a830:	f851 6b04 	ldr.w	r6, [r1], #4
 800a834:	d402      	bmi.n	800a83c <_printf_i+0x18c>
 800a836:	065f      	lsls	r7, r3, #25
 800a838:	bf48      	it	mi
 800a83a:	b2b6      	uxthmi	r6, r6
 800a83c:	07df      	lsls	r7, r3, #31
 800a83e:	bf48      	it	mi
 800a840:	f043 0320 	orrmi.w	r3, r3, #32
 800a844:	6029      	str	r1, [r5, #0]
 800a846:	bf48      	it	mi
 800a848:	6023      	strmi	r3, [r4, #0]
 800a84a:	b91e      	cbnz	r6, 800a854 <_printf_i+0x1a4>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	f023 0320 	bic.w	r3, r3, #32
 800a852:	6023      	str	r3, [r4, #0]
 800a854:	2310      	movs	r3, #16
 800a856:	e7a7      	b.n	800a7a8 <_printf_i+0xf8>
 800a858:	4824      	ldr	r0, [pc, #144]	; (800a8ec <_printf_i+0x23c>)
 800a85a:	e7e4      	b.n	800a826 <_printf_i+0x176>
 800a85c:	4615      	mov	r5, r2
 800a85e:	e7bd      	b.n	800a7dc <_printf_i+0x12c>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	6826      	ldr	r6, [r4, #0]
 800a864:	6961      	ldr	r1, [r4, #20]
 800a866:	1d18      	adds	r0, r3, #4
 800a868:	6028      	str	r0, [r5, #0]
 800a86a:	0635      	lsls	r5, r6, #24
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	d501      	bpl.n	800a874 <_printf_i+0x1c4>
 800a870:	6019      	str	r1, [r3, #0]
 800a872:	e002      	b.n	800a87a <_printf_i+0x1ca>
 800a874:	0670      	lsls	r0, r6, #25
 800a876:	d5fb      	bpl.n	800a870 <_printf_i+0x1c0>
 800a878:	8019      	strh	r1, [r3, #0]
 800a87a:	2300      	movs	r3, #0
 800a87c:	6123      	str	r3, [r4, #16]
 800a87e:	4615      	mov	r5, r2
 800a880:	e7bc      	b.n	800a7fc <_printf_i+0x14c>
 800a882:	682b      	ldr	r3, [r5, #0]
 800a884:	1d1a      	adds	r2, r3, #4
 800a886:	602a      	str	r2, [r5, #0]
 800a888:	681d      	ldr	r5, [r3, #0]
 800a88a:	6862      	ldr	r2, [r4, #4]
 800a88c:	2100      	movs	r1, #0
 800a88e:	4628      	mov	r0, r5
 800a890:	f7f5 fce6 	bl	8000260 <memchr>
 800a894:	b108      	cbz	r0, 800a89a <_printf_i+0x1ea>
 800a896:	1b40      	subs	r0, r0, r5
 800a898:	6060      	str	r0, [r4, #4]
 800a89a:	6863      	ldr	r3, [r4, #4]
 800a89c:	6123      	str	r3, [r4, #16]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8a4:	e7aa      	b.n	800a7fc <_printf_i+0x14c>
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	462a      	mov	r2, r5
 800a8aa:	4649      	mov	r1, r9
 800a8ac:	4640      	mov	r0, r8
 800a8ae:	47d0      	blx	sl
 800a8b0:	3001      	adds	r0, #1
 800a8b2:	d0ad      	beq.n	800a810 <_printf_i+0x160>
 800a8b4:	6823      	ldr	r3, [r4, #0]
 800a8b6:	079b      	lsls	r3, r3, #30
 800a8b8:	d413      	bmi.n	800a8e2 <_printf_i+0x232>
 800a8ba:	68e0      	ldr	r0, [r4, #12]
 800a8bc:	9b03      	ldr	r3, [sp, #12]
 800a8be:	4298      	cmp	r0, r3
 800a8c0:	bfb8      	it	lt
 800a8c2:	4618      	movlt	r0, r3
 800a8c4:	e7a6      	b.n	800a814 <_printf_i+0x164>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	4632      	mov	r2, r6
 800a8ca:	4649      	mov	r1, r9
 800a8cc:	4640      	mov	r0, r8
 800a8ce:	47d0      	blx	sl
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	d09d      	beq.n	800a810 <_printf_i+0x160>
 800a8d4:	3501      	adds	r5, #1
 800a8d6:	68e3      	ldr	r3, [r4, #12]
 800a8d8:	9903      	ldr	r1, [sp, #12]
 800a8da:	1a5b      	subs	r3, r3, r1
 800a8dc:	42ab      	cmp	r3, r5
 800a8de:	dcf2      	bgt.n	800a8c6 <_printf_i+0x216>
 800a8e0:	e7eb      	b.n	800a8ba <_printf_i+0x20a>
 800a8e2:	2500      	movs	r5, #0
 800a8e4:	f104 0619 	add.w	r6, r4, #25
 800a8e8:	e7f5      	b.n	800a8d6 <_printf_i+0x226>
 800a8ea:	bf00      	nop
 800a8ec:	08015fe3 	.word	0x08015fe3
 800a8f0:	08015ff4 	.word	0x08015ff4

0800a8f4 <_scanf_float>:
 800a8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f8:	b087      	sub	sp, #28
 800a8fa:	4617      	mov	r7, r2
 800a8fc:	9303      	str	r3, [sp, #12]
 800a8fe:	688b      	ldr	r3, [r1, #8]
 800a900:	1e5a      	subs	r2, r3, #1
 800a902:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a906:	bf83      	ittte	hi
 800a908:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a90c:	195b      	addhi	r3, r3, r5
 800a90e:	9302      	strhi	r3, [sp, #8]
 800a910:	2300      	movls	r3, #0
 800a912:	bf86      	itte	hi
 800a914:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a918:	608b      	strhi	r3, [r1, #8]
 800a91a:	9302      	strls	r3, [sp, #8]
 800a91c:	680b      	ldr	r3, [r1, #0]
 800a91e:	468b      	mov	fp, r1
 800a920:	2500      	movs	r5, #0
 800a922:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a926:	f84b 3b1c 	str.w	r3, [fp], #28
 800a92a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a92e:	4680      	mov	r8, r0
 800a930:	460c      	mov	r4, r1
 800a932:	465e      	mov	r6, fp
 800a934:	46aa      	mov	sl, r5
 800a936:	46a9      	mov	r9, r5
 800a938:	9501      	str	r5, [sp, #4]
 800a93a:	68a2      	ldr	r2, [r4, #8]
 800a93c:	b152      	cbz	r2, 800a954 <_scanf_float+0x60>
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	2b4e      	cmp	r3, #78	; 0x4e
 800a944:	d864      	bhi.n	800aa10 <_scanf_float+0x11c>
 800a946:	2b40      	cmp	r3, #64	; 0x40
 800a948:	d83c      	bhi.n	800a9c4 <_scanf_float+0xd0>
 800a94a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a94e:	b2c8      	uxtb	r0, r1
 800a950:	280e      	cmp	r0, #14
 800a952:	d93a      	bls.n	800a9ca <_scanf_float+0xd6>
 800a954:	f1b9 0f00 	cmp.w	r9, #0
 800a958:	d003      	beq.n	800a962 <_scanf_float+0x6e>
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a966:	f1ba 0f01 	cmp.w	sl, #1
 800a96a:	f200 8113 	bhi.w	800ab94 <_scanf_float+0x2a0>
 800a96e:	455e      	cmp	r6, fp
 800a970:	f200 8105 	bhi.w	800ab7e <_scanf_float+0x28a>
 800a974:	2501      	movs	r5, #1
 800a976:	4628      	mov	r0, r5
 800a978:	b007      	add	sp, #28
 800a97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a982:	2a0d      	cmp	r2, #13
 800a984:	d8e6      	bhi.n	800a954 <_scanf_float+0x60>
 800a986:	a101      	add	r1, pc, #4	; (adr r1, 800a98c <_scanf_float+0x98>)
 800a988:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a98c:	0800aacb 	.word	0x0800aacb
 800a990:	0800a955 	.word	0x0800a955
 800a994:	0800a955 	.word	0x0800a955
 800a998:	0800a955 	.word	0x0800a955
 800a99c:	0800ab2b 	.word	0x0800ab2b
 800a9a0:	0800ab03 	.word	0x0800ab03
 800a9a4:	0800a955 	.word	0x0800a955
 800a9a8:	0800a955 	.word	0x0800a955
 800a9ac:	0800aad9 	.word	0x0800aad9
 800a9b0:	0800a955 	.word	0x0800a955
 800a9b4:	0800a955 	.word	0x0800a955
 800a9b8:	0800a955 	.word	0x0800a955
 800a9bc:	0800a955 	.word	0x0800a955
 800a9c0:	0800aa91 	.word	0x0800aa91
 800a9c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a9c8:	e7db      	b.n	800a982 <_scanf_float+0x8e>
 800a9ca:	290e      	cmp	r1, #14
 800a9cc:	d8c2      	bhi.n	800a954 <_scanf_float+0x60>
 800a9ce:	a001      	add	r0, pc, #4	; (adr r0, 800a9d4 <_scanf_float+0xe0>)
 800a9d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a9d4:	0800aa83 	.word	0x0800aa83
 800a9d8:	0800a955 	.word	0x0800a955
 800a9dc:	0800aa83 	.word	0x0800aa83
 800a9e0:	0800ab17 	.word	0x0800ab17
 800a9e4:	0800a955 	.word	0x0800a955
 800a9e8:	0800aa31 	.word	0x0800aa31
 800a9ec:	0800aa6d 	.word	0x0800aa6d
 800a9f0:	0800aa6d 	.word	0x0800aa6d
 800a9f4:	0800aa6d 	.word	0x0800aa6d
 800a9f8:	0800aa6d 	.word	0x0800aa6d
 800a9fc:	0800aa6d 	.word	0x0800aa6d
 800aa00:	0800aa6d 	.word	0x0800aa6d
 800aa04:	0800aa6d 	.word	0x0800aa6d
 800aa08:	0800aa6d 	.word	0x0800aa6d
 800aa0c:	0800aa6d 	.word	0x0800aa6d
 800aa10:	2b6e      	cmp	r3, #110	; 0x6e
 800aa12:	d809      	bhi.n	800aa28 <_scanf_float+0x134>
 800aa14:	2b60      	cmp	r3, #96	; 0x60
 800aa16:	d8b2      	bhi.n	800a97e <_scanf_float+0x8a>
 800aa18:	2b54      	cmp	r3, #84	; 0x54
 800aa1a:	d077      	beq.n	800ab0c <_scanf_float+0x218>
 800aa1c:	2b59      	cmp	r3, #89	; 0x59
 800aa1e:	d199      	bne.n	800a954 <_scanf_float+0x60>
 800aa20:	2d07      	cmp	r5, #7
 800aa22:	d197      	bne.n	800a954 <_scanf_float+0x60>
 800aa24:	2508      	movs	r5, #8
 800aa26:	e029      	b.n	800aa7c <_scanf_float+0x188>
 800aa28:	2b74      	cmp	r3, #116	; 0x74
 800aa2a:	d06f      	beq.n	800ab0c <_scanf_float+0x218>
 800aa2c:	2b79      	cmp	r3, #121	; 0x79
 800aa2e:	e7f6      	b.n	800aa1e <_scanf_float+0x12a>
 800aa30:	6821      	ldr	r1, [r4, #0]
 800aa32:	05c8      	lsls	r0, r1, #23
 800aa34:	d51a      	bpl.n	800aa6c <_scanf_float+0x178>
 800aa36:	9b02      	ldr	r3, [sp, #8]
 800aa38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800aa3c:	6021      	str	r1, [r4, #0]
 800aa3e:	f109 0901 	add.w	r9, r9, #1
 800aa42:	b11b      	cbz	r3, 800aa4c <_scanf_float+0x158>
 800aa44:	3b01      	subs	r3, #1
 800aa46:	3201      	adds	r2, #1
 800aa48:	9302      	str	r3, [sp, #8]
 800aa4a:	60a2      	str	r2, [r4, #8]
 800aa4c:	68a3      	ldr	r3, [r4, #8]
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	60a3      	str	r3, [r4, #8]
 800aa52:	6923      	ldr	r3, [r4, #16]
 800aa54:	3301      	adds	r3, #1
 800aa56:	6123      	str	r3, [r4, #16]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	607b      	str	r3, [r7, #4]
 800aa60:	f340 8084 	ble.w	800ab6c <_scanf_float+0x278>
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	3301      	adds	r3, #1
 800aa68:	603b      	str	r3, [r7, #0]
 800aa6a:	e766      	b.n	800a93a <_scanf_float+0x46>
 800aa6c:	eb1a 0f05 	cmn.w	sl, r5
 800aa70:	f47f af70 	bne.w	800a954 <_scanf_float+0x60>
 800aa74:	6822      	ldr	r2, [r4, #0]
 800aa76:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aa7a:	6022      	str	r2, [r4, #0]
 800aa7c:	f806 3b01 	strb.w	r3, [r6], #1
 800aa80:	e7e4      	b.n	800aa4c <_scanf_float+0x158>
 800aa82:	6822      	ldr	r2, [r4, #0]
 800aa84:	0610      	lsls	r0, r2, #24
 800aa86:	f57f af65 	bpl.w	800a954 <_scanf_float+0x60>
 800aa8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa8e:	e7f4      	b.n	800aa7a <_scanf_float+0x186>
 800aa90:	f1ba 0f00 	cmp.w	sl, #0
 800aa94:	d10e      	bne.n	800aab4 <_scanf_float+0x1c0>
 800aa96:	f1b9 0f00 	cmp.w	r9, #0
 800aa9a:	d10e      	bne.n	800aaba <_scanf_float+0x1c6>
 800aa9c:	6822      	ldr	r2, [r4, #0]
 800aa9e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aaa2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aaa6:	d108      	bne.n	800aaba <_scanf_float+0x1c6>
 800aaa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aaac:	6022      	str	r2, [r4, #0]
 800aaae:	f04f 0a01 	mov.w	sl, #1
 800aab2:	e7e3      	b.n	800aa7c <_scanf_float+0x188>
 800aab4:	f1ba 0f02 	cmp.w	sl, #2
 800aab8:	d055      	beq.n	800ab66 <_scanf_float+0x272>
 800aaba:	2d01      	cmp	r5, #1
 800aabc:	d002      	beq.n	800aac4 <_scanf_float+0x1d0>
 800aabe:	2d04      	cmp	r5, #4
 800aac0:	f47f af48 	bne.w	800a954 <_scanf_float+0x60>
 800aac4:	3501      	adds	r5, #1
 800aac6:	b2ed      	uxtb	r5, r5
 800aac8:	e7d8      	b.n	800aa7c <_scanf_float+0x188>
 800aaca:	f1ba 0f01 	cmp.w	sl, #1
 800aace:	f47f af41 	bne.w	800a954 <_scanf_float+0x60>
 800aad2:	f04f 0a02 	mov.w	sl, #2
 800aad6:	e7d1      	b.n	800aa7c <_scanf_float+0x188>
 800aad8:	b97d      	cbnz	r5, 800aafa <_scanf_float+0x206>
 800aada:	f1b9 0f00 	cmp.w	r9, #0
 800aade:	f47f af3c 	bne.w	800a95a <_scanf_float+0x66>
 800aae2:	6822      	ldr	r2, [r4, #0]
 800aae4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aae8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aaec:	f47f af39 	bne.w	800a962 <_scanf_float+0x6e>
 800aaf0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aaf4:	6022      	str	r2, [r4, #0]
 800aaf6:	2501      	movs	r5, #1
 800aaf8:	e7c0      	b.n	800aa7c <_scanf_float+0x188>
 800aafa:	2d03      	cmp	r5, #3
 800aafc:	d0e2      	beq.n	800aac4 <_scanf_float+0x1d0>
 800aafe:	2d05      	cmp	r5, #5
 800ab00:	e7de      	b.n	800aac0 <_scanf_float+0x1cc>
 800ab02:	2d02      	cmp	r5, #2
 800ab04:	f47f af26 	bne.w	800a954 <_scanf_float+0x60>
 800ab08:	2503      	movs	r5, #3
 800ab0a:	e7b7      	b.n	800aa7c <_scanf_float+0x188>
 800ab0c:	2d06      	cmp	r5, #6
 800ab0e:	f47f af21 	bne.w	800a954 <_scanf_float+0x60>
 800ab12:	2507      	movs	r5, #7
 800ab14:	e7b2      	b.n	800aa7c <_scanf_float+0x188>
 800ab16:	6822      	ldr	r2, [r4, #0]
 800ab18:	0591      	lsls	r1, r2, #22
 800ab1a:	f57f af1b 	bpl.w	800a954 <_scanf_float+0x60>
 800ab1e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ab22:	6022      	str	r2, [r4, #0]
 800ab24:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab28:	e7a8      	b.n	800aa7c <_scanf_float+0x188>
 800ab2a:	6822      	ldr	r2, [r4, #0]
 800ab2c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ab30:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ab34:	d006      	beq.n	800ab44 <_scanf_float+0x250>
 800ab36:	0550      	lsls	r0, r2, #21
 800ab38:	f57f af0c 	bpl.w	800a954 <_scanf_float+0x60>
 800ab3c:	f1b9 0f00 	cmp.w	r9, #0
 800ab40:	f43f af0f 	beq.w	800a962 <_scanf_float+0x6e>
 800ab44:	0591      	lsls	r1, r2, #22
 800ab46:	bf58      	it	pl
 800ab48:	9901      	ldrpl	r1, [sp, #4]
 800ab4a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab4e:	bf58      	it	pl
 800ab50:	eba9 0101 	subpl.w	r1, r9, r1
 800ab54:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ab58:	bf58      	it	pl
 800ab5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ab5e:	6022      	str	r2, [r4, #0]
 800ab60:	f04f 0900 	mov.w	r9, #0
 800ab64:	e78a      	b.n	800aa7c <_scanf_float+0x188>
 800ab66:	f04f 0a03 	mov.w	sl, #3
 800ab6a:	e787      	b.n	800aa7c <_scanf_float+0x188>
 800ab6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ab70:	4639      	mov	r1, r7
 800ab72:	4640      	mov	r0, r8
 800ab74:	4798      	blx	r3
 800ab76:	2800      	cmp	r0, #0
 800ab78:	f43f aedf 	beq.w	800a93a <_scanf_float+0x46>
 800ab7c:	e6ea      	b.n	800a954 <_scanf_float+0x60>
 800ab7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab86:	463a      	mov	r2, r7
 800ab88:	4640      	mov	r0, r8
 800ab8a:	4798      	blx	r3
 800ab8c:	6923      	ldr	r3, [r4, #16]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	6123      	str	r3, [r4, #16]
 800ab92:	e6ec      	b.n	800a96e <_scanf_float+0x7a>
 800ab94:	1e6b      	subs	r3, r5, #1
 800ab96:	2b06      	cmp	r3, #6
 800ab98:	d825      	bhi.n	800abe6 <_scanf_float+0x2f2>
 800ab9a:	2d02      	cmp	r5, #2
 800ab9c:	d836      	bhi.n	800ac0c <_scanf_float+0x318>
 800ab9e:	455e      	cmp	r6, fp
 800aba0:	f67f aee8 	bls.w	800a974 <_scanf_float+0x80>
 800aba4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aba8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800abac:	463a      	mov	r2, r7
 800abae:	4640      	mov	r0, r8
 800abb0:	4798      	blx	r3
 800abb2:	6923      	ldr	r3, [r4, #16]
 800abb4:	3b01      	subs	r3, #1
 800abb6:	6123      	str	r3, [r4, #16]
 800abb8:	e7f1      	b.n	800ab9e <_scanf_float+0x2aa>
 800abba:	9802      	ldr	r0, [sp, #8]
 800abbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abc0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800abc4:	9002      	str	r0, [sp, #8]
 800abc6:	463a      	mov	r2, r7
 800abc8:	4640      	mov	r0, r8
 800abca:	4798      	blx	r3
 800abcc:	6923      	ldr	r3, [r4, #16]
 800abce:	3b01      	subs	r3, #1
 800abd0:	6123      	str	r3, [r4, #16]
 800abd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abd6:	fa5f fa8a 	uxtb.w	sl, sl
 800abda:	f1ba 0f02 	cmp.w	sl, #2
 800abde:	d1ec      	bne.n	800abba <_scanf_float+0x2c6>
 800abe0:	3d03      	subs	r5, #3
 800abe2:	b2ed      	uxtb	r5, r5
 800abe4:	1b76      	subs	r6, r6, r5
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	05da      	lsls	r2, r3, #23
 800abea:	d52f      	bpl.n	800ac4c <_scanf_float+0x358>
 800abec:	055b      	lsls	r3, r3, #21
 800abee:	d510      	bpl.n	800ac12 <_scanf_float+0x31e>
 800abf0:	455e      	cmp	r6, fp
 800abf2:	f67f aebf 	bls.w	800a974 <_scanf_float+0x80>
 800abf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800abfe:	463a      	mov	r2, r7
 800ac00:	4640      	mov	r0, r8
 800ac02:	4798      	blx	r3
 800ac04:	6923      	ldr	r3, [r4, #16]
 800ac06:	3b01      	subs	r3, #1
 800ac08:	6123      	str	r3, [r4, #16]
 800ac0a:	e7f1      	b.n	800abf0 <_scanf_float+0x2fc>
 800ac0c:	46aa      	mov	sl, r5
 800ac0e:	9602      	str	r6, [sp, #8]
 800ac10:	e7df      	b.n	800abd2 <_scanf_float+0x2de>
 800ac12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ac16:	6923      	ldr	r3, [r4, #16]
 800ac18:	2965      	cmp	r1, #101	; 0x65
 800ac1a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac1e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ac22:	6123      	str	r3, [r4, #16]
 800ac24:	d00c      	beq.n	800ac40 <_scanf_float+0x34c>
 800ac26:	2945      	cmp	r1, #69	; 0x45
 800ac28:	d00a      	beq.n	800ac40 <_scanf_float+0x34c>
 800ac2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac2e:	463a      	mov	r2, r7
 800ac30:	4640      	mov	r0, r8
 800ac32:	4798      	blx	r3
 800ac34:	6923      	ldr	r3, [r4, #16]
 800ac36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	1eb5      	subs	r5, r6, #2
 800ac3e:	6123      	str	r3, [r4, #16]
 800ac40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac44:	463a      	mov	r2, r7
 800ac46:	4640      	mov	r0, r8
 800ac48:	4798      	blx	r3
 800ac4a:	462e      	mov	r6, r5
 800ac4c:	6825      	ldr	r5, [r4, #0]
 800ac4e:	f015 0510 	ands.w	r5, r5, #16
 800ac52:	d14d      	bne.n	800acf0 <_scanf_float+0x3fc>
 800ac54:	7035      	strb	r5, [r6, #0]
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ac5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac60:	d11a      	bne.n	800ac98 <_scanf_float+0x3a4>
 800ac62:	9b01      	ldr	r3, [sp, #4]
 800ac64:	454b      	cmp	r3, r9
 800ac66:	eba3 0209 	sub.w	r2, r3, r9
 800ac6a:	d122      	bne.n	800acb2 <_scanf_float+0x3be>
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	4659      	mov	r1, fp
 800ac70:	4640      	mov	r0, r8
 800ac72:	f002 fc93 	bl	800d59c <_strtod_r>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	6821      	ldr	r1, [r4, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f011 0f02 	tst.w	r1, #2
 800ac80:	f103 0204 	add.w	r2, r3, #4
 800ac84:	d020      	beq.n	800acc8 <_scanf_float+0x3d4>
 800ac86:	9903      	ldr	r1, [sp, #12]
 800ac88:	600a      	str	r2, [r1, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	ed83 0b00 	vstr	d0, [r3]
 800ac90:	68e3      	ldr	r3, [r4, #12]
 800ac92:	3301      	adds	r3, #1
 800ac94:	60e3      	str	r3, [r4, #12]
 800ac96:	e66e      	b.n	800a976 <_scanf_float+0x82>
 800ac98:	9b04      	ldr	r3, [sp, #16]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d0e6      	beq.n	800ac6c <_scanf_float+0x378>
 800ac9e:	9905      	ldr	r1, [sp, #20]
 800aca0:	230a      	movs	r3, #10
 800aca2:	462a      	mov	r2, r5
 800aca4:	3101      	adds	r1, #1
 800aca6:	4640      	mov	r0, r8
 800aca8:	f7ff f9dc 	bl	800a064 <_strtol_r>
 800acac:	9b04      	ldr	r3, [sp, #16]
 800acae:	9e05      	ldr	r6, [sp, #20]
 800acb0:	1ac2      	subs	r2, r0, r3
 800acb2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800acb6:	429e      	cmp	r6, r3
 800acb8:	bf28      	it	cs
 800acba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800acbe:	490d      	ldr	r1, [pc, #52]	; (800acf4 <_scanf_float+0x400>)
 800acc0:	4630      	mov	r0, r6
 800acc2:	f000 f9f9 	bl	800b0b8 <siprintf>
 800acc6:	e7d1      	b.n	800ac6c <_scanf_float+0x378>
 800acc8:	f011 0f04 	tst.w	r1, #4
 800accc:	9903      	ldr	r1, [sp, #12]
 800acce:	600a      	str	r2, [r1, #0]
 800acd0:	d1db      	bne.n	800ac8a <_scanf_float+0x396>
 800acd2:	eeb4 0b40 	vcmp.f64	d0, d0
 800acd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acda:	681e      	ldr	r6, [r3, #0]
 800acdc:	d705      	bvc.n	800acea <_scanf_float+0x3f6>
 800acde:	4806      	ldr	r0, [pc, #24]	; (800acf8 <_scanf_float+0x404>)
 800ace0:	f000 fb9e 	bl	800b420 <nanf>
 800ace4:	ed86 0a00 	vstr	s0, [r6]
 800ace8:	e7d2      	b.n	800ac90 <_scanf_float+0x39c>
 800acea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800acee:	e7f9      	b.n	800ace4 <_scanf_float+0x3f0>
 800acf0:	2500      	movs	r5, #0
 800acf2:	e640      	b.n	800a976 <_scanf_float+0x82>
 800acf4:	08016005 	.word	0x08016005
 800acf8:	08016294 	.word	0x08016294

0800acfc <std>:
 800acfc:	2300      	movs	r3, #0
 800acfe:	b510      	push	{r4, lr}
 800ad00:	4604      	mov	r4, r0
 800ad02:	e9c0 3300 	strd	r3, r3, [r0]
 800ad06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad0a:	6083      	str	r3, [r0, #8]
 800ad0c:	8181      	strh	r1, [r0, #12]
 800ad0e:	6643      	str	r3, [r0, #100]	; 0x64
 800ad10:	81c2      	strh	r2, [r0, #14]
 800ad12:	6183      	str	r3, [r0, #24]
 800ad14:	4619      	mov	r1, r3
 800ad16:	2208      	movs	r2, #8
 800ad18:	305c      	adds	r0, #92	; 0x5c
 800ad1a:	f000 fac5 	bl	800b2a8 <memset>
 800ad1e:	4b0d      	ldr	r3, [pc, #52]	; (800ad54 <std+0x58>)
 800ad20:	6263      	str	r3, [r4, #36]	; 0x24
 800ad22:	4b0d      	ldr	r3, [pc, #52]	; (800ad58 <std+0x5c>)
 800ad24:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad26:	4b0d      	ldr	r3, [pc, #52]	; (800ad5c <std+0x60>)
 800ad28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad2a:	4b0d      	ldr	r3, [pc, #52]	; (800ad60 <std+0x64>)
 800ad2c:	6323      	str	r3, [r4, #48]	; 0x30
 800ad2e:	4b0d      	ldr	r3, [pc, #52]	; (800ad64 <std+0x68>)
 800ad30:	6224      	str	r4, [r4, #32]
 800ad32:	429c      	cmp	r4, r3
 800ad34:	d006      	beq.n	800ad44 <std+0x48>
 800ad36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ad3a:	4294      	cmp	r4, r2
 800ad3c:	d002      	beq.n	800ad44 <std+0x48>
 800ad3e:	33d0      	adds	r3, #208	; 0xd0
 800ad40:	429c      	cmp	r4, r3
 800ad42:	d105      	bne.n	800ad50 <std+0x54>
 800ad44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad4c:	f000 bb4e 	b.w	800b3ec <__retarget_lock_init_recursive>
 800ad50:	bd10      	pop	{r4, pc}
 800ad52:	bf00      	nop
 800ad54:	0800b0f9 	.word	0x0800b0f9
 800ad58:	0800b11b 	.word	0x0800b11b
 800ad5c:	0800b153 	.word	0x0800b153
 800ad60:	0800b177 	.word	0x0800b177
 800ad64:	2000318c 	.word	0x2000318c

0800ad68 <stdio_exit_handler>:
 800ad68:	4a02      	ldr	r2, [pc, #8]	; (800ad74 <stdio_exit_handler+0xc>)
 800ad6a:	4903      	ldr	r1, [pc, #12]	; (800ad78 <stdio_exit_handler+0x10>)
 800ad6c:	4803      	ldr	r0, [pc, #12]	; (800ad7c <stdio_exit_handler+0x14>)
 800ad6e:	f000 b869 	b.w	800ae44 <_fwalk_sglue>
 800ad72:	bf00      	nop
 800ad74:	2000000c 	.word	0x2000000c
 800ad78:	0800dbed 	.word	0x0800dbed
 800ad7c:	20000018 	.word	0x20000018

0800ad80 <cleanup_stdio>:
 800ad80:	6841      	ldr	r1, [r0, #4]
 800ad82:	4b0c      	ldr	r3, [pc, #48]	; (800adb4 <cleanup_stdio+0x34>)
 800ad84:	4299      	cmp	r1, r3
 800ad86:	b510      	push	{r4, lr}
 800ad88:	4604      	mov	r4, r0
 800ad8a:	d001      	beq.n	800ad90 <cleanup_stdio+0x10>
 800ad8c:	f002 ff2e 	bl	800dbec <_fflush_r>
 800ad90:	68a1      	ldr	r1, [r4, #8]
 800ad92:	4b09      	ldr	r3, [pc, #36]	; (800adb8 <cleanup_stdio+0x38>)
 800ad94:	4299      	cmp	r1, r3
 800ad96:	d002      	beq.n	800ad9e <cleanup_stdio+0x1e>
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f002 ff27 	bl	800dbec <_fflush_r>
 800ad9e:	68e1      	ldr	r1, [r4, #12]
 800ada0:	4b06      	ldr	r3, [pc, #24]	; (800adbc <cleanup_stdio+0x3c>)
 800ada2:	4299      	cmp	r1, r3
 800ada4:	d004      	beq.n	800adb0 <cleanup_stdio+0x30>
 800ada6:	4620      	mov	r0, r4
 800ada8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adac:	f002 bf1e 	b.w	800dbec <_fflush_r>
 800adb0:	bd10      	pop	{r4, pc}
 800adb2:	bf00      	nop
 800adb4:	2000318c 	.word	0x2000318c
 800adb8:	200031f4 	.word	0x200031f4
 800adbc:	2000325c 	.word	0x2000325c

0800adc0 <global_stdio_init.part.0>:
 800adc0:	b510      	push	{r4, lr}
 800adc2:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <global_stdio_init.part.0+0x30>)
 800adc4:	4c0b      	ldr	r4, [pc, #44]	; (800adf4 <global_stdio_init.part.0+0x34>)
 800adc6:	4a0c      	ldr	r2, [pc, #48]	; (800adf8 <global_stdio_init.part.0+0x38>)
 800adc8:	601a      	str	r2, [r3, #0]
 800adca:	4620      	mov	r0, r4
 800adcc:	2200      	movs	r2, #0
 800adce:	2104      	movs	r1, #4
 800add0:	f7ff ff94 	bl	800acfc <std>
 800add4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800add8:	2201      	movs	r2, #1
 800adda:	2109      	movs	r1, #9
 800addc:	f7ff ff8e 	bl	800acfc <std>
 800ade0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ade4:	2202      	movs	r2, #2
 800ade6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adea:	2112      	movs	r1, #18
 800adec:	f7ff bf86 	b.w	800acfc <std>
 800adf0:	200032c4 	.word	0x200032c4
 800adf4:	2000318c 	.word	0x2000318c
 800adf8:	0800ad69 	.word	0x0800ad69

0800adfc <__sfp_lock_acquire>:
 800adfc:	4801      	ldr	r0, [pc, #4]	; (800ae04 <__sfp_lock_acquire+0x8>)
 800adfe:	f000 baf6 	b.w	800b3ee <__retarget_lock_acquire_recursive>
 800ae02:	bf00      	nop
 800ae04:	200032cd 	.word	0x200032cd

0800ae08 <__sfp_lock_release>:
 800ae08:	4801      	ldr	r0, [pc, #4]	; (800ae10 <__sfp_lock_release+0x8>)
 800ae0a:	f000 baf1 	b.w	800b3f0 <__retarget_lock_release_recursive>
 800ae0e:	bf00      	nop
 800ae10:	200032cd 	.word	0x200032cd

0800ae14 <__sinit>:
 800ae14:	b510      	push	{r4, lr}
 800ae16:	4604      	mov	r4, r0
 800ae18:	f7ff fff0 	bl	800adfc <__sfp_lock_acquire>
 800ae1c:	6a23      	ldr	r3, [r4, #32]
 800ae1e:	b11b      	cbz	r3, 800ae28 <__sinit+0x14>
 800ae20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae24:	f7ff bff0 	b.w	800ae08 <__sfp_lock_release>
 800ae28:	4b04      	ldr	r3, [pc, #16]	; (800ae3c <__sinit+0x28>)
 800ae2a:	6223      	str	r3, [r4, #32]
 800ae2c:	4b04      	ldr	r3, [pc, #16]	; (800ae40 <__sinit+0x2c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1f5      	bne.n	800ae20 <__sinit+0xc>
 800ae34:	f7ff ffc4 	bl	800adc0 <global_stdio_init.part.0>
 800ae38:	e7f2      	b.n	800ae20 <__sinit+0xc>
 800ae3a:	bf00      	nop
 800ae3c:	0800ad81 	.word	0x0800ad81
 800ae40:	200032c4 	.word	0x200032c4

0800ae44 <_fwalk_sglue>:
 800ae44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae48:	4607      	mov	r7, r0
 800ae4a:	4688      	mov	r8, r1
 800ae4c:	4614      	mov	r4, r2
 800ae4e:	2600      	movs	r6, #0
 800ae50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae54:	f1b9 0901 	subs.w	r9, r9, #1
 800ae58:	d505      	bpl.n	800ae66 <_fwalk_sglue+0x22>
 800ae5a:	6824      	ldr	r4, [r4, #0]
 800ae5c:	2c00      	cmp	r4, #0
 800ae5e:	d1f7      	bne.n	800ae50 <_fwalk_sglue+0xc>
 800ae60:	4630      	mov	r0, r6
 800ae62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae66:	89ab      	ldrh	r3, [r5, #12]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d907      	bls.n	800ae7c <_fwalk_sglue+0x38>
 800ae6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae70:	3301      	adds	r3, #1
 800ae72:	d003      	beq.n	800ae7c <_fwalk_sglue+0x38>
 800ae74:	4629      	mov	r1, r5
 800ae76:	4638      	mov	r0, r7
 800ae78:	47c0      	blx	r8
 800ae7a:	4306      	orrs	r6, r0
 800ae7c:	3568      	adds	r5, #104	; 0x68
 800ae7e:	e7e9      	b.n	800ae54 <_fwalk_sglue+0x10>

0800ae80 <iprintf>:
 800ae80:	b40f      	push	{r0, r1, r2, r3}
 800ae82:	b507      	push	{r0, r1, r2, lr}
 800ae84:	4906      	ldr	r1, [pc, #24]	; (800aea0 <iprintf+0x20>)
 800ae86:	ab04      	add	r3, sp, #16
 800ae88:	6808      	ldr	r0, [r1, #0]
 800ae8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae8e:	6881      	ldr	r1, [r0, #8]
 800ae90:	9301      	str	r3, [sp, #4]
 800ae92:	f002 fd0b 	bl	800d8ac <_vfiprintf_r>
 800ae96:	b003      	add	sp, #12
 800ae98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae9c:	b004      	add	sp, #16
 800ae9e:	4770      	bx	lr
 800aea0:	20000064 	.word	0x20000064

0800aea4 <_puts_r>:
 800aea4:	6a03      	ldr	r3, [r0, #32]
 800aea6:	b570      	push	{r4, r5, r6, lr}
 800aea8:	6884      	ldr	r4, [r0, #8]
 800aeaa:	4605      	mov	r5, r0
 800aeac:	460e      	mov	r6, r1
 800aeae:	b90b      	cbnz	r3, 800aeb4 <_puts_r+0x10>
 800aeb0:	f7ff ffb0 	bl	800ae14 <__sinit>
 800aeb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aeb6:	07db      	lsls	r3, r3, #31
 800aeb8:	d405      	bmi.n	800aec6 <_puts_r+0x22>
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	0598      	lsls	r0, r3, #22
 800aebe:	d402      	bmi.n	800aec6 <_puts_r+0x22>
 800aec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aec2:	f000 fa94 	bl	800b3ee <__retarget_lock_acquire_recursive>
 800aec6:	89a3      	ldrh	r3, [r4, #12]
 800aec8:	0719      	lsls	r1, r3, #28
 800aeca:	d513      	bpl.n	800aef4 <_puts_r+0x50>
 800aecc:	6923      	ldr	r3, [r4, #16]
 800aece:	b18b      	cbz	r3, 800aef4 <_puts_r+0x50>
 800aed0:	3e01      	subs	r6, #1
 800aed2:	68a3      	ldr	r3, [r4, #8]
 800aed4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aed8:	3b01      	subs	r3, #1
 800aeda:	60a3      	str	r3, [r4, #8]
 800aedc:	b9e9      	cbnz	r1, 800af1a <_puts_r+0x76>
 800aede:	2b00      	cmp	r3, #0
 800aee0:	da2e      	bge.n	800af40 <_puts_r+0x9c>
 800aee2:	4622      	mov	r2, r4
 800aee4:	210a      	movs	r1, #10
 800aee6:	4628      	mov	r0, r5
 800aee8:	f000 f949 	bl	800b17e <__swbuf_r>
 800aeec:	3001      	adds	r0, #1
 800aeee:	d007      	beq.n	800af00 <_puts_r+0x5c>
 800aef0:	250a      	movs	r5, #10
 800aef2:	e007      	b.n	800af04 <_puts_r+0x60>
 800aef4:	4621      	mov	r1, r4
 800aef6:	4628      	mov	r0, r5
 800aef8:	f000 f97e 	bl	800b1f8 <__swsetup_r>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d0e7      	beq.n	800aed0 <_puts_r+0x2c>
 800af00:	f04f 35ff 	mov.w	r5, #4294967295
 800af04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af06:	07da      	lsls	r2, r3, #31
 800af08:	d405      	bmi.n	800af16 <_puts_r+0x72>
 800af0a:	89a3      	ldrh	r3, [r4, #12]
 800af0c:	059b      	lsls	r3, r3, #22
 800af0e:	d402      	bmi.n	800af16 <_puts_r+0x72>
 800af10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af12:	f000 fa6d 	bl	800b3f0 <__retarget_lock_release_recursive>
 800af16:	4628      	mov	r0, r5
 800af18:	bd70      	pop	{r4, r5, r6, pc}
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	da04      	bge.n	800af28 <_puts_r+0x84>
 800af1e:	69a2      	ldr	r2, [r4, #24]
 800af20:	429a      	cmp	r2, r3
 800af22:	dc06      	bgt.n	800af32 <_puts_r+0x8e>
 800af24:	290a      	cmp	r1, #10
 800af26:	d004      	beq.n	800af32 <_puts_r+0x8e>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	6022      	str	r2, [r4, #0]
 800af2e:	7019      	strb	r1, [r3, #0]
 800af30:	e7cf      	b.n	800aed2 <_puts_r+0x2e>
 800af32:	4622      	mov	r2, r4
 800af34:	4628      	mov	r0, r5
 800af36:	f000 f922 	bl	800b17e <__swbuf_r>
 800af3a:	3001      	adds	r0, #1
 800af3c:	d1c9      	bne.n	800aed2 <_puts_r+0x2e>
 800af3e:	e7df      	b.n	800af00 <_puts_r+0x5c>
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	250a      	movs	r5, #10
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	6022      	str	r2, [r4, #0]
 800af48:	701d      	strb	r5, [r3, #0]
 800af4a:	e7db      	b.n	800af04 <_puts_r+0x60>

0800af4c <puts>:
 800af4c:	4b02      	ldr	r3, [pc, #8]	; (800af58 <puts+0xc>)
 800af4e:	4601      	mov	r1, r0
 800af50:	6818      	ldr	r0, [r3, #0]
 800af52:	f7ff bfa7 	b.w	800aea4 <_puts_r>
 800af56:	bf00      	nop
 800af58:	20000064 	.word	0x20000064

0800af5c <setvbuf>:
 800af5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af60:	461d      	mov	r5, r3
 800af62:	4b54      	ldr	r3, [pc, #336]	; (800b0b4 <setvbuf+0x158>)
 800af64:	681f      	ldr	r7, [r3, #0]
 800af66:	4604      	mov	r4, r0
 800af68:	460e      	mov	r6, r1
 800af6a:	4690      	mov	r8, r2
 800af6c:	b127      	cbz	r7, 800af78 <setvbuf+0x1c>
 800af6e:	6a3b      	ldr	r3, [r7, #32]
 800af70:	b913      	cbnz	r3, 800af78 <setvbuf+0x1c>
 800af72:	4638      	mov	r0, r7
 800af74:	f7ff ff4e 	bl	800ae14 <__sinit>
 800af78:	f1b8 0f02 	cmp.w	r8, #2
 800af7c:	d006      	beq.n	800af8c <setvbuf+0x30>
 800af7e:	f1b8 0f01 	cmp.w	r8, #1
 800af82:	f200 8094 	bhi.w	800b0ae <setvbuf+0x152>
 800af86:	2d00      	cmp	r5, #0
 800af88:	f2c0 8091 	blt.w	800b0ae <setvbuf+0x152>
 800af8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af8e:	07da      	lsls	r2, r3, #31
 800af90:	d405      	bmi.n	800af9e <setvbuf+0x42>
 800af92:	89a3      	ldrh	r3, [r4, #12]
 800af94:	059b      	lsls	r3, r3, #22
 800af96:	d402      	bmi.n	800af9e <setvbuf+0x42>
 800af98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af9a:	f000 fa28 	bl	800b3ee <__retarget_lock_acquire_recursive>
 800af9e:	4621      	mov	r1, r4
 800afa0:	4638      	mov	r0, r7
 800afa2:	f002 fe23 	bl	800dbec <_fflush_r>
 800afa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afa8:	b141      	cbz	r1, 800afbc <setvbuf+0x60>
 800afaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afae:	4299      	cmp	r1, r3
 800afb0:	d002      	beq.n	800afb8 <setvbuf+0x5c>
 800afb2:	4638      	mov	r0, r7
 800afb4:	f001 f830 	bl	800c018 <_free_r>
 800afb8:	2300      	movs	r3, #0
 800afba:	6363      	str	r3, [r4, #52]	; 0x34
 800afbc:	2300      	movs	r3, #0
 800afbe:	61a3      	str	r3, [r4, #24]
 800afc0:	6063      	str	r3, [r4, #4]
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	0618      	lsls	r0, r3, #24
 800afc6:	d503      	bpl.n	800afd0 <setvbuf+0x74>
 800afc8:	6921      	ldr	r1, [r4, #16]
 800afca:	4638      	mov	r0, r7
 800afcc:	f001 f824 	bl	800c018 <_free_r>
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800afd6:	f023 0303 	bic.w	r3, r3, #3
 800afda:	f1b8 0f02 	cmp.w	r8, #2
 800afde:	81a3      	strh	r3, [r4, #12]
 800afe0:	d05f      	beq.n	800b0a2 <setvbuf+0x146>
 800afe2:	ab01      	add	r3, sp, #4
 800afe4:	466a      	mov	r2, sp
 800afe6:	4621      	mov	r1, r4
 800afe8:	4638      	mov	r0, r7
 800afea:	f002 fe27 	bl	800dc3c <__swhatbuf_r>
 800afee:	89a3      	ldrh	r3, [r4, #12]
 800aff0:	4318      	orrs	r0, r3
 800aff2:	81a0      	strh	r0, [r4, #12]
 800aff4:	bb2d      	cbnz	r5, 800b042 <setvbuf+0xe6>
 800aff6:	9d00      	ldr	r5, [sp, #0]
 800aff8:	4628      	mov	r0, r5
 800affa:	f7fe fef5 	bl	8009de8 <malloc>
 800affe:	4606      	mov	r6, r0
 800b000:	2800      	cmp	r0, #0
 800b002:	d150      	bne.n	800b0a6 <setvbuf+0x14a>
 800b004:	f8dd 9000 	ldr.w	r9, [sp]
 800b008:	45a9      	cmp	r9, r5
 800b00a:	d13e      	bne.n	800b08a <setvbuf+0x12e>
 800b00c:	f04f 35ff 	mov.w	r5, #4294967295
 800b010:	2200      	movs	r2, #0
 800b012:	60a2      	str	r2, [r4, #8]
 800b014:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b018:	6022      	str	r2, [r4, #0]
 800b01a:	6122      	str	r2, [r4, #16]
 800b01c:	2201      	movs	r2, #1
 800b01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b022:	6162      	str	r2, [r4, #20]
 800b024:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b026:	f043 0302 	orr.w	r3, r3, #2
 800b02a:	07d1      	lsls	r1, r2, #31
 800b02c:	81a3      	strh	r3, [r4, #12]
 800b02e:	d404      	bmi.n	800b03a <setvbuf+0xde>
 800b030:	059b      	lsls	r3, r3, #22
 800b032:	d402      	bmi.n	800b03a <setvbuf+0xde>
 800b034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b036:	f000 f9db 	bl	800b3f0 <__retarget_lock_release_recursive>
 800b03a:	4628      	mov	r0, r5
 800b03c:	b003      	add	sp, #12
 800b03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b042:	2e00      	cmp	r6, #0
 800b044:	d0d8      	beq.n	800aff8 <setvbuf+0x9c>
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	b913      	cbnz	r3, 800b050 <setvbuf+0xf4>
 800b04a:	4638      	mov	r0, r7
 800b04c:	f7ff fee2 	bl	800ae14 <__sinit>
 800b050:	f1b8 0f01 	cmp.w	r8, #1
 800b054:	bf08      	it	eq
 800b056:	89a3      	ldrheq	r3, [r4, #12]
 800b058:	6026      	str	r6, [r4, #0]
 800b05a:	bf04      	itt	eq
 800b05c:	f043 0301 	orreq.w	r3, r3, #1
 800b060:	81a3      	strheq	r3, [r4, #12]
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	f013 0208 	ands.w	r2, r3, #8
 800b068:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b06c:	d01d      	beq.n	800b0aa <setvbuf+0x14e>
 800b06e:	07da      	lsls	r2, r3, #31
 800b070:	bf41      	itttt	mi
 800b072:	2200      	movmi	r2, #0
 800b074:	426d      	negmi	r5, r5
 800b076:	60a2      	strmi	r2, [r4, #8]
 800b078:	61a5      	strmi	r5, [r4, #24]
 800b07a:	bf58      	it	pl
 800b07c:	60a5      	strpl	r5, [r4, #8]
 800b07e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b080:	f015 0501 	ands.w	r5, r5, #1
 800b084:	d0d4      	beq.n	800b030 <setvbuf+0xd4>
 800b086:	2500      	movs	r5, #0
 800b088:	e7d7      	b.n	800b03a <setvbuf+0xde>
 800b08a:	4648      	mov	r0, r9
 800b08c:	f7fe feac 	bl	8009de8 <malloc>
 800b090:	4606      	mov	r6, r0
 800b092:	2800      	cmp	r0, #0
 800b094:	d0ba      	beq.n	800b00c <setvbuf+0xb0>
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	464d      	mov	r5, r9
 800b0a0:	e7d1      	b.n	800b046 <setvbuf+0xea>
 800b0a2:	2500      	movs	r5, #0
 800b0a4:	e7b4      	b.n	800b010 <setvbuf+0xb4>
 800b0a6:	46a9      	mov	r9, r5
 800b0a8:	e7f5      	b.n	800b096 <setvbuf+0x13a>
 800b0aa:	60a2      	str	r2, [r4, #8]
 800b0ac:	e7e7      	b.n	800b07e <setvbuf+0x122>
 800b0ae:	f04f 35ff 	mov.w	r5, #4294967295
 800b0b2:	e7c2      	b.n	800b03a <setvbuf+0xde>
 800b0b4:	20000064 	.word	0x20000064

0800b0b8 <siprintf>:
 800b0b8:	b40e      	push	{r1, r2, r3}
 800b0ba:	b500      	push	{lr}
 800b0bc:	b09c      	sub	sp, #112	; 0x70
 800b0be:	ab1d      	add	r3, sp, #116	; 0x74
 800b0c0:	9002      	str	r0, [sp, #8]
 800b0c2:	9006      	str	r0, [sp, #24]
 800b0c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0c8:	4809      	ldr	r0, [pc, #36]	; (800b0f0 <siprintf+0x38>)
 800b0ca:	9107      	str	r1, [sp, #28]
 800b0cc:	9104      	str	r1, [sp, #16]
 800b0ce:	4909      	ldr	r1, [pc, #36]	; (800b0f4 <siprintf+0x3c>)
 800b0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d4:	9105      	str	r1, [sp, #20]
 800b0d6:	6800      	ldr	r0, [r0, #0]
 800b0d8:	9301      	str	r3, [sp, #4]
 800b0da:	a902      	add	r1, sp, #8
 800b0dc:	f002 fabe 	bl	800d65c <_svfiprintf_r>
 800b0e0:	9b02      	ldr	r3, [sp, #8]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	701a      	strb	r2, [r3, #0]
 800b0e6:	b01c      	add	sp, #112	; 0x70
 800b0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0ec:	b003      	add	sp, #12
 800b0ee:	4770      	bx	lr
 800b0f0:	20000064 	.word	0x20000064
 800b0f4:	ffff0208 	.word	0xffff0208

0800b0f8 <__sread>:
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	460c      	mov	r4, r1
 800b0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b100:	f000 f916 	bl	800b330 <_read_r>
 800b104:	2800      	cmp	r0, #0
 800b106:	bfab      	itete	ge
 800b108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b10a:	89a3      	ldrhlt	r3, [r4, #12]
 800b10c:	181b      	addge	r3, r3, r0
 800b10e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b112:	bfac      	ite	ge
 800b114:	6563      	strge	r3, [r4, #84]	; 0x54
 800b116:	81a3      	strhlt	r3, [r4, #12]
 800b118:	bd10      	pop	{r4, pc}

0800b11a <__swrite>:
 800b11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b11e:	461f      	mov	r7, r3
 800b120:	898b      	ldrh	r3, [r1, #12]
 800b122:	05db      	lsls	r3, r3, #23
 800b124:	4605      	mov	r5, r0
 800b126:	460c      	mov	r4, r1
 800b128:	4616      	mov	r6, r2
 800b12a:	d505      	bpl.n	800b138 <__swrite+0x1e>
 800b12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b130:	2302      	movs	r3, #2
 800b132:	2200      	movs	r2, #0
 800b134:	f000 f8ea 	bl	800b30c <_lseek_r>
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b13e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b142:	81a3      	strh	r3, [r4, #12]
 800b144:	4632      	mov	r2, r6
 800b146:	463b      	mov	r3, r7
 800b148:	4628      	mov	r0, r5
 800b14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b14e:	f000 b911 	b.w	800b374 <_write_r>

0800b152 <__sseek>:
 800b152:	b510      	push	{r4, lr}
 800b154:	460c      	mov	r4, r1
 800b156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b15a:	f000 f8d7 	bl	800b30c <_lseek_r>
 800b15e:	1c43      	adds	r3, r0, #1
 800b160:	89a3      	ldrh	r3, [r4, #12]
 800b162:	bf15      	itete	ne
 800b164:	6560      	strne	r0, [r4, #84]	; 0x54
 800b166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b16a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b16e:	81a3      	strheq	r3, [r4, #12]
 800b170:	bf18      	it	ne
 800b172:	81a3      	strhne	r3, [r4, #12]
 800b174:	bd10      	pop	{r4, pc}

0800b176 <__sclose>:
 800b176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b17a:	f000 b8b7 	b.w	800b2ec <_close_r>

0800b17e <__swbuf_r>:
 800b17e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b180:	460e      	mov	r6, r1
 800b182:	4614      	mov	r4, r2
 800b184:	4605      	mov	r5, r0
 800b186:	b118      	cbz	r0, 800b190 <__swbuf_r+0x12>
 800b188:	6a03      	ldr	r3, [r0, #32]
 800b18a:	b90b      	cbnz	r3, 800b190 <__swbuf_r+0x12>
 800b18c:	f7ff fe42 	bl	800ae14 <__sinit>
 800b190:	69a3      	ldr	r3, [r4, #24]
 800b192:	60a3      	str	r3, [r4, #8]
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	071a      	lsls	r2, r3, #28
 800b198:	d525      	bpl.n	800b1e6 <__swbuf_r+0x68>
 800b19a:	6923      	ldr	r3, [r4, #16]
 800b19c:	b31b      	cbz	r3, 800b1e6 <__swbuf_r+0x68>
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	6922      	ldr	r2, [r4, #16]
 800b1a2:	1a98      	subs	r0, r3, r2
 800b1a4:	6963      	ldr	r3, [r4, #20]
 800b1a6:	b2f6      	uxtb	r6, r6
 800b1a8:	4283      	cmp	r3, r0
 800b1aa:	4637      	mov	r7, r6
 800b1ac:	dc04      	bgt.n	800b1b8 <__swbuf_r+0x3a>
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	f002 fd1b 	bl	800dbec <_fflush_r>
 800b1b6:	b9e0      	cbnz	r0, 800b1f2 <__swbuf_r+0x74>
 800b1b8:	68a3      	ldr	r3, [r4, #8]
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	60a3      	str	r3, [r4, #8]
 800b1be:	6823      	ldr	r3, [r4, #0]
 800b1c0:	1c5a      	adds	r2, r3, #1
 800b1c2:	6022      	str	r2, [r4, #0]
 800b1c4:	701e      	strb	r6, [r3, #0]
 800b1c6:	6962      	ldr	r2, [r4, #20]
 800b1c8:	1c43      	adds	r3, r0, #1
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d004      	beq.n	800b1d8 <__swbuf_r+0x5a>
 800b1ce:	89a3      	ldrh	r3, [r4, #12]
 800b1d0:	07db      	lsls	r3, r3, #31
 800b1d2:	d506      	bpl.n	800b1e2 <__swbuf_r+0x64>
 800b1d4:	2e0a      	cmp	r6, #10
 800b1d6:	d104      	bne.n	800b1e2 <__swbuf_r+0x64>
 800b1d8:	4621      	mov	r1, r4
 800b1da:	4628      	mov	r0, r5
 800b1dc:	f002 fd06 	bl	800dbec <_fflush_r>
 800b1e0:	b938      	cbnz	r0, 800b1f2 <__swbuf_r+0x74>
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	f000 f805 	bl	800b1f8 <__swsetup_r>
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d0d5      	beq.n	800b19e <__swbuf_r+0x20>
 800b1f2:	f04f 37ff 	mov.w	r7, #4294967295
 800b1f6:	e7f4      	b.n	800b1e2 <__swbuf_r+0x64>

0800b1f8 <__swsetup_r>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4b2a      	ldr	r3, [pc, #168]	; (800b2a4 <__swsetup_r+0xac>)
 800b1fc:	4605      	mov	r5, r0
 800b1fe:	6818      	ldr	r0, [r3, #0]
 800b200:	460c      	mov	r4, r1
 800b202:	b118      	cbz	r0, 800b20c <__swsetup_r+0x14>
 800b204:	6a03      	ldr	r3, [r0, #32]
 800b206:	b90b      	cbnz	r3, 800b20c <__swsetup_r+0x14>
 800b208:	f7ff fe04 	bl	800ae14 <__sinit>
 800b20c:	89a3      	ldrh	r3, [r4, #12]
 800b20e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b212:	0718      	lsls	r0, r3, #28
 800b214:	d422      	bmi.n	800b25c <__swsetup_r+0x64>
 800b216:	06d9      	lsls	r1, r3, #27
 800b218:	d407      	bmi.n	800b22a <__swsetup_r+0x32>
 800b21a:	2309      	movs	r3, #9
 800b21c:	602b      	str	r3, [r5, #0]
 800b21e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b222:	81a3      	strh	r3, [r4, #12]
 800b224:	f04f 30ff 	mov.w	r0, #4294967295
 800b228:	e034      	b.n	800b294 <__swsetup_r+0x9c>
 800b22a:	0758      	lsls	r0, r3, #29
 800b22c:	d512      	bpl.n	800b254 <__swsetup_r+0x5c>
 800b22e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b230:	b141      	cbz	r1, 800b244 <__swsetup_r+0x4c>
 800b232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b236:	4299      	cmp	r1, r3
 800b238:	d002      	beq.n	800b240 <__swsetup_r+0x48>
 800b23a:	4628      	mov	r0, r5
 800b23c:	f000 feec 	bl	800c018 <_free_r>
 800b240:	2300      	movs	r3, #0
 800b242:	6363      	str	r3, [r4, #52]	; 0x34
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b24a:	81a3      	strh	r3, [r4, #12]
 800b24c:	2300      	movs	r3, #0
 800b24e:	6063      	str	r3, [r4, #4]
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	6023      	str	r3, [r4, #0]
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	f043 0308 	orr.w	r3, r3, #8
 800b25a:	81a3      	strh	r3, [r4, #12]
 800b25c:	6923      	ldr	r3, [r4, #16]
 800b25e:	b94b      	cbnz	r3, 800b274 <__swsetup_r+0x7c>
 800b260:	89a3      	ldrh	r3, [r4, #12]
 800b262:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b26a:	d003      	beq.n	800b274 <__swsetup_r+0x7c>
 800b26c:	4621      	mov	r1, r4
 800b26e:	4628      	mov	r0, r5
 800b270:	f002 fd0a 	bl	800dc88 <__smakebuf_r>
 800b274:	89a0      	ldrh	r0, [r4, #12]
 800b276:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b27a:	f010 0301 	ands.w	r3, r0, #1
 800b27e:	d00a      	beq.n	800b296 <__swsetup_r+0x9e>
 800b280:	2300      	movs	r3, #0
 800b282:	60a3      	str	r3, [r4, #8]
 800b284:	6963      	ldr	r3, [r4, #20]
 800b286:	425b      	negs	r3, r3
 800b288:	61a3      	str	r3, [r4, #24]
 800b28a:	6923      	ldr	r3, [r4, #16]
 800b28c:	b943      	cbnz	r3, 800b2a0 <__swsetup_r+0xa8>
 800b28e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b292:	d1c4      	bne.n	800b21e <__swsetup_r+0x26>
 800b294:	bd38      	pop	{r3, r4, r5, pc}
 800b296:	0781      	lsls	r1, r0, #30
 800b298:	bf58      	it	pl
 800b29a:	6963      	ldrpl	r3, [r4, #20]
 800b29c:	60a3      	str	r3, [r4, #8]
 800b29e:	e7f4      	b.n	800b28a <__swsetup_r+0x92>
 800b2a0:	2000      	movs	r0, #0
 800b2a2:	e7f7      	b.n	800b294 <__swsetup_r+0x9c>
 800b2a4:	20000064 	.word	0x20000064

0800b2a8 <memset>:
 800b2a8:	4402      	add	r2, r0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d100      	bne.n	800b2b2 <memset+0xa>
 800b2b0:	4770      	bx	lr
 800b2b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b2b6:	e7f9      	b.n	800b2ac <memset+0x4>

0800b2b8 <strstr>:
 800b2b8:	780a      	ldrb	r2, [r1, #0]
 800b2ba:	b570      	push	{r4, r5, r6, lr}
 800b2bc:	b96a      	cbnz	r2, 800b2da <strstr+0x22>
 800b2be:	bd70      	pop	{r4, r5, r6, pc}
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d109      	bne.n	800b2d8 <strstr+0x20>
 800b2c4:	460c      	mov	r4, r1
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d0f6      	beq.n	800b2be <strstr+0x6>
 800b2d0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b2d4:	429e      	cmp	r6, r3
 800b2d6:	d0f7      	beq.n	800b2c8 <strstr+0x10>
 800b2d8:	3001      	adds	r0, #1
 800b2da:	7803      	ldrb	r3, [r0, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1ef      	bne.n	800b2c0 <strstr+0x8>
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	e7ec      	b.n	800b2be <strstr+0x6>

0800b2e4 <_localeconv_r>:
 800b2e4:	4800      	ldr	r0, [pc, #0]	; (800b2e8 <_localeconv_r+0x4>)
 800b2e6:	4770      	bx	lr
 800b2e8:	20000158 	.word	0x20000158

0800b2ec <_close_r>:
 800b2ec:	b538      	push	{r3, r4, r5, lr}
 800b2ee:	4d06      	ldr	r5, [pc, #24]	; (800b308 <_close_r+0x1c>)
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	4608      	mov	r0, r1
 800b2f6:	602b      	str	r3, [r5, #0]
 800b2f8:	f7f6 f80e 	bl	8001318 <_close>
 800b2fc:	1c43      	adds	r3, r0, #1
 800b2fe:	d102      	bne.n	800b306 <_close_r+0x1a>
 800b300:	682b      	ldr	r3, [r5, #0]
 800b302:	b103      	cbz	r3, 800b306 <_close_r+0x1a>
 800b304:	6023      	str	r3, [r4, #0]
 800b306:	bd38      	pop	{r3, r4, r5, pc}
 800b308:	200032c8 	.word	0x200032c8

0800b30c <_lseek_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4d07      	ldr	r5, [pc, #28]	; (800b32c <_lseek_r+0x20>)
 800b310:	4604      	mov	r4, r0
 800b312:	4608      	mov	r0, r1
 800b314:	4611      	mov	r1, r2
 800b316:	2200      	movs	r2, #0
 800b318:	602a      	str	r2, [r5, #0]
 800b31a:	461a      	mov	r2, r3
 800b31c:	f7f6 f813 	bl	8001346 <_lseek>
 800b320:	1c43      	adds	r3, r0, #1
 800b322:	d102      	bne.n	800b32a <_lseek_r+0x1e>
 800b324:	682b      	ldr	r3, [r5, #0]
 800b326:	b103      	cbz	r3, 800b32a <_lseek_r+0x1e>
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	bd38      	pop	{r3, r4, r5, pc}
 800b32c:	200032c8 	.word	0x200032c8

0800b330 <_read_r>:
 800b330:	b538      	push	{r3, r4, r5, lr}
 800b332:	4d07      	ldr	r5, [pc, #28]	; (800b350 <_read_r+0x20>)
 800b334:	4604      	mov	r4, r0
 800b336:	4608      	mov	r0, r1
 800b338:	4611      	mov	r1, r2
 800b33a:	2200      	movs	r2, #0
 800b33c:	602a      	str	r2, [r5, #0]
 800b33e:	461a      	mov	r2, r3
 800b340:	f7f6 f812 	bl	8001368 <_read>
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	d102      	bne.n	800b34e <_read_r+0x1e>
 800b348:	682b      	ldr	r3, [r5, #0]
 800b34a:	b103      	cbz	r3, 800b34e <_read_r+0x1e>
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	bd38      	pop	{r3, r4, r5, pc}
 800b350:	200032c8 	.word	0x200032c8

0800b354 <_sbrk_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	4d06      	ldr	r5, [pc, #24]	; (800b370 <_sbrk_r+0x1c>)
 800b358:	2300      	movs	r3, #0
 800b35a:	4604      	mov	r4, r0
 800b35c:	4608      	mov	r0, r1
 800b35e:	602b      	str	r3, [r5, #0]
 800b360:	f7f6 facc 	bl	80018fc <_sbrk>
 800b364:	1c43      	adds	r3, r0, #1
 800b366:	d102      	bne.n	800b36e <_sbrk_r+0x1a>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	b103      	cbz	r3, 800b36e <_sbrk_r+0x1a>
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	bd38      	pop	{r3, r4, r5, pc}
 800b370:	200032c8 	.word	0x200032c8

0800b374 <_write_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	4d07      	ldr	r5, [pc, #28]	; (800b394 <_write_r+0x20>)
 800b378:	4604      	mov	r4, r0
 800b37a:	4608      	mov	r0, r1
 800b37c:	4611      	mov	r1, r2
 800b37e:	2200      	movs	r2, #0
 800b380:	602a      	str	r2, [r5, #0]
 800b382:	461a      	mov	r2, r3
 800b384:	f7f5 ff9c 	bl	80012c0 <_write>
 800b388:	1c43      	adds	r3, r0, #1
 800b38a:	d102      	bne.n	800b392 <_write_r+0x1e>
 800b38c:	682b      	ldr	r3, [r5, #0]
 800b38e:	b103      	cbz	r3, 800b392 <_write_r+0x1e>
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	bd38      	pop	{r3, r4, r5, pc}
 800b394:	200032c8 	.word	0x200032c8

0800b398 <__errno>:
 800b398:	4b01      	ldr	r3, [pc, #4]	; (800b3a0 <__errno+0x8>)
 800b39a:	6818      	ldr	r0, [r3, #0]
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	20000064 	.word	0x20000064

0800b3a4 <__libc_init_array>:
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	4d0d      	ldr	r5, [pc, #52]	; (800b3dc <__libc_init_array+0x38>)
 800b3a8:	4c0d      	ldr	r4, [pc, #52]	; (800b3e0 <__libc_init_array+0x3c>)
 800b3aa:	1b64      	subs	r4, r4, r5
 800b3ac:	10a4      	asrs	r4, r4, #2
 800b3ae:	2600      	movs	r6, #0
 800b3b0:	42a6      	cmp	r6, r4
 800b3b2:	d109      	bne.n	800b3c8 <__libc_init_array+0x24>
 800b3b4:	4d0b      	ldr	r5, [pc, #44]	; (800b3e4 <__libc_init_array+0x40>)
 800b3b6:	4c0c      	ldr	r4, [pc, #48]	; (800b3e8 <__libc_init_array+0x44>)
 800b3b8:	f003 fadc 	bl	800e974 <_init>
 800b3bc:	1b64      	subs	r4, r4, r5
 800b3be:	10a4      	asrs	r4, r4, #2
 800b3c0:	2600      	movs	r6, #0
 800b3c2:	42a6      	cmp	r6, r4
 800b3c4:	d105      	bne.n	800b3d2 <__libc_init_array+0x2e>
 800b3c6:	bd70      	pop	{r4, r5, r6, pc}
 800b3c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3cc:	4798      	blx	r3
 800b3ce:	3601      	adds	r6, #1
 800b3d0:	e7ee      	b.n	800b3b0 <__libc_init_array+0xc>
 800b3d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3d6:	4798      	blx	r3
 800b3d8:	3601      	adds	r6, #1
 800b3da:	e7f2      	b.n	800b3c2 <__libc_init_array+0x1e>
 800b3dc:	08016b90 	.word	0x08016b90
 800b3e0:	08016b90 	.word	0x08016b90
 800b3e4:	08016b90 	.word	0x08016b90
 800b3e8:	08016b94 	.word	0x08016b94

0800b3ec <__retarget_lock_init_recursive>:
 800b3ec:	4770      	bx	lr

0800b3ee <__retarget_lock_acquire_recursive>:
 800b3ee:	4770      	bx	lr

0800b3f0 <__retarget_lock_release_recursive>:
 800b3f0:	4770      	bx	lr

0800b3f2 <strcpy>:
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3f8:	f803 2b01 	strb.w	r2, [r3], #1
 800b3fc:	2a00      	cmp	r2, #0
 800b3fe:	d1f9      	bne.n	800b3f4 <strcpy+0x2>
 800b400:	4770      	bx	lr

0800b402 <memcpy>:
 800b402:	440a      	add	r2, r1
 800b404:	4291      	cmp	r1, r2
 800b406:	f100 33ff 	add.w	r3, r0, #4294967295
 800b40a:	d100      	bne.n	800b40e <memcpy+0xc>
 800b40c:	4770      	bx	lr
 800b40e:	b510      	push	{r4, lr}
 800b410:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b414:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b418:	4291      	cmp	r1, r2
 800b41a:	d1f9      	bne.n	800b410 <memcpy+0xe>
 800b41c:	bd10      	pop	{r4, pc}
	...

0800b420 <nanf>:
 800b420:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b428 <nanf+0x8>
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	7fc00000 	.word	0x7fc00000

0800b42c <quorem>:
 800b42c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	6903      	ldr	r3, [r0, #16]
 800b432:	690c      	ldr	r4, [r1, #16]
 800b434:	42a3      	cmp	r3, r4
 800b436:	4607      	mov	r7, r0
 800b438:	db7e      	blt.n	800b538 <quorem+0x10c>
 800b43a:	3c01      	subs	r4, #1
 800b43c:	f101 0814 	add.w	r8, r1, #20
 800b440:	f100 0514 	add.w	r5, r0, #20
 800b444:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b448:	9301      	str	r3, [sp, #4]
 800b44a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b44e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b452:	3301      	adds	r3, #1
 800b454:	429a      	cmp	r2, r3
 800b456:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b45a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b45e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b462:	d331      	bcc.n	800b4c8 <quorem+0x9c>
 800b464:	f04f 0e00 	mov.w	lr, #0
 800b468:	4640      	mov	r0, r8
 800b46a:	46ac      	mov	ip, r5
 800b46c:	46f2      	mov	sl, lr
 800b46e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b472:	b293      	uxth	r3, r2
 800b474:	fb06 e303 	mla	r3, r6, r3, lr
 800b478:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b47c:	0c1a      	lsrs	r2, r3, #16
 800b47e:	b29b      	uxth	r3, r3
 800b480:	ebaa 0303 	sub.w	r3, sl, r3
 800b484:	f8dc a000 	ldr.w	sl, [ip]
 800b488:	fa13 f38a 	uxtah	r3, r3, sl
 800b48c:	fb06 220e 	mla	r2, r6, lr, r2
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	9b00      	ldr	r3, [sp, #0]
 800b494:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b498:	b292      	uxth	r2, r2
 800b49a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b49e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4a2:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4a6:	4581      	cmp	r9, r0
 800b4a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4ac:	f84c 3b04 	str.w	r3, [ip], #4
 800b4b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4b4:	d2db      	bcs.n	800b46e <quorem+0x42>
 800b4b6:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4ba:	b92b      	cbnz	r3, 800b4c8 <quorem+0x9c>
 800b4bc:	9b01      	ldr	r3, [sp, #4]
 800b4be:	3b04      	subs	r3, #4
 800b4c0:	429d      	cmp	r5, r3
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	d32c      	bcc.n	800b520 <quorem+0xf4>
 800b4c6:	613c      	str	r4, [r7, #16]
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	f001 f8b7 	bl	800c63c <__mcmp>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	db22      	blt.n	800b518 <quorem+0xec>
 800b4d2:	3601      	adds	r6, #1
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b4dc:	f8d1 c000 	ldr.w	ip, [r1]
 800b4e0:	b293      	uxth	r3, r2
 800b4e2:	1ac3      	subs	r3, r0, r3
 800b4e4:	0c12      	lsrs	r2, r2, #16
 800b4e6:	fa13 f38c 	uxtah	r3, r3, ip
 800b4ea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b4ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4f8:	45c1      	cmp	r9, r8
 800b4fa:	f841 3b04 	str.w	r3, [r1], #4
 800b4fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b502:	d2e9      	bcs.n	800b4d8 <quorem+0xac>
 800b504:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b508:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b50c:	b922      	cbnz	r2, 800b518 <quorem+0xec>
 800b50e:	3b04      	subs	r3, #4
 800b510:	429d      	cmp	r5, r3
 800b512:	461a      	mov	r2, r3
 800b514:	d30a      	bcc.n	800b52c <quorem+0x100>
 800b516:	613c      	str	r4, [r7, #16]
 800b518:	4630      	mov	r0, r6
 800b51a:	b003      	add	sp, #12
 800b51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b520:	6812      	ldr	r2, [r2, #0]
 800b522:	3b04      	subs	r3, #4
 800b524:	2a00      	cmp	r2, #0
 800b526:	d1ce      	bne.n	800b4c6 <quorem+0x9a>
 800b528:	3c01      	subs	r4, #1
 800b52a:	e7c9      	b.n	800b4c0 <quorem+0x94>
 800b52c:	6812      	ldr	r2, [r2, #0]
 800b52e:	3b04      	subs	r3, #4
 800b530:	2a00      	cmp	r2, #0
 800b532:	d1f0      	bne.n	800b516 <quorem+0xea>
 800b534:	3c01      	subs	r4, #1
 800b536:	e7eb      	b.n	800b510 <quorem+0xe4>
 800b538:	2000      	movs	r0, #0
 800b53a:	e7ee      	b.n	800b51a <quorem+0xee>
 800b53c:	0000      	movs	r0, r0
	...

0800b540 <_dtoa_r>:
 800b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	ed2d 8b02 	vpush	{d8}
 800b548:	69c5      	ldr	r5, [r0, #28]
 800b54a:	b091      	sub	sp, #68	; 0x44
 800b54c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b550:	ec59 8b10 	vmov	r8, r9, d0
 800b554:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b556:	9106      	str	r1, [sp, #24]
 800b558:	4606      	mov	r6, r0
 800b55a:	9208      	str	r2, [sp, #32]
 800b55c:	930c      	str	r3, [sp, #48]	; 0x30
 800b55e:	b975      	cbnz	r5, 800b57e <_dtoa_r+0x3e>
 800b560:	2010      	movs	r0, #16
 800b562:	f7fe fc41 	bl	8009de8 <malloc>
 800b566:	4602      	mov	r2, r0
 800b568:	61f0      	str	r0, [r6, #28]
 800b56a:	b920      	cbnz	r0, 800b576 <_dtoa_r+0x36>
 800b56c:	4ba6      	ldr	r3, [pc, #664]	; (800b808 <_dtoa_r+0x2c8>)
 800b56e:	21ef      	movs	r1, #239	; 0xef
 800b570:	48a6      	ldr	r0, [pc, #664]	; (800b80c <_dtoa_r+0x2cc>)
 800b572:	f002 fc1d 	bl	800ddb0 <__assert_func>
 800b576:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b57a:	6005      	str	r5, [r0, #0]
 800b57c:	60c5      	str	r5, [r0, #12]
 800b57e:	69f3      	ldr	r3, [r6, #28]
 800b580:	6819      	ldr	r1, [r3, #0]
 800b582:	b151      	cbz	r1, 800b59a <_dtoa_r+0x5a>
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	604a      	str	r2, [r1, #4]
 800b588:	2301      	movs	r3, #1
 800b58a:	4093      	lsls	r3, r2
 800b58c:	608b      	str	r3, [r1, #8]
 800b58e:	4630      	mov	r0, r6
 800b590:	f000 fdce 	bl	800c130 <_Bfree>
 800b594:	69f3      	ldr	r3, [r6, #28]
 800b596:	2200      	movs	r2, #0
 800b598:	601a      	str	r2, [r3, #0]
 800b59a:	f1b9 0300 	subs.w	r3, r9, #0
 800b59e:	bfbb      	ittet	lt
 800b5a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5a4:	9303      	strlt	r3, [sp, #12]
 800b5a6:	2300      	movge	r3, #0
 800b5a8:	2201      	movlt	r2, #1
 800b5aa:	bfac      	ite	ge
 800b5ac:	6023      	strge	r3, [r4, #0]
 800b5ae:	6022      	strlt	r2, [r4, #0]
 800b5b0:	4b97      	ldr	r3, [pc, #604]	; (800b810 <_dtoa_r+0x2d0>)
 800b5b2:	9c03      	ldr	r4, [sp, #12]
 800b5b4:	43a3      	bics	r3, r4
 800b5b6:	d11c      	bne.n	800b5f2 <_dtoa_r+0xb2>
 800b5b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5be:	6013      	str	r3, [r2, #0]
 800b5c0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b5c4:	ea53 0308 	orrs.w	r3, r3, r8
 800b5c8:	f000 84fb 	beq.w	800bfc2 <_dtoa_r+0xa82>
 800b5cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b5ce:	b963      	cbnz	r3, 800b5ea <_dtoa_r+0xaa>
 800b5d0:	4b90      	ldr	r3, [pc, #576]	; (800b814 <_dtoa_r+0x2d4>)
 800b5d2:	e020      	b.n	800b616 <_dtoa_r+0xd6>
 800b5d4:	4b90      	ldr	r3, [pc, #576]	; (800b818 <_dtoa_r+0x2d8>)
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	3308      	adds	r3, #8
 800b5da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b5dc:	6013      	str	r3, [r2, #0]
 800b5de:	9801      	ldr	r0, [sp, #4]
 800b5e0:	b011      	add	sp, #68	; 0x44
 800b5e2:	ecbd 8b02 	vpop	{d8}
 800b5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ea:	4b8a      	ldr	r3, [pc, #552]	; (800b814 <_dtoa_r+0x2d4>)
 800b5ec:	9301      	str	r3, [sp, #4]
 800b5ee:	3303      	adds	r3, #3
 800b5f0:	e7f3      	b.n	800b5da <_dtoa_r+0x9a>
 800b5f2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b5f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5fe:	d10c      	bne.n	800b61a <_dtoa_r+0xda>
 800b600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b602:	2301      	movs	r3, #1
 800b604:	6013      	str	r3, [r2, #0]
 800b606:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f000 84d7 	beq.w	800bfbc <_dtoa_r+0xa7c>
 800b60e:	4b83      	ldr	r3, [pc, #524]	; (800b81c <_dtoa_r+0x2dc>)
 800b610:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	3b01      	subs	r3, #1
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	e7e1      	b.n	800b5de <_dtoa_r+0x9e>
 800b61a:	aa0e      	add	r2, sp, #56	; 0x38
 800b61c:	a90f      	add	r1, sp, #60	; 0x3c
 800b61e:	4630      	mov	r0, r6
 800b620:	eeb0 0b48 	vmov.f64	d0, d8
 800b624:	f001 f920 	bl	800c868 <__d2b>
 800b628:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b62c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b62e:	4605      	mov	r5, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d046      	beq.n	800b6c2 <_dtoa_r+0x182>
 800b634:	eeb0 7b48 	vmov.f64	d7, d8
 800b638:	ee18 1a90 	vmov	r1, s17
 800b63c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b640:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800b644:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b648:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b64c:	2000      	movs	r0, #0
 800b64e:	ee07 1a90 	vmov	s15, r1
 800b652:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800b656:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b7f0 <_dtoa_r+0x2b0>
 800b65a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b65e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800b7f8 <_dtoa_r+0x2b8>
 800b662:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b666:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b800 <_dtoa_r+0x2c0>
 800b66a:	ee07 3a90 	vmov	s15, r3
 800b66e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b672:	eeb0 7b46 	vmov.f64	d7, d6
 800b676:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b67a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b67e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b686:	ee16 ba90 	vmov	fp, s13
 800b68a:	9009      	str	r0, [sp, #36]	; 0x24
 800b68c:	d508      	bpl.n	800b6a0 <_dtoa_r+0x160>
 800b68e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b692:	eeb4 6b47 	vcmp.f64	d6, d7
 800b696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b69a:	bf18      	it	ne
 800b69c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b6a0:	f1bb 0f16 	cmp.w	fp, #22
 800b6a4:	d82b      	bhi.n	800b6fe <_dtoa_r+0x1be>
 800b6a6:	495e      	ldr	r1, [pc, #376]	; (800b820 <_dtoa_r+0x2e0>)
 800b6a8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800b6ac:	ed91 7b00 	vldr	d7, [r1]
 800b6b0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b8:	d501      	bpl.n	800b6be <_dtoa_r+0x17e>
 800b6ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6be:	2100      	movs	r1, #0
 800b6c0:	e01e      	b.n	800b700 <_dtoa_r+0x1c0>
 800b6c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6c4:	4413      	add	r3, r2
 800b6c6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800b6ca:	2920      	cmp	r1, #32
 800b6cc:	bfc1      	itttt	gt
 800b6ce:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800b6d2:	408c      	lslgt	r4, r1
 800b6d4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800b6d8:	fa28 f101 	lsrgt.w	r1, r8, r1
 800b6dc:	bfd6      	itet	le
 800b6de:	f1c1 0120 	rsble	r1, r1, #32
 800b6e2:	4321      	orrgt	r1, r4
 800b6e4:	fa08 f101 	lslle.w	r1, r8, r1
 800b6e8:	ee07 1a90 	vmov	s15, r1
 800b6ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	ee17 1a90 	vmov	r1, s15
 800b6f6:	2001      	movs	r0, #1
 800b6f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b6fc:	e7a7      	b.n	800b64e <_dtoa_r+0x10e>
 800b6fe:	2101      	movs	r1, #1
 800b700:	1ad2      	subs	r2, r2, r3
 800b702:	1e53      	subs	r3, r2, #1
 800b704:	9305      	str	r3, [sp, #20]
 800b706:	bf45      	ittet	mi
 800b708:	f1c2 0301 	rsbmi	r3, r2, #1
 800b70c:	9304      	strmi	r3, [sp, #16]
 800b70e:	2300      	movpl	r3, #0
 800b710:	2300      	movmi	r3, #0
 800b712:	bf4c      	ite	mi
 800b714:	9305      	strmi	r3, [sp, #20]
 800b716:	9304      	strpl	r3, [sp, #16]
 800b718:	f1bb 0f00 	cmp.w	fp, #0
 800b71c:	910b      	str	r1, [sp, #44]	; 0x2c
 800b71e:	db18      	blt.n	800b752 <_dtoa_r+0x212>
 800b720:	9b05      	ldr	r3, [sp, #20]
 800b722:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b726:	445b      	add	r3, fp
 800b728:	9305      	str	r3, [sp, #20]
 800b72a:	2300      	movs	r3, #0
 800b72c:	9a06      	ldr	r2, [sp, #24]
 800b72e:	2a09      	cmp	r2, #9
 800b730:	d848      	bhi.n	800b7c4 <_dtoa_r+0x284>
 800b732:	2a05      	cmp	r2, #5
 800b734:	bfc4      	itt	gt
 800b736:	3a04      	subgt	r2, #4
 800b738:	9206      	strgt	r2, [sp, #24]
 800b73a:	9a06      	ldr	r2, [sp, #24]
 800b73c:	f1a2 0202 	sub.w	r2, r2, #2
 800b740:	bfcc      	ite	gt
 800b742:	2400      	movgt	r4, #0
 800b744:	2401      	movle	r4, #1
 800b746:	2a03      	cmp	r2, #3
 800b748:	d847      	bhi.n	800b7da <_dtoa_r+0x29a>
 800b74a:	e8df f002 	tbb	[pc, r2]
 800b74e:	2d0b      	.short	0x2d0b
 800b750:	392b      	.short	0x392b
 800b752:	9b04      	ldr	r3, [sp, #16]
 800b754:	2200      	movs	r2, #0
 800b756:	eba3 030b 	sub.w	r3, r3, fp
 800b75a:	9304      	str	r3, [sp, #16]
 800b75c:	920a      	str	r2, [sp, #40]	; 0x28
 800b75e:	f1cb 0300 	rsb	r3, fp, #0
 800b762:	e7e3      	b.n	800b72c <_dtoa_r+0x1ec>
 800b764:	2200      	movs	r2, #0
 800b766:	9207      	str	r2, [sp, #28]
 800b768:	9a08      	ldr	r2, [sp, #32]
 800b76a:	2a00      	cmp	r2, #0
 800b76c:	dc38      	bgt.n	800b7e0 <_dtoa_r+0x2a0>
 800b76e:	f04f 0a01 	mov.w	sl, #1
 800b772:	46d1      	mov	r9, sl
 800b774:	4652      	mov	r2, sl
 800b776:	f8cd a020 	str.w	sl, [sp, #32]
 800b77a:	69f7      	ldr	r7, [r6, #28]
 800b77c:	2100      	movs	r1, #0
 800b77e:	2004      	movs	r0, #4
 800b780:	f100 0c14 	add.w	ip, r0, #20
 800b784:	4594      	cmp	ip, r2
 800b786:	d930      	bls.n	800b7ea <_dtoa_r+0x2aa>
 800b788:	6079      	str	r1, [r7, #4]
 800b78a:	4630      	mov	r0, r6
 800b78c:	930d      	str	r3, [sp, #52]	; 0x34
 800b78e:	f000 fc8f 	bl	800c0b0 <_Balloc>
 800b792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b794:	9001      	str	r0, [sp, #4]
 800b796:	4602      	mov	r2, r0
 800b798:	2800      	cmp	r0, #0
 800b79a:	d145      	bne.n	800b828 <_dtoa_r+0x2e8>
 800b79c:	4b21      	ldr	r3, [pc, #132]	; (800b824 <_dtoa_r+0x2e4>)
 800b79e:	f240 11af 	movw	r1, #431	; 0x1af
 800b7a2:	e6e5      	b.n	800b570 <_dtoa_r+0x30>
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	e7de      	b.n	800b766 <_dtoa_r+0x226>
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	9207      	str	r2, [sp, #28]
 800b7ac:	9a08      	ldr	r2, [sp, #32]
 800b7ae:	eb0b 0a02 	add.w	sl, fp, r2
 800b7b2:	f10a 0901 	add.w	r9, sl, #1
 800b7b6:	464a      	mov	r2, r9
 800b7b8:	2a01      	cmp	r2, #1
 800b7ba:	bfb8      	it	lt
 800b7bc:	2201      	movlt	r2, #1
 800b7be:	e7dc      	b.n	800b77a <_dtoa_r+0x23a>
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	e7f2      	b.n	800b7aa <_dtoa_r+0x26a>
 800b7c4:	2401      	movs	r4, #1
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b7cc:	f04f 3aff 	mov.w	sl, #4294967295
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	46d1      	mov	r9, sl
 800b7d4:	2212      	movs	r2, #18
 800b7d6:	9108      	str	r1, [sp, #32]
 800b7d8:	e7cf      	b.n	800b77a <_dtoa_r+0x23a>
 800b7da:	2201      	movs	r2, #1
 800b7dc:	9207      	str	r2, [sp, #28]
 800b7de:	e7f5      	b.n	800b7cc <_dtoa_r+0x28c>
 800b7e0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b7e4:	46d1      	mov	r9, sl
 800b7e6:	4652      	mov	r2, sl
 800b7e8:	e7c7      	b.n	800b77a <_dtoa_r+0x23a>
 800b7ea:	3101      	adds	r1, #1
 800b7ec:	0040      	lsls	r0, r0, #1
 800b7ee:	e7c7      	b.n	800b780 <_dtoa_r+0x240>
 800b7f0:	636f4361 	.word	0x636f4361
 800b7f4:	3fd287a7 	.word	0x3fd287a7
 800b7f8:	8b60c8b3 	.word	0x8b60c8b3
 800b7fc:	3fc68a28 	.word	0x3fc68a28
 800b800:	509f79fb 	.word	0x509f79fb
 800b804:	3fd34413 	.word	0x3fd34413
 800b808:	08016017 	.word	0x08016017
 800b80c:	0801602e 	.word	0x0801602e
 800b810:	7ff00000 	.word	0x7ff00000
 800b814:	08016013 	.word	0x08016013
 800b818:	0801600a 	.word	0x0801600a
 800b81c:	08015fe2 	.word	0x08015fe2
 800b820:	08016118 	.word	0x08016118
 800b824:	08016086 	.word	0x08016086
 800b828:	69f2      	ldr	r2, [r6, #28]
 800b82a:	9901      	ldr	r1, [sp, #4]
 800b82c:	6011      	str	r1, [r2, #0]
 800b82e:	f1b9 0f0e 	cmp.w	r9, #14
 800b832:	d86c      	bhi.n	800b90e <_dtoa_r+0x3ce>
 800b834:	2c00      	cmp	r4, #0
 800b836:	d06a      	beq.n	800b90e <_dtoa_r+0x3ce>
 800b838:	f1bb 0f00 	cmp.w	fp, #0
 800b83c:	f340 80a0 	ble.w	800b980 <_dtoa_r+0x440>
 800b840:	4ac1      	ldr	r2, [pc, #772]	; (800bb48 <_dtoa_r+0x608>)
 800b842:	f00b 010f 	and.w	r1, fp, #15
 800b846:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b84a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b84e:	ed92 7b00 	vldr	d7, [r2]
 800b852:	ea4f 122b 	mov.w	r2, fp, asr #4
 800b856:	f000 8087 	beq.w	800b968 <_dtoa_r+0x428>
 800b85a:	49bc      	ldr	r1, [pc, #752]	; (800bb4c <_dtoa_r+0x60c>)
 800b85c:	ed91 6b08 	vldr	d6, [r1, #32]
 800b860:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b864:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b868:	f002 020f 	and.w	r2, r2, #15
 800b86c:	2103      	movs	r1, #3
 800b86e:	48b7      	ldr	r0, [pc, #732]	; (800bb4c <_dtoa_r+0x60c>)
 800b870:	2a00      	cmp	r2, #0
 800b872:	d17b      	bne.n	800b96c <_dtoa_r+0x42c>
 800b874:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b878:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b87c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b882:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b886:	2a00      	cmp	r2, #0
 800b888:	f000 80a0 	beq.w	800b9cc <_dtoa_r+0x48c>
 800b88c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b890:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b898:	f140 8098 	bpl.w	800b9cc <_dtoa_r+0x48c>
 800b89c:	f1b9 0f00 	cmp.w	r9, #0
 800b8a0:	f000 8094 	beq.w	800b9cc <_dtoa_r+0x48c>
 800b8a4:	f1ba 0f00 	cmp.w	sl, #0
 800b8a8:	dd2f      	ble.n	800b90a <_dtoa_r+0x3ca>
 800b8aa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b8ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b8b2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b8b6:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b8ba:	3101      	adds	r1, #1
 800b8bc:	4654      	mov	r4, sl
 800b8be:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b8c2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b8c6:	ee07 1a90 	vmov	s15, r1
 800b8ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b8ce:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b8d2:	ee15 7a90 	vmov	r7, s11
 800b8d6:	ec51 0b15 	vmov	r0, r1, d5
 800b8da:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800b8de:	2c00      	cmp	r4, #0
 800b8e0:	d177      	bne.n	800b9d2 <_dtoa_r+0x492>
 800b8e2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b8e6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b8ea:	ec41 0b17 	vmov	d7, r0, r1
 800b8ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f6:	f300 826a 	bgt.w	800bdce <_dtoa_r+0x88e>
 800b8fa:	eeb1 7b47 	vneg.f64	d7, d7
 800b8fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b906:	f100 8260 	bmi.w	800bdca <_dtoa_r+0x88a>
 800b90a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b90e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b910:	2a00      	cmp	r2, #0
 800b912:	f2c0 811d 	blt.w	800bb50 <_dtoa_r+0x610>
 800b916:	f1bb 0f0e 	cmp.w	fp, #14
 800b91a:	f300 8119 	bgt.w	800bb50 <_dtoa_r+0x610>
 800b91e:	4b8a      	ldr	r3, [pc, #552]	; (800bb48 <_dtoa_r+0x608>)
 800b920:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b924:	ed93 6b00 	vldr	d6, [r3]
 800b928:	9b08      	ldr	r3, [sp, #32]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	f280 80b7 	bge.w	800ba9e <_dtoa_r+0x55e>
 800b930:	f1b9 0f00 	cmp.w	r9, #0
 800b934:	f300 80b3 	bgt.w	800ba9e <_dtoa_r+0x55e>
 800b938:	f040 8246 	bne.w	800bdc8 <_dtoa_r+0x888>
 800b93c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b940:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b944:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b948:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b950:	464c      	mov	r4, r9
 800b952:	464f      	mov	r7, r9
 800b954:	f280 821c 	bge.w	800bd90 <_dtoa_r+0x850>
 800b958:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b95c:	2331      	movs	r3, #49	; 0x31
 800b95e:	f808 3b01 	strb.w	r3, [r8], #1
 800b962:	f10b 0b01 	add.w	fp, fp, #1
 800b966:	e218      	b.n	800bd9a <_dtoa_r+0x85a>
 800b968:	2102      	movs	r1, #2
 800b96a:	e780      	b.n	800b86e <_dtoa_r+0x32e>
 800b96c:	07d4      	lsls	r4, r2, #31
 800b96e:	d504      	bpl.n	800b97a <_dtoa_r+0x43a>
 800b970:	ed90 6b00 	vldr	d6, [r0]
 800b974:	3101      	adds	r1, #1
 800b976:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b97a:	1052      	asrs	r2, r2, #1
 800b97c:	3008      	adds	r0, #8
 800b97e:	e777      	b.n	800b870 <_dtoa_r+0x330>
 800b980:	d022      	beq.n	800b9c8 <_dtoa_r+0x488>
 800b982:	f1cb 0200 	rsb	r2, fp, #0
 800b986:	4970      	ldr	r1, [pc, #448]	; (800bb48 <_dtoa_r+0x608>)
 800b988:	f002 000f 	and.w	r0, r2, #15
 800b98c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b990:	ed91 7b00 	vldr	d7, [r1]
 800b994:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b998:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b99c:	486b      	ldr	r0, [pc, #428]	; (800bb4c <_dtoa_r+0x60c>)
 800b99e:	1112      	asrs	r2, r2, #4
 800b9a0:	2400      	movs	r4, #0
 800b9a2:	2102      	movs	r1, #2
 800b9a4:	b92a      	cbnz	r2, 800b9b2 <_dtoa_r+0x472>
 800b9a6:	2c00      	cmp	r4, #0
 800b9a8:	f43f af6a 	beq.w	800b880 <_dtoa_r+0x340>
 800b9ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b9b0:	e766      	b.n	800b880 <_dtoa_r+0x340>
 800b9b2:	07d7      	lsls	r7, r2, #31
 800b9b4:	d505      	bpl.n	800b9c2 <_dtoa_r+0x482>
 800b9b6:	ed90 6b00 	vldr	d6, [r0]
 800b9ba:	3101      	adds	r1, #1
 800b9bc:	2401      	movs	r4, #1
 800b9be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b9c2:	1052      	asrs	r2, r2, #1
 800b9c4:	3008      	adds	r0, #8
 800b9c6:	e7ed      	b.n	800b9a4 <_dtoa_r+0x464>
 800b9c8:	2102      	movs	r1, #2
 800b9ca:	e759      	b.n	800b880 <_dtoa_r+0x340>
 800b9cc:	465a      	mov	r2, fp
 800b9ce:	464c      	mov	r4, r9
 800b9d0:	e775      	b.n	800b8be <_dtoa_r+0x37e>
 800b9d2:	ec41 0b17 	vmov	d7, r0, r1
 800b9d6:	495c      	ldr	r1, [pc, #368]	; (800bb48 <_dtoa_r+0x608>)
 800b9d8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800b9dc:	ed11 4b02 	vldr	d4, [r1, #-8]
 800b9e0:	9901      	ldr	r1, [sp, #4]
 800b9e2:	440c      	add	r4, r1
 800b9e4:	9907      	ldr	r1, [sp, #28]
 800b9e6:	b351      	cbz	r1, 800ba3e <_dtoa_r+0x4fe>
 800b9e8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b9ec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b9f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b9f4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b9f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b9fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ba00:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ba04:	ee14 1a90 	vmov	r1, s9
 800ba08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ba0c:	3130      	adds	r1, #48	; 0x30
 800ba0e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ba12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba1a:	f808 1b01 	strb.w	r1, [r8], #1
 800ba1e:	d439      	bmi.n	800ba94 <_dtoa_r+0x554>
 800ba20:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ba24:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ba28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba2c:	d472      	bmi.n	800bb14 <_dtoa_r+0x5d4>
 800ba2e:	45a0      	cmp	r8, r4
 800ba30:	f43f af6b 	beq.w	800b90a <_dtoa_r+0x3ca>
 800ba34:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ba38:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ba3c:	e7e0      	b.n	800ba00 <_dtoa_r+0x4c0>
 800ba3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ba42:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ba46:	4620      	mov	r0, r4
 800ba48:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ba4c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ba50:	ee14 1a90 	vmov	r1, s9
 800ba54:	3130      	adds	r1, #48	; 0x30
 800ba56:	f808 1b01 	strb.w	r1, [r8], #1
 800ba5a:	45a0      	cmp	r8, r4
 800ba5c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ba60:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ba64:	d118      	bne.n	800ba98 <_dtoa_r+0x558>
 800ba66:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ba6a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ba6e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ba72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba76:	dc4d      	bgt.n	800bb14 <_dtoa_r+0x5d4>
 800ba78:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ba7c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ba80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba84:	f57f af41 	bpl.w	800b90a <_dtoa_r+0x3ca>
 800ba88:	4680      	mov	r8, r0
 800ba8a:	3801      	subs	r0, #1
 800ba8c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ba90:	2b30      	cmp	r3, #48	; 0x30
 800ba92:	d0f9      	beq.n	800ba88 <_dtoa_r+0x548>
 800ba94:	4693      	mov	fp, r2
 800ba96:	e02a      	b.n	800baee <_dtoa_r+0x5ae>
 800ba98:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ba9c:	e7d6      	b.n	800ba4c <_dtoa_r+0x50c>
 800ba9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800baa2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800baa6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800baaa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800baae:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bab2:	ee15 3a10 	vmov	r3, s10
 800bab6:	3330      	adds	r3, #48	; 0x30
 800bab8:	f808 3b01 	strb.w	r3, [r8], #1
 800babc:	9b01      	ldr	r3, [sp, #4]
 800babe:	eba8 0303 	sub.w	r3, r8, r3
 800bac2:	4599      	cmp	r9, r3
 800bac4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bac8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bacc:	d133      	bne.n	800bb36 <_dtoa_r+0x5f6>
 800bace:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bad2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bada:	dc1a      	bgt.n	800bb12 <_dtoa_r+0x5d2>
 800badc:	eeb4 7b46 	vcmp.f64	d7, d6
 800bae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bae4:	d103      	bne.n	800baee <_dtoa_r+0x5ae>
 800bae6:	ee15 3a10 	vmov	r3, s10
 800baea:	07d9      	lsls	r1, r3, #31
 800baec:	d411      	bmi.n	800bb12 <_dtoa_r+0x5d2>
 800baee:	4629      	mov	r1, r5
 800baf0:	4630      	mov	r0, r6
 800baf2:	f000 fb1d 	bl	800c130 <_Bfree>
 800baf6:	2300      	movs	r3, #0
 800baf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bafa:	f888 3000 	strb.w	r3, [r8]
 800bafe:	f10b 0301 	add.w	r3, fp, #1
 800bb02:	6013      	str	r3, [r2, #0]
 800bb04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f43f ad69 	beq.w	800b5de <_dtoa_r+0x9e>
 800bb0c:	f8c3 8000 	str.w	r8, [r3]
 800bb10:	e565      	b.n	800b5de <_dtoa_r+0x9e>
 800bb12:	465a      	mov	r2, fp
 800bb14:	4643      	mov	r3, r8
 800bb16:	4698      	mov	r8, r3
 800bb18:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800bb1c:	2939      	cmp	r1, #57	; 0x39
 800bb1e:	d106      	bne.n	800bb2e <_dtoa_r+0x5ee>
 800bb20:	9901      	ldr	r1, [sp, #4]
 800bb22:	4299      	cmp	r1, r3
 800bb24:	d1f7      	bne.n	800bb16 <_dtoa_r+0x5d6>
 800bb26:	9801      	ldr	r0, [sp, #4]
 800bb28:	2130      	movs	r1, #48	; 0x30
 800bb2a:	3201      	adds	r2, #1
 800bb2c:	7001      	strb	r1, [r0, #0]
 800bb2e:	7819      	ldrb	r1, [r3, #0]
 800bb30:	3101      	adds	r1, #1
 800bb32:	7019      	strb	r1, [r3, #0]
 800bb34:	e7ae      	b.n	800ba94 <_dtoa_r+0x554>
 800bb36:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bb3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb42:	d1b2      	bne.n	800baaa <_dtoa_r+0x56a>
 800bb44:	e7d3      	b.n	800baee <_dtoa_r+0x5ae>
 800bb46:	bf00      	nop
 800bb48:	08016118 	.word	0x08016118
 800bb4c:	080160f0 	.word	0x080160f0
 800bb50:	9907      	ldr	r1, [sp, #28]
 800bb52:	2900      	cmp	r1, #0
 800bb54:	f000 80d0 	beq.w	800bcf8 <_dtoa_r+0x7b8>
 800bb58:	9906      	ldr	r1, [sp, #24]
 800bb5a:	2901      	cmp	r1, #1
 800bb5c:	f300 80b4 	bgt.w	800bcc8 <_dtoa_r+0x788>
 800bb60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb62:	2900      	cmp	r1, #0
 800bb64:	f000 80ac 	beq.w	800bcc0 <_dtoa_r+0x780>
 800bb68:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bb6c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bb70:	461c      	mov	r4, r3
 800bb72:	9309      	str	r3, [sp, #36]	; 0x24
 800bb74:	9b04      	ldr	r3, [sp, #16]
 800bb76:	4413      	add	r3, r2
 800bb78:	9304      	str	r3, [sp, #16]
 800bb7a:	9b05      	ldr	r3, [sp, #20]
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	4413      	add	r3, r2
 800bb80:	4630      	mov	r0, r6
 800bb82:	9305      	str	r3, [sp, #20]
 800bb84:	f000 fbd4 	bl	800c330 <__i2b>
 800bb88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb8a:	4607      	mov	r7, r0
 800bb8c:	f1b8 0f00 	cmp.w	r8, #0
 800bb90:	d00d      	beq.n	800bbae <_dtoa_r+0x66e>
 800bb92:	9a05      	ldr	r2, [sp, #20]
 800bb94:	2a00      	cmp	r2, #0
 800bb96:	dd0a      	ble.n	800bbae <_dtoa_r+0x66e>
 800bb98:	4542      	cmp	r2, r8
 800bb9a:	9904      	ldr	r1, [sp, #16]
 800bb9c:	bfa8      	it	ge
 800bb9e:	4642      	movge	r2, r8
 800bba0:	1a89      	subs	r1, r1, r2
 800bba2:	9104      	str	r1, [sp, #16]
 800bba4:	9905      	ldr	r1, [sp, #20]
 800bba6:	eba8 0802 	sub.w	r8, r8, r2
 800bbaa:	1a8a      	subs	r2, r1, r2
 800bbac:	9205      	str	r2, [sp, #20]
 800bbae:	b303      	cbz	r3, 800bbf2 <_dtoa_r+0x6b2>
 800bbb0:	9a07      	ldr	r2, [sp, #28]
 800bbb2:	2a00      	cmp	r2, #0
 800bbb4:	f000 80a5 	beq.w	800bd02 <_dtoa_r+0x7c2>
 800bbb8:	2c00      	cmp	r4, #0
 800bbba:	dd13      	ble.n	800bbe4 <_dtoa_r+0x6a4>
 800bbbc:	4639      	mov	r1, r7
 800bbbe:	4622      	mov	r2, r4
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	930d      	str	r3, [sp, #52]	; 0x34
 800bbc4:	f000 fc74 	bl	800c4b0 <__pow5mult>
 800bbc8:	462a      	mov	r2, r5
 800bbca:	4601      	mov	r1, r0
 800bbcc:	4607      	mov	r7, r0
 800bbce:	4630      	mov	r0, r6
 800bbd0:	f000 fbc4 	bl	800c35c <__multiply>
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	9009      	str	r0, [sp, #36]	; 0x24
 800bbd8:	4630      	mov	r0, r6
 800bbda:	f000 faa9 	bl	800c130 <_Bfree>
 800bbde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbe2:	4615      	mov	r5, r2
 800bbe4:	1b1a      	subs	r2, r3, r4
 800bbe6:	d004      	beq.n	800bbf2 <_dtoa_r+0x6b2>
 800bbe8:	4629      	mov	r1, r5
 800bbea:	4630      	mov	r0, r6
 800bbec:	f000 fc60 	bl	800c4b0 <__pow5mult>
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	2101      	movs	r1, #1
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f000 fb9b 	bl	800c330 <__i2b>
 800bbfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	4604      	mov	r4, r0
 800bc00:	f340 8081 	ble.w	800bd06 <_dtoa_r+0x7c6>
 800bc04:	461a      	mov	r2, r3
 800bc06:	4601      	mov	r1, r0
 800bc08:	4630      	mov	r0, r6
 800bc0a:	f000 fc51 	bl	800c4b0 <__pow5mult>
 800bc0e:	9b06      	ldr	r3, [sp, #24]
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	4604      	mov	r4, r0
 800bc14:	dd7a      	ble.n	800bd0c <_dtoa_r+0x7cc>
 800bc16:	2300      	movs	r3, #0
 800bc18:	9309      	str	r3, [sp, #36]	; 0x24
 800bc1a:	6922      	ldr	r2, [r4, #16]
 800bc1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bc20:	6910      	ldr	r0, [r2, #16]
 800bc22:	f000 fb37 	bl	800c294 <__hi0bits>
 800bc26:	f1c0 0020 	rsb	r0, r0, #32
 800bc2a:	9b05      	ldr	r3, [sp, #20]
 800bc2c:	4418      	add	r0, r3
 800bc2e:	f010 001f 	ands.w	r0, r0, #31
 800bc32:	f000 8093 	beq.w	800bd5c <_dtoa_r+0x81c>
 800bc36:	f1c0 0220 	rsb	r2, r0, #32
 800bc3a:	2a04      	cmp	r2, #4
 800bc3c:	f340 8085 	ble.w	800bd4a <_dtoa_r+0x80a>
 800bc40:	9b04      	ldr	r3, [sp, #16]
 800bc42:	f1c0 001c 	rsb	r0, r0, #28
 800bc46:	4403      	add	r3, r0
 800bc48:	9304      	str	r3, [sp, #16]
 800bc4a:	9b05      	ldr	r3, [sp, #20]
 800bc4c:	4480      	add	r8, r0
 800bc4e:	4403      	add	r3, r0
 800bc50:	9305      	str	r3, [sp, #20]
 800bc52:	9b04      	ldr	r3, [sp, #16]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	dd05      	ble.n	800bc64 <_dtoa_r+0x724>
 800bc58:	4629      	mov	r1, r5
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f000 fc81 	bl	800c564 <__lshift>
 800bc62:	4605      	mov	r5, r0
 800bc64:	9b05      	ldr	r3, [sp, #20]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	dd05      	ble.n	800bc76 <_dtoa_r+0x736>
 800bc6a:	4621      	mov	r1, r4
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f000 fc78 	bl	800c564 <__lshift>
 800bc74:	4604      	mov	r4, r0
 800bc76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d071      	beq.n	800bd60 <_dtoa_r+0x820>
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f000 fcdc 	bl	800c63c <__mcmp>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	da6b      	bge.n	800bd60 <_dtoa_r+0x820>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	4629      	mov	r1, r5
 800bc8c:	220a      	movs	r2, #10
 800bc8e:	4630      	mov	r0, r6
 800bc90:	f000 fa70 	bl	800c174 <__multadd>
 800bc94:	9b07      	ldr	r3, [sp, #28]
 800bc96:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc9a:	4605      	mov	r5, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f000 8197 	beq.w	800bfd0 <_dtoa_r+0xa90>
 800bca2:	4639      	mov	r1, r7
 800bca4:	2300      	movs	r3, #0
 800bca6:	220a      	movs	r2, #10
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f000 fa63 	bl	800c174 <__multadd>
 800bcae:	f1ba 0f00 	cmp.w	sl, #0
 800bcb2:	4607      	mov	r7, r0
 800bcb4:	f300 8093 	bgt.w	800bdde <_dtoa_r+0x89e>
 800bcb8:	9b06      	ldr	r3, [sp, #24]
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	dc57      	bgt.n	800bd6e <_dtoa_r+0x82e>
 800bcbe:	e08e      	b.n	800bdde <_dtoa_r+0x89e>
 800bcc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcc2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bcc6:	e751      	b.n	800bb6c <_dtoa_r+0x62c>
 800bcc8:	f109 34ff 	add.w	r4, r9, #4294967295
 800bccc:	42a3      	cmp	r3, r4
 800bcce:	bfbf      	itttt	lt
 800bcd0:	1ae2      	sublt	r2, r4, r3
 800bcd2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bcd4:	189b      	addlt	r3, r3, r2
 800bcd6:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bcd8:	bfae      	itee	ge
 800bcda:	1b1c      	subge	r4, r3, r4
 800bcdc:	4623      	movlt	r3, r4
 800bcde:	2400      	movlt	r4, #0
 800bce0:	f1b9 0f00 	cmp.w	r9, #0
 800bce4:	bfb5      	itete	lt
 800bce6:	9a04      	ldrlt	r2, [sp, #16]
 800bce8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800bcec:	eba2 0809 	sublt.w	r8, r2, r9
 800bcf0:	464a      	movge	r2, r9
 800bcf2:	bfb8      	it	lt
 800bcf4:	2200      	movlt	r2, #0
 800bcf6:	e73c      	b.n	800bb72 <_dtoa_r+0x632>
 800bcf8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bcfc:	9f07      	ldr	r7, [sp, #28]
 800bcfe:	461c      	mov	r4, r3
 800bd00:	e744      	b.n	800bb8c <_dtoa_r+0x64c>
 800bd02:	461a      	mov	r2, r3
 800bd04:	e770      	b.n	800bbe8 <_dtoa_r+0x6a8>
 800bd06:	9b06      	ldr	r3, [sp, #24]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	dc18      	bgt.n	800bd3e <_dtoa_r+0x7fe>
 800bd0c:	9b02      	ldr	r3, [sp, #8]
 800bd0e:	b9b3      	cbnz	r3, 800bd3e <_dtoa_r+0x7fe>
 800bd10:	9b03      	ldr	r3, [sp, #12]
 800bd12:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bd16:	b9a2      	cbnz	r2, 800bd42 <_dtoa_r+0x802>
 800bd18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bd1c:	0d12      	lsrs	r2, r2, #20
 800bd1e:	0512      	lsls	r2, r2, #20
 800bd20:	b18a      	cbz	r2, 800bd46 <_dtoa_r+0x806>
 800bd22:	9b04      	ldr	r3, [sp, #16]
 800bd24:	3301      	adds	r3, #1
 800bd26:	9304      	str	r3, [sp, #16]
 800bd28:	9b05      	ldr	r3, [sp, #20]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	9305      	str	r3, [sp, #20]
 800bd2e:	2301      	movs	r3, #1
 800bd30:	9309      	str	r3, [sp, #36]	; 0x24
 800bd32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f47f af70 	bne.w	800bc1a <_dtoa_r+0x6da>
 800bd3a:	2001      	movs	r0, #1
 800bd3c:	e775      	b.n	800bc2a <_dtoa_r+0x6ea>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e7f6      	b.n	800bd30 <_dtoa_r+0x7f0>
 800bd42:	9b02      	ldr	r3, [sp, #8]
 800bd44:	e7f4      	b.n	800bd30 <_dtoa_r+0x7f0>
 800bd46:	9209      	str	r2, [sp, #36]	; 0x24
 800bd48:	e7f3      	b.n	800bd32 <_dtoa_r+0x7f2>
 800bd4a:	d082      	beq.n	800bc52 <_dtoa_r+0x712>
 800bd4c:	9b04      	ldr	r3, [sp, #16]
 800bd4e:	321c      	adds	r2, #28
 800bd50:	4413      	add	r3, r2
 800bd52:	9304      	str	r3, [sp, #16]
 800bd54:	9b05      	ldr	r3, [sp, #20]
 800bd56:	4490      	add	r8, r2
 800bd58:	4413      	add	r3, r2
 800bd5a:	e779      	b.n	800bc50 <_dtoa_r+0x710>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	e7f5      	b.n	800bd4c <_dtoa_r+0x80c>
 800bd60:	f1b9 0f00 	cmp.w	r9, #0
 800bd64:	dc36      	bgt.n	800bdd4 <_dtoa_r+0x894>
 800bd66:	9b06      	ldr	r3, [sp, #24]
 800bd68:	2b02      	cmp	r3, #2
 800bd6a:	dd33      	ble.n	800bdd4 <_dtoa_r+0x894>
 800bd6c:	46ca      	mov	sl, r9
 800bd6e:	f1ba 0f00 	cmp.w	sl, #0
 800bd72:	d10d      	bne.n	800bd90 <_dtoa_r+0x850>
 800bd74:	4621      	mov	r1, r4
 800bd76:	4653      	mov	r3, sl
 800bd78:	2205      	movs	r2, #5
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f000 f9fa 	bl	800c174 <__multadd>
 800bd80:	4601      	mov	r1, r0
 800bd82:	4604      	mov	r4, r0
 800bd84:	4628      	mov	r0, r5
 800bd86:	f000 fc59 	bl	800c63c <__mcmp>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	f73f ade4 	bgt.w	800b958 <_dtoa_r+0x418>
 800bd90:	9b08      	ldr	r3, [sp, #32]
 800bd92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bd96:	ea6f 0b03 	mvn.w	fp, r3
 800bd9a:	f04f 0900 	mov.w	r9, #0
 800bd9e:	4621      	mov	r1, r4
 800bda0:	4630      	mov	r0, r6
 800bda2:	f000 f9c5 	bl	800c130 <_Bfree>
 800bda6:	2f00      	cmp	r7, #0
 800bda8:	f43f aea1 	beq.w	800baee <_dtoa_r+0x5ae>
 800bdac:	f1b9 0f00 	cmp.w	r9, #0
 800bdb0:	d005      	beq.n	800bdbe <_dtoa_r+0x87e>
 800bdb2:	45b9      	cmp	r9, r7
 800bdb4:	d003      	beq.n	800bdbe <_dtoa_r+0x87e>
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	4630      	mov	r0, r6
 800bdba:	f000 f9b9 	bl	800c130 <_Bfree>
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f000 f9b5 	bl	800c130 <_Bfree>
 800bdc6:	e692      	b.n	800baee <_dtoa_r+0x5ae>
 800bdc8:	2400      	movs	r4, #0
 800bdca:	4627      	mov	r7, r4
 800bdcc:	e7e0      	b.n	800bd90 <_dtoa_r+0x850>
 800bdce:	4693      	mov	fp, r2
 800bdd0:	4627      	mov	r7, r4
 800bdd2:	e5c1      	b.n	800b958 <_dtoa_r+0x418>
 800bdd4:	9b07      	ldr	r3, [sp, #28]
 800bdd6:	46ca      	mov	sl, r9
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f000 8100 	beq.w	800bfde <_dtoa_r+0xa9e>
 800bdde:	f1b8 0f00 	cmp.w	r8, #0
 800bde2:	dd05      	ble.n	800bdf0 <_dtoa_r+0x8b0>
 800bde4:	4639      	mov	r1, r7
 800bde6:	4642      	mov	r2, r8
 800bde8:	4630      	mov	r0, r6
 800bdea:	f000 fbbb 	bl	800c564 <__lshift>
 800bdee:	4607      	mov	r7, r0
 800bdf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d05d      	beq.n	800beb2 <_dtoa_r+0x972>
 800bdf6:	6879      	ldr	r1, [r7, #4]
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f000 f959 	bl	800c0b0 <_Balloc>
 800bdfe:	4680      	mov	r8, r0
 800be00:	b928      	cbnz	r0, 800be0e <_dtoa_r+0x8ce>
 800be02:	4b82      	ldr	r3, [pc, #520]	; (800c00c <_dtoa_r+0xacc>)
 800be04:	4602      	mov	r2, r0
 800be06:	f240 21ef 	movw	r1, #751	; 0x2ef
 800be0a:	f7ff bbb1 	b.w	800b570 <_dtoa_r+0x30>
 800be0e:	693a      	ldr	r2, [r7, #16]
 800be10:	3202      	adds	r2, #2
 800be12:	0092      	lsls	r2, r2, #2
 800be14:	f107 010c 	add.w	r1, r7, #12
 800be18:	300c      	adds	r0, #12
 800be1a:	f7ff faf2 	bl	800b402 <memcpy>
 800be1e:	2201      	movs	r2, #1
 800be20:	4641      	mov	r1, r8
 800be22:	4630      	mov	r0, r6
 800be24:	f000 fb9e 	bl	800c564 <__lshift>
 800be28:	9b01      	ldr	r3, [sp, #4]
 800be2a:	3301      	adds	r3, #1
 800be2c:	9304      	str	r3, [sp, #16]
 800be2e:	9b01      	ldr	r3, [sp, #4]
 800be30:	4453      	add	r3, sl
 800be32:	9308      	str	r3, [sp, #32]
 800be34:	9b02      	ldr	r3, [sp, #8]
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	46b9      	mov	r9, r7
 800be3c:	9307      	str	r3, [sp, #28]
 800be3e:	4607      	mov	r7, r0
 800be40:	9b04      	ldr	r3, [sp, #16]
 800be42:	4621      	mov	r1, r4
 800be44:	3b01      	subs	r3, #1
 800be46:	4628      	mov	r0, r5
 800be48:	9302      	str	r3, [sp, #8]
 800be4a:	f7ff faef 	bl	800b42c <quorem>
 800be4e:	4603      	mov	r3, r0
 800be50:	3330      	adds	r3, #48	; 0x30
 800be52:	9005      	str	r0, [sp, #20]
 800be54:	4649      	mov	r1, r9
 800be56:	4628      	mov	r0, r5
 800be58:	9309      	str	r3, [sp, #36]	; 0x24
 800be5a:	f000 fbef 	bl	800c63c <__mcmp>
 800be5e:	463a      	mov	r2, r7
 800be60:	4682      	mov	sl, r0
 800be62:	4621      	mov	r1, r4
 800be64:	4630      	mov	r0, r6
 800be66:	f000 fc05 	bl	800c674 <__mdiff>
 800be6a:	68c2      	ldr	r2, [r0, #12]
 800be6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be6e:	4680      	mov	r8, r0
 800be70:	bb0a      	cbnz	r2, 800beb6 <_dtoa_r+0x976>
 800be72:	4601      	mov	r1, r0
 800be74:	4628      	mov	r0, r5
 800be76:	f000 fbe1 	bl	800c63c <__mcmp>
 800be7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be7c:	4602      	mov	r2, r0
 800be7e:	4641      	mov	r1, r8
 800be80:	4630      	mov	r0, r6
 800be82:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800be86:	f000 f953 	bl	800c130 <_Bfree>
 800be8a:	9b06      	ldr	r3, [sp, #24]
 800be8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be8e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800be92:	ea43 0102 	orr.w	r1, r3, r2
 800be96:	9b07      	ldr	r3, [sp, #28]
 800be98:	4319      	orrs	r1, r3
 800be9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be9c:	d10d      	bne.n	800beba <_dtoa_r+0x97a>
 800be9e:	2b39      	cmp	r3, #57	; 0x39
 800bea0:	d029      	beq.n	800bef6 <_dtoa_r+0x9b6>
 800bea2:	f1ba 0f00 	cmp.w	sl, #0
 800bea6:	dd01      	ble.n	800beac <_dtoa_r+0x96c>
 800bea8:	9b05      	ldr	r3, [sp, #20]
 800beaa:	3331      	adds	r3, #49	; 0x31
 800beac:	9a02      	ldr	r2, [sp, #8]
 800beae:	7013      	strb	r3, [r2, #0]
 800beb0:	e775      	b.n	800bd9e <_dtoa_r+0x85e>
 800beb2:	4638      	mov	r0, r7
 800beb4:	e7b8      	b.n	800be28 <_dtoa_r+0x8e8>
 800beb6:	2201      	movs	r2, #1
 800beb8:	e7e1      	b.n	800be7e <_dtoa_r+0x93e>
 800beba:	f1ba 0f00 	cmp.w	sl, #0
 800bebe:	db06      	blt.n	800bece <_dtoa_r+0x98e>
 800bec0:	9906      	ldr	r1, [sp, #24]
 800bec2:	ea41 0a0a 	orr.w	sl, r1, sl
 800bec6:	9907      	ldr	r1, [sp, #28]
 800bec8:	ea5a 0a01 	orrs.w	sl, sl, r1
 800becc:	d120      	bne.n	800bf10 <_dtoa_r+0x9d0>
 800bece:	2a00      	cmp	r2, #0
 800bed0:	ddec      	ble.n	800beac <_dtoa_r+0x96c>
 800bed2:	4629      	mov	r1, r5
 800bed4:	2201      	movs	r2, #1
 800bed6:	4630      	mov	r0, r6
 800bed8:	9304      	str	r3, [sp, #16]
 800beda:	f000 fb43 	bl	800c564 <__lshift>
 800bede:	4621      	mov	r1, r4
 800bee0:	4605      	mov	r5, r0
 800bee2:	f000 fbab 	bl	800c63c <__mcmp>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	9b04      	ldr	r3, [sp, #16]
 800beea:	dc02      	bgt.n	800bef2 <_dtoa_r+0x9b2>
 800beec:	d1de      	bne.n	800beac <_dtoa_r+0x96c>
 800beee:	07da      	lsls	r2, r3, #31
 800bef0:	d5dc      	bpl.n	800beac <_dtoa_r+0x96c>
 800bef2:	2b39      	cmp	r3, #57	; 0x39
 800bef4:	d1d8      	bne.n	800bea8 <_dtoa_r+0x968>
 800bef6:	9a02      	ldr	r2, [sp, #8]
 800bef8:	2339      	movs	r3, #57	; 0x39
 800befa:	7013      	strb	r3, [r2, #0]
 800befc:	4643      	mov	r3, r8
 800befe:	4698      	mov	r8, r3
 800bf00:	3b01      	subs	r3, #1
 800bf02:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800bf06:	2a39      	cmp	r2, #57	; 0x39
 800bf08:	d051      	beq.n	800bfae <_dtoa_r+0xa6e>
 800bf0a:	3201      	adds	r2, #1
 800bf0c:	701a      	strb	r2, [r3, #0]
 800bf0e:	e746      	b.n	800bd9e <_dtoa_r+0x85e>
 800bf10:	2a00      	cmp	r2, #0
 800bf12:	dd03      	ble.n	800bf1c <_dtoa_r+0x9dc>
 800bf14:	2b39      	cmp	r3, #57	; 0x39
 800bf16:	d0ee      	beq.n	800bef6 <_dtoa_r+0x9b6>
 800bf18:	3301      	adds	r3, #1
 800bf1a:	e7c7      	b.n	800beac <_dtoa_r+0x96c>
 800bf1c:	9a04      	ldr	r2, [sp, #16]
 800bf1e:	9908      	ldr	r1, [sp, #32]
 800bf20:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bf24:	428a      	cmp	r2, r1
 800bf26:	d02b      	beq.n	800bf80 <_dtoa_r+0xa40>
 800bf28:	4629      	mov	r1, r5
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	220a      	movs	r2, #10
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f000 f920 	bl	800c174 <__multadd>
 800bf34:	45b9      	cmp	r9, r7
 800bf36:	4605      	mov	r5, r0
 800bf38:	f04f 0300 	mov.w	r3, #0
 800bf3c:	f04f 020a 	mov.w	r2, #10
 800bf40:	4649      	mov	r1, r9
 800bf42:	4630      	mov	r0, r6
 800bf44:	d107      	bne.n	800bf56 <_dtoa_r+0xa16>
 800bf46:	f000 f915 	bl	800c174 <__multadd>
 800bf4a:	4681      	mov	r9, r0
 800bf4c:	4607      	mov	r7, r0
 800bf4e:	9b04      	ldr	r3, [sp, #16]
 800bf50:	3301      	adds	r3, #1
 800bf52:	9304      	str	r3, [sp, #16]
 800bf54:	e774      	b.n	800be40 <_dtoa_r+0x900>
 800bf56:	f000 f90d 	bl	800c174 <__multadd>
 800bf5a:	4639      	mov	r1, r7
 800bf5c:	4681      	mov	r9, r0
 800bf5e:	2300      	movs	r3, #0
 800bf60:	220a      	movs	r2, #10
 800bf62:	4630      	mov	r0, r6
 800bf64:	f000 f906 	bl	800c174 <__multadd>
 800bf68:	4607      	mov	r7, r0
 800bf6a:	e7f0      	b.n	800bf4e <_dtoa_r+0xa0e>
 800bf6c:	f1ba 0f00 	cmp.w	sl, #0
 800bf70:	9a01      	ldr	r2, [sp, #4]
 800bf72:	bfcc      	ite	gt
 800bf74:	46d0      	movgt	r8, sl
 800bf76:	f04f 0801 	movle.w	r8, #1
 800bf7a:	4490      	add	r8, r2
 800bf7c:	f04f 0900 	mov.w	r9, #0
 800bf80:	4629      	mov	r1, r5
 800bf82:	2201      	movs	r2, #1
 800bf84:	4630      	mov	r0, r6
 800bf86:	9302      	str	r3, [sp, #8]
 800bf88:	f000 faec 	bl	800c564 <__lshift>
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	4605      	mov	r5, r0
 800bf90:	f000 fb54 	bl	800c63c <__mcmp>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	dcb1      	bgt.n	800befc <_dtoa_r+0x9bc>
 800bf98:	d102      	bne.n	800bfa0 <_dtoa_r+0xa60>
 800bf9a:	9b02      	ldr	r3, [sp, #8]
 800bf9c:	07db      	lsls	r3, r3, #31
 800bf9e:	d4ad      	bmi.n	800befc <_dtoa_r+0x9bc>
 800bfa0:	4643      	mov	r3, r8
 800bfa2:	4698      	mov	r8, r3
 800bfa4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfa8:	2a30      	cmp	r2, #48	; 0x30
 800bfaa:	d0fa      	beq.n	800bfa2 <_dtoa_r+0xa62>
 800bfac:	e6f7      	b.n	800bd9e <_dtoa_r+0x85e>
 800bfae:	9a01      	ldr	r2, [sp, #4]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d1a4      	bne.n	800befe <_dtoa_r+0x9be>
 800bfb4:	f10b 0b01 	add.w	fp, fp, #1
 800bfb8:	2331      	movs	r3, #49	; 0x31
 800bfba:	e778      	b.n	800beae <_dtoa_r+0x96e>
 800bfbc:	4b14      	ldr	r3, [pc, #80]	; (800c010 <_dtoa_r+0xad0>)
 800bfbe:	f7ff bb2a 	b.w	800b616 <_dtoa_r+0xd6>
 800bfc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f47f ab05 	bne.w	800b5d4 <_dtoa_r+0x94>
 800bfca:	4b12      	ldr	r3, [pc, #72]	; (800c014 <_dtoa_r+0xad4>)
 800bfcc:	f7ff bb23 	b.w	800b616 <_dtoa_r+0xd6>
 800bfd0:	f1ba 0f00 	cmp.w	sl, #0
 800bfd4:	dc03      	bgt.n	800bfde <_dtoa_r+0xa9e>
 800bfd6:	9b06      	ldr	r3, [sp, #24]
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	f73f aec8 	bgt.w	800bd6e <_dtoa_r+0x82e>
 800bfde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	f7ff fa21 	bl	800b42c <quorem>
 800bfea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bfee:	f808 3b01 	strb.w	r3, [r8], #1
 800bff2:	9a01      	ldr	r2, [sp, #4]
 800bff4:	eba8 0202 	sub.w	r2, r8, r2
 800bff8:	4592      	cmp	sl, r2
 800bffa:	ddb7      	ble.n	800bf6c <_dtoa_r+0xa2c>
 800bffc:	4629      	mov	r1, r5
 800bffe:	2300      	movs	r3, #0
 800c000:	220a      	movs	r2, #10
 800c002:	4630      	mov	r0, r6
 800c004:	f000 f8b6 	bl	800c174 <__multadd>
 800c008:	4605      	mov	r5, r0
 800c00a:	e7ea      	b.n	800bfe2 <_dtoa_r+0xaa2>
 800c00c:	08016086 	.word	0x08016086
 800c010:	08015fe1 	.word	0x08015fe1
 800c014:	0801600a 	.word	0x0801600a

0800c018 <_free_r>:
 800c018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c01a:	2900      	cmp	r1, #0
 800c01c:	d044      	beq.n	800c0a8 <_free_r+0x90>
 800c01e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c022:	9001      	str	r0, [sp, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	f1a1 0404 	sub.w	r4, r1, #4
 800c02a:	bfb8      	it	lt
 800c02c:	18e4      	addlt	r4, r4, r3
 800c02e:	f7fd ff8b 	bl	8009f48 <__malloc_lock>
 800c032:	4a1e      	ldr	r2, [pc, #120]	; (800c0ac <_free_r+0x94>)
 800c034:	9801      	ldr	r0, [sp, #4]
 800c036:	6813      	ldr	r3, [r2, #0]
 800c038:	b933      	cbnz	r3, 800c048 <_free_r+0x30>
 800c03a:	6063      	str	r3, [r4, #4]
 800c03c:	6014      	str	r4, [r2, #0]
 800c03e:	b003      	add	sp, #12
 800c040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c044:	f7fd bf86 	b.w	8009f54 <__malloc_unlock>
 800c048:	42a3      	cmp	r3, r4
 800c04a:	d908      	bls.n	800c05e <_free_r+0x46>
 800c04c:	6825      	ldr	r5, [r4, #0]
 800c04e:	1961      	adds	r1, r4, r5
 800c050:	428b      	cmp	r3, r1
 800c052:	bf01      	itttt	eq
 800c054:	6819      	ldreq	r1, [r3, #0]
 800c056:	685b      	ldreq	r3, [r3, #4]
 800c058:	1949      	addeq	r1, r1, r5
 800c05a:	6021      	streq	r1, [r4, #0]
 800c05c:	e7ed      	b.n	800c03a <_free_r+0x22>
 800c05e:	461a      	mov	r2, r3
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	b10b      	cbz	r3, 800c068 <_free_r+0x50>
 800c064:	42a3      	cmp	r3, r4
 800c066:	d9fa      	bls.n	800c05e <_free_r+0x46>
 800c068:	6811      	ldr	r1, [r2, #0]
 800c06a:	1855      	adds	r5, r2, r1
 800c06c:	42a5      	cmp	r5, r4
 800c06e:	d10b      	bne.n	800c088 <_free_r+0x70>
 800c070:	6824      	ldr	r4, [r4, #0]
 800c072:	4421      	add	r1, r4
 800c074:	1854      	adds	r4, r2, r1
 800c076:	42a3      	cmp	r3, r4
 800c078:	6011      	str	r1, [r2, #0]
 800c07a:	d1e0      	bne.n	800c03e <_free_r+0x26>
 800c07c:	681c      	ldr	r4, [r3, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	6053      	str	r3, [r2, #4]
 800c082:	440c      	add	r4, r1
 800c084:	6014      	str	r4, [r2, #0]
 800c086:	e7da      	b.n	800c03e <_free_r+0x26>
 800c088:	d902      	bls.n	800c090 <_free_r+0x78>
 800c08a:	230c      	movs	r3, #12
 800c08c:	6003      	str	r3, [r0, #0]
 800c08e:	e7d6      	b.n	800c03e <_free_r+0x26>
 800c090:	6825      	ldr	r5, [r4, #0]
 800c092:	1961      	adds	r1, r4, r5
 800c094:	428b      	cmp	r3, r1
 800c096:	bf04      	itt	eq
 800c098:	6819      	ldreq	r1, [r3, #0]
 800c09a:	685b      	ldreq	r3, [r3, #4]
 800c09c:	6063      	str	r3, [r4, #4]
 800c09e:	bf04      	itt	eq
 800c0a0:	1949      	addeq	r1, r1, r5
 800c0a2:	6021      	streq	r1, [r4, #0]
 800c0a4:	6054      	str	r4, [r2, #4]
 800c0a6:	e7ca      	b.n	800c03e <_free_r+0x26>
 800c0a8:	b003      	add	sp, #12
 800c0aa:	bd30      	pop	{r4, r5, pc}
 800c0ac:	20003184 	.word	0x20003184

0800c0b0 <_Balloc>:
 800c0b0:	b570      	push	{r4, r5, r6, lr}
 800c0b2:	69c6      	ldr	r6, [r0, #28]
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	460d      	mov	r5, r1
 800c0b8:	b976      	cbnz	r6, 800c0d8 <_Balloc+0x28>
 800c0ba:	2010      	movs	r0, #16
 800c0bc:	f7fd fe94 	bl	8009de8 <malloc>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	61e0      	str	r0, [r4, #28]
 800c0c4:	b920      	cbnz	r0, 800c0d0 <_Balloc+0x20>
 800c0c6:	4b18      	ldr	r3, [pc, #96]	; (800c128 <_Balloc+0x78>)
 800c0c8:	4818      	ldr	r0, [pc, #96]	; (800c12c <_Balloc+0x7c>)
 800c0ca:	216b      	movs	r1, #107	; 0x6b
 800c0cc:	f001 fe70 	bl	800ddb0 <__assert_func>
 800c0d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0d4:	6006      	str	r6, [r0, #0]
 800c0d6:	60c6      	str	r6, [r0, #12]
 800c0d8:	69e6      	ldr	r6, [r4, #28]
 800c0da:	68f3      	ldr	r3, [r6, #12]
 800c0dc:	b183      	cbz	r3, 800c100 <_Balloc+0x50>
 800c0de:	69e3      	ldr	r3, [r4, #28]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0e6:	b9b8      	cbnz	r0, 800c118 <_Balloc+0x68>
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	fa01 f605 	lsl.w	r6, r1, r5
 800c0ee:	1d72      	adds	r2, r6, #5
 800c0f0:	0092      	lsls	r2, r2, #2
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f7fd fe50 	bl	8009d98 <_calloc_r>
 800c0f8:	b160      	cbz	r0, 800c114 <_Balloc+0x64>
 800c0fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0fe:	e00e      	b.n	800c11e <_Balloc+0x6e>
 800c100:	2221      	movs	r2, #33	; 0x21
 800c102:	2104      	movs	r1, #4
 800c104:	4620      	mov	r0, r4
 800c106:	f7fd fe47 	bl	8009d98 <_calloc_r>
 800c10a:	69e3      	ldr	r3, [r4, #28]
 800c10c:	60f0      	str	r0, [r6, #12]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d1e4      	bne.n	800c0de <_Balloc+0x2e>
 800c114:	2000      	movs	r0, #0
 800c116:	bd70      	pop	{r4, r5, r6, pc}
 800c118:	6802      	ldr	r2, [r0, #0]
 800c11a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c11e:	2300      	movs	r3, #0
 800c120:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c124:	e7f7      	b.n	800c116 <_Balloc+0x66>
 800c126:	bf00      	nop
 800c128:	08016017 	.word	0x08016017
 800c12c:	08016097 	.word	0x08016097

0800c130 <_Bfree>:
 800c130:	b570      	push	{r4, r5, r6, lr}
 800c132:	69c6      	ldr	r6, [r0, #28]
 800c134:	4605      	mov	r5, r0
 800c136:	460c      	mov	r4, r1
 800c138:	b976      	cbnz	r6, 800c158 <_Bfree+0x28>
 800c13a:	2010      	movs	r0, #16
 800c13c:	f7fd fe54 	bl	8009de8 <malloc>
 800c140:	4602      	mov	r2, r0
 800c142:	61e8      	str	r0, [r5, #28]
 800c144:	b920      	cbnz	r0, 800c150 <_Bfree+0x20>
 800c146:	4b09      	ldr	r3, [pc, #36]	; (800c16c <_Bfree+0x3c>)
 800c148:	4809      	ldr	r0, [pc, #36]	; (800c170 <_Bfree+0x40>)
 800c14a:	218f      	movs	r1, #143	; 0x8f
 800c14c:	f001 fe30 	bl	800ddb0 <__assert_func>
 800c150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c154:	6006      	str	r6, [r0, #0]
 800c156:	60c6      	str	r6, [r0, #12]
 800c158:	b13c      	cbz	r4, 800c16a <_Bfree+0x3a>
 800c15a:	69eb      	ldr	r3, [r5, #28]
 800c15c:	6862      	ldr	r2, [r4, #4]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c164:	6021      	str	r1, [r4, #0]
 800c166:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c16a:	bd70      	pop	{r4, r5, r6, pc}
 800c16c:	08016017 	.word	0x08016017
 800c170:	08016097 	.word	0x08016097

0800c174 <__multadd>:
 800c174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c178:	690d      	ldr	r5, [r1, #16]
 800c17a:	4607      	mov	r7, r0
 800c17c:	460c      	mov	r4, r1
 800c17e:	461e      	mov	r6, r3
 800c180:	f101 0c14 	add.w	ip, r1, #20
 800c184:	2000      	movs	r0, #0
 800c186:	f8dc 3000 	ldr.w	r3, [ip]
 800c18a:	b299      	uxth	r1, r3
 800c18c:	fb02 6101 	mla	r1, r2, r1, r6
 800c190:	0c1e      	lsrs	r6, r3, #16
 800c192:	0c0b      	lsrs	r3, r1, #16
 800c194:	fb02 3306 	mla	r3, r2, r6, r3
 800c198:	b289      	uxth	r1, r1
 800c19a:	3001      	adds	r0, #1
 800c19c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1a0:	4285      	cmp	r5, r0
 800c1a2:	f84c 1b04 	str.w	r1, [ip], #4
 800c1a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1aa:	dcec      	bgt.n	800c186 <__multadd+0x12>
 800c1ac:	b30e      	cbz	r6, 800c1f2 <__multadd+0x7e>
 800c1ae:	68a3      	ldr	r3, [r4, #8]
 800c1b0:	42ab      	cmp	r3, r5
 800c1b2:	dc19      	bgt.n	800c1e8 <__multadd+0x74>
 800c1b4:	6861      	ldr	r1, [r4, #4]
 800c1b6:	4638      	mov	r0, r7
 800c1b8:	3101      	adds	r1, #1
 800c1ba:	f7ff ff79 	bl	800c0b0 <_Balloc>
 800c1be:	4680      	mov	r8, r0
 800c1c0:	b928      	cbnz	r0, 800c1ce <__multadd+0x5a>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	4b0c      	ldr	r3, [pc, #48]	; (800c1f8 <__multadd+0x84>)
 800c1c6:	480d      	ldr	r0, [pc, #52]	; (800c1fc <__multadd+0x88>)
 800c1c8:	21ba      	movs	r1, #186	; 0xba
 800c1ca:	f001 fdf1 	bl	800ddb0 <__assert_func>
 800c1ce:	6922      	ldr	r2, [r4, #16]
 800c1d0:	3202      	adds	r2, #2
 800c1d2:	f104 010c 	add.w	r1, r4, #12
 800c1d6:	0092      	lsls	r2, r2, #2
 800c1d8:	300c      	adds	r0, #12
 800c1da:	f7ff f912 	bl	800b402 <memcpy>
 800c1de:	4621      	mov	r1, r4
 800c1e0:	4638      	mov	r0, r7
 800c1e2:	f7ff ffa5 	bl	800c130 <_Bfree>
 800c1e6:	4644      	mov	r4, r8
 800c1e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1ec:	3501      	adds	r5, #1
 800c1ee:	615e      	str	r6, [r3, #20]
 800c1f0:	6125      	str	r5, [r4, #16]
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f8:	08016086 	.word	0x08016086
 800c1fc:	08016097 	.word	0x08016097

0800c200 <__s2b>:
 800c200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c204:	460c      	mov	r4, r1
 800c206:	4615      	mov	r5, r2
 800c208:	461f      	mov	r7, r3
 800c20a:	2209      	movs	r2, #9
 800c20c:	3308      	adds	r3, #8
 800c20e:	4606      	mov	r6, r0
 800c210:	fb93 f3f2 	sdiv	r3, r3, r2
 800c214:	2100      	movs	r1, #0
 800c216:	2201      	movs	r2, #1
 800c218:	429a      	cmp	r2, r3
 800c21a:	db09      	blt.n	800c230 <__s2b+0x30>
 800c21c:	4630      	mov	r0, r6
 800c21e:	f7ff ff47 	bl	800c0b0 <_Balloc>
 800c222:	b940      	cbnz	r0, 800c236 <__s2b+0x36>
 800c224:	4602      	mov	r2, r0
 800c226:	4b19      	ldr	r3, [pc, #100]	; (800c28c <__s2b+0x8c>)
 800c228:	4819      	ldr	r0, [pc, #100]	; (800c290 <__s2b+0x90>)
 800c22a:	21d3      	movs	r1, #211	; 0xd3
 800c22c:	f001 fdc0 	bl	800ddb0 <__assert_func>
 800c230:	0052      	lsls	r2, r2, #1
 800c232:	3101      	adds	r1, #1
 800c234:	e7f0      	b.n	800c218 <__s2b+0x18>
 800c236:	9b08      	ldr	r3, [sp, #32]
 800c238:	6143      	str	r3, [r0, #20]
 800c23a:	2d09      	cmp	r5, #9
 800c23c:	f04f 0301 	mov.w	r3, #1
 800c240:	6103      	str	r3, [r0, #16]
 800c242:	dd16      	ble.n	800c272 <__s2b+0x72>
 800c244:	f104 0909 	add.w	r9, r4, #9
 800c248:	46c8      	mov	r8, r9
 800c24a:	442c      	add	r4, r5
 800c24c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c250:	4601      	mov	r1, r0
 800c252:	3b30      	subs	r3, #48	; 0x30
 800c254:	220a      	movs	r2, #10
 800c256:	4630      	mov	r0, r6
 800c258:	f7ff ff8c 	bl	800c174 <__multadd>
 800c25c:	45a0      	cmp	r8, r4
 800c25e:	d1f5      	bne.n	800c24c <__s2b+0x4c>
 800c260:	f1a5 0408 	sub.w	r4, r5, #8
 800c264:	444c      	add	r4, r9
 800c266:	1b2d      	subs	r5, r5, r4
 800c268:	1963      	adds	r3, r4, r5
 800c26a:	42bb      	cmp	r3, r7
 800c26c:	db04      	blt.n	800c278 <__s2b+0x78>
 800c26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c272:	340a      	adds	r4, #10
 800c274:	2509      	movs	r5, #9
 800c276:	e7f6      	b.n	800c266 <__s2b+0x66>
 800c278:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c27c:	4601      	mov	r1, r0
 800c27e:	3b30      	subs	r3, #48	; 0x30
 800c280:	220a      	movs	r2, #10
 800c282:	4630      	mov	r0, r6
 800c284:	f7ff ff76 	bl	800c174 <__multadd>
 800c288:	e7ee      	b.n	800c268 <__s2b+0x68>
 800c28a:	bf00      	nop
 800c28c:	08016086 	.word	0x08016086
 800c290:	08016097 	.word	0x08016097

0800c294 <__hi0bits>:
 800c294:	0c03      	lsrs	r3, r0, #16
 800c296:	041b      	lsls	r3, r3, #16
 800c298:	b9d3      	cbnz	r3, 800c2d0 <__hi0bits+0x3c>
 800c29a:	0400      	lsls	r0, r0, #16
 800c29c:	2310      	movs	r3, #16
 800c29e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c2a2:	bf04      	itt	eq
 800c2a4:	0200      	lsleq	r0, r0, #8
 800c2a6:	3308      	addeq	r3, #8
 800c2a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c2ac:	bf04      	itt	eq
 800c2ae:	0100      	lsleq	r0, r0, #4
 800c2b0:	3304      	addeq	r3, #4
 800c2b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c2b6:	bf04      	itt	eq
 800c2b8:	0080      	lsleq	r0, r0, #2
 800c2ba:	3302      	addeq	r3, #2
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	db05      	blt.n	800c2cc <__hi0bits+0x38>
 800c2c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c2c4:	f103 0301 	add.w	r3, r3, #1
 800c2c8:	bf08      	it	eq
 800c2ca:	2320      	moveq	r3, #32
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	4770      	bx	lr
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	e7e4      	b.n	800c29e <__hi0bits+0xa>

0800c2d4 <__lo0bits>:
 800c2d4:	6803      	ldr	r3, [r0, #0]
 800c2d6:	f013 0207 	ands.w	r2, r3, #7
 800c2da:	d00c      	beq.n	800c2f6 <__lo0bits+0x22>
 800c2dc:	07d9      	lsls	r1, r3, #31
 800c2de:	d422      	bmi.n	800c326 <__lo0bits+0x52>
 800c2e0:	079a      	lsls	r2, r3, #30
 800c2e2:	bf49      	itett	mi
 800c2e4:	085b      	lsrmi	r3, r3, #1
 800c2e6:	089b      	lsrpl	r3, r3, #2
 800c2e8:	6003      	strmi	r3, [r0, #0]
 800c2ea:	2201      	movmi	r2, #1
 800c2ec:	bf5c      	itt	pl
 800c2ee:	6003      	strpl	r3, [r0, #0]
 800c2f0:	2202      	movpl	r2, #2
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	4770      	bx	lr
 800c2f6:	b299      	uxth	r1, r3
 800c2f8:	b909      	cbnz	r1, 800c2fe <__lo0bits+0x2a>
 800c2fa:	0c1b      	lsrs	r3, r3, #16
 800c2fc:	2210      	movs	r2, #16
 800c2fe:	b2d9      	uxtb	r1, r3
 800c300:	b909      	cbnz	r1, 800c306 <__lo0bits+0x32>
 800c302:	3208      	adds	r2, #8
 800c304:	0a1b      	lsrs	r3, r3, #8
 800c306:	0719      	lsls	r1, r3, #28
 800c308:	bf04      	itt	eq
 800c30a:	091b      	lsreq	r3, r3, #4
 800c30c:	3204      	addeq	r2, #4
 800c30e:	0799      	lsls	r1, r3, #30
 800c310:	bf04      	itt	eq
 800c312:	089b      	lsreq	r3, r3, #2
 800c314:	3202      	addeq	r2, #2
 800c316:	07d9      	lsls	r1, r3, #31
 800c318:	d403      	bmi.n	800c322 <__lo0bits+0x4e>
 800c31a:	085b      	lsrs	r3, r3, #1
 800c31c:	f102 0201 	add.w	r2, r2, #1
 800c320:	d003      	beq.n	800c32a <__lo0bits+0x56>
 800c322:	6003      	str	r3, [r0, #0]
 800c324:	e7e5      	b.n	800c2f2 <__lo0bits+0x1e>
 800c326:	2200      	movs	r2, #0
 800c328:	e7e3      	b.n	800c2f2 <__lo0bits+0x1e>
 800c32a:	2220      	movs	r2, #32
 800c32c:	e7e1      	b.n	800c2f2 <__lo0bits+0x1e>
	...

0800c330 <__i2b>:
 800c330:	b510      	push	{r4, lr}
 800c332:	460c      	mov	r4, r1
 800c334:	2101      	movs	r1, #1
 800c336:	f7ff febb 	bl	800c0b0 <_Balloc>
 800c33a:	4602      	mov	r2, r0
 800c33c:	b928      	cbnz	r0, 800c34a <__i2b+0x1a>
 800c33e:	4b05      	ldr	r3, [pc, #20]	; (800c354 <__i2b+0x24>)
 800c340:	4805      	ldr	r0, [pc, #20]	; (800c358 <__i2b+0x28>)
 800c342:	f240 1145 	movw	r1, #325	; 0x145
 800c346:	f001 fd33 	bl	800ddb0 <__assert_func>
 800c34a:	2301      	movs	r3, #1
 800c34c:	6144      	str	r4, [r0, #20]
 800c34e:	6103      	str	r3, [r0, #16]
 800c350:	bd10      	pop	{r4, pc}
 800c352:	bf00      	nop
 800c354:	08016086 	.word	0x08016086
 800c358:	08016097 	.word	0x08016097

0800c35c <__multiply>:
 800c35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c360:	4691      	mov	r9, r2
 800c362:	690a      	ldr	r2, [r1, #16]
 800c364:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c368:	429a      	cmp	r2, r3
 800c36a:	bfb8      	it	lt
 800c36c:	460b      	movlt	r3, r1
 800c36e:	460c      	mov	r4, r1
 800c370:	bfbc      	itt	lt
 800c372:	464c      	movlt	r4, r9
 800c374:	4699      	movlt	r9, r3
 800c376:	6927      	ldr	r7, [r4, #16]
 800c378:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c37c:	68a3      	ldr	r3, [r4, #8]
 800c37e:	6861      	ldr	r1, [r4, #4]
 800c380:	eb07 060a 	add.w	r6, r7, sl
 800c384:	42b3      	cmp	r3, r6
 800c386:	b085      	sub	sp, #20
 800c388:	bfb8      	it	lt
 800c38a:	3101      	addlt	r1, #1
 800c38c:	f7ff fe90 	bl	800c0b0 <_Balloc>
 800c390:	b930      	cbnz	r0, 800c3a0 <__multiply+0x44>
 800c392:	4602      	mov	r2, r0
 800c394:	4b44      	ldr	r3, [pc, #272]	; (800c4a8 <__multiply+0x14c>)
 800c396:	4845      	ldr	r0, [pc, #276]	; (800c4ac <__multiply+0x150>)
 800c398:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c39c:	f001 fd08 	bl	800ddb0 <__assert_func>
 800c3a0:	f100 0514 	add.w	r5, r0, #20
 800c3a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3a8:	462b      	mov	r3, r5
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	4543      	cmp	r3, r8
 800c3ae:	d321      	bcc.n	800c3f4 <__multiply+0x98>
 800c3b0:	f104 0314 	add.w	r3, r4, #20
 800c3b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c3b8:	f109 0314 	add.w	r3, r9, #20
 800c3bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c3c0:	9202      	str	r2, [sp, #8]
 800c3c2:	1b3a      	subs	r2, r7, r4
 800c3c4:	3a15      	subs	r2, #21
 800c3c6:	f022 0203 	bic.w	r2, r2, #3
 800c3ca:	3204      	adds	r2, #4
 800c3cc:	f104 0115 	add.w	r1, r4, #21
 800c3d0:	428f      	cmp	r7, r1
 800c3d2:	bf38      	it	cc
 800c3d4:	2204      	movcc	r2, #4
 800c3d6:	9201      	str	r2, [sp, #4]
 800c3d8:	9a02      	ldr	r2, [sp, #8]
 800c3da:	9303      	str	r3, [sp, #12]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d80c      	bhi.n	800c3fa <__multiply+0x9e>
 800c3e0:	2e00      	cmp	r6, #0
 800c3e2:	dd03      	ble.n	800c3ec <__multiply+0x90>
 800c3e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d05b      	beq.n	800c4a4 <__multiply+0x148>
 800c3ec:	6106      	str	r6, [r0, #16]
 800c3ee:	b005      	add	sp, #20
 800c3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f4:	f843 2b04 	str.w	r2, [r3], #4
 800c3f8:	e7d8      	b.n	800c3ac <__multiply+0x50>
 800c3fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800c3fe:	f1ba 0f00 	cmp.w	sl, #0
 800c402:	d024      	beq.n	800c44e <__multiply+0xf2>
 800c404:	f104 0e14 	add.w	lr, r4, #20
 800c408:	46a9      	mov	r9, r5
 800c40a:	f04f 0c00 	mov.w	ip, #0
 800c40e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c412:	f8d9 1000 	ldr.w	r1, [r9]
 800c416:	fa1f fb82 	uxth.w	fp, r2
 800c41a:	b289      	uxth	r1, r1
 800c41c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c420:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c424:	f8d9 2000 	ldr.w	r2, [r9]
 800c428:	4461      	add	r1, ip
 800c42a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c42e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c432:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c436:	b289      	uxth	r1, r1
 800c438:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c43c:	4577      	cmp	r7, lr
 800c43e:	f849 1b04 	str.w	r1, [r9], #4
 800c442:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c446:	d8e2      	bhi.n	800c40e <__multiply+0xb2>
 800c448:	9a01      	ldr	r2, [sp, #4]
 800c44a:	f845 c002 	str.w	ip, [r5, r2]
 800c44e:	9a03      	ldr	r2, [sp, #12]
 800c450:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c454:	3304      	adds	r3, #4
 800c456:	f1b9 0f00 	cmp.w	r9, #0
 800c45a:	d021      	beq.n	800c4a0 <__multiply+0x144>
 800c45c:	6829      	ldr	r1, [r5, #0]
 800c45e:	f104 0c14 	add.w	ip, r4, #20
 800c462:	46ae      	mov	lr, r5
 800c464:	f04f 0a00 	mov.w	sl, #0
 800c468:	f8bc b000 	ldrh.w	fp, [ip]
 800c46c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c470:	fb09 220b 	mla	r2, r9, fp, r2
 800c474:	4452      	add	r2, sl
 800c476:	b289      	uxth	r1, r1
 800c478:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c47c:	f84e 1b04 	str.w	r1, [lr], #4
 800c480:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c484:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c488:	f8be 1000 	ldrh.w	r1, [lr]
 800c48c:	fb09 110a 	mla	r1, r9, sl, r1
 800c490:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c494:	4567      	cmp	r7, ip
 800c496:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c49a:	d8e5      	bhi.n	800c468 <__multiply+0x10c>
 800c49c:	9a01      	ldr	r2, [sp, #4]
 800c49e:	50a9      	str	r1, [r5, r2]
 800c4a0:	3504      	adds	r5, #4
 800c4a2:	e799      	b.n	800c3d8 <__multiply+0x7c>
 800c4a4:	3e01      	subs	r6, #1
 800c4a6:	e79b      	b.n	800c3e0 <__multiply+0x84>
 800c4a8:	08016086 	.word	0x08016086
 800c4ac:	08016097 	.word	0x08016097

0800c4b0 <__pow5mult>:
 800c4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4b4:	4615      	mov	r5, r2
 800c4b6:	f012 0203 	ands.w	r2, r2, #3
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	460f      	mov	r7, r1
 800c4be:	d007      	beq.n	800c4d0 <__pow5mult+0x20>
 800c4c0:	4c25      	ldr	r4, [pc, #148]	; (800c558 <__pow5mult+0xa8>)
 800c4c2:	3a01      	subs	r2, #1
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4ca:	f7ff fe53 	bl	800c174 <__multadd>
 800c4ce:	4607      	mov	r7, r0
 800c4d0:	10ad      	asrs	r5, r5, #2
 800c4d2:	d03d      	beq.n	800c550 <__pow5mult+0xa0>
 800c4d4:	69f4      	ldr	r4, [r6, #28]
 800c4d6:	b97c      	cbnz	r4, 800c4f8 <__pow5mult+0x48>
 800c4d8:	2010      	movs	r0, #16
 800c4da:	f7fd fc85 	bl	8009de8 <malloc>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	61f0      	str	r0, [r6, #28]
 800c4e2:	b928      	cbnz	r0, 800c4f0 <__pow5mult+0x40>
 800c4e4:	4b1d      	ldr	r3, [pc, #116]	; (800c55c <__pow5mult+0xac>)
 800c4e6:	481e      	ldr	r0, [pc, #120]	; (800c560 <__pow5mult+0xb0>)
 800c4e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c4ec:	f001 fc60 	bl	800ddb0 <__assert_func>
 800c4f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4f4:	6004      	str	r4, [r0, #0]
 800c4f6:	60c4      	str	r4, [r0, #12]
 800c4f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c4fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c500:	b94c      	cbnz	r4, 800c516 <__pow5mult+0x66>
 800c502:	f240 2171 	movw	r1, #625	; 0x271
 800c506:	4630      	mov	r0, r6
 800c508:	f7ff ff12 	bl	800c330 <__i2b>
 800c50c:	2300      	movs	r3, #0
 800c50e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c512:	4604      	mov	r4, r0
 800c514:	6003      	str	r3, [r0, #0]
 800c516:	f04f 0900 	mov.w	r9, #0
 800c51a:	07eb      	lsls	r3, r5, #31
 800c51c:	d50a      	bpl.n	800c534 <__pow5mult+0x84>
 800c51e:	4639      	mov	r1, r7
 800c520:	4622      	mov	r2, r4
 800c522:	4630      	mov	r0, r6
 800c524:	f7ff ff1a 	bl	800c35c <__multiply>
 800c528:	4639      	mov	r1, r7
 800c52a:	4680      	mov	r8, r0
 800c52c:	4630      	mov	r0, r6
 800c52e:	f7ff fdff 	bl	800c130 <_Bfree>
 800c532:	4647      	mov	r7, r8
 800c534:	106d      	asrs	r5, r5, #1
 800c536:	d00b      	beq.n	800c550 <__pow5mult+0xa0>
 800c538:	6820      	ldr	r0, [r4, #0]
 800c53a:	b938      	cbnz	r0, 800c54c <__pow5mult+0x9c>
 800c53c:	4622      	mov	r2, r4
 800c53e:	4621      	mov	r1, r4
 800c540:	4630      	mov	r0, r6
 800c542:	f7ff ff0b 	bl	800c35c <__multiply>
 800c546:	6020      	str	r0, [r4, #0]
 800c548:	f8c0 9000 	str.w	r9, [r0]
 800c54c:	4604      	mov	r4, r0
 800c54e:	e7e4      	b.n	800c51a <__pow5mult+0x6a>
 800c550:	4638      	mov	r0, r7
 800c552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c556:	bf00      	nop
 800c558:	080161e0 	.word	0x080161e0
 800c55c:	08016017 	.word	0x08016017
 800c560:	08016097 	.word	0x08016097

0800c564 <__lshift>:
 800c564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c568:	460c      	mov	r4, r1
 800c56a:	6849      	ldr	r1, [r1, #4]
 800c56c:	6923      	ldr	r3, [r4, #16]
 800c56e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c572:	68a3      	ldr	r3, [r4, #8]
 800c574:	4607      	mov	r7, r0
 800c576:	4691      	mov	r9, r2
 800c578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c57c:	f108 0601 	add.w	r6, r8, #1
 800c580:	42b3      	cmp	r3, r6
 800c582:	db0b      	blt.n	800c59c <__lshift+0x38>
 800c584:	4638      	mov	r0, r7
 800c586:	f7ff fd93 	bl	800c0b0 <_Balloc>
 800c58a:	4605      	mov	r5, r0
 800c58c:	b948      	cbnz	r0, 800c5a2 <__lshift+0x3e>
 800c58e:	4602      	mov	r2, r0
 800c590:	4b28      	ldr	r3, [pc, #160]	; (800c634 <__lshift+0xd0>)
 800c592:	4829      	ldr	r0, [pc, #164]	; (800c638 <__lshift+0xd4>)
 800c594:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c598:	f001 fc0a 	bl	800ddb0 <__assert_func>
 800c59c:	3101      	adds	r1, #1
 800c59e:	005b      	lsls	r3, r3, #1
 800c5a0:	e7ee      	b.n	800c580 <__lshift+0x1c>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f100 0114 	add.w	r1, r0, #20
 800c5a8:	f100 0210 	add.w	r2, r0, #16
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	4553      	cmp	r3, sl
 800c5b0:	db33      	blt.n	800c61a <__lshift+0xb6>
 800c5b2:	6920      	ldr	r0, [r4, #16]
 800c5b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5b8:	f104 0314 	add.w	r3, r4, #20
 800c5bc:	f019 091f 	ands.w	r9, r9, #31
 800c5c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5c8:	d02b      	beq.n	800c622 <__lshift+0xbe>
 800c5ca:	f1c9 0e20 	rsb	lr, r9, #32
 800c5ce:	468a      	mov	sl, r1
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	6818      	ldr	r0, [r3, #0]
 800c5d4:	fa00 f009 	lsl.w	r0, r0, r9
 800c5d8:	4310      	orrs	r0, r2
 800c5da:	f84a 0b04 	str.w	r0, [sl], #4
 800c5de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e2:	459c      	cmp	ip, r3
 800c5e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5e8:	d8f3      	bhi.n	800c5d2 <__lshift+0x6e>
 800c5ea:	ebac 0304 	sub.w	r3, ip, r4
 800c5ee:	3b15      	subs	r3, #21
 800c5f0:	f023 0303 	bic.w	r3, r3, #3
 800c5f4:	3304      	adds	r3, #4
 800c5f6:	f104 0015 	add.w	r0, r4, #21
 800c5fa:	4584      	cmp	ip, r0
 800c5fc:	bf38      	it	cc
 800c5fe:	2304      	movcc	r3, #4
 800c600:	50ca      	str	r2, [r1, r3]
 800c602:	b10a      	cbz	r2, 800c608 <__lshift+0xa4>
 800c604:	f108 0602 	add.w	r6, r8, #2
 800c608:	3e01      	subs	r6, #1
 800c60a:	4638      	mov	r0, r7
 800c60c:	612e      	str	r6, [r5, #16]
 800c60e:	4621      	mov	r1, r4
 800c610:	f7ff fd8e 	bl	800c130 <_Bfree>
 800c614:	4628      	mov	r0, r5
 800c616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c61a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c61e:	3301      	adds	r3, #1
 800c620:	e7c5      	b.n	800c5ae <__lshift+0x4a>
 800c622:	3904      	subs	r1, #4
 800c624:	f853 2b04 	ldr.w	r2, [r3], #4
 800c628:	f841 2f04 	str.w	r2, [r1, #4]!
 800c62c:	459c      	cmp	ip, r3
 800c62e:	d8f9      	bhi.n	800c624 <__lshift+0xc0>
 800c630:	e7ea      	b.n	800c608 <__lshift+0xa4>
 800c632:	bf00      	nop
 800c634:	08016086 	.word	0x08016086
 800c638:	08016097 	.word	0x08016097

0800c63c <__mcmp>:
 800c63c:	b530      	push	{r4, r5, lr}
 800c63e:	6902      	ldr	r2, [r0, #16]
 800c640:	690c      	ldr	r4, [r1, #16]
 800c642:	1b12      	subs	r2, r2, r4
 800c644:	d10e      	bne.n	800c664 <__mcmp+0x28>
 800c646:	f100 0314 	add.w	r3, r0, #20
 800c64a:	3114      	adds	r1, #20
 800c64c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c650:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c654:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c658:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c65c:	42a5      	cmp	r5, r4
 800c65e:	d003      	beq.n	800c668 <__mcmp+0x2c>
 800c660:	d305      	bcc.n	800c66e <__mcmp+0x32>
 800c662:	2201      	movs	r2, #1
 800c664:	4610      	mov	r0, r2
 800c666:	bd30      	pop	{r4, r5, pc}
 800c668:	4283      	cmp	r3, r0
 800c66a:	d3f3      	bcc.n	800c654 <__mcmp+0x18>
 800c66c:	e7fa      	b.n	800c664 <__mcmp+0x28>
 800c66e:	f04f 32ff 	mov.w	r2, #4294967295
 800c672:	e7f7      	b.n	800c664 <__mcmp+0x28>

0800c674 <__mdiff>:
 800c674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c678:	460c      	mov	r4, r1
 800c67a:	4606      	mov	r6, r0
 800c67c:	4611      	mov	r1, r2
 800c67e:	4620      	mov	r0, r4
 800c680:	4690      	mov	r8, r2
 800c682:	f7ff ffdb 	bl	800c63c <__mcmp>
 800c686:	1e05      	subs	r5, r0, #0
 800c688:	d110      	bne.n	800c6ac <__mdiff+0x38>
 800c68a:	4629      	mov	r1, r5
 800c68c:	4630      	mov	r0, r6
 800c68e:	f7ff fd0f 	bl	800c0b0 <_Balloc>
 800c692:	b930      	cbnz	r0, 800c6a2 <__mdiff+0x2e>
 800c694:	4b3a      	ldr	r3, [pc, #232]	; (800c780 <__mdiff+0x10c>)
 800c696:	4602      	mov	r2, r0
 800c698:	f240 2137 	movw	r1, #567	; 0x237
 800c69c:	4839      	ldr	r0, [pc, #228]	; (800c784 <__mdiff+0x110>)
 800c69e:	f001 fb87 	bl	800ddb0 <__assert_func>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c6a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ac:	bfa4      	itt	ge
 800c6ae:	4643      	movge	r3, r8
 800c6b0:	46a0      	movge	r8, r4
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c6b8:	bfa6      	itte	ge
 800c6ba:	461c      	movge	r4, r3
 800c6bc:	2500      	movge	r5, #0
 800c6be:	2501      	movlt	r5, #1
 800c6c0:	f7ff fcf6 	bl	800c0b0 <_Balloc>
 800c6c4:	b920      	cbnz	r0, 800c6d0 <__mdiff+0x5c>
 800c6c6:	4b2e      	ldr	r3, [pc, #184]	; (800c780 <__mdiff+0x10c>)
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	f240 2145 	movw	r1, #581	; 0x245
 800c6ce:	e7e5      	b.n	800c69c <__mdiff+0x28>
 800c6d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c6d4:	6926      	ldr	r6, [r4, #16]
 800c6d6:	60c5      	str	r5, [r0, #12]
 800c6d8:	f104 0914 	add.w	r9, r4, #20
 800c6dc:	f108 0514 	add.w	r5, r8, #20
 800c6e0:	f100 0e14 	add.w	lr, r0, #20
 800c6e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c6e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c6ec:	f108 0210 	add.w	r2, r8, #16
 800c6f0:	46f2      	mov	sl, lr
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c6fc:	fa11 f88b 	uxtah	r8, r1, fp
 800c700:	b299      	uxth	r1, r3
 800c702:	0c1b      	lsrs	r3, r3, #16
 800c704:	eba8 0801 	sub.w	r8, r8, r1
 800c708:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c70c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c710:	fa1f f888 	uxth.w	r8, r8
 800c714:	1419      	asrs	r1, r3, #16
 800c716:	454e      	cmp	r6, r9
 800c718:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c71c:	f84a 3b04 	str.w	r3, [sl], #4
 800c720:	d8e8      	bhi.n	800c6f4 <__mdiff+0x80>
 800c722:	1b33      	subs	r3, r6, r4
 800c724:	3b15      	subs	r3, #21
 800c726:	f023 0303 	bic.w	r3, r3, #3
 800c72a:	3304      	adds	r3, #4
 800c72c:	3415      	adds	r4, #21
 800c72e:	42a6      	cmp	r6, r4
 800c730:	bf38      	it	cc
 800c732:	2304      	movcc	r3, #4
 800c734:	441d      	add	r5, r3
 800c736:	4473      	add	r3, lr
 800c738:	469e      	mov	lr, r3
 800c73a:	462e      	mov	r6, r5
 800c73c:	4566      	cmp	r6, ip
 800c73e:	d30e      	bcc.n	800c75e <__mdiff+0xea>
 800c740:	f10c 0203 	add.w	r2, ip, #3
 800c744:	1b52      	subs	r2, r2, r5
 800c746:	f022 0203 	bic.w	r2, r2, #3
 800c74a:	3d03      	subs	r5, #3
 800c74c:	45ac      	cmp	ip, r5
 800c74e:	bf38      	it	cc
 800c750:	2200      	movcc	r2, #0
 800c752:	4413      	add	r3, r2
 800c754:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c758:	b17a      	cbz	r2, 800c77a <__mdiff+0x106>
 800c75a:	6107      	str	r7, [r0, #16]
 800c75c:	e7a4      	b.n	800c6a8 <__mdiff+0x34>
 800c75e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c762:	fa11 f288 	uxtah	r2, r1, r8
 800c766:	1414      	asrs	r4, r2, #16
 800c768:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c76c:	b292      	uxth	r2, r2
 800c76e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c772:	f84e 2b04 	str.w	r2, [lr], #4
 800c776:	1421      	asrs	r1, r4, #16
 800c778:	e7e0      	b.n	800c73c <__mdiff+0xc8>
 800c77a:	3f01      	subs	r7, #1
 800c77c:	e7ea      	b.n	800c754 <__mdiff+0xe0>
 800c77e:	bf00      	nop
 800c780:	08016086 	.word	0x08016086
 800c784:	08016097 	.word	0x08016097

0800c788 <__ulp>:
 800c788:	b082      	sub	sp, #8
 800c78a:	ed8d 0b00 	vstr	d0, [sp]
 800c78e:	9a01      	ldr	r2, [sp, #4]
 800c790:	4b0f      	ldr	r3, [pc, #60]	; (800c7d0 <__ulp+0x48>)
 800c792:	4013      	ands	r3, r2
 800c794:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c798:	2b00      	cmp	r3, #0
 800c79a:	dc08      	bgt.n	800c7ae <__ulp+0x26>
 800c79c:	425b      	negs	r3, r3
 800c79e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c7a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c7a6:	da04      	bge.n	800c7b2 <__ulp+0x2a>
 800c7a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c7ac:	4113      	asrs	r3, r2
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	e008      	b.n	800c7c4 <__ulp+0x3c>
 800c7b2:	f1a2 0314 	sub.w	r3, r2, #20
 800c7b6:	2b1e      	cmp	r3, #30
 800c7b8:	bfda      	itte	le
 800c7ba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c7be:	40da      	lsrle	r2, r3
 800c7c0:	2201      	movgt	r2, #1
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	4610      	mov	r0, r2
 800c7c8:	ec41 0b10 	vmov	d0, r0, r1
 800c7cc:	b002      	add	sp, #8
 800c7ce:	4770      	bx	lr
 800c7d0:	7ff00000 	.word	0x7ff00000

0800c7d4 <__b2d>:
 800c7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d8:	6906      	ldr	r6, [r0, #16]
 800c7da:	f100 0814 	add.w	r8, r0, #20
 800c7de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c7e2:	1f37      	subs	r7, r6, #4
 800c7e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	f7ff fd53 	bl	800c294 <__hi0bits>
 800c7ee:	f1c0 0320 	rsb	r3, r0, #32
 800c7f2:	280a      	cmp	r0, #10
 800c7f4:	600b      	str	r3, [r1, #0]
 800c7f6:	491b      	ldr	r1, [pc, #108]	; (800c864 <__b2d+0x90>)
 800c7f8:	dc15      	bgt.n	800c826 <__b2d+0x52>
 800c7fa:	f1c0 0c0b 	rsb	ip, r0, #11
 800c7fe:	fa22 f30c 	lsr.w	r3, r2, ip
 800c802:	45b8      	cmp	r8, r7
 800c804:	ea43 0501 	orr.w	r5, r3, r1
 800c808:	bf34      	ite	cc
 800c80a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c80e:	2300      	movcs	r3, #0
 800c810:	3015      	adds	r0, #21
 800c812:	fa02 f000 	lsl.w	r0, r2, r0
 800c816:	fa23 f30c 	lsr.w	r3, r3, ip
 800c81a:	4303      	orrs	r3, r0
 800c81c:	461c      	mov	r4, r3
 800c81e:	ec45 4b10 	vmov	d0, r4, r5
 800c822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c826:	45b8      	cmp	r8, r7
 800c828:	bf3a      	itte	cc
 800c82a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c82e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c832:	2300      	movcs	r3, #0
 800c834:	380b      	subs	r0, #11
 800c836:	d012      	beq.n	800c85e <__b2d+0x8a>
 800c838:	f1c0 0120 	rsb	r1, r0, #32
 800c83c:	fa23 f401 	lsr.w	r4, r3, r1
 800c840:	4082      	lsls	r2, r0
 800c842:	4322      	orrs	r2, r4
 800c844:	4547      	cmp	r7, r8
 800c846:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c84a:	bf8c      	ite	hi
 800c84c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c850:	2200      	movls	r2, #0
 800c852:	4083      	lsls	r3, r0
 800c854:	40ca      	lsrs	r2, r1
 800c856:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c85a:	4313      	orrs	r3, r2
 800c85c:	e7de      	b.n	800c81c <__b2d+0x48>
 800c85e:	ea42 0501 	orr.w	r5, r2, r1
 800c862:	e7db      	b.n	800c81c <__b2d+0x48>
 800c864:	3ff00000 	.word	0x3ff00000

0800c868 <__d2b>:
 800c868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c86c:	460f      	mov	r7, r1
 800c86e:	2101      	movs	r1, #1
 800c870:	ec59 8b10 	vmov	r8, r9, d0
 800c874:	4616      	mov	r6, r2
 800c876:	f7ff fc1b 	bl	800c0b0 <_Balloc>
 800c87a:	4604      	mov	r4, r0
 800c87c:	b930      	cbnz	r0, 800c88c <__d2b+0x24>
 800c87e:	4602      	mov	r2, r0
 800c880:	4b24      	ldr	r3, [pc, #144]	; (800c914 <__d2b+0xac>)
 800c882:	4825      	ldr	r0, [pc, #148]	; (800c918 <__d2b+0xb0>)
 800c884:	f240 310f 	movw	r1, #783	; 0x30f
 800c888:	f001 fa92 	bl	800ddb0 <__assert_func>
 800c88c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c890:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c894:	bb2d      	cbnz	r5, 800c8e2 <__d2b+0x7a>
 800c896:	9301      	str	r3, [sp, #4]
 800c898:	f1b8 0300 	subs.w	r3, r8, #0
 800c89c:	d026      	beq.n	800c8ec <__d2b+0x84>
 800c89e:	4668      	mov	r0, sp
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	f7ff fd17 	bl	800c2d4 <__lo0bits>
 800c8a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c8aa:	b1e8      	cbz	r0, 800c8e8 <__d2b+0x80>
 800c8ac:	f1c0 0320 	rsb	r3, r0, #32
 800c8b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8b4:	430b      	orrs	r3, r1
 800c8b6:	40c2      	lsrs	r2, r0
 800c8b8:	6163      	str	r3, [r4, #20]
 800c8ba:	9201      	str	r2, [sp, #4]
 800c8bc:	9b01      	ldr	r3, [sp, #4]
 800c8be:	61a3      	str	r3, [r4, #24]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	bf14      	ite	ne
 800c8c4:	2202      	movne	r2, #2
 800c8c6:	2201      	moveq	r2, #1
 800c8c8:	6122      	str	r2, [r4, #16]
 800c8ca:	b1bd      	cbz	r5, 800c8fc <__d2b+0x94>
 800c8cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c8d0:	4405      	add	r5, r0
 800c8d2:	603d      	str	r5, [r7, #0]
 800c8d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c8d8:	6030      	str	r0, [r6, #0]
 800c8da:	4620      	mov	r0, r4
 800c8dc:	b003      	add	sp, #12
 800c8de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8e6:	e7d6      	b.n	800c896 <__d2b+0x2e>
 800c8e8:	6161      	str	r1, [r4, #20]
 800c8ea:	e7e7      	b.n	800c8bc <__d2b+0x54>
 800c8ec:	a801      	add	r0, sp, #4
 800c8ee:	f7ff fcf1 	bl	800c2d4 <__lo0bits>
 800c8f2:	9b01      	ldr	r3, [sp, #4]
 800c8f4:	6163      	str	r3, [r4, #20]
 800c8f6:	3020      	adds	r0, #32
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	e7e5      	b.n	800c8c8 <__d2b+0x60>
 800c8fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c900:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c904:	6038      	str	r0, [r7, #0]
 800c906:	6918      	ldr	r0, [r3, #16]
 800c908:	f7ff fcc4 	bl	800c294 <__hi0bits>
 800c90c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c910:	e7e2      	b.n	800c8d8 <__d2b+0x70>
 800c912:	bf00      	nop
 800c914:	08016086 	.word	0x08016086
 800c918:	08016097 	.word	0x08016097

0800c91c <__ratio>:
 800c91c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c920:	4688      	mov	r8, r1
 800c922:	4669      	mov	r1, sp
 800c924:	4681      	mov	r9, r0
 800c926:	f7ff ff55 	bl	800c7d4 <__b2d>
 800c92a:	a901      	add	r1, sp, #4
 800c92c:	4640      	mov	r0, r8
 800c92e:	ec55 4b10 	vmov	r4, r5, d0
 800c932:	ee10 aa10 	vmov	sl, s0
 800c936:	f7ff ff4d 	bl	800c7d4 <__b2d>
 800c93a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c93e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c942:	1ad2      	subs	r2, r2, r3
 800c944:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c948:	1a5b      	subs	r3, r3, r1
 800c94a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800c94e:	ec57 6b10 	vmov	r6, r7, d0
 800c952:	2b00      	cmp	r3, #0
 800c954:	bfd6      	itet	le
 800c956:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c95a:	462a      	movgt	r2, r5
 800c95c:	463a      	movle	r2, r7
 800c95e:	46ab      	mov	fp, r5
 800c960:	bfd6      	itet	le
 800c962:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c966:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c96a:	ee00 3a90 	vmovle	s1, r3
 800c96e:	ec4b ab17 	vmov	d7, sl, fp
 800c972:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c976:	b003      	add	sp, #12
 800c978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c97c <__copybits>:
 800c97c:	3901      	subs	r1, #1
 800c97e:	b570      	push	{r4, r5, r6, lr}
 800c980:	1149      	asrs	r1, r1, #5
 800c982:	6914      	ldr	r4, [r2, #16]
 800c984:	3101      	adds	r1, #1
 800c986:	f102 0314 	add.w	r3, r2, #20
 800c98a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c98e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c992:	1f05      	subs	r5, r0, #4
 800c994:	42a3      	cmp	r3, r4
 800c996:	d30c      	bcc.n	800c9b2 <__copybits+0x36>
 800c998:	1aa3      	subs	r3, r4, r2
 800c99a:	3b11      	subs	r3, #17
 800c99c:	f023 0303 	bic.w	r3, r3, #3
 800c9a0:	3211      	adds	r2, #17
 800c9a2:	42a2      	cmp	r2, r4
 800c9a4:	bf88      	it	hi
 800c9a6:	2300      	movhi	r3, #0
 800c9a8:	4418      	add	r0, r3
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	4288      	cmp	r0, r1
 800c9ae:	d305      	bcc.n	800c9bc <__copybits+0x40>
 800c9b0:	bd70      	pop	{r4, r5, r6, pc}
 800c9b2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c9b6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c9ba:	e7eb      	b.n	800c994 <__copybits+0x18>
 800c9bc:	f840 3b04 	str.w	r3, [r0], #4
 800c9c0:	e7f4      	b.n	800c9ac <__copybits+0x30>

0800c9c2 <__any_on>:
 800c9c2:	f100 0214 	add.w	r2, r0, #20
 800c9c6:	6900      	ldr	r0, [r0, #16]
 800c9c8:	114b      	asrs	r3, r1, #5
 800c9ca:	4298      	cmp	r0, r3
 800c9cc:	b510      	push	{r4, lr}
 800c9ce:	db11      	blt.n	800c9f4 <__any_on+0x32>
 800c9d0:	dd0a      	ble.n	800c9e8 <__any_on+0x26>
 800c9d2:	f011 011f 	ands.w	r1, r1, #31
 800c9d6:	d007      	beq.n	800c9e8 <__any_on+0x26>
 800c9d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9dc:	fa24 f001 	lsr.w	r0, r4, r1
 800c9e0:	fa00 f101 	lsl.w	r1, r0, r1
 800c9e4:	428c      	cmp	r4, r1
 800c9e6:	d10b      	bne.n	800ca00 <__any_on+0x3e>
 800c9e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d803      	bhi.n	800c9f8 <__any_on+0x36>
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	bd10      	pop	{r4, pc}
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	e7f7      	b.n	800c9e8 <__any_on+0x26>
 800c9f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9fc:	2900      	cmp	r1, #0
 800c9fe:	d0f5      	beq.n	800c9ec <__any_on+0x2a>
 800ca00:	2001      	movs	r0, #1
 800ca02:	e7f6      	b.n	800c9f2 <__any_on+0x30>

0800ca04 <sulp>:
 800ca04:	b570      	push	{r4, r5, r6, lr}
 800ca06:	4604      	mov	r4, r0
 800ca08:	460d      	mov	r5, r1
 800ca0a:	4616      	mov	r6, r2
 800ca0c:	ec45 4b10 	vmov	d0, r4, r5
 800ca10:	f7ff feba 	bl	800c788 <__ulp>
 800ca14:	b17e      	cbz	r6, 800ca36 <sulp+0x32>
 800ca16:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	dd09      	ble.n	800ca36 <sulp+0x32>
 800ca22:	051b      	lsls	r3, r3, #20
 800ca24:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ca28:	2000      	movs	r0, #0
 800ca2a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800ca2e:	ec41 0b17 	vmov	d7, r0, r1
 800ca32:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ca36:	bd70      	pop	{r4, r5, r6, pc}

0800ca38 <_strtod_l>:
 800ca38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	ed2d 8b0e 	vpush	{d8-d14}
 800ca40:	b097      	sub	sp, #92	; 0x5c
 800ca42:	4604      	mov	r4, r0
 800ca44:	920d      	str	r2, [sp, #52]	; 0x34
 800ca46:	2200      	movs	r2, #0
 800ca48:	9212      	str	r2, [sp, #72]	; 0x48
 800ca4a:	468a      	mov	sl, r1
 800ca4c:	f04f 0800 	mov.w	r8, #0
 800ca50:	f04f 0900 	mov.w	r9, #0
 800ca54:	460a      	mov	r2, r1
 800ca56:	9211      	str	r2, [sp, #68]	; 0x44
 800ca58:	7811      	ldrb	r1, [r2, #0]
 800ca5a:	292b      	cmp	r1, #43	; 0x2b
 800ca5c:	d04c      	beq.n	800caf8 <_strtod_l+0xc0>
 800ca5e:	d839      	bhi.n	800cad4 <_strtod_l+0x9c>
 800ca60:	290d      	cmp	r1, #13
 800ca62:	d833      	bhi.n	800cacc <_strtod_l+0x94>
 800ca64:	2908      	cmp	r1, #8
 800ca66:	d833      	bhi.n	800cad0 <_strtod_l+0x98>
 800ca68:	2900      	cmp	r1, #0
 800ca6a:	d03c      	beq.n	800cae6 <_strtod_l+0xae>
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	9208      	str	r2, [sp, #32]
 800ca70:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ca72:	7832      	ldrb	r2, [r6, #0]
 800ca74:	2a30      	cmp	r2, #48	; 0x30
 800ca76:	f040 80b8 	bne.w	800cbea <_strtod_l+0x1b2>
 800ca7a:	7872      	ldrb	r2, [r6, #1]
 800ca7c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ca80:	2a58      	cmp	r2, #88	; 0x58
 800ca82:	d170      	bne.n	800cb66 <_strtod_l+0x12e>
 800ca84:	9302      	str	r3, [sp, #8]
 800ca86:	9b08      	ldr	r3, [sp, #32]
 800ca88:	9301      	str	r3, [sp, #4]
 800ca8a:	ab12      	add	r3, sp, #72	; 0x48
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	4a91      	ldr	r2, [pc, #580]	; (800ccd4 <_strtod_l+0x29c>)
 800ca90:	ab13      	add	r3, sp, #76	; 0x4c
 800ca92:	a911      	add	r1, sp, #68	; 0x44
 800ca94:	4620      	mov	r0, r4
 800ca96:	f001 fa11 	bl	800debc <__gethex>
 800ca9a:	f010 070f 	ands.w	r7, r0, #15
 800ca9e:	4605      	mov	r5, r0
 800caa0:	d005      	beq.n	800caae <_strtod_l+0x76>
 800caa2:	2f06      	cmp	r7, #6
 800caa4:	d12a      	bne.n	800cafc <_strtod_l+0xc4>
 800caa6:	3601      	adds	r6, #1
 800caa8:	2300      	movs	r3, #0
 800caaa:	9611      	str	r6, [sp, #68]	; 0x44
 800caac:	9308      	str	r3, [sp, #32]
 800caae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f040 8555 	bne.w	800d560 <_strtod_l+0xb28>
 800cab6:	9b08      	ldr	r3, [sp, #32]
 800cab8:	ec49 8b10 	vmov	d0, r8, r9
 800cabc:	b1cb      	cbz	r3, 800caf2 <_strtod_l+0xba>
 800cabe:	eeb1 0b40 	vneg.f64	d0, d0
 800cac2:	b017      	add	sp, #92	; 0x5c
 800cac4:	ecbd 8b0e 	vpop	{d8-d14}
 800cac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cacc:	2920      	cmp	r1, #32
 800cace:	d1cd      	bne.n	800ca6c <_strtod_l+0x34>
 800cad0:	3201      	adds	r2, #1
 800cad2:	e7c0      	b.n	800ca56 <_strtod_l+0x1e>
 800cad4:	292d      	cmp	r1, #45	; 0x2d
 800cad6:	d1c9      	bne.n	800ca6c <_strtod_l+0x34>
 800cad8:	2101      	movs	r1, #1
 800cada:	9108      	str	r1, [sp, #32]
 800cadc:	1c51      	adds	r1, r2, #1
 800cade:	9111      	str	r1, [sp, #68]	; 0x44
 800cae0:	7852      	ldrb	r2, [r2, #1]
 800cae2:	2a00      	cmp	r2, #0
 800cae4:	d1c4      	bne.n	800ca70 <_strtod_l+0x38>
 800cae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cae8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800caec:	2b00      	cmp	r3, #0
 800caee:	f040 8535 	bne.w	800d55c <_strtod_l+0xb24>
 800caf2:	ec49 8b10 	vmov	d0, r8, r9
 800caf6:	e7e4      	b.n	800cac2 <_strtod_l+0x8a>
 800caf8:	2100      	movs	r1, #0
 800cafa:	e7ee      	b.n	800cada <_strtod_l+0xa2>
 800cafc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cafe:	b13a      	cbz	r2, 800cb10 <_strtod_l+0xd8>
 800cb00:	2135      	movs	r1, #53	; 0x35
 800cb02:	a814      	add	r0, sp, #80	; 0x50
 800cb04:	f7ff ff3a 	bl	800c97c <__copybits>
 800cb08:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f7ff fb10 	bl	800c130 <_Bfree>
 800cb10:	1e7b      	subs	r3, r7, #1
 800cb12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cb14:	2b04      	cmp	r3, #4
 800cb16:	d806      	bhi.n	800cb26 <_strtod_l+0xee>
 800cb18:	e8df f003 	tbb	[pc, r3]
 800cb1c:	201d0314 	.word	0x201d0314
 800cb20:	14          	.byte	0x14
 800cb21:	00          	.byte	0x00
 800cb22:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800cb26:	05eb      	lsls	r3, r5, #23
 800cb28:	bf48      	it	mi
 800cb2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800cb2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb32:	0d1b      	lsrs	r3, r3, #20
 800cb34:	051b      	lsls	r3, r3, #20
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d1b9      	bne.n	800caae <_strtod_l+0x76>
 800cb3a:	f7fe fc2d 	bl	800b398 <__errno>
 800cb3e:	2322      	movs	r3, #34	; 0x22
 800cb40:	6003      	str	r3, [r0, #0]
 800cb42:	e7b4      	b.n	800caae <_strtod_l+0x76>
 800cb44:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800cb48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cb4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cb50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800cb54:	e7e7      	b.n	800cb26 <_strtod_l+0xee>
 800cb56:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800ccdc <_strtod_l+0x2a4>
 800cb5a:	e7e4      	b.n	800cb26 <_strtod_l+0xee>
 800cb5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800cb60:	f04f 38ff 	mov.w	r8, #4294967295
 800cb64:	e7df      	b.n	800cb26 <_strtod_l+0xee>
 800cb66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb68:	1c5a      	adds	r2, r3, #1
 800cb6a:	9211      	str	r2, [sp, #68]	; 0x44
 800cb6c:	785b      	ldrb	r3, [r3, #1]
 800cb6e:	2b30      	cmp	r3, #48	; 0x30
 800cb70:	d0f9      	beq.n	800cb66 <_strtod_l+0x12e>
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d09b      	beq.n	800caae <_strtod_l+0x76>
 800cb76:	2301      	movs	r3, #1
 800cb78:	9306      	str	r3, [sp, #24]
 800cb7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb7c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb7e:	2300      	movs	r3, #0
 800cb80:	9305      	str	r3, [sp, #20]
 800cb82:	9307      	str	r3, [sp, #28]
 800cb84:	461e      	mov	r6, r3
 800cb86:	220a      	movs	r2, #10
 800cb88:	9811      	ldr	r0, [sp, #68]	; 0x44
 800cb8a:	7805      	ldrb	r5, [r0, #0]
 800cb8c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800cb90:	b2d9      	uxtb	r1, r3
 800cb92:	2909      	cmp	r1, #9
 800cb94:	d92b      	bls.n	800cbee <_strtod_l+0x1b6>
 800cb96:	4950      	ldr	r1, [pc, #320]	; (800ccd8 <_strtod_l+0x2a0>)
 800cb98:	2201      	movs	r2, #1
 800cb9a:	f001 f8cb 	bl	800dd34 <strncmp>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d035      	beq.n	800cc0e <_strtod_l+0x1d6>
 800cba2:	2000      	movs	r0, #0
 800cba4:	462a      	mov	r2, r5
 800cba6:	4633      	mov	r3, r6
 800cba8:	4683      	mov	fp, r0
 800cbaa:	4601      	mov	r1, r0
 800cbac:	2a65      	cmp	r2, #101	; 0x65
 800cbae:	d001      	beq.n	800cbb4 <_strtod_l+0x17c>
 800cbb0:	2a45      	cmp	r2, #69	; 0x45
 800cbb2:	d118      	bne.n	800cbe6 <_strtod_l+0x1ae>
 800cbb4:	b91b      	cbnz	r3, 800cbbe <_strtod_l+0x186>
 800cbb6:	9b06      	ldr	r3, [sp, #24]
 800cbb8:	4303      	orrs	r3, r0
 800cbba:	d094      	beq.n	800cae6 <_strtod_l+0xae>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800cbc2:	f10a 0201 	add.w	r2, sl, #1
 800cbc6:	9211      	str	r2, [sp, #68]	; 0x44
 800cbc8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800cbcc:	2a2b      	cmp	r2, #43	; 0x2b
 800cbce:	d075      	beq.n	800ccbc <_strtod_l+0x284>
 800cbd0:	2a2d      	cmp	r2, #45	; 0x2d
 800cbd2:	d07b      	beq.n	800cccc <_strtod_l+0x294>
 800cbd4:	f04f 0e00 	mov.w	lr, #0
 800cbd8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800cbdc:	2d09      	cmp	r5, #9
 800cbde:	f240 8083 	bls.w	800cce8 <_strtod_l+0x2b0>
 800cbe2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800cbe6:	2500      	movs	r5, #0
 800cbe8:	e09e      	b.n	800cd28 <_strtod_l+0x2f0>
 800cbea:	2300      	movs	r3, #0
 800cbec:	e7c4      	b.n	800cb78 <_strtod_l+0x140>
 800cbee:	2e08      	cmp	r6, #8
 800cbf0:	bfd5      	itete	le
 800cbf2:	9907      	ldrle	r1, [sp, #28]
 800cbf4:	9905      	ldrgt	r1, [sp, #20]
 800cbf6:	fb02 3301 	mlale	r3, r2, r1, r3
 800cbfa:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cbfe:	f100 0001 	add.w	r0, r0, #1
 800cc02:	bfd4      	ite	le
 800cc04:	9307      	strle	r3, [sp, #28]
 800cc06:	9305      	strgt	r3, [sp, #20]
 800cc08:	3601      	adds	r6, #1
 800cc0a:	9011      	str	r0, [sp, #68]	; 0x44
 800cc0c:	e7bc      	b.n	800cb88 <_strtod_l+0x150>
 800cc0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc10:	1c5a      	adds	r2, r3, #1
 800cc12:	9211      	str	r2, [sp, #68]	; 0x44
 800cc14:	785a      	ldrb	r2, [r3, #1]
 800cc16:	b3ae      	cbz	r6, 800cc84 <_strtod_l+0x24c>
 800cc18:	4683      	mov	fp, r0
 800cc1a:	4633      	mov	r3, r6
 800cc1c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cc20:	2909      	cmp	r1, #9
 800cc22:	d912      	bls.n	800cc4a <_strtod_l+0x212>
 800cc24:	2101      	movs	r1, #1
 800cc26:	e7c1      	b.n	800cbac <_strtod_l+0x174>
 800cc28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc2a:	1c5a      	adds	r2, r3, #1
 800cc2c:	9211      	str	r2, [sp, #68]	; 0x44
 800cc2e:	785a      	ldrb	r2, [r3, #1]
 800cc30:	3001      	adds	r0, #1
 800cc32:	2a30      	cmp	r2, #48	; 0x30
 800cc34:	d0f8      	beq.n	800cc28 <_strtod_l+0x1f0>
 800cc36:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cc3a:	2b08      	cmp	r3, #8
 800cc3c:	f200 8495 	bhi.w	800d56a <_strtod_l+0xb32>
 800cc40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc42:	9309      	str	r3, [sp, #36]	; 0x24
 800cc44:	4683      	mov	fp, r0
 800cc46:	2000      	movs	r0, #0
 800cc48:	4603      	mov	r3, r0
 800cc4a:	3a30      	subs	r2, #48	; 0x30
 800cc4c:	f100 0101 	add.w	r1, r0, #1
 800cc50:	d012      	beq.n	800cc78 <_strtod_l+0x240>
 800cc52:	448b      	add	fp, r1
 800cc54:	eb00 0c03 	add.w	ip, r0, r3
 800cc58:	4619      	mov	r1, r3
 800cc5a:	250a      	movs	r5, #10
 800cc5c:	4561      	cmp	r1, ip
 800cc5e:	d113      	bne.n	800cc88 <_strtod_l+0x250>
 800cc60:	1819      	adds	r1, r3, r0
 800cc62:	2908      	cmp	r1, #8
 800cc64:	f103 0301 	add.w	r3, r3, #1
 800cc68:	4403      	add	r3, r0
 800cc6a:	dc1b      	bgt.n	800cca4 <_strtod_l+0x26c>
 800cc6c:	9807      	ldr	r0, [sp, #28]
 800cc6e:	210a      	movs	r1, #10
 800cc70:	fb01 2200 	mla	r2, r1, r0, r2
 800cc74:	9207      	str	r2, [sp, #28]
 800cc76:	2100      	movs	r1, #0
 800cc78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cc7a:	1c50      	adds	r0, r2, #1
 800cc7c:	9011      	str	r0, [sp, #68]	; 0x44
 800cc7e:	7852      	ldrb	r2, [r2, #1]
 800cc80:	4608      	mov	r0, r1
 800cc82:	e7cb      	b.n	800cc1c <_strtod_l+0x1e4>
 800cc84:	4630      	mov	r0, r6
 800cc86:	e7d4      	b.n	800cc32 <_strtod_l+0x1fa>
 800cc88:	2908      	cmp	r1, #8
 800cc8a:	f101 0101 	add.w	r1, r1, #1
 800cc8e:	dc03      	bgt.n	800cc98 <_strtod_l+0x260>
 800cc90:	9f07      	ldr	r7, [sp, #28]
 800cc92:	436f      	muls	r7, r5
 800cc94:	9707      	str	r7, [sp, #28]
 800cc96:	e7e1      	b.n	800cc5c <_strtod_l+0x224>
 800cc98:	2910      	cmp	r1, #16
 800cc9a:	bfde      	ittt	le
 800cc9c:	9f05      	ldrle	r7, [sp, #20]
 800cc9e:	436f      	mulle	r7, r5
 800cca0:	9705      	strle	r7, [sp, #20]
 800cca2:	e7db      	b.n	800cc5c <_strtod_l+0x224>
 800cca4:	2b10      	cmp	r3, #16
 800cca6:	bfdf      	itttt	le
 800cca8:	9805      	ldrle	r0, [sp, #20]
 800ccaa:	210a      	movle	r1, #10
 800ccac:	fb01 2200 	mlale	r2, r1, r0, r2
 800ccb0:	9205      	strle	r2, [sp, #20]
 800ccb2:	e7e0      	b.n	800cc76 <_strtod_l+0x23e>
 800ccb4:	f04f 0b00 	mov.w	fp, #0
 800ccb8:	2101      	movs	r1, #1
 800ccba:	e77c      	b.n	800cbb6 <_strtod_l+0x17e>
 800ccbc:	f04f 0e00 	mov.w	lr, #0
 800ccc0:	f10a 0202 	add.w	r2, sl, #2
 800ccc4:	9211      	str	r2, [sp, #68]	; 0x44
 800ccc6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800ccca:	e785      	b.n	800cbd8 <_strtod_l+0x1a0>
 800cccc:	f04f 0e01 	mov.w	lr, #1
 800ccd0:	e7f6      	b.n	800ccc0 <_strtod_l+0x288>
 800ccd2:	bf00      	nop
 800ccd4:	080161f0 	.word	0x080161f0
 800ccd8:	080161ec 	.word	0x080161ec
 800ccdc:	7ff00000 	.word	0x7ff00000
 800cce0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cce2:	1c55      	adds	r5, r2, #1
 800cce4:	9511      	str	r5, [sp, #68]	; 0x44
 800cce6:	7852      	ldrb	r2, [r2, #1]
 800cce8:	2a30      	cmp	r2, #48	; 0x30
 800ccea:	d0f9      	beq.n	800cce0 <_strtod_l+0x2a8>
 800ccec:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800ccf0:	2d08      	cmp	r5, #8
 800ccf2:	f63f af78 	bhi.w	800cbe6 <_strtod_l+0x1ae>
 800ccf6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ccfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ccfc:	920a      	str	r2, [sp, #40]	; 0x28
 800ccfe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cd00:	1c55      	adds	r5, r2, #1
 800cd02:	9511      	str	r5, [sp, #68]	; 0x44
 800cd04:	7852      	ldrb	r2, [r2, #1]
 800cd06:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800cd0a:	2f09      	cmp	r7, #9
 800cd0c:	d937      	bls.n	800cd7e <_strtod_l+0x346>
 800cd0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800cd10:	1bed      	subs	r5, r5, r7
 800cd12:	2d08      	cmp	r5, #8
 800cd14:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800cd18:	dc02      	bgt.n	800cd20 <_strtod_l+0x2e8>
 800cd1a:	4565      	cmp	r5, ip
 800cd1c:	bfa8      	it	ge
 800cd1e:	4665      	movge	r5, ip
 800cd20:	f1be 0f00 	cmp.w	lr, #0
 800cd24:	d000      	beq.n	800cd28 <_strtod_l+0x2f0>
 800cd26:	426d      	negs	r5, r5
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d14d      	bne.n	800cdc8 <_strtod_l+0x390>
 800cd2c:	9b06      	ldr	r3, [sp, #24]
 800cd2e:	4303      	orrs	r3, r0
 800cd30:	f47f aebd 	bne.w	800caae <_strtod_l+0x76>
 800cd34:	2900      	cmp	r1, #0
 800cd36:	f47f aed6 	bne.w	800cae6 <_strtod_l+0xae>
 800cd3a:	2a69      	cmp	r2, #105	; 0x69
 800cd3c:	d027      	beq.n	800cd8e <_strtod_l+0x356>
 800cd3e:	dc24      	bgt.n	800cd8a <_strtod_l+0x352>
 800cd40:	2a49      	cmp	r2, #73	; 0x49
 800cd42:	d024      	beq.n	800cd8e <_strtod_l+0x356>
 800cd44:	2a4e      	cmp	r2, #78	; 0x4e
 800cd46:	f47f aece 	bne.w	800cae6 <_strtod_l+0xae>
 800cd4a:	4995      	ldr	r1, [pc, #596]	; (800cfa0 <_strtod_l+0x568>)
 800cd4c:	a811      	add	r0, sp, #68	; 0x44
 800cd4e:	f001 faf5 	bl	800e33c <__match>
 800cd52:	2800      	cmp	r0, #0
 800cd54:	f43f aec7 	beq.w	800cae6 <_strtod_l+0xae>
 800cd58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	2b28      	cmp	r3, #40	; 0x28
 800cd5e:	d12d      	bne.n	800cdbc <_strtod_l+0x384>
 800cd60:	4990      	ldr	r1, [pc, #576]	; (800cfa4 <_strtod_l+0x56c>)
 800cd62:	aa14      	add	r2, sp, #80	; 0x50
 800cd64:	a811      	add	r0, sp, #68	; 0x44
 800cd66:	f001 fafd 	bl	800e364 <__hexnan>
 800cd6a:	2805      	cmp	r0, #5
 800cd6c:	d126      	bne.n	800cdbc <_strtod_l+0x384>
 800cd6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd70:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cd74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800cd78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800cd7c:	e697      	b.n	800caae <_strtod_l+0x76>
 800cd7e:	250a      	movs	r5, #10
 800cd80:	fb05 2c0c 	mla	ip, r5, ip, r2
 800cd84:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800cd88:	e7b9      	b.n	800ccfe <_strtod_l+0x2c6>
 800cd8a:	2a6e      	cmp	r2, #110	; 0x6e
 800cd8c:	e7db      	b.n	800cd46 <_strtod_l+0x30e>
 800cd8e:	4986      	ldr	r1, [pc, #536]	; (800cfa8 <_strtod_l+0x570>)
 800cd90:	a811      	add	r0, sp, #68	; 0x44
 800cd92:	f001 fad3 	bl	800e33c <__match>
 800cd96:	2800      	cmp	r0, #0
 800cd98:	f43f aea5 	beq.w	800cae6 <_strtod_l+0xae>
 800cd9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd9e:	4983      	ldr	r1, [pc, #524]	; (800cfac <_strtod_l+0x574>)
 800cda0:	3b01      	subs	r3, #1
 800cda2:	a811      	add	r0, sp, #68	; 0x44
 800cda4:	9311      	str	r3, [sp, #68]	; 0x44
 800cda6:	f001 fac9 	bl	800e33c <__match>
 800cdaa:	b910      	cbnz	r0, 800cdb2 <_strtod_l+0x37a>
 800cdac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdae:	3301      	adds	r3, #1
 800cdb0:	9311      	str	r3, [sp, #68]	; 0x44
 800cdb2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800cfc0 <_strtod_l+0x588>
 800cdb6:	f04f 0800 	mov.w	r8, #0
 800cdba:	e678      	b.n	800caae <_strtod_l+0x76>
 800cdbc:	487c      	ldr	r0, [pc, #496]	; (800cfb0 <_strtod_l+0x578>)
 800cdbe:	f000 ffef 	bl	800dda0 <nan>
 800cdc2:	ec59 8b10 	vmov	r8, r9, d0
 800cdc6:	e672      	b.n	800caae <_strtod_l+0x76>
 800cdc8:	eddd 7a07 	vldr	s15, [sp, #28]
 800cdcc:	eba5 020b 	sub.w	r2, r5, fp
 800cdd0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cdd4:	2e00      	cmp	r6, #0
 800cdd6:	bf08      	it	eq
 800cdd8:	461e      	moveq	r6, r3
 800cdda:	2b10      	cmp	r3, #16
 800cddc:	9206      	str	r2, [sp, #24]
 800cdde:	461a      	mov	r2, r3
 800cde0:	bfa8      	it	ge
 800cde2:	2210      	movge	r2, #16
 800cde4:	2b09      	cmp	r3, #9
 800cde6:	ec59 8b17 	vmov	r8, r9, d7
 800cdea:	dd0c      	ble.n	800ce06 <_strtod_l+0x3ce>
 800cdec:	4971      	ldr	r1, [pc, #452]	; (800cfb4 <_strtod_l+0x57c>)
 800cdee:	eddd 6a05 	vldr	s13, [sp, #20]
 800cdf2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800cdf6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800cdfa:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800cdfe:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ce02:	ec59 8b16 	vmov	r8, r9, d6
 800ce06:	2b0f      	cmp	r3, #15
 800ce08:	dc37      	bgt.n	800ce7a <_strtod_l+0x442>
 800ce0a:	9906      	ldr	r1, [sp, #24]
 800ce0c:	2900      	cmp	r1, #0
 800ce0e:	f43f ae4e 	beq.w	800caae <_strtod_l+0x76>
 800ce12:	dd23      	ble.n	800ce5c <_strtod_l+0x424>
 800ce14:	2916      	cmp	r1, #22
 800ce16:	dc0b      	bgt.n	800ce30 <_strtod_l+0x3f8>
 800ce18:	4b66      	ldr	r3, [pc, #408]	; (800cfb4 <_strtod_l+0x57c>)
 800ce1a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ce1e:	ed93 7b00 	vldr	d7, [r3]
 800ce22:	ec49 8b16 	vmov	d6, r8, r9
 800ce26:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce2a:	ec59 8b17 	vmov	r8, r9, d7
 800ce2e:	e63e      	b.n	800caae <_strtod_l+0x76>
 800ce30:	9806      	ldr	r0, [sp, #24]
 800ce32:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800ce36:	4281      	cmp	r1, r0
 800ce38:	db1f      	blt.n	800ce7a <_strtod_l+0x442>
 800ce3a:	4a5e      	ldr	r2, [pc, #376]	; (800cfb4 <_strtod_l+0x57c>)
 800ce3c:	f1c3 030f 	rsb	r3, r3, #15
 800ce40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ce44:	ed91 7b00 	vldr	d7, [r1]
 800ce48:	ec49 8b16 	vmov	d6, r8, r9
 800ce4c:	1ac3      	subs	r3, r0, r3
 800ce4e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ce52:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce56:	ed92 6b00 	vldr	d6, [r2]
 800ce5a:	e7e4      	b.n	800ce26 <_strtod_l+0x3ee>
 800ce5c:	9906      	ldr	r1, [sp, #24]
 800ce5e:	3116      	adds	r1, #22
 800ce60:	db0b      	blt.n	800ce7a <_strtod_l+0x442>
 800ce62:	4b54      	ldr	r3, [pc, #336]	; (800cfb4 <_strtod_l+0x57c>)
 800ce64:	ebab 0505 	sub.w	r5, fp, r5
 800ce68:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ce6c:	ed95 7b00 	vldr	d7, [r5]
 800ce70:	ec49 8b16 	vmov	d6, r8, r9
 800ce74:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ce78:	e7d7      	b.n	800ce2a <_strtod_l+0x3f2>
 800ce7a:	9906      	ldr	r1, [sp, #24]
 800ce7c:	1a9a      	subs	r2, r3, r2
 800ce7e:	440a      	add	r2, r1
 800ce80:	2a00      	cmp	r2, #0
 800ce82:	dd6e      	ble.n	800cf62 <_strtod_l+0x52a>
 800ce84:	f012 000f 	ands.w	r0, r2, #15
 800ce88:	d00a      	beq.n	800cea0 <_strtod_l+0x468>
 800ce8a:	494a      	ldr	r1, [pc, #296]	; (800cfb4 <_strtod_l+0x57c>)
 800ce8c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ce90:	ed91 7b00 	vldr	d7, [r1]
 800ce94:	ec49 8b16 	vmov	d6, r8, r9
 800ce98:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce9c:	ec59 8b17 	vmov	r8, r9, d7
 800cea0:	f032 020f 	bics.w	r2, r2, #15
 800cea4:	d04e      	beq.n	800cf44 <_strtod_l+0x50c>
 800cea6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800ceaa:	dd22      	ble.n	800cef2 <_strtod_l+0x4ba>
 800ceac:	2500      	movs	r5, #0
 800ceae:	462e      	mov	r6, r5
 800ceb0:	9507      	str	r5, [sp, #28]
 800ceb2:	462f      	mov	r7, r5
 800ceb4:	2322      	movs	r3, #34	; 0x22
 800ceb6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800cfc0 <_strtod_l+0x588>
 800ceba:	6023      	str	r3, [r4, #0]
 800cebc:	f04f 0800 	mov.w	r8, #0
 800cec0:	9b07      	ldr	r3, [sp, #28]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f43f adf3 	beq.w	800caae <_strtod_l+0x76>
 800cec8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ceca:	4620      	mov	r0, r4
 800cecc:	f7ff f930 	bl	800c130 <_Bfree>
 800ced0:	4639      	mov	r1, r7
 800ced2:	4620      	mov	r0, r4
 800ced4:	f7ff f92c 	bl	800c130 <_Bfree>
 800ced8:	4631      	mov	r1, r6
 800ceda:	4620      	mov	r0, r4
 800cedc:	f7ff f928 	bl	800c130 <_Bfree>
 800cee0:	9907      	ldr	r1, [sp, #28]
 800cee2:	4620      	mov	r0, r4
 800cee4:	f7ff f924 	bl	800c130 <_Bfree>
 800cee8:	4629      	mov	r1, r5
 800ceea:	4620      	mov	r0, r4
 800ceec:	f7ff f920 	bl	800c130 <_Bfree>
 800cef0:	e5dd      	b.n	800caae <_strtod_l+0x76>
 800cef2:	2000      	movs	r0, #0
 800cef4:	ec49 8b17 	vmov	d7, r8, r9
 800cef8:	4f2f      	ldr	r7, [pc, #188]	; (800cfb8 <_strtod_l+0x580>)
 800cefa:	1112      	asrs	r2, r2, #4
 800cefc:	4601      	mov	r1, r0
 800cefe:	2a01      	cmp	r2, #1
 800cf00:	dc23      	bgt.n	800cf4a <_strtod_l+0x512>
 800cf02:	b108      	cbz	r0, 800cf08 <_strtod_l+0x4d0>
 800cf04:	ec59 8b17 	vmov	r8, r9, d7
 800cf08:	4a2b      	ldr	r2, [pc, #172]	; (800cfb8 <_strtod_l+0x580>)
 800cf0a:	482c      	ldr	r0, [pc, #176]	; (800cfbc <_strtod_l+0x584>)
 800cf0c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cf10:	ed92 7b00 	vldr	d7, [r2]
 800cf14:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800cf18:	ec49 8b16 	vmov	d6, r8, r9
 800cf1c:	4a28      	ldr	r2, [pc, #160]	; (800cfc0 <_strtod_l+0x588>)
 800cf1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf22:	ee17 1a90 	vmov	r1, s15
 800cf26:	400a      	ands	r2, r1
 800cf28:	4282      	cmp	r2, r0
 800cf2a:	ec59 8b17 	vmov	r8, r9, d7
 800cf2e:	d8bd      	bhi.n	800ceac <_strtod_l+0x474>
 800cf30:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800cf34:	4282      	cmp	r2, r0
 800cf36:	bf86      	itte	hi
 800cf38:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800cfc4 <_strtod_l+0x58c>
 800cf3c:	f04f 38ff 	movhi.w	r8, #4294967295
 800cf40:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800cf44:	2200      	movs	r2, #0
 800cf46:	9205      	str	r2, [sp, #20]
 800cf48:	e076      	b.n	800d038 <_strtod_l+0x600>
 800cf4a:	f012 0f01 	tst.w	r2, #1
 800cf4e:	d004      	beq.n	800cf5a <_strtod_l+0x522>
 800cf50:	ed97 6b00 	vldr	d6, [r7]
 800cf54:	2001      	movs	r0, #1
 800cf56:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf5a:	3101      	adds	r1, #1
 800cf5c:	1052      	asrs	r2, r2, #1
 800cf5e:	3708      	adds	r7, #8
 800cf60:	e7cd      	b.n	800cefe <_strtod_l+0x4c6>
 800cf62:	d0ef      	beq.n	800cf44 <_strtod_l+0x50c>
 800cf64:	4252      	negs	r2, r2
 800cf66:	f012 000f 	ands.w	r0, r2, #15
 800cf6a:	d00a      	beq.n	800cf82 <_strtod_l+0x54a>
 800cf6c:	4911      	ldr	r1, [pc, #68]	; (800cfb4 <_strtod_l+0x57c>)
 800cf6e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800cf72:	ed91 7b00 	vldr	d7, [r1]
 800cf76:	ec49 8b16 	vmov	d6, r8, r9
 800cf7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cf7e:	ec59 8b17 	vmov	r8, r9, d7
 800cf82:	1112      	asrs	r2, r2, #4
 800cf84:	d0de      	beq.n	800cf44 <_strtod_l+0x50c>
 800cf86:	2a1f      	cmp	r2, #31
 800cf88:	dd1e      	ble.n	800cfc8 <_strtod_l+0x590>
 800cf8a:	2500      	movs	r5, #0
 800cf8c:	462e      	mov	r6, r5
 800cf8e:	9507      	str	r5, [sp, #28]
 800cf90:	462f      	mov	r7, r5
 800cf92:	2322      	movs	r3, #34	; 0x22
 800cf94:	f04f 0800 	mov.w	r8, #0
 800cf98:	f04f 0900 	mov.w	r9, #0
 800cf9c:	6023      	str	r3, [r4, #0]
 800cf9e:	e78f      	b.n	800cec0 <_strtod_l+0x488>
 800cfa0:	08015fde 	.word	0x08015fde
 800cfa4:	08016204 	.word	0x08016204
 800cfa8:	08015fd6 	.word	0x08015fd6
 800cfac:	0801600d 	.word	0x0801600d
 800cfb0:	08016294 	.word	0x08016294
 800cfb4:	08016118 	.word	0x08016118
 800cfb8:	080160f0 	.word	0x080160f0
 800cfbc:	7ca00000 	.word	0x7ca00000
 800cfc0:	7ff00000 	.word	0x7ff00000
 800cfc4:	7fefffff 	.word	0x7fefffff
 800cfc8:	f012 0110 	ands.w	r1, r2, #16
 800cfcc:	bf18      	it	ne
 800cfce:	216a      	movne	r1, #106	; 0x6a
 800cfd0:	9105      	str	r1, [sp, #20]
 800cfd2:	ec49 8b17 	vmov	d7, r8, r9
 800cfd6:	49be      	ldr	r1, [pc, #760]	; (800d2d0 <_strtod_l+0x898>)
 800cfd8:	2000      	movs	r0, #0
 800cfda:	07d7      	lsls	r7, r2, #31
 800cfdc:	d504      	bpl.n	800cfe8 <_strtod_l+0x5b0>
 800cfde:	ed91 6b00 	vldr	d6, [r1]
 800cfe2:	2001      	movs	r0, #1
 800cfe4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cfe8:	1052      	asrs	r2, r2, #1
 800cfea:	f101 0108 	add.w	r1, r1, #8
 800cfee:	d1f4      	bne.n	800cfda <_strtod_l+0x5a2>
 800cff0:	b108      	cbz	r0, 800cff6 <_strtod_l+0x5be>
 800cff2:	ec59 8b17 	vmov	r8, r9, d7
 800cff6:	9a05      	ldr	r2, [sp, #20]
 800cff8:	b1ba      	cbz	r2, 800d02a <_strtod_l+0x5f2>
 800cffa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800cffe:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800d002:	2a00      	cmp	r2, #0
 800d004:	4648      	mov	r0, r9
 800d006:	dd10      	ble.n	800d02a <_strtod_l+0x5f2>
 800d008:	2a1f      	cmp	r2, #31
 800d00a:	f340 812c 	ble.w	800d266 <_strtod_l+0x82e>
 800d00e:	2a34      	cmp	r2, #52	; 0x34
 800d010:	bfde      	ittt	le
 800d012:	f04f 32ff 	movle.w	r2, #4294967295
 800d016:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800d01a:	408a      	lslle	r2, r1
 800d01c:	f04f 0800 	mov.w	r8, #0
 800d020:	bfcc      	ite	gt
 800d022:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d026:	ea02 0900 	andle.w	r9, r2, r0
 800d02a:	ec49 8b17 	vmov	d7, r8, r9
 800d02e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d036:	d0a8      	beq.n	800cf8a <_strtod_l+0x552>
 800d038:	9a07      	ldr	r2, [sp, #28]
 800d03a:	9200      	str	r2, [sp, #0]
 800d03c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d03e:	4632      	mov	r2, r6
 800d040:	4620      	mov	r0, r4
 800d042:	f7ff f8dd 	bl	800c200 <__s2b>
 800d046:	9007      	str	r0, [sp, #28]
 800d048:	2800      	cmp	r0, #0
 800d04a:	f43f af2f 	beq.w	800ceac <_strtod_l+0x474>
 800d04e:	9a06      	ldr	r2, [sp, #24]
 800d050:	2a00      	cmp	r2, #0
 800d052:	ebab 0305 	sub.w	r3, fp, r5
 800d056:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800d2b0 <_strtod_l+0x878>
 800d05a:	bfa8      	it	ge
 800d05c:	2300      	movge	r3, #0
 800d05e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800d2b8 <_strtod_l+0x880>
 800d062:	ed9f bb97 	vldr	d11, [pc, #604]	; 800d2c0 <_strtod_l+0x888>
 800d066:	9309      	str	r3, [sp, #36]	; 0x24
 800d068:	2500      	movs	r5, #0
 800d06a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d06e:	930c      	str	r3, [sp, #48]	; 0x30
 800d070:	462e      	mov	r6, r5
 800d072:	9b07      	ldr	r3, [sp, #28]
 800d074:	4620      	mov	r0, r4
 800d076:	6859      	ldr	r1, [r3, #4]
 800d078:	f7ff f81a 	bl	800c0b0 <_Balloc>
 800d07c:	4607      	mov	r7, r0
 800d07e:	2800      	cmp	r0, #0
 800d080:	f43f af18 	beq.w	800ceb4 <_strtod_l+0x47c>
 800d084:	9b07      	ldr	r3, [sp, #28]
 800d086:	691a      	ldr	r2, [r3, #16]
 800d088:	3202      	adds	r2, #2
 800d08a:	f103 010c 	add.w	r1, r3, #12
 800d08e:	0092      	lsls	r2, r2, #2
 800d090:	300c      	adds	r0, #12
 800d092:	f7fe f9b6 	bl	800b402 <memcpy>
 800d096:	ec49 8b10 	vmov	d0, r8, r9
 800d09a:	aa14      	add	r2, sp, #80	; 0x50
 800d09c:	a913      	add	r1, sp, #76	; 0x4c
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f7ff fbe2 	bl	800c868 <__d2b>
 800d0a4:	ec49 8b18 	vmov	d8, r8, r9
 800d0a8:	9012      	str	r0, [sp, #72]	; 0x48
 800d0aa:	2800      	cmp	r0, #0
 800d0ac:	f43f af02 	beq.w	800ceb4 <_strtod_l+0x47c>
 800d0b0:	2101      	movs	r1, #1
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f7ff f93c 	bl	800c330 <__i2b>
 800d0b8:	4606      	mov	r6, r0
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	f43f aefa 	beq.w	800ceb4 <_strtod_l+0x47c>
 800d0c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0c2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	bfab      	itete	ge
 800d0c8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800d0ca:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800d0cc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800d0d0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800d0d4:	bfac      	ite	ge
 800d0d6:	eb03 0b02 	addge.w	fp, r3, r2
 800d0da:	eba2 0a03 	sublt.w	sl, r2, r3
 800d0de:	9a05      	ldr	r2, [sp, #20]
 800d0e0:	1a9b      	subs	r3, r3, r2
 800d0e2:	440b      	add	r3, r1
 800d0e4:	4a7b      	ldr	r2, [pc, #492]	; (800d2d4 <_strtod_l+0x89c>)
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800d0ee:	f280 80cd 	bge.w	800d28c <_strtod_l+0x854>
 800d0f2:	1ad2      	subs	r2, r2, r3
 800d0f4:	2a1f      	cmp	r2, #31
 800d0f6:	eba1 0102 	sub.w	r1, r1, r2
 800d0fa:	f04f 0001 	mov.w	r0, #1
 800d0fe:	f300 80b9 	bgt.w	800d274 <_strtod_l+0x83c>
 800d102:	fa00 f302 	lsl.w	r3, r0, r2
 800d106:	930b      	str	r3, [sp, #44]	; 0x2c
 800d108:	2300      	movs	r3, #0
 800d10a:	930a      	str	r3, [sp, #40]	; 0x28
 800d10c:	eb0b 0301 	add.w	r3, fp, r1
 800d110:	9a05      	ldr	r2, [sp, #20]
 800d112:	459b      	cmp	fp, r3
 800d114:	448a      	add	sl, r1
 800d116:	4492      	add	sl, r2
 800d118:	465a      	mov	r2, fp
 800d11a:	bfa8      	it	ge
 800d11c:	461a      	movge	r2, r3
 800d11e:	4552      	cmp	r2, sl
 800d120:	bfa8      	it	ge
 800d122:	4652      	movge	r2, sl
 800d124:	2a00      	cmp	r2, #0
 800d126:	bfc2      	ittt	gt
 800d128:	1a9b      	subgt	r3, r3, r2
 800d12a:	ebaa 0a02 	subgt.w	sl, sl, r2
 800d12e:	ebab 0b02 	subgt.w	fp, fp, r2
 800d132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d134:	2a00      	cmp	r2, #0
 800d136:	dd18      	ble.n	800d16a <_strtod_l+0x732>
 800d138:	4631      	mov	r1, r6
 800d13a:	4620      	mov	r0, r4
 800d13c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d13e:	f7ff f9b7 	bl	800c4b0 <__pow5mult>
 800d142:	4606      	mov	r6, r0
 800d144:	2800      	cmp	r0, #0
 800d146:	f43f aeb5 	beq.w	800ceb4 <_strtod_l+0x47c>
 800d14a:	4601      	mov	r1, r0
 800d14c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d14e:	4620      	mov	r0, r4
 800d150:	f7ff f904 	bl	800c35c <__multiply>
 800d154:	900e      	str	r0, [sp, #56]	; 0x38
 800d156:	2800      	cmp	r0, #0
 800d158:	f43f aeac 	beq.w	800ceb4 <_strtod_l+0x47c>
 800d15c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d15e:	4620      	mov	r0, r4
 800d160:	f7fe ffe6 	bl	800c130 <_Bfree>
 800d164:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d168:	9212      	str	r2, [sp, #72]	; 0x48
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f300 8093 	bgt.w	800d296 <_strtod_l+0x85e>
 800d170:	9b06      	ldr	r3, [sp, #24]
 800d172:	2b00      	cmp	r3, #0
 800d174:	dd08      	ble.n	800d188 <_strtod_l+0x750>
 800d176:	4639      	mov	r1, r7
 800d178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d17a:	4620      	mov	r0, r4
 800d17c:	f7ff f998 	bl	800c4b0 <__pow5mult>
 800d180:	4607      	mov	r7, r0
 800d182:	2800      	cmp	r0, #0
 800d184:	f43f ae96 	beq.w	800ceb4 <_strtod_l+0x47c>
 800d188:	f1ba 0f00 	cmp.w	sl, #0
 800d18c:	dd08      	ble.n	800d1a0 <_strtod_l+0x768>
 800d18e:	4639      	mov	r1, r7
 800d190:	4652      	mov	r2, sl
 800d192:	4620      	mov	r0, r4
 800d194:	f7ff f9e6 	bl	800c564 <__lshift>
 800d198:	4607      	mov	r7, r0
 800d19a:	2800      	cmp	r0, #0
 800d19c:	f43f ae8a 	beq.w	800ceb4 <_strtod_l+0x47c>
 800d1a0:	f1bb 0f00 	cmp.w	fp, #0
 800d1a4:	dd08      	ble.n	800d1b8 <_strtod_l+0x780>
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	465a      	mov	r2, fp
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f7ff f9da 	bl	800c564 <__lshift>
 800d1b0:	4606      	mov	r6, r0
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	f43f ae7e 	beq.w	800ceb4 <_strtod_l+0x47c>
 800d1b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d1ba:	463a      	mov	r2, r7
 800d1bc:	4620      	mov	r0, r4
 800d1be:	f7ff fa59 	bl	800c674 <__mdiff>
 800d1c2:	4605      	mov	r5, r0
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	f43f ae75 	beq.w	800ceb4 <_strtod_l+0x47c>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800d1d0:	60c3      	str	r3, [r0, #12]
 800d1d2:	4631      	mov	r1, r6
 800d1d4:	f7ff fa32 	bl	800c63c <__mcmp>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	da7f      	bge.n	800d2dc <_strtod_l+0x8a4>
 800d1dc:	ea5a 0a08 	orrs.w	sl, sl, r8
 800d1e0:	f040 80a5 	bne.w	800d32e <_strtod_l+0x8f6>
 800d1e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f040 80a0 	bne.w	800d32e <_strtod_l+0x8f6>
 800d1ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d1f2:	0d1b      	lsrs	r3, r3, #20
 800d1f4:	051b      	lsls	r3, r3, #20
 800d1f6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d1fa:	f240 8098 	bls.w	800d32e <_strtod_l+0x8f6>
 800d1fe:	696b      	ldr	r3, [r5, #20]
 800d200:	b91b      	cbnz	r3, 800d20a <_strtod_l+0x7d2>
 800d202:	692b      	ldr	r3, [r5, #16]
 800d204:	2b01      	cmp	r3, #1
 800d206:	f340 8092 	ble.w	800d32e <_strtod_l+0x8f6>
 800d20a:	4629      	mov	r1, r5
 800d20c:	2201      	movs	r2, #1
 800d20e:	4620      	mov	r0, r4
 800d210:	f7ff f9a8 	bl	800c564 <__lshift>
 800d214:	4631      	mov	r1, r6
 800d216:	4605      	mov	r5, r0
 800d218:	f7ff fa10 	bl	800c63c <__mcmp>
 800d21c:	2800      	cmp	r0, #0
 800d21e:	f340 8086 	ble.w	800d32e <_strtod_l+0x8f6>
 800d222:	9905      	ldr	r1, [sp, #20]
 800d224:	4a2c      	ldr	r2, [pc, #176]	; (800d2d8 <_strtod_l+0x8a0>)
 800d226:	464b      	mov	r3, r9
 800d228:	2900      	cmp	r1, #0
 800d22a:	f000 809f 	beq.w	800d36c <_strtod_l+0x934>
 800d22e:	ea02 0109 	and.w	r1, r2, r9
 800d232:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d236:	f300 8099 	bgt.w	800d36c <_strtod_l+0x934>
 800d23a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d23e:	f77f aea8 	ble.w	800cf92 <_strtod_l+0x55a>
 800d242:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d2c8 <_strtod_l+0x890>
 800d246:	ec49 8b16 	vmov	d6, r8, r9
 800d24a:	4b23      	ldr	r3, [pc, #140]	; (800d2d8 <_strtod_l+0x8a0>)
 800d24c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d250:	ee17 2a90 	vmov	r2, s15
 800d254:	4013      	ands	r3, r2
 800d256:	ec59 8b17 	vmov	r8, r9, d7
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	f47f ae34 	bne.w	800cec8 <_strtod_l+0x490>
 800d260:	2322      	movs	r3, #34	; 0x22
 800d262:	6023      	str	r3, [r4, #0]
 800d264:	e630      	b.n	800cec8 <_strtod_l+0x490>
 800d266:	f04f 31ff 	mov.w	r1, #4294967295
 800d26a:	fa01 f202 	lsl.w	r2, r1, r2
 800d26e:	ea02 0808 	and.w	r8, r2, r8
 800d272:	e6da      	b.n	800d02a <_strtod_l+0x5f2>
 800d274:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800d278:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800d27c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800d280:	33e2      	adds	r3, #226	; 0xe2
 800d282:	fa00 f303 	lsl.w	r3, r0, r3
 800d286:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800d28a:	e73f      	b.n	800d10c <_strtod_l+0x6d4>
 800d28c:	2200      	movs	r2, #0
 800d28e:	2301      	movs	r3, #1
 800d290:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d294:	e73a      	b.n	800d10c <_strtod_l+0x6d4>
 800d296:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d298:	461a      	mov	r2, r3
 800d29a:	4620      	mov	r0, r4
 800d29c:	f7ff f962 	bl	800c564 <__lshift>
 800d2a0:	9012      	str	r0, [sp, #72]	; 0x48
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	f47f af64 	bne.w	800d170 <_strtod_l+0x738>
 800d2a8:	e604      	b.n	800ceb4 <_strtod_l+0x47c>
 800d2aa:	bf00      	nop
 800d2ac:	f3af 8000 	nop.w
 800d2b0:	94a03595 	.word	0x94a03595
 800d2b4:	3fcfffff 	.word	0x3fcfffff
 800d2b8:	94a03595 	.word	0x94a03595
 800d2bc:	3fdfffff 	.word	0x3fdfffff
 800d2c0:	35afe535 	.word	0x35afe535
 800d2c4:	3fe00000 	.word	0x3fe00000
 800d2c8:	00000000 	.word	0x00000000
 800d2cc:	39500000 	.word	0x39500000
 800d2d0:	08016218 	.word	0x08016218
 800d2d4:	fffffc02 	.word	0xfffffc02
 800d2d8:	7ff00000 	.word	0x7ff00000
 800d2dc:	46cb      	mov	fp, r9
 800d2de:	d15f      	bne.n	800d3a0 <_strtod_l+0x968>
 800d2e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2e4:	f1ba 0f00 	cmp.w	sl, #0
 800d2e8:	d02a      	beq.n	800d340 <_strtod_l+0x908>
 800d2ea:	4aa7      	ldr	r2, [pc, #668]	; (800d588 <_strtod_l+0xb50>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d12b      	bne.n	800d348 <_strtod_l+0x910>
 800d2f0:	9b05      	ldr	r3, [sp, #20]
 800d2f2:	4642      	mov	r2, r8
 800d2f4:	b1fb      	cbz	r3, 800d336 <_strtod_l+0x8fe>
 800d2f6:	4ba5      	ldr	r3, [pc, #660]	; (800d58c <_strtod_l+0xb54>)
 800d2f8:	ea09 0303 	and.w	r3, r9, r3
 800d2fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d300:	f04f 31ff 	mov.w	r1, #4294967295
 800d304:	d81a      	bhi.n	800d33c <_strtod_l+0x904>
 800d306:	0d1b      	lsrs	r3, r3, #20
 800d308:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d30c:	fa01 f303 	lsl.w	r3, r1, r3
 800d310:	429a      	cmp	r2, r3
 800d312:	d119      	bne.n	800d348 <_strtod_l+0x910>
 800d314:	4b9e      	ldr	r3, [pc, #632]	; (800d590 <_strtod_l+0xb58>)
 800d316:	459b      	cmp	fp, r3
 800d318:	d102      	bne.n	800d320 <_strtod_l+0x8e8>
 800d31a:	3201      	adds	r2, #1
 800d31c:	f43f adca 	beq.w	800ceb4 <_strtod_l+0x47c>
 800d320:	4b9a      	ldr	r3, [pc, #616]	; (800d58c <_strtod_l+0xb54>)
 800d322:	ea0b 0303 	and.w	r3, fp, r3
 800d326:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d32a:	f04f 0800 	mov.w	r8, #0
 800d32e:	9b05      	ldr	r3, [sp, #20]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d186      	bne.n	800d242 <_strtod_l+0x80a>
 800d334:	e5c8      	b.n	800cec8 <_strtod_l+0x490>
 800d336:	f04f 33ff 	mov.w	r3, #4294967295
 800d33a:	e7e9      	b.n	800d310 <_strtod_l+0x8d8>
 800d33c:	460b      	mov	r3, r1
 800d33e:	e7e7      	b.n	800d310 <_strtod_l+0x8d8>
 800d340:	ea53 0308 	orrs.w	r3, r3, r8
 800d344:	f43f af6d 	beq.w	800d222 <_strtod_l+0x7ea>
 800d348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d34a:	b1cb      	cbz	r3, 800d380 <_strtod_l+0x948>
 800d34c:	ea13 0f0b 	tst.w	r3, fp
 800d350:	d0ed      	beq.n	800d32e <_strtod_l+0x8f6>
 800d352:	9a05      	ldr	r2, [sp, #20]
 800d354:	4640      	mov	r0, r8
 800d356:	4649      	mov	r1, r9
 800d358:	f1ba 0f00 	cmp.w	sl, #0
 800d35c:	d014      	beq.n	800d388 <_strtod_l+0x950>
 800d35e:	f7ff fb51 	bl	800ca04 <sulp>
 800d362:	ee38 7b00 	vadd.f64	d7, d8, d0
 800d366:	ec59 8b17 	vmov	r8, r9, d7
 800d36a:	e7e0      	b.n	800d32e <_strtod_l+0x8f6>
 800d36c:	4013      	ands	r3, r2
 800d36e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d372:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d376:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d37a:	f04f 38ff 	mov.w	r8, #4294967295
 800d37e:	e7d6      	b.n	800d32e <_strtod_l+0x8f6>
 800d380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d382:	ea13 0f08 	tst.w	r3, r8
 800d386:	e7e3      	b.n	800d350 <_strtod_l+0x918>
 800d388:	f7ff fb3c 	bl	800ca04 <sulp>
 800d38c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800d390:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d398:	ec59 8b10 	vmov	r8, r9, d0
 800d39c:	d1c7      	bne.n	800d32e <_strtod_l+0x8f6>
 800d39e:	e5f8      	b.n	800cf92 <_strtod_l+0x55a>
 800d3a0:	4631      	mov	r1, r6
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	f7ff faba 	bl	800c91c <__ratio>
 800d3a8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800d3ac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b4:	d85f      	bhi.n	800d476 <_strtod_l+0xa3e>
 800d3b6:	f1ba 0f00 	cmp.w	sl, #0
 800d3ba:	d166      	bne.n	800d48a <_strtod_l+0xa52>
 800d3bc:	f1b8 0f00 	cmp.w	r8, #0
 800d3c0:	d14d      	bne.n	800d45e <_strtod_l+0xa26>
 800d3c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3c6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d162      	bne.n	800d494 <_strtod_l+0xa5c>
 800d3ce:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800d3d2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800d3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3da:	d401      	bmi.n	800d3e0 <_strtod_l+0x9a8>
 800d3dc:	ee20 db0d 	vmul.f64	d13, d0, d13
 800d3e0:	eeb1 cb4d 	vneg.f64	d12, d13
 800d3e4:	4869      	ldr	r0, [pc, #420]	; (800d58c <_strtod_l+0xb54>)
 800d3e6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800d598 <_strtod_l+0xb60>
 800d3ea:	ea0b 0100 	and.w	r1, fp, r0
 800d3ee:	4561      	cmp	r1, ip
 800d3f0:	ec53 2b1c 	vmov	r2, r3, d12
 800d3f4:	d17a      	bne.n	800d4ec <_strtod_l+0xab4>
 800d3f6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800d3fa:	ec49 8b10 	vmov	d0, r8, r9
 800d3fe:	910a      	str	r1, [sp, #40]	; 0x28
 800d400:	f7ff f9c2 	bl	800c788 <__ulp>
 800d404:	ec49 8b1e 	vmov	d14, r8, r9
 800d408:	4860      	ldr	r0, [pc, #384]	; (800d58c <_strtod_l+0xb54>)
 800d40a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800d40e:	ee1e 3a90 	vmov	r3, s29
 800d412:	4a60      	ldr	r2, [pc, #384]	; (800d594 <_strtod_l+0xb5c>)
 800d414:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d416:	4018      	ands	r0, r3
 800d418:	4290      	cmp	r0, r2
 800d41a:	ec59 8b1e 	vmov	r8, r9, d14
 800d41e:	d93c      	bls.n	800d49a <_strtod_l+0xa62>
 800d420:	ee18 2a90 	vmov	r2, s17
 800d424:	4b5a      	ldr	r3, [pc, #360]	; (800d590 <_strtod_l+0xb58>)
 800d426:	429a      	cmp	r2, r3
 800d428:	d104      	bne.n	800d434 <_strtod_l+0x9fc>
 800d42a:	ee18 3a10 	vmov	r3, s16
 800d42e:	3301      	adds	r3, #1
 800d430:	f43f ad40 	beq.w	800ceb4 <_strtod_l+0x47c>
 800d434:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800d590 <_strtod_l+0xb58>
 800d438:	f04f 38ff 	mov.w	r8, #4294967295
 800d43c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d43e:	4620      	mov	r0, r4
 800d440:	f7fe fe76 	bl	800c130 <_Bfree>
 800d444:	4639      	mov	r1, r7
 800d446:	4620      	mov	r0, r4
 800d448:	f7fe fe72 	bl	800c130 <_Bfree>
 800d44c:	4631      	mov	r1, r6
 800d44e:	4620      	mov	r0, r4
 800d450:	f7fe fe6e 	bl	800c130 <_Bfree>
 800d454:	4629      	mov	r1, r5
 800d456:	4620      	mov	r0, r4
 800d458:	f7fe fe6a 	bl	800c130 <_Bfree>
 800d45c:	e609      	b.n	800d072 <_strtod_l+0x63a>
 800d45e:	f1b8 0f01 	cmp.w	r8, #1
 800d462:	d103      	bne.n	800d46c <_strtod_l+0xa34>
 800d464:	f1b9 0f00 	cmp.w	r9, #0
 800d468:	f43f ad93 	beq.w	800cf92 <_strtod_l+0x55a>
 800d46c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800d470:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800d474:	e7b6      	b.n	800d3e4 <_strtod_l+0x9ac>
 800d476:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800d47a:	ee20 db0d 	vmul.f64	d13, d0, d13
 800d47e:	f1ba 0f00 	cmp.w	sl, #0
 800d482:	d0ad      	beq.n	800d3e0 <_strtod_l+0x9a8>
 800d484:	eeb0 cb4d 	vmov.f64	d12, d13
 800d488:	e7ac      	b.n	800d3e4 <_strtod_l+0x9ac>
 800d48a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800d48e:	eeb0 db4c 	vmov.f64	d13, d12
 800d492:	e7a7      	b.n	800d3e4 <_strtod_l+0x9ac>
 800d494:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800d498:	e7a4      	b.n	800d3e4 <_strtod_l+0x9ac>
 800d49a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d49e:	9b05      	ldr	r3, [sp, #20]
 800d4a0:	46cb      	mov	fp, r9
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d1ca      	bne.n	800d43c <_strtod_l+0xa04>
 800d4a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d4aa:	0d1b      	lsrs	r3, r3, #20
 800d4ac:	051b      	lsls	r3, r3, #20
 800d4ae:	4299      	cmp	r1, r3
 800d4b0:	d1c4      	bne.n	800d43c <_strtod_l+0xa04>
 800d4b2:	ec51 0b1d 	vmov	r0, r1, d13
 800d4b6:	f7f3 f8ff 	bl	80006b8 <__aeabi_d2lz>
 800d4ba:	f7f3 f8b7 	bl	800062c <__aeabi_l2d>
 800d4be:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800d4c2:	ec41 0b17 	vmov	d7, r0, r1
 800d4c6:	ea4b 0b08 	orr.w	fp, fp, r8
 800d4ca:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800d4ce:	ee3d db47 	vsub.f64	d13, d13, d7
 800d4d2:	d03c      	beq.n	800d54e <_strtod_l+0xb16>
 800d4d4:	eeb4 dbca 	vcmpe.f64	d13, d10
 800d4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4dc:	f53f acf4 	bmi.w	800cec8 <_strtod_l+0x490>
 800d4e0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800d4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e8:	dda8      	ble.n	800d43c <_strtod_l+0xa04>
 800d4ea:	e4ed      	b.n	800cec8 <_strtod_l+0x490>
 800d4ec:	9805      	ldr	r0, [sp, #20]
 800d4ee:	b1f0      	cbz	r0, 800d52e <_strtod_l+0xaf6>
 800d4f0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800d4f4:	d81b      	bhi.n	800d52e <_strtod_l+0xaf6>
 800d4f6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800d580 <_strtod_l+0xb48>
 800d4fa:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800d4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d502:	d811      	bhi.n	800d528 <_strtod_l+0xaf0>
 800d504:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800d508:	ee1d 3a10 	vmov	r3, s26
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	bf38      	it	cc
 800d510:	2301      	movcc	r3, #1
 800d512:	ee0d 3a10 	vmov	s26, r3
 800d516:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800d51a:	f1ba 0f00 	cmp.w	sl, #0
 800d51e:	d113      	bne.n	800d548 <_strtod_l+0xb10>
 800d520:	eeb1 7b4d 	vneg.f64	d7, d13
 800d524:	ec53 2b17 	vmov	r2, r3, d7
 800d528:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800d52c:	1a43      	subs	r3, r0, r1
 800d52e:	eeb0 0b48 	vmov.f64	d0, d8
 800d532:	ec43 2b1c 	vmov	d12, r2, r3
 800d536:	910a      	str	r1, [sp, #40]	; 0x28
 800d538:	f7ff f926 	bl	800c788 <__ulp>
 800d53c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d53e:	eeac 8b00 	vfma.f64	d8, d12, d0
 800d542:	ec59 8b18 	vmov	r8, r9, d8
 800d546:	e7aa      	b.n	800d49e <_strtod_l+0xa66>
 800d548:	eeb0 7b4d 	vmov.f64	d7, d13
 800d54c:	e7ea      	b.n	800d524 <_strtod_l+0xaec>
 800d54e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800d552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d556:	f57f af71 	bpl.w	800d43c <_strtod_l+0xa04>
 800d55a:	e4b5      	b.n	800cec8 <_strtod_l+0x490>
 800d55c:	2300      	movs	r3, #0
 800d55e:	9308      	str	r3, [sp, #32]
 800d560:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d562:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d564:	6013      	str	r3, [r2, #0]
 800d566:	f7ff baa6 	b.w	800cab6 <_strtod_l+0x7e>
 800d56a:	2a65      	cmp	r2, #101	; 0x65
 800d56c:	f43f aba2 	beq.w	800ccb4 <_strtod_l+0x27c>
 800d570:	2a45      	cmp	r2, #69	; 0x45
 800d572:	f43f ab9f 	beq.w	800ccb4 <_strtod_l+0x27c>
 800d576:	2101      	movs	r1, #1
 800d578:	f7ff bbd8 	b.w	800cd2c <_strtod_l+0x2f4>
 800d57c:	f3af 8000 	nop.w
 800d580:	ffc00000 	.word	0xffc00000
 800d584:	41dfffff 	.word	0x41dfffff
 800d588:	000fffff 	.word	0x000fffff
 800d58c:	7ff00000 	.word	0x7ff00000
 800d590:	7fefffff 	.word	0x7fefffff
 800d594:	7c9fffff 	.word	0x7c9fffff
 800d598:	7fe00000 	.word	0x7fe00000

0800d59c <_strtod_r>:
 800d59c:	4b01      	ldr	r3, [pc, #4]	; (800d5a4 <_strtod_r+0x8>)
 800d59e:	f7ff ba4b 	b.w	800ca38 <_strtod_l>
 800d5a2:	bf00      	nop
 800d5a4:	20000068 	.word	0x20000068

0800d5a8 <__ssputs_r>:
 800d5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5ac:	688e      	ldr	r6, [r1, #8]
 800d5ae:	461f      	mov	r7, r3
 800d5b0:	42be      	cmp	r6, r7
 800d5b2:	680b      	ldr	r3, [r1, #0]
 800d5b4:	4682      	mov	sl, r0
 800d5b6:	460c      	mov	r4, r1
 800d5b8:	4690      	mov	r8, r2
 800d5ba:	d82c      	bhi.n	800d616 <__ssputs_r+0x6e>
 800d5bc:	898a      	ldrh	r2, [r1, #12]
 800d5be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d5c2:	d026      	beq.n	800d612 <__ssputs_r+0x6a>
 800d5c4:	6965      	ldr	r5, [r4, #20]
 800d5c6:	6909      	ldr	r1, [r1, #16]
 800d5c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5cc:	eba3 0901 	sub.w	r9, r3, r1
 800d5d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5d4:	1c7b      	adds	r3, r7, #1
 800d5d6:	444b      	add	r3, r9
 800d5d8:	106d      	asrs	r5, r5, #1
 800d5da:	429d      	cmp	r5, r3
 800d5dc:	bf38      	it	cc
 800d5de:	461d      	movcc	r5, r3
 800d5e0:	0553      	lsls	r3, r2, #21
 800d5e2:	d527      	bpl.n	800d634 <__ssputs_r+0x8c>
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	f7fc fc2f 	bl	8009e48 <_malloc_r>
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	b360      	cbz	r0, 800d648 <__ssputs_r+0xa0>
 800d5ee:	6921      	ldr	r1, [r4, #16]
 800d5f0:	464a      	mov	r2, r9
 800d5f2:	f7fd ff06 	bl	800b402 <memcpy>
 800d5f6:	89a3      	ldrh	r3, [r4, #12]
 800d5f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d600:	81a3      	strh	r3, [r4, #12]
 800d602:	6126      	str	r6, [r4, #16]
 800d604:	6165      	str	r5, [r4, #20]
 800d606:	444e      	add	r6, r9
 800d608:	eba5 0509 	sub.w	r5, r5, r9
 800d60c:	6026      	str	r6, [r4, #0]
 800d60e:	60a5      	str	r5, [r4, #8]
 800d610:	463e      	mov	r6, r7
 800d612:	42be      	cmp	r6, r7
 800d614:	d900      	bls.n	800d618 <__ssputs_r+0x70>
 800d616:	463e      	mov	r6, r7
 800d618:	6820      	ldr	r0, [r4, #0]
 800d61a:	4632      	mov	r2, r6
 800d61c:	4641      	mov	r1, r8
 800d61e:	f000 fb6f 	bl	800dd00 <memmove>
 800d622:	68a3      	ldr	r3, [r4, #8]
 800d624:	1b9b      	subs	r3, r3, r6
 800d626:	60a3      	str	r3, [r4, #8]
 800d628:	6823      	ldr	r3, [r4, #0]
 800d62a:	4433      	add	r3, r6
 800d62c:	6023      	str	r3, [r4, #0]
 800d62e:	2000      	movs	r0, #0
 800d630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d634:	462a      	mov	r2, r5
 800d636:	f000 ff42 	bl	800e4be <_realloc_r>
 800d63a:	4606      	mov	r6, r0
 800d63c:	2800      	cmp	r0, #0
 800d63e:	d1e0      	bne.n	800d602 <__ssputs_r+0x5a>
 800d640:	6921      	ldr	r1, [r4, #16]
 800d642:	4650      	mov	r0, sl
 800d644:	f7fe fce8 	bl	800c018 <_free_r>
 800d648:	230c      	movs	r3, #12
 800d64a:	f8ca 3000 	str.w	r3, [sl]
 800d64e:	89a3      	ldrh	r3, [r4, #12]
 800d650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d654:	81a3      	strh	r3, [r4, #12]
 800d656:	f04f 30ff 	mov.w	r0, #4294967295
 800d65a:	e7e9      	b.n	800d630 <__ssputs_r+0x88>

0800d65c <_svfiprintf_r>:
 800d65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d660:	4698      	mov	r8, r3
 800d662:	898b      	ldrh	r3, [r1, #12]
 800d664:	061b      	lsls	r3, r3, #24
 800d666:	b09d      	sub	sp, #116	; 0x74
 800d668:	4607      	mov	r7, r0
 800d66a:	460d      	mov	r5, r1
 800d66c:	4614      	mov	r4, r2
 800d66e:	d50e      	bpl.n	800d68e <_svfiprintf_r+0x32>
 800d670:	690b      	ldr	r3, [r1, #16]
 800d672:	b963      	cbnz	r3, 800d68e <_svfiprintf_r+0x32>
 800d674:	2140      	movs	r1, #64	; 0x40
 800d676:	f7fc fbe7 	bl	8009e48 <_malloc_r>
 800d67a:	6028      	str	r0, [r5, #0]
 800d67c:	6128      	str	r0, [r5, #16]
 800d67e:	b920      	cbnz	r0, 800d68a <_svfiprintf_r+0x2e>
 800d680:	230c      	movs	r3, #12
 800d682:	603b      	str	r3, [r7, #0]
 800d684:	f04f 30ff 	mov.w	r0, #4294967295
 800d688:	e0d0      	b.n	800d82c <_svfiprintf_r+0x1d0>
 800d68a:	2340      	movs	r3, #64	; 0x40
 800d68c:	616b      	str	r3, [r5, #20]
 800d68e:	2300      	movs	r3, #0
 800d690:	9309      	str	r3, [sp, #36]	; 0x24
 800d692:	2320      	movs	r3, #32
 800d694:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d698:	f8cd 800c 	str.w	r8, [sp, #12]
 800d69c:	2330      	movs	r3, #48	; 0x30
 800d69e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d844 <_svfiprintf_r+0x1e8>
 800d6a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6a6:	f04f 0901 	mov.w	r9, #1
 800d6aa:	4623      	mov	r3, r4
 800d6ac:	469a      	mov	sl, r3
 800d6ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6b2:	b10a      	cbz	r2, 800d6b8 <_svfiprintf_r+0x5c>
 800d6b4:	2a25      	cmp	r2, #37	; 0x25
 800d6b6:	d1f9      	bne.n	800d6ac <_svfiprintf_r+0x50>
 800d6b8:	ebba 0b04 	subs.w	fp, sl, r4
 800d6bc:	d00b      	beq.n	800d6d6 <_svfiprintf_r+0x7a>
 800d6be:	465b      	mov	r3, fp
 800d6c0:	4622      	mov	r2, r4
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4638      	mov	r0, r7
 800d6c6:	f7ff ff6f 	bl	800d5a8 <__ssputs_r>
 800d6ca:	3001      	adds	r0, #1
 800d6cc:	f000 80a9 	beq.w	800d822 <_svfiprintf_r+0x1c6>
 800d6d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6d2:	445a      	add	r2, fp
 800d6d4:	9209      	str	r2, [sp, #36]	; 0x24
 800d6d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 80a1 	beq.w	800d822 <_svfiprintf_r+0x1c6>
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6ea:	f10a 0a01 	add.w	sl, sl, #1
 800d6ee:	9304      	str	r3, [sp, #16]
 800d6f0:	9307      	str	r3, [sp, #28]
 800d6f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6f6:	931a      	str	r3, [sp, #104]	; 0x68
 800d6f8:	4654      	mov	r4, sl
 800d6fa:	2205      	movs	r2, #5
 800d6fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d700:	4850      	ldr	r0, [pc, #320]	; (800d844 <_svfiprintf_r+0x1e8>)
 800d702:	f7f2 fdad 	bl	8000260 <memchr>
 800d706:	9a04      	ldr	r2, [sp, #16]
 800d708:	b9d8      	cbnz	r0, 800d742 <_svfiprintf_r+0xe6>
 800d70a:	06d0      	lsls	r0, r2, #27
 800d70c:	bf44      	itt	mi
 800d70e:	2320      	movmi	r3, #32
 800d710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d714:	0711      	lsls	r1, r2, #28
 800d716:	bf44      	itt	mi
 800d718:	232b      	movmi	r3, #43	; 0x2b
 800d71a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d71e:	f89a 3000 	ldrb.w	r3, [sl]
 800d722:	2b2a      	cmp	r3, #42	; 0x2a
 800d724:	d015      	beq.n	800d752 <_svfiprintf_r+0xf6>
 800d726:	9a07      	ldr	r2, [sp, #28]
 800d728:	4654      	mov	r4, sl
 800d72a:	2000      	movs	r0, #0
 800d72c:	f04f 0c0a 	mov.w	ip, #10
 800d730:	4621      	mov	r1, r4
 800d732:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d736:	3b30      	subs	r3, #48	; 0x30
 800d738:	2b09      	cmp	r3, #9
 800d73a:	d94d      	bls.n	800d7d8 <_svfiprintf_r+0x17c>
 800d73c:	b1b0      	cbz	r0, 800d76c <_svfiprintf_r+0x110>
 800d73e:	9207      	str	r2, [sp, #28]
 800d740:	e014      	b.n	800d76c <_svfiprintf_r+0x110>
 800d742:	eba0 0308 	sub.w	r3, r0, r8
 800d746:	fa09 f303 	lsl.w	r3, r9, r3
 800d74a:	4313      	orrs	r3, r2
 800d74c:	9304      	str	r3, [sp, #16]
 800d74e:	46a2      	mov	sl, r4
 800d750:	e7d2      	b.n	800d6f8 <_svfiprintf_r+0x9c>
 800d752:	9b03      	ldr	r3, [sp, #12]
 800d754:	1d19      	adds	r1, r3, #4
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	9103      	str	r1, [sp, #12]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	bfbb      	ittet	lt
 800d75e:	425b      	neglt	r3, r3
 800d760:	f042 0202 	orrlt.w	r2, r2, #2
 800d764:	9307      	strge	r3, [sp, #28]
 800d766:	9307      	strlt	r3, [sp, #28]
 800d768:	bfb8      	it	lt
 800d76a:	9204      	strlt	r2, [sp, #16]
 800d76c:	7823      	ldrb	r3, [r4, #0]
 800d76e:	2b2e      	cmp	r3, #46	; 0x2e
 800d770:	d10c      	bne.n	800d78c <_svfiprintf_r+0x130>
 800d772:	7863      	ldrb	r3, [r4, #1]
 800d774:	2b2a      	cmp	r3, #42	; 0x2a
 800d776:	d134      	bne.n	800d7e2 <_svfiprintf_r+0x186>
 800d778:	9b03      	ldr	r3, [sp, #12]
 800d77a:	1d1a      	adds	r2, r3, #4
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	9203      	str	r2, [sp, #12]
 800d780:	2b00      	cmp	r3, #0
 800d782:	bfb8      	it	lt
 800d784:	f04f 33ff 	movlt.w	r3, #4294967295
 800d788:	3402      	adds	r4, #2
 800d78a:	9305      	str	r3, [sp, #20]
 800d78c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d854 <_svfiprintf_r+0x1f8>
 800d790:	7821      	ldrb	r1, [r4, #0]
 800d792:	2203      	movs	r2, #3
 800d794:	4650      	mov	r0, sl
 800d796:	f7f2 fd63 	bl	8000260 <memchr>
 800d79a:	b138      	cbz	r0, 800d7ac <_svfiprintf_r+0x150>
 800d79c:	9b04      	ldr	r3, [sp, #16]
 800d79e:	eba0 000a 	sub.w	r0, r0, sl
 800d7a2:	2240      	movs	r2, #64	; 0x40
 800d7a4:	4082      	lsls	r2, r0
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	3401      	adds	r4, #1
 800d7aa:	9304      	str	r3, [sp, #16]
 800d7ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7b0:	4825      	ldr	r0, [pc, #148]	; (800d848 <_svfiprintf_r+0x1ec>)
 800d7b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7b6:	2206      	movs	r2, #6
 800d7b8:	f7f2 fd52 	bl	8000260 <memchr>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d038      	beq.n	800d832 <_svfiprintf_r+0x1d6>
 800d7c0:	4b22      	ldr	r3, [pc, #136]	; (800d84c <_svfiprintf_r+0x1f0>)
 800d7c2:	bb1b      	cbnz	r3, 800d80c <_svfiprintf_r+0x1b0>
 800d7c4:	9b03      	ldr	r3, [sp, #12]
 800d7c6:	3307      	adds	r3, #7
 800d7c8:	f023 0307 	bic.w	r3, r3, #7
 800d7cc:	3308      	adds	r3, #8
 800d7ce:	9303      	str	r3, [sp, #12]
 800d7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d2:	4433      	add	r3, r6
 800d7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7d6:	e768      	b.n	800d6aa <_svfiprintf_r+0x4e>
 800d7d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7dc:	460c      	mov	r4, r1
 800d7de:	2001      	movs	r0, #1
 800d7e0:	e7a6      	b.n	800d730 <_svfiprintf_r+0xd4>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	3401      	adds	r4, #1
 800d7e6:	9305      	str	r3, [sp, #20]
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	f04f 0c0a 	mov.w	ip, #10
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7f4:	3a30      	subs	r2, #48	; 0x30
 800d7f6:	2a09      	cmp	r2, #9
 800d7f8:	d903      	bls.n	800d802 <_svfiprintf_r+0x1a6>
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d0c6      	beq.n	800d78c <_svfiprintf_r+0x130>
 800d7fe:	9105      	str	r1, [sp, #20]
 800d800:	e7c4      	b.n	800d78c <_svfiprintf_r+0x130>
 800d802:	fb0c 2101 	mla	r1, ip, r1, r2
 800d806:	4604      	mov	r4, r0
 800d808:	2301      	movs	r3, #1
 800d80a:	e7f0      	b.n	800d7ee <_svfiprintf_r+0x192>
 800d80c:	ab03      	add	r3, sp, #12
 800d80e:	9300      	str	r3, [sp, #0]
 800d810:	462a      	mov	r2, r5
 800d812:	4b0f      	ldr	r3, [pc, #60]	; (800d850 <_svfiprintf_r+0x1f4>)
 800d814:	a904      	add	r1, sp, #16
 800d816:	4638      	mov	r0, r7
 800d818:	f7fc fcc2 	bl	800a1a0 <_printf_float>
 800d81c:	1c42      	adds	r2, r0, #1
 800d81e:	4606      	mov	r6, r0
 800d820:	d1d6      	bne.n	800d7d0 <_svfiprintf_r+0x174>
 800d822:	89ab      	ldrh	r3, [r5, #12]
 800d824:	065b      	lsls	r3, r3, #25
 800d826:	f53f af2d 	bmi.w	800d684 <_svfiprintf_r+0x28>
 800d82a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d82c:	b01d      	add	sp, #116	; 0x74
 800d82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d832:	ab03      	add	r3, sp, #12
 800d834:	9300      	str	r3, [sp, #0]
 800d836:	462a      	mov	r2, r5
 800d838:	4b05      	ldr	r3, [pc, #20]	; (800d850 <_svfiprintf_r+0x1f4>)
 800d83a:	a904      	add	r1, sp, #16
 800d83c:	4638      	mov	r0, r7
 800d83e:	f7fc ff37 	bl	800a6b0 <_printf_i>
 800d842:	e7eb      	b.n	800d81c <_svfiprintf_r+0x1c0>
 800d844:	08016240 	.word	0x08016240
 800d848:	0801624a 	.word	0x0801624a
 800d84c:	0800a1a1 	.word	0x0800a1a1
 800d850:	0800d5a9 	.word	0x0800d5a9
 800d854:	08016246 	.word	0x08016246

0800d858 <__sfputc_r>:
 800d858:	6893      	ldr	r3, [r2, #8]
 800d85a:	3b01      	subs	r3, #1
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	b410      	push	{r4}
 800d860:	6093      	str	r3, [r2, #8]
 800d862:	da08      	bge.n	800d876 <__sfputc_r+0x1e>
 800d864:	6994      	ldr	r4, [r2, #24]
 800d866:	42a3      	cmp	r3, r4
 800d868:	db01      	blt.n	800d86e <__sfputc_r+0x16>
 800d86a:	290a      	cmp	r1, #10
 800d86c:	d103      	bne.n	800d876 <__sfputc_r+0x1e>
 800d86e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d872:	f7fd bc84 	b.w	800b17e <__swbuf_r>
 800d876:	6813      	ldr	r3, [r2, #0]
 800d878:	1c58      	adds	r0, r3, #1
 800d87a:	6010      	str	r0, [r2, #0]
 800d87c:	7019      	strb	r1, [r3, #0]
 800d87e:	4608      	mov	r0, r1
 800d880:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d884:	4770      	bx	lr

0800d886 <__sfputs_r>:
 800d886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d888:	4606      	mov	r6, r0
 800d88a:	460f      	mov	r7, r1
 800d88c:	4614      	mov	r4, r2
 800d88e:	18d5      	adds	r5, r2, r3
 800d890:	42ac      	cmp	r4, r5
 800d892:	d101      	bne.n	800d898 <__sfputs_r+0x12>
 800d894:	2000      	movs	r0, #0
 800d896:	e007      	b.n	800d8a8 <__sfputs_r+0x22>
 800d898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d89c:	463a      	mov	r2, r7
 800d89e:	4630      	mov	r0, r6
 800d8a0:	f7ff ffda 	bl	800d858 <__sfputc_r>
 800d8a4:	1c43      	adds	r3, r0, #1
 800d8a6:	d1f3      	bne.n	800d890 <__sfputs_r+0xa>
 800d8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d8ac <_vfiprintf_r>:
 800d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b0:	460d      	mov	r5, r1
 800d8b2:	b09d      	sub	sp, #116	; 0x74
 800d8b4:	4614      	mov	r4, r2
 800d8b6:	4698      	mov	r8, r3
 800d8b8:	4606      	mov	r6, r0
 800d8ba:	b118      	cbz	r0, 800d8c4 <_vfiprintf_r+0x18>
 800d8bc:	6a03      	ldr	r3, [r0, #32]
 800d8be:	b90b      	cbnz	r3, 800d8c4 <_vfiprintf_r+0x18>
 800d8c0:	f7fd faa8 	bl	800ae14 <__sinit>
 800d8c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8c6:	07d9      	lsls	r1, r3, #31
 800d8c8:	d405      	bmi.n	800d8d6 <_vfiprintf_r+0x2a>
 800d8ca:	89ab      	ldrh	r3, [r5, #12]
 800d8cc:	059a      	lsls	r2, r3, #22
 800d8ce:	d402      	bmi.n	800d8d6 <_vfiprintf_r+0x2a>
 800d8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8d2:	f7fd fd8c 	bl	800b3ee <__retarget_lock_acquire_recursive>
 800d8d6:	89ab      	ldrh	r3, [r5, #12]
 800d8d8:	071b      	lsls	r3, r3, #28
 800d8da:	d501      	bpl.n	800d8e0 <_vfiprintf_r+0x34>
 800d8dc:	692b      	ldr	r3, [r5, #16]
 800d8de:	b99b      	cbnz	r3, 800d908 <_vfiprintf_r+0x5c>
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	f7fd fc88 	bl	800b1f8 <__swsetup_r>
 800d8e8:	b170      	cbz	r0, 800d908 <_vfiprintf_r+0x5c>
 800d8ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8ec:	07dc      	lsls	r4, r3, #31
 800d8ee:	d504      	bpl.n	800d8fa <_vfiprintf_r+0x4e>
 800d8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f4:	b01d      	add	sp, #116	; 0x74
 800d8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8fa:	89ab      	ldrh	r3, [r5, #12]
 800d8fc:	0598      	lsls	r0, r3, #22
 800d8fe:	d4f7      	bmi.n	800d8f0 <_vfiprintf_r+0x44>
 800d900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d902:	f7fd fd75 	bl	800b3f0 <__retarget_lock_release_recursive>
 800d906:	e7f3      	b.n	800d8f0 <_vfiprintf_r+0x44>
 800d908:	2300      	movs	r3, #0
 800d90a:	9309      	str	r3, [sp, #36]	; 0x24
 800d90c:	2320      	movs	r3, #32
 800d90e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d912:	f8cd 800c 	str.w	r8, [sp, #12]
 800d916:	2330      	movs	r3, #48	; 0x30
 800d918:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dacc <_vfiprintf_r+0x220>
 800d91c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d920:	f04f 0901 	mov.w	r9, #1
 800d924:	4623      	mov	r3, r4
 800d926:	469a      	mov	sl, r3
 800d928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d92c:	b10a      	cbz	r2, 800d932 <_vfiprintf_r+0x86>
 800d92e:	2a25      	cmp	r2, #37	; 0x25
 800d930:	d1f9      	bne.n	800d926 <_vfiprintf_r+0x7a>
 800d932:	ebba 0b04 	subs.w	fp, sl, r4
 800d936:	d00b      	beq.n	800d950 <_vfiprintf_r+0xa4>
 800d938:	465b      	mov	r3, fp
 800d93a:	4622      	mov	r2, r4
 800d93c:	4629      	mov	r1, r5
 800d93e:	4630      	mov	r0, r6
 800d940:	f7ff ffa1 	bl	800d886 <__sfputs_r>
 800d944:	3001      	adds	r0, #1
 800d946:	f000 80a9 	beq.w	800da9c <_vfiprintf_r+0x1f0>
 800d94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d94c:	445a      	add	r2, fp
 800d94e:	9209      	str	r2, [sp, #36]	; 0x24
 800d950:	f89a 3000 	ldrb.w	r3, [sl]
 800d954:	2b00      	cmp	r3, #0
 800d956:	f000 80a1 	beq.w	800da9c <_vfiprintf_r+0x1f0>
 800d95a:	2300      	movs	r3, #0
 800d95c:	f04f 32ff 	mov.w	r2, #4294967295
 800d960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d964:	f10a 0a01 	add.w	sl, sl, #1
 800d968:	9304      	str	r3, [sp, #16]
 800d96a:	9307      	str	r3, [sp, #28]
 800d96c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d970:	931a      	str	r3, [sp, #104]	; 0x68
 800d972:	4654      	mov	r4, sl
 800d974:	2205      	movs	r2, #5
 800d976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d97a:	4854      	ldr	r0, [pc, #336]	; (800dacc <_vfiprintf_r+0x220>)
 800d97c:	f7f2 fc70 	bl	8000260 <memchr>
 800d980:	9a04      	ldr	r2, [sp, #16]
 800d982:	b9d8      	cbnz	r0, 800d9bc <_vfiprintf_r+0x110>
 800d984:	06d1      	lsls	r1, r2, #27
 800d986:	bf44      	itt	mi
 800d988:	2320      	movmi	r3, #32
 800d98a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d98e:	0713      	lsls	r3, r2, #28
 800d990:	bf44      	itt	mi
 800d992:	232b      	movmi	r3, #43	; 0x2b
 800d994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d998:	f89a 3000 	ldrb.w	r3, [sl]
 800d99c:	2b2a      	cmp	r3, #42	; 0x2a
 800d99e:	d015      	beq.n	800d9cc <_vfiprintf_r+0x120>
 800d9a0:	9a07      	ldr	r2, [sp, #28]
 800d9a2:	4654      	mov	r4, sl
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	f04f 0c0a 	mov.w	ip, #10
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9b0:	3b30      	subs	r3, #48	; 0x30
 800d9b2:	2b09      	cmp	r3, #9
 800d9b4:	d94d      	bls.n	800da52 <_vfiprintf_r+0x1a6>
 800d9b6:	b1b0      	cbz	r0, 800d9e6 <_vfiprintf_r+0x13a>
 800d9b8:	9207      	str	r2, [sp, #28]
 800d9ba:	e014      	b.n	800d9e6 <_vfiprintf_r+0x13a>
 800d9bc:	eba0 0308 	sub.w	r3, r0, r8
 800d9c0:	fa09 f303 	lsl.w	r3, r9, r3
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	9304      	str	r3, [sp, #16]
 800d9c8:	46a2      	mov	sl, r4
 800d9ca:	e7d2      	b.n	800d972 <_vfiprintf_r+0xc6>
 800d9cc:	9b03      	ldr	r3, [sp, #12]
 800d9ce:	1d19      	adds	r1, r3, #4
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	9103      	str	r1, [sp, #12]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	bfbb      	ittet	lt
 800d9d8:	425b      	neglt	r3, r3
 800d9da:	f042 0202 	orrlt.w	r2, r2, #2
 800d9de:	9307      	strge	r3, [sp, #28]
 800d9e0:	9307      	strlt	r3, [sp, #28]
 800d9e2:	bfb8      	it	lt
 800d9e4:	9204      	strlt	r2, [sp, #16]
 800d9e6:	7823      	ldrb	r3, [r4, #0]
 800d9e8:	2b2e      	cmp	r3, #46	; 0x2e
 800d9ea:	d10c      	bne.n	800da06 <_vfiprintf_r+0x15a>
 800d9ec:	7863      	ldrb	r3, [r4, #1]
 800d9ee:	2b2a      	cmp	r3, #42	; 0x2a
 800d9f0:	d134      	bne.n	800da5c <_vfiprintf_r+0x1b0>
 800d9f2:	9b03      	ldr	r3, [sp, #12]
 800d9f4:	1d1a      	adds	r2, r3, #4
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	9203      	str	r2, [sp, #12]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	bfb8      	it	lt
 800d9fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800da02:	3402      	adds	r4, #2
 800da04:	9305      	str	r3, [sp, #20]
 800da06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dadc <_vfiprintf_r+0x230>
 800da0a:	7821      	ldrb	r1, [r4, #0]
 800da0c:	2203      	movs	r2, #3
 800da0e:	4650      	mov	r0, sl
 800da10:	f7f2 fc26 	bl	8000260 <memchr>
 800da14:	b138      	cbz	r0, 800da26 <_vfiprintf_r+0x17a>
 800da16:	9b04      	ldr	r3, [sp, #16]
 800da18:	eba0 000a 	sub.w	r0, r0, sl
 800da1c:	2240      	movs	r2, #64	; 0x40
 800da1e:	4082      	lsls	r2, r0
 800da20:	4313      	orrs	r3, r2
 800da22:	3401      	adds	r4, #1
 800da24:	9304      	str	r3, [sp, #16]
 800da26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da2a:	4829      	ldr	r0, [pc, #164]	; (800dad0 <_vfiprintf_r+0x224>)
 800da2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da30:	2206      	movs	r2, #6
 800da32:	f7f2 fc15 	bl	8000260 <memchr>
 800da36:	2800      	cmp	r0, #0
 800da38:	d03f      	beq.n	800daba <_vfiprintf_r+0x20e>
 800da3a:	4b26      	ldr	r3, [pc, #152]	; (800dad4 <_vfiprintf_r+0x228>)
 800da3c:	bb1b      	cbnz	r3, 800da86 <_vfiprintf_r+0x1da>
 800da3e:	9b03      	ldr	r3, [sp, #12]
 800da40:	3307      	adds	r3, #7
 800da42:	f023 0307 	bic.w	r3, r3, #7
 800da46:	3308      	adds	r3, #8
 800da48:	9303      	str	r3, [sp, #12]
 800da4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da4c:	443b      	add	r3, r7
 800da4e:	9309      	str	r3, [sp, #36]	; 0x24
 800da50:	e768      	b.n	800d924 <_vfiprintf_r+0x78>
 800da52:	fb0c 3202 	mla	r2, ip, r2, r3
 800da56:	460c      	mov	r4, r1
 800da58:	2001      	movs	r0, #1
 800da5a:	e7a6      	b.n	800d9aa <_vfiprintf_r+0xfe>
 800da5c:	2300      	movs	r3, #0
 800da5e:	3401      	adds	r4, #1
 800da60:	9305      	str	r3, [sp, #20]
 800da62:	4619      	mov	r1, r3
 800da64:	f04f 0c0a 	mov.w	ip, #10
 800da68:	4620      	mov	r0, r4
 800da6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da6e:	3a30      	subs	r2, #48	; 0x30
 800da70:	2a09      	cmp	r2, #9
 800da72:	d903      	bls.n	800da7c <_vfiprintf_r+0x1d0>
 800da74:	2b00      	cmp	r3, #0
 800da76:	d0c6      	beq.n	800da06 <_vfiprintf_r+0x15a>
 800da78:	9105      	str	r1, [sp, #20]
 800da7a:	e7c4      	b.n	800da06 <_vfiprintf_r+0x15a>
 800da7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800da80:	4604      	mov	r4, r0
 800da82:	2301      	movs	r3, #1
 800da84:	e7f0      	b.n	800da68 <_vfiprintf_r+0x1bc>
 800da86:	ab03      	add	r3, sp, #12
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	462a      	mov	r2, r5
 800da8c:	4b12      	ldr	r3, [pc, #72]	; (800dad8 <_vfiprintf_r+0x22c>)
 800da8e:	a904      	add	r1, sp, #16
 800da90:	4630      	mov	r0, r6
 800da92:	f7fc fb85 	bl	800a1a0 <_printf_float>
 800da96:	4607      	mov	r7, r0
 800da98:	1c78      	adds	r0, r7, #1
 800da9a:	d1d6      	bne.n	800da4a <_vfiprintf_r+0x19e>
 800da9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da9e:	07d9      	lsls	r1, r3, #31
 800daa0:	d405      	bmi.n	800daae <_vfiprintf_r+0x202>
 800daa2:	89ab      	ldrh	r3, [r5, #12]
 800daa4:	059a      	lsls	r2, r3, #22
 800daa6:	d402      	bmi.n	800daae <_vfiprintf_r+0x202>
 800daa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800daaa:	f7fd fca1 	bl	800b3f0 <__retarget_lock_release_recursive>
 800daae:	89ab      	ldrh	r3, [r5, #12]
 800dab0:	065b      	lsls	r3, r3, #25
 800dab2:	f53f af1d 	bmi.w	800d8f0 <_vfiprintf_r+0x44>
 800dab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dab8:	e71c      	b.n	800d8f4 <_vfiprintf_r+0x48>
 800daba:	ab03      	add	r3, sp, #12
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	462a      	mov	r2, r5
 800dac0:	4b05      	ldr	r3, [pc, #20]	; (800dad8 <_vfiprintf_r+0x22c>)
 800dac2:	a904      	add	r1, sp, #16
 800dac4:	4630      	mov	r0, r6
 800dac6:	f7fc fdf3 	bl	800a6b0 <_printf_i>
 800daca:	e7e4      	b.n	800da96 <_vfiprintf_r+0x1ea>
 800dacc:	08016240 	.word	0x08016240
 800dad0:	0801624a 	.word	0x0801624a
 800dad4:	0800a1a1 	.word	0x0800a1a1
 800dad8:	0800d887 	.word	0x0800d887
 800dadc:	08016246 	.word	0x08016246

0800dae0 <__sflush_r>:
 800dae0:	898a      	ldrh	r2, [r1, #12]
 800dae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dae6:	4605      	mov	r5, r0
 800dae8:	0710      	lsls	r0, r2, #28
 800daea:	460c      	mov	r4, r1
 800daec:	d458      	bmi.n	800dba0 <__sflush_r+0xc0>
 800daee:	684b      	ldr	r3, [r1, #4]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	dc05      	bgt.n	800db00 <__sflush_r+0x20>
 800daf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	dc02      	bgt.n	800db00 <__sflush_r+0x20>
 800dafa:	2000      	movs	r0, #0
 800dafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db02:	2e00      	cmp	r6, #0
 800db04:	d0f9      	beq.n	800dafa <__sflush_r+0x1a>
 800db06:	2300      	movs	r3, #0
 800db08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db0c:	682f      	ldr	r7, [r5, #0]
 800db0e:	6a21      	ldr	r1, [r4, #32]
 800db10:	602b      	str	r3, [r5, #0]
 800db12:	d032      	beq.n	800db7a <__sflush_r+0x9a>
 800db14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db16:	89a3      	ldrh	r3, [r4, #12]
 800db18:	075a      	lsls	r2, r3, #29
 800db1a:	d505      	bpl.n	800db28 <__sflush_r+0x48>
 800db1c:	6863      	ldr	r3, [r4, #4]
 800db1e:	1ac0      	subs	r0, r0, r3
 800db20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db22:	b10b      	cbz	r3, 800db28 <__sflush_r+0x48>
 800db24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db26:	1ac0      	subs	r0, r0, r3
 800db28:	2300      	movs	r3, #0
 800db2a:	4602      	mov	r2, r0
 800db2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db2e:	6a21      	ldr	r1, [r4, #32]
 800db30:	4628      	mov	r0, r5
 800db32:	47b0      	blx	r6
 800db34:	1c43      	adds	r3, r0, #1
 800db36:	89a3      	ldrh	r3, [r4, #12]
 800db38:	d106      	bne.n	800db48 <__sflush_r+0x68>
 800db3a:	6829      	ldr	r1, [r5, #0]
 800db3c:	291d      	cmp	r1, #29
 800db3e:	d82b      	bhi.n	800db98 <__sflush_r+0xb8>
 800db40:	4a29      	ldr	r2, [pc, #164]	; (800dbe8 <__sflush_r+0x108>)
 800db42:	410a      	asrs	r2, r1
 800db44:	07d6      	lsls	r6, r2, #31
 800db46:	d427      	bmi.n	800db98 <__sflush_r+0xb8>
 800db48:	2200      	movs	r2, #0
 800db4a:	6062      	str	r2, [r4, #4]
 800db4c:	04d9      	lsls	r1, r3, #19
 800db4e:	6922      	ldr	r2, [r4, #16]
 800db50:	6022      	str	r2, [r4, #0]
 800db52:	d504      	bpl.n	800db5e <__sflush_r+0x7e>
 800db54:	1c42      	adds	r2, r0, #1
 800db56:	d101      	bne.n	800db5c <__sflush_r+0x7c>
 800db58:	682b      	ldr	r3, [r5, #0]
 800db5a:	b903      	cbnz	r3, 800db5e <__sflush_r+0x7e>
 800db5c:	6560      	str	r0, [r4, #84]	; 0x54
 800db5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db60:	602f      	str	r7, [r5, #0]
 800db62:	2900      	cmp	r1, #0
 800db64:	d0c9      	beq.n	800dafa <__sflush_r+0x1a>
 800db66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db6a:	4299      	cmp	r1, r3
 800db6c:	d002      	beq.n	800db74 <__sflush_r+0x94>
 800db6e:	4628      	mov	r0, r5
 800db70:	f7fe fa52 	bl	800c018 <_free_r>
 800db74:	2000      	movs	r0, #0
 800db76:	6360      	str	r0, [r4, #52]	; 0x34
 800db78:	e7c0      	b.n	800dafc <__sflush_r+0x1c>
 800db7a:	2301      	movs	r3, #1
 800db7c:	4628      	mov	r0, r5
 800db7e:	47b0      	blx	r6
 800db80:	1c41      	adds	r1, r0, #1
 800db82:	d1c8      	bne.n	800db16 <__sflush_r+0x36>
 800db84:	682b      	ldr	r3, [r5, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d0c5      	beq.n	800db16 <__sflush_r+0x36>
 800db8a:	2b1d      	cmp	r3, #29
 800db8c:	d001      	beq.n	800db92 <__sflush_r+0xb2>
 800db8e:	2b16      	cmp	r3, #22
 800db90:	d101      	bne.n	800db96 <__sflush_r+0xb6>
 800db92:	602f      	str	r7, [r5, #0]
 800db94:	e7b1      	b.n	800dafa <__sflush_r+0x1a>
 800db96:	89a3      	ldrh	r3, [r4, #12]
 800db98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db9c:	81a3      	strh	r3, [r4, #12]
 800db9e:	e7ad      	b.n	800dafc <__sflush_r+0x1c>
 800dba0:	690f      	ldr	r7, [r1, #16]
 800dba2:	2f00      	cmp	r7, #0
 800dba4:	d0a9      	beq.n	800dafa <__sflush_r+0x1a>
 800dba6:	0793      	lsls	r3, r2, #30
 800dba8:	680e      	ldr	r6, [r1, #0]
 800dbaa:	bf08      	it	eq
 800dbac:	694b      	ldreq	r3, [r1, #20]
 800dbae:	600f      	str	r7, [r1, #0]
 800dbb0:	bf18      	it	ne
 800dbb2:	2300      	movne	r3, #0
 800dbb4:	eba6 0807 	sub.w	r8, r6, r7
 800dbb8:	608b      	str	r3, [r1, #8]
 800dbba:	f1b8 0f00 	cmp.w	r8, #0
 800dbbe:	dd9c      	ble.n	800dafa <__sflush_r+0x1a>
 800dbc0:	6a21      	ldr	r1, [r4, #32]
 800dbc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dbc4:	4643      	mov	r3, r8
 800dbc6:	463a      	mov	r2, r7
 800dbc8:	4628      	mov	r0, r5
 800dbca:	47b0      	blx	r6
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	dc06      	bgt.n	800dbde <__sflush_r+0xfe>
 800dbd0:	89a3      	ldrh	r3, [r4, #12]
 800dbd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbd6:	81a3      	strh	r3, [r4, #12]
 800dbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbdc:	e78e      	b.n	800dafc <__sflush_r+0x1c>
 800dbde:	4407      	add	r7, r0
 800dbe0:	eba8 0800 	sub.w	r8, r8, r0
 800dbe4:	e7e9      	b.n	800dbba <__sflush_r+0xda>
 800dbe6:	bf00      	nop
 800dbe8:	dfbffffe 	.word	0xdfbffffe

0800dbec <_fflush_r>:
 800dbec:	b538      	push	{r3, r4, r5, lr}
 800dbee:	690b      	ldr	r3, [r1, #16]
 800dbf0:	4605      	mov	r5, r0
 800dbf2:	460c      	mov	r4, r1
 800dbf4:	b913      	cbnz	r3, 800dbfc <_fflush_r+0x10>
 800dbf6:	2500      	movs	r5, #0
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	bd38      	pop	{r3, r4, r5, pc}
 800dbfc:	b118      	cbz	r0, 800dc06 <_fflush_r+0x1a>
 800dbfe:	6a03      	ldr	r3, [r0, #32]
 800dc00:	b90b      	cbnz	r3, 800dc06 <_fflush_r+0x1a>
 800dc02:	f7fd f907 	bl	800ae14 <__sinit>
 800dc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d0f3      	beq.n	800dbf6 <_fflush_r+0xa>
 800dc0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc10:	07d0      	lsls	r0, r2, #31
 800dc12:	d404      	bmi.n	800dc1e <_fflush_r+0x32>
 800dc14:	0599      	lsls	r1, r3, #22
 800dc16:	d402      	bmi.n	800dc1e <_fflush_r+0x32>
 800dc18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc1a:	f7fd fbe8 	bl	800b3ee <__retarget_lock_acquire_recursive>
 800dc1e:	4628      	mov	r0, r5
 800dc20:	4621      	mov	r1, r4
 800dc22:	f7ff ff5d 	bl	800dae0 <__sflush_r>
 800dc26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc28:	07da      	lsls	r2, r3, #31
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	d4e4      	bmi.n	800dbf8 <_fflush_r+0xc>
 800dc2e:	89a3      	ldrh	r3, [r4, #12]
 800dc30:	059b      	lsls	r3, r3, #22
 800dc32:	d4e1      	bmi.n	800dbf8 <_fflush_r+0xc>
 800dc34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc36:	f7fd fbdb 	bl	800b3f0 <__retarget_lock_release_recursive>
 800dc3a:	e7dd      	b.n	800dbf8 <_fflush_r+0xc>

0800dc3c <__swhatbuf_r>:
 800dc3c:	b570      	push	{r4, r5, r6, lr}
 800dc3e:	460c      	mov	r4, r1
 800dc40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc44:	2900      	cmp	r1, #0
 800dc46:	b096      	sub	sp, #88	; 0x58
 800dc48:	4615      	mov	r5, r2
 800dc4a:	461e      	mov	r6, r3
 800dc4c:	da0d      	bge.n	800dc6a <__swhatbuf_r+0x2e>
 800dc4e:	89a3      	ldrh	r3, [r4, #12]
 800dc50:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dc54:	f04f 0100 	mov.w	r1, #0
 800dc58:	bf0c      	ite	eq
 800dc5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dc5e:	2340      	movne	r3, #64	; 0x40
 800dc60:	2000      	movs	r0, #0
 800dc62:	6031      	str	r1, [r6, #0]
 800dc64:	602b      	str	r3, [r5, #0]
 800dc66:	b016      	add	sp, #88	; 0x58
 800dc68:	bd70      	pop	{r4, r5, r6, pc}
 800dc6a:	466a      	mov	r2, sp
 800dc6c:	f000 f874 	bl	800dd58 <_fstat_r>
 800dc70:	2800      	cmp	r0, #0
 800dc72:	dbec      	blt.n	800dc4e <__swhatbuf_r+0x12>
 800dc74:	9901      	ldr	r1, [sp, #4]
 800dc76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dc7e:	4259      	negs	r1, r3
 800dc80:	4159      	adcs	r1, r3
 800dc82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc86:	e7eb      	b.n	800dc60 <__swhatbuf_r+0x24>

0800dc88 <__smakebuf_r>:
 800dc88:	898b      	ldrh	r3, [r1, #12]
 800dc8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc8c:	079d      	lsls	r5, r3, #30
 800dc8e:	4606      	mov	r6, r0
 800dc90:	460c      	mov	r4, r1
 800dc92:	d507      	bpl.n	800dca4 <__smakebuf_r+0x1c>
 800dc94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc98:	6023      	str	r3, [r4, #0]
 800dc9a:	6123      	str	r3, [r4, #16]
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	6163      	str	r3, [r4, #20]
 800dca0:	b002      	add	sp, #8
 800dca2:	bd70      	pop	{r4, r5, r6, pc}
 800dca4:	ab01      	add	r3, sp, #4
 800dca6:	466a      	mov	r2, sp
 800dca8:	f7ff ffc8 	bl	800dc3c <__swhatbuf_r>
 800dcac:	9900      	ldr	r1, [sp, #0]
 800dcae:	4605      	mov	r5, r0
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	f7fc f8c9 	bl	8009e48 <_malloc_r>
 800dcb6:	b948      	cbnz	r0, 800dccc <__smakebuf_r+0x44>
 800dcb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcbc:	059a      	lsls	r2, r3, #22
 800dcbe:	d4ef      	bmi.n	800dca0 <__smakebuf_r+0x18>
 800dcc0:	f023 0303 	bic.w	r3, r3, #3
 800dcc4:	f043 0302 	orr.w	r3, r3, #2
 800dcc8:	81a3      	strh	r3, [r4, #12]
 800dcca:	e7e3      	b.n	800dc94 <__smakebuf_r+0xc>
 800dccc:	89a3      	ldrh	r3, [r4, #12]
 800dcce:	6020      	str	r0, [r4, #0]
 800dcd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcd4:	81a3      	strh	r3, [r4, #12]
 800dcd6:	9b00      	ldr	r3, [sp, #0]
 800dcd8:	6163      	str	r3, [r4, #20]
 800dcda:	9b01      	ldr	r3, [sp, #4]
 800dcdc:	6120      	str	r0, [r4, #16]
 800dcde:	b15b      	cbz	r3, 800dcf8 <__smakebuf_r+0x70>
 800dce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dce4:	4630      	mov	r0, r6
 800dce6:	f000 f849 	bl	800dd7c <_isatty_r>
 800dcea:	b128      	cbz	r0, 800dcf8 <__smakebuf_r+0x70>
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	f023 0303 	bic.w	r3, r3, #3
 800dcf2:	f043 0301 	orr.w	r3, r3, #1
 800dcf6:	81a3      	strh	r3, [r4, #12]
 800dcf8:	89a3      	ldrh	r3, [r4, #12]
 800dcfa:	431d      	orrs	r5, r3
 800dcfc:	81a5      	strh	r5, [r4, #12]
 800dcfe:	e7cf      	b.n	800dca0 <__smakebuf_r+0x18>

0800dd00 <memmove>:
 800dd00:	4288      	cmp	r0, r1
 800dd02:	b510      	push	{r4, lr}
 800dd04:	eb01 0402 	add.w	r4, r1, r2
 800dd08:	d902      	bls.n	800dd10 <memmove+0x10>
 800dd0a:	4284      	cmp	r4, r0
 800dd0c:	4623      	mov	r3, r4
 800dd0e:	d807      	bhi.n	800dd20 <memmove+0x20>
 800dd10:	1e43      	subs	r3, r0, #1
 800dd12:	42a1      	cmp	r1, r4
 800dd14:	d008      	beq.n	800dd28 <memmove+0x28>
 800dd16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd1e:	e7f8      	b.n	800dd12 <memmove+0x12>
 800dd20:	4402      	add	r2, r0
 800dd22:	4601      	mov	r1, r0
 800dd24:	428a      	cmp	r2, r1
 800dd26:	d100      	bne.n	800dd2a <memmove+0x2a>
 800dd28:	bd10      	pop	{r4, pc}
 800dd2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd32:	e7f7      	b.n	800dd24 <memmove+0x24>

0800dd34 <strncmp>:
 800dd34:	b510      	push	{r4, lr}
 800dd36:	b16a      	cbz	r2, 800dd54 <strncmp+0x20>
 800dd38:	3901      	subs	r1, #1
 800dd3a:	1884      	adds	r4, r0, r2
 800dd3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d103      	bne.n	800dd50 <strncmp+0x1c>
 800dd48:	42a0      	cmp	r0, r4
 800dd4a:	d001      	beq.n	800dd50 <strncmp+0x1c>
 800dd4c:	2a00      	cmp	r2, #0
 800dd4e:	d1f5      	bne.n	800dd3c <strncmp+0x8>
 800dd50:	1ad0      	subs	r0, r2, r3
 800dd52:	bd10      	pop	{r4, pc}
 800dd54:	4610      	mov	r0, r2
 800dd56:	e7fc      	b.n	800dd52 <strncmp+0x1e>

0800dd58 <_fstat_r>:
 800dd58:	b538      	push	{r3, r4, r5, lr}
 800dd5a:	4d07      	ldr	r5, [pc, #28]	; (800dd78 <_fstat_r+0x20>)
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	4604      	mov	r4, r0
 800dd60:	4608      	mov	r0, r1
 800dd62:	4611      	mov	r1, r2
 800dd64:	602b      	str	r3, [r5, #0]
 800dd66:	f7f3 fb27 	bl	80013b8 <_fstat>
 800dd6a:	1c43      	adds	r3, r0, #1
 800dd6c:	d102      	bne.n	800dd74 <_fstat_r+0x1c>
 800dd6e:	682b      	ldr	r3, [r5, #0]
 800dd70:	b103      	cbz	r3, 800dd74 <_fstat_r+0x1c>
 800dd72:	6023      	str	r3, [r4, #0]
 800dd74:	bd38      	pop	{r3, r4, r5, pc}
 800dd76:	bf00      	nop
 800dd78:	200032c8 	.word	0x200032c8

0800dd7c <_isatty_r>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	4d06      	ldr	r5, [pc, #24]	; (800dd98 <_isatty_r+0x1c>)
 800dd80:	2300      	movs	r3, #0
 800dd82:	4604      	mov	r4, r0
 800dd84:	4608      	mov	r0, r1
 800dd86:	602b      	str	r3, [r5, #0]
 800dd88:	f7f3 fa84 	bl	8001294 <_isatty>
 800dd8c:	1c43      	adds	r3, r0, #1
 800dd8e:	d102      	bne.n	800dd96 <_isatty_r+0x1a>
 800dd90:	682b      	ldr	r3, [r5, #0]
 800dd92:	b103      	cbz	r3, 800dd96 <_isatty_r+0x1a>
 800dd94:	6023      	str	r3, [r4, #0]
 800dd96:	bd38      	pop	{r3, r4, r5, pc}
 800dd98:	200032c8 	.word	0x200032c8
 800dd9c:	00000000 	.word	0x00000000

0800dda0 <nan>:
 800dda0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dda8 <nan+0x8>
 800dda4:	4770      	bx	lr
 800dda6:	bf00      	nop
 800dda8:	00000000 	.word	0x00000000
 800ddac:	7ff80000 	.word	0x7ff80000

0800ddb0 <__assert_func>:
 800ddb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddb2:	4614      	mov	r4, r2
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	4b09      	ldr	r3, [pc, #36]	; (800dddc <__assert_func+0x2c>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4605      	mov	r5, r0
 800ddbc:	68d8      	ldr	r0, [r3, #12]
 800ddbe:	b14c      	cbz	r4, 800ddd4 <__assert_func+0x24>
 800ddc0:	4b07      	ldr	r3, [pc, #28]	; (800dde0 <__assert_func+0x30>)
 800ddc2:	9100      	str	r1, [sp, #0]
 800ddc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddc8:	4906      	ldr	r1, [pc, #24]	; (800dde4 <__assert_func+0x34>)
 800ddca:	462b      	mov	r3, r5
 800ddcc:	f000 fbb4 	bl	800e538 <fiprintf>
 800ddd0:	f000 fbc4 	bl	800e55c <abort>
 800ddd4:	4b04      	ldr	r3, [pc, #16]	; (800dde8 <__assert_func+0x38>)
 800ddd6:	461c      	mov	r4, r3
 800ddd8:	e7f3      	b.n	800ddc2 <__assert_func+0x12>
 800ddda:	bf00      	nop
 800dddc:	20000064 	.word	0x20000064
 800dde0:	08016259 	.word	0x08016259
 800dde4:	08016266 	.word	0x08016266
 800dde8:	08016294 	.word	0x08016294

0800ddec <rshift>:
 800ddec:	6903      	ldr	r3, [r0, #16]
 800ddee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ddf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ddfa:	f100 0414 	add.w	r4, r0, #20
 800ddfe:	dd45      	ble.n	800de8c <rshift+0xa0>
 800de00:	f011 011f 	ands.w	r1, r1, #31
 800de04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800de08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800de0c:	d10c      	bne.n	800de28 <rshift+0x3c>
 800de0e:	f100 0710 	add.w	r7, r0, #16
 800de12:	4629      	mov	r1, r5
 800de14:	42b1      	cmp	r1, r6
 800de16:	d334      	bcc.n	800de82 <rshift+0x96>
 800de18:	1a9b      	subs	r3, r3, r2
 800de1a:	009b      	lsls	r3, r3, #2
 800de1c:	1eea      	subs	r2, r5, #3
 800de1e:	4296      	cmp	r6, r2
 800de20:	bf38      	it	cc
 800de22:	2300      	movcc	r3, #0
 800de24:	4423      	add	r3, r4
 800de26:	e015      	b.n	800de54 <rshift+0x68>
 800de28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800de2c:	f1c1 0820 	rsb	r8, r1, #32
 800de30:	40cf      	lsrs	r7, r1
 800de32:	f105 0e04 	add.w	lr, r5, #4
 800de36:	46a1      	mov	r9, r4
 800de38:	4576      	cmp	r6, lr
 800de3a:	46f4      	mov	ip, lr
 800de3c:	d815      	bhi.n	800de6a <rshift+0x7e>
 800de3e:	1a9a      	subs	r2, r3, r2
 800de40:	0092      	lsls	r2, r2, #2
 800de42:	3a04      	subs	r2, #4
 800de44:	3501      	adds	r5, #1
 800de46:	42ae      	cmp	r6, r5
 800de48:	bf38      	it	cc
 800de4a:	2200      	movcc	r2, #0
 800de4c:	18a3      	adds	r3, r4, r2
 800de4e:	50a7      	str	r7, [r4, r2]
 800de50:	b107      	cbz	r7, 800de54 <rshift+0x68>
 800de52:	3304      	adds	r3, #4
 800de54:	1b1a      	subs	r2, r3, r4
 800de56:	42a3      	cmp	r3, r4
 800de58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800de5c:	bf08      	it	eq
 800de5e:	2300      	moveq	r3, #0
 800de60:	6102      	str	r2, [r0, #16]
 800de62:	bf08      	it	eq
 800de64:	6143      	streq	r3, [r0, #20]
 800de66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de6a:	f8dc c000 	ldr.w	ip, [ip]
 800de6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800de72:	ea4c 0707 	orr.w	r7, ip, r7
 800de76:	f849 7b04 	str.w	r7, [r9], #4
 800de7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de7e:	40cf      	lsrs	r7, r1
 800de80:	e7da      	b.n	800de38 <rshift+0x4c>
 800de82:	f851 cb04 	ldr.w	ip, [r1], #4
 800de86:	f847 cf04 	str.w	ip, [r7, #4]!
 800de8a:	e7c3      	b.n	800de14 <rshift+0x28>
 800de8c:	4623      	mov	r3, r4
 800de8e:	e7e1      	b.n	800de54 <rshift+0x68>

0800de90 <__hexdig_fun>:
 800de90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800de94:	2b09      	cmp	r3, #9
 800de96:	d802      	bhi.n	800de9e <__hexdig_fun+0xe>
 800de98:	3820      	subs	r0, #32
 800de9a:	b2c0      	uxtb	r0, r0
 800de9c:	4770      	bx	lr
 800de9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dea2:	2b05      	cmp	r3, #5
 800dea4:	d801      	bhi.n	800deaa <__hexdig_fun+0x1a>
 800dea6:	3847      	subs	r0, #71	; 0x47
 800dea8:	e7f7      	b.n	800de9a <__hexdig_fun+0xa>
 800deaa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800deae:	2b05      	cmp	r3, #5
 800deb0:	d801      	bhi.n	800deb6 <__hexdig_fun+0x26>
 800deb2:	3827      	subs	r0, #39	; 0x27
 800deb4:	e7f1      	b.n	800de9a <__hexdig_fun+0xa>
 800deb6:	2000      	movs	r0, #0
 800deb8:	4770      	bx	lr
	...

0800debc <__gethex>:
 800debc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dec0:	4617      	mov	r7, r2
 800dec2:	680a      	ldr	r2, [r1, #0]
 800dec4:	b085      	sub	sp, #20
 800dec6:	f102 0b02 	add.w	fp, r2, #2
 800deca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dece:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ded2:	4681      	mov	r9, r0
 800ded4:	468a      	mov	sl, r1
 800ded6:	9302      	str	r3, [sp, #8]
 800ded8:	32fe      	adds	r2, #254	; 0xfe
 800deda:	eb02 030b 	add.w	r3, r2, fp
 800dede:	46d8      	mov	r8, fp
 800dee0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800dee4:	9301      	str	r3, [sp, #4]
 800dee6:	2830      	cmp	r0, #48	; 0x30
 800dee8:	d0f7      	beq.n	800deda <__gethex+0x1e>
 800deea:	f7ff ffd1 	bl	800de90 <__hexdig_fun>
 800deee:	4604      	mov	r4, r0
 800def0:	2800      	cmp	r0, #0
 800def2:	d138      	bne.n	800df66 <__gethex+0xaa>
 800def4:	49a7      	ldr	r1, [pc, #668]	; (800e194 <__gethex+0x2d8>)
 800def6:	2201      	movs	r2, #1
 800def8:	4640      	mov	r0, r8
 800defa:	f7ff ff1b 	bl	800dd34 <strncmp>
 800defe:	4606      	mov	r6, r0
 800df00:	2800      	cmp	r0, #0
 800df02:	d169      	bne.n	800dfd8 <__gethex+0x11c>
 800df04:	f898 0001 	ldrb.w	r0, [r8, #1]
 800df08:	465d      	mov	r5, fp
 800df0a:	f7ff ffc1 	bl	800de90 <__hexdig_fun>
 800df0e:	2800      	cmp	r0, #0
 800df10:	d064      	beq.n	800dfdc <__gethex+0x120>
 800df12:	465a      	mov	r2, fp
 800df14:	7810      	ldrb	r0, [r2, #0]
 800df16:	2830      	cmp	r0, #48	; 0x30
 800df18:	4690      	mov	r8, r2
 800df1a:	f102 0201 	add.w	r2, r2, #1
 800df1e:	d0f9      	beq.n	800df14 <__gethex+0x58>
 800df20:	f7ff ffb6 	bl	800de90 <__hexdig_fun>
 800df24:	2301      	movs	r3, #1
 800df26:	fab0 f480 	clz	r4, r0
 800df2a:	0964      	lsrs	r4, r4, #5
 800df2c:	465e      	mov	r6, fp
 800df2e:	9301      	str	r3, [sp, #4]
 800df30:	4642      	mov	r2, r8
 800df32:	4615      	mov	r5, r2
 800df34:	3201      	adds	r2, #1
 800df36:	7828      	ldrb	r0, [r5, #0]
 800df38:	f7ff ffaa 	bl	800de90 <__hexdig_fun>
 800df3c:	2800      	cmp	r0, #0
 800df3e:	d1f8      	bne.n	800df32 <__gethex+0x76>
 800df40:	4994      	ldr	r1, [pc, #592]	; (800e194 <__gethex+0x2d8>)
 800df42:	2201      	movs	r2, #1
 800df44:	4628      	mov	r0, r5
 800df46:	f7ff fef5 	bl	800dd34 <strncmp>
 800df4a:	b978      	cbnz	r0, 800df6c <__gethex+0xb0>
 800df4c:	b946      	cbnz	r6, 800df60 <__gethex+0xa4>
 800df4e:	1c6e      	adds	r6, r5, #1
 800df50:	4632      	mov	r2, r6
 800df52:	4615      	mov	r5, r2
 800df54:	3201      	adds	r2, #1
 800df56:	7828      	ldrb	r0, [r5, #0]
 800df58:	f7ff ff9a 	bl	800de90 <__hexdig_fun>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	d1f8      	bne.n	800df52 <__gethex+0x96>
 800df60:	1b73      	subs	r3, r6, r5
 800df62:	009e      	lsls	r6, r3, #2
 800df64:	e004      	b.n	800df70 <__gethex+0xb4>
 800df66:	2400      	movs	r4, #0
 800df68:	4626      	mov	r6, r4
 800df6a:	e7e1      	b.n	800df30 <__gethex+0x74>
 800df6c:	2e00      	cmp	r6, #0
 800df6e:	d1f7      	bne.n	800df60 <__gethex+0xa4>
 800df70:	782b      	ldrb	r3, [r5, #0]
 800df72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800df76:	2b50      	cmp	r3, #80	; 0x50
 800df78:	d13d      	bne.n	800dff6 <__gethex+0x13a>
 800df7a:	786b      	ldrb	r3, [r5, #1]
 800df7c:	2b2b      	cmp	r3, #43	; 0x2b
 800df7e:	d02f      	beq.n	800dfe0 <__gethex+0x124>
 800df80:	2b2d      	cmp	r3, #45	; 0x2d
 800df82:	d031      	beq.n	800dfe8 <__gethex+0x12c>
 800df84:	1c69      	adds	r1, r5, #1
 800df86:	f04f 0b00 	mov.w	fp, #0
 800df8a:	7808      	ldrb	r0, [r1, #0]
 800df8c:	f7ff ff80 	bl	800de90 <__hexdig_fun>
 800df90:	1e42      	subs	r2, r0, #1
 800df92:	b2d2      	uxtb	r2, r2
 800df94:	2a18      	cmp	r2, #24
 800df96:	d82e      	bhi.n	800dff6 <__gethex+0x13a>
 800df98:	f1a0 0210 	sub.w	r2, r0, #16
 800df9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dfa0:	f7ff ff76 	bl	800de90 <__hexdig_fun>
 800dfa4:	f100 3cff 	add.w	ip, r0, #4294967295
 800dfa8:	fa5f fc8c 	uxtb.w	ip, ip
 800dfac:	f1bc 0f18 	cmp.w	ip, #24
 800dfb0:	d91d      	bls.n	800dfee <__gethex+0x132>
 800dfb2:	f1bb 0f00 	cmp.w	fp, #0
 800dfb6:	d000      	beq.n	800dfba <__gethex+0xfe>
 800dfb8:	4252      	negs	r2, r2
 800dfba:	4416      	add	r6, r2
 800dfbc:	f8ca 1000 	str.w	r1, [sl]
 800dfc0:	b1dc      	cbz	r4, 800dffa <__gethex+0x13e>
 800dfc2:	9b01      	ldr	r3, [sp, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	bf14      	ite	ne
 800dfc8:	f04f 0800 	movne.w	r8, #0
 800dfcc:	f04f 0806 	moveq.w	r8, #6
 800dfd0:	4640      	mov	r0, r8
 800dfd2:	b005      	add	sp, #20
 800dfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd8:	4645      	mov	r5, r8
 800dfda:	4626      	mov	r6, r4
 800dfdc:	2401      	movs	r4, #1
 800dfde:	e7c7      	b.n	800df70 <__gethex+0xb4>
 800dfe0:	f04f 0b00 	mov.w	fp, #0
 800dfe4:	1ca9      	adds	r1, r5, #2
 800dfe6:	e7d0      	b.n	800df8a <__gethex+0xce>
 800dfe8:	f04f 0b01 	mov.w	fp, #1
 800dfec:	e7fa      	b.n	800dfe4 <__gethex+0x128>
 800dfee:	230a      	movs	r3, #10
 800dff0:	fb03 0002 	mla	r0, r3, r2, r0
 800dff4:	e7d0      	b.n	800df98 <__gethex+0xdc>
 800dff6:	4629      	mov	r1, r5
 800dff8:	e7e0      	b.n	800dfbc <__gethex+0x100>
 800dffa:	eba5 0308 	sub.w	r3, r5, r8
 800dffe:	3b01      	subs	r3, #1
 800e000:	4621      	mov	r1, r4
 800e002:	2b07      	cmp	r3, #7
 800e004:	dc0a      	bgt.n	800e01c <__gethex+0x160>
 800e006:	4648      	mov	r0, r9
 800e008:	f7fe f852 	bl	800c0b0 <_Balloc>
 800e00c:	4604      	mov	r4, r0
 800e00e:	b940      	cbnz	r0, 800e022 <__gethex+0x166>
 800e010:	4b61      	ldr	r3, [pc, #388]	; (800e198 <__gethex+0x2dc>)
 800e012:	4602      	mov	r2, r0
 800e014:	21e4      	movs	r1, #228	; 0xe4
 800e016:	4861      	ldr	r0, [pc, #388]	; (800e19c <__gethex+0x2e0>)
 800e018:	f7ff feca 	bl	800ddb0 <__assert_func>
 800e01c:	3101      	adds	r1, #1
 800e01e:	105b      	asrs	r3, r3, #1
 800e020:	e7ef      	b.n	800e002 <__gethex+0x146>
 800e022:	f100 0a14 	add.w	sl, r0, #20
 800e026:	2300      	movs	r3, #0
 800e028:	495a      	ldr	r1, [pc, #360]	; (800e194 <__gethex+0x2d8>)
 800e02a:	f8cd a004 	str.w	sl, [sp, #4]
 800e02e:	469b      	mov	fp, r3
 800e030:	45a8      	cmp	r8, r5
 800e032:	d342      	bcc.n	800e0ba <__gethex+0x1fe>
 800e034:	9801      	ldr	r0, [sp, #4]
 800e036:	f840 bb04 	str.w	fp, [r0], #4
 800e03a:	eba0 000a 	sub.w	r0, r0, sl
 800e03e:	1080      	asrs	r0, r0, #2
 800e040:	6120      	str	r0, [r4, #16]
 800e042:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800e046:	4658      	mov	r0, fp
 800e048:	f7fe f924 	bl	800c294 <__hi0bits>
 800e04c:	683d      	ldr	r5, [r7, #0]
 800e04e:	eba8 0000 	sub.w	r0, r8, r0
 800e052:	42a8      	cmp	r0, r5
 800e054:	dd59      	ble.n	800e10a <__gethex+0x24e>
 800e056:	eba0 0805 	sub.w	r8, r0, r5
 800e05a:	4641      	mov	r1, r8
 800e05c:	4620      	mov	r0, r4
 800e05e:	f7fe fcb0 	bl	800c9c2 <__any_on>
 800e062:	4683      	mov	fp, r0
 800e064:	b1b8      	cbz	r0, 800e096 <__gethex+0x1da>
 800e066:	f108 33ff 	add.w	r3, r8, #4294967295
 800e06a:	1159      	asrs	r1, r3, #5
 800e06c:	f003 021f 	and.w	r2, r3, #31
 800e070:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e074:	f04f 0b01 	mov.w	fp, #1
 800e078:	fa0b f202 	lsl.w	r2, fp, r2
 800e07c:	420a      	tst	r2, r1
 800e07e:	d00a      	beq.n	800e096 <__gethex+0x1da>
 800e080:	455b      	cmp	r3, fp
 800e082:	dd06      	ble.n	800e092 <__gethex+0x1d6>
 800e084:	f1a8 0102 	sub.w	r1, r8, #2
 800e088:	4620      	mov	r0, r4
 800e08a:	f7fe fc9a 	bl	800c9c2 <__any_on>
 800e08e:	2800      	cmp	r0, #0
 800e090:	d138      	bne.n	800e104 <__gethex+0x248>
 800e092:	f04f 0b02 	mov.w	fp, #2
 800e096:	4641      	mov	r1, r8
 800e098:	4620      	mov	r0, r4
 800e09a:	f7ff fea7 	bl	800ddec <rshift>
 800e09e:	4446      	add	r6, r8
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	42b3      	cmp	r3, r6
 800e0a4:	da41      	bge.n	800e12a <__gethex+0x26e>
 800e0a6:	4621      	mov	r1, r4
 800e0a8:	4648      	mov	r0, r9
 800e0aa:	f7fe f841 	bl	800c130 <_Bfree>
 800e0ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	6013      	str	r3, [r2, #0]
 800e0b4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e0b8:	e78a      	b.n	800dfd0 <__gethex+0x114>
 800e0ba:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e0be:	2a2e      	cmp	r2, #46	; 0x2e
 800e0c0:	d014      	beq.n	800e0ec <__gethex+0x230>
 800e0c2:	2b20      	cmp	r3, #32
 800e0c4:	d106      	bne.n	800e0d4 <__gethex+0x218>
 800e0c6:	9b01      	ldr	r3, [sp, #4]
 800e0c8:	f843 bb04 	str.w	fp, [r3], #4
 800e0cc:	f04f 0b00 	mov.w	fp, #0
 800e0d0:	9301      	str	r3, [sp, #4]
 800e0d2:	465b      	mov	r3, fp
 800e0d4:	7828      	ldrb	r0, [r5, #0]
 800e0d6:	9303      	str	r3, [sp, #12]
 800e0d8:	f7ff feda 	bl	800de90 <__hexdig_fun>
 800e0dc:	9b03      	ldr	r3, [sp, #12]
 800e0de:	f000 000f 	and.w	r0, r0, #15
 800e0e2:	4098      	lsls	r0, r3
 800e0e4:	ea4b 0b00 	orr.w	fp, fp, r0
 800e0e8:	3304      	adds	r3, #4
 800e0ea:	e7a1      	b.n	800e030 <__gethex+0x174>
 800e0ec:	45a8      	cmp	r8, r5
 800e0ee:	d8e8      	bhi.n	800e0c2 <__gethex+0x206>
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	4628      	mov	r0, r5
 800e0f4:	9303      	str	r3, [sp, #12]
 800e0f6:	f7ff fe1d 	bl	800dd34 <strncmp>
 800e0fa:	4926      	ldr	r1, [pc, #152]	; (800e194 <__gethex+0x2d8>)
 800e0fc:	9b03      	ldr	r3, [sp, #12]
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d1df      	bne.n	800e0c2 <__gethex+0x206>
 800e102:	e795      	b.n	800e030 <__gethex+0x174>
 800e104:	f04f 0b03 	mov.w	fp, #3
 800e108:	e7c5      	b.n	800e096 <__gethex+0x1da>
 800e10a:	da0b      	bge.n	800e124 <__gethex+0x268>
 800e10c:	eba5 0800 	sub.w	r8, r5, r0
 800e110:	4621      	mov	r1, r4
 800e112:	4642      	mov	r2, r8
 800e114:	4648      	mov	r0, r9
 800e116:	f7fe fa25 	bl	800c564 <__lshift>
 800e11a:	eba6 0608 	sub.w	r6, r6, r8
 800e11e:	4604      	mov	r4, r0
 800e120:	f100 0a14 	add.w	sl, r0, #20
 800e124:	f04f 0b00 	mov.w	fp, #0
 800e128:	e7ba      	b.n	800e0a0 <__gethex+0x1e4>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	42b3      	cmp	r3, r6
 800e12e:	dd73      	ble.n	800e218 <__gethex+0x35c>
 800e130:	1b9e      	subs	r6, r3, r6
 800e132:	42b5      	cmp	r5, r6
 800e134:	dc34      	bgt.n	800e1a0 <__gethex+0x2e4>
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2b02      	cmp	r3, #2
 800e13a:	d023      	beq.n	800e184 <__gethex+0x2c8>
 800e13c:	2b03      	cmp	r3, #3
 800e13e:	d025      	beq.n	800e18c <__gethex+0x2d0>
 800e140:	2b01      	cmp	r3, #1
 800e142:	d115      	bne.n	800e170 <__gethex+0x2b4>
 800e144:	42b5      	cmp	r5, r6
 800e146:	d113      	bne.n	800e170 <__gethex+0x2b4>
 800e148:	2d01      	cmp	r5, #1
 800e14a:	d10b      	bne.n	800e164 <__gethex+0x2a8>
 800e14c:	9a02      	ldr	r2, [sp, #8]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6013      	str	r3, [r2, #0]
 800e152:	2301      	movs	r3, #1
 800e154:	6123      	str	r3, [r4, #16]
 800e156:	f8ca 3000 	str.w	r3, [sl]
 800e15a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e15c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e160:	601c      	str	r4, [r3, #0]
 800e162:	e735      	b.n	800dfd0 <__gethex+0x114>
 800e164:	1e69      	subs	r1, r5, #1
 800e166:	4620      	mov	r0, r4
 800e168:	f7fe fc2b 	bl	800c9c2 <__any_on>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d1ed      	bne.n	800e14c <__gethex+0x290>
 800e170:	4621      	mov	r1, r4
 800e172:	4648      	mov	r0, r9
 800e174:	f7fd ffdc 	bl	800c130 <_Bfree>
 800e178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e17a:	2300      	movs	r3, #0
 800e17c:	6013      	str	r3, [r2, #0]
 800e17e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e182:	e725      	b.n	800dfd0 <__gethex+0x114>
 800e184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e186:	2b00      	cmp	r3, #0
 800e188:	d1f2      	bne.n	800e170 <__gethex+0x2b4>
 800e18a:	e7df      	b.n	800e14c <__gethex+0x290>
 800e18c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d1dc      	bne.n	800e14c <__gethex+0x290>
 800e192:	e7ed      	b.n	800e170 <__gethex+0x2b4>
 800e194:	080161ec 	.word	0x080161ec
 800e198:	08016086 	.word	0x08016086
 800e19c:	08016295 	.word	0x08016295
 800e1a0:	f106 38ff 	add.w	r8, r6, #4294967295
 800e1a4:	f1bb 0f00 	cmp.w	fp, #0
 800e1a8:	d133      	bne.n	800e212 <__gethex+0x356>
 800e1aa:	f1b8 0f00 	cmp.w	r8, #0
 800e1ae:	d004      	beq.n	800e1ba <__gethex+0x2fe>
 800e1b0:	4641      	mov	r1, r8
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f7fe fc05 	bl	800c9c2 <__any_on>
 800e1b8:	4683      	mov	fp, r0
 800e1ba:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e1be:	2301      	movs	r3, #1
 800e1c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e1c4:	f008 081f 	and.w	r8, r8, #31
 800e1c8:	fa03 f308 	lsl.w	r3, r3, r8
 800e1cc:	4213      	tst	r3, r2
 800e1ce:	4631      	mov	r1, r6
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	bf18      	it	ne
 800e1d4:	f04b 0b02 	orrne.w	fp, fp, #2
 800e1d8:	1bad      	subs	r5, r5, r6
 800e1da:	f7ff fe07 	bl	800ddec <rshift>
 800e1de:	687e      	ldr	r6, [r7, #4]
 800e1e0:	f04f 0802 	mov.w	r8, #2
 800e1e4:	f1bb 0f00 	cmp.w	fp, #0
 800e1e8:	d04a      	beq.n	800e280 <__gethex+0x3c4>
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2b02      	cmp	r3, #2
 800e1ee:	d016      	beq.n	800e21e <__gethex+0x362>
 800e1f0:	2b03      	cmp	r3, #3
 800e1f2:	d018      	beq.n	800e226 <__gethex+0x36a>
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d109      	bne.n	800e20c <__gethex+0x350>
 800e1f8:	f01b 0f02 	tst.w	fp, #2
 800e1fc:	d006      	beq.n	800e20c <__gethex+0x350>
 800e1fe:	f8da 3000 	ldr.w	r3, [sl]
 800e202:	ea4b 0b03 	orr.w	fp, fp, r3
 800e206:	f01b 0f01 	tst.w	fp, #1
 800e20a:	d10f      	bne.n	800e22c <__gethex+0x370>
 800e20c:	f048 0810 	orr.w	r8, r8, #16
 800e210:	e036      	b.n	800e280 <__gethex+0x3c4>
 800e212:	f04f 0b01 	mov.w	fp, #1
 800e216:	e7d0      	b.n	800e1ba <__gethex+0x2fe>
 800e218:	f04f 0801 	mov.w	r8, #1
 800e21c:	e7e2      	b.n	800e1e4 <__gethex+0x328>
 800e21e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e220:	f1c3 0301 	rsb	r3, r3, #1
 800e224:	930f      	str	r3, [sp, #60]	; 0x3c
 800e226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d0ef      	beq.n	800e20c <__gethex+0x350>
 800e22c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e230:	f104 0214 	add.w	r2, r4, #20
 800e234:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e238:	9301      	str	r3, [sp, #4]
 800e23a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e23e:	2300      	movs	r3, #0
 800e240:	4694      	mov	ip, r2
 800e242:	f852 1b04 	ldr.w	r1, [r2], #4
 800e246:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e24a:	d01e      	beq.n	800e28a <__gethex+0x3ce>
 800e24c:	3101      	adds	r1, #1
 800e24e:	f8cc 1000 	str.w	r1, [ip]
 800e252:	f1b8 0f02 	cmp.w	r8, #2
 800e256:	f104 0214 	add.w	r2, r4, #20
 800e25a:	d13d      	bne.n	800e2d8 <__gethex+0x41c>
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	3b01      	subs	r3, #1
 800e260:	42ab      	cmp	r3, r5
 800e262:	d10b      	bne.n	800e27c <__gethex+0x3c0>
 800e264:	1169      	asrs	r1, r5, #5
 800e266:	2301      	movs	r3, #1
 800e268:	f005 051f 	and.w	r5, r5, #31
 800e26c:	fa03 f505 	lsl.w	r5, r3, r5
 800e270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e274:	421d      	tst	r5, r3
 800e276:	bf18      	it	ne
 800e278:	f04f 0801 	movne.w	r8, #1
 800e27c:	f048 0820 	orr.w	r8, r8, #32
 800e280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e282:	601c      	str	r4, [r3, #0]
 800e284:	9b02      	ldr	r3, [sp, #8]
 800e286:	601e      	str	r6, [r3, #0]
 800e288:	e6a2      	b.n	800dfd0 <__gethex+0x114>
 800e28a:	4290      	cmp	r0, r2
 800e28c:	f842 3c04 	str.w	r3, [r2, #-4]
 800e290:	d8d6      	bhi.n	800e240 <__gethex+0x384>
 800e292:	68a2      	ldr	r2, [r4, #8]
 800e294:	4593      	cmp	fp, r2
 800e296:	db17      	blt.n	800e2c8 <__gethex+0x40c>
 800e298:	6861      	ldr	r1, [r4, #4]
 800e29a:	4648      	mov	r0, r9
 800e29c:	3101      	adds	r1, #1
 800e29e:	f7fd ff07 	bl	800c0b0 <_Balloc>
 800e2a2:	4682      	mov	sl, r0
 800e2a4:	b918      	cbnz	r0, 800e2ae <__gethex+0x3f2>
 800e2a6:	4b1b      	ldr	r3, [pc, #108]	; (800e314 <__gethex+0x458>)
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	2184      	movs	r1, #132	; 0x84
 800e2ac:	e6b3      	b.n	800e016 <__gethex+0x15a>
 800e2ae:	6922      	ldr	r2, [r4, #16]
 800e2b0:	3202      	adds	r2, #2
 800e2b2:	f104 010c 	add.w	r1, r4, #12
 800e2b6:	0092      	lsls	r2, r2, #2
 800e2b8:	300c      	adds	r0, #12
 800e2ba:	f7fd f8a2 	bl	800b402 <memcpy>
 800e2be:	4621      	mov	r1, r4
 800e2c0:	4648      	mov	r0, r9
 800e2c2:	f7fd ff35 	bl	800c130 <_Bfree>
 800e2c6:	4654      	mov	r4, sl
 800e2c8:	6922      	ldr	r2, [r4, #16]
 800e2ca:	1c51      	adds	r1, r2, #1
 800e2cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e2d0:	6121      	str	r1, [r4, #16]
 800e2d2:	2101      	movs	r1, #1
 800e2d4:	6151      	str	r1, [r2, #20]
 800e2d6:	e7bc      	b.n	800e252 <__gethex+0x396>
 800e2d8:	6921      	ldr	r1, [r4, #16]
 800e2da:	4559      	cmp	r1, fp
 800e2dc:	dd0b      	ble.n	800e2f6 <__gethex+0x43a>
 800e2de:	2101      	movs	r1, #1
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	f7ff fd83 	bl	800ddec <rshift>
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	3601      	adds	r6, #1
 800e2ea:	42b3      	cmp	r3, r6
 800e2ec:	f6ff aedb 	blt.w	800e0a6 <__gethex+0x1ea>
 800e2f0:	f04f 0801 	mov.w	r8, #1
 800e2f4:	e7c2      	b.n	800e27c <__gethex+0x3c0>
 800e2f6:	f015 051f 	ands.w	r5, r5, #31
 800e2fa:	d0f9      	beq.n	800e2f0 <__gethex+0x434>
 800e2fc:	9b01      	ldr	r3, [sp, #4]
 800e2fe:	441a      	add	r2, r3
 800e300:	f1c5 0520 	rsb	r5, r5, #32
 800e304:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e308:	f7fd ffc4 	bl	800c294 <__hi0bits>
 800e30c:	42a8      	cmp	r0, r5
 800e30e:	dbe6      	blt.n	800e2de <__gethex+0x422>
 800e310:	e7ee      	b.n	800e2f0 <__gethex+0x434>
 800e312:	bf00      	nop
 800e314:	08016086 	.word	0x08016086

0800e318 <L_shift>:
 800e318:	f1c2 0208 	rsb	r2, r2, #8
 800e31c:	0092      	lsls	r2, r2, #2
 800e31e:	b570      	push	{r4, r5, r6, lr}
 800e320:	f1c2 0620 	rsb	r6, r2, #32
 800e324:	6843      	ldr	r3, [r0, #4]
 800e326:	6804      	ldr	r4, [r0, #0]
 800e328:	fa03 f506 	lsl.w	r5, r3, r6
 800e32c:	432c      	orrs	r4, r5
 800e32e:	40d3      	lsrs	r3, r2
 800e330:	6004      	str	r4, [r0, #0]
 800e332:	f840 3f04 	str.w	r3, [r0, #4]!
 800e336:	4288      	cmp	r0, r1
 800e338:	d3f4      	bcc.n	800e324 <L_shift+0xc>
 800e33a:	bd70      	pop	{r4, r5, r6, pc}

0800e33c <__match>:
 800e33c:	b530      	push	{r4, r5, lr}
 800e33e:	6803      	ldr	r3, [r0, #0]
 800e340:	3301      	adds	r3, #1
 800e342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e346:	b914      	cbnz	r4, 800e34e <__match+0x12>
 800e348:	6003      	str	r3, [r0, #0]
 800e34a:	2001      	movs	r0, #1
 800e34c:	bd30      	pop	{r4, r5, pc}
 800e34e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e352:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e356:	2d19      	cmp	r5, #25
 800e358:	bf98      	it	ls
 800e35a:	3220      	addls	r2, #32
 800e35c:	42a2      	cmp	r2, r4
 800e35e:	d0f0      	beq.n	800e342 <__match+0x6>
 800e360:	2000      	movs	r0, #0
 800e362:	e7f3      	b.n	800e34c <__match+0x10>

0800e364 <__hexnan>:
 800e364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e368:	680b      	ldr	r3, [r1, #0]
 800e36a:	6801      	ldr	r1, [r0, #0]
 800e36c:	115e      	asrs	r6, r3, #5
 800e36e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e372:	f013 031f 	ands.w	r3, r3, #31
 800e376:	b087      	sub	sp, #28
 800e378:	bf18      	it	ne
 800e37a:	3604      	addne	r6, #4
 800e37c:	2500      	movs	r5, #0
 800e37e:	1f37      	subs	r7, r6, #4
 800e380:	4682      	mov	sl, r0
 800e382:	4690      	mov	r8, r2
 800e384:	9301      	str	r3, [sp, #4]
 800e386:	f846 5c04 	str.w	r5, [r6, #-4]
 800e38a:	46b9      	mov	r9, r7
 800e38c:	463c      	mov	r4, r7
 800e38e:	9502      	str	r5, [sp, #8]
 800e390:	46ab      	mov	fp, r5
 800e392:	784a      	ldrb	r2, [r1, #1]
 800e394:	1c4b      	adds	r3, r1, #1
 800e396:	9303      	str	r3, [sp, #12]
 800e398:	b342      	cbz	r2, 800e3ec <__hexnan+0x88>
 800e39a:	4610      	mov	r0, r2
 800e39c:	9105      	str	r1, [sp, #20]
 800e39e:	9204      	str	r2, [sp, #16]
 800e3a0:	f7ff fd76 	bl	800de90 <__hexdig_fun>
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	d14f      	bne.n	800e448 <__hexnan+0xe4>
 800e3a8:	9a04      	ldr	r2, [sp, #16]
 800e3aa:	9905      	ldr	r1, [sp, #20]
 800e3ac:	2a20      	cmp	r2, #32
 800e3ae:	d818      	bhi.n	800e3e2 <__hexnan+0x7e>
 800e3b0:	9b02      	ldr	r3, [sp, #8]
 800e3b2:	459b      	cmp	fp, r3
 800e3b4:	dd13      	ble.n	800e3de <__hexnan+0x7a>
 800e3b6:	454c      	cmp	r4, r9
 800e3b8:	d206      	bcs.n	800e3c8 <__hexnan+0x64>
 800e3ba:	2d07      	cmp	r5, #7
 800e3bc:	dc04      	bgt.n	800e3c8 <__hexnan+0x64>
 800e3be:	462a      	mov	r2, r5
 800e3c0:	4649      	mov	r1, r9
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f7ff ffa8 	bl	800e318 <L_shift>
 800e3c8:	4544      	cmp	r4, r8
 800e3ca:	d950      	bls.n	800e46e <__hexnan+0x10a>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	f1a4 0904 	sub.w	r9, r4, #4
 800e3d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3d6:	f8cd b008 	str.w	fp, [sp, #8]
 800e3da:	464c      	mov	r4, r9
 800e3dc:	461d      	mov	r5, r3
 800e3de:	9903      	ldr	r1, [sp, #12]
 800e3e0:	e7d7      	b.n	800e392 <__hexnan+0x2e>
 800e3e2:	2a29      	cmp	r2, #41	; 0x29
 800e3e4:	d155      	bne.n	800e492 <__hexnan+0x12e>
 800e3e6:	3102      	adds	r1, #2
 800e3e8:	f8ca 1000 	str.w	r1, [sl]
 800e3ec:	f1bb 0f00 	cmp.w	fp, #0
 800e3f0:	d04f      	beq.n	800e492 <__hexnan+0x12e>
 800e3f2:	454c      	cmp	r4, r9
 800e3f4:	d206      	bcs.n	800e404 <__hexnan+0xa0>
 800e3f6:	2d07      	cmp	r5, #7
 800e3f8:	dc04      	bgt.n	800e404 <__hexnan+0xa0>
 800e3fa:	462a      	mov	r2, r5
 800e3fc:	4649      	mov	r1, r9
 800e3fe:	4620      	mov	r0, r4
 800e400:	f7ff ff8a 	bl	800e318 <L_shift>
 800e404:	4544      	cmp	r4, r8
 800e406:	d934      	bls.n	800e472 <__hexnan+0x10e>
 800e408:	f1a8 0204 	sub.w	r2, r8, #4
 800e40c:	4623      	mov	r3, r4
 800e40e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e412:	f842 1f04 	str.w	r1, [r2, #4]!
 800e416:	429f      	cmp	r7, r3
 800e418:	d2f9      	bcs.n	800e40e <__hexnan+0xaa>
 800e41a:	1b3b      	subs	r3, r7, r4
 800e41c:	f023 0303 	bic.w	r3, r3, #3
 800e420:	3304      	adds	r3, #4
 800e422:	3e03      	subs	r6, #3
 800e424:	3401      	adds	r4, #1
 800e426:	42a6      	cmp	r6, r4
 800e428:	bf38      	it	cc
 800e42a:	2304      	movcc	r3, #4
 800e42c:	4443      	add	r3, r8
 800e42e:	2200      	movs	r2, #0
 800e430:	f843 2b04 	str.w	r2, [r3], #4
 800e434:	429f      	cmp	r7, r3
 800e436:	d2fb      	bcs.n	800e430 <__hexnan+0xcc>
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	b91b      	cbnz	r3, 800e444 <__hexnan+0xe0>
 800e43c:	4547      	cmp	r7, r8
 800e43e:	d126      	bne.n	800e48e <__hexnan+0x12a>
 800e440:	2301      	movs	r3, #1
 800e442:	603b      	str	r3, [r7, #0]
 800e444:	2005      	movs	r0, #5
 800e446:	e025      	b.n	800e494 <__hexnan+0x130>
 800e448:	3501      	adds	r5, #1
 800e44a:	2d08      	cmp	r5, #8
 800e44c:	f10b 0b01 	add.w	fp, fp, #1
 800e450:	dd06      	ble.n	800e460 <__hexnan+0xfc>
 800e452:	4544      	cmp	r4, r8
 800e454:	d9c3      	bls.n	800e3de <__hexnan+0x7a>
 800e456:	2300      	movs	r3, #0
 800e458:	f844 3c04 	str.w	r3, [r4, #-4]
 800e45c:	2501      	movs	r5, #1
 800e45e:	3c04      	subs	r4, #4
 800e460:	6822      	ldr	r2, [r4, #0]
 800e462:	f000 000f 	and.w	r0, r0, #15
 800e466:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e46a:	6020      	str	r0, [r4, #0]
 800e46c:	e7b7      	b.n	800e3de <__hexnan+0x7a>
 800e46e:	2508      	movs	r5, #8
 800e470:	e7b5      	b.n	800e3de <__hexnan+0x7a>
 800e472:	9b01      	ldr	r3, [sp, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d0df      	beq.n	800e438 <__hexnan+0xd4>
 800e478:	f1c3 0320 	rsb	r3, r3, #32
 800e47c:	f04f 32ff 	mov.w	r2, #4294967295
 800e480:	40da      	lsrs	r2, r3
 800e482:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e486:	4013      	ands	r3, r2
 800e488:	f846 3c04 	str.w	r3, [r6, #-4]
 800e48c:	e7d4      	b.n	800e438 <__hexnan+0xd4>
 800e48e:	3f04      	subs	r7, #4
 800e490:	e7d2      	b.n	800e438 <__hexnan+0xd4>
 800e492:	2004      	movs	r0, #4
 800e494:	b007      	add	sp, #28
 800e496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e49a <__ascii_mbtowc>:
 800e49a:	b082      	sub	sp, #8
 800e49c:	b901      	cbnz	r1, 800e4a0 <__ascii_mbtowc+0x6>
 800e49e:	a901      	add	r1, sp, #4
 800e4a0:	b142      	cbz	r2, 800e4b4 <__ascii_mbtowc+0x1a>
 800e4a2:	b14b      	cbz	r3, 800e4b8 <__ascii_mbtowc+0x1e>
 800e4a4:	7813      	ldrb	r3, [r2, #0]
 800e4a6:	600b      	str	r3, [r1, #0]
 800e4a8:	7812      	ldrb	r2, [r2, #0]
 800e4aa:	1e10      	subs	r0, r2, #0
 800e4ac:	bf18      	it	ne
 800e4ae:	2001      	movne	r0, #1
 800e4b0:	b002      	add	sp, #8
 800e4b2:	4770      	bx	lr
 800e4b4:	4610      	mov	r0, r2
 800e4b6:	e7fb      	b.n	800e4b0 <__ascii_mbtowc+0x16>
 800e4b8:	f06f 0001 	mvn.w	r0, #1
 800e4bc:	e7f8      	b.n	800e4b0 <__ascii_mbtowc+0x16>

0800e4be <_realloc_r>:
 800e4be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c2:	4680      	mov	r8, r0
 800e4c4:	4614      	mov	r4, r2
 800e4c6:	460e      	mov	r6, r1
 800e4c8:	b921      	cbnz	r1, 800e4d4 <_realloc_r+0x16>
 800e4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	f7fb bcba 	b.w	8009e48 <_malloc_r>
 800e4d4:	b92a      	cbnz	r2, 800e4e2 <_realloc_r+0x24>
 800e4d6:	f7fd fd9f 	bl	800c018 <_free_r>
 800e4da:	4625      	mov	r5, r4
 800e4dc:	4628      	mov	r0, r5
 800e4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4e2:	f000 f842 	bl	800e56a <_malloc_usable_size_r>
 800e4e6:	4284      	cmp	r4, r0
 800e4e8:	4607      	mov	r7, r0
 800e4ea:	d802      	bhi.n	800e4f2 <_realloc_r+0x34>
 800e4ec:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e4f0:	d812      	bhi.n	800e518 <_realloc_r+0x5a>
 800e4f2:	4621      	mov	r1, r4
 800e4f4:	4640      	mov	r0, r8
 800e4f6:	f7fb fca7 	bl	8009e48 <_malloc_r>
 800e4fa:	4605      	mov	r5, r0
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d0ed      	beq.n	800e4dc <_realloc_r+0x1e>
 800e500:	42bc      	cmp	r4, r7
 800e502:	4622      	mov	r2, r4
 800e504:	4631      	mov	r1, r6
 800e506:	bf28      	it	cs
 800e508:	463a      	movcs	r2, r7
 800e50a:	f7fc ff7a 	bl	800b402 <memcpy>
 800e50e:	4631      	mov	r1, r6
 800e510:	4640      	mov	r0, r8
 800e512:	f7fd fd81 	bl	800c018 <_free_r>
 800e516:	e7e1      	b.n	800e4dc <_realloc_r+0x1e>
 800e518:	4635      	mov	r5, r6
 800e51a:	e7df      	b.n	800e4dc <_realloc_r+0x1e>

0800e51c <__ascii_wctomb>:
 800e51c:	b149      	cbz	r1, 800e532 <__ascii_wctomb+0x16>
 800e51e:	2aff      	cmp	r2, #255	; 0xff
 800e520:	bf85      	ittet	hi
 800e522:	238a      	movhi	r3, #138	; 0x8a
 800e524:	6003      	strhi	r3, [r0, #0]
 800e526:	700a      	strbls	r2, [r1, #0]
 800e528:	f04f 30ff 	movhi.w	r0, #4294967295
 800e52c:	bf98      	it	ls
 800e52e:	2001      	movls	r0, #1
 800e530:	4770      	bx	lr
 800e532:	4608      	mov	r0, r1
 800e534:	4770      	bx	lr
	...

0800e538 <fiprintf>:
 800e538:	b40e      	push	{r1, r2, r3}
 800e53a:	b503      	push	{r0, r1, lr}
 800e53c:	4601      	mov	r1, r0
 800e53e:	ab03      	add	r3, sp, #12
 800e540:	4805      	ldr	r0, [pc, #20]	; (800e558 <fiprintf+0x20>)
 800e542:	f853 2b04 	ldr.w	r2, [r3], #4
 800e546:	6800      	ldr	r0, [r0, #0]
 800e548:	9301      	str	r3, [sp, #4]
 800e54a:	f7ff f9af 	bl	800d8ac <_vfiprintf_r>
 800e54e:	b002      	add	sp, #8
 800e550:	f85d eb04 	ldr.w	lr, [sp], #4
 800e554:	b003      	add	sp, #12
 800e556:	4770      	bx	lr
 800e558:	20000064 	.word	0x20000064

0800e55c <abort>:
 800e55c:	b508      	push	{r3, lr}
 800e55e:	2006      	movs	r0, #6
 800e560:	f000 f834 	bl	800e5cc <raise>
 800e564:	2001      	movs	r0, #1
 800e566:	f000 fa03 	bl	800e970 <_exit>

0800e56a <_malloc_usable_size_r>:
 800e56a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e56e:	1f18      	subs	r0, r3, #4
 800e570:	2b00      	cmp	r3, #0
 800e572:	bfbc      	itt	lt
 800e574:	580b      	ldrlt	r3, [r1, r0]
 800e576:	18c0      	addlt	r0, r0, r3
 800e578:	4770      	bx	lr

0800e57a <_raise_r>:
 800e57a:	291f      	cmp	r1, #31
 800e57c:	b538      	push	{r3, r4, r5, lr}
 800e57e:	4604      	mov	r4, r0
 800e580:	460d      	mov	r5, r1
 800e582:	d904      	bls.n	800e58e <_raise_r+0x14>
 800e584:	2316      	movs	r3, #22
 800e586:	6003      	str	r3, [r0, #0]
 800e588:	f04f 30ff 	mov.w	r0, #4294967295
 800e58c:	bd38      	pop	{r3, r4, r5, pc}
 800e58e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e590:	b112      	cbz	r2, 800e598 <_raise_r+0x1e>
 800e592:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e596:	b94b      	cbnz	r3, 800e5ac <_raise_r+0x32>
 800e598:	4620      	mov	r0, r4
 800e59a:	f000 f831 	bl	800e600 <_getpid_r>
 800e59e:	462a      	mov	r2, r5
 800e5a0:	4601      	mov	r1, r0
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5a8:	f000 b818 	b.w	800e5dc <_kill_r>
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d00a      	beq.n	800e5c6 <_raise_r+0x4c>
 800e5b0:	1c59      	adds	r1, r3, #1
 800e5b2:	d103      	bne.n	800e5bc <_raise_r+0x42>
 800e5b4:	2316      	movs	r3, #22
 800e5b6:	6003      	str	r3, [r0, #0]
 800e5b8:	2001      	movs	r0, #1
 800e5ba:	e7e7      	b.n	800e58c <_raise_r+0x12>
 800e5bc:	2400      	movs	r4, #0
 800e5be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	4798      	blx	r3
 800e5c6:	2000      	movs	r0, #0
 800e5c8:	e7e0      	b.n	800e58c <_raise_r+0x12>
	...

0800e5cc <raise>:
 800e5cc:	4b02      	ldr	r3, [pc, #8]	; (800e5d8 <raise+0xc>)
 800e5ce:	4601      	mov	r1, r0
 800e5d0:	6818      	ldr	r0, [r3, #0]
 800e5d2:	f7ff bfd2 	b.w	800e57a <_raise_r>
 800e5d6:	bf00      	nop
 800e5d8:	20000064 	.word	0x20000064

0800e5dc <_kill_r>:
 800e5dc:	b538      	push	{r3, r4, r5, lr}
 800e5de:	4d07      	ldr	r5, [pc, #28]	; (800e5fc <_kill_r+0x20>)
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	4608      	mov	r0, r1
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	602b      	str	r3, [r5, #0]
 800e5ea:	f000 f9b9 	bl	800e960 <_kill>
 800e5ee:	1c43      	adds	r3, r0, #1
 800e5f0:	d102      	bne.n	800e5f8 <_kill_r+0x1c>
 800e5f2:	682b      	ldr	r3, [r5, #0]
 800e5f4:	b103      	cbz	r3, 800e5f8 <_kill_r+0x1c>
 800e5f6:	6023      	str	r3, [r4, #0]
 800e5f8:	bd38      	pop	{r3, r4, r5, pc}
 800e5fa:	bf00      	nop
 800e5fc:	200032c8 	.word	0x200032c8

0800e600 <_getpid_r>:
 800e600:	f000 b9a6 	b.w	800e950 <_getpid>

0800e604 <with_errno>:
 800e604:	b513      	push	{r0, r1, r4, lr}
 800e606:	4604      	mov	r4, r0
 800e608:	ed8d 0b00 	vstr	d0, [sp]
 800e60c:	f7fc fec4 	bl	800b398 <__errno>
 800e610:	ed9d 0b00 	vldr	d0, [sp]
 800e614:	6004      	str	r4, [r0, #0]
 800e616:	b002      	add	sp, #8
 800e618:	bd10      	pop	{r4, pc}
 800e61a:	0000      	movs	r0, r0
 800e61c:	0000      	movs	r0, r0
	...

0800e620 <__math_divzero>:
 800e620:	b082      	sub	sp, #8
 800e622:	2800      	cmp	r0, #0
 800e624:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e628:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800e62c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800e630:	ed8d 7b00 	vstr	d7, [sp]
 800e634:	ed9d 0b00 	vldr	d0, [sp]
 800e638:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800e648 <__math_divzero+0x28>
 800e63c:	2022      	movs	r0, #34	; 0x22
 800e63e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e642:	b002      	add	sp, #8
 800e644:	f7ff bfde 	b.w	800e604 <with_errno>
	...

0800e650 <__math_invalid>:
 800e650:	eeb0 7b40 	vmov.f64	d7, d0
 800e654:	eeb4 7b47 	vcmp.f64	d7, d7
 800e658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e65c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e660:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e664:	d602      	bvs.n	800e66c <__math_invalid+0x1c>
 800e666:	2021      	movs	r0, #33	; 0x21
 800e668:	f7ff bfcc 	b.w	800e604 <with_errno>
 800e66c:	4770      	bx	lr
	...

0800e670 <log>:
 800e670:	b470      	push	{r4, r5, r6}
 800e672:	ee10 1a90 	vmov	r1, s1
 800e676:	ee10 3a10 	vmov	r3, s0
 800e67a:	f04f 34ff 	mov.w	r4, #4294967295
 800e67e:	429c      	cmp	r4, r3
 800e680:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 800e684:	4c72      	ldr	r4, [pc, #456]	; (800e850 <log+0x1e0>)
 800e686:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 800e68a:	4184      	sbcs	r4, r0
 800e68c:	ed2d 8b02 	vpush	{d8}
 800e690:	ea4f 4211 	mov.w	r2, r1, lsr #16
 800e694:	d35a      	bcc.n	800e74c <log+0xdc>
 800e696:	4a6f      	ldr	r2, [pc, #444]	; (800e854 <log+0x1e4>)
 800e698:	4291      	cmp	r1, r2
 800e69a:	bf08      	it	eq
 800e69c:	2b00      	cmpeq	r3, #0
 800e69e:	f000 80c5 	beq.w	800e82c <log+0x1bc>
 800e6a2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e6a6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e6aa:	4b6b      	ldr	r3, [pc, #428]	; (800e858 <log+0x1e8>)
 800e6ac:	ee20 2b00 	vmul.f64	d2, d0, d0
 800e6b0:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800e6b4:	ee20 4b02 	vmul.f64	d4, d0, d2
 800e6b8:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800e6bc:	eea6 7b00 	vfma.f64	d7, d6, d0
 800e6c0:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800e6c4:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800e6c8:	eea6 7b02 	vfma.f64	d7, d6, d2
 800e6cc:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800e6d0:	eea5 6b00 	vfma.f64	d6, d5, d0
 800e6d4:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800e6d8:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 800e6dc:	eea5 6b02 	vfma.f64	d6, d5, d2
 800e6e0:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 800e6e4:	eea3 5b00 	vfma.f64	d5, d3, d0
 800e6e8:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 800e6ec:	eea3 5b02 	vfma.f64	d5, d3, d2
 800e6f0:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 800e6f4:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e6f8:	eea5 6b04 	vfma.f64	d6, d5, d4
 800e6fc:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 800e700:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e704:	eeb0 2b47 	vmov.f64	d2, d7
 800e708:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e838 <log+0x1c8>
 800e70c:	eeb0 6b40 	vmov.f64	d6, d0
 800e710:	eeb0 3b40 	vmov.f64	d3, d0
 800e714:	eea0 6b07 	vfma.f64	d6, d0, d7
 800e718:	eea0 6b47 	vfms.f64	d6, d0, d7
 800e71c:	ee30 8b46 	vsub.f64	d8, d0, d6
 800e720:	ee26 1b06 	vmul.f64	d1, d6, d6
 800e724:	eea1 3b05 	vfma.f64	d3, d1, d5
 800e728:	ee30 7b43 	vsub.f64	d7, d0, d3
 800e72c:	ee30 0b06 	vadd.f64	d0, d0, d6
 800e730:	eea1 7b05 	vfma.f64	d7, d1, d5
 800e734:	ee25 5b08 	vmul.f64	d5, d5, d8
 800e738:	eea5 7b00 	vfma.f64	d7, d5, d0
 800e73c:	eea2 7b04 	vfma.f64	d7, d2, d4
 800e740:	ee33 0b07 	vadd.f64	d0, d3, d7
 800e744:	ecbd 8b02 	vpop	{d8}
 800e748:	bc70      	pop	{r4, r5, r6}
 800e74a:	4770      	bx	lr
 800e74c:	f1a2 0410 	sub.w	r4, r2, #16
 800e750:	f647 70df 	movw	r0, #32735	; 0x7fdf
 800e754:	4284      	cmp	r4, r0
 800e756:	d924      	bls.n	800e7a2 <log+0x132>
 800e758:	18d8      	adds	r0, r3, r3
 800e75a:	eb41 0401 	adc.w	r4, r1, r1
 800e75e:	4320      	orrs	r0, r4
 800e760:	d105      	bne.n	800e76e <log+0xfe>
 800e762:	ecbd 8b02 	vpop	{d8}
 800e766:	2001      	movs	r0, #1
 800e768:	bc70      	pop	{r4, r5, r6}
 800e76a:	f7ff bf59 	b.w	800e620 <__math_divzero>
 800e76e:	483b      	ldr	r0, [pc, #236]	; (800e85c <log+0x1ec>)
 800e770:	4281      	cmp	r1, r0
 800e772:	bf08      	it	eq
 800e774:	2b00      	cmpeq	r3, #0
 800e776:	d0e5      	beq.n	800e744 <log+0xd4>
 800e778:	0413      	lsls	r3, r2, #16
 800e77a:	d403      	bmi.n	800e784 <log+0x114>
 800e77c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e780:	4393      	bics	r3, r2
 800e782:	d104      	bne.n	800e78e <log+0x11e>
 800e784:	ecbd 8b02 	vpop	{d8}
 800e788:	bc70      	pop	{r4, r5, r6}
 800e78a:	f7ff bf61 	b.w	800e650 <__math_invalid>
 800e78e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800e840 <log+0x1d0>
 800e792:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e796:	ec53 2b17 	vmov	r2, r3, d7
 800e79a:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 800e79e:	ee17 3a10 	vmov	r3, s14
 800e7a2:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800e7a6:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800e7aa:	f502 12d0 	add.w	r2, r2, #1703936	; 0x1a0000
 800e7ae:	0d16      	lsrs	r6, r2, #20
 800e7b0:	1e1c      	subs	r4, r3, #0
 800e7b2:	4b29      	ldr	r3, [pc, #164]	; (800e858 <log+0x1e8>)
 800e7b4:	f3c2 3046 	ubfx	r0, r2, #13, #7
 800e7b8:	0536      	lsls	r6, r6, #20
 800e7ba:	1b8d      	subs	r5, r1, r6
 800e7bc:	eb03 1100 	add.w	r1, r3, r0, lsl #4
 800e7c0:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 800e7c4:	ec45 4b16 	vmov	d6, r4, r5
 800e7c8:	1512      	asrs	r2, r2, #20
 800e7ca:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e7ce:	ee07 2a90 	vmov	s15, r2
 800e7d2:	ee25 2b05 	vmul.f64	d2, d5, d5
 800e7d6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e7da:	ed93 4b00 	vldr	d4, [r3]
 800e7de:	ee25 1b02 	vmul.f64	d1, d5, d2
 800e7e2:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 800e7e6:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e7ea:	ee35 4b07 	vadd.f64	d4, d5, d7
 800e7ee:	ee37 0b44 	vsub.f64	d0, d7, d4
 800e7f2:	ed93 7b02 	vldr	d7, [r3, #8]
 800e7f6:	ee30 0b05 	vadd.f64	d0, d0, d5
 800e7fa:	eea7 0b06 	vfma.f64	d0, d7, d6
 800e7fe:	ed93 7b04 	vldr	d7, [r3, #16]
 800e802:	ed93 6b08 	vldr	d6, [r3, #32]
 800e806:	eea7 0b02 	vfma.f64	d0, d7, d2
 800e80a:	ed93 7b06 	vldr	d7, [r3, #24]
 800e80e:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800e812:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e816:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800e81a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e81e:	eea6 7b02 	vfma.f64	d7, d6, d2
 800e822:	eea1 0b07 	vfma.f64	d0, d1, d7
 800e826:	ee30 0b04 	vadd.f64	d0, d0, d4
 800e82a:	e78b      	b.n	800e744 <log+0xd4>
 800e82c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800e848 <log+0x1d8>
 800e830:	e788      	b.n	800e744 <log+0xd4>
 800e832:	bf00      	nop
 800e834:	f3af 8000 	nop.w
 800e838:	00000000 	.word	0x00000000
 800e83c:	41a00000 	.word	0x41a00000
 800e840:	00000000 	.word	0x00000000
 800e844:	43300000 	.word	0x43300000
	...
 800e850:	000308ff 	.word	0x000308ff
 800e854:	3ff00000 	.word	0x3ff00000
 800e858:	080162f8 	.word	0x080162f8
 800e85c:	7ff00000 	.word	0x7ff00000

0800e860 <ceil>:
 800e860:	ee10 1a90 	vmov	r1, s1
 800e864:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e868:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e86c:	2b13      	cmp	r3, #19
 800e86e:	b530      	push	{r4, r5, lr}
 800e870:	ee10 0a10 	vmov	r0, s0
 800e874:	ee10 5a10 	vmov	r5, s0
 800e878:	dc2f      	bgt.n	800e8da <ceil+0x7a>
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	da13      	bge.n	800e8a6 <ceil+0x46>
 800e87e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e940 <ceil+0xe0>
 800e882:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e886:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e88e:	dd05      	ble.n	800e89c <ceil+0x3c>
 800e890:	2900      	cmp	r1, #0
 800e892:	db4c      	blt.n	800e92e <ceil+0xce>
 800e894:	4301      	orrs	r1, r0
 800e896:	d04e      	beq.n	800e936 <ceil+0xd6>
 800e898:	492b      	ldr	r1, [pc, #172]	; (800e948 <ceil+0xe8>)
 800e89a:	2000      	movs	r0, #0
 800e89c:	460b      	mov	r3, r1
 800e89e:	4602      	mov	r2, r0
 800e8a0:	ec43 2b10 	vmov	d0, r2, r3
 800e8a4:	e020      	b.n	800e8e8 <ceil+0x88>
 800e8a6:	4a29      	ldr	r2, [pc, #164]	; (800e94c <ceil+0xec>)
 800e8a8:	411a      	asrs	r2, r3
 800e8aa:	ea01 0402 	and.w	r4, r1, r2
 800e8ae:	4304      	orrs	r4, r0
 800e8b0:	d01a      	beq.n	800e8e8 <ceil+0x88>
 800e8b2:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800e940 <ceil+0xe0>
 800e8b6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e8ba:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c2:	ddeb      	ble.n	800e89c <ceil+0x3c>
 800e8c4:	2900      	cmp	r1, #0
 800e8c6:	bfc2      	ittt	gt
 800e8c8:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 800e8cc:	fa40 f303 	asrgt.w	r3, r0, r3
 800e8d0:	18c9      	addgt	r1, r1, r3
 800e8d2:	ea21 0102 	bic.w	r1, r1, r2
 800e8d6:	2000      	movs	r0, #0
 800e8d8:	e7e0      	b.n	800e89c <ceil+0x3c>
 800e8da:	2b33      	cmp	r3, #51	; 0x33
 800e8dc:	dd05      	ble.n	800e8ea <ceil+0x8a>
 800e8de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8e2:	d101      	bne.n	800e8e8 <ceil+0x88>
 800e8e4:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e8e8:	bd30      	pop	{r4, r5, pc}
 800e8ea:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e8ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e8f2:	40e2      	lsrs	r2, r4
 800e8f4:	4210      	tst	r0, r2
 800e8f6:	d0f7      	beq.n	800e8e8 <ceil+0x88>
 800e8f8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800e940 <ceil+0xe0>
 800e8fc:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e900:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e908:	ddc8      	ble.n	800e89c <ceil+0x3c>
 800e90a:	2900      	cmp	r1, #0
 800e90c:	dd02      	ble.n	800e914 <ceil+0xb4>
 800e90e:	2b14      	cmp	r3, #20
 800e910:	d103      	bne.n	800e91a <ceil+0xba>
 800e912:	3101      	adds	r1, #1
 800e914:	ea20 0002 	bic.w	r0, r0, r2
 800e918:	e7c0      	b.n	800e89c <ceil+0x3c>
 800e91a:	2401      	movs	r4, #1
 800e91c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e920:	fa04 f303 	lsl.w	r3, r4, r3
 800e924:	4418      	add	r0, r3
 800e926:	4285      	cmp	r5, r0
 800e928:	bf88      	it	hi
 800e92a:	1909      	addhi	r1, r1, r4
 800e92c:	e7f2      	b.n	800e914 <ceil+0xb4>
 800e92e:	2000      	movs	r0, #0
 800e930:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e934:	e7b2      	b.n	800e89c <ceil+0x3c>
 800e936:	4608      	mov	r0, r1
 800e938:	e7b0      	b.n	800e89c <ceil+0x3c>
 800e93a:	bf00      	nop
 800e93c:	f3af 8000 	nop.w
 800e940:	8800759c 	.word	0x8800759c
 800e944:	7e37e43c 	.word	0x7e37e43c
 800e948:	3ff00000 	.word	0x3ff00000
 800e94c:	000fffff 	.word	0x000fffff

0800e950 <_getpid>:
 800e950:	4b02      	ldr	r3, [pc, #8]	; (800e95c <_getpid+0xc>)
 800e952:	2258      	movs	r2, #88	; 0x58
 800e954:	601a      	str	r2, [r3, #0]
 800e956:	f04f 30ff 	mov.w	r0, #4294967295
 800e95a:	4770      	bx	lr
 800e95c:	200032c8 	.word	0x200032c8

0800e960 <_kill>:
 800e960:	4b02      	ldr	r3, [pc, #8]	; (800e96c <_kill+0xc>)
 800e962:	2258      	movs	r2, #88	; 0x58
 800e964:	601a      	str	r2, [r3, #0]
 800e966:	f04f 30ff 	mov.w	r0, #4294967295
 800e96a:	4770      	bx	lr
 800e96c:	200032c8 	.word	0x200032c8

0800e970 <_exit>:
 800e970:	e7fe      	b.n	800e970 <_exit>
	...

0800e974 <_init>:
 800e974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e976:	bf00      	nop
 800e978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e97a:	bc08      	pop	{r3}
 800e97c:	469e      	mov	lr, r3
 800e97e:	4770      	bx	lr

0800e980 <_fini>:
 800e980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e982:	bf00      	nop
 800e984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e986:	bc08      	pop	{r3}
 800e988:	469e      	mov	lr, r3
 800e98a:	4770      	bx	lr


Novelty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006448  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006648  08006648  00016648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066e8  080066e8  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  080066e8  080066e8  000166e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f0  080066f0  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066f4  080066f4  000166f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080066f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  08006760  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  08006800  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008b0  200001a8  080068a0  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000a58  080068a0  00020a58  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201d6  2**0
                  CONTENTS, READONLY
 15 .debug_info   00014c3e  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002de6  00000000  00000000  00034e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000f68  00000000  00000000  00037c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000bcd  00000000  00000000  00038ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002aa4b  00000000  00000000  00039775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001401c  00000000  00000000  000641c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00101d82  00000000  00000000  000781dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000047a0  00000000  00000000  00179f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  0017e700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a8 	.word	0x200001a8
 800021c:	00000000 	.word	0x00000000
 8000220:	08006630 	.word	0x08006630

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ac 	.word	0x200001ac
 800023c:	08006630 	.word	0x08006630

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b09a      	sub	sp, #104	; 0x68
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fe48 	bl	8001276 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f813 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f99f 	bl	800092c <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 f97f 	bl	80008f0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 f91f 	bl	8000834 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 f94d 	bl	8000894 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005fa:	f000 f87b 	bl	80006f4 <MX_ADC1_Init>
  MX_ETH_Init();
 80005fe:	f000 f8cb 	bl	8000798 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3); // redirect the printf() and scanf() function to huart
 8000602:	4802      	ldr	r0, [pc, #8]	; (800060c <main+0x30>)
 8000604:	f000 fa9a 	bl	8000b3c <RetargetInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x2c>
 800060a:	bf00      	nop
 800060c:	20000354 	.word	0x20000354

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f005 fb28 	bl	8005c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000634:	f002 fdb4 	bl	80031a0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <SystemClock_Config+0xdc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a2b      	ldr	r2, [pc, #172]	; (80006ec <SystemClock_Config+0xdc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemClock_Config+0xdc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xe0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000658:	4a25      	ldr	r2, [pc, #148]	; (80006f0 <SystemClock_Config+0xe0>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemClock_Config+0xe0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000670:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000674:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000684:	2360      	movs	r3, #96	; 0x60
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000690:	2302      	movs	r3, #2
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fde1 	bl	8003260 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a4:	f000 fa1c 	bl	8000ae0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a8:	f002 fd8a 	bl	80031c0 <HAL_PWREx_EnableOverDrive>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006b2:	f000 fa15 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2103      	movs	r1, #3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f872 	bl	80037bc <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006de:	f000 f9ff 	bl	8000ae0 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC1_Init+0x98>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <MX_ADC1_Init+0x9c>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ADC1_Init+0x98>)
 800070e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000712:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_ADC1_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ADC1_Init+0x98>)
 8000722:	2201      	movs	r2, #1
 8000724:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_ADC1_Init+0x98>)
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_ADC1_Init+0xa0>)
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_ADC1_Init+0x98>)
 8000742:	2201      	movs	r2, #1
 8000744:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_ADC1_Init+0x98>)
 8000748:	2201      	movs	r2, #1
 800074a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_ADC1_Init+0x98>)
 8000750:	2201      	movs	r2, #1
 8000752:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_ADC1_Init+0x98>)
 8000756:	f000 fe0f 	bl	8001378 <HAL_ADC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 f9be 	bl	8000ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000768:	2301      	movs	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_ADC1_Init+0x98>)
 8000776:	f000 ff51 	bl	800161c <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000780:	f000 f9ae 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200001fc 	.word	0x200001fc
 8000790:	40012000 	.word	0x40012000
 8000794:	0f000001 	.word	0x0f000001

08000798 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_ETH_Init+0x84>)
 800079e:	4a20      	ldr	r2, [pc, #128]	; (8000820 <MX_ETH_Init+0x88>)
 80007a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_ETH_Init+0x8c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_ETH_Init+0x8c>)
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_ETH_Init+0x8c>)
 80007b0:	22e1      	movs	r2, #225	; 0xe1
 80007b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_ETH_Init+0x8c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_ETH_Init+0x8c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_ETH_Init+0x8c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_ETH_Init+0x84>)
 80007c8:	4a16      	ldr	r2, [pc, #88]	; (8000824 <MX_ETH_Init+0x8c>)
 80007ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_ETH_Init+0x84>)
 80007ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007d2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_ETH_Init+0x84>)
 80007d6:	4a14      	ldr	r2, [pc, #80]	; (8000828 <MX_ETH_Init+0x90>)
 80007d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_ETH_Init+0x84>)
 80007dc:	4a13      	ldr	r2, [pc, #76]	; (800082c <MX_ETH_Init+0x94>)
 80007de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_ETH_Init+0x84>)
 80007e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_ETH_Init+0x84>)
 80007ea:	f001 fe73 	bl	80024d4 <HAL_ETH_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 f974 	bl	8000ae0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007f8:	2238      	movs	r2, #56	; 0x38
 80007fa:	2100      	movs	r1, #0
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <MX_ETH_Init+0x98>)
 80007fe:	f005 fa39 	bl	8005c74 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_ETH_Init+0x98>)
 8000804:	2221      	movs	r2, #33	; 0x21
 8000806:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_ETH_Init+0x98>)
 800080a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800080e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_ETH_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200002a4 	.word	0x200002a4
 8000820:	40028000 	.word	0x40028000
 8000824:	200008f8 	.word	0x200008f8
 8000828:	20000108 	.word	0x20000108
 800082c:	20000068 	.word	0x20000068
 8000830:	200001c4 	.word	0x200001c4

08000834 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART3_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_USART3_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_USART3_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART3_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000878:	f003 fdee 	bl	8004458 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f92d 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000354 	.word	0x20000354
 8000890:	40004800 	.word	0x40004800

08000894 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800089e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2206      	movs	r2, #6
 80008a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2202      	movs	r2, #2
 80008b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	f002 fb1a 	bl	8002f10 <HAL_PCD_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 f8fd 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200003dc 	.word	0x200003dc

080008f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_DMA_Init+0x38>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <MX_DMA_Init+0x38>)
 80008fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_DMA_Init+0x38>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	2038      	movs	r0, #56	; 0x38
 8000914:	f001 fa2f 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000918:	2038      	movs	r0, #56	; 0x38
 800091a:	f001 fa48 	bl	8001dae <HAL_NVIC_EnableIRQ>

}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	; 0x30
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b4b      	ldr	r3, [pc, #300]	; (8000a70 <MX_GPIO_Init+0x144>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a4a      	ldr	r2, [pc, #296]	; (8000a70 <MX_GPIO_Init+0x144>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b48      	ldr	r3, [pc, #288]	; (8000a70 <MX_GPIO_Init+0x144>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	4b45      	ldr	r3, [pc, #276]	; (8000a70 <MX_GPIO_Init+0x144>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a44      	ldr	r2, [pc, #272]	; (8000a70 <MX_GPIO_Init+0x144>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b42      	ldr	r3, [pc, #264]	; (8000a70 <MX_GPIO_Init+0x144>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b3f      	ldr	r3, [pc, #252]	; (8000a70 <MX_GPIO_Init+0x144>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a3e      	ldr	r2, [pc, #248]	; (8000a70 <MX_GPIO_Init+0x144>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b3c      	ldr	r3, [pc, #240]	; (8000a70 <MX_GPIO_Init+0x144>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	4b39      	ldr	r3, [pc, #228]	; (8000a70 <MX_GPIO_Init+0x144>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a38      	ldr	r2, [pc, #224]	; (8000a70 <MX_GPIO_Init+0x144>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <MX_GPIO_Init+0x144>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <MX_GPIO_Init+0x144>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a32      	ldr	r2, [pc, #200]	; (8000a70 <MX_GPIO_Init+0x144>)
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <MX_GPIO_Init+0x144>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ba:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <MX_GPIO_Init+0x144>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a2c      	ldr	r2, [pc, #176]	; (8000a70 <MX_GPIO_Init+0x144>)
 80009c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <MX_GPIO_Init+0x144>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009d8:	4826      	ldr	r0, [pc, #152]	; (8000a74 <MX_GPIO_Init+0x148>)
 80009da:	f002 fa4d 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2140      	movs	r1, #64	; 0x40
 80009e2:	4825      	ldr	r0, [pc, #148]	; (8000a78 <MX_GPIO_Init+0x14c>)
 80009e4:	f002 fa48 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009f4:	2302      	movs	r3, #2
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	481f      	ldr	r0, [pc, #124]	; (8000a7c <MX_GPIO_Init+0x150>)
 8000a00:	f002 f88e 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a04:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4815      	ldr	r0, [pc, #84]	; (8000a74 <MX_GPIO_Init+0x148>)
 8000a1e:	f002 f87f 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a22:	2340      	movs	r3, #64	; 0x40
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	480f      	ldr	r0, [pc, #60]	; (8000a78 <MX_GPIO_Init+0x14c>)
 8000a3a:	f002 f871 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <MX_GPIO_Init+0x14c>)
 8000a52:	f002 f865 	bl	8002b20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2028      	movs	r0, #40	; 0x28
 8000a5c:	f001 f98b 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a60:	2028      	movs	r0, #40	; 0x28
 8000a62:	f001 f9a4 	bl	8001dae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a66:	bf00      	nop
 8000a68:	3730      	adds	r7, #48	; 0x30
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020400 	.word	0x40020400
 8000a78:	40021800 	.word	0x40021800
 8000a7c:	40020800 	.word	0x40020800

08000a80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // GPIO interrupt handler
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == 0x2000){ // if user btn is pressed
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a90:	d105      	bne.n	8000a9e <HAL_GPIO_EXTI_Callback+0x1e>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000a92:	220a      	movs	r2, #10
 8000a94:	4905      	ldr	r1, [pc, #20]	; (8000aac <HAL_GPIO_EXTI_Callback+0x2c>)
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a98:	f000 fcb2 	bl	8001400 <HAL_ADC_Start_DMA>
	}
	else{
		printf("Unknown GPIO interrupt happened");
	}
}
 8000a9c:	e002      	b.n	8000aa4 <HAL_GPIO_EXTI_Callback+0x24>
		printf("Unknown GPIO interrupt happened");
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x34>)
 8000aa0:	f004 fef4 	bl	800588c <iprintf>
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200008e4 	.word	0x200008e4
 8000ab0:	200001fc 	.word	0x200001fc
 8000ab4:	08006648 	.word	0x08006648

08000ab8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) { //what to do when the analogue acquisition end
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	printf("ANALOG CONVERSION COMPLETED.\r\n");
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <HAL_ADC_ConvCpltCallback+0x20>)
 8000ac2:	f004 ff49 	bl	8005958 <puts>
	printarray(&adc_buf,ADC_BUF_LEN);
 8000ac6:	210a      	movs	r1, #10
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <HAL_ADC_ConvCpltCallback+0x24>)
 8000aca:	f000 f815 	bl	8000af8 <printarray>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08006668 	.word	0x08006668
 8000adc:	200008e4 	.word	0x200008e4

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aec:	4801      	ldr	r0, [pc, #4]	; (8000af4 <Error_Handler+0x14>)
 8000aee:	f002 f9dc 	bl	8002eaa <HAL_GPIO_TogglePin>
 8000af2:	e7f9      	b.n	8000ae8 <Error_Handler+0x8>
 8000af4:	40020400 	.word	0x40020400

08000af8 <printarray>:
		result += strlen(result);
	}
	sprintf(result, "%u", uintArray[i]);  // Last element without a tab
}

void printarray(const uint16_t *uintarray, size_t length){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
	for (int var = 0; var < length; ++var) {
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	e00a      	b.n	8000b1e <printarray+0x26>
		printf("%d\t", &uintarray[var]);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4619      	mov	r1, r3
 8000b12:	4808      	ldr	r0, [pc, #32]	; (8000b34 <printarray+0x3c>)
 8000b14:	f004 feba 	bl	800588c <iprintf>
	for (int var = 0; var < length; ++var) {
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d8f0      	bhi.n	8000b08 <printarray+0x10>
	}
	printf("\r\n");
 8000b26:	4804      	ldr	r0, [pc, #16]	; (8000b38 <printarray+0x40>)
 8000b28:	f004 ff16 	bl	8005958 <puts>
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	0800668c 	.word	0x0800668c
 8000b38:	08006690 	.word	0x08006690

08000b3c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <RetargetInit+0x28>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <RetargetInit+0x2c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	6898      	ldr	r0, [r3, #8]
 8000b50:	2300      	movs	r3, #0
 8000b52:	2202      	movs	r2, #2
 8000b54:	2100      	movs	r1, #0
 8000b56:	f004 ff07 	bl	8005968 <setvbuf>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000900 	.word	0x20000900
 8000b68:	20000064 	.word	0x20000064

08000b6c <_isatty>:

int _isatty(int fd) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db04      	blt.n	8000b84 <_isatty+0x18>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	dc01      	bgt.n	8000b84 <_isatty+0x18>
    return 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e005      	b.n	8000b90 <_isatty+0x24>

  errno = EBADF;
 8000b84:	f005 f8d4 	bl	8005d30 <__errno>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2209      	movs	r2, #9
 8000b8c:	601a      	str	r2, [r3, #0]
  return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <_write>:

int _write(int fd, char* ptr, int len) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d002      	beq.n	8000bb0 <_write+0x18>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d111      	bne.n	8000bd4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <_write+0x54>)
 8000bb2:	6818      	ldr	r0, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	f003 fc99 	bl	80044f4 <HAL_UART_Transmit>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <_write+0x38>
      return len;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	e008      	b.n	8000be2 <_write+0x4a>
    else
      return EIO;
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	e006      	b.n	8000be2 <_write+0x4a>
  }
  errno = EBADF;
 8000bd4:	f005 f8ac 	bl	8005d30 <__errno>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2209      	movs	r2, #9
 8000bdc:	601a      	str	r2, [r3, #0]
  return -1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000900 	.word	0x20000900

08000bf0 <_close>:

int _close(int fd) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db04      	blt.n	8000c08 <_close+0x18>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	dc01      	bgt.n	8000c08 <_close+0x18>
    return 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	e006      	b.n	8000c16 <_close+0x26>

  errno = EBADF;
 8000c08:	f005 f892 	bl	8005d30 <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2209      	movs	r2, #9
 8000c10:	601a      	str	r2, [r3, #0]
  return -1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b084      	sub	sp, #16
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000c2a:	f005 f881 	bl	8005d30 <__errno>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2209      	movs	r2, #9
 8000c32:	601a      	str	r2, [r3, #0]
  return -1;
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_read>:

int _read(int fd, char* ptr, int len) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d110      	bne.n	8000c74 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <_read+0x4c>)
 8000c54:	6818      	ldr	r0, [r3, #0]
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	f003 fccc 	bl	80045fa <HAL_UART_Receive>
 8000c62:	4603      	mov	r3, r0
 8000c64:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c66:	7dfb      	ldrb	r3, [r7, #23]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d101      	bne.n	8000c70 <_read+0x30>
      return 1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e008      	b.n	8000c82 <_read+0x42>
    else
      return EIO;
 8000c70:	2305      	movs	r3, #5
 8000c72:	e006      	b.n	8000c82 <_read+0x42>
  }
  errno = EBADF;
 8000c74:	f005 f85c 	bl	8005d30 <__errno>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2209      	movs	r2, #9
 8000c7c:	601a      	str	r2, [r3, #0]
  return -1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000900 	.word	0x20000900

08000c90 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db08      	blt.n	8000cb2 <_fstat+0x22>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	dc05      	bgt.n	8000cb2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cac:	605a      	str	r2, [r3, #4]
    return 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e005      	b.n	8000cbe <_fstat+0x2e>
  }

  errno = EBADF;
 8000cb2:	f005 f83d 	bl	8005d30 <__errno>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2209      	movs	r2, #9
 8000cba:	601a      	str	r2, [r3, #0]
  return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_MspInit+0x44>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x44>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x44>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x44>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2d      	ldr	r2, [pc, #180]	; (8000de4 <HAL_ADC_MspInit+0xd4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d153      	bne.n	8000dda <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d32:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a2c      	ldr	r2, [pc, #176]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d62:	2301      	movs	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d66:	2303      	movs	r3, #3
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	481d      	ldr	r0, [pc, #116]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000d76:	f001 fed3 	bl	8002b20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <HAL_ADC_MspInit+0xe4>)
 8000d7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000da0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000da8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dbe:	480c      	ldr	r0, [pc, #48]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000dc0:	f001 f810 	bl	8001de4 <HAL_DMA_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000dca:	f7ff fe89 	bl	8000ae0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000dd2:	639a      	str	r2, [r3, #56]	; 0x38
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40012000 	.word	0x40012000
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000
 8000df0:	20000244 	.word	0x20000244
 8000df4:	40026410 	.word	0x40026410

08000df8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08e      	sub	sp, #56	; 0x38
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a4e      	ldr	r2, [pc, #312]	; (8000f50 <HAL_ETH_MspInit+0x158>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	f040 8096 	bne.w	8000f48 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e1c:	4b4d      	ldr	r3, [pc, #308]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a4c      	ldr	r2, [pc, #304]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b4a      	ldr	r3, [pc, #296]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e30:	623b      	str	r3, [r7, #32]
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	4b47      	ldr	r3, [pc, #284]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a46      	ldr	r2, [pc, #280]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b44      	ldr	r3, [pc, #272]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	4b41      	ldr	r3, [pc, #260]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4a40      	ldr	r2, [pc, #256]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e56:	6313      	str	r3, [r2, #48]	; 0x30
 8000e58:	4b3e      	ldr	r3, [pc, #248]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e60:	61bb      	str	r3, [r7, #24]
 8000e62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e64:	4b3b      	ldr	r3, [pc, #236]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	4a3a      	ldr	r2, [pc, #232]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e70:	4b38      	ldr	r3, [pc, #224]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	4a34      	ldr	r2, [pc, #208]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6313      	str	r3, [r2, #48]	; 0x30
 8000e88:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	4a2e      	ldr	r2, [pc, #184]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	4a28      	ldr	r2, [pc, #160]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ec4:	2332      	movs	r3, #50	; 0x32
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed4:	230b      	movs	r3, #11
 8000ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	481e      	ldr	r0, [pc, #120]	; (8000f58 <HAL_ETH_MspInit+0x160>)
 8000ee0:	f001 fe1e 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ee4:	2386      	movs	r3, #134	; 0x86
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef4:	230b      	movs	r3, #11
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	4619      	mov	r1, r3
 8000efe:	4817      	ldr	r0, [pc, #92]	; (8000f5c <HAL_ETH_MspInit+0x164>)
 8000f00:	f001 fe0e 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f16:	230b      	movs	r3, #11
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480f      	ldr	r0, [pc, #60]	; (8000f60 <HAL_ETH_MspInit+0x168>)
 8000f22:	f001 fdfd 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f38:	230b      	movs	r3, #11
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	4619      	mov	r1, r3
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <HAL_ETH_MspInit+0x16c>)
 8000f44:	f001 fdec 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3738      	adds	r7, #56	; 0x38
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40028000 	.word	0x40028000
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40021800 	.word	0x40021800

08000f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0ae      	sub	sp, #184	; 0xb8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2290      	movs	r2, #144	; 0x90
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f004 fe73 	bl	8005c74 <memset>
  if(huart->Instance==USART3)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a22      	ldr	r2, [pc, #136]	; (800101c <HAL_UART_MspInit+0xb4>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d13c      	bne.n	8001012 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f002 fe2e 	bl	8003c08 <HAL_RCCEx_PeriphCLKConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fb2:	f7ff fd95 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_UART_MspInit+0xb8>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_UART_MspInit+0xb8>)
 8000fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_UART_MspInit+0xb8>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <HAL_UART_MspInit+0xb8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a13      	ldr	r2, [pc, #76]	; (8001020 <HAL_UART_MspInit+0xb8>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_UART_MspInit+0xb8>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fe6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001000:	2307      	movs	r3, #7
 8001002:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001006:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_MspInit+0xbc>)
 800100e:	f001 fd87 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	37b8      	adds	r7, #184	; 0xb8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40004800 	.word	0x40004800
 8001020:	40023800 	.word	0x40023800
 8001024:	40020c00 	.word	0x40020c00

08001028 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0ae      	sub	sp, #184	; 0xb8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2290      	movs	r2, #144	; 0x90
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f004 fe13 	bl	8005c74 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001056:	d159      	bne.n	800110c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001058:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800105c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fdcd 	bl	8003c08 <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001074:	f7ff fd34 	bl	8000ae0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <HAL_PCD_MspInit+0xec>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	4a25      	ldr	r2, [pc, #148]	; (8001114 <HAL_PCD_MspInit+0xec>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6313      	str	r3, [r2, #48]	; 0x30
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <HAL_PCD_MspInit+0xec>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001090:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001094:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010aa:	230a      	movs	r3, #10
 80010ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010b4:	4619      	mov	r1, r3
 80010b6:	4818      	ldr	r0, [pc, #96]	; (8001118 <HAL_PCD_MspInit+0xf0>)
 80010b8:	f001 fd32 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4810      	ldr	r0, [pc, #64]	; (8001118 <HAL_PCD_MspInit+0xf0>)
 80010d8:	f001 fd22 	bl	8002b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <HAL_PCD_MspInit+0xec>)
 80010de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e0:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <HAL_PCD_MspInit+0xec>)
 80010e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e6:	6353      	str	r3, [r2, #52]	; 0x34
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_PCD_MspInit+0xec>)
 80010ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <HAL_PCD_MspInit+0xec>)
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HAL_PCD_MspInit+0xec>)
 80010fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <HAL_PCD_MspInit+0xec>)
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	37b8      	adds	r7, #184	; 0xb8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <NMI_Handler+0x4>

08001122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <MemManage_Handler+0x4>

0800112e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <UsageFault_Handler+0x4>

0800113a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001168:	f000 f8c2 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001174:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001178:	f001 feb2 	bl	8002ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <DMA2_Stream0_IRQHandler+0x10>)
 8001186:	f000 ff3b 	bl	8002000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000244 	.word	0x20000244

08001194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <_sbrk+0x5c>)
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <_sbrk+0x60>)
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <_sbrk+0x64>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <_sbrk+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d207      	bcs.n	80011d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c4:	f004 fdb4 	bl	8005d30 <__errno>
 80011c8:	4603      	mov	r3, r0
 80011ca:	220c      	movs	r2, #12
 80011cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	e009      	b.n	80011e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <_sbrk+0x64>)
 80011e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20080000 	.word	0x20080000
 80011f4:	00000400 	.word	0x00000400
 80011f8:	20000904 	.word	0x20000904
 80011fc:	20000a58 	.word	0x20000a58

08001200 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <SystemInit+0x20>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <SystemInit+0x20>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800125c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800122a:	490e      	ldr	r1, [pc, #56]	; (8001264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001240:	4c0b      	ldr	r4, [pc, #44]	; (8001270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800124e:	f7ff ffd7 	bl	8001200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001252:	f004 fd73 	bl	8005d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001256:	f7ff f9c1 	bl	80005dc <main>
  bx  lr    
 800125a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800125c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001268:	080066f8 	.word	0x080066f8
  ldr r2, =_sbss
 800126c:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8001270:	20000a58 	.word	0x20000a58

08001274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC_IRQHandler>

08001276 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127a:	2003      	movs	r0, #3
 800127c:	f000 fd70 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001280:	2000      	movs	r0, #0
 8001282:	f000 f805 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001286:	f7ff fd1f 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fd8b 	bl	8001dca <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 fd53 	bl	8001d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008
 8001314:	20000908 	.word	0x20000908

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000908 	.word	0x20000908

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ffee 	bl	8001318 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffde 	bl	8001318 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008

08001378 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e031      	b.n	80013f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fcba 	bl	8000d10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d116      	bne.n	80013e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_ADC_Init+0x84>)
 80013bc:	4013      	ands	r3, r2
 80013be:	f043 0202 	orr.w	r2, r3, #2
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 fa7e 	bl	80018c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f023 0303 	bic.w	r3, r3, #3
 80013da:	f043 0201 	orr.w	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	641a      	str	r2, [r3, #64]	; 0x40
 80013e2:	e001      	b.n	80013e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	ffffeefd 	.word	0xffffeefd

08001400 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_ADC_Start_DMA+0x1e>
 800141a:	2302      	movs	r3, #2
 800141c:	e0d4      	b.n	80015c8 <HAL_ADC_Start_DMA+0x1c8>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b01      	cmp	r3, #1
 8001432:	d018      	beq.n	8001466 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0201 	orr.w	r2, r2, #1
 8001442:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001444:	4b62      	ldr	r3, [pc, #392]	; (80015d0 <HAL_ADC_Start_DMA+0x1d0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a62      	ldr	r2, [pc, #392]	; (80015d4 <HAL_ADC_Start_DMA+0x1d4>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	0c9a      	lsrs	r2, r3, #18
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001458:	e002      	b.n	8001460 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3b01      	subs	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f9      	bne.n	800145a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b01      	cmp	r3, #1
 8001472:	f040 809c 	bne.w	80015ae <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800147a:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <HAL_ADC_Start_DMA+0x1d8>)
 800147c:	4013      	ands	r3, r2
 800147e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001490:	2b00      	cmp	r3, #0
 8001492:	d007      	beq.n	80014a4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800149c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014b0:	d106      	bne.n	80014c0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f023 0206 	bic.w	r2, r3, #6
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	645a      	str	r2, [r3, #68]	; 0x44
 80014be:	e002      	b.n	80014c6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d2:	4a42      	ldr	r2, [pc, #264]	; (80015dc <HAL_ADC_Start_DMA+0x1dc>)
 80014d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014da:	4a41      	ldr	r2, [pc, #260]	; (80015e0 <HAL_ADC_Start_DMA+0x1e0>)
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e2:	4a40      	ldr	r2, [pc, #256]	; (80015e4 <HAL_ADC_Start_DMA+0x1e4>)
 80014e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800150e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	334c      	adds	r3, #76	; 0x4c
 800151a:	4619      	mov	r1, r3
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f000 fd0e 	bl	8001f40 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001524:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <HAL_ADC_Start_DMA+0x1e8>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 031f 	and.w	r3, r3, #31
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10f      	bne.n	8001550 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d143      	bne.n	80015c6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	e03a      	b.n	80015c6 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a25      	ldr	r2, [pc, #148]	; (80015ec <HAL_ADC_Start_DMA+0x1ec>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d10e      	bne.n	8001578 <HAL_ADC_Start_DMA+0x178>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d107      	bne.n	8001578 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001576:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_ADC_Start_DMA+0x1e8>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b00      	cmp	r3, #0
 8001582:	d120      	bne.n	80015c6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <HAL_ADC_Start_DMA+0x1f0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d11b      	bne.n	80015c6 <HAL_ADC_Start_DMA+0x1c6>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d114      	bne.n	80015c6 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	e00b      	b.n	80015c6 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f043 0210 	orr.w	r2, r3, #16
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000000 	.word	0x20000000
 80015d4:	431bde83 	.word	0x431bde83
 80015d8:	fffff8fe 	.word	0xfffff8fe
 80015dc:	08001abd 	.word	0x08001abd
 80015e0:	08001b77 	.word	0x08001b77
 80015e4:	08001b93 	.word	0x08001b93
 80015e8:	40012300 	.word	0x40012300
 80015ec:	40012000 	.word	0x40012000
 80015f0:	40012200 	.word	0x40012200

080015f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x1c>
 8001634:	2302      	movs	r3, #2
 8001636:	e136      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x28a>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b09      	cmp	r3, #9
 8001646:	d93a      	bls.n	80016be <HAL_ADC_ConfigChannel+0xa2>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001650:	d035      	beq.n	80016be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68d9      	ldr	r1, [r3, #12]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	461a      	mov	r2, r3
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	3b1e      	subs	r3, #30
 8001668:	2207      	movs	r2, #7
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	400a      	ands	r2, r1
 8001676:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a8d      	ldr	r2, [pc, #564]	; (80018b4 <HAL_ADC_ConfigChannel+0x298>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10a      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68d9      	ldr	r1, [r3, #12]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	061a      	lsls	r2, r3, #24
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001696:	e035      	b.n	8001704 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68d9      	ldr	r1, [r3, #12]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4403      	add	r3, r0
 80016b0:	3b1e      	subs	r3, #30
 80016b2:	409a      	lsls	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016bc:	e022      	b.n	8001704 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6919      	ldr	r1, [r3, #16]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	2207      	movs	r2, #7
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43da      	mvns	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	400a      	ands	r2, r1
 80016e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6919      	ldr	r1, [r3, #16]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	4603      	mov	r3, r0
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4403      	add	r3, r0
 80016fa:	409a      	lsls	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b06      	cmp	r3, #6
 800170a:	d824      	bhi.n	8001756 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	3b05      	subs	r3, #5
 800171e:	221f      	movs	r2, #31
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43da      	mvns	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	400a      	ands	r2, r1
 800172c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4618      	mov	r0, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	3b05      	subs	r3, #5
 8001748:	fa00 f203 	lsl.w	r2, r0, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	635a      	str	r2, [r3, #52]	; 0x34
 8001754:	e04c      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b0c      	cmp	r3, #12
 800175c:	d824      	bhi.n	80017a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	3b23      	subs	r3, #35	; 0x23
 8001770:	221f      	movs	r2, #31
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	400a      	ands	r2, r1
 800177e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3b23      	subs	r3, #35	; 0x23
 800179a:	fa00 f203 	lsl.w	r2, r0, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	631a      	str	r2, [r3, #48]	; 0x30
 80017a6:	e023      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	3b41      	subs	r3, #65	; 0x41
 80017ba:	221f      	movs	r2, #31
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43da      	mvns	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	400a      	ands	r2, r1
 80017c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	3b41      	subs	r3, #65	; 0x41
 80017e4:	fa00 f203 	lsl.w	r2, r0, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <HAL_ADC_ConfigChannel+0x29c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10a      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1f4>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001802:	d105      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a2c      	ldr	r2, [pc, #176]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 800180a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800180e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a28      	ldr	r2, [pc, #160]	; (80018b8 <HAL_ADC_ConfigChannel+0x29c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d10f      	bne.n	800183a <HAL_ADC_ConfigChannel+0x21e>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b12      	cmp	r3, #18
 8001820:	d10b      	bne.n	800183a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001822:	4b26      	ldr	r3, [pc, #152]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4a25      	ldr	r2, [pc, #148]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001828:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800182c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a22      	ldr	r2, [pc, #136]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001838:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <HAL_ADC_ConfigChannel+0x29c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d12b      	bne.n	800189c <HAL_ADC_ConfigChannel+0x280>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <HAL_ADC_ConfigChannel+0x298>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d003      	beq.n	8001856 <HAL_ADC_ConfigChannel+0x23a>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b11      	cmp	r3, #17
 8001854:	d122      	bne.n	800189c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 800185c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001860:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a15      	ldr	r2, [pc, #84]	; (80018bc <HAL_ADC_ConfigChannel+0x2a0>)
 8001868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800186c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <HAL_ADC_ConfigChannel+0x298>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d111      	bne.n	800189c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_ADC_ConfigChannel+0x2a4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a11      	ldr	r2, [pc, #68]	; (80018c4 <HAL_ADC_ConfigChannel+0x2a8>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0c9a      	lsrs	r2, r3, #18
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800188e:	e002      	b.n	8001896 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3b01      	subs	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f9      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	10000012 	.word	0x10000012
 80018b8:	40012000 	.word	0x40012000
 80018bc:	40012300 	.word	0x40012300
 80018c0:	20000000 	.word	0x20000000
 80018c4:	431bde83 	.word	0x431bde83

080018c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80018d0:	4b78      	ldr	r3, [pc, #480]	; (8001ab4 <ADC_Init+0x1ec>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a77      	ldr	r2, [pc, #476]	; (8001ab4 <ADC_Init+0x1ec>)
 80018d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80018da:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80018dc:	4b75      	ldr	r3, [pc, #468]	; (8001ab4 <ADC_Init+0x1ec>)
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4973      	ldr	r1, [pc, #460]	; (8001ab4 <ADC_Init+0x1ec>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	021a      	lsls	r2, r3, #8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800191c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800193e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6899      	ldr	r1, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <ADC_Init+0x1f0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d022      	beq.n	80019a2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800196a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6899      	ldr	r1, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800198c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6899      	ldr	r1, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	e00f      	b.n	80019c2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0202 	bic.w	r2, r2, #2
 80019d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6899      	ldr	r1, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	005a      	lsls	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01b      	beq.n	8001a28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6859      	ldr	r1, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	035a      	lsls	r2, r3, #13
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	e007      	b.n	8001a38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	051a      	lsls	r2, r3, #20
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6899      	ldr	r1, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a7a:	025a      	lsls	r2, r3, #9
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6899      	ldr	r1, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	029a      	lsls	r2, r3, #10
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	609a      	str	r2, [r3, #8]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40012300 	.word	0x40012300
 8001ab8:	0f000001 	.word	0x0f000001

08001abc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d13c      	bne.n	8001b50 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d12b      	bne.n	8001b48 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d127      	bne.n	8001b48 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d119      	bne.n	8001b48 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0220 	bic.w	r2, r2, #32
 8001b22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d105      	bne.n	8001b48 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7fe ffb5 	bl	8000ab8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b4e:	e00e      	b.n	8001b6e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f7ff fd53 	bl	8001608 <HAL_ADC_ErrorCallback>
}
 8001b62:	e004      	b.n	8001b6e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	4798      	blx	r3
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7ff fd35 	bl	80015f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2240      	movs	r2, #64	; 0x40
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f043 0204 	orr.w	r2, r3, #4
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f7ff fd28 	bl	8001608 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <__NVIC_SetPriorityGrouping+0x40>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <__NVIC_SetPriorityGrouping+0x40>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00
 8001c04:	05fa0000 	.word	0x05fa0000

08001c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db0b      	blt.n	8001c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	4907      	ldr	r1, [pc, #28]	; (8001c5c <__NVIC_EnableIRQ+0x38>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2001      	movs	r0, #1
 8001c46:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e100 	.word	0xe000e100

08001c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	db0a      	blt.n	8001c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	490c      	ldr	r1, [pc, #48]	; (8001cac <__NVIC_SetPriority+0x4c>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	0112      	lsls	r2, r2, #4
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	440b      	add	r3, r1
 8001c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c88:	e00a      	b.n	8001ca0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4908      	ldr	r1, [pc, #32]	; (8001cb0 <__NVIC_SetPriority+0x50>)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	3b04      	subs	r3, #4
 8001c98:	0112      	lsls	r2, r2, #4
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	761a      	strb	r2, [r3, #24]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000e100 	.word	0xe000e100
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f1c3 0307 	rsb	r3, r3, #7
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	bf28      	it	cs
 8001cd2:	2304      	movcs	r3, #4
 8001cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d902      	bls.n	8001ce4 <NVIC_EncodePriority+0x30>
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3b03      	subs	r3, #3
 8001ce2:	e000      	b.n	8001ce6 <NVIC_EncodePriority+0x32>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	43d9      	mvns	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	4313      	orrs	r3, r2
         );
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3724      	adds	r7, #36	; 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d2c:	d301      	bcc.n	8001d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00f      	b.n	8001d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <SysTick_Config+0x40>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f7ff ff8e 	bl	8001c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <SysTick_Config+0x40>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <SysTick_Config+0x40>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000e010 	.word	0xe000e010

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff29 	bl	8001bc0 <__NVIC_SetPriorityGrouping>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff3e 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ff8e 	bl	8001cb4 <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff5d 	bl	8001c60 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff31 	bl	8001c24 <__NVIC_EnableIRQ>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ffa2 	bl	8001d1c <SysTick_Config>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff fa92 	bl	8001318 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e099      	b.n	8001f34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e20:	e00f      	b.n	8001e42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e22:	f7ff fa79 	bl	8001318 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d908      	bls.n	8001e42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e078      	b.n	8001f34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e8      	bne.n	8001e22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <HAL_DMA_Init+0x158>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d107      	bne.n	8001eac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f023 0307 	bic.w	r3, r3, #7
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d117      	bne.n	8001f06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00e      	beq.n	8001f06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fa77 	bl	80023dc <DMA_CheckFifoParam>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2240      	movs	r2, #64	; 0x40
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f02:	2301      	movs	r3, #1
 8001f04:	e016      	b.n	8001f34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fa2e 	bl	8002370 <DMA_CalcBaseAndBitshift>
 8001f14:	4603      	mov	r3, r0
 8001f16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1c:	223f      	movs	r2, #63	; 0x3f
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	e010803f 	.word	0xe010803f

08001f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_DMA_Start_IT+0x26>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e048      	b.n	8001ff8 <HAL_DMA_Start_IT+0xb8>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d137      	bne.n	8001fea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f9c0 	bl	8002314 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	223f      	movs	r2, #63	; 0x3f
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0216 	orr.w	r2, r2, #22
 8001fae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fbe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0208 	orr.w	r2, r2, #8
 8001fd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e005      	b.n	8001ff6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800200c:	4b8e      	ldr	r3, [pc, #568]	; (8002248 <HAL_DMA_IRQHandler+0x248>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a8e      	ldr	r2, [pc, #568]	; (800224c <HAL_DMA_IRQHandler+0x24c>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0a9b      	lsrs	r3, r3, #10
 8002018:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	2208      	movs	r2, #8
 800202c:	409a      	lsls	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01a      	beq.n	800206c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0204 	bic.w	r2, r2, #4
 8002052:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2208      	movs	r2, #8
 800205a:	409a      	lsls	r2, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	f043 0201 	orr.w	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2201      	movs	r2, #1
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d012      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2201      	movs	r2, #1
 8002090:	409a      	lsls	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	f043 0202 	orr.w	r2, r3, #2
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2204      	movs	r2, #4
 80020a8:	409a      	lsls	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d012      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00b      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	2204      	movs	r2, #4
 80020c6:	409a      	lsls	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f043 0204 	orr.w	r2, r3, #4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	2210      	movs	r2, #16
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d043      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d03c      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	2210      	movs	r2, #16
 80020fc:	409a      	lsls	r2, r3
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d018      	beq.n	8002142 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d108      	bne.n	8002130 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d024      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
 800212e:	e01f      	b.n	8002170 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01b      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
 8002140:	e016      	b.n	8002170 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0208 	bic.w	r2, r2, #8
 800215e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	2220      	movs	r2, #32
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 808f 	beq.w	80022a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8087 	beq.w	80022a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	2220      	movs	r2, #32
 8002198:	409a      	lsls	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d136      	bne.n	8002218 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0216 	bic.w	r2, r2, #22
 80021b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d103      	bne.n	80021da <HAL_DMA_IRQHandler+0x1da>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0208 	bic.w	r2, r2, #8
 80021e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	223f      	movs	r2, #63	; 0x3f
 80021f0:	409a      	lsls	r2, r3
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220a:	2b00      	cmp	r3, #0
 800220c:	d07e      	beq.n	800230c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	4798      	blx	r3
        }
        return;
 8002216:	e079      	b.n	800230c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01d      	beq.n	8002262 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10d      	bne.n	8002250 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	2b00      	cmp	r3, #0
 800223a:	d031      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
 8002244:	e02c      	b.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
 8002246:	bf00      	nop
 8002248:	20000000 	.word	0x20000000
 800224c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d023      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
 8002260:	e01e      	b.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10f      	bne.n	8002290 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0210 	bic.w	r2, r2, #16
 800227e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d032      	beq.n	800230e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d022      	beq.n	80022fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2205      	movs	r2, #5
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3301      	adds	r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d307      	bcc.n	80022e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f2      	bne.n	80022cc <HAL_DMA_IRQHandler+0x2cc>
 80022e6:	e000      	b.n	80022ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	4798      	blx	r3
 800230a:	e000      	b.n	800230e <HAL_DMA_IRQHandler+0x30e>
        return;
 800230c:	bf00      	nop
    }
  }
}
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002330:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b40      	cmp	r3, #64	; 0x40
 8002340:	d108      	bne.n	8002354 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002352:	e007      	b.n	8002364 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	60da      	str	r2, [r3, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	3b10      	subs	r3, #16
 8002380:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <DMA_CalcBaseAndBitshift+0x60>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <DMA_CalcBaseAndBitshift+0x64>)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d908      	bls.n	80023b0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <DMA_CalcBaseAndBitshift+0x68>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	1d1a      	adds	r2, r3, #4
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	659a      	str	r2, [r3, #88]	; 0x58
 80023ae:	e006      	b.n	80023be <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <DMA_CalcBaseAndBitshift+0x68>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	aaaaaaab 	.word	0xaaaaaaab
 80023d4:	080066ac 	.word	0x080066ac
 80023d8:	fffffc00 	.word	0xfffffc00

080023dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11f      	bne.n	8002436 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d856      	bhi.n	80024aa <DMA_CheckFifoParam+0xce>
 80023fc:	a201      	add	r2, pc, #4	; (adr r2, 8002404 <DMA_CheckFifoParam+0x28>)
 80023fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002402:	bf00      	nop
 8002404:	08002415 	.word	0x08002415
 8002408:	08002427 	.word	0x08002427
 800240c:	08002415 	.word	0x08002415
 8002410:	080024ab 	.word	0x080024ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d046      	beq.n	80024ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002424:	e043      	b.n	80024ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800242e:	d140      	bne.n	80024b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002434:	e03d      	b.n	80024b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243e:	d121      	bne.n	8002484 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b03      	cmp	r3, #3
 8002444:	d837      	bhi.n	80024b6 <DMA_CheckFifoParam+0xda>
 8002446:	a201      	add	r2, pc, #4	; (adr r2, 800244c <DMA_CheckFifoParam+0x70>)
 8002448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244c:	0800245d 	.word	0x0800245d
 8002450:	08002463 	.word	0x08002463
 8002454:	0800245d 	.word	0x0800245d
 8002458:	08002475 	.word	0x08002475
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
      break;
 8002460:	e030      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d025      	beq.n	80024ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002472:	e022      	b.n	80024ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800247c:	d11f      	bne.n	80024be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002482:	e01c      	b.n	80024be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d903      	bls.n	8002492 <DMA_CheckFifoParam+0xb6>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d003      	beq.n	8002498 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002490:	e018      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
      break;
 8002496:	e015      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00e      	beq.n	80024c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      break;
 80024a8:	e00b      	b.n	80024c2 <DMA_CheckFifoParam+0xe6>
      break;
 80024aa:	bf00      	nop
 80024ac:	e00a      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      break;
 80024ae:	bf00      	nop
 80024b0:	e008      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      break;
 80024b2:	bf00      	nop
 80024b4:	e006      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      break;
 80024b6:	bf00      	nop
 80024b8:	e004      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      break;
 80024ba:	bf00      	nop
 80024bc:	e002      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80024be:	bf00      	nop
 80024c0:	e000      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      break;
 80024c2:	bf00      	nop
    }
  } 
  
  return status; 
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop

080024d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e06a      	b.n	80025bc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d106      	bne.n	80024fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2223      	movs	r2, #35	; 0x23
 80024f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7fe fc7d 	bl	8000df8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <HAL_ETH_Init+0xf0>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4a30      	ldr	r2, [pc, #192]	; (80025c4 <HAL_ETH_Init+0xf0>)
 8002504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002508:	6453      	str	r3, [r2, #68]	; 0x44
 800250a:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <HAL_ETH_Init+0xf0>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002516:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_ETH_Init+0xf4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4a2b      	ldr	r2, [pc, #172]	; (80025c8 <HAL_ETH_Init+0xf4>)
 800251c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002520:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002522:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <HAL_ETH_Init+0xf4>)
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	4927      	ldr	r1, [pc, #156]	; (80025c8 <HAL_ETH_Init+0xf4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <HAL_ETH_Init+0xf4>)
 8002532:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800254a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800254c:	f7fe fee4 	bl	8001318 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002552:	e011      	b.n	8002578 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002554:	f7fe fee0 	bl	8001318 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002562:	d909      	bls.n	8002578 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2204      	movs	r2, #4
 8002568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	22e0      	movs	r2, #224	; 0xe0
 8002570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e021      	b.n	80025bc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1e4      	bne.n	8002554 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f958 	bl	8002840 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f9ff 	bl	8002994 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa55 	bl	8002a46 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	461a      	mov	r2, r3
 80025a2:	2100      	movs	r1, #0
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f9bd 	bl	8002924 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2210      	movs	r2, #16
 80025b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40013800 	.word	0x40013800

080025cc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4b51      	ldr	r3, [pc, #324]	; (8002728 <ETH_SetMACConfig+0x15c>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	7c1b      	ldrb	r3, [r3, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <ETH_SetMACConfig+0x28>
 80025ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025f2:	e000      	b.n	80025f6 <ETH_SetMACConfig+0x2a>
 80025f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	7c5b      	ldrb	r3, [r3, #17]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <ETH_SetMACConfig+0x38>
 80025fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002602:	e000      	b.n	8002606 <ETH_SetMACConfig+0x3a>
 8002604:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002606:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800260c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	7fdb      	ldrb	r3, [r3, #31]
 8002612:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002614:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800261a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	7f92      	ldrb	r2, [r2, #30]
 8002620:	2a00      	cmp	r2, #0
 8002622:	d102      	bne.n	800262a <ETH_SetMACConfig+0x5e>
 8002624:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002628:	e000      	b.n	800262c <ETH_SetMACConfig+0x60>
 800262a:	2200      	movs	r2, #0
                        macconf->Speed |
 800262c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	7f1b      	ldrb	r3, [r3, #28]
 8002632:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002634:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800263a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	791b      	ldrb	r3, [r3, #4]
 8002640:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002642:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	f892 2020 	ldrb.w	r2, [r2, #32]
 800264a:	2a00      	cmp	r2, #0
 800264c:	d102      	bne.n	8002654 <ETH_SetMACConfig+0x88>
 800264e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002652:	e000      	b.n	8002656 <ETH_SetMACConfig+0x8a>
 8002654:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002656:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	7bdb      	ldrb	r3, [r3, #15]
 800265c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800265e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002664:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800266c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800266e:	4313      	orrs	r3, r2
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002686:	2001      	movs	r0, #1
 8002688:	f7fe fe52 	bl	8001330 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	f64f 7341 	movw	r3, #65345	; 0xff41
 80026a2:	4013      	ands	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80026b2:	2a00      	cmp	r2, #0
 80026b4:	d101      	bne.n	80026ba <ETH_SetMACConfig+0xee>
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	e000      	b.n	80026bc <ETH_SetMACConfig+0xf0>
 80026ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80026ca:	2a01      	cmp	r2, #1
 80026cc:	d101      	bne.n	80026d2 <ETH_SetMACConfig+0x106>
 80026ce:	2208      	movs	r2, #8
 80026d0:	e000      	b.n	80026d4 <ETH_SetMACConfig+0x108>
 80026d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80026d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80026dc:	2a01      	cmp	r2, #1
 80026de:	d101      	bne.n	80026e4 <ETH_SetMACConfig+0x118>
 80026e0:	2204      	movs	r2, #4
 80026e2:	e000      	b.n	80026e6 <ETH_SetMACConfig+0x11a>
 80026e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80026ee:	2a01      	cmp	r2, #1
 80026f0:	d101      	bne.n	80026f6 <ETH_SetMACConfig+0x12a>
 80026f2:	2202      	movs	r2, #2
 80026f4:	e000      	b.n	80026f8 <ETH_SetMACConfig+0x12c>
 80026f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026f8:	4313      	orrs	r3, r2
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002710:	2001      	movs	r0, #1
 8002712:	f7fe fe0d 	bl	8001330 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	619a      	str	r2, [r3, #24]
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	ff20810f 	.word	0xff20810f

0800272c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4b3d      	ldr	r3, [pc, #244]	; (800283c <ETH_SetDMAConfig+0x110>)
 8002746:	4013      	ands	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	7b1b      	ldrb	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <ETH_SetDMAConfig+0x2c>
 8002752:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002756:	e000      	b.n	800275a <ETH_SetDMAConfig+0x2e>
 8002758:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	7b5b      	ldrb	r3, [r3, #13]
 800275e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002760:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	7f52      	ldrb	r2, [r2, #29]
 8002766:	2a00      	cmp	r2, #0
 8002768:	d102      	bne.n	8002770 <ETH_SetDMAConfig+0x44>
 800276a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800276e:	e000      	b.n	8002772 <ETH_SetDMAConfig+0x46>
 8002770:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002772:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	7b9b      	ldrb	r3, [r3, #14]
 8002778:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800277a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002780:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	7f1b      	ldrb	r3, [r3, #28]
 8002786:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002788:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	7f9b      	ldrb	r3, [r3, #30]
 800278e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002790:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002796:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800279e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027a0:	4313      	orrs	r3, r2
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b0:	461a      	mov	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027c2:	2001      	movs	r0, #1
 80027c4:	f7fe fdb4 	bl	8001330 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d0:	461a      	mov	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	791b      	ldrb	r3, [r3, #4]
 80027da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80027e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002804:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800280e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002812:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002820:	2001      	movs	r0, #1
 8002822:	f7fe fd85 	bl	8001330 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6013      	str	r3, [r2, #0]
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	f8de3f23 	.word	0xf8de3f23

08002840 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b0a6      	sub	sp, #152	; 0x98
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002854:	2300      	movs	r3, #0
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002870:	2300      	movs	r3, #0
 8002872:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002876:	2300      	movs	r3, #0
 8002878:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800287c:	2300      	movs	r3, #0
 800287e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002886:	2300      	movs	r3, #0
 8002888:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028a6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff fe86 	bl	80025cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80028c4:	2301      	movs	r3, #1
 80028c6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80028e2:	2300      	movs	r3, #0
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028ec:	2301      	movs	r3, #1
 80028ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028f4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002900:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002902:	2301      	movs	r3, #1
 8002904:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002908:	2300      	movs	r3, #0
 800290a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ff08 	bl	800272c <ETH_SetDMAConfig>
}
 800291c:	bf00      	nop
 800291e:	3798      	adds	r7, #152	; 0x98
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3305      	adds	r3, #5
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	3204      	adds	r2, #4
 800293c:	7812      	ldrb	r2, [r2, #0]
 800293e:	4313      	orrs	r3, r2
 8002940:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <ETH_MACAddressConfig+0x68>)
 8002946:	4413      	add	r3, r2
 8002948:	461a      	mov	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3303      	adds	r3, #3
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	061a      	lsls	r2, r3, #24
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3302      	adds	r3, #2
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3301      	adds	r3, #1
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	4313      	orrs	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <ETH_MACAddressConfig+0x6c>)
 8002976:	4413      	add	r3, r2
 8002978:	461a      	mov	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	6013      	str	r3, [r2, #0]
}
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40028040 	.word	0x40028040
 8002990:	40028044 	.word	0x40028044

08002994 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e03e      	b.n	8002a20 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68d9      	ldr	r1, [r3, #12]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2200      	movs	r2, #0
 80029be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2200      	movs	r2, #0
 80029ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	3206      	adds	r2, #6
 80029d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d80c      	bhi.n	8002a04 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68d9      	ldr	r1, [r3, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	440b      	add	r3, r1
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	e004      	b.n	8002a0e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d9bd      	bls.n	80029a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a38:	611a      	str	r2, [r3, #16]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	e046      	b.n	8002ae2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6919      	ldr	r1, [r3, #16]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2200      	movs	r2, #0
 8002a82:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2200      	movs	r2, #0
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a90:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002a98:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	3212      	adds	r2, #18
 8002aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d80c      	bhi.n	8002ad2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6919      	ldr	r1, [r3, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	440b      	add	r3, r1
 8002aca:	461a      	mov	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	e004      	b.n	8002adc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d9b5      	bls.n	8002a54 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b12:	60da      	str	r2, [r3, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e175      	b.n	8002e2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	f040 8164 	bne.w	8002e26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d005      	beq.n	8002b76 <HAL_GPIO_Init+0x56>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d130      	bne.n	8002bd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bac:	2201      	movs	r2, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 0201 	and.w	r2, r3, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d017      	beq.n	8002c14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d123      	bne.n	8002c68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	08da      	lsrs	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3208      	adds	r2, #8
 8002c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	220f      	movs	r2, #15
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	08da      	lsrs	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3208      	adds	r2, #8
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0203 	and.w	r2, r3, #3
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80be 	beq.w	8002e26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002caa:	4b66      	ldr	r3, [pc, #408]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	4a65      	ldr	r2, [pc, #404]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cc2:	4a61      	ldr	r2, [pc, #388]	; (8002e48 <HAL_GPIO_Init+0x328>)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_GPIO_Init+0x32c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d037      	beq.n	8002d5e <HAL_GPIO_Init+0x23e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a57      	ldr	r2, [pc, #348]	; (8002e50 <HAL_GPIO_Init+0x330>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d031      	beq.n	8002d5a <HAL_GPIO_Init+0x23a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a56      	ldr	r2, [pc, #344]	; (8002e54 <HAL_GPIO_Init+0x334>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02b      	beq.n	8002d56 <HAL_GPIO_Init+0x236>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a55      	ldr	r2, [pc, #340]	; (8002e58 <HAL_GPIO_Init+0x338>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d025      	beq.n	8002d52 <HAL_GPIO_Init+0x232>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a54      	ldr	r2, [pc, #336]	; (8002e5c <HAL_GPIO_Init+0x33c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01f      	beq.n	8002d4e <HAL_GPIO_Init+0x22e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a53      	ldr	r2, [pc, #332]	; (8002e60 <HAL_GPIO_Init+0x340>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d019      	beq.n	8002d4a <HAL_GPIO_Init+0x22a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_GPIO_Init+0x344>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0x226>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a51      	ldr	r2, [pc, #324]	; (8002e68 <HAL_GPIO_Init+0x348>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00d      	beq.n	8002d42 <HAL_GPIO_Init+0x222>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a50      	ldr	r2, [pc, #320]	; (8002e6c <HAL_GPIO_Init+0x34c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_GPIO_Init+0x21e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4f      	ldr	r2, [pc, #316]	; (8002e70 <HAL_GPIO_Init+0x350>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_GPIO_Init+0x21a>
 8002d36:	2309      	movs	r3, #9
 8002d38:	e012      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	e010      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	e00e      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d42:	2307      	movs	r3, #7
 8002d44:	e00c      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d46:	2306      	movs	r3, #6
 8002d48:	e00a      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	e008      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d4e:	2304      	movs	r3, #4
 8002d50:	e006      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d52:	2303      	movs	r3, #3
 8002d54:	e004      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e002      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	f002 0203 	and.w	r2, r2, #3
 8002d66:	0092      	lsls	r2, r2, #2
 8002d68:	4093      	lsls	r3, r2
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d70:	4935      	ldr	r1, [pc, #212]	; (8002e48 <HAL_GPIO_Init+0x328>)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	3302      	adds	r3, #2
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7e:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002da2:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da8:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dcc:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd2:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b0f      	cmp	r3, #15
 8002e30:	f67f ae86 	bls.w	8002b40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3724      	adds	r7, #36	; 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40013800 	.word	0x40013800
 8002e4c:	40020000 	.word	0x40020000
 8002e50:	40020400 	.word	0x40020400
 8002e54:	40020800 	.word	0x40020800
 8002e58:	40020c00 	.word	0x40020c00
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40021400 	.word	0x40021400
 8002e64:	40021800 	.word	0x40021800
 8002e68:	40021c00 	.word	0x40021c00
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	40022400 	.word	0x40022400
 8002e74:	40013c00 	.word	0x40013c00

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e94:	e003      	b.n	8002e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ebc:	887a      	ldrh	r2, [r7, #2]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	041a      	lsls	r2, r3, #16
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	887b      	ldrh	r3, [r7, #2]
 8002eca:	400b      	ands	r3, r1
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	619a      	str	r2, [r3, #24]
}
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ef6:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fdbe 	bl	8000a80 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40013c00 	.word	0x40013c00

08002f10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f12:	b08f      	sub	sp, #60	; 0x3c
 8002f14:	af0a      	add	r7, sp, #40	; 0x28
 8002f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e116      	b.n	8003150 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d106      	bne.n	8002f42 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7fe f873 	bl	8001028 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2203      	movs	r2, #3
 8002f46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f002 f881 	bl	8005068 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	687e      	ldr	r6, [r7, #4]
 8002f6e:	466d      	mov	r5, sp
 8002f70:	f106 0410 	add.w	r4, r6, #16
 8002f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f80:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f84:	1d33      	adds	r3, r6, #4
 8002f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f88:	6838      	ldr	r0, [r7, #0]
 8002f8a:	f002 f815 	bl	8004fb8 <USB_CoreInit>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0d7      	b.n	8003150 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 f86f 	bl	800508a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e04a      	b.n	8003048 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	333d      	adds	r3, #61	; 0x3d
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	333c      	adds	r3, #60	; 0x3c
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	b298      	uxth	r0, r3
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	3344      	adds	r3, #68	; 0x44
 8002fee:	4602      	mov	r2, r0
 8002ff0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3340      	adds	r3, #64	; 0x40
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3348      	adds	r3, #72	; 0x48
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	334c      	adds	r3, #76	; 0x4c
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	3354      	adds	r3, #84	; 0x54
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	3301      	adds	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	429a      	cmp	r2, r3
 8003050:	d3af      	bcc.n	8002fb2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003052:	2300      	movs	r3, #0
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	e044      	b.n	80030e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800306a:	2200      	movs	r2, #0
 800306c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800306e:	7bfa      	ldrb	r2, [r7, #15]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030b0:	7bfa      	ldrb	r2, [r7, #15]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	3301      	adds	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d3b5      	bcc.n	8003058 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	687e      	ldr	r6, [r7, #4]
 80030f4:	466d      	mov	r5, sp
 80030f6:	f106 0410 	add.w	r4, r6, #16
 80030fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003102:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003106:	e885 0003 	stmia.w	r5, {r0, r1}
 800310a:	1d33      	adds	r3, r6, #4
 800310c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800310e:	6838      	ldr	r0, [r7, #0]
 8003110:	f002 f808 	bl	8005124 <USB_DevInit>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e014      	b.n	8003150 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b01      	cmp	r3, #1
 800313c:	d102      	bne.n	8003144 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f80a 	bl	8003158 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f002 f9c6 	bl	80054da <USB_DevDisconnect>

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003158 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_PCDEx_ActivateLPM+0x44>)
 8003188:	4313      	orrs	r3, r2
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	10000003 	.word	0x10000003

080031a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a04      	ldr	r2, [pc, #16]	; (80031bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40007000 	.word	0x40007000

080031c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031ca:	4b23      	ldr	r3, [pc, #140]	; (8003258 <HAL_PWREx_EnableOverDrive+0x98>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	4a22      	ldr	r2, [pc, #136]	; (8003258 <HAL_PWREx_EnableOverDrive+0x98>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6413      	str	r3, [r2, #64]	; 0x40
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_PWREx_EnableOverDrive+0x98>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031e2:	4b1e      	ldr	r3, [pc, #120]	; (800325c <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1d      	ldr	r2, [pc, #116]	; (800325c <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ee:	f7fe f893 	bl	8001318 <HAL_GetTick>
 80031f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031f4:	e009      	b.n	800320a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031f6:	f7fe f88f 	bl	8001318 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003204:	d901      	bls.n	800320a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e022      	b.n	8003250 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800320a:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_PWREx_EnableOverDrive+0x9c>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003216:	d1ee      	bne.n	80031f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003218:	4b10      	ldr	r3, [pc, #64]	; (800325c <HAL_PWREx_EnableOverDrive+0x9c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a0f      	ldr	r2, [pc, #60]	; (800325c <HAL_PWREx_EnableOverDrive+0x9c>)
 800321e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003222:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003224:	f7fe f878 	bl	8001318 <HAL_GetTick>
 8003228:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800322a:	e009      	b.n	8003240 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800322c:	f7fe f874 	bl	8001318 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800323a:	d901      	bls.n	8003240 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e007      	b.n	8003250 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800324c:	d1ee      	bne.n	800322c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40023800 	.word	0x40023800
 800325c:	40007000 	.word	0x40007000

08003260 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003268:	2300      	movs	r3, #0
 800326a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e29b      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8087 	beq.w	8003392 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003284:	4b96      	ldr	r3, [pc, #600]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b04      	cmp	r3, #4
 800328e:	d00c      	beq.n	80032aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003290:	4b93      	ldr	r3, [pc, #588]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d112      	bne.n	80032c2 <HAL_RCC_OscConfig+0x62>
 800329c:	4b90      	ldr	r3, [pc, #576]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a8:	d10b      	bne.n	80032c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032aa:	4b8d      	ldr	r3, [pc, #564]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d06c      	beq.n	8003390 <HAL_RCC_OscConfig+0x130>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d168      	bne.n	8003390 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e275      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x7a>
 80032cc:	4b84      	ldr	r3, [pc, #528]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a83      	ldr	r2, [pc, #524]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80032d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	e02e      	b.n	8003338 <HAL_RCC_OscConfig+0xd8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x9c>
 80032e2:	4b7f      	ldr	r3, [pc, #508]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a7e      	ldr	r2, [pc, #504]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80032e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b7c      	ldr	r3, [pc, #496]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7b      	ldr	r2, [pc, #492]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80032f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e01d      	b.n	8003338 <HAL_RCC_OscConfig+0xd8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0xc0>
 8003306:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a75      	ldr	r2, [pc, #468]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 800330c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b73      	ldr	r3, [pc, #460]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a72      	ldr	r2, [pc, #456]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e00b      	b.n	8003338 <HAL_RCC_OscConfig+0xd8>
 8003320:	4b6f      	ldr	r3, [pc, #444]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a6e      	ldr	r2, [pc, #440]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b6c      	ldr	r3, [pc, #432]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a6b      	ldr	r2, [pc, #428]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fd ffea 	bl	8001318 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003348:	f7fd ffe6 	bl	8001318 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e229      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	4b61      	ldr	r3, [pc, #388]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0xe8>
 8003366:	e014      	b.n	8003392 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fd ffd6 	bl	8001318 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003370:	f7fd ffd2 	bl	8001318 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e215      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	4b57      	ldr	r3, [pc, #348]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x110>
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d069      	beq.n	8003472 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800339e:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033aa:	4b4d      	ldr	r3, [pc, #308]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d11c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x190>
 80033b6:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d116      	bne.n	80033f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_RCC_OscConfig+0x17a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e1e9      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033da:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	493d      	ldr	r1, [pc, #244]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	e040      	b.n	8003472 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d023      	beq.n	8003440 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f8:	4b39      	ldr	r3, [pc, #228]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a38      	ldr	r2, [pc, #224]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fd ff88 	bl	8001318 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340c:	f7fd ff84 	bl	8001318 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1c7      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341e:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342a:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4929      	ldr	r1, [pc, #164]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
 800343e:	e018      	b.n	8003472 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003440:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fd ff64 	bl	8001318 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003454:	f7fd ff60 	bl	8001318 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e1a3      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d038      	beq.n	80034f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d019      	beq.n	80034ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003486:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 8003488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348a:	4a15      	ldr	r2, [pc, #84]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003492:	f7fd ff41 	bl	8001318 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349a:	f7fd ff3d 	bl	8001318 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e180      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ac:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80034ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x23a>
 80034b8:	e01a      	b.n	80034f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80034bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034be:	4a08      	ldr	r2, [pc, #32]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fd ff27 	bl	8001318 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ce:	f7fd ff23 	bl	8001318 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d903      	bls.n	80034e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e166      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
 80034e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e4:	4b92      	ldr	r3, [pc, #584]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80034e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ee      	bne.n	80034ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80a4 	beq.w	8003646 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fe:	4b8c      	ldr	r3, [pc, #560]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10d      	bne.n	8003526 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	4b89      	ldr	r3, [pc, #548]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	4a88      	ldr	r2, [pc, #544]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003514:	6413      	str	r3, [r2, #64]	; 0x40
 8003516:	4b86      	ldr	r3, [pc, #536]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003526:	4b83      	ldr	r3, [pc, #524]	; (8003734 <HAL_RCC_OscConfig+0x4d4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d118      	bne.n	8003564 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003532:	4b80      	ldr	r3, [pc, #512]	; (8003734 <HAL_RCC_OscConfig+0x4d4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7f      	ldr	r2, [pc, #508]	; (8003734 <HAL_RCC_OscConfig+0x4d4>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353e:	f7fd feeb 	bl	8001318 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003546:	f7fd fee7 	bl	8001318 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b64      	cmp	r3, #100	; 0x64
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e12a      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003558:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x4d4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d106      	bne.n	800357a <HAL_RCC_OscConfig+0x31a>
 800356c:	4b70      	ldr	r3, [pc, #448]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003570:	4a6f      	ldr	r2, [pc, #444]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6713      	str	r3, [r2, #112]	; 0x70
 8003578:	e02d      	b.n	80035d6 <HAL_RCC_OscConfig+0x376>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0x33c>
 8003582:	4b6b      	ldr	r3, [pc, #428]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	4a6a      	ldr	r2, [pc, #424]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	6713      	str	r3, [r2, #112]	; 0x70
 800358e:	4b68      	ldr	r3, [pc, #416]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	4a67      	ldr	r2, [pc, #412]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 8003594:	f023 0304 	bic.w	r3, r3, #4
 8003598:	6713      	str	r3, [r2, #112]	; 0x70
 800359a:	e01c      	b.n	80035d6 <HAL_RCC_OscConfig+0x376>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b05      	cmp	r3, #5
 80035a2:	d10c      	bne.n	80035be <HAL_RCC_OscConfig+0x35e>
 80035a4:	4b62      	ldr	r3, [pc, #392]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	4a61      	ldr	r2, [pc, #388]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80035aa:	f043 0304 	orr.w	r3, r3, #4
 80035ae:	6713      	str	r3, [r2, #112]	; 0x70
 80035b0:	4b5f      	ldr	r3, [pc, #380]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	4a5e      	ldr	r2, [pc, #376]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6713      	str	r3, [r2, #112]	; 0x70
 80035bc:	e00b      	b.n	80035d6 <HAL_RCC_OscConfig+0x376>
 80035be:	4b5c      	ldr	r3, [pc, #368]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	4a5b      	ldr	r2, [pc, #364]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ca:	4b59      	ldr	r3, [pc, #356]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ce:	4a58      	ldr	r2, [pc, #352]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80035d0:	f023 0304 	bic.w	r3, r3, #4
 80035d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d015      	beq.n	800360a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fd fe9b 	bl	8001318 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e4:	e00a      	b.n	80035fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e6:	f7fd fe97 	bl	8001318 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e0d8      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fc:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ee      	beq.n	80035e6 <HAL_RCC_OscConfig+0x386>
 8003608:	e014      	b.n	8003634 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360a:	f7fd fe85 	bl	8001318 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003610:	e00a      	b.n	8003628 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003612:	f7fd fe81 	bl	8001318 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e0c2      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003628:	4b41      	ldr	r3, [pc, #260]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1ee      	bne.n	8003612 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363a:	4b3d      	ldr	r3, [pc, #244]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	4a3c      	ldr	r2, [pc, #240]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003644:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80ae 	beq.w	80037ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003650:	4b37      	ldr	r3, [pc, #220]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b08      	cmp	r3, #8
 800365a:	d06d      	beq.n	8003738 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d14b      	bne.n	80036fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003664:	4b32      	ldr	r3, [pc, #200]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a31      	ldr	r2, [pc, #196]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 800366a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800366e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fd fe52 	bl	8001318 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7fd fe4e 	bl	8001318 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e091      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69da      	ldr	r2, [r3, #28]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	019b      	lsls	r3, r3, #6
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	085b      	lsrs	r3, r3, #1
 80036ae:	3b01      	subs	r3, #1
 80036b0:	041b      	lsls	r3, r3, #16
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	061b      	lsls	r3, r3, #24
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	071b      	lsls	r3, r3, #28
 80036c2:	491b      	ldr	r1, [pc, #108]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c8:	4b19      	ldr	r3, [pc, #100]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a18      	ldr	r2, [pc, #96]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80036ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fd fe20 	bl	8001318 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fd fe1c 	bl	8001318 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e05f      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x47c>
 80036fa:	e057      	b.n	80037ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0b      	ldr	r2, [pc, #44]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 8003702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fd fe06 	bl	8001318 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7fd fe02 	bl	8001318 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e045      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_RCC_OscConfig+0x4d0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x4b0>
 800372e:	e03d      	b.n	80037ac <HAL_RCC_OscConfig+0x54c>
 8003730:	40023800 	.word	0x40023800
 8003734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003738:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <HAL_RCC_OscConfig+0x558>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d030      	beq.n	80037a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d129      	bne.n	80037a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d122      	bne.n	80037a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003768:	4013      	ands	r3, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800376e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003770:	4293      	cmp	r3, r2
 8003772:	d119      	bne.n	80037a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	3b01      	subs	r3, #1
 8003782:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d10f      	bne.n	80037a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800

080037bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0d0      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d4:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d910      	bls.n	8003804 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e2:	4b67      	ldr	r3, [pc, #412]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 020f 	bic.w	r2, r3, #15
 80037ea:	4965      	ldr	r1, [pc, #404]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b63      	ldr	r3, [pc, #396]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0b8      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d020      	beq.n	8003852 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800381c:	4b59      	ldr	r3, [pc, #356]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a58      	ldr	r2, [pc, #352]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003826:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003834:	4b53      	ldr	r3, [pc, #332]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4a52      	ldr	r2, [pc, #328]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800383a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800383e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003840:	4b50      	ldr	r3, [pc, #320]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	494d      	ldr	r1, [pc, #308]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d040      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b47      	ldr	r3, [pc, #284]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d115      	bne.n	800389e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e07f      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d107      	bne.n	800388e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387e:	4b41      	ldr	r3, [pc, #260]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e073      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388e:	4b3d      	ldr	r3, [pc, #244]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e06b      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389e:	4b39      	ldr	r3, [pc, #228]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f023 0203 	bic.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4936      	ldr	r1, [pc, #216]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b0:	f7fd fd32 	bl	8001318 <HAL_GetTick>
 80038b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b8:	f7fd fd2e 	bl	8001318 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e053      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 020c 	and.w	r2, r3, #12
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	429a      	cmp	r2, r3
 80038de:	d1eb      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038e0:	4b27      	ldr	r3, [pc, #156]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d210      	bcs.n	8003910 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b24      	ldr	r3, [pc, #144]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 020f 	bic.w	r2, r3, #15
 80038f6:	4922      	ldr	r1, [pc, #136]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e032      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4916      	ldr	r1, [pc, #88]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	490e      	ldr	r1, [pc, #56]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800394e:	f000 f821 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8003952:	4602      	mov	r2, r0
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	490a      	ldr	r1, [pc, #40]	; (8003988 <HAL_RCC_ClockConfig+0x1cc>)
 8003960:	5ccb      	ldrb	r3, [r1, r3]
 8003962:	fa22 f303 	lsr.w	r3, r2, r3
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1d0>)
 8003968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_ClockConfig+0x1d4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd fc8e 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023c00 	.word	0x40023c00
 8003984:	40023800 	.word	0x40023800
 8003988:	08006694 	.word	0x08006694
 800398c:	20000000 	.word	0x20000000
 8003990:	20000004 	.word	0x20000004

08003994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003998:	b094      	sub	sp, #80	; 0x50
 800399a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	647b      	str	r3, [r7, #68]	; 0x44
 80039a0:	2300      	movs	r3, #0
 80039a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a4:	2300      	movs	r3, #0
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ac:	4b79      	ldr	r3, [pc, #484]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 030c 	and.w	r3, r3, #12
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d00d      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x40>
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	f200 80e1 	bhi.w	8003b80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x34>
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d003      	beq.n	80039ce <HAL_RCC_GetSysClockFreq+0x3a>
 80039c6:	e0db      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c8:	4b73      	ldr	r3, [pc, #460]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039cc:	e0db      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ce:	4b73      	ldr	r3, [pc, #460]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x208>)
 80039d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039d2:	e0d8      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d4:	4b6f      	ldr	r3, [pc, #444]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039dc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039de:	4b6d      	ldr	r3, [pc, #436]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d063      	beq.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ea:	4b6a      	ldr	r3, [pc, #424]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	099b      	lsrs	r3, r3, #6
 80039f0:	2200      	movs	r2, #0
 80039f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80039f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fc:	633b      	str	r3, [r7, #48]	; 0x30
 80039fe:	2300      	movs	r3, #0
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
 8003a02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a06:	4622      	mov	r2, r4
 8003a08:	462b      	mov	r3, r5
 8003a0a:	f04f 0000 	mov.w	r0, #0
 8003a0e:	f04f 0100 	mov.w	r1, #0
 8003a12:	0159      	lsls	r1, r3, #5
 8003a14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a18:	0150      	lsls	r0, r2, #5
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4621      	mov	r1, r4
 8003a20:	1a51      	subs	r1, r2, r1
 8003a22:	6139      	str	r1, [r7, #16]
 8003a24:	4629      	mov	r1, r5
 8003a26:	eb63 0301 	sbc.w	r3, r3, r1
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a38:	4659      	mov	r1, fp
 8003a3a:	018b      	lsls	r3, r1, #6
 8003a3c:	4651      	mov	r1, sl
 8003a3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a42:	4651      	mov	r1, sl
 8003a44:	018a      	lsls	r2, r1, #6
 8003a46:	4651      	mov	r1, sl
 8003a48:	ebb2 0801 	subs.w	r8, r2, r1
 8003a4c:	4659      	mov	r1, fp
 8003a4e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a66:	4690      	mov	r8, r2
 8003a68:	4699      	mov	r9, r3
 8003a6a:	4623      	mov	r3, r4
 8003a6c:	eb18 0303 	adds.w	r3, r8, r3
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	462b      	mov	r3, r5
 8003a74:	eb49 0303 	adc.w	r3, r9, r3
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a86:	4629      	mov	r1, r5
 8003a88:	024b      	lsls	r3, r1, #9
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a90:	4621      	mov	r1, r4
 8003a92:	024a      	lsls	r2, r1, #9
 8003a94:	4610      	mov	r0, r2
 8003a96:	4619      	mov	r1, r3
 8003a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aa4:	f7fc fc1c 	bl	80002e0 <__aeabi_uldivmod>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4613      	mov	r3, r2
 8003aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab0:	e058      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab2:	4b38      	ldr	r3, [pc, #224]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	099b      	lsrs	r3, r3, #6
 8003ab8:	2200      	movs	r2, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	4611      	mov	r1, r2
 8003abe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003acc:	4642      	mov	r2, r8
 8003ace:	464b      	mov	r3, r9
 8003ad0:	f04f 0000 	mov.w	r0, #0
 8003ad4:	f04f 0100 	mov.w	r1, #0
 8003ad8:	0159      	lsls	r1, r3, #5
 8003ada:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ade:	0150      	lsls	r0, r2, #5
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aea:	4649      	mov	r1, r9
 8003aec:	eb63 0b01 	sbc.w	fp, r3, r1
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003afc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b04:	ebb2 040a 	subs.w	r4, r2, sl
 8003b08:	eb63 050b 	sbc.w	r5, r3, fp
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	00eb      	lsls	r3, r5, #3
 8003b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b1a:	00e2      	lsls	r2, r4, #3
 8003b1c:	4614      	mov	r4, r2
 8003b1e:	461d      	mov	r5, r3
 8003b20:	4643      	mov	r3, r8
 8003b22:	18e3      	adds	r3, r4, r3
 8003b24:	603b      	str	r3, [r7, #0]
 8003b26:	464b      	mov	r3, r9
 8003b28:	eb45 0303 	adc.w	r3, r5, r3
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	028b      	lsls	r3, r1, #10
 8003b3e:	4621      	mov	r1, r4
 8003b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b44:	4621      	mov	r1, r4
 8003b46:	028a      	lsls	r2, r1, #10
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b4e:	2200      	movs	r2, #0
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	61fa      	str	r2, [r7, #28]
 8003b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b58:	f7fc fbc2 	bl	80002e0 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4613      	mov	r3, r2
 8003b62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	3301      	adds	r3, #1
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003b74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b7e:	e002      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3750      	adds	r7, #80	; 0x50
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	007a1200 	.word	0x007a1200

08003ba0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000000 	.word	0x20000000

08003bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bbc:	f7ff fff0 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	0a9b      	lsrs	r3, r3, #10
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	4903      	ldr	r1, [pc, #12]	; (8003bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bce:	5ccb      	ldrb	r3, [r1, r3]
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	080066a4 	.word	0x080066a4

08003be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be4:	f7ff ffdc 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	0b5b      	lsrs	r3, r3, #13
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4903      	ldr	r1, [pc, #12]	; (8003c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800
 8003c04:	080066a4 	.word	0x080066a4

08003c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d012      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c30:	4b69      	ldr	r3, [pc, #420]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a68      	ldr	r2, [pc, #416]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c3a:	6093      	str	r3, [r2, #8]
 8003c3c:	4b66      	ldr	r3, [pc, #408]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	4964      	ldr	r1, [pc, #400]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d017      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c62:	4b5d      	ldr	r3, [pc, #372]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	4959      	ldr	r1, [pc, #356]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c80:	d101      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d017      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c9e:	4b4e      	ldr	r3, [pc, #312]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	494a      	ldr	r1, [pc, #296]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 808b 	beq.w	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cec:	4b3a      	ldr	r3, [pc, #232]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	4a39      	ldr	r2, [pc, #228]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf8:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d04:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a34      	ldr	r2, [pc, #208]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d10:	f7fd fb02 	bl	8001318 <HAL_GetTick>
 8003d14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d18:	f7fd fafe 	bl	8001318 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e38f      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d2a:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d36:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d035      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d02e      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d54:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	4a1d      	ldr	r2, [pc, #116]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d6a:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	4a1a      	ldr	r2, [pc, #104]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d76:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d7c:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d114      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fd fac6 	bl	8001318 <HAL_GetTick>
 8003d8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d90:	f7fd fac2 	bl	8001318 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e351      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0ee      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dbe:	d111      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dce:	400b      	ands	r3, r1
 8003dd0:	4901      	ldr	r1, [pc, #4]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
 8003dd6:	e00b      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	0ffffcff 	.word	0x0ffffcff
 8003de4:	4bac      	ldr	r3, [pc, #688]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4aab      	ldr	r2, [pc, #684]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dee:	6093      	str	r3, [r2, #8]
 8003df0:	4ba9      	ldr	r3, [pc, #676]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfc:	49a6      	ldr	r1, [pc, #664]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d010      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e0e:	4ba2      	ldr	r3, [pc, #648]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e14:	4aa0      	ldr	r2, [pc, #640]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e1e:	4b9e      	ldr	r3, [pc, #632]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	499b      	ldr	r1, [pc, #620]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e3c:	4b96      	ldr	r3, [pc, #600]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e4a:	4993      	ldr	r1, [pc, #588]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e5e:	4b8e      	ldr	r3, [pc, #568]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6c:	498a      	ldr	r1, [pc, #552]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e80:	4b85      	ldr	r3, [pc, #532]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8e:	4982      	ldr	r1, [pc, #520]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ea2:	4b7d      	ldr	r3, [pc, #500]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4979      	ldr	r1, [pc, #484]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ec4:	4b74      	ldr	r3, [pc, #464]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f023 0203 	bic.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	4971      	ldr	r1, [pc, #452]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ee6:	4b6c      	ldr	r3, [pc, #432]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	f023 020c 	bic.w	r2, r3, #12
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef4:	4968      	ldr	r1, [pc, #416]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f08:	4b63      	ldr	r3, [pc, #396]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f16:	4960      	ldr	r1, [pc, #384]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f2a:	4b5b      	ldr	r3, [pc, #364]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f38:	4957      	ldr	r1, [pc, #348]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f4c:	4b52      	ldr	r3, [pc, #328]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	494f      	ldr	r1, [pc, #316]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f6e:	4b4a      	ldr	r3, [pc, #296]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7c:	4946      	ldr	r1, [pc, #280]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f90:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9e:	493e      	ldr	r1, [pc, #248]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fb2:	4b39      	ldr	r3, [pc, #228]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc0:	4935      	ldr	r1, [pc, #212]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fd4:	4b30      	ldr	r3, [pc, #192]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe2:	492d      	ldr	r1, [pc, #180]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d011      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004004:	4924      	ldr	r1, [pc, #144]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004014:	d101      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004016:	2301      	movs	r3, #1
 8004018:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004026:	2301      	movs	r3, #1
 8004028:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004036:	4b18      	ldr	r3, [pc, #96]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004044:	4914      	ldr	r1, [pc, #80]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00b      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004058:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004068:	490b      	ldr	r1, [pc, #44]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00f      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800408c:	4902      	ldr	r1, [pc, #8]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004094:	e002      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040a8:	4b8a      	ldr	r3, [pc, #552]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	4986      	ldr	r1, [pc, #536]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00b      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040cc:	4b81      	ldr	r3, [pc, #516]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040dc:	497d      	ldr	r1, [pc, #500]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d006      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80d6 	beq.w	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040f8:	4b76      	ldr	r3, [pc, #472]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a75      	ldr	r2, [pc, #468]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004104:	f7fd f908 	bl	8001318 <HAL_GetTick>
 8004108:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800410c:	f7fd f904 	bl	8001318 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e195      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800411e:	4b6d      	ldr	r3, [pc, #436]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d021      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413a:	2b00      	cmp	r3, #0
 800413c:	d11d      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800413e:	4b65      	ldr	r3, [pc, #404]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800414c:	4b61      	ldr	r3, [pc, #388]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004152:	0e1b      	lsrs	r3, r3, #24
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	019a      	lsls	r2, r3, #6
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	4958      	ldr	r1, [pc, #352]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800418e:	d00a      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004198:	2b00      	cmp	r3, #0
 800419a:	d02e      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a4:	d129      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041a6:	4b4b      	ldr	r3, [pc, #300]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ac:	0c1b      	lsrs	r3, r3, #16
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041b4:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ba:	0f1b      	lsrs	r3, r3, #28
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	019a      	lsls	r2, r3, #6
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	041b      	lsls	r3, r3, #16
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	061b      	lsls	r3, r3, #24
 80041d4:	431a      	orrs	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	071b      	lsls	r3, r3, #28
 80041da:	493e      	ldr	r1, [pc, #248]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041e2:	4b3c      	ldr	r3, [pc, #240]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e8:	f023 021f 	bic.w	r2, r3, #31
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	3b01      	subs	r3, #1
 80041f2:	4938      	ldr	r1, [pc, #224]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d01d      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004206:	4b33      	ldr	r3, [pc, #204]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420c:	0e1b      	lsrs	r3, r3, #24
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004214:	4b2f      	ldr	r3, [pc, #188]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800421a:	0f1b      	lsrs	r3, r3, #28
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	019a      	lsls	r2, r3, #6
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	041b      	lsls	r3, r3, #16
 800422e:	431a      	orrs	r2, r3
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	061b      	lsls	r3, r3, #24
 8004234:	431a      	orrs	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	071b      	lsls	r3, r3, #28
 800423a:	4926      	ldr	r1, [pc, #152]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d011      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	019a      	lsls	r2, r3, #6
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	041b      	lsls	r3, r3, #16
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	061b      	lsls	r3, r3, #24
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	071b      	lsls	r3, r3, #28
 800426a:	491a      	ldr	r1, [pc, #104]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004272:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800427c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427e:	f7fd f84b 	bl	8001318 <HAL_GetTick>
 8004282:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004286:	f7fd f847 	bl	8001318 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b64      	cmp	r3, #100	; 0x64
 8004292:	d901      	bls.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e0d8      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	f040 80ce 	bne.w	8004448 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a08      	ldr	r2, [pc, #32]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b8:	f7fd f82e 	bl	8001318 <HAL_GetTick>
 80042bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042be:	e00b      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042c0:	f7fd f82a 	bl	8001318 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	; 0x64
 80042cc:	d904      	bls.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e0bb      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042d8:	4b5e      	ldr	r3, [pc, #376]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042e4:	d0ec      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d009      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004302:	2b00      	cmp	r3, #0
 8004304:	d02e      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d12a      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800430e:	4b51      	ldr	r3, [pc, #324]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004314:	0c1b      	lsrs	r3, r3, #16
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800431c:	4b4d      	ldr	r3, [pc, #308]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	0f1b      	lsrs	r3, r3, #28
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	019a      	lsls	r2, r3, #6
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	431a      	orrs	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	071b      	lsls	r3, r3, #28
 8004342:	4944      	ldr	r1, [pc, #272]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800434a:	4b42      	ldr	r3, [pc, #264]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800434c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004350:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	3b01      	subs	r3, #1
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	493d      	ldr	r1, [pc, #244]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d022      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004378:	d11d      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800437a:	4b36      	ldr	r3, [pc, #216]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	0e1b      	lsrs	r3, r3, #24
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004388:	4b32      	ldr	r3, [pc, #200]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	0f1b      	lsrs	r3, r3, #28
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	019a      	lsls	r2, r3, #6
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	431a      	orrs	r2, r3
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	061b      	lsls	r3, r3, #24
 80043a8:	431a      	orrs	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	071b      	lsls	r3, r3, #28
 80043ae:	4929      	ldr	r1, [pc, #164]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d028      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043c2:	4b24      	ldr	r3, [pc, #144]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c8:	0e1b      	lsrs	r3, r3, #24
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043d0:	4b20      	ldr	r3, [pc, #128]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	0c1b      	lsrs	r3, r3, #16
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	019a      	lsls	r2, r3, #6
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	431a      	orrs	r2, r3
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	071b      	lsls	r3, r3, #28
 80043f6:	4917      	ldr	r1, [pc, #92]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4911      	ldr	r1, [pc, #68]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a0e      	ldr	r2, [pc, #56]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004420:	f7fc ff7a 	bl	8001318 <HAL_GetTick>
 8004424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004426:	e008      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004428:	f7fc ff76 	bl	8001318 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e007      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004446:	d1ef      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800

08004458 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e040      	b.n	80044ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fc fd74 	bl	8000f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2224      	movs	r2, #36	; 0x24
 8004484:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0201 	bic.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f974 	bl	8004784 <UART_SetConfig>
 800449c:	4603      	mov	r3, r0
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e022      	b.n	80044ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fbcc 	bl	8004c4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fc53 	bl	8004d90 <UART_CheckIdleState>
 80044ea:	4603      	mov	r3, r0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004508:	2b20      	cmp	r3, #32
 800450a:	d171      	bne.n	80045f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_UART_Transmit+0x24>
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e06a      	b.n	80045f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2221      	movs	r2, #33	; 0x21
 8004528:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800452a:	f7fc fef5 	bl	8001318 <HAL_GetTick>
 800452e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	88fa      	ldrh	r2, [r7, #6]
 8004534:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004548:	d108      	bne.n	800455c <HAL_UART_Transmit+0x68>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e003      	b.n	8004564 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004564:	e02c      	b.n	80045c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2200      	movs	r2, #0
 800456e:	2180      	movs	r1, #128	; 0x80
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fc5a 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e038      	b.n	80045f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004594:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	3302      	adds	r3, #2
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	e007      	b.n	80045ae <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	781a      	ldrb	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	3301      	adds	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1cc      	bne.n	8004566 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2200      	movs	r2, #0
 80045d4:	2140      	movs	r1, #64	; 0x40
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fc27 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e005      	b.n	80045f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e000      	b.n	80045f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
  }
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b08a      	sub	sp, #40	; 0x28
 80045fe:	af02      	add	r7, sp, #8
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004610:	2b20      	cmp	r3, #32
 8004612:	f040 80b1 	bne.w	8004778 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_UART_Receive+0x28>
 800461c:	88fb      	ldrh	r3, [r7, #6]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0a9      	b.n	800477a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2222      	movs	r2, #34	; 0x22
 8004632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800463c:	f7fc fe6c 	bl	8001318 <HAL_GetTick>
 8004640:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	88fa      	ldrh	r2, [r7, #6]
 8004646:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	88fa      	ldrh	r2, [r7, #6]
 800464e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465a:	d10e      	bne.n	800467a <HAL_UART_Receive+0x80>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <HAL_UART_Receive+0x76>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f240 12ff 	movw	r2, #511	; 0x1ff
 800466a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800466e:	e02d      	b.n	80046cc <HAL_UART_Receive+0xd2>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	22ff      	movs	r2, #255	; 0xff
 8004674:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004678:	e028      	b.n	80046cc <HAL_UART_Receive+0xd2>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <HAL_UART_Receive+0xa4>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <HAL_UART_Receive+0x9a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	22ff      	movs	r2, #255	; 0xff
 800468e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004692:	e01b      	b.n	80046cc <HAL_UART_Receive+0xd2>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	227f      	movs	r2, #127	; 0x7f
 8004698:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800469c:	e016      	b.n	80046cc <HAL_UART_Receive+0xd2>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046a6:	d10d      	bne.n	80046c4 <HAL_UART_Receive+0xca>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <HAL_UART_Receive+0xc0>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	227f      	movs	r2, #127	; 0x7f
 80046b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b8:	e008      	b.n	80046cc <HAL_UART_Receive+0xd2>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	223f      	movs	r2, #63	; 0x3f
 80046be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046c2:	e003      	b.n	80046cc <HAL_UART_Receive+0xd2>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d108      	bne.n	80046f0 <HAL_UART_Receive+0xf6>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d104      	bne.n	80046f0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e003      	b.n	80046f8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80046f8:	e032      	b.n	8004760 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	2120      	movs	r1, #32
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fb90 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e032      	b.n	800477a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10c      	bne.n	8004734 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	b29a      	uxth	r2, r3
 8004722:	8a7b      	ldrh	r3, [r7, #18]
 8004724:	4013      	ands	r3, r2
 8004726:	b29a      	uxth	r2, r3
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	3302      	adds	r3, #2
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	e00c      	b.n	800474e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	b2da      	uxtb	r2, r3
 800473c:	8a7b      	ldrh	r3, [r7, #18]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	4013      	ands	r3, r2
 8004742:	b2da      	uxtb	r2, r3
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	3301      	adds	r3, #1
 800474c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1c6      	bne.n	80046fa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	e000      	b.n	800477a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004778:	2302      	movs	r3, #2
  }
}
 800477a:	4618      	mov	r0, r3
 800477c:	3720      	adds	r7, #32
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4ba6      	ldr	r3, [pc, #664]	; (8004a48 <UART_SetConfig+0x2c4>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	6979      	ldr	r1, [r7, #20]
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a94      	ldr	r2, [pc, #592]	; (8004a4c <UART_SetConfig+0x2c8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d120      	bne.n	8004842 <UART_SetConfig+0xbe>
 8004800:	4b93      	ldr	r3, [pc, #588]	; (8004a50 <UART_SetConfig+0x2cc>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b03      	cmp	r3, #3
 800480c:	d816      	bhi.n	800483c <UART_SetConfig+0xb8>
 800480e:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <UART_SetConfig+0x90>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004825 	.word	0x08004825
 8004818:	08004831 	.word	0x08004831
 800481c:	0800482b 	.word	0x0800482b
 8004820:	08004837 	.word	0x08004837
 8004824:	2301      	movs	r3, #1
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e150      	b.n	8004acc <UART_SetConfig+0x348>
 800482a:	2302      	movs	r3, #2
 800482c:	77fb      	strb	r3, [r7, #31]
 800482e:	e14d      	b.n	8004acc <UART_SetConfig+0x348>
 8004830:	2304      	movs	r3, #4
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e14a      	b.n	8004acc <UART_SetConfig+0x348>
 8004836:	2308      	movs	r3, #8
 8004838:	77fb      	strb	r3, [r7, #31]
 800483a:	e147      	b.n	8004acc <UART_SetConfig+0x348>
 800483c:	2310      	movs	r3, #16
 800483e:	77fb      	strb	r3, [r7, #31]
 8004840:	e144      	b.n	8004acc <UART_SetConfig+0x348>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a83      	ldr	r2, [pc, #524]	; (8004a54 <UART_SetConfig+0x2d0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d132      	bne.n	80048b2 <UART_SetConfig+0x12e>
 800484c:	4b80      	ldr	r3, [pc, #512]	; (8004a50 <UART_SetConfig+0x2cc>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b0c      	cmp	r3, #12
 8004858:	d828      	bhi.n	80048ac <UART_SetConfig+0x128>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0xdc>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004895 	.word	0x08004895
 8004864:	080048ad 	.word	0x080048ad
 8004868:	080048ad 	.word	0x080048ad
 800486c:	080048ad 	.word	0x080048ad
 8004870:	080048a1 	.word	0x080048a1
 8004874:	080048ad 	.word	0x080048ad
 8004878:	080048ad 	.word	0x080048ad
 800487c:	080048ad 	.word	0x080048ad
 8004880:	0800489b 	.word	0x0800489b
 8004884:	080048ad 	.word	0x080048ad
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048ad 	.word	0x080048ad
 8004890:	080048a7 	.word	0x080048a7
 8004894:	2300      	movs	r3, #0
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e118      	b.n	8004acc <UART_SetConfig+0x348>
 800489a:	2302      	movs	r3, #2
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e115      	b.n	8004acc <UART_SetConfig+0x348>
 80048a0:	2304      	movs	r3, #4
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e112      	b.n	8004acc <UART_SetConfig+0x348>
 80048a6:	2308      	movs	r3, #8
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e10f      	b.n	8004acc <UART_SetConfig+0x348>
 80048ac:	2310      	movs	r3, #16
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e10c      	b.n	8004acc <UART_SetConfig+0x348>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a68      	ldr	r2, [pc, #416]	; (8004a58 <UART_SetConfig+0x2d4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d120      	bne.n	80048fe <UART_SetConfig+0x17a>
 80048bc:	4b64      	ldr	r3, [pc, #400]	; (8004a50 <UART_SetConfig+0x2cc>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048c6:	2b30      	cmp	r3, #48	; 0x30
 80048c8:	d013      	beq.n	80048f2 <UART_SetConfig+0x16e>
 80048ca:	2b30      	cmp	r3, #48	; 0x30
 80048cc:	d814      	bhi.n	80048f8 <UART_SetConfig+0x174>
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d009      	beq.n	80048e6 <UART_SetConfig+0x162>
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d810      	bhi.n	80048f8 <UART_SetConfig+0x174>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <UART_SetConfig+0x15c>
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d006      	beq.n	80048ec <UART_SetConfig+0x168>
 80048de:	e00b      	b.n	80048f8 <UART_SetConfig+0x174>
 80048e0:	2300      	movs	r3, #0
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e0f2      	b.n	8004acc <UART_SetConfig+0x348>
 80048e6:	2302      	movs	r3, #2
 80048e8:	77fb      	strb	r3, [r7, #31]
 80048ea:	e0ef      	b.n	8004acc <UART_SetConfig+0x348>
 80048ec:	2304      	movs	r3, #4
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e0ec      	b.n	8004acc <UART_SetConfig+0x348>
 80048f2:	2308      	movs	r3, #8
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e0e9      	b.n	8004acc <UART_SetConfig+0x348>
 80048f8:	2310      	movs	r3, #16
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e0e6      	b.n	8004acc <UART_SetConfig+0x348>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a56      	ldr	r2, [pc, #344]	; (8004a5c <UART_SetConfig+0x2d8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d120      	bne.n	800494a <UART_SetConfig+0x1c6>
 8004908:	4b51      	ldr	r3, [pc, #324]	; (8004a50 <UART_SetConfig+0x2cc>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004912:	2bc0      	cmp	r3, #192	; 0xc0
 8004914:	d013      	beq.n	800493e <UART_SetConfig+0x1ba>
 8004916:	2bc0      	cmp	r3, #192	; 0xc0
 8004918:	d814      	bhi.n	8004944 <UART_SetConfig+0x1c0>
 800491a:	2b80      	cmp	r3, #128	; 0x80
 800491c:	d009      	beq.n	8004932 <UART_SetConfig+0x1ae>
 800491e:	2b80      	cmp	r3, #128	; 0x80
 8004920:	d810      	bhi.n	8004944 <UART_SetConfig+0x1c0>
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <UART_SetConfig+0x1a8>
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d006      	beq.n	8004938 <UART_SetConfig+0x1b4>
 800492a:	e00b      	b.n	8004944 <UART_SetConfig+0x1c0>
 800492c:	2300      	movs	r3, #0
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e0cc      	b.n	8004acc <UART_SetConfig+0x348>
 8004932:	2302      	movs	r3, #2
 8004934:	77fb      	strb	r3, [r7, #31]
 8004936:	e0c9      	b.n	8004acc <UART_SetConfig+0x348>
 8004938:	2304      	movs	r3, #4
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e0c6      	b.n	8004acc <UART_SetConfig+0x348>
 800493e:	2308      	movs	r3, #8
 8004940:	77fb      	strb	r3, [r7, #31]
 8004942:	e0c3      	b.n	8004acc <UART_SetConfig+0x348>
 8004944:	2310      	movs	r3, #16
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e0c0      	b.n	8004acc <UART_SetConfig+0x348>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a44      	ldr	r2, [pc, #272]	; (8004a60 <UART_SetConfig+0x2dc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d125      	bne.n	80049a0 <UART_SetConfig+0x21c>
 8004954:	4b3e      	ldr	r3, [pc, #248]	; (8004a50 <UART_SetConfig+0x2cc>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004962:	d017      	beq.n	8004994 <UART_SetConfig+0x210>
 8004964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004968:	d817      	bhi.n	800499a <UART_SetConfig+0x216>
 800496a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800496e:	d00b      	beq.n	8004988 <UART_SetConfig+0x204>
 8004970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004974:	d811      	bhi.n	800499a <UART_SetConfig+0x216>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <UART_SetConfig+0x1fe>
 800497a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497e:	d006      	beq.n	800498e <UART_SetConfig+0x20a>
 8004980:	e00b      	b.n	800499a <UART_SetConfig+0x216>
 8004982:	2300      	movs	r3, #0
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e0a1      	b.n	8004acc <UART_SetConfig+0x348>
 8004988:	2302      	movs	r3, #2
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e09e      	b.n	8004acc <UART_SetConfig+0x348>
 800498e:	2304      	movs	r3, #4
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e09b      	b.n	8004acc <UART_SetConfig+0x348>
 8004994:	2308      	movs	r3, #8
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	e098      	b.n	8004acc <UART_SetConfig+0x348>
 800499a:	2310      	movs	r3, #16
 800499c:	77fb      	strb	r3, [r7, #31]
 800499e:	e095      	b.n	8004acc <UART_SetConfig+0x348>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a2f      	ldr	r2, [pc, #188]	; (8004a64 <UART_SetConfig+0x2e0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d125      	bne.n	80049f6 <UART_SetConfig+0x272>
 80049aa:	4b29      	ldr	r3, [pc, #164]	; (8004a50 <UART_SetConfig+0x2cc>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049b8:	d017      	beq.n	80049ea <UART_SetConfig+0x266>
 80049ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049be:	d817      	bhi.n	80049f0 <UART_SetConfig+0x26c>
 80049c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c4:	d00b      	beq.n	80049de <UART_SetConfig+0x25a>
 80049c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ca:	d811      	bhi.n	80049f0 <UART_SetConfig+0x26c>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <UART_SetConfig+0x254>
 80049d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d4:	d006      	beq.n	80049e4 <UART_SetConfig+0x260>
 80049d6:	e00b      	b.n	80049f0 <UART_SetConfig+0x26c>
 80049d8:	2301      	movs	r3, #1
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e076      	b.n	8004acc <UART_SetConfig+0x348>
 80049de:	2302      	movs	r3, #2
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	e073      	b.n	8004acc <UART_SetConfig+0x348>
 80049e4:	2304      	movs	r3, #4
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e070      	b.n	8004acc <UART_SetConfig+0x348>
 80049ea:	2308      	movs	r3, #8
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e06d      	b.n	8004acc <UART_SetConfig+0x348>
 80049f0:	2310      	movs	r3, #16
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e06a      	b.n	8004acc <UART_SetConfig+0x348>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1b      	ldr	r2, [pc, #108]	; (8004a68 <UART_SetConfig+0x2e4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d138      	bne.n	8004a72 <UART_SetConfig+0x2ee>
 8004a00:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <UART_SetConfig+0x2cc>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a0e:	d017      	beq.n	8004a40 <UART_SetConfig+0x2bc>
 8004a10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a14:	d82a      	bhi.n	8004a6c <UART_SetConfig+0x2e8>
 8004a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1a:	d00b      	beq.n	8004a34 <UART_SetConfig+0x2b0>
 8004a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a20:	d824      	bhi.n	8004a6c <UART_SetConfig+0x2e8>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <UART_SetConfig+0x2aa>
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2a:	d006      	beq.n	8004a3a <UART_SetConfig+0x2b6>
 8004a2c:	e01e      	b.n	8004a6c <UART_SetConfig+0x2e8>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e04b      	b.n	8004acc <UART_SetConfig+0x348>
 8004a34:	2302      	movs	r3, #2
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e048      	b.n	8004acc <UART_SetConfig+0x348>
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e045      	b.n	8004acc <UART_SetConfig+0x348>
 8004a40:	2308      	movs	r3, #8
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e042      	b.n	8004acc <UART_SetConfig+0x348>
 8004a46:	bf00      	nop
 8004a48:	efff69f3 	.word	0xefff69f3
 8004a4c:	40011000 	.word	0x40011000
 8004a50:	40023800 	.word	0x40023800
 8004a54:	40004400 	.word	0x40004400
 8004a58:	40004800 	.word	0x40004800
 8004a5c:	40004c00 	.word	0x40004c00
 8004a60:	40005000 	.word	0x40005000
 8004a64:	40011400 	.word	0x40011400
 8004a68:	40007800 	.word	0x40007800
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e02c      	b.n	8004acc <UART_SetConfig+0x348>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a72      	ldr	r2, [pc, #456]	; (8004c40 <UART_SetConfig+0x4bc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d125      	bne.n	8004ac8 <UART_SetConfig+0x344>
 8004a7c:	4b71      	ldr	r3, [pc, #452]	; (8004c44 <UART_SetConfig+0x4c0>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a8a:	d017      	beq.n	8004abc <UART_SetConfig+0x338>
 8004a8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a90:	d817      	bhi.n	8004ac2 <UART_SetConfig+0x33e>
 8004a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a96:	d00b      	beq.n	8004ab0 <UART_SetConfig+0x32c>
 8004a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9c:	d811      	bhi.n	8004ac2 <UART_SetConfig+0x33e>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <UART_SetConfig+0x326>
 8004aa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aa6:	d006      	beq.n	8004ab6 <UART_SetConfig+0x332>
 8004aa8:	e00b      	b.n	8004ac2 <UART_SetConfig+0x33e>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e00d      	b.n	8004acc <UART_SetConfig+0x348>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e00a      	b.n	8004acc <UART_SetConfig+0x348>
 8004ab6:	2304      	movs	r3, #4
 8004ab8:	77fb      	strb	r3, [r7, #31]
 8004aba:	e007      	b.n	8004acc <UART_SetConfig+0x348>
 8004abc:	2308      	movs	r3, #8
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	e004      	b.n	8004acc <UART_SetConfig+0x348>
 8004ac2:	2310      	movs	r3, #16
 8004ac4:	77fb      	strb	r3, [r7, #31]
 8004ac6:	e001      	b.n	8004acc <UART_SetConfig+0x348>
 8004ac8:	2310      	movs	r3, #16
 8004aca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad4:	d15b      	bne.n	8004b8e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004ad6:	7ffb      	ldrb	r3, [r7, #31]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d828      	bhi.n	8004b2e <UART_SetConfig+0x3aa>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <UART_SetConfig+0x360>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b11 	.word	0x08004b11
 8004aec:	08004b19 	.word	0x08004b19
 8004af0:	08004b2f 	.word	0x08004b2f
 8004af4:	08004b1f 	.word	0x08004b1f
 8004af8:	08004b2f 	.word	0x08004b2f
 8004afc:	08004b2f 	.word	0x08004b2f
 8004b00:	08004b2f 	.word	0x08004b2f
 8004b04:	08004b27 	.word	0x08004b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b08:	f7ff f856 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 8004b0c:	61b8      	str	r0, [r7, #24]
        break;
 8004b0e:	e013      	b.n	8004b38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b10:	f7ff f866 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 8004b14:	61b8      	str	r0, [r7, #24]
        break;
 8004b16:	e00f      	b.n	8004b38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b18:	4b4b      	ldr	r3, [pc, #300]	; (8004c48 <UART_SetConfig+0x4c4>)
 8004b1a:	61bb      	str	r3, [r7, #24]
        break;
 8004b1c:	e00c      	b.n	8004b38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1e:	f7fe ff39 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8004b22:	61b8      	str	r0, [r7, #24]
        break;
 8004b24:	e008      	b.n	8004b38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2a:	61bb      	str	r3, [r7, #24]
        break;
 8004b2c:	e004      	b.n	8004b38 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	77bb      	strb	r3, [r7, #30]
        break;
 8004b36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d074      	beq.n	8004c28 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	005a      	lsls	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	441a      	add	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b0f      	cmp	r3, #15
 8004b58:	d916      	bls.n	8004b88 <UART_SetConfig+0x404>
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b60:	d212      	bcs.n	8004b88 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f023 030f 	bic.w	r3, r3, #15
 8004b6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	89fb      	ldrh	r3, [r7, #14]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	89fa      	ldrh	r2, [r7, #14]
 8004b84:	60da      	str	r2, [r3, #12]
 8004b86:	e04f      	b.n	8004c28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	77bb      	strb	r3, [r7, #30]
 8004b8c:	e04c      	b.n	8004c28 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b8e:	7ffb      	ldrb	r3, [r7, #31]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d828      	bhi.n	8004be6 <UART_SetConfig+0x462>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <UART_SetConfig+0x418>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bc1 	.word	0x08004bc1
 8004ba0:	08004bc9 	.word	0x08004bc9
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	08004be7 	.word	0x08004be7
 8004bac:	08004bd7 	.word	0x08004bd7
 8004bb0:	08004be7 	.word	0x08004be7
 8004bb4:	08004be7 	.word	0x08004be7
 8004bb8:	08004be7 	.word	0x08004be7
 8004bbc:	08004bdf 	.word	0x08004bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc0:	f7fe fffa 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 8004bc4:	61b8      	str	r0, [r7, #24]
        break;
 8004bc6:	e013      	b.n	8004bf0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bc8:	f7ff f80a 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 8004bcc:	61b8      	str	r0, [r7, #24]
        break;
 8004bce:	e00f      	b.n	8004bf0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd0:	4b1d      	ldr	r3, [pc, #116]	; (8004c48 <UART_SetConfig+0x4c4>)
 8004bd2:	61bb      	str	r3, [r7, #24]
        break;
 8004bd4:	e00c      	b.n	8004bf0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bd6:	f7fe fedd 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8004bda:	61b8      	str	r0, [r7, #24]
        break;
 8004bdc:	e008      	b.n	8004bf0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be2:	61bb      	str	r3, [r7, #24]
        break;
 8004be4:	e004      	b.n	8004bf0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	77bb      	strb	r3, [r7, #30]
        break;
 8004bee:	bf00      	nop
    }

    if (pclk != 0U)
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d018      	beq.n	8004c28 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	085a      	lsrs	r2, r3, #1
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	441a      	add	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2b0f      	cmp	r3, #15
 8004c0e:	d909      	bls.n	8004c24 <UART_SetConfig+0x4a0>
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c16:	d205      	bcs.n	8004c24 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	e001      	b.n	8004c28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c34:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3720      	adds	r7, #32
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40007c00 	.word	0x40007c00
 8004c44:	40023800 	.word	0x40023800
 8004c48:	00f42400 	.word	0x00f42400

08004c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01a      	beq.n	8004d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4a:	d10a      	bne.n	8004d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	605a      	str	r2, [r3, #4]
  }
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004da0:	f7fc faba 	bl	8001318 <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d10e      	bne.n	8004dd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f831 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e027      	b.n	8004e22 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d10e      	bne.n	8004dfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f81b 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e011      	b.n	8004e22 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b09c      	sub	sp, #112	; 0x70
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	4613      	mov	r3, r2
 8004e38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3a:	e0a7      	b.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	f000 80a3 	beq.w	8004f8c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e46:	f7fc fa67 	bl	8001318 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d302      	bcc.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x32>
 8004e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d13f      	bne.n	8004edc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e70:	667b      	str	r3, [r7, #100]	; 0x64
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e6      	bne.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3308      	adds	r3, #8
 8004e94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eae:	64ba      	str	r2, [r7, #72]	; 0x48
 8004eb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e068      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d050      	beq.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef8:	d148      	bne.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
 8004f24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e6      	bne.n	8004f04 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	613b      	str	r3, [r7, #16]
   return(result);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3308      	adds	r3, #8
 8004f54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f56:	623a      	str	r2, [r7, #32]
 8004f58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	69f9      	ldr	r1, [r7, #28]
 8004f5c:	6a3a      	ldr	r2, [r7, #32]
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e5      	bne.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e010      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4013      	ands	r3, r2
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	f43f af48 	beq.w	8004e3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3770      	adds	r7, #112	; 0x70
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fb8:	b084      	sub	sp, #16
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	f107 001c 	add.w	r0, r7, #28
 8004fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d120      	bne.n	8005012 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	4b20      	ldr	r3, [pc, #128]	; (8005064 <USB_CoreInit+0xac>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d105      	bne.n	8005006 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fa96 	bl	8005538 <USB_CoreReset>
 800500c:	4603      	mov	r3, r0
 800500e:	73fb      	strb	r3, [r7, #15]
 8005010:	e010      	b.n	8005034 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fa8a 	bl	8005538 <USB_CoreReset>
 8005024:	4603      	mov	r3, r0
 8005026:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	2b01      	cmp	r3, #1
 8005038:	d10b      	bne.n	8005052 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f043 0206 	orr.w	r2, r3, #6
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f043 0220 	orr.w	r2, r3, #32
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005052:	7bfb      	ldrb	r3, [r7, #15]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800505e:	b004      	add	sp, #16
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	ffbdffbf 	.word	0xffbdffbf

08005068 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f023 0201 	bic.w	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d115      	bne.n	80050d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050b8:	2001      	movs	r0, #1
 80050ba:	f7fc f939 	bl	8001330 <HAL_Delay>
      ms++;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3301      	adds	r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fa29 	bl	800551c <USB_GetMode>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d01e      	beq.n	800510e <USB_SetCurrentMode+0x84>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b31      	cmp	r3, #49	; 0x31
 80050d4:	d9f0      	bls.n	80050b8 <USB_SetCurrentMode+0x2e>
 80050d6:	e01a      	b.n	800510e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d115      	bne.n	800510a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050ea:	2001      	movs	r0, #1
 80050ec:	f7fc f920 	bl	8001330 <HAL_Delay>
      ms++;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3301      	adds	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa10 	bl	800551c <USB_GetMode>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <USB_SetCurrentMode+0x84>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b31      	cmp	r3, #49	; 0x31
 8005106:	d9f0      	bls.n	80050ea <USB_SetCurrentMode+0x60>
 8005108:	e001      	b.n	800510e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e005      	b.n	800511a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b32      	cmp	r3, #50	; 0x32
 8005112:	d101      	bne.n	8005118 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005124:	b084      	sub	sp, #16
 8005126:	b580      	push	{r7, lr}
 8005128:	b086      	sub	sp, #24
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	e009      	b.n	8005158 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	3340      	adds	r3, #64	; 0x40
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	2200      	movs	r2, #0
 8005150:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	3301      	adds	r3, #1
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b0e      	cmp	r3, #14
 800515c:	d9f2      	bls.n	8005144 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800515e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d11c      	bne.n	800519e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005172:	f043 0302 	orr.w	r3, r3, #2
 8005176:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e005      	b.n	80051aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051b0:	461a      	mov	r2, r3
 80051b2:	2300      	movs	r3, #0
 80051b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051bc:	4619      	mov	r1, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c4:	461a      	mov	r2, r3
 80051c6:	680b      	ldr	r3, [r1, #0]
 80051c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d10c      	bne.n	80051ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d104      	bne.n	80051e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051d6:	2100      	movs	r1, #0
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f965 	bl	80054a8 <USB_SetDevSpeed>
 80051de:	e008      	b.n	80051f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051e0:	2101      	movs	r1, #1
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f960 	bl	80054a8 <USB_SetDevSpeed>
 80051e8:	e003      	b.n	80051f2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051ea:	2103      	movs	r1, #3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f95b 	bl	80054a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051f2:	2110      	movs	r1, #16
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f8f3 	bl	80053e0 <USB_FlushTxFifo>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f91f 	bl	8005448 <USB_FlushRxFifo>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	461a      	mov	r2, r3
 800521c:	2300      	movs	r3, #0
 800521e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005226:	461a      	mov	r2, r3
 8005228:	2300      	movs	r3, #0
 800522a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	461a      	mov	r2, r3
 8005234:	2300      	movs	r3, #0
 8005236:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005238:	2300      	movs	r3, #0
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	e043      	b.n	80052c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005254:	d118      	bne.n	8005288 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	461a      	mov	r2, r3
 800526a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	e013      	b.n	800529a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527e:	461a      	mov	r2, r3
 8005280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	e008      	b.n	800529a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	461a      	mov	r2, r3
 8005296:	2300      	movs	r3, #0
 8005298:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a6:	461a      	mov	r2, r3
 80052a8:	2300      	movs	r3, #0
 80052aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	461a      	mov	r2, r3
 80052ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	3301      	adds	r3, #1
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d3b7      	bcc.n	800523e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	e043      	b.n	800535c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ea:	d118      	bne.n	800531e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	461a      	mov	r2, r3
 8005300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e013      	b.n	8005330 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005314:	461a      	mov	r2, r3
 8005316:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	e008      	b.n	8005330 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	461a      	mov	r2, r3
 800532c:	2300      	movs	r3, #0
 800532e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	461a      	mov	r2, r3
 800533e:	2300      	movs	r3, #0
 8005340:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534e:	461a      	mov	r2, r3
 8005350:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005354:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	3301      	adds	r3, #1
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	429a      	cmp	r2, r3
 8005362:	d3b7      	bcc.n	80052d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005376:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005384:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	2b00      	cmp	r3, #0
 800538a:	d105      	bne.n	8005398 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f043 0210 	orr.w	r2, r3, #16
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <USB_DevInit+0x2b4>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f043 0208 	orr.w	r2, r3, #8
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d105      	bne.n	80053c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699a      	ldr	r2, [r3, #24]
 80053c0:	4b06      	ldr	r3, [pc, #24]	; (80053dc <USB_DevInit+0x2b8>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053d4:	b004      	add	sp, #16
 80053d6:	4770      	bx	lr
 80053d8:	803c3800 	.word	0x803c3800
 80053dc:	40000004 	.word	0x40000004

080053e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3301      	adds	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <USB_FlushTxFifo+0x64>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d901      	bls.n	8005400 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e01b      	b.n	8005438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	daf2      	bge.n	80053ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	019b      	lsls	r3, r3, #6
 8005410:	f043 0220 	orr.w	r2, r3, #32
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3301      	adds	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a08      	ldr	r2, [pc, #32]	; (8005444 <USB_FlushTxFifo+0x64>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e006      	b.n	8005438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b20      	cmp	r3, #32
 8005434:	d0f0      	beq.n	8005418 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	00030d40 	.word	0x00030d40

08005448 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3301      	adds	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4a11      	ldr	r2, [pc, #68]	; (80054a4 <USB_FlushRxFifo+0x5c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e018      	b.n	8005498 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	daf2      	bge.n	8005454 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2210      	movs	r2, #16
 8005476:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3301      	adds	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a08      	ldr	r2, [pc, #32]	; (80054a4 <USB_FlushRxFifo+0x5c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e006      	b.n	8005498 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b10      	cmp	r3, #16
 8005494:	d0f0      	beq.n	8005478 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	00030d40 	.word	0x00030d40

080054a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c8:	4313      	orrs	r3, r2
 80054ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005508:	f043 0302 	orr.w	r3, r3, #2
 800550c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f003 0301 	and.w	r3, r3, #1
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3301      	adds	r3, #1
 8005548:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4a13      	ldr	r2, [pc, #76]	; (800559c <USB_CoreReset+0x64>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e01b      	b.n	800558e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	daf2      	bge.n	8005544 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f043 0201 	orr.w	r2, r3, #1
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3301      	adds	r3, #1
 8005572:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a09      	ldr	r2, [pc, #36]	; (800559c <USB_CoreReset+0x64>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d901      	bls.n	8005580 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e006      	b.n	800558e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	d0f0      	beq.n	800556e <USB_CoreReset+0x36>

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	00030d40 	.word	0x00030d40

080055a0 <malloc>:
 80055a0:	4b02      	ldr	r3, [pc, #8]	; (80055ac <malloc+0xc>)
 80055a2:	4601      	mov	r1, r0
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	f000 b823 	b.w	80055f0 <_malloc_r>
 80055aa:	bf00      	nop
 80055ac:	20000064 	.word	0x20000064

080055b0 <sbrk_aligned>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	4e0e      	ldr	r6, [pc, #56]	; (80055ec <sbrk_aligned+0x3c>)
 80055b4:	460c      	mov	r4, r1
 80055b6:	6831      	ldr	r1, [r6, #0]
 80055b8:	4605      	mov	r5, r0
 80055ba:	b911      	cbnz	r1, 80055c2 <sbrk_aligned+0x12>
 80055bc:	f000 fb96 	bl	8005cec <_sbrk_r>
 80055c0:	6030      	str	r0, [r6, #0]
 80055c2:	4621      	mov	r1, r4
 80055c4:	4628      	mov	r0, r5
 80055c6:	f000 fb91 	bl	8005cec <_sbrk_r>
 80055ca:	1c43      	adds	r3, r0, #1
 80055cc:	d00a      	beq.n	80055e4 <sbrk_aligned+0x34>
 80055ce:	1cc4      	adds	r4, r0, #3
 80055d0:	f024 0403 	bic.w	r4, r4, #3
 80055d4:	42a0      	cmp	r0, r4
 80055d6:	d007      	beq.n	80055e8 <sbrk_aligned+0x38>
 80055d8:	1a21      	subs	r1, r4, r0
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 fb86 	bl	8005cec <_sbrk_r>
 80055e0:	3001      	adds	r0, #1
 80055e2:	d101      	bne.n	80055e8 <sbrk_aligned+0x38>
 80055e4:	f04f 34ff 	mov.w	r4, #4294967295
 80055e8:	4620      	mov	r0, r4
 80055ea:	bd70      	pop	{r4, r5, r6, pc}
 80055ec:	20000910 	.word	0x20000910

080055f0 <_malloc_r>:
 80055f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f4:	1ccd      	adds	r5, r1, #3
 80055f6:	f025 0503 	bic.w	r5, r5, #3
 80055fa:	3508      	adds	r5, #8
 80055fc:	2d0c      	cmp	r5, #12
 80055fe:	bf38      	it	cc
 8005600:	250c      	movcc	r5, #12
 8005602:	2d00      	cmp	r5, #0
 8005604:	4607      	mov	r7, r0
 8005606:	db01      	blt.n	800560c <_malloc_r+0x1c>
 8005608:	42a9      	cmp	r1, r5
 800560a:	d905      	bls.n	8005618 <_malloc_r+0x28>
 800560c:	230c      	movs	r3, #12
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	2600      	movs	r6, #0
 8005612:	4630      	mov	r0, r6
 8005614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005618:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056ec <_malloc_r+0xfc>
 800561c:	f000 f868 	bl	80056f0 <__malloc_lock>
 8005620:	f8d8 3000 	ldr.w	r3, [r8]
 8005624:	461c      	mov	r4, r3
 8005626:	bb5c      	cbnz	r4, 8005680 <_malloc_r+0x90>
 8005628:	4629      	mov	r1, r5
 800562a:	4638      	mov	r0, r7
 800562c:	f7ff ffc0 	bl	80055b0 <sbrk_aligned>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	4604      	mov	r4, r0
 8005634:	d155      	bne.n	80056e2 <_malloc_r+0xf2>
 8005636:	f8d8 4000 	ldr.w	r4, [r8]
 800563a:	4626      	mov	r6, r4
 800563c:	2e00      	cmp	r6, #0
 800563e:	d145      	bne.n	80056cc <_malloc_r+0xdc>
 8005640:	2c00      	cmp	r4, #0
 8005642:	d048      	beq.n	80056d6 <_malloc_r+0xe6>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	4631      	mov	r1, r6
 8005648:	4638      	mov	r0, r7
 800564a:	eb04 0903 	add.w	r9, r4, r3
 800564e:	f000 fb4d 	bl	8005cec <_sbrk_r>
 8005652:	4581      	cmp	r9, r0
 8005654:	d13f      	bne.n	80056d6 <_malloc_r+0xe6>
 8005656:	6821      	ldr	r1, [r4, #0]
 8005658:	1a6d      	subs	r5, r5, r1
 800565a:	4629      	mov	r1, r5
 800565c:	4638      	mov	r0, r7
 800565e:	f7ff ffa7 	bl	80055b0 <sbrk_aligned>
 8005662:	3001      	adds	r0, #1
 8005664:	d037      	beq.n	80056d6 <_malloc_r+0xe6>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	442b      	add	r3, r5
 800566a:	6023      	str	r3, [r4, #0]
 800566c:	f8d8 3000 	ldr.w	r3, [r8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d038      	beq.n	80056e6 <_malloc_r+0xf6>
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	42a2      	cmp	r2, r4
 8005678:	d12b      	bne.n	80056d2 <_malloc_r+0xe2>
 800567a:	2200      	movs	r2, #0
 800567c:	605a      	str	r2, [r3, #4]
 800567e:	e00f      	b.n	80056a0 <_malloc_r+0xb0>
 8005680:	6822      	ldr	r2, [r4, #0]
 8005682:	1b52      	subs	r2, r2, r5
 8005684:	d41f      	bmi.n	80056c6 <_malloc_r+0xd6>
 8005686:	2a0b      	cmp	r2, #11
 8005688:	d917      	bls.n	80056ba <_malloc_r+0xca>
 800568a:	1961      	adds	r1, r4, r5
 800568c:	42a3      	cmp	r3, r4
 800568e:	6025      	str	r5, [r4, #0]
 8005690:	bf18      	it	ne
 8005692:	6059      	strne	r1, [r3, #4]
 8005694:	6863      	ldr	r3, [r4, #4]
 8005696:	bf08      	it	eq
 8005698:	f8c8 1000 	streq.w	r1, [r8]
 800569c:	5162      	str	r2, [r4, r5]
 800569e:	604b      	str	r3, [r1, #4]
 80056a0:	4638      	mov	r0, r7
 80056a2:	f104 060b 	add.w	r6, r4, #11
 80056a6:	f000 f829 	bl	80056fc <__malloc_unlock>
 80056aa:	f026 0607 	bic.w	r6, r6, #7
 80056ae:	1d23      	adds	r3, r4, #4
 80056b0:	1af2      	subs	r2, r6, r3
 80056b2:	d0ae      	beq.n	8005612 <_malloc_r+0x22>
 80056b4:	1b9b      	subs	r3, r3, r6
 80056b6:	50a3      	str	r3, [r4, r2]
 80056b8:	e7ab      	b.n	8005612 <_malloc_r+0x22>
 80056ba:	42a3      	cmp	r3, r4
 80056bc:	6862      	ldr	r2, [r4, #4]
 80056be:	d1dd      	bne.n	800567c <_malloc_r+0x8c>
 80056c0:	f8c8 2000 	str.w	r2, [r8]
 80056c4:	e7ec      	b.n	80056a0 <_malloc_r+0xb0>
 80056c6:	4623      	mov	r3, r4
 80056c8:	6864      	ldr	r4, [r4, #4]
 80056ca:	e7ac      	b.n	8005626 <_malloc_r+0x36>
 80056cc:	4634      	mov	r4, r6
 80056ce:	6876      	ldr	r6, [r6, #4]
 80056d0:	e7b4      	b.n	800563c <_malloc_r+0x4c>
 80056d2:	4613      	mov	r3, r2
 80056d4:	e7cc      	b.n	8005670 <_malloc_r+0x80>
 80056d6:	230c      	movs	r3, #12
 80056d8:	603b      	str	r3, [r7, #0]
 80056da:	4638      	mov	r0, r7
 80056dc:	f000 f80e 	bl	80056fc <__malloc_unlock>
 80056e0:	e797      	b.n	8005612 <_malloc_r+0x22>
 80056e2:	6025      	str	r5, [r4, #0]
 80056e4:	e7dc      	b.n	80056a0 <_malloc_r+0xb0>
 80056e6:	605b      	str	r3, [r3, #4]
 80056e8:	deff      	udf	#255	; 0xff
 80056ea:	bf00      	nop
 80056ec:	2000090c 	.word	0x2000090c

080056f0 <__malloc_lock>:
 80056f0:	4801      	ldr	r0, [pc, #4]	; (80056f8 <__malloc_lock+0x8>)
 80056f2:	f000 bb48 	b.w	8005d86 <__retarget_lock_acquire_recursive>
 80056f6:	bf00      	nop
 80056f8:	20000a54 	.word	0x20000a54

080056fc <__malloc_unlock>:
 80056fc:	4801      	ldr	r0, [pc, #4]	; (8005704 <__malloc_unlock+0x8>)
 80056fe:	f000 bb43 	b.w	8005d88 <__retarget_lock_release_recursive>
 8005702:	bf00      	nop
 8005704:	20000a54 	.word	0x20000a54

08005708 <std>:
 8005708:	2300      	movs	r3, #0
 800570a:	b510      	push	{r4, lr}
 800570c:	4604      	mov	r4, r0
 800570e:	e9c0 3300 	strd	r3, r3, [r0]
 8005712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005716:	6083      	str	r3, [r0, #8]
 8005718:	8181      	strh	r1, [r0, #12]
 800571a:	6643      	str	r3, [r0, #100]	; 0x64
 800571c:	81c2      	strh	r2, [r0, #14]
 800571e:	6183      	str	r3, [r0, #24]
 8005720:	4619      	mov	r1, r3
 8005722:	2208      	movs	r2, #8
 8005724:	305c      	adds	r0, #92	; 0x5c
 8005726:	f000 faa5 	bl	8005c74 <memset>
 800572a:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <std+0x58>)
 800572c:	6263      	str	r3, [r4, #36]	; 0x24
 800572e:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <std+0x5c>)
 8005730:	62a3      	str	r3, [r4, #40]	; 0x28
 8005732:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <std+0x60>)
 8005734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005736:	4b0d      	ldr	r3, [pc, #52]	; (800576c <std+0x64>)
 8005738:	6323      	str	r3, [r4, #48]	; 0x30
 800573a:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <std+0x68>)
 800573c:	6224      	str	r4, [r4, #32]
 800573e:	429c      	cmp	r4, r3
 8005740:	d006      	beq.n	8005750 <std+0x48>
 8005742:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005746:	4294      	cmp	r4, r2
 8005748:	d002      	beq.n	8005750 <std+0x48>
 800574a:	33d0      	adds	r3, #208	; 0xd0
 800574c:	429c      	cmp	r4, r3
 800574e:	d105      	bne.n	800575c <std+0x54>
 8005750:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005758:	f000 bb14 	b.w	8005d84 <__retarget_lock_init_recursive>
 800575c:	bd10      	pop	{r4, pc}
 800575e:	bf00      	nop
 8005760:	08005ac5 	.word	0x08005ac5
 8005764:	08005ae7 	.word	0x08005ae7
 8005768:	08005b1f 	.word	0x08005b1f
 800576c:	08005b43 	.word	0x08005b43
 8005770:	20000914 	.word	0x20000914

08005774 <stdio_exit_handler>:
 8005774:	4a02      	ldr	r2, [pc, #8]	; (8005780 <stdio_exit_handler+0xc>)
 8005776:	4903      	ldr	r1, [pc, #12]	; (8005784 <stdio_exit_handler+0x10>)
 8005778:	4803      	ldr	r0, [pc, #12]	; (8005788 <stdio_exit_handler+0x14>)
 800577a:	f000 b869 	b.w	8005850 <_fwalk_sglue>
 800577e:	bf00      	nop
 8005780:	2000000c 	.word	0x2000000c
 8005784:	080064d9 	.word	0x080064d9
 8005788:	20000018 	.word	0x20000018

0800578c <cleanup_stdio>:
 800578c:	6841      	ldr	r1, [r0, #4]
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <cleanup_stdio+0x34>)
 8005790:	4299      	cmp	r1, r3
 8005792:	b510      	push	{r4, lr}
 8005794:	4604      	mov	r4, r0
 8005796:	d001      	beq.n	800579c <cleanup_stdio+0x10>
 8005798:	f000 fe9e 	bl	80064d8 <_fflush_r>
 800579c:	68a1      	ldr	r1, [r4, #8]
 800579e:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <cleanup_stdio+0x38>)
 80057a0:	4299      	cmp	r1, r3
 80057a2:	d002      	beq.n	80057aa <cleanup_stdio+0x1e>
 80057a4:	4620      	mov	r0, r4
 80057a6:	f000 fe97 	bl	80064d8 <_fflush_r>
 80057aa:	68e1      	ldr	r1, [r4, #12]
 80057ac:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <cleanup_stdio+0x3c>)
 80057ae:	4299      	cmp	r1, r3
 80057b0:	d004      	beq.n	80057bc <cleanup_stdio+0x30>
 80057b2:	4620      	mov	r0, r4
 80057b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b8:	f000 be8e 	b.w	80064d8 <_fflush_r>
 80057bc:	bd10      	pop	{r4, pc}
 80057be:	bf00      	nop
 80057c0:	20000914 	.word	0x20000914
 80057c4:	2000097c 	.word	0x2000097c
 80057c8:	200009e4 	.word	0x200009e4

080057cc <global_stdio_init.part.0>:
 80057cc:	b510      	push	{r4, lr}
 80057ce:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <global_stdio_init.part.0+0x30>)
 80057d0:	4c0b      	ldr	r4, [pc, #44]	; (8005800 <global_stdio_init.part.0+0x34>)
 80057d2:	4a0c      	ldr	r2, [pc, #48]	; (8005804 <global_stdio_init.part.0+0x38>)
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	4620      	mov	r0, r4
 80057d8:	2200      	movs	r2, #0
 80057da:	2104      	movs	r1, #4
 80057dc:	f7ff ff94 	bl	8005708 <std>
 80057e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80057e4:	2201      	movs	r2, #1
 80057e6:	2109      	movs	r1, #9
 80057e8:	f7ff ff8e 	bl	8005708 <std>
 80057ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80057f0:	2202      	movs	r2, #2
 80057f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f6:	2112      	movs	r1, #18
 80057f8:	f7ff bf86 	b.w	8005708 <std>
 80057fc:	20000a4c 	.word	0x20000a4c
 8005800:	20000914 	.word	0x20000914
 8005804:	08005775 	.word	0x08005775

08005808 <__sfp_lock_acquire>:
 8005808:	4801      	ldr	r0, [pc, #4]	; (8005810 <__sfp_lock_acquire+0x8>)
 800580a:	f000 babc 	b.w	8005d86 <__retarget_lock_acquire_recursive>
 800580e:	bf00      	nop
 8005810:	20000a55 	.word	0x20000a55

08005814 <__sfp_lock_release>:
 8005814:	4801      	ldr	r0, [pc, #4]	; (800581c <__sfp_lock_release+0x8>)
 8005816:	f000 bab7 	b.w	8005d88 <__retarget_lock_release_recursive>
 800581a:	bf00      	nop
 800581c:	20000a55 	.word	0x20000a55

08005820 <__sinit>:
 8005820:	b510      	push	{r4, lr}
 8005822:	4604      	mov	r4, r0
 8005824:	f7ff fff0 	bl	8005808 <__sfp_lock_acquire>
 8005828:	6a23      	ldr	r3, [r4, #32]
 800582a:	b11b      	cbz	r3, 8005834 <__sinit+0x14>
 800582c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005830:	f7ff bff0 	b.w	8005814 <__sfp_lock_release>
 8005834:	4b04      	ldr	r3, [pc, #16]	; (8005848 <__sinit+0x28>)
 8005836:	6223      	str	r3, [r4, #32]
 8005838:	4b04      	ldr	r3, [pc, #16]	; (800584c <__sinit+0x2c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f5      	bne.n	800582c <__sinit+0xc>
 8005840:	f7ff ffc4 	bl	80057cc <global_stdio_init.part.0>
 8005844:	e7f2      	b.n	800582c <__sinit+0xc>
 8005846:	bf00      	nop
 8005848:	0800578d 	.word	0x0800578d
 800584c:	20000a4c 	.word	0x20000a4c

08005850 <_fwalk_sglue>:
 8005850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005854:	4607      	mov	r7, r0
 8005856:	4688      	mov	r8, r1
 8005858:	4614      	mov	r4, r2
 800585a:	2600      	movs	r6, #0
 800585c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005860:	f1b9 0901 	subs.w	r9, r9, #1
 8005864:	d505      	bpl.n	8005872 <_fwalk_sglue+0x22>
 8005866:	6824      	ldr	r4, [r4, #0]
 8005868:	2c00      	cmp	r4, #0
 800586a:	d1f7      	bne.n	800585c <_fwalk_sglue+0xc>
 800586c:	4630      	mov	r0, r6
 800586e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005872:	89ab      	ldrh	r3, [r5, #12]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d907      	bls.n	8005888 <_fwalk_sglue+0x38>
 8005878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800587c:	3301      	adds	r3, #1
 800587e:	d003      	beq.n	8005888 <_fwalk_sglue+0x38>
 8005880:	4629      	mov	r1, r5
 8005882:	4638      	mov	r0, r7
 8005884:	47c0      	blx	r8
 8005886:	4306      	orrs	r6, r0
 8005888:	3568      	adds	r5, #104	; 0x68
 800588a:	e7e9      	b.n	8005860 <_fwalk_sglue+0x10>

0800588c <iprintf>:
 800588c:	b40f      	push	{r0, r1, r2, r3}
 800588e:	b507      	push	{r0, r1, r2, lr}
 8005890:	4906      	ldr	r1, [pc, #24]	; (80058ac <iprintf+0x20>)
 8005892:	ab04      	add	r3, sp, #16
 8005894:	6808      	ldr	r0, [r1, #0]
 8005896:	f853 2b04 	ldr.w	r2, [r3], #4
 800589a:	6881      	ldr	r1, [r0, #8]
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	f000 faeb 	bl	8005e78 <_vfiprintf_r>
 80058a2:	b003      	add	sp, #12
 80058a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058a8:	b004      	add	sp, #16
 80058aa:	4770      	bx	lr
 80058ac:	20000064 	.word	0x20000064

080058b0 <_puts_r>:
 80058b0:	6a03      	ldr	r3, [r0, #32]
 80058b2:	b570      	push	{r4, r5, r6, lr}
 80058b4:	6884      	ldr	r4, [r0, #8]
 80058b6:	4605      	mov	r5, r0
 80058b8:	460e      	mov	r6, r1
 80058ba:	b90b      	cbnz	r3, 80058c0 <_puts_r+0x10>
 80058bc:	f7ff ffb0 	bl	8005820 <__sinit>
 80058c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058c2:	07db      	lsls	r3, r3, #31
 80058c4:	d405      	bmi.n	80058d2 <_puts_r+0x22>
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	0598      	lsls	r0, r3, #22
 80058ca:	d402      	bmi.n	80058d2 <_puts_r+0x22>
 80058cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ce:	f000 fa5a 	bl	8005d86 <__retarget_lock_acquire_recursive>
 80058d2:	89a3      	ldrh	r3, [r4, #12]
 80058d4:	0719      	lsls	r1, r3, #28
 80058d6:	d513      	bpl.n	8005900 <_puts_r+0x50>
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	b18b      	cbz	r3, 8005900 <_puts_r+0x50>
 80058dc:	3e01      	subs	r6, #1
 80058de:	68a3      	ldr	r3, [r4, #8]
 80058e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058e4:	3b01      	subs	r3, #1
 80058e6:	60a3      	str	r3, [r4, #8]
 80058e8:	b9e9      	cbnz	r1, 8005926 <_puts_r+0x76>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	da2e      	bge.n	800594c <_puts_r+0x9c>
 80058ee:	4622      	mov	r2, r4
 80058f0:	210a      	movs	r1, #10
 80058f2:	4628      	mov	r0, r5
 80058f4:	f000 f929 	bl	8005b4a <__swbuf_r>
 80058f8:	3001      	adds	r0, #1
 80058fa:	d007      	beq.n	800590c <_puts_r+0x5c>
 80058fc:	250a      	movs	r5, #10
 80058fe:	e007      	b.n	8005910 <_puts_r+0x60>
 8005900:	4621      	mov	r1, r4
 8005902:	4628      	mov	r0, r5
 8005904:	f000 f95e 	bl	8005bc4 <__swsetup_r>
 8005908:	2800      	cmp	r0, #0
 800590a:	d0e7      	beq.n	80058dc <_puts_r+0x2c>
 800590c:	f04f 35ff 	mov.w	r5, #4294967295
 8005910:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005912:	07da      	lsls	r2, r3, #31
 8005914:	d405      	bmi.n	8005922 <_puts_r+0x72>
 8005916:	89a3      	ldrh	r3, [r4, #12]
 8005918:	059b      	lsls	r3, r3, #22
 800591a:	d402      	bmi.n	8005922 <_puts_r+0x72>
 800591c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800591e:	f000 fa33 	bl	8005d88 <__retarget_lock_release_recursive>
 8005922:	4628      	mov	r0, r5
 8005924:	bd70      	pop	{r4, r5, r6, pc}
 8005926:	2b00      	cmp	r3, #0
 8005928:	da04      	bge.n	8005934 <_puts_r+0x84>
 800592a:	69a2      	ldr	r2, [r4, #24]
 800592c:	429a      	cmp	r2, r3
 800592e:	dc06      	bgt.n	800593e <_puts_r+0x8e>
 8005930:	290a      	cmp	r1, #10
 8005932:	d004      	beq.n	800593e <_puts_r+0x8e>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	6022      	str	r2, [r4, #0]
 800593a:	7019      	strb	r1, [r3, #0]
 800593c:	e7cf      	b.n	80058de <_puts_r+0x2e>
 800593e:	4622      	mov	r2, r4
 8005940:	4628      	mov	r0, r5
 8005942:	f000 f902 	bl	8005b4a <__swbuf_r>
 8005946:	3001      	adds	r0, #1
 8005948:	d1c9      	bne.n	80058de <_puts_r+0x2e>
 800594a:	e7df      	b.n	800590c <_puts_r+0x5c>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	250a      	movs	r5, #10
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	6022      	str	r2, [r4, #0]
 8005954:	701d      	strb	r5, [r3, #0]
 8005956:	e7db      	b.n	8005910 <_puts_r+0x60>

08005958 <puts>:
 8005958:	4b02      	ldr	r3, [pc, #8]	; (8005964 <puts+0xc>)
 800595a:	4601      	mov	r1, r0
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	f7ff bfa7 	b.w	80058b0 <_puts_r>
 8005962:	bf00      	nop
 8005964:	20000064 	.word	0x20000064

08005968 <setvbuf>:
 8005968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800596c:	461d      	mov	r5, r3
 800596e:	4b54      	ldr	r3, [pc, #336]	; (8005ac0 <setvbuf+0x158>)
 8005970:	681f      	ldr	r7, [r3, #0]
 8005972:	4604      	mov	r4, r0
 8005974:	460e      	mov	r6, r1
 8005976:	4690      	mov	r8, r2
 8005978:	b127      	cbz	r7, 8005984 <setvbuf+0x1c>
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	b913      	cbnz	r3, 8005984 <setvbuf+0x1c>
 800597e:	4638      	mov	r0, r7
 8005980:	f7ff ff4e 	bl	8005820 <__sinit>
 8005984:	f1b8 0f02 	cmp.w	r8, #2
 8005988:	d006      	beq.n	8005998 <setvbuf+0x30>
 800598a:	f1b8 0f01 	cmp.w	r8, #1
 800598e:	f200 8094 	bhi.w	8005aba <setvbuf+0x152>
 8005992:	2d00      	cmp	r5, #0
 8005994:	f2c0 8091 	blt.w	8005aba <setvbuf+0x152>
 8005998:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800599a:	07da      	lsls	r2, r3, #31
 800599c:	d405      	bmi.n	80059aa <setvbuf+0x42>
 800599e:	89a3      	ldrh	r3, [r4, #12]
 80059a0:	059b      	lsls	r3, r3, #22
 80059a2:	d402      	bmi.n	80059aa <setvbuf+0x42>
 80059a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059a6:	f000 f9ee 	bl	8005d86 <__retarget_lock_acquire_recursive>
 80059aa:	4621      	mov	r1, r4
 80059ac:	4638      	mov	r0, r7
 80059ae:	f000 fd93 	bl	80064d8 <_fflush_r>
 80059b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059b4:	b141      	cbz	r1, 80059c8 <setvbuf+0x60>
 80059b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059ba:	4299      	cmp	r1, r3
 80059bc:	d002      	beq.n	80059c4 <setvbuf+0x5c>
 80059be:	4638      	mov	r0, r7
 80059c0:	f000 f9e4 	bl	8005d8c <_free_r>
 80059c4:	2300      	movs	r3, #0
 80059c6:	6363      	str	r3, [r4, #52]	; 0x34
 80059c8:	2300      	movs	r3, #0
 80059ca:	61a3      	str	r3, [r4, #24]
 80059cc:	6063      	str	r3, [r4, #4]
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	0618      	lsls	r0, r3, #24
 80059d2:	d503      	bpl.n	80059dc <setvbuf+0x74>
 80059d4:	6921      	ldr	r1, [r4, #16]
 80059d6:	4638      	mov	r0, r7
 80059d8:	f000 f9d8 	bl	8005d8c <_free_r>
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80059e2:	f023 0303 	bic.w	r3, r3, #3
 80059e6:	f1b8 0f02 	cmp.w	r8, #2
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	d05f      	beq.n	8005aae <setvbuf+0x146>
 80059ee:	ab01      	add	r3, sp, #4
 80059f0:	466a      	mov	r2, sp
 80059f2:	4621      	mov	r1, r4
 80059f4:	4638      	mov	r0, r7
 80059f6:	f000 fd97 	bl	8006528 <__swhatbuf_r>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	4318      	orrs	r0, r3
 80059fe:	81a0      	strh	r0, [r4, #12]
 8005a00:	bb2d      	cbnz	r5, 8005a4e <setvbuf+0xe6>
 8005a02:	9d00      	ldr	r5, [sp, #0]
 8005a04:	4628      	mov	r0, r5
 8005a06:	f7ff fdcb 	bl	80055a0 <malloc>
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d150      	bne.n	8005ab2 <setvbuf+0x14a>
 8005a10:	f8dd 9000 	ldr.w	r9, [sp]
 8005a14:	45a9      	cmp	r9, r5
 8005a16:	d13e      	bne.n	8005a96 <setvbuf+0x12e>
 8005a18:	f04f 35ff 	mov.w	r5, #4294967295
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	60a2      	str	r2, [r4, #8]
 8005a20:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005a24:	6022      	str	r2, [r4, #0]
 8005a26:	6122      	str	r2, [r4, #16]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a2e:	6162      	str	r2, [r4, #20]
 8005a30:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a32:	f043 0302 	orr.w	r3, r3, #2
 8005a36:	07d1      	lsls	r1, r2, #31
 8005a38:	81a3      	strh	r3, [r4, #12]
 8005a3a:	d404      	bmi.n	8005a46 <setvbuf+0xde>
 8005a3c:	059b      	lsls	r3, r3, #22
 8005a3e:	d402      	bmi.n	8005a46 <setvbuf+0xde>
 8005a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a42:	f000 f9a1 	bl	8005d88 <__retarget_lock_release_recursive>
 8005a46:	4628      	mov	r0, r5
 8005a48:	b003      	add	sp, #12
 8005a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	d0d8      	beq.n	8005a04 <setvbuf+0x9c>
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	b913      	cbnz	r3, 8005a5c <setvbuf+0xf4>
 8005a56:	4638      	mov	r0, r7
 8005a58:	f7ff fee2 	bl	8005820 <__sinit>
 8005a5c:	f1b8 0f01 	cmp.w	r8, #1
 8005a60:	bf08      	it	eq
 8005a62:	89a3      	ldrheq	r3, [r4, #12]
 8005a64:	6026      	str	r6, [r4, #0]
 8005a66:	bf04      	itt	eq
 8005a68:	f043 0301 	orreq.w	r3, r3, #1
 8005a6c:	81a3      	strheq	r3, [r4, #12]
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	f013 0208 	ands.w	r2, r3, #8
 8005a74:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005a78:	d01d      	beq.n	8005ab6 <setvbuf+0x14e>
 8005a7a:	07da      	lsls	r2, r3, #31
 8005a7c:	bf41      	itttt	mi
 8005a7e:	2200      	movmi	r2, #0
 8005a80:	426d      	negmi	r5, r5
 8005a82:	60a2      	strmi	r2, [r4, #8]
 8005a84:	61a5      	strmi	r5, [r4, #24]
 8005a86:	bf58      	it	pl
 8005a88:	60a5      	strpl	r5, [r4, #8]
 8005a8a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005a8c:	f015 0501 	ands.w	r5, r5, #1
 8005a90:	d0d4      	beq.n	8005a3c <setvbuf+0xd4>
 8005a92:	2500      	movs	r5, #0
 8005a94:	e7d7      	b.n	8005a46 <setvbuf+0xde>
 8005a96:	4648      	mov	r0, r9
 8005a98:	f7ff fd82 	bl	80055a0 <malloc>
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d0ba      	beq.n	8005a18 <setvbuf+0xb0>
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	464d      	mov	r5, r9
 8005aac:	e7d1      	b.n	8005a52 <setvbuf+0xea>
 8005aae:	2500      	movs	r5, #0
 8005ab0:	e7b4      	b.n	8005a1c <setvbuf+0xb4>
 8005ab2:	46a9      	mov	r9, r5
 8005ab4:	e7f5      	b.n	8005aa2 <setvbuf+0x13a>
 8005ab6:	60a2      	str	r2, [r4, #8]
 8005ab8:	e7e7      	b.n	8005a8a <setvbuf+0x122>
 8005aba:	f04f 35ff 	mov.w	r5, #4294967295
 8005abe:	e7c2      	b.n	8005a46 <setvbuf+0xde>
 8005ac0:	20000064 	.word	0x20000064

08005ac4 <__sread>:
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005acc:	f000 f8fc 	bl	8005cc8 <_read_r>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	bfab      	itete	ge
 8005ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ad8:	181b      	addge	r3, r3, r0
 8005ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ade:	bfac      	ite	ge
 8005ae0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ae2:	81a3      	strhlt	r3, [r4, #12]
 8005ae4:	bd10      	pop	{r4, pc}

08005ae6 <__swrite>:
 8005ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aea:	461f      	mov	r7, r3
 8005aec:	898b      	ldrh	r3, [r1, #12]
 8005aee:	05db      	lsls	r3, r3, #23
 8005af0:	4605      	mov	r5, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	4616      	mov	r6, r2
 8005af6:	d505      	bpl.n	8005b04 <__swrite+0x1e>
 8005af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005afc:	2302      	movs	r3, #2
 8005afe:	2200      	movs	r2, #0
 8005b00:	f000 f8d0 	bl	8005ca4 <_lseek_r>
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b0e:	81a3      	strh	r3, [r4, #12]
 8005b10:	4632      	mov	r2, r6
 8005b12:	463b      	mov	r3, r7
 8005b14:	4628      	mov	r0, r5
 8005b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1a:	f000 b8f7 	b.w	8005d0c <_write_r>

08005b1e <__sseek>:
 8005b1e:	b510      	push	{r4, lr}
 8005b20:	460c      	mov	r4, r1
 8005b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b26:	f000 f8bd 	bl	8005ca4 <_lseek_r>
 8005b2a:	1c43      	adds	r3, r0, #1
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	bf15      	itete	ne
 8005b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b3a:	81a3      	strheq	r3, [r4, #12]
 8005b3c:	bf18      	it	ne
 8005b3e:	81a3      	strhne	r3, [r4, #12]
 8005b40:	bd10      	pop	{r4, pc}

08005b42 <__sclose>:
 8005b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b46:	f000 b89d 	b.w	8005c84 <_close_r>

08005b4a <__swbuf_r>:
 8005b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4c:	460e      	mov	r6, r1
 8005b4e:	4614      	mov	r4, r2
 8005b50:	4605      	mov	r5, r0
 8005b52:	b118      	cbz	r0, 8005b5c <__swbuf_r+0x12>
 8005b54:	6a03      	ldr	r3, [r0, #32]
 8005b56:	b90b      	cbnz	r3, 8005b5c <__swbuf_r+0x12>
 8005b58:	f7ff fe62 	bl	8005820 <__sinit>
 8005b5c:	69a3      	ldr	r3, [r4, #24]
 8005b5e:	60a3      	str	r3, [r4, #8]
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	071a      	lsls	r2, r3, #28
 8005b64:	d525      	bpl.n	8005bb2 <__swbuf_r+0x68>
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	b31b      	cbz	r3, 8005bb2 <__swbuf_r+0x68>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	6922      	ldr	r2, [r4, #16]
 8005b6e:	1a98      	subs	r0, r3, r2
 8005b70:	6963      	ldr	r3, [r4, #20]
 8005b72:	b2f6      	uxtb	r6, r6
 8005b74:	4283      	cmp	r3, r0
 8005b76:	4637      	mov	r7, r6
 8005b78:	dc04      	bgt.n	8005b84 <__swbuf_r+0x3a>
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f000 fcab 	bl	80064d8 <_fflush_r>
 8005b82:	b9e0      	cbnz	r0, 8005bbe <__swbuf_r+0x74>
 8005b84:	68a3      	ldr	r3, [r4, #8]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	60a3      	str	r3, [r4, #8]
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	6022      	str	r2, [r4, #0]
 8005b90:	701e      	strb	r6, [r3, #0]
 8005b92:	6962      	ldr	r2, [r4, #20]
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d004      	beq.n	8005ba4 <__swbuf_r+0x5a>
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	07db      	lsls	r3, r3, #31
 8005b9e:	d506      	bpl.n	8005bae <__swbuf_r+0x64>
 8005ba0:	2e0a      	cmp	r6, #10
 8005ba2:	d104      	bne.n	8005bae <__swbuf_r+0x64>
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f000 fc96 	bl	80064d8 <_fflush_r>
 8005bac:	b938      	cbnz	r0, 8005bbe <__swbuf_r+0x74>
 8005bae:	4638      	mov	r0, r7
 8005bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f000 f805 	bl	8005bc4 <__swsetup_r>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d0d5      	beq.n	8005b6a <__swbuf_r+0x20>
 8005bbe:	f04f 37ff 	mov.w	r7, #4294967295
 8005bc2:	e7f4      	b.n	8005bae <__swbuf_r+0x64>

08005bc4 <__swsetup_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4b2a      	ldr	r3, [pc, #168]	; (8005c70 <__swsetup_r+0xac>)
 8005bc8:	4605      	mov	r5, r0
 8005bca:	6818      	ldr	r0, [r3, #0]
 8005bcc:	460c      	mov	r4, r1
 8005bce:	b118      	cbz	r0, 8005bd8 <__swsetup_r+0x14>
 8005bd0:	6a03      	ldr	r3, [r0, #32]
 8005bd2:	b90b      	cbnz	r3, 8005bd8 <__swsetup_r+0x14>
 8005bd4:	f7ff fe24 	bl	8005820 <__sinit>
 8005bd8:	89a3      	ldrh	r3, [r4, #12]
 8005bda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bde:	0718      	lsls	r0, r3, #28
 8005be0:	d422      	bmi.n	8005c28 <__swsetup_r+0x64>
 8005be2:	06d9      	lsls	r1, r3, #27
 8005be4:	d407      	bmi.n	8005bf6 <__swsetup_r+0x32>
 8005be6:	2309      	movs	r3, #9
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bee:	81a3      	strh	r3, [r4, #12]
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf4:	e034      	b.n	8005c60 <__swsetup_r+0x9c>
 8005bf6:	0758      	lsls	r0, r3, #29
 8005bf8:	d512      	bpl.n	8005c20 <__swsetup_r+0x5c>
 8005bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bfc:	b141      	cbz	r1, 8005c10 <__swsetup_r+0x4c>
 8005bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c02:	4299      	cmp	r1, r3
 8005c04:	d002      	beq.n	8005c0c <__swsetup_r+0x48>
 8005c06:	4628      	mov	r0, r5
 8005c08:	f000 f8c0 	bl	8005d8c <_free_r>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	6363      	str	r3, [r4, #52]	; 0x34
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c16:	81a3      	strh	r3, [r4, #12]
 8005c18:	2300      	movs	r3, #0
 8005c1a:	6063      	str	r3, [r4, #4]
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	6023      	str	r3, [r4, #0]
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	f043 0308 	orr.w	r3, r3, #8
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	6923      	ldr	r3, [r4, #16]
 8005c2a:	b94b      	cbnz	r3, 8005c40 <__swsetup_r+0x7c>
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c36:	d003      	beq.n	8005c40 <__swsetup_r+0x7c>
 8005c38:	4621      	mov	r1, r4
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f000 fc9a 	bl	8006574 <__smakebuf_r>
 8005c40:	89a0      	ldrh	r0, [r4, #12]
 8005c42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c46:	f010 0301 	ands.w	r3, r0, #1
 8005c4a:	d00a      	beq.n	8005c62 <__swsetup_r+0x9e>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60a3      	str	r3, [r4, #8]
 8005c50:	6963      	ldr	r3, [r4, #20]
 8005c52:	425b      	negs	r3, r3
 8005c54:	61a3      	str	r3, [r4, #24]
 8005c56:	6923      	ldr	r3, [r4, #16]
 8005c58:	b943      	cbnz	r3, 8005c6c <__swsetup_r+0xa8>
 8005c5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c5e:	d1c4      	bne.n	8005bea <__swsetup_r+0x26>
 8005c60:	bd38      	pop	{r3, r4, r5, pc}
 8005c62:	0781      	lsls	r1, r0, #30
 8005c64:	bf58      	it	pl
 8005c66:	6963      	ldrpl	r3, [r4, #20]
 8005c68:	60a3      	str	r3, [r4, #8]
 8005c6a:	e7f4      	b.n	8005c56 <__swsetup_r+0x92>
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	e7f7      	b.n	8005c60 <__swsetup_r+0x9c>
 8005c70:	20000064 	.word	0x20000064

08005c74 <memset>:
 8005c74:	4402      	add	r2, r0
 8005c76:	4603      	mov	r3, r0
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d100      	bne.n	8005c7e <memset+0xa>
 8005c7c:	4770      	bx	lr
 8005c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c82:	e7f9      	b.n	8005c78 <memset+0x4>

08005c84 <_close_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4d06      	ldr	r5, [pc, #24]	; (8005ca0 <_close_r+0x1c>)
 8005c88:	2300      	movs	r3, #0
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	602b      	str	r3, [r5, #0]
 8005c90:	f7fa ffae 	bl	8000bf0 <_close>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d102      	bne.n	8005c9e <_close_r+0x1a>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	b103      	cbz	r3, 8005c9e <_close_r+0x1a>
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	20000a50 	.word	0x20000a50

08005ca4 <_lseek_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d07      	ldr	r5, [pc, #28]	; (8005cc4 <_lseek_r+0x20>)
 8005ca8:	4604      	mov	r4, r0
 8005caa:	4608      	mov	r0, r1
 8005cac:	4611      	mov	r1, r2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	602a      	str	r2, [r5, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f7fa ffb3 	bl	8000c1e <_lseek>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d102      	bne.n	8005cc2 <_lseek_r+0x1e>
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	b103      	cbz	r3, 8005cc2 <_lseek_r+0x1e>
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	bd38      	pop	{r3, r4, r5, pc}
 8005cc4:	20000a50 	.word	0x20000a50

08005cc8 <_read_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4d07      	ldr	r5, [pc, #28]	; (8005ce8 <_read_r+0x20>)
 8005ccc:	4604      	mov	r4, r0
 8005cce:	4608      	mov	r0, r1
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	602a      	str	r2, [r5, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f7fa ffb2 	bl	8000c40 <_read>
 8005cdc:	1c43      	adds	r3, r0, #1
 8005cde:	d102      	bne.n	8005ce6 <_read_r+0x1e>
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	b103      	cbz	r3, 8005ce6 <_read_r+0x1e>
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	20000a50 	.word	0x20000a50

08005cec <_sbrk_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4d06      	ldr	r5, [pc, #24]	; (8005d08 <_sbrk_r+0x1c>)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	602b      	str	r3, [r5, #0]
 8005cf8:	f7fb fa4c 	bl	8001194 <_sbrk>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_sbrk_r+0x1a>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_sbrk_r+0x1a>
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	20000a50 	.word	0x20000a50

08005d0c <_write_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4d07      	ldr	r5, [pc, #28]	; (8005d2c <_write_r+0x20>)
 8005d10:	4604      	mov	r4, r0
 8005d12:	4608      	mov	r0, r1
 8005d14:	4611      	mov	r1, r2
 8005d16:	2200      	movs	r2, #0
 8005d18:	602a      	str	r2, [r5, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f7fa ff3c 	bl	8000b98 <_write>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_write_r+0x1e>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_write_r+0x1e>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	20000a50 	.word	0x20000a50

08005d30 <__errno>:
 8005d30:	4b01      	ldr	r3, [pc, #4]	; (8005d38 <__errno+0x8>)
 8005d32:	6818      	ldr	r0, [r3, #0]
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20000064 	.word	0x20000064

08005d3c <__libc_init_array>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	4d0d      	ldr	r5, [pc, #52]	; (8005d74 <__libc_init_array+0x38>)
 8005d40:	4c0d      	ldr	r4, [pc, #52]	; (8005d78 <__libc_init_array+0x3c>)
 8005d42:	1b64      	subs	r4, r4, r5
 8005d44:	10a4      	asrs	r4, r4, #2
 8005d46:	2600      	movs	r6, #0
 8005d48:	42a6      	cmp	r6, r4
 8005d4a:	d109      	bne.n	8005d60 <__libc_init_array+0x24>
 8005d4c:	4d0b      	ldr	r5, [pc, #44]	; (8005d7c <__libc_init_array+0x40>)
 8005d4e:	4c0c      	ldr	r4, [pc, #48]	; (8005d80 <__libc_init_array+0x44>)
 8005d50:	f000 fc6e 	bl	8006630 <_init>
 8005d54:	1b64      	subs	r4, r4, r5
 8005d56:	10a4      	asrs	r4, r4, #2
 8005d58:	2600      	movs	r6, #0
 8005d5a:	42a6      	cmp	r6, r4
 8005d5c:	d105      	bne.n	8005d6a <__libc_init_array+0x2e>
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d64:	4798      	blx	r3
 8005d66:	3601      	adds	r6, #1
 8005d68:	e7ee      	b.n	8005d48 <__libc_init_array+0xc>
 8005d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d6e:	4798      	blx	r3
 8005d70:	3601      	adds	r6, #1
 8005d72:	e7f2      	b.n	8005d5a <__libc_init_array+0x1e>
 8005d74:	080066f0 	.word	0x080066f0
 8005d78:	080066f0 	.word	0x080066f0
 8005d7c:	080066f0 	.word	0x080066f0
 8005d80:	080066f4 	.word	0x080066f4

08005d84 <__retarget_lock_init_recursive>:
 8005d84:	4770      	bx	lr

08005d86 <__retarget_lock_acquire_recursive>:
 8005d86:	4770      	bx	lr

08005d88 <__retarget_lock_release_recursive>:
 8005d88:	4770      	bx	lr
	...

08005d8c <_free_r>:
 8005d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d8e:	2900      	cmp	r1, #0
 8005d90:	d044      	beq.n	8005e1c <_free_r+0x90>
 8005d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d96:	9001      	str	r0, [sp, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d9e:	bfb8      	it	lt
 8005da0:	18e4      	addlt	r4, r4, r3
 8005da2:	f7ff fca5 	bl	80056f0 <__malloc_lock>
 8005da6:	4a1e      	ldr	r2, [pc, #120]	; (8005e20 <_free_r+0x94>)
 8005da8:	9801      	ldr	r0, [sp, #4]
 8005daa:	6813      	ldr	r3, [r2, #0]
 8005dac:	b933      	cbnz	r3, 8005dbc <_free_r+0x30>
 8005dae:	6063      	str	r3, [r4, #4]
 8005db0:	6014      	str	r4, [r2, #0]
 8005db2:	b003      	add	sp, #12
 8005db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005db8:	f7ff bca0 	b.w	80056fc <__malloc_unlock>
 8005dbc:	42a3      	cmp	r3, r4
 8005dbe:	d908      	bls.n	8005dd2 <_free_r+0x46>
 8005dc0:	6825      	ldr	r5, [r4, #0]
 8005dc2:	1961      	adds	r1, r4, r5
 8005dc4:	428b      	cmp	r3, r1
 8005dc6:	bf01      	itttt	eq
 8005dc8:	6819      	ldreq	r1, [r3, #0]
 8005dca:	685b      	ldreq	r3, [r3, #4]
 8005dcc:	1949      	addeq	r1, r1, r5
 8005dce:	6021      	streq	r1, [r4, #0]
 8005dd0:	e7ed      	b.n	8005dae <_free_r+0x22>
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	b10b      	cbz	r3, 8005ddc <_free_r+0x50>
 8005dd8:	42a3      	cmp	r3, r4
 8005dda:	d9fa      	bls.n	8005dd2 <_free_r+0x46>
 8005ddc:	6811      	ldr	r1, [r2, #0]
 8005dde:	1855      	adds	r5, r2, r1
 8005de0:	42a5      	cmp	r5, r4
 8005de2:	d10b      	bne.n	8005dfc <_free_r+0x70>
 8005de4:	6824      	ldr	r4, [r4, #0]
 8005de6:	4421      	add	r1, r4
 8005de8:	1854      	adds	r4, r2, r1
 8005dea:	42a3      	cmp	r3, r4
 8005dec:	6011      	str	r1, [r2, #0]
 8005dee:	d1e0      	bne.n	8005db2 <_free_r+0x26>
 8005df0:	681c      	ldr	r4, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	6053      	str	r3, [r2, #4]
 8005df6:	440c      	add	r4, r1
 8005df8:	6014      	str	r4, [r2, #0]
 8005dfa:	e7da      	b.n	8005db2 <_free_r+0x26>
 8005dfc:	d902      	bls.n	8005e04 <_free_r+0x78>
 8005dfe:	230c      	movs	r3, #12
 8005e00:	6003      	str	r3, [r0, #0]
 8005e02:	e7d6      	b.n	8005db2 <_free_r+0x26>
 8005e04:	6825      	ldr	r5, [r4, #0]
 8005e06:	1961      	adds	r1, r4, r5
 8005e08:	428b      	cmp	r3, r1
 8005e0a:	bf04      	itt	eq
 8005e0c:	6819      	ldreq	r1, [r3, #0]
 8005e0e:	685b      	ldreq	r3, [r3, #4]
 8005e10:	6063      	str	r3, [r4, #4]
 8005e12:	bf04      	itt	eq
 8005e14:	1949      	addeq	r1, r1, r5
 8005e16:	6021      	streq	r1, [r4, #0]
 8005e18:	6054      	str	r4, [r2, #4]
 8005e1a:	e7ca      	b.n	8005db2 <_free_r+0x26>
 8005e1c:	b003      	add	sp, #12
 8005e1e:	bd30      	pop	{r4, r5, pc}
 8005e20:	2000090c 	.word	0x2000090c

08005e24 <__sfputc_r>:
 8005e24:	6893      	ldr	r3, [r2, #8]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	b410      	push	{r4}
 8005e2c:	6093      	str	r3, [r2, #8]
 8005e2e:	da08      	bge.n	8005e42 <__sfputc_r+0x1e>
 8005e30:	6994      	ldr	r4, [r2, #24]
 8005e32:	42a3      	cmp	r3, r4
 8005e34:	db01      	blt.n	8005e3a <__sfputc_r+0x16>
 8005e36:	290a      	cmp	r1, #10
 8005e38:	d103      	bne.n	8005e42 <__sfputc_r+0x1e>
 8005e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e3e:	f7ff be84 	b.w	8005b4a <__swbuf_r>
 8005e42:	6813      	ldr	r3, [r2, #0]
 8005e44:	1c58      	adds	r0, r3, #1
 8005e46:	6010      	str	r0, [r2, #0]
 8005e48:	7019      	strb	r1, [r3, #0]
 8005e4a:	4608      	mov	r0, r1
 8005e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <__sfputs_r>:
 8005e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e54:	4606      	mov	r6, r0
 8005e56:	460f      	mov	r7, r1
 8005e58:	4614      	mov	r4, r2
 8005e5a:	18d5      	adds	r5, r2, r3
 8005e5c:	42ac      	cmp	r4, r5
 8005e5e:	d101      	bne.n	8005e64 <__sfputs_r+0x12>
 8005e60:	2000      	movs	r0, #0
 8005e62:	e007      	b.n	8005e74 <__sfputs_r+0x22>
 8005e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e68:	463a      	mov	r2, r7
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	f7ff ffda 	bl	8005e24 <__sfputc_r>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d1f3      	bne.n	8005e5c <__sfputs_r+0xa>
 8005e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e78 <_vfiprintf_r>:
 8005e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	460d      	mov	r5, r1
 8005e7e:	b09d      	sub	sp, #116	; 0x74
 8005e80:	4614      	mov	r4, r2
 8005e82:	4698      	mov	r8, r3
 8005e84:	4606      	mov	r6, r0
 8005e86:	b118      	cbz	r0, 8005e90 <_vfiprintf_r+0x18>
 8005e88:	6a03      	ldr	r3, [r0, #32]
 8005e8a:	b90b      	cbnz	r3, 8005e90 <_vfiprintf_r+0x18>
 8005e8c:	f7ff fcc8 	bl	8005820 <__sinit>
 8005e90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e92:	07d9      	lsls	r1, r3, #31
 8005e94:	d405      	bmi.n	8005ea2 <_vfiprintf_r+0x2a>
 8005e96:	89ab      	ldrh	r3, [r5, #12]
 8005e98:	059a      	lsls	r2, r3, #22
 8005e9a:	d402      	bmi.n	8005ea2 <_vfiprintf_r+0x2a>
 8005e9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e9e:	f7ff ff72 	bl	8005d86 <__retarget_lock_acquire_recursive>
 8005ea2:	89ab      	ldrh	r3, [r5, #12]
 8005ea4:	071b      	lsls	r3, r3, #28
 8005ea6:	d501      	bpl.n	8005eac <_vfiprintf_r+0x34>
 8005ea8:	692b      	ldr	r3, [r5, #16]
 8005eaa:	b99b      	cbnz	r3, 8005ed4 <_vfiprintf_r+0x5c>
 8005eac:	4629      	mov	r1, r5
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f7ff fe88 	bl	8005bc4 <__swsetup_r>
 8005eb4:	b170      	cbz	r0, 8005ed4 <_vfiprintf_r+0x5c>
 8005eb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eb8:	07dc      	lsls	r4, r3, #31
 8005eba:	d504      	bpl.n	8005ec6 <_vfiprintf_r+0x4e>
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	b01d      	add	sp, #116	; 0x74
 8005ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec6:	89ab      	ldrh	r3, [r5, #12]
 8005ec8:	0598      	lsls	r0, r3, #22
 8005eca:	d4f7      	bmi.n	8005ebc <_vfiprintf_r+0x44>
 8005ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ece:	f7ff ff5b 	bl	8005d88 <__retarget_lock_release_recursive>
 8005ed2:	e7f3      	b.n	8005ebc <_vfiprintf_r+0x44>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed8:	2320      	movs	r3, #32
 8005eda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ee2:	2330      	movs	r3, #48	; 0x30
 8005ee4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006098 <_vfiprintf_r+0x220>
 8005ee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eec:	f04f 0901 	mov.w	r9, #1
 8005ef0:	4623      	mov	r3, r4
 8005ef2:	469a      	mov	sl, r3
 8005ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ef8:	b10a      	cbz	r2, 8005efe <_vfiprintf_r+0x86>
 8005efa:	2a25      	cmp	r2, #37	; 0x25
 8005efc:	d1f9      	bne.n	8005ef2 <_vfiprintf_r+0x7a>
 8005efe:	ebba 0b04 	subs.w	fp, sl, r4
 8005f02:	d00b      	beq.n	8005f1c <_vfiprintf_r+0xa4>
 8005f04:	465b      	mov	r3, fp
 8005f06:	4622      	mov	r2, r4
 8005f08:	4629      	mov	r1, r5
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f7ff ffa1 	bl	8005e52 <__sfputs_r>
 8005f10:	3001      	adds	r0, #1
 8005f12:	f000 80a9 	beq.w	8006068 <_vfiprintf_r+0x1f0>
 8005f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f18:	445a      	add	r2, fp
 8005f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8005f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80a1 	beq.w	8006068 <_vfiprintf_r+0x1f0>
 8005f26:	2300      	movs	r3, #0
 8005f28:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f30:	f10a 0a01 	add.w	sl, sl, #1
 8005f34:	9304      	str	r3, [sp, #16]
 8005f36:	9307      	str	r3, [sp, #28]
 8005f38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f3c:	931a      	str	r3, [sp, #104]	; 0x68
 8005f3e:	4654      	mov	r4, sl
 8005f40:	2205      	movs	r2, #5
 8005f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f46:	4854      	ldr	r0, [pc, #336]	; (8006098 <_vfiprintf_r+0x220>)
 8005f48:	f7fa f97a 	bl	8000240 <memchr>
 8005f4c:	9a04      	ldr	r2, [sp, #16]
 8005f4e:	b9d8      	cbnz	r0, 8005f88 <_vfiprintf_r+0x110>
 8005f50:	06d1      	lsls	r1, r2, #27
 8005f52:	bf44      	itt	mi
 8005f54:	2320      	movmi	r3, #32
 8005f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f5a:	0713      	lsls	r3, r2, #28
 8005f5c:	bf44      	itt	mi
 8005f5e:	232b      	movmi	r3, #43	; 0x2b
 8005f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f64:	f89a 3000 	ldrb.w	r3, [sl]
 8005f68:	2b2a      	cmp	r3, #42	; 0x2a
 8005f6a:	d015      	beq.n	8005f98 <_vfiprintf_r+0x120>
 8005f6c:	9a07      	ldr	r2, [sp, #28]
 8005f6e:	4654      	mov	r4, sl
 8005f70:	2000      	movs	r0, #0
 8005f72:	f04f 0c0a 	mov.w	ip, #10
 8005f76:	4621      	mov	r1, r4
 8005f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f7c:	3b30      	subs	r3, #48	; 0x30
 8005f7e:	2b09      	cmp	r3, #9
 8005f80:	d94d      	bls.n	800601e <_vfiprintf_r+0x1a6>
 8005f82:	b1b0      	cbz	r0, 8005fb2 <_vfiprintf_r+0x13a>
 8005f84:	9207      	str	r2, [sp, #28]
 8005f86:	e014      	b.n	8005fb2 <_vfiprintf_r+0x13a>
 8005f88:	eba0 0308 	sub.w	r3, r0, r8
 8005f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8005f90:	4313      	orrs	r3, r2
 8005f92:	9304      	str	r3, [sp, #16]
 8005f94:	46a2      	mov	sl, r4
 8005f96:	e7d2      	b.n	8005f3e <_vfiprintf_r+0xc6>
 8005f98:	9b03      	ldr	r3, [sp, #12]
 8005f9a:	1d19      	adds	r1, r3, #4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	9103      	str	r1, [sp, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bfbb      	ittet	lt
 8005fa4:	425b      	neglt	r3, r3
 8005fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8005faa:	9307      	strge	r3, [sp, #28]
 8005fac:	9307      	strlt	r3, [sp, #28]
 8005fae:	bfb8      	it	lt
 8005fb0:	9204      	strlt	r2, [sp, #16]
 8005fb2:	7823      	ldrb	r3, [r4, #0]
 8005fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8005fb6:	d10c      	bne.n	8005fd2 <_vfiprintf_r+0x15a>
 8005fb8:	7863      	ldrb	r3, [r4, #1]
 8005fba:	2b2a      	cmp	r3, #42	; 0x2a
 8005fbc:	d134      	bne.n	8006028 <_vfiprintf_r+0x1b0>
 8005fbe:	9b03      	ldr	r3, [sp, #12]
 8005fc0:	1d1a      	adds	r2, r3, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	9203      	str	r2, [sp, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bfb8      	it	lt
 8005fca:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fce:	3402      	adds	r4, #2
 8005fd0:	9305      	str	r3, [sp, #20]
 8005fd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80060a8 <_vfiprintf_r+0x230>
 8005fd6:	7821      	ldrb	r1, [r4, #0]
 8005fd8:	2203      	movs	r2, #3
 8005fda:	4650      	mov	r0, sl
 8005fdc:	f7fa f930 	bl	8000240 <memchr>
 8005fe0:	b138      	cbz	r0, 8005ff2 <_vfiprintf_r+0x17a>
 8005fe2:	9b04      	ldr	r3, [sp, #16]
 8005fe4:	eba0 000a 	sub.w	r0, r0, sl
 8005fe8:	2240      	movs	r2, #64	; 0x40
 8005fea:	4082      	lsls	r2, r0
 8005fec:	4313      	orrs	r3, r2
 8005fee:	3401      	adds	r4, #1
 8005ff0:	9304      	str	r3, [sp, #16]
 8005ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff6:	4829      	ldr	r0, [pc, #164]	; (800609c <_vfiprintf_r+0x224>)
 8005ff8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ffc:	2206      	movs	r2, #6
 8005ffe:	f7fa f91f 	bl	8000240 <memchr>
 8006002:	2800      	cmp	r0, #0
 8006004:	d03f      	beq.n	8006086 <_vfiprintf_r+0x20e>
 8006006:	4b26      	ldr	r3, [pc, #152]	; (80060a0 <_vfiprintf_r+0x228>)
 8006008:	bb1b      	cbnz	r3, 8006052 <_vfiprintf_r+0x1da>
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	3307      	adds	r3, #7
 800600e:	f023 0307 	bic.w	r3, r3, #7
 8006012:	3308      	adds	r3, #8
 8006014:	9303      	str	r3, [sp, #12]
 8006016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006018:	443b      	add	r3, r7
 800601a:	9309      	str	r3, [sp, #36]	; 0x24
 800601c:	e768      	b.n	8005ef0 <_vfiprintf_r+0x78>
 800601e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006022:	460c      	mov	r4, r1
 8006024:	2001      	movs	r0, #1
 8006026:	e7a6      	b.n	8005f76 <_vfiprintf_r+0xfe>
 8006028:	2300      	movs	r3, #0
 800602a:	3401      	adds	r4, #1
 800602c:	9305      	str	r3, [sp, #20]
 800602e:	4619      	mov	r1, r3
 8006030:	f04f 0c0a 	mov.w	ip, #10
 8006034:	4620      	mov	r0, r4
 8006036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800603a:	3a30      	subs	r2, #48	; 0x30
 800603c:	2a09      	cmp	r2, #9
 800603e:	d903      	bls.n	8006048 <_vfiprintf_r+0x1d0>
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0c6      	beq.n	8005fd2 <_vfiprintf_r+0x15a>
 8006044:	9105      	str	r1, [sp, #20]
 8006046:	e7c4      	b.n	8005fd2 <_vfiprintf_r+0x15a>
 8006048:	fb0c 2101 	mla	r1, ip, r1, r2
 800604c:	4604      	mov	r4, r0
 800604e:	2301      	movs	r3, #1
 8006050:	e7f0      	b.n	8006034 <_vfiprintf_r+0x1bc>
 8006052:	ab03      	add	r3, sp, #12
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	462a      	mov	r2, r5
 8006058:	4b12      	ldr	r3, [pc, #72]	; (80060a4 <_vfiprintf_r+0x22c>)
 800605a:	a904      	add	r1, sp, #16
 800605c:	4630      	mov	r0, r6
 800605e:	f3af 8000 	nop.w
 8006062:	4607      	mov	r7, r0
 8006064:	1c78      	adds	r0, r7, #1
 8006066:	d1d6      	bne.n	8006016 <_vfiprintf_r+0x19e>
 8006068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800606a:	07d9      	lsls	r1, r3, #31
 800606c:	d405      	bmi.n	800607a <_vfiprintf_r+0x202>
 800606e:	89ab      	ldrh	r3, [r5, #12]
 8006070:	059a      	lsls	r2, r3, #22
 8006072:	d402      	bmi.n	800607a <_vfiprintf_r+0x202>
 8006074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006076:	f7ff fe87 	bl	8005d88 <__retarget_lock_release_recursive>
 800607a:	89ab      	ldrh	r3, [r5, #12]
 800607c:	065b      	lsls	r3, r3, #25
 800607e:	f53f af1d 	bmi.w	8005ebc <_vfiprintf_r+0x44>
 8006082:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006084:	e71c      	b.n	8005ec0 <_vfiprintf_r+0x48>
 8006086:	ab03      	add	r3, sp, #12
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	462a      	mov	r2, r5
 800608c:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <_vfiprintf_r+0x22c>)
 800608e:	a904      	add	r1, sp, #16
 8006090:	4630      	mov	r0, r6
 8006092:	f000 f879 	bl	8006188 <_printf_i>
 8006096:	e7e4      	b.n	8006062 <_vfiprintf_r+0x1ea>
 8006098:	080066b4 	.word	0x080066b4
 800609c:	080066be 	.word	0x080066be
 80060a0:	00000000 	.word	0x00000000
 80060a4:	08005e53 	.word	0x08005e53
 80060a8:	080066ba 	.word	0x080066ba

080060ac <_printf_common>:
 80060ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	4616      	mov	r6, r2
 80060b2:	4699      	mov	r9, r3
 80060b4:	688a      	ldr	r2, [r1, #8]
 80060b6:	690b      	ldr	r3, [r1, #16]
 80060b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060bc:	4293      	cmp	r3, r2
 80060be:	bfb8      	it	lt
 80060c0:	4613      	movlt	r3, r2
 80060c2:	6033      	str	r3, [r6, #0]
 80060c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060c8:	4607      	mov	r7, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	b10a      	cbz	r2, 80060d2 <_printf_common+0x26>
 80060ce:	3301      	adds	r3, #1
 80060d0:	6033      	str	r3, [r6, #0]
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	0699      	lsls	r1, r3, #26
 80060d6:	bf42      	ittt	mi
 80060d8:	6833      	ldrmi	r3, [r6, #0]
 80060da:	3302      	addmi	r3, #2
 80060dc:	6033      	strmi	r3, [r6, #0]
 80060de:	6825      	ldr	r5, [r4, #0]
 80060e0:	f015 0506 	ands.w	r5, r5, #6
 80060e4:	d106      	bne.n	80060f4 <_printf_common+0x48>
 80060e6:	f104 0a19 	add.w	sl, r4, #25
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	6832      	ldr	r2, [r6, #0]
 80060ee:	1a9b      	subs	r3, r3, r2
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	dc26      	bgt.n	8006142 <_printf_common+0x96>
 80060f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060f8:	1e13      	subs	r3, r2, #0
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	bf18      	it	ne
 80060fe:	2301      	movne	r3, #1
 8006100:	0692      	lsls	r2, r2, #26
 8006102:	d42b      	bmi.n	800615c <_printf_common+0xb0>
 8006104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006108:	4649      	mov	r1, r9
 800610a:	4638      	mov	r0, r7
 800610c:	47c0      	blx	r8
 800610e:	3001      	adds	r0, #1
 8006110:	d01e      	beq.n	8006150 <_printf_common+0xa4>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	6922      	ldr	r2, [r4, #16]
 8006116:	f003 0306 	and.w	r3, r3, #6
 800611a:	2b04      	cmp	r3, #4
 800611c:	bf02      	ittt	eq
 800611e:	68e5      	ldreq	r5, [r4, #12]
 8006120:	6833      	ldreq	r3, [r6, #0]
 8006122:	1aed      	subeq	r5, r5, r3
 8006124:	68a3      	ldr	r3, [r4, #8]
 8006126:	bf0c      	ite	eq
 8006128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800612c:	2500      	movne	r5, #0
 800612e:	4293      	cmp	r3, r2
 8006130:	bfc4      	itt	gt
 8006132:	1a9b      	subgt	r3, r3, r2
 8006134:	18ed      	addgt	r5, r5, r3
 8006136:	2600      	movs	r6, #0
 8006138:	341a      	adds	r4, #26
 800613a:	42b5      	cmp	r5, r6
 800613c:	d11a      	bne.n	8006174 <_printf_common+0xc8>
 800613e:	2000      	movs	r0, #0
 8006140:	e008      	b.n	8006154 <_printf_common+0xa8>
 8006142:	2301      	movs	r3, #1
 8006144:	4652      	mov	r2, sl
 8006146:	4649      	mov	r1, r9
 8006148:	4638      	mov	r0, r7
 800614a:	47c0      	blx	r8
 800614c:	3001      	adds	r0, #1
 800614e:	d103      	bne.n	8006158 <_printf_common+0xac>
 8006150:	f04f 30ff 	mov.w	r0, #4294967295
 8006154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006158:	3501      	adds	r5, #1
 800615a:	e7c6      	b.n	80060ea <_printf_common+0x3e>
 800615c:	18e1      	adds	r1, r4, r3
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	2030      	movs	r0, #48	; 0x30
 8006162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006166:	4422      	add	r2, r4
 8006168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800616c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006170:	3302      	adds	r3, #2
 8006172:	e7c7      	b.n	8006104 <_printf_common+0x58>
 8006174:	2301      	movs	r3, #1
 8006176:	4622      	mov	r2, r4
 8006178:	4649      	mov	r1, r9
 800617a:	4638      	mov	r0, r7
 800617c:	47c0      	blx	r8
 800617e:	3001      	adds	r0, #1
 8006180:	d0e6      	beq.n	8006150 <_printf_common+0xa4>
 8006182:	3601      	adds	r6, #1
 8006184:	e7d9      	b.n	800613a <_printf_common+0x8e>
	...

08006188 <_printf_i>:
 8006188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	7e0f      	ldrb	r7, [r1, #24]
 800618e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006190:	2f78      	cmp	r7, #120	; 0x78
 8006192:	4691      	mov	r9, r2
 8006194:	4680      	mov	r8, r0
 8006196:	460c      	mov	r4, r1
 8006198:	469a      	mov	sl, r3
 800619a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800619e:	d807      	bhi.n	80061b0 <_printf_i+0x28>
 80061a0:	2f62      	cmp	r7, #98	; 0x62
 80061a2:	d80a      	bhi.n	80061ba <_printf_i+0x32>
 80061a4:	2f00      	cmp	r7, #0
 80061a6:	f000 80d4 	beq.w	8006352 <_printf_i+0x1ca>
 80061aa:	2f58      	cmp	r7, #88	; 0x58
 80061ac:	f000 80c0 	beq.w	8006330 <_printf_i+0x1a8>
 80061b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061b8:	e03a      	b.n	8006230 <_printf_i+0xa8>
 80061ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061be:	2b15      	cmp	r3, #21
 80061c0:	d8f6      	bhi.n	80061b0 <_printf_i+0x28>
 80061c2:	a101      	add	r1, pc, #4	; (adr r1, 80061c8 <_printf_i+0x40>)
 80061c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061c8:	08006221 	.word	0x08006221
 80061cc:	08006235 	.word	0x08006235
 80061d0:	080061b1 	.word	0x080061b1
 80061d4:	080061b1 	.word	0x080061b1
 80061d8:	080061b1 	.word	0x080061b1
 80061dc:	080061b1 	.word	0x080061b1
 80061e0:	08006235 	.word	0x08006235
 80061e4:	080061b1 	.word	0x080061b1
 80061e8:	080061b1 	.word	0x080061b1
 80061ec:	080061b1 	.word	0x080061b1
 80061f0:	080061b1 	.word	0x080061b1
 80061f4:	08006339 	.word	0x08006339
 80061f8:	08006261 	.word	0x08006261
 80061fc:	080062f3 	.word	0x080062f3
 8006200:	080061b1 	.word	0x080061b1
 8006204:	080061b1 	.word	0x080061b1
 8006208:	0800635b 	.word	0x0800635b
 800620c:	080061b1 	.word	0x080061b1
 8006210:	08006261 	.word	0x08006261
 8006214:	080061b1 	.word	0x080061b1
 8006218:	080061b1 	.word	0x080061b1
 800621c:	080062fb 	.word	0x080062fb
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	1d1a      	adds	r2, r3, #4
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	602a      	str	r2, [r5, #0]
 8006228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800622c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006230:	2301      	movs	r3, #1
 8006232:	e09f      	b.n	8006374 <_printf_i+0x1ec>
 8006234:	6820      	ldr	r0, [r4, #0]
 8006236:	682b      	ldr	r3, [r5, #0]
 8006238:	0607      	lsls	r7, r0, #24
 800623a:	f103 0104 	add.w	r1, r3, #4
 800623e:	6029      	str	r1, [r5, #0]
 8006240:	d501      	bpl.n	8006246 <_printf_i+0xbe>
 8006242:	681e      	ldr	r6, [r3, #0]
 8006244:	e003      	b.n	800624e <_printf_i+0xc6>
 8006246:	0646      	lsls	r6, r0, #25
 8006248:	d5fb      	bpl.n	8006242 <_printf_i+0xba>
 800624a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800624e:	2e00      	cmp	r6, #0
 8006250:	da03      	bge.n	800625a <_printf_i+0xd2>
 8006252:	232d      	movs	r3, #45	; 0x2d
 8006254:	4276      	negs	r6, r6
 8006256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800625a:	485a      	ldr	r0, [pc, #360]	; (80063c4 <_printf_i+0x23c>)
 800625c:	230a      	movs	r3, #10
 800625e:	e012      	b.n	8006286 <_printf_i+0xfe>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	6820      	ldr	r0, [r4, #0]
 8006264:	1d19      	adds	r1, r3, #4
 8006266:	6029      	str	r1, [r5, #0]
 8006268:	0605      	lsls	r5, r0, #24
 800626a:	d501      	bpl.n	8006270 <_printf_i+0xe8>
 800626c:	681e      	ldr	r6, [r3, #0]
 800626e:	e002      	b.n	8006276 <_printf_i+0xee>
 8006270:	0641      	lsls	r1, r0, #25
 8006272:	d5fb      	bpl.n	800626c <_printf_i+0xe4>
 8006274:	881e      	ldrh	r6, [r3, #0]
 8006276:	4853      	ldr	r0, [pc, #332]	; (80063c4 <_printf_i+0x23c>)
 8006278:	2f6f      	cmp	r7, #111	; 0x6f
 800627a:	bf0c      	ite	eq
 800627c:	2308      	moveq	r3, #8
 800627e:	230a      	movne	r3, #10
 8006280:	2100      	movs	r1, #0
 8006282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006286:	6865      	ldr	r5, [r4, #4]
 8006288:	60a5      	str	r5, [r4, #8]
 800628a:	2d00      	cmp	r5, #0
 800628c:	bfa2      	ittt	ge
 800628e:	6821      	ldrge	r1, [r4, #0]
 8006290:	f021 0104 	bicge.w	r1, r1, #4
 8006294:	6021      	strge	r1, [r4, #0]
 8006296:	b90e      	cbnz	r6, 800629c <_printf_i+0x114>
 8006298:	2d00      	cmp	r5, #0
 800629a:	d04b      	beq.n	8006334 <_printf_i+0x1ac>
 800629c:	4615      	mov	r5, r2
 800629e:	fbb6 f1f3 	udiv	r1, r6, r3
 80062a2:	fb03 6711 	mls	r7, r3, r1, r6
 80062a6:	5dc7      	ldrb	r7, [r0, r7]
 80062a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062ac:	4637      	mov	r7, r6
 80062ae:	42bb      	cmp	r3, r7
 80062b0:	460e      	mov	r6, r1
 80062b2:	d9f4      	bls.n	800629e <_printf_i+0x116>
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d10b      	bne.n	80062d0 <_printf_i+0x148>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	07de      	lsls	r6, r3, #31
 80062bc:	d508      	bpl.n	80062d0 <_printf_i+0x148>
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	6861      	ldr	r1, [r4, #4]
 80062c2:	4299      	cmp	r1, r3
 80062c4:	bfde      	ittt	le
 80062c6:	2330      	movle	r3, #48	; 0x30
 80062c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062d0:	1b52      	subs	r2, r2, r5
 80062d2:	6122      	str	r2, [r4, #16]
 80062d4:	f8cd a000 	str.w	sl, [sp]
 80062d8:	464b      	mov	r3, r9
 80062da:	aa03      	add	r2, sp, #12
 80062dc:	4621      	mov	r1, r4
 80062de:	4640      	mov	r0, r8
 80062e0:	f7ff fee4 	bl	80060ac <_printf_common>
 80062e4:	3001      	adds	r0, #1
 80062e6:	d14a      	bne.n	800637e <_printf_i+0x1f6>
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	b004      	add	sp, #16
 80062ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	f043 0320 	orr.w	r3, r3, #32
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	4833      	ldr	r0, [pc, #204]	; (80063c8 <_printf_i+0x240>)
 80062fc:	2778      	movs	r7, #120	; 0x78
 80062fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	6829      	ldr	r1, [r5, #0]
 8006306:	061f      	lsls	r7, r3, #24
 8006308:	f851 6b04 	ldr.w	r6, [r1], #4
 800630c:	d402      	bmi.n	8006314 <_printf_i+0x18c>
 800630e:	065f      	lsls	r7, r3, #25
 8006310:	bf48      	it	mi
 8006312:	b2b6      	uxthmi	r6, r6
 8006314:	07df      	lsls	r7, r3, #31
 8006316:	bf48      	it	mi
 8006318:	f043 0320 	orrmi.w	r3, r3, #32
 800631c:	6029      	str	r1, [r5, #0]
 800631e:	bf48      	it	mi
 8006320:	6023      	strmi	r3, [r4, #0]
 8006322:	b91e      	cbnz	r6, 800632c <_printf_i+0x1a4>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	f023 0320 	bic.w	r3, r3, #32
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	2310      	movs	r3, #16
 800632e:	e7a7      	b.n	8006280 <_printf_i+0xf8>
 8006330:	4824      	ldr	r0, [pc, #144]	; (80063c4 <_printf_i+0x23c>)
 8006332:	e7e4      	b.n	80062fe <_printf_i+0x176>
 8006334:	4615      	mov	r5, r2
 8006336:	e7bd      	b.n	80062b4 <_printf_i+0x12c>
 8006338:	682b      	ldr	r3, [r5, #0]
 800633a:	6826      	ldr	r6, [r4, #0]
 800633c:	6961      	ldr	r1, [r4, #20]
 800633e:	1d18      	adds	r0, r3, #4
 8006340:	6028      	str	r0, [r5, #0]
 8006342:	0635      	lsls	r5, r6, #24
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	d501      	bpl.n	800634c <_printf_i+0x1c4>
 8006348:	6019      	str	r1, [r3, #0]
 800634a:	e002      	b.n	8006352 <_printf_i+0x1ca>
 800634c:	0670      	lsls	r0, r6, #25
 800634e:	d5fb      	bpl.n	8006348 <_printf_i+0x1c0>
 8006350:	8019      	strh	r1, [r3, #0]
 8006352:	2300      	movs	r3, #0
 8006354:	6123      	str	r3, [r4, #16]
 8006356:	4615      	mov	r5, r2
 8006358:	e7bc      	b.n	80062d4 <_printf_i+0x14c>
 800635a:	682b      	ldr	r3, [r5, #0]
 800635c:	1d1a      	adds	r2, r3, #4
 800635e:	602a      	str	r2, [r5, #0]
 8006360:	681d      	ldr	r5, [r3, #0]
 8006362:	6862      	ldr	r2, [r4, #4]
 8006364:	2100      	movs	r1, #0
 8006366:	4628      	mov	r0, r5
 8006368:	f7f9 ff6a 	bl	8000240 <memchr>
 800636c:	b108      	cbz	r0, 8006372 <_printf_i+0x1ea>
 800636e:	1b40      	subs	r0, r0, r5
 8006370:	6060      	str	r0, [r4, #4]
 8006372:	6863      	ldr	r3, [r4, #4]
 8006374:	6123      	str	r3, [r4, #16]
 8006376:	2300      	movs	r3, #0
 8006378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800637c:	e7aa      	b.n	80062d4 <_printf_i+0x14c>
 800637e:	6923      	ldr	r3, [r4, #16]
 8006380:	462a      	mov	r2, r5
 8006382:	4649      	mov	r1, r9
 8006384:	4640      	mov	r0, r8
 8006386:	47d0      	blx	sl
 8006388:	3001      	adds	r0, #1
 800638a:	d0ad      	beq.n	80062e8 <_printf_i+0x160>
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	079b      	lsls	r3, r3, #30
 8006390:	d413      	bmi.n	80063ba <_printf_i+0x232>
 8006392:	68e0      	ldr	r0, [r4, #12]
 8006394:	9b03      	ldr	r3, [sp, #12]
 8006396:	4298      	cmp	r0, r3
 8006398:	bfb8      	it	lt
 800639a:	4618      	movlt	r0, r3
 800639c:	e7a6      	b.n	80062ec <_printf_i+0x164>
 800639e:	2301      	movs	r3, #1
 80063a0:	4632      	mov	r2, r6
 80063a2:	4649      	mov	r1, r9
 80063a4:	4640      	mov	r0, r8
 80063a6:	47d0      	blx	sl
 80063a8:	3001      	adds	r0, #1
 80063aa:	d09d      	beq.n	80062e8 <_printf_i+0x160>
 80063ac:	3501      	adds	r5, #1
 80063ae:	68e3      	ldr	r3, [r4, #12]
 80063b0:	9903      	ldr	r1, [sp, #12]
 80063b2:	1a5b      	subs	r3, r3, r1
 80063b4:	42ab      	cmp	r3, r5
 80063b6:	dcf2      	bgt.n	800639e <_printf_i+0x216>
 80063b8:	e7eb      	b.n	8006392 <_printf_i+0x20a>
 80063ba:	2500      	movs	r5, #0
 80063bc:	f104 0619 	add.w	r6, r4, #25
 80063c0:	e7f5      	b.n	80063ae <_printf_i+0x226>
 80063c2:	bf00      	nop
 80063c4:	080066c5 	.word	0x080066c5
 80063c8:	080066d6 	.word	0x080066d6

080063cc <__sflush_r>:
 80063cc:	898a      	ldrh	r2, [r1, #12]
 80063ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d2:	4605      	mov	r5, r0
 80063d4:	0710      	lsls	r0, r2, #28
 80063d6:	460c      	mov	r4, r1
 80063d8:	d458      	bmi.n	800648c <__sflush_r+0xc0>
 80063da:	684b      	ldr	r3, [r1, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	dc05      	bgt.n	80063ec <__sflush_r+0x20>
 80063e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	dc02      	bgt.n	80063ec <__sflush_r+0x20>
 80063e6:	2000      	movs	r0, #0
 80063e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063ee:	2e00      	cmp	r6, #0
 80063f0:	d0f9      	beq.n	80063e6 <__sflush_r+0x1a>
 80063f2:	2300      	movs	r3, #0
 80063f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063f8:	682f      	ldr	r7, [r5, #0]
 80063fa:	6a21      	ldr	r1, [r4, #32]
 80063fc:	602b      	str	r3, [r5, #0]
 80063fe:	d032      	beq.n	8006466 <__sflush_r+0x9a>
 8006400:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006402:	89a3      	ldrh	r3, [r4, #12]
 8006404:	075a      	lsls	r2, r3, #29
 8006406:	d505      	bpl.n	8006414 <__sflush_r+0x48>
 8006408:	6863      	ldr	r3, [r4, #4]
 800640a:	1ac0      	subs	r0, r0, r3
 800640c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800640e:	b10b      	cbz	r3, 8006414 <__sflush_r+0x48>
 8006410:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006412:	1ac0      	subs	r0, r0, r3
 8006414:	2300      	movs	r3, #0
 8006416:	4602      	mov	r2, r0
 8006418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800641a:	6a21      	ldr	r1, [r4, #32]
 800641c:	4628      	mov	r0, r5
 800641e:	47b0      	blx	r6
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	d106      	bne.n	8006434 <__sflush_r+0x68>
 8006426:	6829      	ldr	r1, [r5, #0]
 8006428:	291d      	cmp	r1, #29
 800642a:	d82b      	bhi.n	8006484 <__sflush_r+0xb8>
 800642c:	4a29      	ldr	r2, [pc, #164]	; (80064d4 <__sflush_r+0x108>)
 800642e:	410a      	asrs	r2, r1
 8006430:	07d6      	lsls	r6, r2, #31
 8006432:	d427      	bmi.n	8006484 <__sflush_r+0xb8>
 8006434:	2200      	movs	r2, #0
 8006436:	6062      	str	r2, [r4, #4]
 8006438:	04d9      	lsls	r1, r3, #19
 800643a:	6922      	ldr	r2, [r4, #16]
 800643c:	6022      	str	r2, [r4, #0]
 800643e:	d504      	bpl.n	800644a <__sflush_r+0x7e>
 8006440:	1c42      	adds	r2, r0, #1
 8006442:	d101      	bne.n	8006448 <__sflush_r+0x7c>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	b903      	cbnz	r3, 800644a <__sflush_r+0x7e>
 8006448:	6560      	str	r0, [r4, #84]	; 0x54
 800644a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800644c:	602f      	str	r7, [r5, #0]
 800644e:	2900      	cmp	r1, #0
 8006450:	d0c9      	beq.n	80063e6 <__sflush_r+0x1a>
 8006452:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006456:	4299      	cmp	r1, r3
 8006458:	d002      	beq.n	8006460 <__sflush_r+0x94>
 800645a:	4628      	mov	r0, r5
 800645c:	f7ff fc96 	bl	8005d8c <_free_r>
 8006460:	2000      	movs	r0, #0
 8006462:	6360      	str	r0, [r4, #52]	; 0x34
 8006464:	e7c0      	b.n	80063e8 <__sflush_r+0x1c>
 8006466:	2301      	movs	r3, #1
 8006468:	4628      	mov	r0, r5
 800646a:	47b0      	blx	r6
 800646c:	1c41      	adds	r1, r0, #1
 800646e:	d1c8      	bne.n	8006402 <__sflush_r+0x36>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0c5      	beq.n	8006402 <__sflush_r+0x36>
 8006476:	2b1d      	cmp	r3, #29
 8006478:	d001      	beq.n	800647e <__sflush_r+0xb2>
 800647a:	2b16      	cmp	r3, #22
 800647c:	d101      	bne.n	8006482 <__sflush_r+0xb6>
 800647e:	602f      	str	r7, [r5, #0]
 8006480:	e7b1      	b.n	80063e6 <__sflush_r+0x1a>
 8006482:	89a3      	ldrh	r3, [r4, #12]
 8006484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006488:	81a3      	strh	r3, [r4, #12]
 800648a:	e7ad      	b.n	80063e8 <__sflush_r+0x1c>
 800648c:	690f      	ldr	r7, [r1, #16]
 800648e:	2f00      	cmp	r7, #0
 8006490:	d0a9      	beq.n	80063e6 <__sflush_r+0x1a>
 8006492:	0793      	lsls	r3, r2, #30
 8006494:	680e      	ldr	r6, [r1, #0]
 8006496:	bf08      	it	eq
 8006498:	694b      	ldreq	r3, [r1, #20]
 800649a:	600f      	str	r7, [r1, #0]
 800649c:	bf18      	it	ne
 800649e:	2300      	movne	r3, #0
 80064a0:	eba6 0807 	sub.w	r8, r6, r7
 80064a4:	608b      	str	r3, [r1, #8]
 80064a6:	f1b8 0f00 	cmp.w	r8, #0
 80064aa:	dd9c      	ble.n	80063e6 <__sflush_r+0x1a>
 80064ac:	6a21      	ldr	r1, [r4, #32]
 80064ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064b0:	4643      	mov	r3, r8
 80064b2:	463a      	mov	r2, r7
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b0      	blx	r6
 80064b8:	2800      	cmp	r0, #0
 80064ba:	dc06      	bgt.n	80064ca <__sflush_r+0xfe>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c2:	81a3      	strh	r3, [r4, #12]
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295
 80064c8:	e78e      	b.n	80063e8 <__sflush_r+0x1c>
 80064ca:	4407      	add	r7, r0
 80064cc:	eba8 0800 	sub.w	r8, r8, r0
 80064d0:	e7e9      	b.n	80064a6 <__sflush_r+0xda>
 80064d2:	bf00      	nop
 80064d4:	dfbffffe 	.word	0xdfbffffe

080064d8 <_fflush_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	690b      	ldr	r3, [r1, #16]
 80064dc:	4605      	mov	r5, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	b913      	cbnz	r3, 80064e8 <_fflush_r+0x10>
 80064e2:	2500      	movs	r5, #0
 80064e4:	4628      	mov	r0, r5
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	b118      	cbz	r0, 80064f2 <_fflush_r+0x1a>
 80064ea:	6a03      	ldr	r3, [r0, #32]
 80064ec:	b90b      	cbnz	r3, 80064f2 <_fflush_r+0x1a>
 80064ee:	f7ff f997 	bl	8005820 <__sinit>
 80064f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f3      	beq.n	80064e2 <_fflush_r+0xa>
 80064fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064fc:	07d0      	lsls	r0, r2, #31
 80064fe:	d404      	bmi.n	800650a <_fflush_r+0x32>
 8006500:	0599      	lsls	r1, r3, #22
 8006502:	d402      	bmi.n	800650a <_fflush_r+0x32>
 8006504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006506:	f7ff fc3e 	bl	8005d86 <__retarget_lock_acquire_recursive>
 800650a:	4628      	mov	r0, r5
 800650c:	4621      	mov	r1, r4
 800650e:	f7ff ff5d 	bl	80063cc <__sflush_r>
 8006512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006514:	07da      	lsls	r2, r3, #31
 8006516:	4605      	mov	r5, r0
 8006518:	d4e4      	bmi.n	80064e4 <_fflush_r+0xc>
 800651a:	89a3      	ldrh	r3, [r4, #12]
 800651c:	059b      	lsls	r3, r3, #22
 800651e:	d4e1      	bmi.n	80064e4 <_fflush_r+0xc>
 8006520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006522:	f7ff fc31 	bl	8005d88 <__retarget_lock_release_recursive>
 8006526:	e7dd      	b.n	80064e4 <_fflush_r+0xc>

08006528 <__swhatbuf_r>:
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	460c      	mov	r4, r1
 800652c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006530:	2900      	cmp	r1, #0
 8006532:	b096      	sub	sp, #88	; 0x58
 8006534:	4615      	mov	r5, r2
 8006536:	461e      	mov	r6, r3
 8006538:	da0d      	bge.n	8006556 <__swhatbuf_r+0x2e>
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006540:	f04f 0100 	mov.w	r1, #0
 8006544:	bf0c      	ite	eq
 8006546:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800654a:	2340      	movne	r3, #64	; 0x40
 800654c:	2000      	movs	r0, #0
 800654e:	6031      	str	r1, [r6, #0]
 8006550:	602b      	str	r3, [r5, #0]
 8006552:	b016      	add	sp, #88	; 0x58
 8006554:	bd70      	pop	{r4, r5, r6, pc}
 8006556:	466a      	mov	r2, sp
 8006558:	f000 f848 	bl	80065ec <_fstat_r>
 800655c:	2800      	cmp	r0, #0
 800655e:	dbec      	blt.n	800653a <__swhatbuf_r+0x12>
 8006560:	9901      	ldr	r1, [sp, #4]
 8006562:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006566:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800656a:	4259      	negs	r1, r3
 800656c:	4159      	adcs	r1, r3
 800656e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006572:	e7eb      	b.n	800654c <__swhatbuf_r+0x24>

08006574 <__smakebuf_r>:
 8006574:	898b      	ldrh	r3, [r1, #12]
 8006576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006578:	079d      	lsls	r5, r3, #30
 800657a:	4606      	mov	r6, r0
 800657c:	460c      	mov	r4, r1
 800657e:	d507      	bpl.n	8006590 <__smakebuf_r+0x1c>
 8006580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	6123      	str	r3, [r4, #16]
 8006588:	2301      	movs	r3, #1
 800658a:	6163      	str	r3, [r4, #20]
 800658c:	b002      	add	sp, #8
 800658e:	bd70      	pop	{r4, r5, r6, pc}
 8006590:	ab01      	add	r3, sp, #4
 8006592:	466a      	mov	r2, sp
 8006594:	f7ff ffc8 	bl	8006528 <__swhatbuf_r>
 8006598:	9900      	ldr	r1, [sp, #0]
 800659a:	4605      	mov	r5, r0
 800659c:	4630      	mov	r0, r6
 800659e:	f7ff f827 	bl	80055f0 <_malloc_r>
 80065a2:	b948      	cbnz	r0, 80065b8 <__smakebuf_r+0x44>
 80065a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065a8:	059a      	lsls	r2, r3, #22
 80065aa:	d4ef      	bmi.n	800658c <__smakebuf_r+0x18>
 80065ac:	f023 0303 	bic.w	r3, r3, #3
 80065b0:	f043 0302 	orr.w	r3, r3, #2
 80065b4:	81a3      	strh	r3, [r4, #12]
 80065b6:	e7e3      	b.n	8006580 <__smakebuf_r+0xc>
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	6020      	str	r0, [r4, #0]
 80065bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c0:	81a3      	strh	r3, [r4, #12]
 80065c2:	9b00      	ldr	r3, [sp, #0]
 80065c4:	6163      	str	r3, [r4, #20]
 80065c6:	9b01      	ldr	r3, [sp, #4]
 80065c8:	6120      	str	r0, [r4, #16]
 80065ca:	b15b      	cbz	r3, 80065e4 <__smakebuf_r+0x70>
 80065cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065d0:	4630      	mov	r0, r6
 80065d2:	f000 f81d 	bl	8006610 <_isatty_r>
 80065d6:	b128      	cbz	r0, 80065e4 <__smakebuf_r+0x70>
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	f023 0303 	bic.w	r3, r3, #3
 80065de:	f043 0301 	orr.w	r3, r3, #1
 80065e2:	81a3      	strh	r3, [r4, #12]
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	431d      	orrs	r5, r3
 80065e8:	81a5      	strh	r5, [r4, #12]
 80065ea:	e7cf      	b.n	800658c <__smakebuf_r+0x18>

080065ec <_fstat_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4d07      	ldr	r5, [pc, #28]	; (800660c <_fstat_r+0x20>)
 80065f0:	2300      	movs	r3, #0
 80065f2:	4604      	mov	r4, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	f7fa fb49 	bl	8000c90 <_fstat>
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	d102      	bne.n	8006608 <_fstat_r+0x1c>
 8006602:	682b      	ldr	r3, [r5, #0]
 8006604:	b103      	cbz	r3, 8006608 <_fstat_r+0x1c>
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	bd38      	pop	{r3, r4, r5, pc}
 800660a:	bf00      	nop
 800660c:	20000a50 	.word	0x20000a50

08006610 <_isatty_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4d06      	ldr	r5, [pc, #24]	; (800662c <_isatty_r+0x1c>)
 8006614:	2300      	movs	r3, #0
 8006616:	4604      	mov	r4, r0
 8006618:	4608      	mov	r0, r1
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	f7fa faa6 	bl	8000b6c <_isatty>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_isatty_r+0x1a>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	b103      	cbz	r3, 800662a <_isatty_r+0x1a>
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	20000a50 	.word	0x20000a50

08006630 <_init>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	bf00      	nop
 8006634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006636:	bc08      	pop	{r3}
 8006638:	469e      	mov	lr, r3
 800663a:	4770      	bx	lr

0800663c <_fini>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	bf00      	nop
 8006640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006642:	bc08      	pop	{r3}
 8006644:	469e      	mov	lr, r3
 8006646:	4770      	bx	lr

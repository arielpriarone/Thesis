
Novelty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a00  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c5c  08005c5c  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c5c  08005c5c  00015c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c64  08005c64  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c68  08005c68  00015c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  08005cc8  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  08005d68  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008a8  2000019c  08005e08  0002019c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a44  08005e08  00020a44  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201ca  2**0
                  CONTENTS, READONLY
 15 .debug_info   00013a1d  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002b58  00000000  00000000  00033c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000f00  00000000  00000000  00036788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b85  00000000  00000000  00037688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029b57  00000000  00000000  0003820d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00013267  00000000  00000000  00061d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ffac6  00000000  00000000  00074fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004368  00000000  00000000  00174a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  00178dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000019c 	.word	0x2000019c
 800021c:	00000000 	.word	0x00000000
 8000220:	08005be8 	.word	0x08005be8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a0 	.word	0x200001a0
 800023c:	08005be8 	.word	0x08005be8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fd8d 	bl	800110e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f816 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f9a2 	bl	8000940 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 f982 	bl	8000904 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f922 	bl	8000848 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000604:	f000 f950 	bl	80008a8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000608:	f000 f87e 	bl	8000708 <MX_ADC1_Init>
  MX_ETH_Init();
 800060c:	f000 f8ce 	bl	80007ac <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000610:	220a      	movs	r2, #10
 8000612:	4902      	ldr	r1, [pc, #8]	; (800061c <main+0x30>)
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <main+0x34>)
 8000616:	f000 fe3f 	bl	8001298 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800061a:	e7fe      	b.n	800061a <main+0x2e>
 800061c:	200008d8 	.word	0x200008d8
 8000620:	200001f0 	.word	0x200001f0

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	; 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 ff00 	bl	8005438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000648:	f002 fcde 	bl	8003008 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <SystemClock_Config+0xdc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <SystemClock_Config+0xdc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <SystemClock_Config+0xdc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000664:	4b27      	ldr	r3, [pc, #156]	; (8000704 <SystemClock_Config+0xe0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800066c:	4a25      	ldr	r2, [pc, #148]	; (8000704 <SystemClock_Config+0xe0>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000684:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000688:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000698:	2360      	movs	r3, #96	; 0x60
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fd0b 	bl	80030c8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b8:	f000 fa26 	bl	8000b08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006bc:	f002 fcb4 	bl	8003028 <HAL_PWREx_EnableOverDrive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006c6:	f000 fa1f 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2103      	movs	r1, #3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 ff9c 	bl	8003624 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006f2:	f000 fa09 	bl	8000b08 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_ADC1_Init+0x98>)
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <MX_ADC1_Init+0x9c>)
 800071e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000722:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000736:	2201      	movs	r2, #1
 8000738:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_ADC1_Init+0x98>)
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_ADC1_Init+0xa0>)
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000756:	2201      	movs	r2, #1
 8000758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_ADC1_Init+0x98>)
 800075c:	2201      	movs	r2, #1
 800075e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000764:	2201      	movs	r2, #1
 8000766:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_ADC1_Init+0x98>)
 800076a:	f000 fd51 	bl	8001210 <HAL_ADC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000774:	f000 f9c8 	bl	8000b08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000778:	2300      	movs	r3, #0
 800077a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800077c:	2301      	movs	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_ADC1_Init+0x98>)
 800078a:	f000 fe93 	bl	80014b4 <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000794:	f000 f9b8 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200001f0 	.word	0x200001f0
 80007a4:	40012000 	.word	0x40012000
 80007a8:	0f000001 	.word	0x0f000001

080007ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_ETH_Init+0x84>)
 80007b2:	4a20      	ldr	r2, [pc, #128]	; (8000834 <MX_ETH_Init+0x88>)
 80007b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_ETH_Init+0x8c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_ETH_Init+0x8c>)
 80007be:	2280      	movs	r2, #128	; 0x80
 80007c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_ETH_Init+0x8c>)
 80007c4:	22e1      	movs	r2, #225	; 0xe1
 80007c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_ETH_Init+0x8c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_ETH_Init+0x8c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_ETH_Init+0x8c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_ETH_Init+0x84>)
 80007dc:	4a16      	ldr	r2, [pc, #88]	; (8000838 <MX_ETH_Init+0x8c>)
 80007de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_ETH_Init+0x84>)
 80007e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_ETH_Init+0x84>)
 80007ea:	4a14      	ldr	r2, [pc, #80]	; (800083c <MX_ETH_Init+0x90>)
 80007ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_ETH_Init+0x84>)
 80007f0:	4a13      	ldr	r2, [pc, #76]	; (8000840 <MX_ETH_Init+0x94>)
 80007f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_ETH_Init+0x84>)
 80007f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <MX_ETH_Init+0x84>)
 80007fe:	f001 fdb5 	bl	800236c <HAL_ETH_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000808:	f000 f97e 	bl	8000b08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800080c:	2238      	movs	r2, #56	; 0x38
 800080e:	2100      	movs	r1, #0
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_ETH_Init+0x98>)
 8000812:	f004 fe11 	bl	8005438 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_ETH_Init+0x98>)
 8000818:	2221      	movs	r2, #33	; 0x21
 800081a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_ETH_Init+0x98>)
 800081e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000822:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_ETH_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000298 	.word	0x20000298
 8000834:	40028000 	.word	0x40028000
 8000838:	200008ec 	.word	0x200008ec
 800083c:	200000fc 	.word	0x200000fc
 8000840:	2000005c 	.word	0x2000005c
 8000844:	200001b8 	.word	0x200001b8

08000848 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800084e:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <MX_USART3_UART_Init+0x5c>)
 8000850:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800088c:	f003 fd18 	bl	80042c0 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 f937 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000348 	.word	0x20000348
 80008a4:	40004800 	.word	0x40004800

080008a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2206      	movs	r2, #6
 80008b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2202      	movs	r2, #2
 80008be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	f002 fa43 	bl	8002d76 <HAL_PCD_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f907 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200003d0 	.word	0x200003d0

08000904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_DMA_Init+0x38>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <MX_DMA_Init+0x38>)
 8000910:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_DMA_Init+0x38>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2038      	movs	r0, #56	; 0x38
 8000928:	f001 f971 	bl	8001c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800092c:	2038      	movs	r0, #56	; 0x38
 800092e:	f001 f98a 	bl	8001c46 <HAL_NVIC_EnableIRQ>

}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	; 0x30
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b47      	ldr	r3, [pc, #284]	; (8000a74 <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a46      	ldr	r2, [pc, #280]	; (8000a74 <MX_GPIO_Init+0x134>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b44      	ldr	r3, [pc, #272]	; (8000a74 <MX_GPIO_Init+0x134>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	4b41      	ldr	r3, [pc, #260]	; (8000a74 <MX_GPIO_Init+0x134>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a40      	ldr	r2, [pc, #256]	; (8000a74 <MX_GPIO_Init+0x134>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b3e      	ldr	r3, [pc, #248]	; (8000a74 <MX_GPIO_Init+0x134>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b3b      	ldr	r3, [pc, #236]	; (8000a74 <MX_GPIO_Init+0x134>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a3a      	ldr	r2, [pc, #232]	; (8000a74 <MX_GPIO_Init+0x134>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <MX_GPIO_Init+0x134>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b35      	ldr	r3, [pc, #212]	; (8000a74 <MX_GPIO_Init+0x134>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a34      	ldr	r2, [pc, #208]	; (8000a74 <MX_GPIO_Init+0x134>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <MX_GPIO_Init+0x134>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <MX_GPIO_Init+0x134>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a2e      	ldr	r2, [pc, #184]	; (8000a74 <MX_GPIO_Init+0x134>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <MX_GPIO_Init+0x134>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ce:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <MX_GPIO_Init+0x134>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <MX_GPIO_Init+0x134>)
 80009d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <MX_GPIO_Init+0x134>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80009ec:	4822      	ldr	r0, [pc, #136]	; (8000a78 <MX_GPIO_Init+0x138>)
 80009ee:	f002 f98f 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2140      	movs	r1, #64	; 0x40
 80009f6:	4821      	ldr	r0, [pc, #132]	; (8000a7c <MX_GPIO_Init+0x13c>)
 80009f8:	f002 f98a 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	481b      	ldr	r0, [pc, #108]	; (8000a80 <MX_GPIO_Init+0x140>)
 8000a14:	f001 ffd0 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a18:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <MX_GPIO_Init+0x138>)
 8000a32:	f001 ffc1 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a36:	2340      	movs	r3, #64	; 0x40
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <MX_GPIO_Init+0x13c>)
 8000a4e:	f001 ffb3 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_GPIO_Init+0x13c>)
 8000a66:	f001 ffa7 	bl	80029b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	; 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40021800 	.word	0x40021800
 8000a80:	40020800 	.word	0x40020800

08000a84 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) { //what to do when the analogue acquisition end
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

    // Calculate the length of the resulting string
    size_t stringLength = ADC_BUF_LEN * 6; // Assuming up to 5 digits per number and 1 for the tab
 8000a8c:	233c      	movs	r3, #60	; 0x3c
 8000a8e:	60fb      	str	r3, [r7, #12]

    // Allocate memory for the string
    char *result = (char *)malloc(stringLength + 1); // +1 for the null terminator
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f004 fbf3 	bl	8005280 <malloc>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	60bb      	str	r3, [r7, #8]

    if(result == NULL){
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d101      	bne.n	8000aa8 <HAL_ADC_ConvCpltCallback+0x24>
    	Error_Handler();
 8000aa4:	f000 f830 	bl	8000b08 <Error_Handler>
    }

    // Convert uint16_t array to string
    uint16ArrayToString(adc_buf, ADC_BUF_LEN, result);
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	210a      	movs	r1, #10
 8000aac:	4812      	ldr	r0, [pc, #72]	; (8000af8 <HAL_ADC_ConvCpltCallback+0x74>)
 8000aae:	f000 f837 	bl	8000b20 <uint16ArrayToString>

	if(HAL_UART_Transmit(&huart3, (const uint8_t *)result, stringLength , 100) != HAL_OK){
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	2364      	movs	r3, #100	; 0x64
 8000ab8:	68b9      	ldr	r1, [r7, #8]
 8000aba:	4810      	ldr	r0, [pc, #64]	; (8000afc <HAL_ADC_ConvCpltCallback+0x78>)
 8000abc:	f003 fc4e 	bl	800435c <HAL_UART_Transmit>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_ADC_ConvCpltCallback+0x46>
			Error_Handler();
 8000ac6:	f000 f81f 	bl	8000b08 <Error_Handler>
		 }
	if(HAL_UART_Transmit(&huart3, (const uint8_t *)"\r\n", strlen("\n") , 100) != HAL_OK){
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	2201      	movs	r2, #1
 8000ace:	490c      	ldr	r1, [pc, #48]	; (8000b00 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <HAL_ADC_ConvCpltCallback+0x78>)
 8000ad2:	f003 fc43 	bl	800435c <HAL_UART_Transmit>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_ADC_ConvCpltCallback+0x5c>
				Error_Handler();
 8000adc:	f000 f814 	bl	8000b08 <Error_Handler>
			 }
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4808      	ldr	r0, [pc, #32]	; (8000b04 <HAL_ADC_ConvCpltCallback+0x80>)
 8000ae4:	f002 f92d 	bl	8002d42 <HAL_GPIO_TogglePin>


	// Don't forget to free the allocated memory
	free(result);
 8000ae8:	68b8      	ldr	r0, [r7, #8]
 8000aea:	f004 fbd1 	bl	8005290 <free>
}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200008d8 	.word	0x200008d8
 8000afc:	20000348 	.word	0x20000348
 8000b00:	08005c00 	.word	0x08005c00
 8000b04:	40020400 	.word	0x40020400

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000b10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b14:	4801      	ldr	r0, [pc, #4]	; (8000b1c <Error_Handler+0x14>)
 8000b16:	f002 f914 	bl	8002d42 <HAL_GPIO_TogglePin>
 8000b1a:	e7f9      	b.n	8000b10 <Error_Handler+0x8>
 8000b1c:	40020400 	.word	0x40020400

08000b20 <uint16ArrayToString>:
        result += start[var];
    }
    return result;
}

void uint16ArrayToString(const uint16_t *uintArray, size_t length, char *result) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
    size_t i;
    for (i = 0; i < length - 1; ++i) {
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e009      	b.n	8000b46 <uint16ArrayToString+0x26>
        // sprintf(result, "%u\t", uintArray[i]);
        result += strlen(result);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff fb84 	bl	8000240 <strlen>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	607b      	str	r3, [r7, #4]
    for (i = 0; i < length - 1; ++i) {
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	3301      	adds	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d3f0      	bcc.n	8000b32 <uint16ArrayToString+0x12>
    }
    sprintf(result, "%u", uintArray[i]);  // Last element without a tab
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4903      	ldr	r1, [pc, #12]	; (8000b6c <uint16ArrayToString+0x4c>)
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f004 fc4a 	bl	80053f8 <siprintf>
}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	08005c04 	.word	0x08005c04

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a2d      	ldr	r2, [pc, #180]	; (8000c8c <HAL_ADC_MspInit+0xd4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d153      	bne.n	8000c82 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a2c      	ldr	r2, [pc, #176]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a26      	ldr	r2, [pc, #152]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	481d      	ldr	r0, [pc, #116]	; (8000c94 <HAL_ADC_MspInit+0xdc>)
 8000c1e:	f001 fecb 	bl	80029b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c24:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c58:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c68:	f001 f808 	bl	8001c7c <HAL_DMA_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000c72:	f7ff ff49 	bl	8000b08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c7a:	639a      	str	r2, [r3, #56]	; 0x38
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40012000 	.word	0x40012000
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	20000238 	.word	0x20000238
 8000c9c:	40026410 	.word	0x40026410

08000ca0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a4e      	ldr	r2, [pc, #312]	; (8000df8 <HAL_ETH_MspInit+0x158>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	f040 8096 	bne.w	8000df0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cc4:	4b4d      	ldr	r3, [pc, #308]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	4a4c      	ldr	r2, [pc, #304]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000cca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cce:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cd8:	623b      	str	r3, [r7, #32]
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	4a46      	ldr	r2, [pc, #280]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000ce2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce8:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	4b41      	ldr	r3, [pc, #260]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	4a40      	ldr	r2, [pc, #256]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000cfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000d00:	4b3e      	ldr	r3, [pc, #248]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0c:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a3a      	ldr	r2, [pc, #232]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b38      	ldr	r3, [pc, #224]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	4a2e      	ldr	r2, [pc, #184]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	6313      	str	r3, [r2, #48]	; 0x30
 8000d48:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d54:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4a28      	ldr	r2, [pc, #160]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <HAL_ETH_MspInit+0x15c>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d6c:	2332      	movs	r3, #50	; 0x32
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7c:	230b      	movs	r3, #11
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	481e      	ldr	r0, [pc, #120]	; (8000e00 <HAL_ETH_MspInit+0x160>)
 8000d88:	f001 fe16 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d8c:	2386      	movs	r3, #134	; 0x86
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d9c:	230b      	movs	r3, #11
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	4817      	ldr	r0, [pc, #92]	; (8000e04 <HAL_ETH_MspInit+0x164>)
 8000da8:	f001 fe06 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dbe:	230b      	movs	r3, #11
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480f      	ldr	r0, [pc, #60]	; (8000e08 <HAL_ETH_MspInit+0x168>)
 8000dca:	f001 fdf5 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de0:	230b      	movs	r3, #11
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	4808      	ldr	r0, [pc, #32]	; (8000e0c <HAL_ETH_MspInit+0x16c>)
 8000dec:	f001 fde4 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	3738      	adds	r7, #56	; 0x38
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40028000 	.word	0x40028000
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020800 	.word	0x40020800
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40021800 	.word	0x40021800

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0ae      	sub	sp, #184	; 0xb8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2290      	movs	r2, #144	; 0x90
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f004 fb01 	bl	8005438 <memset>
  if(huart->Instance==USART3)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <HAL_UART_MspInit+0xb4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d13c      	bne.n	8000eba <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fe0e 	bl	8003a70 <HAL_RCCEx_PeriphCLKConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e5a:	f7ff fe55 	bl	8000b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <HAL_UART_MspInit+0xb8>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_UART_MspInit+0xb8>)
 8000e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_UART_MspInit+0xb8>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_UART_MspInit+0xb8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <HAL_UART_MspInit+0xb8>)
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_UART_MspInit+0xb8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ea8:	2307      	movs	r3, #7
 8000eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_UART_MspInit+0xbc>)
 8000eb6:	f001 fd7f 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	37b8      	adds	r7, #184	; 0xb8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40004800 	.word	0x40004800
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020c00 	.word	0x40020c00

08000ed0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0ae      	sub	sp, #184	; 0xb8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2290      	movs	r2, #144	; 0x90
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f004 faa1 	bl	8005438 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000efe:	d159      	bne.n	8000fb4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f04:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fdad 	bl	8003a70 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f1c:	f7ff fdf4 	bl	8000b08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <HAL_PCD_MspInit+0xec>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	4a25      	ldr	r2, [pc, #148]	; (8000fbc <HAL_PCD_MspInit+0xec>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <HAL_PCD_MspInit+0xec>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f38:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f52:	230a      	movs	r3, #10
 8000f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4818      	ldr	r0, [pc, #96]	; (8000fc0 <HAL_PCD_MspInit+0xf0>)
 8000f60:	f001 fd2a 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <HAL_PCD_MspInit+0xf0>)
 8000f80:	f001 fd1a 	bl	80029b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_PCD_MspInit+0xec>)
 8000f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f88:	4a0c      	ldr	r2, [pc, #48]	; (8000fbc <HAL_PCD_MspInit+0xec>)
 8000f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8e:	6353      	str	r3, [r2, #52]	; 0x34
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_PCD_MspInit+0xec>)
 8000f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <HAL_PCD_MspInit+0xec>)
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_PCD_MspInit+0xec>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <HAL_PCD_MspInit+0xec>)
 8000faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fb4:	bf00      	nop
 8000fb6:	37b8      	adds	r7, #184	; 0xb8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8ba 	bl	8001188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <DMA2_Stream0_IRQHandler+0x10>)
 800101e:	f000 ff3b 	bl	8001e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000238 	.word	0x20000238

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f004 fa04 	bl	8005468 <__errno>
 8001060:	4603      	mov	r3, r0
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20080000 	.word	0x20080000
 800108c:	00000400 	.word	0x00000400
 8001090:	200008f4 	.word	0x200008f4
 8001094:	20000a48 	.word	0x20000a48

08001098 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <SystemInit+0x20>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <SystemInit+0x20>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010c2:	490e      	ldr	r1, [pc, #56]	; (80010fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010c4:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010d8:	4c0b      	ldr	r4, [pc, #44]	; (8001108 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010e6:	f7ff ffd7 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ea:	f004 f9c3 	bl	8005474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ee:	f7ff fa7d 	bl	80005ec <main>
  bx  lr    
 80010f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001100:	08005c6c 	.word	0x08005c6c
  ldr r2, =_sbss
 8001104:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001108:	20000a44 	.word	0x20000a44

0800110c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC_IRQHandler>

0800110e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001112:	2003      	movs	r0, #3
 8001114:	f000 fd70 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001118:	2000      	movs	r0, #0
 800111a:	f000 f805 	bl	8001128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111e:	f7ff fd27 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x54>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x58>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fd8b 	bl	8001c62 <HAL_SYSTICK_Config>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e00e      	b.n	8001174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d80a      	bhi.n	8001172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115c:	2200      	movs	r2, #0
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f000 fd53 	bl	8001c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_InitTick+0x5c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e000      	b.n	8001174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000000 	.word	0x20000000
 8001180:	20000008 	.word	0x20000008
 8001184:	20000004 	.word	0x20000004

08001188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x20>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x24>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_IncTick+0x24>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008
 80011ac:	200008f8 	.word	0x200008f8

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	200008f8 	.word	0x200008f8

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffde 	bl	80011b0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008

08001210 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e031      	b.n	800128a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	2b00      	cmp	r3, #0
 800122c:	d109      	bne.n	8001242 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fcc2 	bl	8000bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b00      	cmp	r3, #0
 800124c:	d116      	bne.n	800127c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_ADC_Init+0x84>)
 8001254:	4013      	ands	r3, r2
 8001256:	f043 0202 	orr.w	r2, r3, #2
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fa7e 	bl	8001760 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
 800127a:	e001      	b.n	8001280 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	ffffeefd 	.word	0xffffeefd

08001298 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d101      	bne.n	80012b6 <HAL_ADC_Start_DMA+0x1e>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e0d4      	b.n	8001460 <HAL_ADC_Start_DMA+0x1c8>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d018      	beq.n	80012fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80012dc:	4b62      	ldr	r3, [pc, #392]	; (8001468 <HAL_ADC_Start_DMA+0x1d0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a62      	ldr	r2, [pc, #392]	; (800146c <HAL_ADC_Start_DMA+0x1d4>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	0c9a      	lsrs	r2, r3, #18
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80012f0:	e002      	b.n	80012f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f9      	bne.n	80012f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b01      	cmp	r3, #1
 800130a:	f040 809c 	bne.w	8001446 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001312:	4b57      	ldr	r3, [pc, #348]	; (8001470 <HAL_ADC_Start_DMA+0x1d8>)
 8001314:	4013      	ands	r3, r2
 8001316:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001334:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001348:	d106      	bne.n	8001358 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f023 0206 	bic.w	r2, r3, #6
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
 8001356:	e002      	b.n	800135e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136a:	4a42      	ldr	r2, [pc, #264]	; (8001474 <HAL_ADC_Start_DMA+0x1dc>)
 800136c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001372:	4a41      	ldr	r2, [pc, #260]	; (8001478 <HAL_ADC_Start_DMA+0x1e0>)
 8001374:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	4a40      	ldr	r2, [pc, #256]	; (800147c <HAL_ADC_Start_DMA+0x1e4>)
 800137c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001386:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001396:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013a6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	334c      	adds	r3, #76	; 0x4c
 80013b2:	4619      	mov	r1, r3
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f000 fd0e 	bl	8001dd8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013bc:	4b30      	ldr	r3, [pc, #192]	; (8001480 <HAL_ADC_Start_DMA+0x1e8>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10f      	bne.n	80013e8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d143      	bne.n	800145e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	e03a      	b.n	800145e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_ADC_Start_DMA+0x1ec>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10e      	bne.n	8001410 <HAL_ADC_Start_DMA+0x178>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d107      	bne.n	8001410 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800140e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_ADC_Start_DMA+0x1e8>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	2b00      	cmp	r3, #0
 800141a:	d120      	bne.n	800145e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a19      	ldr	r2, [pc, #100]	; (8001488 <HAL_ADC_Start_DMA+0x1f0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d11b      	bne.n	800145e <HAL_ADC_Start_DMA+0x1c6>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d114      	bne.n	800145e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	e00b      	b.n	800145e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f043 0210 	orr.w	r2, r3, #16
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f043 0201 	orr.w	r2, r3, #1
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000000 	.word	0x20000000
 800146c:	431bde83 	.word	0x431bde83
 8001470:	fffff8fe 	.word	0xfffff8fe
 8001474:	08001955 	.word	0x08001955
 8001478:	08001a0f 	.word	0x08001a0f
 800147c:	08001a2b 	.word	0x08001a2b
 8001480:	40012300 	.word	0x40012300
 8001484:	40012000 	.word	0x40012000
 8001488:	40012200 	.word	0x40012200

0800148c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x1c>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e136      	b.n	800173e <HAL_ADC_ConfigChannel+0x28a>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b09      	cmp	r3, #9
 80014de:	d93a      	bls.n	8001556 <HAL_ADC_ConfigChannel+0xa2>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014e8:	d035      	beq.n	8001556 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68d9      	ldr	r1, [r3, #12]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	3b1e      	subs	r3, #30
 8001500:	2207      	movs	r2, #7
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	400a      	ands	r2, r1
 800150e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a8d      	ldr	r2, [pc, #564]	; (800174c <HAL_ADC_ConfigChannel+0x298>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10a      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68d9      	ldr	r1, [r3, #12]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	061a      	lsls	r2, r3, #24
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800152e:	e035      	b.n	800159c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68d9      	ldr	r1, [r3, #12]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	4603      	mov	r3, r0
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4403      	add	r3, r0
 8001548:	3b1e      	subs	r3, #30
 800154a:	409a      	lsls	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001554:	e022      	b.n	800159c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6919      	ldr	r1, [r3, #16]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	2207      	movs	r2, #7
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43da      	mvns	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	400a      	ands	r2, r1
 8001578:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6919      	ldr	r1, [r3, #16]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	4603      	mov	r3, r0
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4403      	add	r3, r0
 8001592:	409a      	lsls	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b06      	cmp	r3, #6
 80015a2:	d824      	bhi.n	80015ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	3b05      	subs	r3, #5
 80015b6:	221f      	movs	r2, #31
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43da      	mvns	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	400a      	ands	r2, r1
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	3b05      	subs	r3, #5
 80015e0:	fa00 f203 	lsl.w	r2, r0, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
 80015ec:	e04c      	b.n	8001688 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d824      	bhi.n	8001640 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	3b23      	subs	r3, #35	; 0x23
 8001608:	221f      	movs	r2, #31
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	400a      	ands	r2, r1
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	4618      	mov	r0, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	3b23      	subs	r3, #35	; 0x23
 8001632:	fa00 f203 	lsl.w	r2, r0, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	631a      	str	r2, [r3, #48]	; 0x30
 800163e:	e023      	b.n	8001688 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	3b41      	subs	r3, #65	; 0x41
 8001652:	221f      	movs	r2, #31
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43da      	mvns	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	400a      	ands	r2, r1
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	4618      	mov	r0, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	3b41      	subs	r3, #65	; 0x41
 800167c:	fa00 f203 	lsl.w	r2, r0, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a30      	ldr	r2, [pc, #192]	; (8001750 <HAL_ADC_ConfigChannel+0x29c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d10a      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1f4>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800169a:	d105      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800169c:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_ADC_ConfigChannel+0x2a0>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a2c      	ldr	r2, [pc, #176]	; (8001754 <HAL_ADC_ConfigChannel+0x2a0>)
 80016a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a28      	ldr	r2, [pc, #160]	; (8001750 <HAL_ADC_ConfigChannel+0x29c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d10f      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x21e>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b12      	cmp	r3, #18
 80016b8:	d10b      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80016ba:	4b26      	ldr	r3, [pc, #152]	; (8001754 <HAL_ADC_ConfigChannel+0x2a0>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a25      	ldr	r2, [pc, #148]	; (8001754 <HAL_ADC_ConfigChannel+0x2a0>)
 80016c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016c4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80016c6:	4b23      	ldr	r3, [pc, #140]	; (8001754 <HAL_ADC_ConfigChannel+0x2a0>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4a22      	ldr	r2, [pc, #136]	; (8001754 <HAL_ADC_ConfigChannel+0x2a0>)
 80016cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016d0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a1e      	ldr	r2, [pc, #120]	; (8001750 <HAL_ADC_ConfigChannel+0x29c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d12b      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x280>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1a      	ldr	r2, [pc, #104]	; (800174c <HAL_ADC_ConfigChannel+0x298>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d003      	beq.n	80016ee <HAL_ADC_ConfigChannel+0x23a>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b11      	cmp	r3, #17
 80016ec:	d122      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_ADC_ConfigChannel+0x2a0>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a18      	ldr	r2, [pc, #96]	; (8001754 <HAL_ADC_ConfigChannel+0x2a0>)
 80016f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016f8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_ADC_ConfigChannel+0x2a0>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <HAL_ADC_ConfigChannel+0x2a0>)
 8001700:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001704:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_ADC_ConfigChannel+0x298>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d111      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_ADC_ConfigChannel+0x2a4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_ADC_ConfigChannel+0x2a8>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	0c9a      	lsrs	r2, r3, #18
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001726:	e002      	b.n	800172e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3b01      	subs	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f9      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	10000012 	.word	0x10000012
 8001750:	40012000 	.word	0x40012000
 8001754:	40012300 	.word	0x40012300
 8001758:	20000000 	.word	0x20000000
 800175c:	431bde83 	.word	0x431bde83

08001760 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001768:	4b78      	ldr	r3, [pc, #480]	; (800194c <ADC_Init+0x1ec>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a77      	ldr	r2, [pc, #476]	; (800194c <ADC_Init+0x1ec>)
 800176e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001772:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001774:	4b75      	ldr	r3, [pc, #468]	; (800194c <ADC_Init+0x1ec>)
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4973      	ldr	r1, [pc, #460]	; (800194c <ADC_Init+0x1ec>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	021a      	lsls	r2, r3, #8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6899      	ldr	r1, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	4a58      	ldr	r2, [pc, #352]	; (8001950 <ADC_Init+0x1f0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d022      	beq.n	800183a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001802:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6899      	ldr	r1, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6899      	ldr	r1, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	e00f      	b.n	800185a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001858:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0202 	bic.w	r2, r2, #2
 8001868:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6899      	ldr	r1, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	005a      	lsls	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d01b      	beq.n	80018c0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001896:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6859      	ldr	r1, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	3b01      	subs	r3, #1
 80018b4:	035a      	lsls	r2, r3, #13
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	e007      	b.n	80018d0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	051a      	lsls	r2, r3, #20
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001904:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6899      	ldr	r1, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001912:	025a      	lsls	r2, r3, #9
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800192a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6899      	ldr	r1, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	029a      	lsls	r2, r3, #10
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	609a      	str	r2, [r3, #8]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40012300 	.word	0x40012300
 8001950:	0f000001 	.word	0x0f000001

08001954 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001960:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800196a:	2b00      	cmp	r3, #0
 800196c:	d13c      	bne.n	80019e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d12b      	bne.n	80019e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800198c:	2b00      	cmp	r3, #0
 800198e:	d127      	bne.n	80019e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d119      	bne.n	80019e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0220 	bic.w	r2, r2, #32
 80019ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f7ff f84f 	bl	8000a84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80019e6:	e00e      	b.n	8001a06 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fd53 	bl	80014a0 <HAL_ADC_ErrorCallback>
}
 80019fa:	e004      	b.n	8001a06 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f7ff fd35 	bl	800148c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a36:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2240      	movs	r2, #64	; 0x40
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f043 0204 	orr.w	r2, r3, #4
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f7ff fd28 	bl	80014a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <__NVIC_SetPriorityGrouping+0x40>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <__NVIC_SetPriorityGrouping+0x40>)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	60d3      	str	r3, [r2, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00
 8001a9c:	05fa0000 	.word	0x05fa0000

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4907      	ldr	r1, [pc, #28]	; (8001af4 <__NVIC_EnableIRQ+0x38>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	; (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ff8e 	bl	8001af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff29 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff3e 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff8e 	bl	8001b4c <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5d 	bl	8001af8 <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff31 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffa2 	bl	8001bb4 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff fa92 	bl	80011b0 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e099      	b.n	8001dcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0201 	bic.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb8:	e00f      	b.n	8001cda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cba:	f7ff fa79 	bl	80011b0 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d908      	bls.n	8001cda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e078      	b.n	8001dcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e8      	bne.n	8001cba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <HAL_DMA_Init+0x158>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d107      	bne.n	8001d44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f023 0307 	bic.w	r3, r3, #7
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d117      	bne.n	8001d9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00e      	beq.n	8001d9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fa77 	bl	8002274 <DMA_CheckFifoParam>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2240      	movs	r2, #64	; 0x40
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e016      	b.n	8001dcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fa2e 	bl	8002208 <DMA_CalcBaseAndBitshift>
 8001dac:	4603      	mov	r3, r0
 8001dae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	223f      	movs	r2, #63	; 0x3f
 8001db6:	409a      	lsls	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	e010803f 	.word	0xe010803f

08001dd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_DMA_Start_IT+0x26>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e048      	b.n	8001e90 <HAL_DMA_Start_IT+0xb8>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d137      	bne.n	8001e82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2202      	movs	r2, #2
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f9c0 	bl	80021ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	223f      	movs	r2, #63	; 0x3f
 8001e32:	409a      	lsls	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0216 	orr.w	r2, r2, #22
 8001e46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e56:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0208 	orr.w	r2, r2, #8
 8001e6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e005      	b.n	8001e8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001ea4:	4b8e      	ldr	r3, [pc, #568]	; (80020e0 <HAL_DMA_IRQHandler+0x248>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a8e      	ldr	r2, [pc, #568]	; (80020e4 <HAL_DMA_IRQHandler+0x24c>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	0a9b      	lsrs	r3, r3, #10
 8001eb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01a      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0204 	bic.w	r2, r2, #4
 8001eea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f08:	2201      	movs	r2, #1
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d012      	beq.n	8001f3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f26:	2201      	movs	r2, #1
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	f043 0202 	orr.w	r2, r3, #2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3e:	2204      	movs	r2, #4
 8001f40:	409a      	lsls	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d012      	beq.n	8001f70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00b      	beq.n	8001f70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f043 0204 	orr.w	r2, r3, #4
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	2210      	movs	r2, #16
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d043      	beq.n	8002008 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d03c      	beq.n	8002008 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	2210      	movs	r2, #16
 8001f94:	409a      	lsls	r2, r3
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d018      	beq.n	8001fda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d108      	bne.n	8001fc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d024      	beq.n	8002008 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
 8001fc6:	e01f      	b.n	8002008 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01b      	beq.n	8002008 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	4798      	blx	r3
 8001fd8:	e016      	b.n	8002008 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d107      	bne.n	8001ff8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0208 	bic.w	r2, r2, #8
 8001ff6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	2220      	movs	r2, #32
 800200e:	409a      	lsls	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 808f 	beq.w	8002138 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 8087 	beq.w	8002138 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202e:	2220      	movs	r2, #32
 8002030:	409a      	lsls	r2, r3
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b05      	cmp	r3, #5
 8002040:	d136      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0216 	bic.w	r2, r2, #22
 8002050:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002060:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d103      	bne.n	8002072 <HAL_DMA_IRQHandler+0x1da>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206e:	2b00      	cmp	r3, #0
 8002070:	d007      	beq.n	8002082 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0208 	bic.w	r2, r2, #8
 8002080:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002086:	223f      	movs	r2, #63	; 0x3f
 8002088:	409a      	lsls	r2, r3
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d07e      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	4798      	blx	r3
        }
        return;
 80020ae:	e079      	b.n	80021a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d01d      	beq.n	80020fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10d      	bne.n	80020e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d031      	beq.n	8002138 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
 80020dc:	e02c      	b.n	8002138 <HAL_DMA_IRQHandler+0x2a0>
 80020de:	bf00      	nop
 80020e0:	20000000 	.word	0x20000000
 80020e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d023      	beq.n	8002138 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
 80020f8:	e01e      	b.n	8002138 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10f      	bne.n	8002128 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0210 	bic.w	r2, r2, #16
 8002116:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	2b00      	cmp	r3, #0
 800213e:	d032      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d022      	beq.n	8002192 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2205      	movs	r2, #5
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	3301      	adds	r3, #1
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	429a      	cmp	r2, r3
 800216e:	d307      	bcc.n	8002180 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f2      	bne.n	8002164 <HAL_DMA_IRQHandler+0x2cc>
 800217e:	e000      	b.n	8002182 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002180:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	4798      	blx	r3
 80021a2:	e000      	b.n	80021a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021a4:	bf00      	nop
    }
  }
}
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b40      	cmp	r3, #64	; 0x40
 80021d8:	d108      	bne.n	80021ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021ea:	e007      	b.n	80021fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	60da      	str	r2, [r3, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	3b10      	subs	r3, #16
 8002218:	4a13      	ldr	r2, [pc, #76]	; (8002268 <DMA_CalcBaseAndBitshift+0x60>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002222:	4a12      	ldr	r2, [pc, #72]	; (800226c <DMA_CalcBaseAndBitshift+0x64>)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d908      	bls.n	8002248 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <DMA_CalcBaseAndBitshift+0x68>)
 800223e:	4013      	ands	r3, r2
 8002240:	1d1a      	adds	r2, r3, #4
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	659a      	str	r2, [r3, #88]	; 0x58
 8002246:	e006      	b.n	8002256 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <DMA_CalcBaseAndBitshift+0x68>)
 8002250:	4013      	ands	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	aaaaaaab 	.word	0xaaaaaaab
 800226c:	08005c20 	.word	0x08005c20
 8002270:	fffffc00 	.word	0xfffffc00

08002274 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d11f      	bne.n	80022ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d856      	bhi.n	8002342 <DMA_CheckFifoParam+0xce>
 8002294:	a201      	add	r2, pc, #4	; (adr r2, 800229c <DMA_CheckFifoParam+0x28>)
 8002296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229a:	bf00      	nop
 800229c:	080022ad 	.word	0x080022ad
 80022a0:	080022bf 	.word	0x080022bf
 80022a4:	080022ad 	.word	0x080022ad
 80022a8:	08002343 	.word	0x08002343
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d046      	beq.n	8002346 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022bc:	e043      	b.n	8002346 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022c6:	d140      	bne.n	800234a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022cc:	e03d      	b.n	800234a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d6:	d121      	bne.n	800231c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d837      	bhi.n	800234e <DMA_CheckFifoParam+0xda>
 80022de:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <DMA_CheckFifoParam+0x70>)
 80022e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e4:	080022f5 	.word	0x080022f5
 80022e8:	080022fb 	.word	0x080022fb
 80022ec:	080022f5 	.word	0x080022f5
 80022f0:	0800230d 	.word	0x0800230d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      break;
 80022f8:	e030      	b.n	800235c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d025      	beq.n	8002352 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230a:	e022      	b.n	8002352 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002314:	d11f      	bne.n	8002356 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800231a:	e01c      	b.n	8002356 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d903      	bls.n	800232a <DMA_CheckFifoParam+0xb6>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d003      	beq.n	8002330 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002328:	e018      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
      break;
 800232e:	e015      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00e      	beq.n	800235a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
      break;
 8002340:	e00b      	b.n	800235a <DMA_CheckFifoParam+0xe6>
      break;
 8002342:	bf00      	nop
 8002344:	e00a      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      break;
 8002346:	bf00      	nop
 8002348:	e008      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      break;
 800234a:	bf00      	nop
 800234c:	e006      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      break;
 800234e:	bf00      	nop
 8002350:	e004      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      break;
 8002352:	bf00      	nop
 8002354:	e002      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      break;   
 8002356:	bf00      	nop
 8002358:	e000      	b.n	800235c <DMA_CheckFifoParam+0xe8>
      break;
 800235a:	bf00      	nop
    }
  } 
  
  return status; 
 800235c:	7bfb      	ldrb	r3, [r7, #15]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop

0800236c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e06a      	b.n	8002454 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2223      	movs	r2, #35	; 0x23
 800238c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7fe fc85 	bl	8000ca0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	4b31      	ldr	r3, [pc, #196]	; (800245c <HAL_ETH_Init+0xf0>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4a30      	ldr	r2, [pc, #192]	; (800245c <HAL_ETH_Init+0xf0>)
 800239c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	4b2e      	ldr	r3, [pc, #184]	; (800245c <HAL_ETH_Init+0xf0>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80023ae:	4b2c      	ldr	r3, [pc, #176]	; (8002460 <HAL_ETH_Init+0xf4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4a2b      	ldr	r2, [pc, #172]	; (8002460 <HAL_ETH_Init+0xf4>)
 80023b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80023ba:	4b29      	ldr	r3, [pc, #164]	; (8002460 <HAL_ETH_Init+0xf4>)
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4927      	ldr	r1, [pc, #156]	; (8002460 <HAL_ETH_Init+0xf4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <HAL_ETH_Init+0xf4>)
 80023ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023e4:	f7fe fee4 	bl	80011b0 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023ea:	e011      	b.n	8002410 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80023ec:	f7fe fee0 	bl	80011b0 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023fa:	d909      	bls.n	8002410 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2204      	movs	r2, #4
 8002400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	22e0      	movs	r2, #224	; 0xe0
 8002408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e021      	b.n	8002454 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1e4      	bne.n	80023ec <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f958 	bl	80026d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f9ff 	bl	800282c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fa55 	bl	80028de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	461a      	mov	r2, r3
 800243a:	2100      	movs	r1, #0
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f9bd 	bl	80027bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2210      	movs	r2, #16
 800244e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	40013800 	.word	0x40013800

08002464 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4b51      	ldr	r3, [pc, #324]	; (80025c0 <ETH_SetMACConfig+0x15c>)
 800247a:	4013      	ands	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	7c1b      	ldrb	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <ETH_SetMACConfig+0x28>
 8002486:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800248a:	e000      	b.n	800248e <ETH_SetMACConfig+0x2a>
 800248c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	7c5b      	ldrb	r3, [r3, #17]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <ETH_SetMACConfig+0x38>
 8002496:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800249a:	e000      	b.n	800249e <ETH_SetMACConfig+0x3a>
 800249c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800249e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	7fdb      	ldrb	r3, [r3, #31]
 80024aa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80024ac:	431a      	orrs	r2, r3
                        macconf->Speed |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	7f92      	ldrb	r2, [r2, #30]
 80024b8:	2a00      	cmp	r2, #0
 80024ba:	d102      	bne.n	80024c2 <ETH_SetMACConfig+0x5e>
 80024bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c0:	e000      	b.n	80024c4 <ETH_SetMACConfig+0x60>
 80024c2:	2200      	movs	r2, #0
                        macconf->Speed |
 80024c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	7f1b      	ldrb	r3, [r3, #28]
 80024ca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024cc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	791b      	ldrb	r3, [r3, #4]
 80024d8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80024da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024e2:	2a00      	cmp	r2, #0
 80024e4:	d102      	bne.n	80024ec <ETH_SetMACConfig+0x88>
 80024e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ea:	e000      	b.n	80024ee <ETH_SetMACConfig+0x8a>
 80024ec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	7bdb      	ldrb	r3, [r3, #15]
 80024f4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024f6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002504:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002506:	4313      	orrs	r3, r2
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800251e:	2001      	movs	r0, #1
 8002520:	f7fe fe52 	bl	80011c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	f64f 7341 	movw	r3, #65345	; 0xff41
 800253a:	4013      	ands	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002542:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800254a:	2a00      	cmp	r2, #0
 800254c:	d101      	bne.n	8002552 <ETH_SetMACConfig+0xee>
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	e000      	b.n	8002554 <ETH_SetMACConfig+0xf0>
 8002552:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002554:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800255a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002562:	2a01      	cmp	r2, #1
 8002564:	d101      	bne.n	800256a <ETH_SetMACConfig+0x106>
 8002566:	2208      	movs	r2, #8
 8002568:	e000      	b.n	800256c <ETH_SetMACConfig+0x108>
 800256a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800256c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002574:	2a01      	cmp	r2, #1
 8002576:	d101      	bne.n	800257c <ETH_SetMACConfig+0x118>
 8002578:	2204      	movs	r2, #4
 800257a:	e000      	b.n	800257e <ETH_SetMACConfig+0x11a>
 800257c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800257e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002586:	2a01      	cmp	r2, #1
 8002588:	d101      	bne.n	800258e <ETH_SetMACConfig+0x12a>
 800258a:	2202      	movs	r2, #2
 800258c:	e000      	b.n	8002590 <ETH_SetMACConfig+0x12c>
 800258e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002590:	4313      	orrs	r3, r2
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7fe fe0d 	bl	80011c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	ff20810f 	.word	0xff20810f

080025c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <ETH_SetDMAConfig+0x110>)
 80025de:	4013      	ands	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	7b1b      	ldrb	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <ETH_SetDMAConfig+0x2c>
 80025ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025ee:	e000      	b.n	80025f2 <ETH_SetDMAConfig+0x2e>
 80025f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	7b5b      	ldrb	r3, [r3, #13]
 80025f6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025f8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	7f52      	ldrb	r2, [r2, #29]
 80025fe:	2a00      	cmp	r2, #0
 8002600:	d102      	bne.n	8002608 <ETH_SetDMAConfig+0x44>
 8002602:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002606:	e000      	b.n	800260a <ETH_SetDMAConfig+0x46>
 8002608:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800260a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	7b9b      	ldrb	r3, [r3, #14]
 8002610:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002612:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002618:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	7f1b      	ldrb	r3, [r3, #28]
 800261e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002620:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	7f9b      	ldrb	r3, [r3, #30]
 8002626:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002628:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800262e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002636:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002638:	4313      	orrs	r3, r2
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002648:	461a      	mov	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800265a:	2001      	movs	r0, #1
 800265c:	f7fe fdb4 	bl	80011c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002668:	461a      	mov	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	791b      	ldrb	r3, [r3, #4]
 8002672:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002678:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800267e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002684:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800268c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800268e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002696:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800269c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7fe fd85 	bl	80011c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6013      	str	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	f8de3f23 	.word	0xf8de3f23

080026d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b0a6      	sub	sp, #152	; 0x98
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80026ec:	2300      	movs	r3, #0
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002714:	2300      	movs	r3, #0
 8002716:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800271e:	2300      	movs	r3, #0
 8002720:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800273a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800273e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002744:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800274c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002750:	4619      	mov	r1, r3
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff fe86 	bl	8002464 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002758:	2301      	movs	r3, #1
 800275a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800275c:	2301      	movs	r3, #1
 800275e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002760:	2301      	movs	r3, #1
 8002762:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002766:	2301      	movs	r3, #1
 8002768:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800277a:	2300      	movs	r3, #0
 800277c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800277e:	2301      	movs	r3, #1
 8002780:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002784:	2301      	movs	r3, #1
 8002786:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800278c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800278e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002792:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002798:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800279a:	2301      	movs	r3, #1
 800279c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027a8:	f107 0308 	add.w	r3, r7, #8
 80027ac:	4619      	mov	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ff08 	bl	80025c4 <ETH_SetDMAConfig>
}
 80027b4:	bf00      	nop
 80027b6:	3798      	adds	r7, #152	; 0x98
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3305      	adds	r3, #5
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	3204      	adds	r2, #4
 80027d4:	7812      	ldrb	r2, [r2, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <ETH_MACAddressConfig+0x68>)
 80027de:	4413      	add	r3, r2
 80027e0:	461a      	mov	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3303      	adds	r3, #3
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	061a      	lsls	r2, r3, #24
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3302      	adds	r3, #2
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3301      	adds	r3, #1
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	4313      	orrs	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	7812      	ldrb	r2, [r2, #0]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <ETH_MACAddressConfig+0x6c>)
 800280e:	4413      	add	r3, r2
 8002810:	461a      	mov	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	6013      	str	r3, [r2, #0]
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40028040 	.word	0x40028040
 8002828:	40028044 	.word	0x40028044

0800282c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e03e      	b.n	80028b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68d9      	ldr	r1, [r3, #12]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2200      	movs	r2, #0
 8002856:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2200      	movs	r2, #0
 8002862:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	3206      	adds	r2, #6
 800286c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d80c      	bhi.n	800289c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68d9      	ldr	r1, [r3, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	e004      	b.n	80028a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3301      	adds	r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d9bd      	bls.n	800283a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d0:	611a      	str	r2, [r3, #16]
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028de:	b480      	push	{r7}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	e046      	b.n	800297a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6919      	ldr	r1, [r3, #16]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2200      	movs	r2, #0
 8002908:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2200      	movs	r2, #0
 8002914:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2200      	movs	r2, #0
 800291a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2200      	movs	r2, #0
 8002920:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002928:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002930:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	3212      	adds	r2, #18
 8002946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d80c      	bhi.n	800296a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6919      	ldr	r1, [r3, #16]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	461a      	mov	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	60da      	str	r2, [r3, #12]
 8002968:	e004      	b.n	8002974 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3301      	adds	r3, #1
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d9b5      	bls.n	80028ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029aa:	60da      	str	r2, [r3, #12]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	e175      	b.n	8002cc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029d8:	2201      	movs	r2, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	f040 8164 	bne.w	8002cbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d005      	beq.n	8002a0e <HAL_GPIO_Init+0x56>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d130      	bne.n	8002a70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	2203      	movs	r2, #3
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a44:	2201      	movs	r2, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 0201 	and.w	r2, r3, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d017      	beq.n	8002aac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d123      	bne.n	8002b00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	08da      	lsrs	r2, r3, #3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3208      	adds	r2, #8
 8002ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	220f      	movs	r2, #15
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	08da      	lsrs	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3208      	adds	r2, #8
 8002afa:	69b9      	ldr	r1, [r7, #24]
 8002afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0203 	and.w	r2, r3, #3
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80be 	beq.w	8002cbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b42:	4b66      	ldr	r3, [pc, #408]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4a65      	ldr	r2, [pc, #404]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4e:	4b63      	ldr	r3, [pc, #396]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b5a:	4a61      	ldr	r2, [pc, #388]	; (8002ce0 <HAL_GPIO_Init+0x328>)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a58      	ldr	r2, [pc, #352]	; (8002ce4 <HAL_GPIO_Init+0x32c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d037      	beq.n	8002bf6 <HAL_GPIO_Init+0x23e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a57      	ldr	r2, [pc, #348]	; (8002ce8 <HAL_GPIO_Init+0x330>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d031      	beq.n	8002bf2 <HAL_GPIO_Init+0x23a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a56      	ldr	r2, [pc, #344]	; (8002cec <HAL_GPIO_Init+0x334>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d02b      	beq.n	8002bee <HAL_GPIO_Init+0x236>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a55      	ldr	r2, [pc, #340]	; (8002cf0 <HAL_GPIO_Init+0x338>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d025      	beq.n	8002bea <HAL_GPIO_Init+0x232>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a54      	ldr	r2, [pc, #336]	; (8002cf4 <HAL_GPIO_Init+0x33c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01f      	beq.n	8002be6 <HAL_GPIO_Init+0x22e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a53      	ldr	r2, [pc, #332]	; (8002cf8 <HAL_GPIO_Init+0x340>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d019      	beq.n	8002be2 <HAL_GPIO_Init+0x22a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <HAL_GPIO_Init+0x344>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_GPIO_Init+0x226>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a51      	ldr	r2, [pc, #324]	; (8002d00 <HAL_GPIO_Init+0x348>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00d      	beq.n	8002bda <HAL_GPIO_Init+0x222>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a50      	ldr	r2, [pc, #320]	; (8002d04 <HAL_GPIO_Init+0x34c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <HAL_GPIO_Init+0x21e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4f      	ldr	r2, [pc, #316]	; (8002d08 <HAL_GPIO_Init+0x350>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <HAL_GPIO_Init+0x21a>
 8002bce:	2309      	movs	r3, #9
 8002bd0:	e012      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bd2:	230a      	movs	r3, #10
 8002bd4:	e010      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	e00e      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bda:	2307      	movs	r3, #7
 8002bdc:	e00c      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bde:	2306      	movs	r3, #6
 8002be0:	e00a      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002be2:	2305      	movs	r3, #5
 8002be4:	e008      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002be6:	2304      	movs	r3, #4
 8002be8:	e006      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bea:	2303      	movs	r3, #3
 8002bec:	e004      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e002      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_Init+0x240>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	f002 0203 	and.w	r2, r2, #3
 8002bfe:	0092      	lsls	r2, r2, #2
 8002c00:	4093      	lsls	r3, r2
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c08:	4935      	ldr	r1, [pc, #212]	; (8002ce0 <HAL_GPIO_Init+0x328>)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c16:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c3a:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c40:	4b32      	ldr	r3, [pc, #200]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c64:	4a29      	ldr	r2, [pc, #164]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c6a:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c8e:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb8:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <HAL_GPIO_Init+0x354>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b0f      	cmp	r3, #15
 8002cc8:	f67f ae86 	bls.w	80029d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3724      	adds	r7, #36	; 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40013800 	.word	0x40013800
 8002ce4:	40020000 	.word	0x40020000
 8002ce8:	40020400 	.word	0x40020400
 8002cec:	40020800 	.word	0x40020800
 8002cf0:	40020c00 	.word	0x40020c00
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40021400 	.word	0x40021400
 8002cfc:	40021800 	.word	0x40021800
 8002d00:	40021c00 	.word	0x40021c00
 8002d04:	40022000 	.word	0x40022000
 8002d08:	40022400 	.word	0x40022400
 8002d0c:	40013c00 	.word	0x40013c00

08002d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d20:	787b      	ldrb	r3, [r7, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d2c:	e003      	b.n	8002d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d2e:	887b      	ldrh	r3, [r7, #2]
 8002d30:	041a      	lsls	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	619a      	str	r2, [r3, #24]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d54:	887a      	ldrh	r2, [r7, #2]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	041a      	lsls	r2, r3, #16
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	43d9      	mvns	r1, r3
 8002d60:	887b      	ldrh	r3, [r7, #2]
 8002d62:	400b      	ands	r3, r1
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	619a      	str	r2, [r3, #24]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d78:	b08f      	sub	sp, #60	; 0x3c
 8002d7a:	af0a      	add	r7, sp, #40	; 0x28
 8002d7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e116      	b.n	8002fb6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fe f894 	bl	8000ed0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2203      	movs	r2, #3
 8002dac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f001 ffbe 	bl	8004d48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	687e      	ldr	r6, [r7, #4]
 8002dd4:	466d      	mov	r5, sp
 8002dd6:	f106 0410 	add.w	r4, r6, #16
 8002dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002de6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dea:	1d33      	adds	r3, r6, #4
 8002dec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dee:	6838      	ldr	r0, [r7, #0]
 8002df0:	f001 ff52 	bl	8004c98 <USB_CoreInit>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0d7      	b.n	8002fb6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f001 ffac 	bl	8004d6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e04a      	b.n	8002eae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	333d      	adds	r3, #61	; 0x3d
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	333c      	adds	r3, #60	; 0x3c
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	b298      	uxth	r0, r3
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	3344      	adds	r3, #68	; 0x44
 8002e54:	4602      	mov	r2, r0
 8002e56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	3340      	adds	r3, #64	; 0x40
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	3348      	adds	r3, #72	; 0x48
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	334c      	adds	r3, #76	; 0x4c
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3354      	adds	r3, #84	; 0x54
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
 8002eae:	7bfa      	ldrb	r2, [r7, #15]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d3af      	bcc.n	8002e18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]
 8002ebc:	e044      	b.n	8002f48 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ed4:	7bfa      	ldrb	r2, [r7, #15]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eea:	7bfa      	ldrb	r2, [r7, #15]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	3301      	adds	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d3b5      	bcc.n	8002ebe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	687e      	ldr	r6, [r7, #4]
 8002f5a:	466d      	mov	r5, sp
 8002f5c:	f106 0410 	add.w	r4, r6, #16
 8002f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f70:	1d33      	adds	r3, r6, #4
 8002f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f74:	6838      	ldr	r0, [r7, #0]
 8002f76:	f001 ff45 	bl	8004e04 <USB_DevInit>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e014      	b.n	8002fb6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d102      	bne.n	8002faa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f80b 	bl	8002fc0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 f903 	bl	80051ba <USB_DevDisconnect>

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002fc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	10000003 	.word	0x10000003

08003008 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003016:	6013      	str	r3, [r2, #0]
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40007000 	.word	0x40007000

08003028 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003056:	f7fe f8ab 	bl	80011b0 <HAL_GetTick>
 800305a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800305c:	e009      	b.n	8003072 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800305e:	f7fe f8a7 	bl	80011b0 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800306c:	d901      	bls.n	8003072 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e022      	b.n	80030b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307e:	d1ee      	bne.n	800305e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800308c:	f7fe f890 	bl	80011b0 <HAL_GetTick>
 8003090:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003092:	e009      	b.n	80030a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003094:	f7fe f88c 	bl	80011b0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030a2:	d901      	bls.n	80030a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e007      	b.n	80030b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030b4:	d1ee      	bne.n	8003094 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40007000 	.word	0x40007000

080030c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030d0:	2300      	movs	r3, #0
 80030d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e29b      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8087 	beq.w	80031fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030ec:	4b96      	ldr	r3, [pc, #600]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d00c      	beq.n	8003112 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f8:	4b93      	ldr	r3, [pc, #588]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b08      	cmp	r3, #8
 8003102:	d112      	bne.n	800312a <HAL_RCC_OscConfig+0x62>
 8003104:	4b90      	ldr	r3, [pc, #576]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003110:	d10b      	bne.n	800312a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003112:	4b8d      	ldr	r3, [pc, #564]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d06c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x130>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d168      	bne.n	80031f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e275      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003132:	d106      	bne.n	8003142 <HAL_RCC_OscConfig+0x7a>
 8003134:	4b84      	ldr	r3, [pc, #528]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a83      	ldr	r2, [pc, #524]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800313a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	e02e      	b.n	80031a0 <HAL_RCC_OscConfig+0xd8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x9c>
 800314a:	4b7f      	ldr	r3, [pc, #508]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a7e      	ldr	r2, [pc, #504]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b7c      	ldr	r3, [pc, #496]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7b      	ldr	r2, [pc, #492]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800315c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e01d      	b.n	80031a0 <HAL_RCC_OscConfig+0xd8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0xc0>
 800316e:	4b76      	ldr	r3, [pc, #472]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a75      	ldr	r2, [pc, #468]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	4b73      	ldr	r3, [pc, #460]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a72      	ldr	r2, [pc, #456]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0xd8>
 8003188:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6e      	ldr	r2, [pc, #440]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800318e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b6c      	ldr	r3, [pc, #432]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6b      	ldr	r2, [pc, #428]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800319a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d013      	beq.n	80031d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe f802 	bl	80011b0 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b0:	f7fd fffe 	bl	80011b0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e229      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	4b61      	ldr	r3, [pc, #388]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0xe8>
 80031ce:	e014      	b.n	80031fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fd ffee 	bl	80011b0 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d8:	f7fd ffea 	bl	80011b0 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e215      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ea:	4b57      	ldr	r3, [pc, #348]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x110>
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d069      	beq.n	80032da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003206:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003212:	4b4d      	ldr	r3, [pc, #308]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b08      	cmp	r3, #8
 800321c:	d11c      	bne.n	8003258 <HAL_RCC_OscConfig+0x190>
 800321e:	4b4a      	ldr	r3, [pc, #296]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_RCC_OscConfig+0x17a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d001      	beq.n	8003242 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e1e9      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003242:	4b41      	ldr	r3, [pc, #260]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	493d      	ldr	r1, [pc, #244]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	e040      	b.n	80032da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d023      	beq.n	80032a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003260:	4b39      	ldr	r3, [pc, #228]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a38      	ldr	r2, [pc, #224]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fd ffa0 	bl	80011b0 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003274:	f7fd ff9c 	bl	80011b0 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1c7      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003286:	4b30      	ldr	r3, [pc, #192]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003292:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4929      	ldr	r1, [pc, #164]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
 80032a6:	e018      	b.n	80032da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a8:	4b27      	ldr	r3, [pc, #156]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fd ff7c 	bl	80011b0 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032bc:	f7fd ff78 	bl	80011b0 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e1a3      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d038      	beq.n	8003358 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d019      	beq.n	8003322 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80032f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f2:	4a15      	ldr	r2, [pc, #84]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fd ff59 	bl	80011b0 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003302:	f7fd ff55 	bl	80011b0 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e180      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x23a>
 8003320:	e01a      	b.n	8003358 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003322:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003326:	4a08      	ldr	r2, [pc, #32]	; (8003348 <HAL_RCC_OscConfig+0x280>)
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332e:	f7fd ff3f 	bl	80011b0 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003334:	e00a      	b.n	800334c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003336:	f7fd ff3b 	bl	80011b0 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d903      	bls.n	800334c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e166      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
 8003348:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334c:	4b92      	ldr	r3, [pc, #584]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 800334e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1ee      	bne.n	8003336 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a4 	beq.w	80034ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003366:	4b8c      	ldr	r3, [pc, #560]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003372:	4b89      	ldr	r3, [pc, #548]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a88      	ldr	r2, [pc, #544]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
 800337e:	4b86      	ldr	r3, [pc, #536]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338a:	2301      	movs	r3, #1
 800338c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338e:	4b83      	ldr	r3, [pc, #524]	; (800359c <HAL_RCC_OscConfig+0x4d4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	2b00      	cmp	r3, #0
 8003398:	d118      	bne.n	80033cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800339a:	4b80      	ldr	r3, [pc, #512]	; (800359c <HAL_RCC_OscConfig+0x4d4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a7f      	ldr	r2, [pc, #508]	; (800359c <HAL_RCC_OscConfig+0x4d4>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a6:	f7fd ff03 	bl	80011b0 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ae:	f7fd feff 	bl	80011b0 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b64      	cmp	r3, #100	; 0x64
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e12a      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c0:	4b76      	ldr	r3, [pc, #472]	; (800359c <HAL_RCC_OscConfig+0x4d4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d106      	bne.n	80033e2 <HAL_RCC_OscConfig+0x31a>
 80033d4:	4b70      	ldr	r3, [pc, #448]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a6f      	ldr	r2, [pc, #444]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
 80033e0:	e02d      	b.n	800343e <HAL_RCC_OscConfig+0x376>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10c      	bne.n	8003404 <HAL_RCC_OscConfig+0x33c>
 80033ea:	4b6b      	ldr	r3, [pc, #428]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	4a6a      	ldr	r2, [pc, #424]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6713      	str	r3, [r2, #112]	; 0x70
 80033f6:	4b68      	ldr	r3, [pc, #416]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	4a67      	ldr	r2, [pc, #412]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	6713      	str	r3, [r2, #112]	; 0x70
 8003402:	e01c      	b.n	800343e <HAL_RCC_OscConfig+0x376>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b05      	cmp	r3, #5
 800340a:	d10c      	bne.n	8003426 <HAL_RCC_OscConfig+0x35e>
 800340c:	4b62      	ldr	r3, [pc, #392]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	4a61      	ldr	r2, [pc, #388]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003412:	f043 0304 	orr.w	r3, r3, #4
 8003416:	6713      	str	r3, [r2, #112]	; 0x70
 8003418:	4b5f      	ldr	r3, [pc, #380]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	4a5e      	ldr	r2, [pc, #376]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6713      	str	r3, [r2, #112]	; 0x70
 8003424:	e00b      	b.n	800343e <HAL_RCC_OscConfig+0x376>
 8003426:	4b5c      	ldr	r3, [pc, #368]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a5b      	ldr	r2, [pc, #364]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6713      	str	r3, [r2, #112]	; 0x70
 8003432:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a58      	ldr	r2, [pc, #352]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d015      	beq.n	8003472 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fd feb3 	bl	80011b0 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344c:	e00a      	b.n	8003464 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fd feaf 	bl	80011b0 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e0d8      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003464:	4b4c      	ldr	r3, [pc, #304]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ee      	beq.n	800344e <HAL_RCC_OscConfig+0x386>
 8003470:	e014      	b.n	800349c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003472:	f7fd fe9d 	bl	80011b0 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fd fe99 	bl	80011b0 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	; 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e0c2      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003490:	4b41      	ldr	r3, [pc, #260]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1ee      	bne.n	800347a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800349c:	7dfb      	ldrb	r3, [r7, #23]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d105      	bne.n	80034ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a2:	4b3d      	ldr	r3, [pc, #244]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	4a3c      	ldr	r2, [pc, #240]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80034a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80ae 	beq.w	8003614 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034b8:	4b37      	ldr	r3, [pc, #220]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d06d      	beq.n	80035a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d14b      	bne.n	8003564 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034cc:	4b32      	ldr	r3, [pc, #200]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a31      	ldr	r2, [pc, #196]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80034d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fd fe6a 	bl	80011b0 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fd fe66 	bl	80011b0 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e091      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	4b29      	ldr	r3, [pc, #164]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	019b      	lsls	r3, r3, #6
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	3b01      	subs	r3, #1
 8003518:	041b      	lsls	r3, r3, #16
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	061b      	lsls	r3, r3, #24
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	071b      	lsls	r3, r3, #28
 800352a:	491b      	ldr	r1, [pc, #108]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a18      	ldr	r2, [pc, #96]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fd fe38 	bl	80011b0 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003544:	f7fd fe34 	bl	80011b0 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e05f      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003556:	4b10      	ldr	r3, [pc, #64]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x47c>
 8003562:	e057      	b.n	8003614 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a0b      	ldr	r2, [pc, #44]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 800356a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fd fe1e 	bl	80011b0 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fd fe1a 	bl	80011b0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e045      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	4b03      	ldr	r3, [pc, #12]	; (8003598 <HAL_RCC_OscConfig+0x4d0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x4b0>
 8003596:	e03d      	b.n	8003614 <HAL_RCC_OscConfig+0x54c>
 8003598:	40023800 	.word	0x40023800
 800359c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035a0:	4b1f      	ldr	r3, [pc, #124]	; (8003620 <HAL_RCC_OscConfig+0x558>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d030      	beq.n	8003610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d129      	bne.n	8003610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d122      	bne.n	8003610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035d0:	4013      	ands	r3, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d8:	4293      	cmp	r3, r2
 80035da:	d119      	bne.n	8003610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	085b      	lsrs	r3, r3, #1
 80035e8:	3b01      	subs	r3, #1
 80035ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d10f      	bne.n	8003610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800

08003624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0d0      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d910      	bls.n	800366c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b67      	ldr	r3, [pc, #412]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 020f 	bic.w	r2, r3, #15
 8003652:	4965      	ldr	r1, [pc, #404]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b63      	ldr	r3, [pc, #396]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0b8      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003684:	4b59      	ldr	r3, [pc, #356]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a58      	ldr	r2, [pc, #352]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 800368a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800368e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800369c:	4b53      	ldr	r3, [pc, #332]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a52      	ldr	r2, [pc, #328]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80036a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a8:	4b50      	ldr	r3, [pc, #320]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	494d      	ldr	r1, [pc, #308]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d040      	beq.n	8003748 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ce:	4b47      	ldr	r3, [pc, #284]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d115      	bne.n	8003706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e07f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	4b41      	ldr	r3, [pc, #260]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e073      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f6:	4b3d      	ldr	r3, [pc, #244]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e06b      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003706:	4b39      	ldr	r3, [pc, #228]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 0203 	bic.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4936      	ldr	r1, [pc, #216]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003718:	f7fd fd4a 	bl	80011b0 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	e00a      	b.n	8003736 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003720:	f7fd fd46 	bl	80011b0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e053      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 020c 	and.w	r2, r3, #12
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	429a      	cmp	r2, r3
 8003746:	d1eb      	bne.n	8003720 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003748:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d210      	bcs.n	8003778 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 020f 	bic.w	r2, r3, #15
 800375e:	4922      	ldr	r1, [pc, #136]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e032      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003784:	4b19      	ldr	r3, [pc, #100]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4916      	ldr	r1, [pc, #88]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037a2:	4b12      	ldr	r3, [pc, #72]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	490e      	ldr	r1, [pc, #56]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037b6:	f000 f821 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 80037ba:	4602      	mov	r2, r0
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	490a      	ldr	r1, [pc, #40]	; (80037f0 <HAL_RCC_ClockConfig+0x1cc>)
 80037c8:	5ccb      	ldrb	r3, [r1, r3]
 80037ca:	fa22 f303 	lsr.w	r3, r2, r3
 80037ce:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <HAL_RCC_ClockConfig+0x1d0>)
 80037d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_RCC_ClockConfig+0x1d4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fca6 	bl	8001128 <HAL_InitTick>

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023c00 	.word	0x40023c00
 80037ec:	40023800 	.word	0x40023800
 80037f0:	08005c08 	.word	0x08005c08
 80037f4:	20000000 	.word	0x20000000
 80037f8:	20000004 	.word	0x20000004

080037fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003800:	b094      	sub	sp, #80	; 0x50
 8003802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	647b      	str	r3, [r7, #68]	; 0x44
 8003808:	2300      	movs	r3, #0
 800380a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800380c:	2300      	movs	r3, #0
 800380e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003814:	4b79      	ldr	r3, [pc, #484]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b08      	cmp	r3, #8
 800381e:	d00d      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x40>
 8003820:	2b08      	cmp	r3, #8
 8003822:	f200 80e1 	bhi.w	80039e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x34>
 800382a:	2b04      	cmp	r3, #4
 800382c:	d003      	beq.n	8003836 <HAL_RCC_GetSysClockFreq+0x3a>
 800382e:	e0db      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b73      	ldr	r3, [pc, #460]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x204>)
 8003832:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003834:	e0db      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003836:	4b73      	ldr	r3, [pc, #460]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x208>)
 8003838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800383a:	e0d8      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800383c:	4b6f      	ldr	r3, [pc, #444]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003844:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003846:	4b6d      	ldr	r3, [pc, #436]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d063      	beq.n	800391a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003852:	4b6a      	ldr	r3, [pc, #424]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	2200      	movs	r2, #0
 800385a:	63bb      	str	r3, [r7, #56]	; 0x38
 800385c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003864:	633b      	str	r3, [r7, #48]	; 0x30
 8003866:	2300      	movs	r3, #0
 8003868:	637b      	str	r3, [r7, #52]	; 0x34
 800386a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800386e:	4622      	mov	r2, r4
 8003870:	462b      	mov	r3, r5
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f04f 0100 	mov.w	r1, #0
 800387a:	0159      	lsls	r1, r3, #5
 800387c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003880:	0150      	lsls	r0, r2, #5
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4621      	mov	r1, r4
 8003888:	1a51      	subs	r1, r2, r1
 800388a:	6139      	str	r1, [r7, #16]
 800388c:	4629      	mov	r1, r5
 800388e:	eb63 0301 	sbc.w	r3, r3, r1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038a0:	4659      	mov	r1, fp
 80038a2:	018b      	lsls	r3, r1, #6
 80038a4:	4651      	mov	r1, sl
 80038a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038aa:	4651      	mov	r1, sl
 80038ac:	018a      	lsls	r2, r1, #6
 80038ae:	4651      	mov	r1, sl
 80038b0:	ebb2 0801 	subs.w	r8, r2, r1
 80038b4:	4659      	mov	r1, fp
 80038b6:	eb63 0901 	sbc.w	r9, r3, r1
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ce:	4690      	mov	r8, r2
 80038d0:	4699      	mov	r9, r3
 80038d2:	4623      	mov	r3, r4
 80038d4:	eb18 0303 	adds.w	r3, r8, r3
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	462b      	mov	r3, r5
 80038dc:	eb49 0303 	adc.w	r3, r9, r3
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038ee:	4629      	mov	r1, r5
 80038f0:	024b      	lsls	r3, r1, #9
 80038f2:	4621      	mov	r1, r4
 80038f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038f8:	4621      	mov	r1, r4
 80038fa:	024a      	lsls	r2, r1, #9
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003902:	2200      	movs	r2, #0
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
 8003906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800390c:	f7fc fcf0 	bl	80002f0 <__aeabi_uldivmod>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4613      	mov	r3, r2
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003918:	e058      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391a:	4b38      	ldr	r3, [pc, #224]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	099b      	lsrs	r3, r3, #6
 8003920:	2200      	movs	r2, #0
 8003922:	4618      	mov	r0, r3
 8003924:	4611      	mov	r1, r2
 8003926:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
 8003930:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003934:	4642      	mov	r2, r8
 8003936:	464b      	mov	r3, r9
 8003938:	f04f 0000 	mov.w	r0, #0
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	0159      	lsls	r1, r3, #5
 8003942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003946:	0150      	lsls	r0, r2, #5
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4641      	mov	r1, r8
 800394e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003952:	4649      	mov	r1, r9
 8003954:	eb63 0b01 	sbc.w	fp, r3, r1
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003964:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003968:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800396c:	ebb2 040a 	subs.w	r4, r2, sl
 8003970:	eb63 050b 	sbc.w	r5, r3, fp
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	00eb      	lsls	r3, r5, #3
 800397e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003982:	00e2      	lsls	r2, r4, #3
 8003984:	4614      	mov	r4, r2
 8003986:	461d      	mov	r5, r3
 8003988:	4643      	mov	r3, r8
 800398a:	18e3      	adds	r3, r4, r3
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	464b      	mov	r3, r9
 8003990:	eb45 0303 	adc.w	r3, r5, r3
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039a2:	4629      	mov	r1, r5
 80039a4:	028b      	lsls	r3, r1, #10
 80039a6:	4621      	mov	r1, r4
 80039a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ac:	4621      	mov	r1, r4
 80039ae:	028a      	lsls	r2, r1, #10
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b6:	2200      	movs	r2, #0
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	61fa      	str	r2, [r7, #28]
 80039bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c0:	f7fc fc96 	bl	80002f0 <__aeabi_uldivmod>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4613      	mov	r3, r2
 80039ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	3301      	adds	r3, #1
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80039dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039e6:	e002      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3750      	adds	r7, #80	; 0x50
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200

08003a08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000000 	.word	0x20000000

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a9b      	lsrs	r3, r3, #10
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4903      	ldr	r1, [pc, #12]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	08005c18 	.word	0x08005c18

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a4c:	f7ff ffdc 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	0b5b      	lsrs	r3, r3, #13
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4903      	ldr	r1, [pc, #12]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	08005c18 	.word	0x08005c18

08003a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d012      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a98:	4b69      	ldr	r3, [pc, #420]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4a68      	ldr	r2, [pc, #416]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003aa2:	6093      	str	r3, [r2, #8]
 8003aa4:	4b66      	ldr	r3, [pc, #408]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aac:	4964      	ldr	r1, [pc, #400]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d017      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aca:	4b5d      	ldr	r3, [pc, #372]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad8:	4959      	ldr	r1, [pc, #356]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae8:	d101      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003aea:	2301      	movs	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d017      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b06:	4b4e      	ldr	r3, [pc, #312]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	494a      	ldr	r1, [pc, #296]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b24:	d101      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b26:	2301      	movs	r3, #1
 8003b28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b32:	2301      	movs	r3, #1
 8003b34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 808b 	beq.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b54:	4b3a      	ldr	r3, [pc, #232]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	4a39      	ldr	r2, [pc, #228]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b60:	4b37      	ldr	r3, [pc, #220]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b6c:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a34      	ldr	r2, [pc, #208]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b78:	f7fd fb1a 	bl	80011b0 <HAL_GetTick>
 8003b7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b80:	f7fd fb16 	bl	80011b0 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e38f      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b92:	4b2c      	ldr	r3, [pc, #176]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b9e:	4b28      	ldr	r3, [pc, #160]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d035      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d02e      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bbc:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd2:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	4a1a      	ldr	r2, [pc, #104]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bdc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003bde:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003be4:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d114      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fd fade 	bl	80011b0 <HAL_GetTick>
 8003bf4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf8:	f7fd fada 	bl	80011b0 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e351      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0ee      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c26:	d111      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c36:	400b      	ands	r3, r1
 8003c38:	4901      	ldr	r1, [pc, #4]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40007000 	.word	0x40007000
 8003c48:	0ffffcff 	.word	0x0ffffcff
 8003c4c:	4bac      	ldr	r3, [pc, #688]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4aab      	ldr	r2, [pc, #684]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c56:	6093      	str	r3, [r2, #8]
 8003c58:	4ba9      	ldr	r3, [pc, #676]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	49a6      	ldr	r1, [pc, #664]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d010      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c76:	4ba2      	ldr	r3, [pc, #648]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c7c:	4aa0      	ldr	r2, [pc, #640]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c86:	4b9e      	ldr	r3, [pc, #632]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	499b      	ldr	r1, [pc, #620]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ca4:	4b96      	ldr	r3, [pc, #600]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003caa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb2:	4993      	ldr	r1, [pc, #588]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cc6:	4b8e      	ldr	r3, [pc, #568]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd4:	498a      	ldr	r1, [pc, #552]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ce8:	4b85      	ldr	r3, [pc, #532]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf6:	4982      	ldr	r1, [pc, #520]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d0a:	4b7d      	ldr	r3, [pc, #500]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	4979      	ldr	r1, [pc, #484]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d2c:	4b74      	ldr	r3, [pc, #464]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	f023 0203 	bic.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	4971      	ldr	r1, [pc, #452]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d4e:	4b6c      	ldr	r3, [pc, #432]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	f023 020c 	bic.w	r2, r3, #12
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5c:	4968      	ldr	r1, [pc, #416]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d70:	4b63      	ldr	r3, [pc, #396]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7e:	4960      	ldr	r1, [pc, #384]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d92:	4b5b      	ldr	r3, [pc, #364]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da0:	4957      	ldr	r1, [pc, #348]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003db4:	4b52      	ldr	r3, [pc, #328]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	494f      	ldr	r1, [pc, #316]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003dd6:	4b4a      	ldr	r3, [pc, #296]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	4946      	ldr	r1, [pc, #280]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003df8:	4b41      	ldr	r3, [pc, #260]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	493e      	ldr	r1, [pc, #248]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e1a:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e28:	4935      	ldr	r1, [pc, #212]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e3c:	4b30      	ldr	r3, [pc, #192]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e4a:	492d      	ldr	r1, [pc, #180]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d011      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e5e:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e6c:	4924      	ldr	r1, [pc, #144]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e9e:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eac:	4914      	ldr	r1, [pc, #80]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00b      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed0:	490b      	ldr	r1, [pc, #44]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00f      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef4:	4902      	ldr	r1, [pc, #8]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003efc:	e002      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00b      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f10:	4b8a      	ldr	r3, [pc, #552]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	4986      	ldr	r1, [pc, #536]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00b      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f34:	4b81      	ldr	r3, [pc, #516]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f44:	497d      	ldr	r1, [pc, #500]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d006      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80d6 	beq.w	800410c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f60:	4b76      	ldr	r3, [pc, #472]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a75      	ldr	r2, [pc, #468]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6c:	f7fd f920 	bl	80011b0 <HAL_GetTick>
 8003f70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f74:	f7fd f91c 	bl	80011b0 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	; 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e195      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f86:	4b6d      	ldr	r3, [pc, #436]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d021      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d11d      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fa6:	4b65      	ldr	r3, [pc, #404]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fac:	0c1b      	lsrs	r3, r3, #16
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fb4:	4b61      	ldr	r3, [pc, #388]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fba:	0e1b      	lsrs	r3, r3, #24
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	019a      	lsls	r2, r3, #6
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	071b      	lsls	r3, r3, #28
 8003fda:	4958      	ldr	r1, [pc, #352]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff6:	d00a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004000:	2b00      	cmp	r3, #0
 8004002:	d02e      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800400c:	d129      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800400e:	4b4b      	ldr	r3, [pc, #300]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004014:	0c1b      	lsrs	r3, r3, #16
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800401c:	4b47      	ldr	r3, [pc, #284]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004022:	0f1b      	lsrs	r3, r3, #28
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	019a      	lsls	r2, r3, #6
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	061b      	lsls	r3, r3, #24
 800403c:	431a      	orrs	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	071b      	lsls	r3, r3, #28
 8004042:	493e      	ldr	r1, [pc, #248]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800404a:	4b3c      	ldr	r3, [pc, #240]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004050:	f023 021f 	bic.w	r2, r3, #31
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	3b01      	subs	r3, #1
 800405a:	4938      	ldr	r1, [pc, #224]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d01d      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800406e:	4b33      	ldr	r3, [pc, #204]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004074:	0e1b      	lsrs	r3, r3, #24
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800407c:	4b2f      	ldr	r3, [pc, #188]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004082:	0f1b      	lsrs	r3, r3, #28
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	019a      	lsls	r2, r3, #6
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	431a      	orrs	r2, r3
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	061b      	lsls	r3, r3, #24
 800409c:	431a      	orrs	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	071b      	lsls	r3, r3, #28
 80040a2:	4926      	ldr	r1, [pc, #152]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d011      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	019a      	lsls	r2, r3, #6
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	041b      	lsls	r3, r3, #16
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	061b      	lsls	r3, r3, #24
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	071b      	lsls	r3, r3, #28
 80040d2:	491a      	ldr	r1, [pc, #104]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040da:	4b18      	ldr	r3, [pc, #96]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a17      	ldr	r2, [pc, #92]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e6:	f7fd f863 	bl	80011b0 <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040ee:	f7fd f85f 	bl	80011b0 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b64      	cmp	r3, #100	; 0x64
 80040fa:	d901      	bls.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e0d8      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004100:	4b0e      	ldr	r3, [pc, #56]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b01      	cmp	r3, #1
 8004110:	f040 80ce 	bne.w	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a08      	ldr	r2, [pc, #32]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800411e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004120:	f7fd f846 	bl	80011b0 <HAL_GetTick>
 8004124:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004126:	e00b      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004128:	f7fd f842 	bl	80011b0 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	; 0x64
 8004134:	d904      	bls.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e0bb      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800413a:	bf00      	nop
 800413c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004140:	4b5e      	ldr	r3, [pc, #376]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800414c:	d0ec      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d009      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800416a:	2b00      	cmp	r3, #0
 800416c:	d02e      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d12a      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004176:	4b51      	ldr	r3, [pc, #324]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417c:	0c1b      	lsrs	r3, r3, #16
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004184:	4b4d      	ldr	r3, [pc, #308]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	0f1b      	lsrs	r3, r3, #28
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	019a      	lsls	r2, r3, #6
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	061b      	lsls	r3, r3, #24
 80041a4:	431a      	orrs	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	071b      	lsls	r3, r3, #28
 80041aa:	4944      	ldr	r1, [pc, #272]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041b2:	4b42      	ldr	r3, [pc, #264]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	3b01      	subs	r3, #1
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	493d      	ldr	r1, [pc, #244]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d022      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041e0:	d11d      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041e2:	4b36      	ldr	r3, [pc, #216]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	0e1b      	lsrs	r3, r3, #24
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041f0:	4b32      	ldr	r3, [pc, #200]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	0f1b      	lsrs	r3, r3, #28
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	019a      	lsls	r2, r3, #6
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	041b      	lsls	r3, r3, #16
 800420a:	431a      	orrs	r2, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	061b      	lsls	r3, r3, #24
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	071b      	lsls	r3, r3, #28
 8004216:	4929      	ldr	r1, [pc, #164]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d028      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800422a:	4b24      	ldr	r3, [pc, #144]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	0e1b      	lsrs	r3, r3, #24
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004238:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	0c1b      	lsrs	r3, r3, #16
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	019a      	lsls	r2, r3, #6
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	041b      	lsls	r3, r3, #16
 8004250:	431a      	orrs	r2, r3
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	061b      	lsls	r3, r3, #24
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	071b      	lsls	r3, r3, #28
 800425e:	4917      	ldr	r1, [pc, #92]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800426c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	4911      	ldr	r1, [pc, #68]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800427c:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004288:	f7fc ff92 	bl	80011b0 <HAL_GetTick>
 800428c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004290:	f7fc ff8e 	bl	80011b0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e007      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ae:	d1ef      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3720      	adds	r7, #32
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800

080042c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e040      	b.n	8004354 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fc fd94 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	; 0x24
 80042ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8b0 	bl	8004464 <UART_SetConfig>
 8004304:	4603      	mov	r3, r0
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e022      	b.n	8004354 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fb08 	bl	800492c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800432a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800433a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fb8f 	bl	8004a70 <UART_CheckIdleState>
 8004352:	4603      	mov	r3, r0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	4613      	mov	r3, r2
 800436a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004370:	2b20      	cmp	r3, #32
 8004372:	d171      	bne.n	8004458 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_UART_Transmit+0x24>
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e06a      	b.n	800445a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2221      	movs	r2, #33	; 0x21
 8004390:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004392:	f7fc ff0d 	bl	80011b0 <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b0:	d108      	bne.n	80043c4 <HAL_UART_Transmit+0x68>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d104      	bne.n	80043c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	e003      	b.n	80043cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043cc:	e02c      	b.n	8004428 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fb96 	bl	8004b0a <UART_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e038      	b.n	800445a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	3302      	adds	r3, #2
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	e007      	b.n	8004416 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	3301      	adds	r3, #1
 8004414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1cc      	bne.n	80043ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2200      	movs	r2, #0
 800443c:	2140      	movs	r1, #64	; 0x40
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fb63 	bl	8004b0a <UART_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e005      	b.n	800445a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	e000      	b.n	800445a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004458:	2302      	movs	r3, #2
  }
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4ba6      	ldr	r3, [pc, #664]	; (8004728 <UART_SetConfig+0x2c4>)
 8004490:	4013      	ands	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	6979      	ldr	r1, [r7, #20]
 8004498:	430b      	orrs	r3, r1
 800449a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a94      	ldr	r2, [pc, #592]	; (800472c <UART_SetConfig+0x2c8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d120      	bne.n	8004522 <UART_SetConfig+0xbe>
 80044e0:	4b93      	ldr	r3, [pc, #588]	; (8004730 <UART_SetConfig+0x2cc>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d816      	bhi.n	800451c <UART_SetConfig+0xb8>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0x90>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004505 	.word	0x08004505
 80044f8:	08004511 	.word	0x08004511
 80044fc:	0800450b 	.word	0x0800450b
 8004500:	08004517 	.word	0x08004517
 8004504:	2301      	movs	r3, #1
 8004506:	77fb      	strb	r3, [r7, #31]
 8004508:	e150      	b.n	80047ac <UART_SetConfig+0x348>
 800450a:	2302      	movs	r3, #2
 800450c:	77fb      	strb	r3, [r7, #31]
 800450e:	e14d      	b.n	80047ac <UART_SetConfig+0x348>
 8004510:	2304      	movs	r3, #4
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e14a      	b.n	80047ac <UART_SetConfig+0x348>
 8004516:	2308      	movs	r3, #8
 8004518:	77fb      	strb	r3, [r7, #31]
 800451a:	e147      	b.n	80047ac <UART_SetConfig+0x348>
 800451c:	2310      	movs	r3, #16
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e144      	b.n	80047ac <UART_SetConfig+0x348>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a83      	ldr	r2, [pc, #524]	; (8004734 <UART_SetConfig+0x2d0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d132      	bne.n	8004592 <UART_SetConfig+0x12e>
 800452c:	4b80      	ldr	r3, [pc, #512]	; (8004730 <UART_SetConfig+0x2cc>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b0c      	cmp	r3, #12
 8004538:	d828      	bhi.n	800458c <UART_SetConfig+0x128>
 800453a:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <UART_SetConfig+0xdc>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004575 	.word	0x08004575
 8004544:	0800458d 	.word	0x0800458d
 8004548:	0800458d 	.word	0x0800458d
 800454c:	0800458d 	.word	0x0800458d
 8004550:	08004581 	.word	0x08004581
 8004554:	0800458d 	.word	0x0800458d
 8004558:	0800458d 	.word	0x0800458d
 800455c:	0800458d 	.word	0x0800458d
 8004560:	0800457b 	.word	0x0800457b
 8004564:	0800458d 	.word	0x0800458d
 8004568:	0800458d 	.word	0x0800458d
 800456c:	0800458d 	.word	0x0800458d
 8004570:	08004587 	.word	0x08004587
 8004574:	2300      	movs	r3, #0
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e118      	b.n	80047ac <UART_SetConfig+0x348>
 800457a:	2302      	movs	r3, #2
 800457c:	77fb      	strb	r3, [r7, #31]
 800457e:	e115      	b.n	80047ac <UART_SetConfig+0x348>
 8004580:	2304      	movs	r3, #4
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e112      	b.n	80047ac <UART_SetConfig+0x348>
 8004586:	2308      	movs	r3, #8
 8004588:	77fb      	strb	r3, [r7, #31]
 800458a:	e10f      	b.n	80047ac <UART_SetConfig+0x348>
 800458c:	2310      	movs	r3, #16
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e10c      	b.n	80047ac <UART_SetConfig+0x348>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a68      	ldr	r2, [pc, #416]	; (8004738 <UART_SetConfig+0x2d4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d120      	bne.n	80045de <UART_SetConfig+0x17a>
 800459c:	4b64      	ldr	r3, [pc, #400]	; (8004730 <UART_SetConfig+0x2cc>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045a6:	2b30      	cmp	r3, #48	; 0x30
 80045a8:	d013      	beq.n	80045d2 <UART_SetConfig+0x16e>
 80045aa:	2b30      	cmp	r3, #48	; 0x30
 80045ac:	d814      	bhi.n	80045d8 <UART_SetConfig+0x174>
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d009      	beq.n	80045c6 <UART_SetConfig+0x162>
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d810      	bhi.n	80045d8 <UART_SetConfig+0x174>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <UART_SetConfig+0x15c>
 80045ba:	2b10      	cmp	r3, #16
 80045bc:	d006      	beq.n	80045cc <UART_SetConfig+0x168>
 80045be:	e00b      	b.n	80045d8 <UART_SetConfig+0x174>
 80045c0:	2300      	movs	r3, #0
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e0f2      	b.n	80047ac <UART_SetConfig+0x348>
 80045c6:	2302      	movs	r3, #2
 80045c8:	77fb      	strb	r3, [r7, #31]
 80045ca:	e0ef      	b.n	80047ac <UART_SetConfig+0x348>
 80045cc:	2304      	movs	r3, #4
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e0ec      	b.n	80047ac <UART_SetConfig+0x348>
 80045d2:	2308      	movs	r3, #8
 80045d4:	77fb      	strb	r3, [r7, #31]
 80045d6:	e0e9      	b.n	80047ac <UART_SetConfig+0x348>
 80045d8:	2310      	movs	r3, #16
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e0e6      	b.n	80047ac <UART_SetConfig+0x348>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a56      	ldr	r2, [pc, #344]	; (800473c <UART_SetConfig+0x2d8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d120      	bne.n	800462a <UART_SetConfig+0x1c6>
 80045e8:	4b51      	ldr	r3, [pc, #324]	; (8004730 <UART_SetConfig+0x2cc>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045f2:	2bc0      	cmp	r3, #192	; 0xc0
 80045f4:	d013      	beq.n	800461e <UART_SetConfig+0x1ba>
 80045f6:	2bc0      	cmp	r3, #192	; 0xc0
 80045f8:	d814      	bhi.n	8004624 <UART_SetConfig+0x1c0>
 80045fa:	2b80      	cmp	r3, #128	; 0x80
 80045fc:	d009      	beq.n	8004612 <UART_SetConfig+0x1ae>
 80045fe:	2b80      	cmp	r3, #128	; 0x80
 8004600:	d810      	bhi.n	8004624 <UART_SetConfig+0x1c0>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <UART_SetConfig+0x1a8>
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	d006      	beq.n	8004618 <UART_SetConfig+0x1b4>
 800460a:	e00b      	b.n	8004624 <UART_SetConfig+0x1c0>
 800460c:	2300      	movs	r3, #0
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e0cc      	b.n	80047ac <UART_SetConfig+0x348>
 8004612:	2302      	movs	r3, #2
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e0c9      	b.n	80047ac <UART_SetConfig+0x348>
 8004618:	2304      	movs	r3, #4
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e0c6      	b.n	80047ac <UART_SetConfig+0x348>
 800461e:	2308      	movs	r3, #8
 8004620:	77fb      	strb	r3, [r7, #31]
 8004622:	e0c3      	b.n	80047ac <UART_SetConfig+0x348>
 8004624:	2310      	movs	r3, #16
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e0c0      	b.n	80047ac <UART_SetConfig+0x348>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a44      	ldr	r2, [pc, #272]	; (8004740 <UART_SetConfig+0x2dc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d125      	bne.n	8004680 <UART_SetConfig+0x21c>
 8004634:	4b3e      	ldr	r3, [pc, #248]	; (8004730 <UART_SetConfig+0x2cc>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004642:	d017      	beq.n	8004674 <UART_SetConfig+0x210>
 8004644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004648:	d817      	bhi.n	800467a <UART_SetConfig+0x216>
 800464a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800464e:	d00b      	beq.n	8004668 <UART_SetConfig+0x204>
 8004650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004654:	d811      	bhi.n	800467a <UART_SetConfig+0x216>
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <UART_SetConfig+0x1fe>
 800465a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465e:	d006      	beq.n	800466e <UART_SetConfig+0x20a>
 8004660:	e00b      	b.n	800467a <UART_SetConfig+0x216>
 8004662:	2300      	movs	r3, #0
 8004664:	77fb      	strb	r3, [r7, #31]
 8004666:	e0a1      	b.n	80047ac <UART_SetConfig+0x348>
 8004668:	2302      	movs	r3, #2
 800466a:	77fb      	strb	r3, [r7, #31]
 800466c:	e09e      	b.n	80047ac <UART_SetConfig+0x348>
 800466e:	2304      	movs	r3, #4
 8004670:	77fb      	strb	r3, [r7, #31]
 8004672:	e09b      	b.n	80047ac <UART_SetConfig+0x348>
 8004674:	2308      	movs	r3, #8
 8004676:	77fb      	strb	r3, [r7, #31]
 8004678:	e098      	b.n	80047ac <UART_SetConfig+0x348>
 800467a:	2310      	movs	r3, #16
 800467c:	77fb      	strb	r3, [r7, #31]
 800467e:	e095      	b.n	80047ac <UART_SetConfig+0x348>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a2f      	ldr	r2, [pc, #188]	; (8004744 <UART_SetConfig+0x2e0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d125      	bne.n	80046d6 <UART_SetConfig+0x272>
 800468a:	4b29      	ldr	r3, [pc, #164]	; (8004730 <UART_SetConfig+0x2cc>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004694:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004698:	d017      	beq.n	80046ca <UART_SetConfig+0x266>
 800469a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800469e:	d817      	bhi.n	80046d0 <UART_SetConfig+0x26c>
 80046a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a4:	d00b      	beq.n	80046be <UART_SetConfig+0x25a>
 80046a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046aa:	d811      	bhi.n	80046d0 <UART_SetConfig+0x26c>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <UART_SetConfig+0x254>
 80046b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b4:	d006      	beq.n	80046c4 <UART_SetConfig+0x260>
 80046b6:	e00b      	b.n	80046d0 <UART_SetConfig+0x26c>
 80046b8:	2301      	movs	r3, #1
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e076      	b.n	80047ac <UART_SetConfig+0x348>
 80046be:	2302      	movs	r3, #2
 80046c0:	77fb      	strb	r3, [r7, #31]
 80046c2:	e073      	b.n	80047ac <UART_SetConfig+0x348>
 80046c4:	2304      	movs	r3, #4
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e070      	b.n	80047ac <UART_SetConfig+0x348>
 80046ca:	2308      	movs	r3, #8
 80046cc:	77fb      	strb	r3, [r7, #31]
 80046ce:	e06d      	b.n	80047ac <UART_SetConfig+0x348>
 80046d0:	2310      	movs	r3, #16
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e06a      	b.n	80047ac <UART_SetConfig+0x348>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1b      	ldr	r2, [pc, #108]	; (8004748 <UART_SetConfig+0x2e4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d138      	bne.n	8004752 <UART_SetConfig+0x2ee>
 80046e0:	4b13      	ldr	r3, [pc, #76]	; (8004730 <UART_SetConfig+0x2cc>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80046ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046ee:	d017      	beq.n	8004720 <UART_SetConfig+0x2bc>
 80046f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046f4:	d82a      	bhi.n	800474c <UART_SetConfig+0x2e8>
 80046f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fa:	d00b      	beq.n	8004714 <UART_SetConfig+0x2b0>
 80046fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004700:	d824      	bhi.n	800474c <UART_SetConfig+0x2e8>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <UART_SetConfig+0x2aa>
 8004706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470a:	d006      	beq.n	800471a <UART_SetConfig+0x2b6>
 800470c:	e01e      	b.n	800474c <UART_SetConfig+0x2e8>
 800470e:	2300      	movs	r3, #0
 8004710:	77fb      	strb	r3, [r7, #31]
 8004712:	e04b      	b.n	80047ac <UART_SetConfig+0x348>
 8004714:	2302      	movs	r3, #2
 8004716:	77fb      	strb	r3, [r7, #31]
 8004718:	e048      	b.n	80047ac <UART_SetConfig+0x348>
 800471a:	2304      	movs	r3, #4
 800471c:	77fb      	strb	r3, [r7, #31]
 800471e:	e045      	b.n	80047ac <UART_SetConfig+0x348>
 8004720:	2308      	movs	r3, #8
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e042      	b.n	80047ac <UART_SetConfig+0x348>
 8004726:	bf00      	nop
 8004728:	efff69f3 	.word	0xefff69f3
 800472c:	40011000 	.word	0x40011000
 8004730:	40023800 	.word	0x40023800
 8004734:	40004400 	.word	0x40004400
 8004738:	40004800 	.word	0x40004800
 800473c:	40004c00 	.word	0x40004c00
 8004740:	40005000 	.word	0x40005000
 8004744:	40011400 	.word	0x40011400
 8004748:	40007800 	.word	0x40007800
 800474c:	2310      	movs	r3, #16
 800474e:	77fb      	strb	r3, [r7, #31]
 8004750:	e02c      	b.n	80047ac <UART_SetConfig+0x348>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a72      	ldr	r2, [pc, #456]	; (8004920 <UART_SetConfig+0x4bc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d125      	bne.n	80047a8 <UART_SetConfig+0x344>
 800475c:	4b71      	ldr	r3, [pc, #452]	; (8004924 <UART_SetConfig+0x4c0>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004762:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004766:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800476a:	d017      	beq.n	800479c <UART_SetConfig+0x338>
 800476c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004770:	d817      	bhi.n	80047a2 <UART_SetConfig+0x33e>
 8004772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004776:	d00b      	beq.n	8004790 <UART_SetConfig+0x32c>
 8004778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800477c:	d811      	bhi.n	80047a2 <UART_SetConfig+0x33e>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <UART_SetConfig+0x326>
 8004782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004786:	d006      	beq.n	8004796 <UART_SetConfig+0x332>
 8004788:	e00b      	b.n	80047a2 <UART_SetConfig+0x33e>
 800478a:	2300      	movs	r3, #0
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e00d      	b.n	80047ac <UART_SetConfig+0x348>
 8004790:	2302      	movs	r3, #2
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e00a      	b.n	80047ac <UART_SetConfig+0x348>
 8004796:	2304      	movs	r3, #4
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e007      	b.n	80047ac <UART_SetConfig+0x348>
 800479c:	2308      	movs	r3, #8
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e004      	b.n	80047ac <UART_SetConfig+0x348>
 80047a2:	2310      	movs	r3, #16
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e001      	b.n	80047ac <UART_SetConfig+0x348>
 80047a8:	2310      	movs	r3, #16
 80047aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b4:	d15b      	bne.n	800486e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80047b6:	7ffb      	ldrb	r3, [r7, #31]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d828      	bhi.n	800480e <UART_SetConfig+0x3aa>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <UART_SetConfig+0x360>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	080047f1 	.word	0x080047f1
 80047cc:	080047f9 	.word	0x080047f9
 80047d0:	0800480f 	.word	0x0800480f
 80047d4:	080047ff 	.word	0x080047ff
 80047d8:	0800480f 	.word	0x0800480f
 80047dc:	0800480f 	.word	0x0800480f
 80047e0:	0800480f 	.word	0x0800480f
 80047e4:	08004807 	.word	0x08004807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e8:	f7ff f91a 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80047ec:	61b8      	str	r0, [r7, #24]
        break;
 80047ee:	e013      	b.n	8004818 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f0:	f7ff f92a 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 80047f4:	61b8      	str	r0, [r7, #24]
        break;
 80047f6:	e00f      	b.n	8004818 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f8:	4b4b      	ldr	r3, [pc, #300]	; (8004928 <UART_SetConfig+0x4c4>)
 80047fa:	61bb      	str	r3, [r7, #24]
        break;
 80047fc:	e00c      	b.n	8004818 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047fe:	f7fe fffd 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 8004802:	61b8      	str	r0, [r7, #24]
        break;
 8004804:	e008      	b.n	8004818 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480a:	61bb      	str	r3, [r7, #24]
        break;
 800480c:	e004      	b.n	8004818 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	77bb      	strb	r3, [r7, #30]
        break;
 8004816:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d074      	beq.n	8004908 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	005a      	lsls	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	441a      	add	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004832:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b0f      	cmp	r3, #15
 8004838:	d916      	bls.n	8004868 <UART_SetConfig+0x404>
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004840:	d212      	bcs.n	8004868 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	b29b      	uxth	r3, r3
 8004846:	f023 030f 	bic.w	r3, r3, #15
 800484a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	b29b      	uxth	r3, r3
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	b29a      	uxth	r2, r3
 8004858:	89fb      	ldrh	r3, [r7, #14]
 800485a:	4313      	orrs	r3, r2
 800485c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	89fa      	ldrh	r2, [r7, #14]
 8004864:	60da      	str	r2, [r3, #12]
 8004866:	e04f      	b.n	8004908 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	77bb      	strb	r3, [r7, #30]
 800486c:	e04c      	b.n	8004908 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800486e:	7ffb      	ldrb	r3, [r7, #31]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d828      	bhi.n	80048c6 <UART_SetConfig+0x462>
 8004874:	a201      	add	r2, pc, #4	; (adr r2, 800487c <UART_SetConfig+0x418>)
 8004876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487a:	bf00      	nop
 800487c:	080048a1 	.word	0x080048a1
 8004880:	080048a9 	.word	0x080048a9
 8004884:	080048b1 	.word	0x080048b1
 8004888:	080048c7 	.word	0x080048c7
 800488c:	080048b7 	.word	0x080048b7
 8004890:	080048c7 	.word	0x080048c7
 8004894:	080048c7 	.word	0x080048c7
 8004898:	080048c7 	.word	0x080048c7
 800489c:	080048bf 	.word	0x080048bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a0:	f7ff f8be 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80048a4:	61b8      	str	r0, [r7, #24]
        break;
 80048a6:	e013      	b.n	80048d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a8:	f7ff f8ce 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 80048ac:	61b8      	str	r0, [r7, #24]
        break;
 80048ae:	e00f      	b.n	80048d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b0:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <UART_SetConfig+0x4c4>)
 80048b2:	61bb      	str	r3, [r7, #24]
        break;
 80048b4:	e00c      	b.n	80048d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b6:	f7fe ffa1 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 80048ba:	61b8      	str	r0, [r7, #24]
        break;
 80048bc:	e008      	b.n	80048d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c2:	61bb      	str	r3, [r7, #24]
        break;
 80048c4:	e004      	b.n	80048d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	77bb      	strb	r3, [r7, #30]
        break;
 80048ce:	bf00      	nop
    }

    if (pclk != 0U)
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d018      	beq.n	8004908 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	085a      	lsrs	r2, r3, #1
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	441a      	add	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b0f      	cmp	r3, #15
 80048ee:	d909      	bls.n	8004904 <UART_SetConfig+0x4a0>
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f6:	d205      	bcs.n	8004904 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60da      	str	r2, [r3, #12]
 8004902:	e001      	b.n	8004908 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004914:	7fbb      	ldrb	r3, [r7, #30]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40007c00 	.word	0x40007c00
 8004924:	40023800 	.word	0x40023800
 8004928:	00f42400 	.word	0x00f42400

0800492c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01a      	beq.n	8004a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a2a:	d10a      	bne.n	8004a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	605a      	str	r2, [r3, #4]
  }
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a80:	f7fc fb96 	bl	80011b0 <HAL_GetTick>
 8004a84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d10e      	bne.n	8004ab2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f831 	bl	8004b0a <UART_WaitOnFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e027      	b.n	8004b02 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d10e      	bne.n	8004ade <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f81b 	bl	8004b0a <UART_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e011      	b.n	8004b02 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b09c      	sub	sp, #112	; 0x70
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1a:	e0a7      	b.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	f000 80a3 	beq.w	8004c6c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b26:	f7fc fb43 	bl	80011b0 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x32>
 8004b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d13f      	bne.n	8004bbc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b50:	667b      	str	r3, [r7, #100]	; 0x64
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e6      	bne.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3308      	adds	r3, #8
 8004b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	663b      	str	r3, [r7, #96]	; 0x60
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e5      	bne.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e068      	b.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d050      	beq.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd8:	d148      	bne.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	637b      	str	r3, [r7, #52]	; 0x34
 8004c04:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e6      	bne.n	8004be4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	613b      	str	r3, [r7, #16]
   return(result);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3308      	adds	r3, #8
 8004c34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c36:	623a      	str	r2, [r7, #32]
 8004c38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	69f9      	ldr	r1, [r7, #28]
 8004c3c:	6a3a      	ldr	r2, [r7, #32]
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e5      	bne.n	8004c16 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e010      	b.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69da      	ldr	r2, [r3, #28]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4013      	ands	r3, r2
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	f43f af48 	beq.w	8004b1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3770      	adds	r7, #112	; 0x70
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c98:	b084      	sub	sp, #16
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	f107 001c 	add.w	r0, r7, #28
 8004ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d120      	bne.n	8004cf2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <USB_CoreInit+0xac>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d105      	bne.n	8004ce6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fa96 	bl	8005218 <USB_CoreReset>
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]
 8004cf0:	e010      	b.n	8004d14 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fa8a 	bl	8005218 <USB_CoreReset>
 8004d04:	4603      	mov	r3, r0
 8004d06:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d10b      	bne.n	8004d32 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f043 0206 	orr.w	r2, r3, #6
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d3e:	b004      	add	sp, #16
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	ffbdffbf 	.word	0xffbdffbf

08004d48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f023 0201 	bic.w	r2, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	460b      	mov	r3, r1
 8004d74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d115      	bne.n	8004db8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d98:	2001      	movs	r0, #1
 8004d9a:	f7fc fa15 	bl	80011c8 <HAL_Delay>
      ms++;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3301      	adds	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fa29 	bl	80051fc <USB_GetMode>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d01e      	beq.n	8004dee <USB_SetCurrentMode+0x84>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b31      	cmp	r3, #49	; 0x31
 8004db4:	d9f0      	bls.n	8004d98 <USB_SetCurrentMode+0x2e>
 8004db6:	e01a      	b.n	8004dee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d115      	bne.n	8004dea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dca:	2001      	movs	r0, #1
 8004dcc:	f7fc f9fc 	bl	80011c8 <HAL_Delay>
      ms++;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fa10 	bl	80051fc <USB_GetMode>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <USB_SetCurrentMode+0x84>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b31      	cmp	r3, #49	; 0x31
 8004de6:	d9f0      	bls.n	8004dca <USB_SetCurrentMode+0x60>
 8004de8:	e001      	b.n	8004dee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e005      	b.n	8004dfa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b32      	cmp	r3, #50	; 0x32
 8004df2:	d101      	bne.n	8004df8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e04:	b084      	sub	sp, #16
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b086      	sub	sp, #24
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	e009      	b.n	8004e38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	3340      	adds	r3, #64	; 0x40
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	2200      	movs	r2, #0
 8004e30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	3301      	adds	r3, #1
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b0e      	cmp	r3, #14
 8004e3c:	d9f2      	bls.n	8004e24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d11c      	bne.n	8004e7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e52:	f043 0302 	orr.w	r3, r3, #2
 8004e56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	e005      	b.n	8004e8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e90:	461a      	mov	r2, r3
 8004e92:	2300      	movs	r3, #0
 8004e94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	680b      	ldr	r3, [r1, #0]
 8004ea8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d10c      	bne.n	8004eca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d104      	bne.n	8004ec0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f965 	bl	8005188 <USB_SetDevSpeed>
 8004ebe:	e008      	b.n	8004ed2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f960 	bl	8005188 <USB_SetDevSpeed>
 8004ec8:	e003      	b.n	8004ed2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004eca:	2103      	movs	r1, #3
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f95b 	bl	8005188 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ed2:	2110      	movs	r1, #16
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f8f3 	bl	80050c0 <USB_FlushTxFifo>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f91f 	bl	8005128 <USB_FlushRxFifo>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efa:	461a      	mov	r2, r3
 8004efc:	2300      	movs	r3, #0
 8004efe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f06:	461a      	mov	r2, r3
 8004f08:	2300      	movs	r3, #0
 8004f0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f12:	461a      	mov	r2, r3
 8004f14:	2300      	movs	r3, #0
 8004f16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f18:	2300      	movs	r3, #0
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	e043      	b.n	8004fa6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f34:	d118      	bne.n	8004f68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10a      	bne.n	8004f52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	e013      	b.n	8004f7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	e008      	b.n	8004f7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f74:	461a      	mov	r2, r3
 8004f76:	2300      	movs	r3, #0
 8004f78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f86:	461a      	mov	r2, r3
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d3b7      	bcc.n	8004f1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
 8004fb2:	e043      	b.n	800503c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fca:	d118      	bne.n	8004ffe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10a      	bne.n	8004fe8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	e013      	b.n	8005010 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	e008      	b.n	8005010 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500a:	461a      	mov	r2, r3
 800500c:	2300      	movs	r3, #0
 800500e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501c:	461a      	mov	r2, r3
 800501e:	2300      	movs	r3, #0
 8005020:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502e:	461a      	mov	r2, r3
 8005030:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005034:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3301      	adds	r3, #1
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	429a      	cmp	r2, r3
 8005042:	d3b7      	bcc.n	8004fb4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005056:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005064:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	2b00      	cmp	r3, #0
 800506a:	d105      	bne.n	8005078 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f043 0210 	orr.w	r2, r3, #16
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <USB_DevInit+0x2b4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d005      	beq.n	8005096 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f043 0208 	orr.w	r2, r3, #8
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005098:	2b01      	cmp	r3, #1
 800509a:	d105      	bne.n	80050a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	4b06      	ldr	r3, [pc, #24]	; (80050bc <USB_DevInit+0x2b8>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050b4:	b004      	add	sp, #16
 80050b6:	4770      	bx	lr
 80050b8:	803c3800 	.word	0x803c3800
 80050bc:	40000004 	.word	0x40000004

080050c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3301      	adds	r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4a13      	ldr	r2, [pc, #76]	; (8005124 <USB_FlushTxFifo+0x64>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e01b      	b.n	8005118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	daf2      	bge.n	80050ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	019b      	lsls	r3, r3, #6
 80050f0:	f043 0220 	orr.w	r2, r3, #32
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a08      	ldr	r2, [pc, #32]	; (8005124 <USB_FlushTxFifo+0x64>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e006      	b.n	8005118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b20      	cmp	r3, #32
 8005114:	d0f0      	beq.n	80050f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	00030d40 	.word	0x00030d40

08005128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3301      	adds	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4a11      	ldr	r2, [pc, #68]	; (8005184 <USB_FlushRxFifo+0x5c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d901      	bls.n	8005146 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e018      	b.n	8005178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	daf2      	bge.n	8005134 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2210      	movs	r2, #16
 8005156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3301      	adds	r3, #1
 800515c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4a08      	ldr	r2, [pc, #32]	; (8005184 <USB_FlushRxFifo+0x5c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e006      	b.n	8005178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b10      	cmp	r3, #16
 8005174:	d0f0      	beq.n	8005158 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	00030d40 	.word	0x00030d40

08005188 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051a8:	4313      	orrs	r3, r2
 80051aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051d4:	f023 0303 	bic.w	r3, r3, #3
 80051d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e8:	f043 0302 	orr.w	r3, r3, #2
 80051ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f003 0301 	and.w	r3, r3, #1
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3301      	adds	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4a13      	ldr	r2, [pc, #76]	; (800527c <USB_CoreReset+0x64>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e01b      	b.n	800526e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	daf2      	bge.n	8005224 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f043 0201 	orr.w	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3301      	adds	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4a09      	ldr	r2, [pc, #36]	; (800527c <USB_CoreReset+0x64>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d901      	bls.n	8005260 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e006      	b.n	800526e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b01      	cmp	r3, #1
 800526a:	d0f0      	beq.n	800524e <USB_CoreReset+0x36>

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	00030d40 	.word	0x00030d40

08005280 <malloc>:
 8005280:	4b02      	ldr	r3, [pc, #8]	; (800528c <malloc+0xc>)
 8005282:	4601      	mov	r1, r0
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	f000 b82b 	b.w	80052e0 <_malloc_r>
 800528a:	bf00      	nop
 800528c:	20000058 	.word	0x20000058

08005290 <free>:
 8005290:	4b02      	ldr	r3, [pc, #8]	; (800529c <free+0xc>)
 8005292:	4601      	mov	r1, r0
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	f000 b913 	b.w	80054c0 <_free_r>
 800529a:	bf00      	nop
 800529c:	20000058 	.word	0x20000058

080052a0 <sbrk_aligned>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	4e0e      	ldr	r6, [pc, #56]	; (80052dc <sbrk_aligned+0x3c>)
 80052a4:	460c      	mov	r4, r1
 80052a6:	6831      	ldr	r1, [r6, #0]
 80052a8:	4605      	mov	r5, r0
 80052aa:	b911      	cbnz	r1, 80052b2 <sbrk_aligned+0x12>
 80052ac:	f000 f8cc 	bl	8005448 <_sbrk_r>
 80052b0:	6030      	str	r0, [r6, #0]
 80052b2:	4621      	mov	r1, r4
 80052b4:	4628      	mov	r0, r5
 80052b6:	f000 f8c7 	bl	8005448 <_sbrk_r>
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	d00a      	beq.n	80052d4 <sbrk_aligned+0x34>
 80052be:	1cc4      	adds	r4, r0, #3
 80052c0:	f024 0403 	bic.w	r4, r4, #3
 80052c4:	42a0      	cmp	r0, r4
 80052c6:	d007      	beq.n	80052d8 <sbrk_aligned+0x38>
 80052c8:	1a21      	subs	r1, r4, r0
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 f8bc 	bl	8005448 <_sbrk_r>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d101      	bne.n	80052d8 <sbrk_aligned+0x38>
 80052d4:	f04f 34ff 	mov.w	r4, #4294967295
 80052d8:	4620      	mov	r0, r4
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	20000900 	.word	0x20000900

080052e0 <_malloc_r>:
 80052e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e4:	1ccd      	adds	r5, r1, #3
 80052e6:	f025 0503 	bic.w	r5, r5, #3
 80052ea:	3508      	adds	r5, #8
 80052ec:	2d0c      	cmp	r5, #12
 80052ee:	bf38      	it	cc
 80052f0:	250c      	movcc	r5, #12
 80052f2:	2d00      	cmp	r5, #0
 80052f4:	4607      	mov	r7, r0
 80052f6:	db01      	blt.n	80052fc <_malloc_r+0x1c>
 80052f8:	42a9      	cmp	r1, r5
 80052fa:	d905      	bls.n	8005308 <_malloc_r+0x28>
 80052fc:	230c      	movs	r3, #12
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	2600      	movs	r6, #0
 8005302:	4630      	mov	r0, r6
 8005304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005308:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053dc <_malloc_r+0xfc>
 800530c:	f000 f868 	bl	80053e0 <__malloc_lock>
 8005310:	f8d8 3000 	ldr.w	r3, [r8]
 8005314:	461c      	mov	r4, r3
 8005316:	bb5c      	cbnz	r4, 8005370 <_malloc_r+0x90>
 8005318:	4629      	mov	r1, r5
 800531a:	4638      	mov	r0, r7
 800531c:	f7ff ffc0 	bl	80052a0 <sbrk_aligned>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	4604      	mov	r4, r0
 8005324:	d155      	bne.n	80053d2 <_malloc_r+0xf2>
 8005326:	f8d8 4000 	ldr.w	r4, [r8]
 800532a:	4626      	mov	r6, r4
 800532c:	2e00      	cmp	r6, #0
 800532e:	d145      	bne.n	80053bc <_malloc_r+0xdc>
 8005330:	2c00      	cmp	r4, #0
 8005332:	d048      	beq.n	80053c6 <_malloc_r+0xe6>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	4631      	mov	r1, r6
 8005338:	4638      	mov	r0, r7
 800533a:	eb04 0903 	add.w	r9, r4, r3
 800533e:	f000 f883 	bl	8005448 <_sbrk_r>
 8005342:	4581      	cmp	r9, r0
 8005344:	d13f      	bne.n	80053c6 <_malloc_r+0xe6>
 8005346:	6821      	ldr	r1, [r4, #0]
 8005348:	1a6d      	subs	r5, r5, r1
 800534a:	4629      	mov	r1, r5
 800534c:	4638      	mov	r0, r7
 800534e:	f7ff ffa7 	bl	80052a0 <sbrk_aligned>
 8005352:	3001      	adds	r0, #1
 8005354:	d037      	beq.n	80053c6 <_malloc_r+0xe6>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	442b      	add	r3, r5
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	f8d8 3000 	ldr.w	r3, [r8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d038      	beq.n	80053d6 <_malloc_r+0xf6>
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	42a2      	cmp	r2, r4
 8005368:	d12b      	bne.n	80053c2 <_malloc_r+0xe2>
 800536a:	2200      	movs	r2, #0
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	e00f      	b.n	8005390 <_malloc_r+0xb0>
 8005370:	6822      	ldr	r2, [r4, #0]
 8005372:	1b52      	subs	r2, r2, r5
 8005374:	d41f      	bmi.n	80053b6 <_malloc_r+0xd6>
 8005376:	2a0b      	cmp	r2, #11
 8005378:	d917      	bls.n	80053aa <_malloc_r+0xca>
 800537a:	1961      	adds	r1, r4, r5
 800537c:	42a3      	cmp	r3, r4
 800537e:	6025      	str	r5, [r4, #0]
 8005380:	bf18      	it	ne
 8005382:	6059      	strne	r1, [r3, #4]
 8005384:	6863      	ldr	r3, [r4, #4]
 8005386:	bf08      	it	eq
 8005388:	f8c8 1000 	streq.w	r1, [r8]
 800538c:	5162      	str	r2, [r4, r5]
 800538e:	604b      	str	r3, [r1, #4]
 8005390:	4638      	mov	r0, r7
 8005392:	f104 060b 	add.w	r6, r4, #11
 8005396:	f000 f829 	bl	80053ec <__malloc_unlock>
 800539a:	f026 0607 	bic.w	r6, r6, #7
 800539e:	1d23      	adds	r3, r4, #4
 80053a0:	1af2      	subs	r2, r6, r3
 80053a2:	d0ae      	beq.n	8005302 <_malloc_r+0x22>
 80053a4:	1b9b      	subs	r3, r3, r6
 80053a6:	50a3      	str	r3, [r4, r2]
 80053a8:	e7ab      	b.n	8005302 <_malloc_r+0x22>
 80053aa:	42a3      	cmp	r3, r4
 80053ac:	6862      	ldr	r2, [r4, #4]
 80053ae:	d1dd      	bne.n	800536c <_malloc_r+0x8c>
 80053b0:	f8c8 2000 	str.w	r2, [r8]
 80053b4:	e7ec      	b.n	8005390 <_malloc_r+0xb0>
 80053b6:	4623      	mov	r3, r4
 80053b8:	6864      	ldr	r4, [r4, #4]
 80053ba:	e7ac      	b.n	8005316 <_malloc_r+0x36>
 80053bc:	4634      	mov	r4, r6
 80053be:	6876      	ldr	r6, [r6, #4]
 80053c0:	e7b4      	b.n	800532c <_malloc_r+0x4c>
 80053c2:	4613      	mov	r3, r2
 80053c4:	e7cc      	b.n	8005360 <_malloc_r+0x80>
 80053c6:	230c      	movs	r3, #12
 80053c8:	603b      	str	r3, [r7, #0]
 80053ca:	4638      	mov	r0, r7
 80053cc:	f000 f80e 	bl	80053ec <__malloc_unlock>
 80053d0:	e797      	b.n	8005302 <_malloc_r+0x22>
 80053d2:	6025      	str	r5, [r4, #0]
 80053d4:	e7dc      	b.n	8005390 <_malloc_r+0xb0>
 80053d6:	605b      	str	r3, [r3, #4]
 80053d8:	deff      	udf	#255	; 0xff
 80053da:	bf00      	nop
 80053dc:	200008fc 	.word	0x200008fc

080053e0 <__malloc_lock>:
 80053e0:	4801      	ldr	r0, [pc, #4]	; (80053e8 <__malloc_lock+0x8>)
 80053e2:	f000 b86b 	b.w	80054bc <__retarget_lock_acquire_recursive>
 80053e6:	bf00      	nop
 80053e8:	20000a40 	.word	0x20000a40

080053ec <__malloc_unlock>:
 80053ec:	4801      	ldr	r0, [pc, #4]	; (80053f4 <__malloc_unlock+0x8>)
 80053ee:	f000 b866 	b.w	80054be <__retarget_lock_release_recursive>
 80053f2:	bf00      	nop
 80053f4:	20000a40 	.word	0x20000a40

080053f8 <siprintf>:
 80053f8:	b40e      	push	{r1, r2, r3}
 80053fa:	b500      	push	{lr}
 80053fc:	b09c      	sub	sp, #112	; 0x70
 80053fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005400:	9002      	str	r0, [sp, #8]
 8005402:	9006      	str	r0, [sp, #24]
 8005404:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005408:	4809      	ldr	r0, [pc, #36]	; (8005430 <siprintf+0x38>)
 800540a:	9107      	str	r1, [sp, #28]
 800540c:	9104      	str	r1, [sp, #16]
 800540e:	4909      	ldr	r1, [pc, #36]	; (8005434 <siprintf+0x3c>)
 8005410:	f853 2b04 	ldr.w	r2, [r3], #4
 8005414:	9105      	str	r1, [sp, #20]
 8005416:	6800      	ldr	r0, [r0, #0]
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	a902      	add	r1, sp, #8
 800541c:	f000 f8f6 	bl	800560c <_svfiprintf_r>
 8005420:	9b02      	ldr	r3, [sp, #8]
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	b01c      	add	sp, #112	; 0x70
 8005428:	f85d eb04 	ldr.w	lr, [sp], #4
 800542c:	b003      	add	sp, #12
 800542e:	4770      	bx	lr
 8005430:	20000058 	.word	0x20000058
 8005434:	ffff0208 	.word	0xffff0208

08005438 <memset>:
 8005438:	4402      	add	r2, r0
 800543a:	4603      	mov	r3, r0
 800543c:	4293      	cmp	r3, r2
 800543e:	d100      	bne.n	8005442 <memset+0xa>
 8005440:	4770      	bx	lr
 8005442:	f803 1b01 	strb.w	r1, [r3], #1
 8005446:	e7f9      	b.n	800543c <memset+0x4>

08005448 <_sbrk_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4d06      	ldr	r5, [pc, #24]	; (8005464 <_sbrk_r+0x1c>)
 800544c:	2300      	movs	r3, #0
 800544e:	4604      	mov	r4, r0
 8005450:	4608      	mov	r0, r1
 8005452:	602b      	str	r3, [r5, #0]
 8005454:	f7fb fdea 	bl	800102c <_sbrk>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d102      	bne.n	8005462 <_sbrk_r+0x1a>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	b103      	cbz	r3, 8005462 <_sbrk_r+0x1a>
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	20000a3c 	.word	0x20000a3c

08005468 <__errno>:
 8005468:	4b01      	ldr	r3, [pc, #4]	; (8005470 <__errno+0x8>)
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20000058 	.word	0x20000058

08005474 <__libc_init_array>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4d0d      	ldr	r5, [pc, #52]	; (80054ac <__libc_init_array+0x38>)
 8005478:	4c0d      	ldr	r4, [pc, #52]	; (80054b0 <__libc_init_array+0x3c>)
 800547a:	1b64      	subs	r4, r4, r5
 800547c:	10a4      	asrs	r4, r4, #2
 800547e:	2600      	movs	r6, #0
 8005480:	42a6      	cmp	r6, r4
 8005482:	d109      	bne.n	8005498 <__libc_init_array+0x24>
 8005484:	4d0b      	ldr	r5, [pc, #44]	; (80054b4 <__libc_init_array+0x40>)
 8005486:	4c0c      	ldr	r4, [pc, #48]	; (80054b8 <__libc_init_array+0x44>)
 8005488:	f000 fbae 	bl	8005be8 <_init>
 800548c:	1b64      	subs	r4, r4, r5
 800548e:	10a4      	asrs	r4, r4, #2
 8005490:	2600      	movs	r6, #0
 8005492:	42a6      	cmp	r6, r4
 8005494:	d105      	bne.n	80054a2 <__libc_init_array+0x2e>
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	f855 3b04 	ldr.w	r3, [r5], #4
 800549c:	4798      	blx	r3
 800549e:	3601      	adds	r6, #1
 80054a0:	e7ee      	b.n	8005480 <__libc_init_array+0xc>
 80054a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a6:	4798      	blx	r3
 80054a8:	3601      	adds	r6, #1
 80054aa:	e7f2      	b.n	8005492 <__libc_init_array+0x1e>
 80054ac:	08005c64 	.word	0x08005c64
 80054b0:	08005c64 	.word	0x08005c64
 80054b4:	08005c64 	.word	0x08005c64
 80054b8:	08005c68 	.word	0x08005c68

080054bc <__retarget_lock_acquire_recursive>:
 80054bc:	4770      	bx	lr

080054be <__retarget_lock_release_recursive>:
 80054be:	4770      	bx	lr

080054c0 <_free_r>:
 80054c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054c2:	2900      	cmp	r1, #0
 80054c4:	d044      	beq.n	8005550 <_free_r+0x90>
 80054c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ca:	9001      	str	r0, [sp, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f1a1 0404 	sub.w	r4, r1, #4
 80054d2:	bfb8      	it	lt
 80054d4:	18e4      	addlt	r4, r4, r3
 80054d6:	f7ff ff83 	bl	80053e0 <__malloc_lock>
 80054da:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <_free_r+0x94>)
 80054dc:	9801      	ldr	r0, [sp, #4]
 80054de:	6813      	ldr	r3, [r2, #0]
 80054e0:	b933      	cbnz	r3, 80054f0 <_free_r+0x30>
 80054e2:	6063      	str	r3, [r4, #4]
 80054e4:	6014      	str	r4, [r2, #0]
 80054e6:	b003      	add	sp, #12
 80054e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054ec:	f7ff bf7e 	b.w	80053ec <__malloc_unlock>
 80054f0:	42a3      	cmp	r3, r4
 80054f2:	d908      	bls.n	8005506 <_free_r+0x46>
 80054f4:	6825      	ldr	r5, [r4, #0]
 80054f6:	1961      	adds	r1, r4, r5
 80054f8:	428b      	cmp	r3, r1
 80054fa:	bf01      	itttt	eq
 80054fc:	6819      	ldreq	r1, [r3, #0]
 80054fe:	685b      	ldreq	r3, [r3, #4]
 8005500:	1949      	addeq	r1, r1, r5
 8005502:	6021      	streq	r1, [r4, #0]
 8005504:	e7ed      	b.n	80054e2 <_free_r+0x22>
 8005506:	461a      	mov	r2, r3
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	b10b      	cbz	r3, 8005510 <_free_r+0x50>
 800550c:	42a3      	cmp	r3, r4
 800550e:	d9fa      	bls.n	8005506 <_free_r+0x46>
 8005510:	6811      	ldr	r1, [r2, #0]
 8005512:	1855      	adds	r5, r2, r1
 8005514:	42a5      	cmp	r5, r4
 8005516:	d10b      	bne.n	8005530 <_free_r+0x70>
 8005518:	6824      	ldr	r4, [r4, #0]
 800551a:	4421      	add	r1, r4
 800551c:	1854      	adds	r4, r2, r1
 800551e:	42a3      	cmp	r3, r4
 8005520:	6011      	str	r1, [r2, #0]
 8005522:	d1e0      	bne.n	80054e6 <_free_r+0x26>
 8005524:	681c      	ldr	r4, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	6053      	str	r3, [r2, #4]
 800552a:	440c      	add	r4, r1
 800552c:	6014      	str	r4, [r2, #0]
 800552e:	e7da      	b.n	80054e6 <_free_r+0x26>
 8005530:	d902      	bls.n	8005538 <_free_r+0x78>
 8005532:	230c      	movs	r3, #12
 8005534:	6003      	str	r3, [r0, #0]
 8005536:	e7d6      	b.n	80054e6 <_free_r+0x26>
 8005538:	6825      	ldr	r5, [r4, #0]
 800553a:	1961      	adds	r1, r4, r5
 800553c:	428b      	cmp	r3, r1
 800553e:	bf04      	itt	eq
 8005540:	6819      	ldreq	r1, [r3, #0]
 8005542:	685b      	ldreq	r3, [r3, #4]
 8005544:	6063      	str	r3, [r4, #4]
 8005546:	bf04      	itt	eq
 8005548:	1949      	addeq	r1, r1, r5
 800554a:	6021      	streq	r1, [r4, #0]
 800554c:	6054      	str	r4, [r2, #4]
 800554e:	e7ca      	b.n	80054e6 <_free_r+0x26>
 8005550:	b003      	add	sp, #12
 8005552:	bd30      	pop	{r4, r5, pc}
 8005554:	200008fc 	.word	0x200008fc

08005558 <__ssputs_r>:
 8005558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800555c:	688e      	ldr	r6, [r1, #8]
 800555e:	461f      	mov	r7, r3
 8005560:	42be      	cmp	r6, r7
 8005562:	680b      	ldr	r3, [r1, #0]
 8005564:	4682      	mov	sl, r0
 8005566:	460c      	mov	r4, r1
 8005568:	4690      	mov	r8, r2
 800556a:	d82c      	bhi.n	80055c6 <__ssputs_r+0x6e>
 800556c:	898a      	ldrh	r2, [r1, #12]
 800556e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005572:	d026      	beq.n	80055c2 <__ssputs_r+0x6a>
 8005574:	6965      	ldr	r5, [r4, #20]
 8005576:	6909      	ldr	r1, [r1, #16]
 8005578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800557c:	eba3 0901 	sub.w	r9, r3, r1
 8005580:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005584:	1c7b      	adds	r3, r7, #1
 8005586:	444b      	add	r3, r9
 8005588:	106d      	asrs	r5, r5, #1
 800558a:	429d      	cmp	r5, r3
 800558c:	bf38      	it	cc
 800558e:	461d      	movcc	r5, r3
 8005590:	0553      	lsls	r3, r2, #21
 8005592:	d527      	bpl.n	80055e4 <__ssputs_r+0x8c>
 8005594:	4629      	mov	r1, r5
 8005596:	f7ff fea3 	bl	80052e0 <_malloc_r>
 800559a:	4606      	mov	r6, r0
 800559c:	b360      	cbz	r0, 80055f8 <__ssputs_r+0xa0>
 800559e:	6921      	ldr	r1, [r4, #16]
 80055a0:	464a      	mov	r2, r9
 80055a2:	f000 fadb 	bl	8005b5c <memcpy>
 80055a6:	89a3      	ldrh	r3, [r4, #12]
 80055a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b0:	81a3      	strh	r3, [r4, #12]
 80055b2:	6126      	str	r6, [r4, #16]
 80055b4:	6165      	str	r5, [r4, #20]
 80055b6:	444e      	add	r6, r9
 80055b8:	eba5 0509 	sub.w	r5, r5, r9
 80055bc:	6026      	str	r6, [r4, #0]
 80055be:	60a5      	str	r5, [r4, #8]
 80055c0:	463e      	mov	r6, r7
 80055c2:	42be      	cmp	r6, r7
 80055c4:	d900      	bls.n	80055c8 <__ssputs_r+0x70>
 80055c6:	463e      	mov	r6, r7
 80055c8:	6820      	ldr	r0, [r4, #0]
 80055ca:	4632      	mov	r2, r6
 80055cc:	4641      	mov	r1, r8
 80055ce:	f000 faab 	bl	8005b28 <memmove>
 80055d2:	68a3      	ldr	r3, [r4, #8]
 80055d4:	1b9b      	subs	r3, r3, r6
 80055d6:	60a3      	str	r3, [r4, #8]
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	4433      	add	r3, r6
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	2000      	movs	r0, #0
 80055e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e4:	462a      	mov	r2, r5
 80055e6:	f000 fac7 	bl	8005b78 <_realloc_r>
 80055ea:	4606      	mov	r6, r0
 80055ec:	2800      	cmp	r0, #0
 80055ee:	d1e0      	bne.n	80055b2 <__ssputs_r+0x5a>
 80055f0:	6921      	ldr	r1, [r4, #16]
 80055f2:	4650      	mov	r0, sl
 80055f4:	f7ff ff64 	bl	80054c0 <_free_r>
 80055f8:	230c      	movs	r3, #12
 80055fa:	f8ca 3000 	str.w	r3, [sl]
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005604:	81a3      	strh	r3, [r4, #12]
 8005606:	f04f 30ff 	mov.w	r0, #4294967295
 800560a:	e7e9      	b.n	80055e0 <__ssputs_r+0x88>

0800560c <_svfiprintf_r>:
 800560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005610:	4698      	mov	r8, r3
 8005612:	898b      	ldrh	r3, [r1, #12]
 8005614:	061b      	lsls	r3, r3, #24
 8005616:	b09d      	sub	sp, #116	; 0x74
 8005618:	4607      	mov	r7, r0
 800561a:	460d      	mov	r5, r1
 800561c:	4614      	mov	r4, r2
 800561e:	d50e      	bpl.n	800563e <_svfiprintf_r+0x32>
 8005620:	690b      	ldr	r3, [r1, #16]
 8005622:	b963      	cbnz	r3, 800563e <_svfiprintf_r+0x32>
 8005624:	2140      	movs	r1, #64	; 0x40
 8005626:	f7ff fe5b 	bl	80052e0 <_malloc_r>
 800562a:	6028      	str	r0, [r5, #0]
 800562c:	6128      	str	r0, [r5, #16]
 800562e:	b920      	cbnz	r0, 800563a <_svfiprintf_r+0x2e>
 8005630:	230c      	movs	r3, #12
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	e0d0      	b.n	80057dc <_svfiprintf_r+0x1d0>
 800563a:	2340      	movs	r3, #64	; 0x40
 800563c:	616b      	str	r3, [r5, #20]
 800563e:	2300      	movs	r3, #0
 8005640:	9309      	str	r3, [sp, #36]	; 0x24
 8005642:	2320      	movs	r3, #32
 8005644:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005648:	f8cd 800c 	str.w	r8, [sp, #12]
 800564c:	2330      	movs	r3, #48	; 0x30
 800564e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80057f4 <_svfiprintf_r+0x1e8>
 8005652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005656:	f04f 0901 	mov.w	r9, #1
 800565a:	4623      	mov	r3, r4
 800565c:	469a      	mov	sl, r3
 800565e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005662:	b10a      	cbz	r2, 8005668 <_svfiprintf_r+0x5c>
 8005664:	2a25      	cmp	r2, #37	; 0x25
 8005666:	d1f9      	bne.n	800565c <_svfiprintf_r+0x50>
 8005668:	ebba 0b04 	subs.w	fp, sl, r4
 800566c:	d00b      	beq.n	8005686 <_svfiprintf_r+0x7a>
 800566e:	465b      	mov	r3, fp
 8005670:	4622      	mov	r2, r4
 8005672:	4629      	mov	r1, r5
 8005674:	4638      	mov	r0, r7
 8005676:	f7ff ff6f 	bl	8005558 <__ssputs_r>
 800567a:	3001      	adds	r0, #1
 800567c:	f000 80a9 	beq.w	80057d2 <_svfiprintf_r+0x1c6>
 8005680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005682:	445a      	add	r2, fp
 8005684:	9209      	str	r2, [sp, #36]	; 0x24
 8005686:	f89a 3000 	ldrb.w	r3, [sl]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 80a1 	beq.w	80057d2 <_svfiprintf_r+0x1c6>
 8005690:	2300      	movs	r3, #0
 8005692:	f04f 32ff 	mov.w	r2, #4294967295
 8005696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800569a:	f10a 0a01 	add.w	sl, sl, #1
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	9307      	str	r3, [sp, #28]
 80056a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056a6:	931a      	str	r3, [sp, #104]	; 0x68
 80056a8:	4654      	mov	r4, sl
 80056aa:	2205      	movs	r2, #5
 80056ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b0:	4850      	ldr	r0, [pc, #320]	; (80057f4 <_svfiprintf_r+0x1e8>)
 80056b2:	f7fa fdcd 	bl	8000250 <memchr>
 80056b6:	9a04      	ldr	r2, [sp, #16]
 80056b8:	b9d8      	cbnz	r0, 80056f2 <_svfiprintf_r+0xe6>
 80056ba:	06d0      	lsls	r0, r2, #27
 80056bc:	bf44      	itt	mi
 80056be:	2320      	movmi	r3, #32
 80056c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c4:	0711      	lsls	r1, r2, #28
 80056c6:	bf44      	itt	mi
 80056c8:	232b      	movmi	r3, #43	; 0x2b
 80056ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ce:	f89a 3000 	ldrb.w	r3, [sl]
 80056d2:	2b2a      	cmp	r3, #42	; 0x2a
 80056d4:	d015      	beq.n	8005702 <_svfiprintf_r+0xf6>
 80056d6:	9a07      	ldr	r2, [sp, #28]
 80056d8:	4654      	mov	r4, sl
 80056da:	2000      	movs	r0, #0
 80056dc:	f04f 0c0a 	mov.w	ip, #10
 80056e0:	4621      	mov	r1, r4
 80056e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056e6:	3b30      	subs	r3, #48	; 0x30
 80056e8:	2b09      	cmp	r3, #9
 80056ea:	d94d      	bls.n	8005788 <_svfiprintf_r+0x17c>
 80056ec:	b1b0      	cbz	r0, 800571c <_svfiprintf_r+0x110>
 80056ee:	9207      	str	r2, [sp, #28]
 80056f0:	e014      	b.n	800571c <_svfiprintf_r+0x110>
 80056f2:	eba0 0308 	sub.w	r3, r0, r8
 80056f6:	fa09 f303 	lsl.w	r3, r9, r3
 80056fa:	4313      	orrs	r3, r2
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	46a2      	mov	sl, r4
 8005700:	e7d2      	b.n	80056a8 <_svfiprintf_r+0x9c>
 8005702:	9b03      	ldr	r3, [sp, #12]
 8005704:	1d19      	adds	r1, r3, #4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	9103      	str	r1, [sp, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	bfbb      	ittet	lt
 800570e:	425b      	neglt	r3, r3
 8005710:	f042 0202 	orrlt.w	r2, r2, #2
 8005714:	9307      	strge	r3, [sp, #28]
 8005716:	9307      	strlt	r3, [sp, #28]
 8005718:	bfb8      	it	lt
 800571a:	9204      	strlt	r2, [sp, #16]
 800571c:	7823      	ldrb	r3, [r4, #0]
 800571e:	2b2e      	cmp	r3, #46	; 0x2e
 8005720:	d10c      	bne.n	800573c <_svfiprintf_r+0x130>
 8005722:	7863      	ldrb	r3, [r4, #1]
 8005724:	2b2a      	cmp	r3, #42	; 0x2a
 8005726:	d134      	bne.n	8005792 <_svfiprintf_r+0x186>
 8005728:	9b03      	ldr	r3, [sp, #12]
 800572a:	1d1a      	adds	r2, r3, #4
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	9203      	str	r2, [sp, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	bfb8      	it	lt
 8005734:	f04f 33ff 	movlt.w	r3, #4294967295
 8005738:	3402      	adds	r4, #2
 800573a:	9305      	str	r3, [sp, #20]
 800573c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005804 <_svfiprintf_r+0x1f8>
 8005740:	7821      	ldrb	r1, [r4, #0]
 8005742:	2203      	movs	r2, #3
 8005744:	4650      	mov	r0, sl
 8005746:	f7fa fd83 	bl	8000250 <memchr>
 800574a:	b138      	cbz	r0, 800575c <_svfiprintf_r+0x150>
 800574c:	9b04      	ldr	r3, [sp, #16]
 800574e:	eba0 000a 	sub.w	r0, r0, sl
 8005752:	2240      	movs	r2, #64	; 0x40
 8005754:	4082      	lsls	r2, r0
 8005756:	4313      	orrs	r3, r2
 8005758:	3401      	adds	r4, #1
 800575a:	9304      	str	r3, [sp, #16]
 800575c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005760:	4825      	ldr	r0, [pc, #148]	; (80057f8 <_svfiprintf_r+0x1ec>)
 8005762:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005766:	2206      	movs	r2, #6
 8005768:	f7fa fd72 	bl	8000250 <memchr>
 800576c:	2800      	cmp	r0, #0
 800576e:	d038      	beq.n	80057e2 <_svfiprintf_r+0x1d6>
 8005770:	4b22      	ldr	r3, [pc, #136]	; (80057fc <_svfiprintf_r+0x1f0>)
 8005772:	bb1b      	cbnz	r3, 80057bc <_svfiprintf_r+0x1b0>
 8005774:	9b03      	ldr	r3, [sp, #12]
 8005776:	3307      	adds	r3, #7
 8005778:	f023 0307 	bic.w	r3, r3, #7
 800577c:	3308      	adds	r3, #8
 800577e:	9303      	str	r3, [sp, #12]
 8005780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005782:	4433      	add	r3, r6
 8005784:	9309      	str	r3, [sp, #36]	; 0x24
 8005786:	e768      	b.n	800565a <_svfiprintf_r+0x4e>
 8005788:	fb0c 3202 	mla	r2, ip, r2, r3
 800578c:	460c      	mov	r4, r1
 800578e:	2001      	movs	r0, #1
 8005790:	e7a6      	b.n	80056e0 <_svfiprintf_r+0xd4>
 8005792:	2300      	movs	r3, #0
 8005794:	3401      	adds	r4, #1
 8005796:	9305      	str	r3, [sp, #20]
 8005798:	4619      	mov	r1, r3
 800579a:	f04f 0c0a 	mov.w	ip, #10
 800579e:	4620      	mov	r0, r4
 80057a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057a4:	3a30      	subs	r2, #48	; 0x30
 80057a6:	2a09      	cmp	r2, #9
 80057a8:	d903      	bls.n	80057b2 <_svfiprintf_r+0x1a6>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0c6      	beq.n	800573c <_svfiprintf_r+0x130>
 80057ae:	9105      	str	r1, [sp, #20]
 80057b0:	e7c4      	b.n	800573c <_svfiprintf_r+0x130>
 80057b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80057b6:	4604      	mov	r4, r0
 80057b8:	2301      	movs	r3, #1
 80057ba:	e7f0      	b.n	800579e <_svfiprintf_r+0x192>
 80057bc:	ab03      	add	r3, sp, #12
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	462a      	mov	r2, r5
 80057c2:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <_svfiprintf_r+0x1f4>)
 80057c4:	a904      	add	r1, sp, #16
 80057c6:	4638      	mov	r0, r7
 80057c8:	f3af 8000 	nop.w
 80057cc:	1c42      	adds	r2, r0, #1
 80057ce:	4606      	mov	r6, r0
 80057d0:	d1d6      	bne.n	8005780 <_svfiprintf_r+0x174>
 80057d2:	89ab      	ldrh	r3, [r5, #12]
 80057d4:	065b      	lsls	r3, r3, #25
 80057d6:	f53f af2d 	bmi.w	8005634 <_svfiprintf_r+0x28>
 80057da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057dc:	b01d      	add	sp, #116	; 0x74
 80057de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e2:	ab03      	add	r3, sp, #12
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	462a      	mov	r2, r5
 80057e8:	4b05      	ldr	r3, [pc, #20]	; (8005800 <_svfiprintf_r+0x1f4>)
 80057ea:	a904      	add	r1, sp, #16
 80057ec:	4638      	mov	r0, r7
 80057ee:	f000 f879 	bl	80058e4 <_printf_i>
 80057f2:	e7eb      	b.n	80057cc <_svfiprintf_r+0x1c0>
 80057f4:	08005c28 	.word	0x08005c28
 80057f8:	08005c32 	.word	0x08005c32
 80057fc:	00000000 	.word	0x00000000
 8005800:	08005559 	.word	0x08005559
 8005804:	08005c2e 	.word	0x08005c2e

08005808 <_printf_common>:
 8005808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800580c:	4616      	mov	r6, r2
 800580e:	4699      	mov	r9, r3
 8005810:	688a      	ldr	r2, [r1, #8]
 8005812:	690b      	ldr	r3, [r1, #16]
 8005814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005818:	4293      	cmp	r3, r2
 800581a:	bfb8      	it	lt
 800581c:	4613      	movlt	r3, r2
 800581e:	6033      	str	r3, [r6, #0]
 8005820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005824:	4607      	mov	r7, r0
 8005826:	460c      	mov	r4, r1
 8005828:	b10a      	cbz	r2, 800582e <_printf_common+0x26>
 800582a:	3301      	adds	r3, #1
 800582c:	6033      	str	r3, [r6, #0]
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	0699      	lsls	r1, r3, #26
 8005832:	bf42      	ittt	mi
 8005834:	6833      	ldrmi	r3, [r6, #0]
 8005836:	3302      	addmi	r3, #2
 8005838:	6033      	strmi	r3, [r6, #0]
 800583a:	6825      	ldr	r5, [r4, #0]
 800583c:	f015 0506 	ands.w	r5, r5, #6
 8005840:	d106      	bne.n	8005850 <_printf_common+0x48>
 8005842:	f104 0a19 	add.w	sl, r4, #25
 8005846:	68e3      	ldr	r3, [r4, #12]
 8005848:	6832      	ldr	r2, [r6, #0]
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	42ab      	cmp	r3, r5
 800584e:	dc26      	bgt.n	800589e <_printf_common+0x96>
 8005850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005854:	1e13      	subs	r3, r2, #0
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	bf18      	it	ne
 800585a:	2301      	movne	r3, #1
 800585c:	0692      	lsls	r2, r2, #26
 800585e:	d42b      	bmi.n	80058b8 <_printf_common+0xb0>
 8005860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005864:	4649      	mov	r1, r9
 8005866:	4638      	mov	r0, r7
 8005868:	47c0      	blx	r8
 800586a:	3001      	adds	r0, #1
 800586c:	d01e      	beq.n	80058ac <_printf_common+0xa4>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	6922      	ldr	r2, [r4, #16]
 8005872:	f003 0306 	and.w	r3, r3, #6
 8005876:	2b04      	cmp	r3, #4
 8005878:	bf02      	ittt	eq
 800587a:	68e5      	ldreq	r5, [r4, #12]
 800587c:	6833      	ldreq	r3, [r6, #0]
 800587e:	1aed      	subeq	r5, r5, r3
 8005880:	68a3      	ldr	r3, [r4, #8]
 8005882:	bf0c      	ite	eq
 8005884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005888:	2500      	movne	r5, #0
 800588a:	4293      	cmp	r3, r2
 800588c:	bfc4      	itt	gt
 800588e:	1a9b      	subgt	r3, r3, r2
 8005890:	18ed      	addgt	r5, r5, r3
 8005892:	2600      	movs	r6, #0
 8005894:	341a      	adds	r4, #26
 8005896:	42b5      	cmp	r5, r6
 8005898:	d11a      	bne.n	80058d0 <_printf_common+0xc8>
 800589a:	2000      	movs	r0, #0
 800589c:	e008      	b.n	80058b0 <_printf_common+0xa8>
 800589e:	2301      	movs	r3, #1
 80058a0:	4652      	mov	r2, sl
 80058a2:	4649      	mov	r1, r9
 80058a4:	4638      	mov	r0, r7
 80058a6:	47c0      	blx	r8
 80058a8:	3001      	adds	r0, #1
 80058aa:	d103      	bne.n	80058b4 <_printf_common+0xac>
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295
 80058b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b4:	3501      	adds	r5, #1
 80058b6:	e7c6      	b.n	8005846 <_printf_common+0x3e>
 80058b8:	18e1      	adds	r1, r4, r3
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	2030      	movs	r0, #48	; 0x30
 80058be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058c2:	4422      	add	r2, r4
 80058c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058cc:	3302      	adds	r3, #2
 80058ce:	e7c7      	b.n	8005860 <_printf_common+0x58>
 80058d0:	2301      	movs	r3, #1
 80058d2:	4622      	mov	r2, r4
 80058d4:	4649      	mov	r1, r9
 80058d6:	4638      	mov	r0, r7
 80058d8:	47c0      	blx	r8
 80058da:	3001      	adds	r0, #1
 80058dc:	d0e6      	beq.n	80058ac <_printf_common+0xa4>
 80058de:	3601      	adds	r6, #1
 80058e0:	e7d9      	b.n	8005896 <_printf_common+0x8e>
	...

080058e4 <_printf_i>:
 80058e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	7e0f      	ldrb	r7, [r1, #24]
 80058ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058ec:	2f78      	cmp	r7, #120	; 0x78
 80058ee:	4691      	mov	r9, r2
 80058f0:	4680      	mov	r8, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	469a      	mov	sl, r3
 80058f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058fa:	d807      	bhi.n	800590c <_printf_i+0x28>
 80058fc:	2f62      	cmp	r7, #98	; 0x62
 80058fe:	d80a      	bhi.n	8005916 <_printf_i+0x32>
 8005900:	2f00      	cmp	r7, #0
 8005902:	f000 80d4 	beq.w	8005aae <_printf_i+0x1ca>
 8005906:	2f58      	cmp	r7, #88	; 0x58
 8005908:	f000 80c0 	beq.w	8005a8c <_printf_i+0x1a8>
 800590c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005914:	e03a      	b.n	800598c <_printf_i+0xa8>
 8005916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800591a:	2b15      	cmp	r3, #21
 800591c:	d8f6      	bhi.n	800590c <_printf_i+0x28>
 800591e:	a101      	add	r1, pc, #4	; (adr r1, 8005924 <_printf_i+0x40>)
 8005920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005924:	0800597d 	.word	0x0800597d
 8005928:	08005991 	.word	0x08005991
 800592c:	0800590d 	.word	0x0800590d
 8005930:	0800590d 	.word	0x0800590d
 8005934:	0800590d 	.word	0x0800590d
 8005938:	0800590d 	.word	0x0800590d
 800593c:	08005991 	.word	0x08005991
 8005940:	0800590d 	.word	0x0800590d
 8005944:	0800590d 	.word	0x0800590d
 8005948:	0800590d 	.word	0x0800590d
 800594c:	0800590d 	.word	0x0800590d
 8005950:	08005a95 	.word	0x08005a95
 8005954:	080059bd 	.word	0x080059bd
 8005958:	08005a4f 	.word	0x08005a4f
 800595c:	0800590d 	.word	0x0800590d
 8005960:	0800590d 	.word	0x0800590d
 8005964:	08005ab7 	.word	0x08005ab7
 8005968:	0800590d 	.word	0x0800590d
 800596c:	080059bd 	.word	0x080059bd
 8005970:	0800590d 	.word	0x0800590d
 8005974:	0800590d 	.word	0x0800590d
 8005978:	08005a57 	.word	0x08005a57
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	602a      	str	r2, [r5, #0]
 8005984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800598c:	2301      	movs	r3, #1
 800598e:	e09f      	b.n	8005ad0 <_printf_i+0x1ec>
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	682b      	ldr	r3, [r5, #0]
 8005994:	0607      	lsls	r7, r0, #24
 8005996:	f103 0104 	add.w	r1, r3, #4
 800599a:	6029      	str	r1, [r5, #0]
 800599c:	d501      	bpl.n	80059a2 <_printf_i+0xbe>
 800599e:	681e      	ldr	r6, [r3, #0]
 80059a0:	e003      	b.n	80059aa <_printf_i+0xc6>
 80059a2:	0646      	lsls	r6, r0, #25
 80059a4:	d5fb      	bpl.n	800599e <_printf_i+0xba>
 80059a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059aa:	2e00      	cmp	r6, #0
 80059ac:	da03      	bge.n	80059b6 <_printf_i+0xd2>
 80059ae:	232d      	movs	r3, #45	; 0x2d
 80059b0:	4276      	negs	r6, r6
 80059b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b6:	485a      	ldr	r0, [pc, #360]	; (8005b20 <_printf_i+0x23c>)
 80059b8:	230a      	movs	r3, #10
 80059ba:	e012      	b.n	80059e2 <_printf_i+0xfe>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	1d19      	adds	r1, r3, #4
 80059c2:	6029      	str	r1, [r5, #0]
 80059c4:	0605      	lsls	r5, r0, #24
 80059c6:	d501      	bpl.n	80059cc <_printf_i+0xe8>
 80059c8:	681e      	ldr	r6, [r3, #0]
 80059ca:	e002      	b.n	80059d2 <_printf_i+0xee>
 80059cc:	0641      	lsls	r1, r0, #25
 80059ce:	d5fb      	bpl.n	80059c8 <_printf_i+0xe4>
 80059d0:	881e      	ldrh	r6, [r3, #0]
 80059d2:	4853      	ldr	r0, [pc, #332]	; (8005b20 <_printf_i+0x23c>)
 80059d4:	2f6f      	cmp	r7, #111	; 0x6f
 80059d6:	bf0c      	ite	eq
 80059d8:	2308      	moveq	r3, #8
 80059da:	230a      	movne	r3, #10
 80059dc:	2100      	movs	r1, #0
 80059de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059e2:	6865      	ldr	r5, [r4, #4]
 80059e4:	60a5      	str	r5, [r4, #8]
 80059e6:	2d00      	cmp	r5, #0
 80059e8:	bfa2      	ittt	ge
 80059ea:	6821      	ldrge	r1, [r4, #0]
 80059ec:	f021 0104 	bicge.w	r1, r1, #4
 80059f0:	6021      	strge	r1, [r4, #0]
 80059f2:	b90e      	cbnz	r6, 80059f8 <_printf_i+0x114>
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	d04b      	beq.n	8005a90 <_printf_i+0x1ac>
 80059f8:	4615      	mov	r5, r2
 80059fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80059fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005a02:	5dc7      	ldrb	r7, [r0, r7]
 8005a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a08:	4637      	mov	r7, r6
 8005a0a:	42bb      	cmp	r3, r7
 8005a0c:	460e      	mov	r6, r1
 8005a0e:	d9f4      	bls.n	80059fa <_printf_i+0x116>
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d10b      	bne.n	8005a2c <_printf_i+0x148>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	07de      	lsls	r6, r3, #31
 8005a18:	d508      	bpl.n	8005a2c <_printf_i+0x148>
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	6861      	ldr	r1, [r4, #4]
 8005a1e:	4299      	cmp	r1, r3
 8005a20:	bfde      	ittt	le
 8005a22:	2330      	movle	r3, #48	; 0x30
 8005a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a2c:	1b52      	subs	r2, r2, r5
 8005a2e:	6122      	str	r2, [r4, #16]
 8005a30:	f8cd a000 	str.w	sl, [sp]
 8005a34:	464b      	mov	r3, r9
 8005a36:	aa03      	add	r2, sp, #12
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	f7ff fee4 	bl	8005808 <_printf_common>
 8005a40:	3001      	adds	r0, #1
 8005a42:	d14a      	bne.n	8005ada <_printf_i+0x1f6>
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	b004      	add	sp, #16
 8005a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	f043 0320 	orr.w	r3, r3, #32
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	4833      	ldr	r0, [pc, #204]	; (8005b24 <_printf_i+0x240>)
 8005a58:	2778      	movs	r7, #120	; 0x78
 8005a5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	6829      	ldr	r1, [r5, #0]
 8005a62:	061f      	lsls	r7, r3, #24
 8005a64:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a68:	d402      	bmi.n	8005a70 <_printf_i+0x18c>
 8005a6a:	065f      	lsls	r7, r3, #25
 8005a6c:	bf48      	it	mi
 8005a6e:	b2b6      	uxthmi	r6, r6
 8005a70:	07df      	lsls	r7, r3, #31
 8005a72:	bf48      	it	mi
 8005a74:	f043 0320 	orrmi.w	r3, r3, #32
 8005a78:	6029      	str	r1, [r5, #0]
 8005a7a:	bf48      	it	mi
 8005a7c:	6023      	strmi	r3, [r4, #0]
 8005a7e:	b91e      	cbnz	r6, 8005a88 <_printf_i+0x1a4>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	f023 0320 	bic.w	r3, r3, #32
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	2310      	movs	r3, #16
 8005a8a:	e7a7      	b.n	80059dc <_printf_i+0xf8>
 8005a8c:	4824      	ldr	r0, [pc, #144]	; (8005b20 <_printf_i+0x23c>)
 8005a8e:	e7e4      	b.n	8005a5a <_printf_i+0x176>
 8005a90:	4615      	mov	r5, r2
 8005a92:	e7bd      	b.n	8005a10 <_printf_i+0x12c>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	6826      	ldr	r6, [r4, #0]
 8005a98:	6961      	ldr	r1, [r4, #20]
 8005a9a:	1d18      	adds	r0, r3, #4
 8005a9c:	6028      	str	r0, [r5, #0]
 8005a9e:	0635      	lsls	r5, r6, #24
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	d501      	bpl.n	8005aa8 <_printf_i+0x1c4>
 8005aa4:	6019      	str	r1, [r3, #0]
 8005aa6:	e002      	b.n	8005aae <_printf_i+0x1ca>
 8005aa8:	0670      	lsls	r0, r6, #25
 8005aaa:	d5fb      	bpl.n	8005aa4 <_printf_i+0x1c0>
 8005aac:	8019      	strh	r1, [r3, #0]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6123      	str	r3, [r4, #16]
 8005ab2:	4615      	mov	r5, r2
 8005ab4:	e7bc      	b.n	8005a30 <_printf_i+0x14c>
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	1d1a      	adds	r2, r3, #4
 8005aba:	602a      	str	r2, [r5, #0]
 8005abc:	681d      	ldr	r5, [r3, #0]
 8005abe:	6862      	ldr	r2, [r4, #4]
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f7fa fbc4 	bl	8000250 <memchr>
 8005ac8:	b108      	cbz	r0, 8005ace <_printf_i+0x1ea>
 8005aca:	1b40      	subs	r0, r0, r5
 8005acc:	6060      	str	r0, [r4, #4]
 8005ace:	6863      	ldr	r3, [r4, #4]
 8005ad0:	6123      	str	r3, [r4, #16]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad8:	e7aa      	b.n	8005a30 <_printf_i+0x14c>
 8005ada:	6923      	ldr	r3, [r4, #16]
 8005adc:	462a      	mov	r2, r5
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	47d0      	blx	sl
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d0ad      	beq.n	8005a44 <_printf_i+0x160>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	079b      	lsls	r3, r3, #30
 8005aec:	d413      	bmi.n	8005b16 <_printf_i+0x232>
 8005aee:	68e0      	ldr	r0, [r4, #12]
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	4298      	cmp	r0, r3
 8005af4:	bfb8      	it	lt
 8005af6:	4618      	movlt	r0, r3
 8005af8:	e7a6      	b.n	8005a48 <_printf_i+0x164>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4632      	mov	r2, r6
 8005afe:	4649      	mov	r1, r9
 8005b00:	4640      	mov	r0, r8
 8005b02:	47d0      	blx	sl
 8005b04:	3001      	adds	r0, #1
 8005b06:	d09d      	beq.n	8005a44 <_printf_i+0x160>
 8005b08:	3501      	adds	r5, #1
 8005b0a:	68e3      	ldr	r3, [r4, #12]
 8005b0c:	9903      	ldr	r1, [sp, #12]
 8005b0e:	1a5b      	subs	r3, r3, r1
 8005b10:	42ab      	cmp	r3, r5
 8005b12:	dcf2      	bgt.n	8005afa <_printf_i+0x216>
 8005b14:	e7eb      	b.n	8005aee <_printf_i+0x20a>
 8005b16:	2500      	movs	r5, #0
 8005b18:	f104 0619 	add.w	r6, r4, #25
 8005b1c:	e7f5      	b.n	8005b0a <_printf_i+0x226>
 8005b1e:	bf00      	nop
 8005b20:	08005c39 	.word	0x08005c39
 8005b24:	08005c4a 	.word	0x08005c4a

08005b28 <memmove>:
 8005b28:	4288      	cmp	r0, r1
 8005b2a:	b510      	push	{r4, lr}
 8005b2c:	eb01 0402 	add.w	r4, r1, r2
 8005b30:	d902      	bls.n	8005b38 <memmove+0x10>
 8005b32:	4284      	cmp	r4, r0
 8005b34:	4623      	mov	r3, r4
 8005b36:	d807      	bhi.n	8005b48 <memmove+0x20>
 8005b38:	1e43      	subs	r3, r0, #1
 8005b3a:	42a1      	cmp	r1, r4
 8005b3c:	d008      	beq.n	8005b50 <memmove+0x28>
 8005b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b46:	e7f8      	b.n	8005b3a <memmove+0x12>
 8005b48:	4402      	add	r2, r0
 8005b4a:	4601      	mov	r1, r0
 8005b4c:	428a      	cmp	r2, r1
 8005b4e:	d100      	bne.n	8005b52 <memmove+0x2a>
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b5a:	e7f7      	b.n	8005b4c <memmove+0x24>

08005b5c <memcpy>:
 8005b5c:	440a      	add	r2, r1
 8005b5e:	4291      	cmp	r1, r2
 8005b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b64:	d100      	bne.n	8005b68 <memcpy+0xc>
 8005b66:	4770      	bx	lr
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b72:	4291      	cmp	r1, r2
 8005b74:	d1f9      	bne.n	8005b6a <memcpy+0xe>
 8005b76:	bd10      	pop	{r4, pc}

08005b78 <_realloc_r>:
 8005b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b7c:	4680      	mov	r8, r0
 8005b7e:	4614      	mov	r4, r2
 8005b80:	460e      	mov	r6, r1
 8005b82:	b921      	cbnz	r1, 8005b8e <_realloc_r+0x16>
 8005b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b88:	4611      	mov	r1, r2
 8005b8a:	f7ff bba9 	b.w	80052e0 <_malloc_r>
 8005b8e:	b92a      	cbnz	r2, 8005b9c <_realloc_r+0x24>
 8005b90:	f7ff fc96 	bl	80054c0 <_free_r>
 8005b94:	4625      	mov	r5, r4
 8005b96:	4628      	mov	r0, r5
 8005b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b9c:	f000 f81b 	bl	8005bd6 <_malloc_usable_size_r>
 8005ba0:	4284      	cmp	r4, r0
 8005ba2:	4607      	mov	r7, r0
 8005ba4:	d802      	bhi.n	8005bac <_realloc_r+0x34>
 8005ba6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005baa:	d812      	bhi.n	8005bd2 <_realloc_r+0x5a>
 8005bac:	4621      	mov	r1, r4
 8005bae:	4640      	mov	r0, r8
 8005bb0:	f7ff fb96 	bl	80052e0 <_malloc_r>
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d0ed      	beq.n	8005b96 <_realloc_r+0x1e>
 8005bba:	42bc      	cmp	r4, r7
 8005bbc:	4622      	mov	r2, r4
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	bf28      	it	cs
 8005bc2:	463a      	movcs	r2, r7
 8005bc4:	f7ff ffca 	bl	8005b5c <memcpy>
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4640      	mov	r0, r8
 8005bcc:	f7ff fc78 	bl	80054c0 <_free_r>
 8005bd0:	e7e1      	b.n	8005b96 <_realloc_r+0x1e>
 8005bd2:	4635      	mov	r5, r6
 8005bd4:	e7df      	b.n	8005b96 <_realloc_r+0x1e>

08005bd6 <_malloc_usable_size_r>:
 8005bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bda:	1f18      	subs	r0, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bfbc      	itt	lt
 8005be0:	580b      	ldrlt	r3, [r1, r0]
 8005be2:	18c0      	addlt	r0, r0, r3
 8005be4:	4770      	bx	lr
	...

08005be8 <_init>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	bf00      	nop
 8005bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bee:	bc08      	pop	{r3}
 8005bf0:	469e      	mov	lr, r3
 8005bf2:	4770      	bx	lr

08005bf4 <_fini>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	bf00      	nop
 8005bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfa:	bc08      	pop	{r3}
 8005bfc:	469e      	mov	lr, r3
 8005bfe:	4770      	bx	lr

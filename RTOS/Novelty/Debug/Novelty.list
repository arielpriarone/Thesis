
Novelty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4d8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0800a6d8  0800a6d8  0001a6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abe8  0800abe8  00020314  2**0
                  CONTENTS
  4 .ARM          00000008  0800abe8  0800abe8  0001abe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abf0  0800abf0  00020314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abf0  0800abf0  0001abf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abf4  0800abf4  0001abf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800abf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  0800adcc  000201d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  0800ae6c  00020274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002fbc  20000314  0800af0c  00020314  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200032d0  0800af0c  000232d0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020342  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001aee9  00000000  00000000  00020385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000033e2  00000000  00000000  0003b26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001560  00000000  00000000  0003e650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000010a3  00000000  00000000  0003fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c687  00000000  00000000  00040c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001a61f  00000000  00000000  0006d2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011263c  00000000  00000000  000878f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006fb8  00000000  00000000  00199f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  001a0ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a6c0 	.word	0x0800a6c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	0800a6c0 	.word	0x0800a6c0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	timer_index = 0;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <main+0x44>)
 80009da:	2200      	movs	r2, #0
 80009dc:	801a      	strh	r2, [r3, #0]
	snap_flag = true; // begin with inibiiton of acquisition, set to false later
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <main+0x48>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e4:	f000 ff3d 	bl	8001862 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e8:	f000 f81e 	bl	8000a28 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RetargetInit(&huart3); // redirect the printf() and scanf() function to huart
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <main+0x4c>)
 80009ee:	f000 fb7b 	bl	80010e8 <RetargetInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f2:	f000 f9e7 	bl	8000dc4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009f6:	f000 f987 	bl	8000d08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009fa:	f000 f9b5 	bl	8000d68 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80009fe:	f000 f887 	bl	8000b10 <MX_ADC1_Init>
  MX_ETH_Init();
 8000a02:	f000 f8d7 	bl	8000bb4 <MX_ETH_Init>
  MX_TIM6_Init();
 8000a06:	f000 f949 	bl	8000c9c <MX_TIM6_Init>
  MX_RTC_Init();
 8000a0a:	f000 f921 	bl	8000c50 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);  // start the timer
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <main+0x50>)
 8000a10:	f003 fea2 	bl	8004758 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){
 8000a14:	e7fe      	b.n	8000a14 <main+0x40>
 8000a16:	bf00      	nop
 8000a18:	2000316c 	.word	0x2000316c
 8000a1c:	2000316e 	.word	0x2000316e
 8000a20:	200004cc 	.word	0x200004cc
 8000a24:	20000480 	.word	0x20000480

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	; 0x50
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2234      	movs	r2, #52	; 0x34
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f006 fca2 	bl	8007380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a4c:	f002 fafc 	bl	8003048 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <SystemClock_Config+0xe0>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	4a2c      	ldr	r2, [pc, #176]	; (8000b08 <SystemClock_Config+0xe0>)
 8000a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <SystemClock_Config+0xe0>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <SystemClock_Config+0xe4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a70:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <SystemClock_Config+0xe4>)
 8000a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <SystemClock_Config+0xe4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a84:	2309      	movs	r3, #9
 8000a86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a92:	2302      	movs	r3, #2
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000aa0:	2360      	movs	r3, #96	; 0x60
 8000aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 fb27 	bl	8003108 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ac0:	f000 fac2 	bl	8001048 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ac4:	f002 fad0 	bl	8003068 <HAL_PWREx_EnableOverDrive>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ace:	f000 fabb 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	2103      	movs	r1, #3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 fdb8 	bl	8003664 <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000afa:	f000 faa5 	bl	8001048 <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3750      	adds	r7, #80	; 0x50
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40007000 	.word	0x40007000

08000b10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b24:	4a21      	ldr	r2, [pc, #132]	; (8000bac <MX_ADC1_Init+0x9c>)
 8000b26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b2a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <MX_ADC1_Init+0xa0>)
 8000b54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b72:	f000 fef7 	bl	8001964 <HAL_ADC_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b7c:	f000 fa64 	bl	8001048 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b80:	2303      	movs	r3, #3
 8000b82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b92:	f001 f891 	bl	8001cb8 <HAL_ADC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b9c:	f000 fa54 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000368 	.word	0x20000368
 8000bac:	40012000 	.word	0x40012000
 8000bb0:	0f000001 	.word	0x0f000001

08000bb4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_ETH_Init+0x84>)
 8000bba:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <MX_ETH_Init+0x88>)
 8000bbc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <MX_ETH_Init+0x8c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_ETH_Init+0x8c>)
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MX_ETH_Init+0x8c>)
 8000bcc:	22e1      	movs	r2, #225	; 0xe1
 8000bce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_ETH_Init+0x8c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_ETH_Init+0x8c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_ETH_Init+0x8c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_ETH_Init+0x84>)
 8000be4:	4a16      	ldr	r2, [pc, #88]	; (8000c40 <MX_ETH_Init+0x8c>)
 8000be6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_ETH_Init+0x84>)
 8000bea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_ETH_Init+0x84>)
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <MX_ETH_Init+0x90>)
 8000bf4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_ETH_Init+0x84>)
 8000bf8:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <MX_ETH_Init+0x94>)
 8000bfa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_ETH_Init+0x84>)
 8000bfe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c02:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <MX_ETH_Init+0x84>)
 8000c06:	f001 fbb9 	bl	800237c <HAL_ETH_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c10:	f000 fa1a 	bl	8001048 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c14:	2238      	movs	r2, #56	; 0x38
 8000c16:	2100      	movs	r1, #0
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <MX_ETH_Init+0x98>)
 8000c1a:	f006 fbb1 	bl	8007380 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_ETH_Init+0x98>)
 8000c20:	2221      	movs	r2, #33	; 0x21
 8000c22:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_ETH_Init+0x98>)
 8000c26:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000c2a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_ETH_Init+0x98>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200003b0 	.word	0x200003b0
 8000c3c:	40028000 	.word	0x40028000
 8000c40:	20003170 	.word	0x20003170
 8000c44:	20000274 	.word	0x20000274
 8000c48:	200001d4 	.word	0x200001d4
 8000c4c:	20000330 	.word	0x20000330

08000c50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <MX_RTC_Init+0x48>)
 8000c58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c62:	227f      	movs	r2, #127	; 0x7f
 8000c64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c68:	22ff      	movs	r2, #255	; 0xff
 8000c6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c80:	f003 fb3e 	bl	8004300 <HAL_RTC_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000c8a:	f000 f9dd 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000460 	.word	0x20000460
 8000c98:	40002800 	.word	0x40002800

08000c9c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_TIM6_Init+0x64>)
 8000cae:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <MX_TIM6_Init+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_TIM6_Init+0x64>)
 8000cb4:	2217      	movs	r2, #23
 8000cb6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_TIM6_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 800-1;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_TIM6_Init+0x64>)
 8000cc0:	f240 321f 	movw	r2, #799	; 0x31f
 8000cc4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_TIM6_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_TIM6_Init+0x64>)
 8000cce:	f003 fceb 	bl	80046a8 <HAL_TIM_Base_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000cd8:	f000 f9b6 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_TIM6_Init+0x64>)
 8000cea:	f003 ff95 	bl	8004c18 <HAL_TIMEx_MasterConfigSynchronization>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000cf4:	f000 f9a8 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000480 	.word	0x20000480
 8000d04:	40001000 	.word	0x40001000

08000d08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <MX_USART3_UART_Init+0x5c>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d4c:	f004 f810 	bl	8004d70 <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d56:	f000 f977 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200004cc 	.word	0x200004cc
 8000d64:	40004800 	.word	0x40004800

08000d68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d76:	2206      	movs	r2, #6
 8000d78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d88:	2202      	movs	r2, #2
 8000d8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dac:	f002 f804 	bl	8002db8 <HAL_PCD_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000db6:	f000 f947 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000554 	.word	0x20000554

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	4b4b      	ldr	r3, [pc, #300]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a4a      	ldr	r2, [pc, #296]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b48      	ldr	r3, [pc, #288]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df2:	4b45      	ldr	r3, [pc, #276]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a44      	ldr	r2, [pc, #272]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b3f      	ldr	r3, [pc, #252]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a3e      	ldr	r2, [pc, #248]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b3c      	ldr	r3, [pc, #240]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b39      	ldr	r3, [pc, #228]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a38      	ldr	r2, [pc, #224]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a32      	ldr	r2, [pc, #200]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a2c      	ldr	r2, [pc, #176]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <MX_GPIO_Init+0x144>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e70:	4826      	ldr	r0, [pc, #152]	; (8000f0c <MX_GPIO_Init+0x148>)
 8000e72:	f001 ff55 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2140      	movs	r1, #64	; 0x40
 8000e7a:	4825      	ldr	r0, [pc, #148]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000e7c:	f001 ff50 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	481f      	ldr	r0, [pc, #124]	; (8000f14 <MX_GPIO_Init+0x150>)
 8000e98:	f001 fd96 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e9c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4815      	ldr	r0, [pc, #84]	; (8000f0c <MX_GPIO_Init+0x148>)
 8000eb6:	f001 fd87 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000eba:	2340      	movs	r3, #64	; 0x40
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480f      	ldr	r0, [pc, #60]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000ed2:	f001 fd79 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_GPIO_Init+0x14c>)
 8000eea:	f001 fd6d 	bl	80029c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2028      	movs	r0, #40	; 0x28
 8000ef4:	f001 fa0b 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ef8:	2028      	movs	r0, #40	; 0x28
 8000efa:	f001 fa24 	bl	8002346 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000efe:	bf00      	nop
 8000f00:	3730      	adds	r7, #48	; 0x30
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	40021800 	.word	0x40021800
 8000f14:	40020800 	.word	0x40020800

08000f18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // GPIO interrupt handler
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == 0x2000){ // if user btn is pressed
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f28:	d103      	bne.n	8000f32 <HAL_GPIO_EXTI_Callback+0x1a>
		snap_flag = false; //request a snapshot
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x28>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
	}
	else{
		printf("Unknown GPIO interrupt happened");
	}
}
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_EXTI_Callback+0x20>
		printf("Unknown GPIO interrupt happened");
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f34:	f006 f810 	bl	8006f58 <iprintf>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000316e 	.word	0x2000316e
 8000f44:	0800a6d8 	.word	0x0800a6d8

08000f48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6 && snap_flag == false){ // if the timer is the analog management and the conversion is not already done
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a1e      	ldr	r2, [pc, #120]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d134      	bne.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x7a>
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	f083 0301 	eor.w	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d02d      	beq.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x7a>
		// Get ADC value
		    HAL_ADC_Start(&hadc1);
 8000f66:	481b      	ldr	r0, [pc, #108]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f68:	f000 fd40 	bl	80019ec <HAL_ADC_Start>
		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	4818      	ldr	r0, [pc, #96]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f72:	f000 fe09 	bl	8001b88 <HAL_ADC_PollForConversion>
		    adc_buf[timer_index]= HAL_ADC_GetValue(&hadc1); // save the value in the array
 8000f76:	4817      	ldr	r0, [pc, #92]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f78:	f000 fe91 	bl	8001c9e <HAL_ADC_GetValue>
 8000f7c:	4601      	mov	r1, r0
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	b289      	uxth	r1, r1
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000f88:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f90:	f001 fedf 	bl	8002d52 <HAL_GPIO_TogglePin>
		    timer_index ++;
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f9e:	801a      	strh	r2, [r3, #0]
		    if(timer_index>=ADC_BUF_LEN){
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	f241 3287 	movw	r2, #4999	; 0x1387
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d90a      	bls.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x7a>
		    	timer_index=0;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	801a      	strh	r2, [r3, #0]
		    	SnapReadyCallback(adc_buf, ADC_BUF_LEN);
 8000fb2:	f241 3188 	movw	r1, #5000	; 0x1388
 8000fb6:	4809      	ldr	r0, [pc, #36]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000fb8:	f000 f876 	bl	80010a8 <SnapReadyCallback>
		    	snap_flag = true; // conversion complete flag
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
		    }
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000480 	.word	0x20000480
 8000fd0:	2000316e 	.word	0x2000316e
 8000fd4:	20000368 	.word	0x20000368
 8000fd8:	2000316c 	.word	0x2000316c
 8000fdc:	20000a5c 	.word	0x20000a5c
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <printTimestamp>:

void printTimestamp(){
 8000fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe6:	b091      	sub	sp, #68	; 0x44
 8000fe8:	af04      	add	r7, sp, #16
char timestamp[18];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4813      	ldr	r0, [pc, #76]	; (8001040 <printTimestamp+0x5c>)
 8000ff2:	f003 fa67 	bl	80044c4 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4810      	ldr	r0, [pc, #64]	; (8001040 <printTimestamp+0x5c>)
 8001000:	f003 fa02 	bl	8004408 <HAL_RTC_GetTime>
	sprintf(timestamp,"%02d-%02d-%02d %02d:%02d:%02d",sDate.Year,sDate.Month,sDate.Date,sTime.Hours,sTime.Minutes,sTime.Seconds);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	461d      	mov	r5, r3
 8001008:	797b      	ldrb	r3, [r7, #5]
 800100a:	461e      	mov	r6, r3
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	7a3a      	ldrb	r2, [r7, #8]
 8001010:	7a79      	ldrb	r1, [r7, #9]
 8001012:	7ab8      	ldrb	r0, [r7, #10]
 8001014:	4604      	mov	r4, r0
 8001016:	f107 001c 	add.w	r0, r7, #28
 800101a:	9403      	str	r4, [sp, #12]
 800101c:	9102      	str	r1, [sp, #8]
 800101e:	9201      	str	r2, [sp, #4]
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	4633      	mov	r3, r6
 8001024:	462a      	mov	r2, r5
 8001026:	4907      	ldr	r1, [pc, #28]	; (8001044 <printTimestamp+0x60>)
 8001028:	f006 f8b2 	bl	8007190 <siprintf>
	printf(timestamp);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4618      	mov	r0, r3
 8001032:	f005 ff91 	bl	8006f58 <iprintf>
}
 8001036:	bf00      	nop
 8001038:	3734      	adds	r7, #52	; 0x34
 800103a:	46bd      	mov	sp, r7
 800103c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800103e:	bf00      	nop
 8001040:	20000460 	.word	0x20000460
 8001044:	0800a6f8 	.word	0x0800a6f8

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001050:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001054:	4801      	ldr	r0, [pc, #4]	; (800105c <Error_Handler+0x14>)
 8001056:	f001 fe7c 	bl	8002d52 <HAL_GPIO_TogglePin>
 800105a:	e7f9      	b.n	8001050 <Error_Handler+0x8>
 800105c:	40020400 	.word	0x40020400

08001060 <printarray>:
		result += strlen(result);
	}
	sprintf(result, "%u", uintArray[i]);  // Last element without a tab
}

void printarray(const uint16_t *uintarray, size_t length){
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	for (int var = 0; var < length; ++var) {
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	e00b      	b.n	8001088 <printarray+0x28>
		printf("%u\r\n", uintarray[var]);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4413      	add	r3, r2
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <printarray+0x40>)
 800107e:	f005 ff6b 	bl	8006f58 <iprintf>
	for (int var = 0; var < length; ++var) {
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3301      	adds	r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d8ef      	bhi.n	8001070 <printarray+0x10>
	}
	printf("\r\n");
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <printarray+0x44>)
 8001092:	f005 ffc7 	bl	8007024 <puts>
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	0800a71c 	.word	0x0800a71c
 80010a4:	0800a724 	.word	0x0800a724

080010a8 <SnapReadyCallback>:

SnapReadyCallback(const uint16_t *uintarray, size_t length){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
	printf("Snapshot acquired. \r\nTimestamp: ");
 80010b2:	480a      	ldr	r0, [pc, #40]	; (80010dc <SnapReadyCallback+0x34>)
 80010b4:	f005 ff50 	bl	8006f58 <iprintf>
	printTimestamp();
 80010b8:	f7ff ff94 	bl	8000fe4 <printTimestamp>
	printf(" \r\n Start data. \r\n");
 80010bc:	4808      	ldr	r0, [pc, #32]	; (80010e0 <SnapReadyCallback+0x38>)
 80010be:	f005 ffb1 	bl	8007024 <puts>
	printarray(uintarray, length);
 80010c2:	6839      	ldr	r1, [r7, #0]
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ffcb 	bl	8001060 <printarray>
	printf("End data.");
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <SnapReadyCallback+0x3c>)
 80010cc:	f005 ff44 	bl	8006f58 <iprintf>
}
 80010d0:	bf00      	nop
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	0800a728 	.word	0x0800a728
 80010e0:	0800a74c 	.word	0x0800a74c
 80010e4:	0800a760 	.word	0x0800a760

080010e8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <RetargetInit+0x28>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <RetargetInit+0x2c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6898      	ldr	r0, [r3, #8]
 80010fc:	2300      	movs	r3, #0
 80010fe:	2202      	movs	r2, #2
 8001100:	2100      	movs	r1, #0
 8001102:	f005 ff97 	bl	8007034 <setvbuf>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20003178 	.word	0x20003178
 8001114:	20000064 	.word	0x20000064

08001118 <_isatty>:

int _isatty(int fd) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db04      	blt.n	8001130 <_isatty+0x18>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b02      	cmp	r3, #2
 800112a:	dc01      	bgt.n	8001130 <_isatty+0x18>
    return 1;
 800112c:	2301      	movs	r3, #1
 800112e:	e005      	b.n	800113c <_isatty+0x24>

  errno = EBADF;
 8001130:	f006 f988 	bl	8007444 <__errno>
 8001134:	4603      	mov	r3, r0
 8001136:	2209      	movs	r2, #9
 8001138:	601a      	str	r2, [r3, #0]
  return 0;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <_write>:

int _write(int fd, char* ptr, int len) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d002      	beq.n	800115c <_write+0x18>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d111      	bne.n	8001180 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <_write+0x54>)
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	b29a      	uxth	r2, r3
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	f003 fe4f 	bl	8004e0c <HAL_UART_Transmit>
 800116e:	4603      	mov	r3, r0
 8001170:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <_write+0x38>
      return len;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	e008      	b.n	800118e <_write+0x4a>
    else
      return EIO;
 800117c:	2305      	movs	r3, #5
 800117e:	e006      	b.n	800118e <_write+0x4a>
  }
  errno = EBADF;
 8001180:	f006 f960 	bl	8007444 <__errno>
 8001184:	4603      	mov	r3, r0
 8001186:	2209      	movs	r2, #9
 8001188:	601a      	str	r2, [r3, #0]
  return -1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20003178 	.word	0x20003178

0800119c <_close>:

int _close(int fd) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db04      	blt.n	80011b4 <_close+0x18>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	dc01      	bgt.n	80011b4 <_close+0x18>
    return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e006      	b.n	80011c2 <_close+0x26>

  errno = EBADF;
 80011b4:	f006 f946 	bl	8007444 <__errno>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2209      	movs	r2, #9
 80011bc:	601a      	str	r2, [r3, #0]
  return -1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80011d6:	f006 f935 	bl	8007444 <__errno>
 80011da:	4603      	mov	r3, r0
 80011dc:	2209      	movs	r2, #9
 80011de:	601a      	str	r2, [r3, #0]
  return -1;
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_read>:

int _read(int fd, char* ptr, int len) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d110      	bne.n	8001220 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <_read+0x4c>)
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	2201      	movs	r2, #1
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	f003 fe82 	bl	8004f12 <HAL_UART_Receive>
 800120e:	4603      	mov	r3, r0
 8001210:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <_read+0x30>
      return 1;
 8001218:	2301      	movs	r3, #1
 800121a:	e008      	b.n	800122e <_read+0x42>
    else
      return EIO;
 800121c:	2305      	movs	r3, #5
 800121e:	e006      	b.n	800122e <_read+0x42>
  }
  errno = EBADF;
 8001220:	f006 f910 	bl	8007444 <__errno>
 8001224:	4603      	mov	r3, r0
 8001226:	2209      	movs	r2, #9
 8001228:	601a      	str	r2, [r3, #0]
  return -1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20003178 	.word	0x20003178

0800123c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db08      	blt.n	800125e <_fstat+0x22>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b02      	cmp	r3, #2
 8001250:	dc05      	bgt.n	800125e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001258:	605a      	str	r2, [r3, #4]
    return 0;
 800125a:	2300      	movs	r3, #0
 800125c:	e005      	b.n	800126a <_fstat+0x2e>
  }

  errno = EBADF;
 800125e:	f006 f8f1 	bl	8007444 <__errno>
 8001262:	4603      	mov	r3, r0
 8001264:	2209      	movs	r2, #9
 8001266:	601a      	str	r2, [r3, #0]
  return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_MspInit+0x44>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_MspInit+0x44>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_MspInit+0x44>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_MspInit+0x44>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_MspInit+0x44>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_MspInit+0x44>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a15      	ldr	r2, [pc, #84]	; (8001330 <HAL_ADC_MspInit+0x74>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d123      	bne.n	8001326 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_ADC_MspInit+0x78>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_ADC_MspInit+0x78>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_ADC_MspInit+0x78>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_ADC_MspInit+0x78>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_ADC_MspInit+0x78>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_ADC_MspInit+0x78>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800130e:	2308      	movs	r3, #8
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <HAL_ADC_MspInit+0x7c>)
 8001322:	f001 fb51 	bl	80029c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40012000 	.word	0x40012000
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000

0800133c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	; 0x38
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <HAL_ETH_MspInit+0x158>)
 800135a:	4293      	cmp	r3, r2
 800135c:	f040 8096 	bne.w	800148c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001360:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	4a4c      	ldr	r2, [pc, #304]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 8001366:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800136a:	6313      	str	r3, [r2, #48]	; 0x30
 800136c:	4b4a      	ldr	r3, [pc, #296]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001374:	623b      	str	r3, [r7, #32]
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	4b47      	ldr	r3, [pc, #284]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	4a46      	ldr	r2, [pc, #280]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 800137e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001382:	6313      	str	r3, [r2, #48]	; 0x30
 8001384:	4b44      	ldr	r3, [pc, #272]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800138c:	61fb      	str	r3, [r7, #28]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	4a40      	ldr	r2, [pc, #256]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 8001396:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800139a:	6313      	str	r3, [r2, #48]	; 0x30
 800139c:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a8:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	4a3a      	ldr	r2, [pc, #232]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6313      	str	r3, [r2, #48]	; 0x30
 80013b4:	4b38      	ldr	r3, [pc, #224]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b35      	ldr	r3, [pc, #212]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	4a34      	ldr	r2, [pc, #208]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6313      	str	r3, [r2, #48]	; 0x30
 80013cc:	4b32      	ldr	r3, [pc, #200]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 80013de:	f043 0302 	orr.w	r3, r3, #2
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	4a28      	ldr	r2, [pc, #160]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 80013f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
 80013fc:	4b26      	ldr	r3, [pc, #152]	; (8001498 <HAL_ETH_MspInit+0x15c>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001408:	2332      	movs	r3, #50	; 0x32
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001418:	230b      	movs	r3, #11
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	481e      	ldr	r0, [pc, #120]	; (800149c <HAL_ETH_MspInit+0x160>)
 8001424:	f001 fad0 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001428:	2386      	movs	r3, #134	; 0x86
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001438:	230b      	movs	r3, #11
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	4817      	ldr	r0, [pc, #92]	; (80014a0 <HAL_ETH_MspInit+0x164>)
 8001444:	f001 fac0 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800145a:	230b      	movs	r3, #11
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	480f      	ldr	r0, [pc, #60]	; (80014a4 <HAL_ETH_MspInit+0x168>)
 8001466:	f001 faaf 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800146a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800147c:	230b      	movs	r3, #11
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	4808      	ldr	r0, [pc, #32]	; (80014a8 <HAL_ETH_MspInit+0x16c>)
 8001488:	f001 fa9e 	bl	80029c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3738      	adds	r7, #56	; 0x38
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40028000 	.word	0x40028000
 8001498:	40023800 	.word	0x40023800
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40021800 	.word	0x40021800

080014ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0a6      	sub	sp, #152	; 0x98
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2290      	movs	r2, #144	; 0x90
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f005 ff5f 	bl	8007380 <memset>
  if(hrtc->Instance==RTC)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <HAL_RTC_MspInit+0x54>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d114      	bne.n	80014f6 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014cc:	2320      	movs	r3, #32
 80014ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fae8 	bl	8003ab0 <HAL_RCCEx_PeriphCLKConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80014e6:	f7ff fdaf 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_RTC_MspInit+0x58>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <HAL_RTC_MspInit+0x58>)
 80014f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3798      	adds	r7, #152	; 0x98
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40002800 	.word	0x40002800
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <HAL_TIM_Base_MspInit+0x44>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d113      	bne.n	8001542 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_TIM_Base_MspInit+0x48>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <HAL_TIM_Base_MspInit+0x48>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_TIM_Base_MspInit+0x48>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2036      	movs	r0, #54	; 0x36
 8001538:	f000 fee9 	bl	800230e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800153c:	2036      	movs	r0, #54	; 0x36
 800153e:	f000 ff02 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40001000 	.word	0x40001000
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0ae      	sub	sp, #184	; 0xb8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2290      	movs	r2, #144	; 0x90
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f005 ff03 	bl	8007380 <memset>
  if(huart->Instance==USART3)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a22      	ldr	r2, [pc, #136]	; (8001608 <HAL_UART_MspInit+0xb4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d13c      	bne.n	80015fe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001588:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800158a:	2300      	movs	r3, #0
 800158c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fa8c 	bl	8003ab0 <HAL_RCCEx_PeriphCLKConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800159e:	f7ff fd53 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_UART_MspInit+0xb8>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_UART_MspInit+0xb8>)
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_UART_MspInit+0xb8>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_UART_MspInit+0xb8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <HAL_UART_MspInit+0xb8>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_UART_MspInit+0xb8>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ec:	2307      	movs	r3, #7
 80015ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_UART_MspInit+0xbc>)
 80015fa:	f001 f9e5 	bl	80029c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	37b8      	adds	r7, #184	; 0xb8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40004800 	.word	0x40004800
 800160c:	40023800 	.word	0x40023800
 8001610:	40020c00 	.word	0x40020c00

08001614 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0ae      	sub	sp, #184	; 0xb8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2290      	movs	r2, #144	; 0x90
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f005 fea3 	bl	8007380 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001642:	d159      	bne.n	80016f8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001644:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001648:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4618      	mov	r0, r3
 8001656:	f002 fa2b 	bl	8003ab0 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001660:	f7ff fcf2 	bl	8001048 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_PCD_MspInit+0xec>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	4a25      	ldr	r2, [pc, #148]	; (8001700 <HAL_PCD_MspInit+0xec>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6313      	str	r3, [r2, #48]	; 0x30
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <HAL_PCD_MspInit+0xec>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800167c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001680:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001696:	230a      	movs	r3, #10
 8001698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4818      	ldr	r0, [pc, #96]	; (8001704 <HAL_PCD_MspInit+0xf0>)
 80016a4:	f001 f990 	bl	80029c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016c0:	4619      	mov	r1, r3
 80016c2:	4810      	ldr	r0, [pc, #64]	; (8001704 <HAL_PCD_MspInit+0xf0>)
 80016c4:	f001 f980 	bl	80029c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_PCD_MspInit+0xec>)
 80016ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016cc:	4a0c      	ldr	r2, [pc, #48]	; (8001700 <HAL_PCD_MspInit+0xec>)
 80016ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d2:	6353      	str	r3, [r2, #52]	; 0x34
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_PCD_MspInit+0xec>)
 80016d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <HAL_PCD_MspInit+0xec>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <HAL_PCD_MspInit+0xec>)
 80016e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ea:	6453      	str	r3, [r2, #68]	; 0x44
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <HAL_PCD_MspInit+0xec>)
 80016ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016f8:	bf00      	nop
 80016fa:	37b8      	adds	r7, #184	; 0xb8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	40020000 	.word	0x40020000

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f000 f8c2 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001760:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001764:	f001 fb10 	bl	8002d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <TIM6_DAC_IRQHandler+0x10>)
 8001772:	f003 f869 	bl	8004848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000480 	.word	0x20000480

08001780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <_sbrk+0x5c>)
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <_sbrk+0x60>)
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <_sbrk+0x64>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <_sbrk+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b0:	f005 fe48 	bl	8007444 <__errno>
 80017b4:	4603      	mov	r3, r0
 80017b6:	220c      	movs	r2, #12
 80017b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	e009      	b.n	80017d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <_sbrk+0x64>)
 80017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20080000 	.word	0x20080000
 80017e0:	00000400 	.word	0x00000400
 80017e4:	2000317c 	.word	0x2000317c
 80017e8:	200032d0 	.word	0x200032d0

080017ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <SystemInit+0x20>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <SystemInit+0x20>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001848 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001816:	490e      	ldr	r1, [pc, #56]	; (8001850 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001818:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800182c:	4c0b      	ldr	r4, [pc, #44]	; (800185c <LoopFillZerobss+0x26>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800183a:	f7ff ffd7 	bl	80017ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800183e:	f005 fe07 	bl	8007450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7ff f8c7 	bl	80009d4 <main>
  bx  lr    
 8001846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001848:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001854:	0800abf8 	.word	0x0800abf8
  ldr r2, =_sbss
 8001858:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 800185c:	200032d0 	.word	0x200032d0

08001860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC_IRQHandler>

08001862 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001866:	2003      	movs	r0, #3
 8001868:	f000 fd46 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186c:	2000      	movs	r0, #0
 800186e:	f000 f805 	bl	800187c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001872:	f7ff fcff 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_InitTick+0x54>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x58>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fd61 	bl	8002362 <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00e      	b.n	80018c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d80a      	bhi.n	80018c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f000 fd29 	bl	800230e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018bc:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <HAL_InitTick+0x5c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000008 	.word	0x20000008
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008
 8001900:	20003180 	.word	0x20003180

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20003180 	.word	0x20003180

0800191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff ffee 	bl	8001904 <HAL_GetTick>
 8001928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d005      	beq.n	8001942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_Delay+0x44>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001942:	bf00      	nop
 8001944:	f7ff ffde 	bl	8001904 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d8f7      	bhi.n	8001944 <HAL_Delay+0x28>
  {
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008

08001964 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e031      	b.n	80019de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fc9a 	bl	80012bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d116      	bne.n	80019d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_ADC_Init+0x84>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	f043 0202 	orr.w	r2, r3, #2
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fad6 	bl	8001f64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f023 0303 	bic.w	r3, r3, #3
 80019c6:	f043 0201 	orr.w	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40
 80019ce:	e001      	b.n	80019d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	ffffeefd 	.word	0xffffeefd

080019ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_ADC_Start+0x1a>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e0ad      	b.n	8001b62 <HAL_ADC_Start+0x176>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d018      	beq.n	8001a4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a2c:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <HAL_ADC_Start+0x184>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a50      	ldr	r2, [pc, #320]	; (8001b74 <HAL_ADC_Start+0x188>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	0c9a      	lsrs	r2, r3, #18
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a40:	e002      	b.n	8001a48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f9      	bne.n	8001a42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d175      	bne.n	8001b48 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a60:	4b45      	ldr	r3, [pc, #276]	; (8001b78 <HAL_ADC_Start+0x18c>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a96:	d106      	bne.n	8001aa6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	f023 0206 	bic.w	r2, r3, #6
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	645a      	str	r2, [r3, #68]	; 0x44
 8001aa4:	e002      	b.n	8001aac <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001abc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <HAL_ADC_Start+0x190>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10f      	bne.n	8001aea <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d143      	bne.n	8001b60 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	e03a      	b.n	8001b60 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <HAL_ADC_Start+0x194>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d10e      	bne.n	8001b12 <HAL_ADC_Start+0x126>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d107      	bne.n	8001b12 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b10:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <HAL_ADC_Start+0x190>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d120      	bne.n	8001b60 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_ADC_Start+0x198>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d11b      	bne.n	8001b60 <HAL_ADC_Start+0x174>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d114      	bne.n	8001b60 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	e00b      	b.n	8001b60 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	f043 0210 	orr.w	r2, r3, #16
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000000 	.word	0x20000000
 8001b74:	431bde83 	.word	0x431bde83
 8001b78:	fffff8fe 	.word	0xfffff8fe
 8001b7c:	40012300 	.word	0x40012300
 8001b80:	40012000 	.word	0x40012000
 8001b84:	40012200 	.word	0x40012200

08001b88 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba4:	d113      	bne.n	8001bce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb4:	d10b      	bne.n	8001bce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f043 0220 	orr.w	r2, r3, #32
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e063      	b.n	8001c96 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001bce:	f7ff fe99 	bl	8001904 <HAL_GetTick>
 8001bd2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bd4:	e021      	b.n	8001c1a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d01d      	beq.n	8001c1a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d007      	beq.n	8001bf4 <HAL_ADC_PollForConversion+0x6c>
 8001be4:	f7ff fe8e 	bl	8001904 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d212      	bcs.n	8001c1a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d00b      	beq.n	8001c1a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f043 0204 	orr.w	r2, r3, #4
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e03d      	b.n	8001c96 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d1d6      	bne.n	8001bd6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0212 	mvn.w	r2, #18
 8001c30:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d123      	bne.n	8001c94 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d11f      	bne.n	8001c94 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d111      	bne.n	8001c94 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x1c>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e136      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x28a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b09      	cmp	r3, #9
 8001ce2:	d93a      	bls.n	8001d5a <HAL_ADC_ConfigChannel+0xa2>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cec:	d035      	beq.n	8001d5a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68d9      	ldr	r1, [r3, #12]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	3b1e      	subs	r3, #30
 8001d04:	2207      	movs	r2, #7
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	400a      	ands	r2, r1
 8001d12:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a8d      	ldr	r2, [pc, #564]	; (8001f50 <HAL_ADC_ConfigChannel+0x298>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d10a      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68d9      	ldr	r1, [r3, #12]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	061a      	lsls	r2, r3, #24
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d32:	e035      	b.n	8001da0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68d9      	ldr	r1, [r3, #12]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	4618      	mov	r0, r3
 8001d46:	4603      	mov	r3, r0
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4403      	add	r3, r0
 8001d4c:	3b1e      	subs	r3, #30
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d58:	e022      	b.n	8001da0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6919      	ldr	r1, [r3, #16]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	2207      	movs	r2, #7
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43da      	mvns	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6919      	ldr	r1, [r3, #16]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4403      	add	r3, r0
 8001d96:	409a      	lsls	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b06      	cmp	r3, #6
 8001da6:	d824      	bhi.n	8001df2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	3b05      	subs	r3, #5
 8001dba:	221f      	movs	r2, #31
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43da      	mvns	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	3b05      	subs	r3, #5
 8001de4:	fa00 f203 	lsl.w	r2, r0, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	635a      	str	r2, [r3, #52]	; 0x34
 8001df0:	e04c      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d824      	bhi.n	8001e44 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b23      	subs	r3, #35	; 0x23
 8001e0c:	221f      	movs	r2, #31
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	400a      	ands	r2, r1
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3b23      	subs	r3, #35	; 0x23
 8001e36:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	631a      	str	r2, [r3, #48]	; 0x30
 8001e42:	e023      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	3b41      	subs	r3, #65	; 0x41
 8001e56:	221f      	movs	r2, #31
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	400a      	ands	r2, r1
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b41      	subs	r3, #65	; 0x41
 8001e80:	fa00 f203 	lsl.w	r2, r0, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a30      	ldr	r2, [pc, #192]	; (8001f54 <HAL_ADC_ConfigChannel+0x29c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10a      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x1f4>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e9e:	d105      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a2c      	ldr	r2, [pc, #176]	; (8001f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ea6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001eaa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <HAL_ADC_ConfigChannel+0x29c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x21e>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b12      	cmp	r3, #18
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ec4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ec8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001eca:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ed0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ed4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <HAL_ADC_ConfigChannel+0x29c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d12b      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x280>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1a      	ldr	r2, [pc, #104]	; (8001f50 <HAL_ADC_ConfigChannel+0x298>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d003      	beq.n	8001ef2 <HAL_ADC_ConfigChannel+0x23a>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b11      	cmp	r3, #17
 8001ef0:	d122      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001ef2:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ef8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001efc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f08:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <HAL_ADC_ConfigChannel+0x298>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d111      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_ADC_ConfigChannel+0x2a4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a11      	ldr	r2, [pc, #68]	; (8001f60 <HAL_ADC_ConfigChannel+0x2a8>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0c9a      	lsrs	r2, r3, #18
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f2a:	e002      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f9      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	10000012 	.word	0x10000012
 8001f54:	40012000 	.word	0x40012000
 8001f58:	40012300 	.word	0x40012300
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	431bde83 	.word	0x431bde83

08001f64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f6c:	4b78      	ldr	r3, [pc, #480]	; (8002150 <ADC_Init+0x1ec>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a77      	ldr	r2, [pc, #476]	; (8002150 <ADC_Init+0x1ec>)
 8001f72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f76:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f78:	4b75      	ldr	r3, [pc, #468]	; (8002150 <ADC_Init+0x1ec>)
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4973      	ldr	r1, [pc, #460]	; (8002150 <ADC_Init+0x1ec>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	021a      	lsls	r2, r3, #8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6899      	ldr	r1, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	4a58      	ldr	r2, [pc, #352]	; (8002154 <ADC_Init+0x1f0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d022      	beq.n	800203e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002006:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6899      	ldr	r1, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002028:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6899      	ldr	r1, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	e00f      	b.n	800205e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800204c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800205c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0202 	bic.w	r2, r2, #2
 800206c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6899      	ldr	r1, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	005a      	lsls	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01b      	beq.n	80020c4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800209a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	3b01      	subs	r3, #1
 80020b8:	035a      	lsls	r2, r3, #13
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	e007      	b.n	80020d4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	051a      	lsls	r2, r3, #20
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002116:	025a      	lsls	r2, r3, #9
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6899      	ldr	r1, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	029a      	lsls	r2, r3, #10
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40012300 	.word	0x40012300
 8002154:	0f000001 	.word	0x0f000001

08002158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <__NVIC_SetPriorityGrouping+0x40>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	4313      	orrs	r3, r2
 8002184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <__NVIC_SetPriorityGrouping+0x40>)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60d3      	str	r3, [r2, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00
 800219c:	05fa0000 	.word	0x05fa0000

080021a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <__NVIC_GetPriorityGrouping+0x18>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 0307 	and.w	r3, r3, #7
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db0b      	blt.n	80021e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4907      	ldr	r1, [pc, #28]	; (80021f4 <__NVIC_EnableIRQ+0x38>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2001      	movs	r0, #1
 80021de:	fa00 f202 	lsl.w	r2, r0, r2
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000e100 	.word	0xe000e100

080021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db0a      	blt.n	8002222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	490c      	ldr	r1, [pc, #48]	; (8002244 <__NVIC_SetPriority+0x4c>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002220:	e00a      	b.n	8002238 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <__NVIC_SetPriority+0x50>)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b04      	subs	r3, #4
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	440b      	add	r3, r1
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f1c3 0307 	rsb	r3, r3, #7
 8002266:	2b04      	cmp	r3, #4
 8002268:	bf28      	it	cs
 800226a:	2304      	movcs	r3, #4
 800226c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3304      	adds	r3, #4
 8002272:	2b06      	cmp	r3, #6
 8002274:	d902      	bls.n	800227c <NVIC_EncodePriority+0x30>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3b03      	subs	r3, #3
 800227a:	e000      	b.n	800227e <NVIC_EncodePriority+0x32>
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002294:	f04f 31ff 	mov.w	r1, #4294967295
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43d9      	mvns	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	4313      	orrs	r3, r2
         );
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c4:	d301      	bcc.n	80022ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00f      	b.n	80022ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <SysTick_Config+0x40>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d2:	210f      	movs	r1, #15
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f7ff ff8e 	bl	80021f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <SysTick_Config+0x40>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <SysTick_Config+0x40>)
 80022e4:	2207      	movs	r2, #7
 80022e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	e000e010 	.word	0xe000e010

080022f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff29 	bl	8002158 <__NVIC_SetPriorityGrouping>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002320:	f7ff ff3e 	bl	80021a0 <__NVIC_GetPriorityGrouping>
 8002324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff ff8e 	bl	800224c <NVIC_EncodePriority>
 8002330:	4602      	mov	r2, r0
 8002332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff5d 	bl	80021f8 <__NVIC_SetPriority>
}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff31 	bl	80021bc <__NVIC_EnableIRQ>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffa2 	bl	80022b4 <SysTick_Config>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e06a      	b.n	8002464 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002394:	2b00      	cmp	r3, #0
 8002396:	d106      	bne.n	80023a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2223      	movs	r2, #35	; 0x23
 800239c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7fe ffcb 	bl	800133c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	4b31      	ldr	r3, [pc, #196]	; (800246c <HAL_ETH_Init+0xf0>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4a30      	ldr	r2, [pc, #192]	; (800246c <HAL_ETH_Init+0xf0>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b0:	6453      	str	r3, [r2, #68]	; 0x44
 80023b2:	4b2e      	ldr	r3, [pc, #184]	; (800246c <HAL_ETH_Init+0xf0>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80023be:	4b2c      	ldr	r3, [pc, #176]	; (8002470 <HAL_ETH_Init+0xf4>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4a2b      	ldr	r2, [pc, #172]	; (8002470 <HAL_ETH_Init+0xf4>)
 80023c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_ETH_Init+0xf4>)
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	4927      	ldr	r1, [pc, #156]	; (8002470 <HAL_ETH_Init+0xf4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80023d8:	4b25      	ldr	r3, [pc, #148]	; (8002470 <HAL_ETH_Init+0xf4>)
 80023da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f4:	f7ff fa86 	bl	8001904 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023fa:	e011      	b.n	8002420 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80023fc:	f7ff fa82 	bl	8001904 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800240a:	d909      	bls.n	8002420 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2204      	movs	r2, #4
 8002410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	22e0      	movs	r2, #224	; 0xe0
 8002418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e021      	b.n	8002464 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1e4      	bne.n	80023fc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f958 	bl	80026e8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f9ff 	bl	800283c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fa55 	bl	80028ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	461a      	mov	r2, r3
 800244a:	2100      	movs	r1, #0
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f9bd 	bl	80027cc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2210      	movs	r2, #16
 800245e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40023800 	.word	0x40023800
 8002470:	40013800 	.word	0x40013800

08002474 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <ETH_SetMACConfig+0x15c>)
 800248a:	4013      	ands	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	7c1b      	ldrb	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <ETH_SetMACConfig+0x28>
 8002496:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800249a:	e000      	b.n	800249e <ETH_SetMACConfig+0x2a>
 800249c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	7c5b      	ldrb	r3, [r3, #17]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <ETH_SetMACConfig+0x38>
 80024a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024aa:	e000      	b.n	80024ae <ETH_SetMACConfig+0x3a>
 80024ac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024ae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	7fdb      	ldrb	r3, [r3, #31]
 80024ba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80024bc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	7f92      	ldrb	r2, [r2, #30]
 80024c8:	2a00      	cmp	r2, #0
 80024ca:	d102      	bne.n	80024d2 <ETH_SetMACConfig+0x5e>
 80024cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d0:	e000      	b.n	80024d4 <ETH_SetMACConfig+0x60>
 80024d2:	2200      	movs	r2, #0
                        macconf->Speed |
 80024d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	7f1b      	ldrb	r3, [r3, #28]
 80024da:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024dc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	791b      	ldrb	r3, [r3, #4]
 80024e8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80024ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024f2:	2a00      	cmp	r2, #0
 80024f4:	d102      	bne.n	80024fc <ETH_SetMACConfig+0x88>
 80024f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024fa:	e000      	b.n	80024fe <ETH_SetMACConfig+0x8a>
 80024fc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	7bdb      	ldrb	r3, [r3, #15]
 8002504:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002506:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800250c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002514:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002516:	4313      	orrs	r3, r2
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800252e:	2001      	movs	r0, #1
 8002530:	f7ff f9f4 	bl	800191c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	f64f 7341 	movw	r3, #65345	; 0xff41
 800254a:	4013      	ands	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002552:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800255a:	2a00      	cmp	r2, #0
 800255c:	d101      	bne.n	8002562 <ETH_SetMACConfig+0xee>
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	e000      	b.n	8002564 <ETH_SetMACConfig+0xf0>
 8002562:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002564:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800256a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002572:	2a01      	cmp	r2, #1
 8002574:	d101      	bne.n	800257a <ETH_SetMACConfig+0x106>
 8002576:	2208      	movs	r2, #8
 8002578:	e000      	b.n	800257c <ETH_SetMACConfig+0x108>
 800257a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800257c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002584:	2a01      	cmp	r2, #1
 8002586:	d101      	bne.n	800258c <ETH_SetMACConfig+0x118>
 8002588:	2204      	movs	r2, #4
 800258a:	e000      	b.n	800258e <ETH_SetMACConfig+0x11a>
 800258c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800258e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002596:	2a01      	cmp	r2, #1
 8002598:	d101      	bne.n	800259e <ETH_SetMACConfig+0x12a>
 800259a:	2202      	movs	r2, #2
 800259c:	e000      	b.n	80025a0 <ETH_SetMACConfig+0x12c>
 800259e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025a0:	4313      	orrs	r3, r2
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b8:	2001      	movs	r0, #1
 80025ba:	f7ff f9af 	bl	800191c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	619a      	str	r2, [r3, #24]
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	ff20810f 	.word	0xff20810f

080025d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4b3d      	ldr	r3, [pc, #244]	; (80026e4 <ETH_SetDMAConfig+0x110>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	7b1b      	ldrb	r3, [r3, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <ETH_SetDMAConfig+0x2c>
 80025fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025fe:	e000      	b.n	8002602 <ETH_SetDMAConfig+0x2e>
 8002600:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	7b5b      	ldrb	r3, [r3, #13]
 8002606:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002608:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	7f52      	ldrb	r2, [r2, #29]
 800260e:	2a00      	cmp	r2, #0
 8002610:	d102      	bne.n	8002618 <ETH_SetDMAConfig+0x44>
 8002612:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002616:	e000      	b.n	800261a <ETH_SetDMAConfig+0x46>
 8002618:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800261a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	7b9b      	ldrb	r3, [r3, #14]
 8002620:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002622:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002628:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	7f1b      	ldrb	r3, [r3, #28]
 800262e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002630:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	7f9b      	ldrb	r3, [r3, #30]
 8002636:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002638:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800263e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002646:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002648:	4313      	orrs	r3, r2
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002658:	461a      	mov	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800266a:	2001      	movs	r0, #1
 800266c:	f7ff f956 	bl	800191c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002678:	461a      	mov	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	791b      	ldrb	r3, [r3, #4]
 8002682:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002688:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800268e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002694:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800269c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800269e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80026a6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80026ac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7ff f927 	bl	800191c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	f8de3f23 	.word	0xf8de3f23

080026e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b0a6      	sub	sp, #152	; 0x98
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80026fc:	2300      	movs	r3, #0
 80026fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002712:	2301      	movs	r3, #1
 8002714:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002724:	2300      	movs	r3, #0
 8002726:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800272e:	2300      	movs	r3, #0
 8002730:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002744:	2300      	movs	r3, #0
 8002746:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800274a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800274e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002754:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800275c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002760:	4619      	mov	r1, r3
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff fe86 	bl	8002474 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002768:	2301      	movs	r3, #1
 800276a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800276c:	2301      	movs	r3, #1
 800276e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002770:	2301      	movs	r3, #1
 8002772:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002776:	2301      	movs	r3, #1
 8002778:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800278a:	2300      	movs	r3, #0
 800278c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002794:	2301      	movs	r3, #1
 8002796:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800279c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800279e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	4619      	mov	r1, r3
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ff08 	bl	80025d4 <ETH_SetDMAConfig>
}
 80027c4:	bf00      	nop
 80027c6:	3798      	adds	r7, #152	; 0x98
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3305      	adds	r3, #5
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	3204      	adds	r2, #4
 80027e4:	7812      	ldrb	r2, [r2, #0]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <ETH_MACAddressConfig+0x68>)
 80027ee:	4413      	add	r3, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3303      	adds	r3, #3
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	061a      	lsls	r2, r3, #24
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3302      	adds	r3, #2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3301      	adds	r3, #1
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	4313      	orrs	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	7812      	ldrb	r2, [r2, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <ETH_MACAddressConfig+0x6c>)
 800281e:	4413      	add	r3, r2
 8002820:	461a      	mov	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	6013      	str	r3, [r2, #0]
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40028040 	.word	0x40028040
 8002838:	40028044 	.word	0x40028044

0800283c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e03e      	b.n	80028c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68d9      	ldr	r1, [r3, #12]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2200      	movs	r2, #0
 8002866:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	3206      	adds	r2, #6
 800287c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d80c      	bhi.n	80028ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68d9      	ldr	r1, [r3, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	e004      	b.n	80028b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	461a      	mov	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d9bd      	bls.n	800284a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e0:	611a      	str	r2, [r3, #16]
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	e046      	b.n	800298a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6919      	ldr	r1, [r3, #16]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2200      	movs	r2, #0
 8002918:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2200      	movs	r2, #0
 800292a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2200      	movs	r2, #0
 8002930:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002938:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002940:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	3212      	adds	r2, #18
 8002956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d80c      	bhi.n	800297a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6919      	ldr	r1, [r3, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	60da      	str	r2, [r3, #12]
 8002978:	e004      	b.n	8002984 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	461a      	mov	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3301      	adds	r3, #1
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d9b5      	bls.n	80028fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ba:	60da      	str	r2, [r3, #12]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e175      	b.n	8002cd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029e8:	2201      	movs	r2, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	f040 8164 	bne.w	8002cce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d005      	beq.n	8002a1e <HAL_GPIO_Init+0x56>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d130      	bne.n	8002a80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a54:	2201      	movs	r2, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 0201 	and.w	r2, r3, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d017      	beq.n	8002abc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d123      	bne.n	8002b10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	08da      	lsrs	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3208      	adds	r2, #8
 8002ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	220f      	movs	r2, #15
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	69b9      	ldr	r1, [r7, #24]
 8002b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80be 	beq.w	8002cce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	4b66      	ldr	r3, [pc, #408]	; (8002cec <HAL_GPIO_Init+0x324>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	4a65      	ldr	r2, [pc, #404]	; (8002cec <HAL_GPIO_Init+0x324>)
 8002b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5e:	4b63      	ldr	r3, [pc, #396]	; (8002cec <HAL_GPIO_Init+0x324>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b6a:	4a61      	ldr	r2, [pc, #388]	; (8002cf0 <HAL_GPIO_Init+0x328>)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	3302      	adds	r3, #2
 8002b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	220f      	movs	r2, #15
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a58      	ldr	r2, [pc, #352]	; (8002cf4 <HAL_GPIO_Init+0x32c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d037      	beq.n	8002c06 <HAL_GPIO_Init+0x23e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a57      	ldr	r2, [pc, #348]	; (8002cf8 <HAL_GPIO_Init+0x330>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d031      	beq.n	8002c02 <HAL_GPIO_Init+0x23a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a56      	ldr	r2, [pc, #344]	; (8002cfc <HAL_GPIO_Init+0x334>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d02b      	beq.n	8002bfe <HAL_GPIO_Init+0x236>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a55      	ldr	r2, [pc, #340]	; (8002d00 <HAL_GPIO_Init+0x338>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d025      	beq.n	8002bfa <HAL_GPIO_Init+0x232>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a54      	ldr	r2, [pc, #336]	; (8002d04 <HAL_GPIO_Init+0x33c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01f      	beq.n	8002bf6 <HAL_GPIO_Init+0x22e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a53      	ldr	r2, [pc, #332]	; (8002d08 <HAL_GPIO_Init+0x340>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d019      	beq.n	8002bf2 <HAL_GPIO_Init+0x22a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	; (8002d0c <HAL_GPIO_Init+0x344>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <HAL_GPIO_Init+0x226>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a51      	ldr	r2, [pc, #324]	; (8002d10 <HAL_GPIO_Init+0x348>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00d      	beq.n	8002bea <HAL_GPIO_Init+0x222>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a50      	ldr	r2, [pc, #320]	; (8002d14 <HAL_GPIO_Init+0x34c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <HAL_GPIO_Init+0x21e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4f      	ldr	r2, [pc, #316]	; (8002d18 <HAL_GPIO_Init+0x350>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_GPIO_Init+0x21a>
 8002bde:	2309      	movs	r3, #9
 8002be0:	e012      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002be2:	230a      	movs	r3, #10
 8002be4:	e010      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002be6:	2308      	movs	r3, #8
 8002be8:	e00e      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002bea:	2307      	movs	r3, #7
 8002bec:	e00c      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002bee:	2306      	movs	r3, #6
 8002bf0:	e00a      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	e008      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e004      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e002      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_GPIO_Init+0x240>
 8002c06:	2300      	movs	r3, #0
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	f002 0203 	and.w	r2, r2, #3
 8002c0e:	0092      	lsls	r2, r2, #2
 8002c10:	4093      	lsls	r3, r2
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c18:	4935      	ldr	r1, [pc, #212]	; (8002cf0 <HAL_GPIO_Init+0x328>)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	3302      	adds	r3, #2
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c26:	4b3d      	ldr	r3, [pc, #244]	; (8002d1c <HAL_GPIO_Init+0x354>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c4a:	4a34      	ldr	r2, [pc, #208]	; (8002d1c <HAL_GPIO_Init+0x354>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c50:	4b32      	ldr	r3, [pc, #200]	; (8002d1c <HAL_GPIO_Init+0x354>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c74:	4a29      	ldr	r2, [pc, #164]	; (8002d1c <HAL_GPIO_Init+0x354>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_GPIO_Init+0x354>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <HAL_GPIO_Init+0x354>)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_GPIO_Init+0x354>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_GPIO_Init+0x354>)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b0f      	cmp	r3, #15
 8002cd8:	f67f ae86 	bls.w	80029e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3724      	adds	r7, #36	; 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40013800 	.word	0x40013800
 8002cf4:	40020000 	.word	0x40020000
 8002cf8:	40020400 	.word	0x40020400
 8002cfc:	40020800 	.word	0x40020800
 8002d00:	40020c00 	.word	0x40020c00
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40021400 	.word	0x40021400
 8002d0c:	40021800 	.word	0x40021800
 8002d10:	40021c00 	.word	0x40021c00
 8002d14:	40022000 	.word	0x40022000
 8002d18:	40022400 	.word	0x40022400
 8002d1c:	40013c00 	.word	0x40013c00

08002d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d30:	787b      	ldrb	r3, [r7, #1]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d3c:	e003      	b.n	8002d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d3e:	887b      	ldrh	r3, [r7, #2]
 8002d40:	041a      	lsls	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	619a      	str	r2, [r3, #24]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d64:	887a      	ldrh	r2, [r7, #2]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	041a      	lsls	r2, r3, #16
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	43d9      	mvns	r1, r3
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	400b      	ands	r3, r1
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	619a      	str	r2, [r3, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d006      	beq.n	8002dac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d9e:	4a05      	ldr	r2, [pc, #20]	; (8002db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe f8b6 	bl	8000f18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40013c00 	.word	0x40013c00

08002db8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dba:	b08f      	sub	sp, #60	; 0x3c
 8002dbc:	af0a      	add	r7, sp, #40	; 0x28
 8002dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e116      	b.n	8002ff8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fe fc15 	bl	8001614 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2203      	movs	r2, #3
 8002dee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f002 fdb9 	bl	8005980 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	687e      	ldr	r6, [r7, #4]
 8002e16:	466d      	mov	r5, sp
 8002e18:	f106 0410 	add.w	r4, r6, #16
 8002e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e28:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e2c:	1d33      	adds	r3, r6, #4
 8002e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e30:	6838      	ldr	r0, [r7, #0]
 8002e32:	f002 fd4d 	bl	80058d0 <USB_CoreInit>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0d7      	b.n	8002ff8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 fda7 	bl	80059a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
 8002e58:	e04a      	b.n	8002ef0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	333d      	adds	r3, #61	; 0x3d
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	333c      	adds	r3, #60	; 0x3c
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e82:	7bfa      	ldrb	r2, [r7, #15]
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	b298      	uxth	r0, r3
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3344      	adds	r3, #68	; 0x44
 8002e96:	4602      	mov	r2, r0
 8002e98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3340      	adds	r3, #64	; 0x40
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002eae:	7bfa      	ldrb	r2, [r7, #15]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	3348      	adds	r3, #72	; 0x48
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ec2:	7bfa      	ldrb	r2, [r7, #15]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	334c      	adds	r3, #76	; 0x4c
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ed6:	7bfa      	ldrb	r2, [r7, #15]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3354      	adds	r3, #84	; 0x54
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	3301      	adds	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d3af      	bcc.n	8002e5a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	73fb      	strb	r3, [r7, #15]
 8002efe:	e044      	b.n	8002f8a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	3301      	adds	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d3b5      	bcc.n	8002f00 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	687e      	ldr	r6, [r7, #4]
 8002f9c:	466d      	mov	r5, sp
 8002f9e:	f106 0410 	add.w	r4, r6, #16
 8002fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002faa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fae:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fb2:	1d33      	adds	r3, r6, #4
 8002fb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb6:	6838      	ldr	r0, [r7, #0]
 8002fb8:	f002 fd40 	bl	8005a3c <USB_DevInit>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e014      	b.n	8002ff8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d102      	bne.n	8002fec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f80a 	bl	8003000 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f002 fefe 	bl	8005df2 <USB_DevDisconnect>

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003000 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800302e:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_PCDEx_ActivateLPM+0x44>)
 8003030:	4313      	orrs	r3, r2
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	10000003 	.word	0x10000003

08003048 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a04      	ldr	r2, [pc, #16]	; (8003064 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003056:	6013      	str	r3, [r2, #0]
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40007000 	.word	0x40007000

08003068 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	4b23      	ldr	r3, [pc, #140]	; (8003100 <HAL_PWREx_EnableOverDrive+0x98>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	4a22      	ldr	r2, [pc, #136]	; (8003100 <HAL_PWREx_EnableOverDrive+0x98>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	6413      	str	r3, [r2, #64]	; 0x40
 800307e:	4b20      	ldr	r3, [pc, #128]	; (8003100 <HAL_PWREx_EnableOverDrive+0x98>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800308a:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_PWREx_EnableOverDrive+0x9c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003094:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003096:	f7fe fc35 	bl	8001904 <HAL_GetTick>
 800309a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800309c:	e009      	b.n	80030b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800309e:	f7fe fc31 	bl	8001904 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ac:	d901      	bls.n	80030b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e022      	b.n	80030f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030be:	d1ee      	bne.n	800309e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030c0:	4b10      	ldr	r3, [pc, #64]	; (8003104 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0f      	ldr	r2, [pc, #60]	; (8003104 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030cc:	f7fe fc1a 	bl	8001904 <HAL_GetTick>
 80030d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030d2:	e009      	b.n	80030e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030d4:	f7fe fc16 	bl	8001904 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030e2:	d901      	bls.n	80030e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e007      	b.n	80030f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030f4:	d1ee      	bne.n	80030d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	40007000 	.word	0x40007000

08003108 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e29b      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8087 	beq.w	800323a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800312c:	4b96      	ldr	r3, [pc, #600]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b04      	cmp	r3, #4
 8003136:	d00c      	beq.n	8003152 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003138:	4b93      	ldr	r3, [pc, #588]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	d112      	bne.n	800316a <HAL_RCC_OscConfig+0x62>
 8003144:	4b90      	ldr	r3, [pc, #576]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003150:	d10b      	bne.n	800316a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003152:	4b8d      	ldr	r3, [pc, #564]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d06c      	beq.n	8003238 <HAL_RCC_OscConfig+0x130>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d168      	bne.n	8003238 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e275      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x7a>
 8003174:	4b84      	ldr	r3, [pc, #528]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a83      	ldr	r2, [pc, #524]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 800317a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	e02e      	b.n	80031e0 <HAL_RCC_OscConfig+0xd8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x9c>
 800318a:	4b7f      	ldr	r3, [pc, #508]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7e      	ldr	r2, [pc, #504]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b7c      	ldr	r3, [pc, #496]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a7b      	ldr	r2, [pc, #492]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 800319c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e01d      	b.n	80031e0 <HAL_RCC_OscConfig+0xd8>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0xc0>
 80031ae:	4b76      	ldr	r3, [pc, #472]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a75      	ldr	r2, [pc, #468]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80031b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b73      	ldr	r3, [pc, #460]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a72      	ldr	r2, [pc, #456]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0xd8>
 80031c8:	4b6f      	ldr	r3, [pc, #444]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a6e      	ldr	r2, [pc, #440]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4b6c      	ldr	r3, [pc, #432]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a6b      	ldr	r2, [pc, #428]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80031da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d013      	beq.n	8003210 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe fb8c 	bl	8001904 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fe fb88 	bl	8001904 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e229      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b61      	ldr	r3, [pc, #388]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0xe8>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fe fb78 	bl	8001904 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fe fb74 	bl	8001904 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e215      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	4b57      	ldr	r3, [pc, #348]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x110>
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d069      	beq.n	800331a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003246:	4b50      	ldr	r3, [pc, #320]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003252:	4b4d      	ldr	r3, [pc, #308]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b08      	cmp	r3, #8
 800325c:	d11c      	bne.n	8003298 <HAL_RCC_OscConfig+0x190>
 800325e:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_RCC_OscConfig+0x17a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e1e9      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	4b41      	ldr	r3, [pc, #260]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	493d      	ldr	r1, [pc, #244]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	e040      	b.n	800331a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d023      	beq.n	80032e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a0:	4b39      	ldr	r3, [pc, #228]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a38      	ldr	r2, [pc, #224]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fe fb2a 	bl	8001904 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b4:	f7fe fb26 	bl	8001904 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e1c7      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	4b30      	ldr	r3, [pc, #192]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d2:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4929      	ldr	r1, [pc, #164]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]
 80032e6:	e018      	b.n	800331a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a26      	ldr	r2, [pc, #152]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 80032ee:	f023 0301 	bic.w	r3, r3, #1
 80032f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fe fb06 	bl	8001904 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fc:	f7fe fb02 	bl	8001904 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e1a3      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d038      	beq.n	8003398 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d019      	beq.n	8003362 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332e:	4b16      	ldr	r3, [pc, #88]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003332:	4a15      	ldr	r2, [pc, #84]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333a:	f7fe fae3 	bl	8001904 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003342:	f7fe fadf 	bl	8001904 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e180      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x23a>
 8003360:	e01a      	b.n	8003398 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003366:	4a08      	ldr	r2, [pc, #32]	; (8003388 <HAL_RCC_OscConfig+0x280>)
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7fe fac9 	bl	8001904 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003376:	f7fe fac5 	bl	8001904 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d903      	bls.n	800338c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e166      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
 8003388:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338c:	4b92      	ldr	r3, [pc, #584]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 800338e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ee      	bne.n	8003376 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80a4 	beq.w	80034ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a6:	4b8c      	ldr	r3, [pc, #560]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	4b89      	ldr	r3, [pc, #548]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	4a88      	ldr	r2, [pc, #544]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033bc:	6413      	str	r3, [r2, #64]	; 0x40
 80033be:	4b86      	ldr	r3, [pc, #536]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ce:	4b83      	ldr	r3, [pc, #524]	; (80035dc <HAL_RCC_OscConfig+0x4d4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033da:	4b80      	ldr	r3, [pc, #512]	; (80035dc <HAL_RCC_OscConfig+0x4d4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a7f      	ldr	r2, [pc, #508]	; (80035dc <HAL_RCC_OscConfig+0x4d4>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fe fa8d 	bl	8001904 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fe fa89 	bl	8001904 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	; 0x64
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e12a      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003400:	4b76      	ldr	r3, [pc, #472]	; (80035dc <HAL_RCC_OscConfig+0x4d4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x31a>
 8003414:	4b70      	ldr	r3, [pc, #448]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	4a6f      	ldr	r2, [pc, #444]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6713      	str	r3, [r2, #112]	; 0x70
 8003420:	e02d      	b.n	800347e <HAL_RCC_OscConfig+0x376>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x33c>
 800342a:	4b6b      	ldr	r3, [pc, #428]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4a6a      	ldr	r2, [pc, #424]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	6713      	str	r3, [r2, #112]	; 0x70
 8003436:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a67      	ldr	r2, [pc, #412]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
 8003442:	e01c      	b.n	800347e <HAL_RCC_OscConfig+0x376>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d10c      	bne.n	8003466 <HAL_RCC_OscConfig+0x35e>
 800344c:	4b62      	ldr	r3, [pc, #392]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	4a61      	ldr	r2, [pc, #388]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6713      	str	r3, [r2, #112]	; 0x70
 8003458:	4b5f      	ldr	r3, [pc, #380]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	4a5e      	ldr	r2, [pc, #376]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6713      	str	r3, [r2, #112]	; 0x70
 8003464:	e00b      	b.n	800347e <HAL_RCC_OscConfig+0x376>
 8003466:	4b5c      	ldr	r3, [pc, #368]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	4a5b      	ldr	r2, [pc, #364]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	6713      	str	r3, [r2, #112]	; 0x70
 8003472:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	4a58      	ldr	r2, [pc, #352]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	f023 0304 	bic.w	r3, r3, #4
 800347c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d015      	beq.n	80034b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003486:	f7fe fa3d 	bl	8001904 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe fa39 	bl	8001904 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0d8      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a4:	4b4c      	ldr	r3, [pc, #304]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ee      	beq.n	800348e <HAL_RCC_OscConfig+0x386>
 80034b0:	e014      	b.n	80034dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7fe fa27 	bl	8001904 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fe fa23 	bl	8001904 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0c2      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d0:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ee      	bne.n	80034ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d105      	bne.n	80034ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e2:	4b3d      	ldr	r3, [pc, #244]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	4a3c      	ldr	r2, [pc, #240]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 80034e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80ae 	beq.w	8003654 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f8:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d06d      	beq.n	80035e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d14b      	bne.n	80035a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350c:	4b32      	ldr	r3, [pc, #200]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a31      	ldr	r2, [pc, #196]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 8003512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe f9f4 	bl	8001904 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe f9f0 	bl	8001904 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e091      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	3b01      	subs	r3, #1
 8003558:	041b      	lsls	r3, r3, #16
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	071b      	lsls	r3, r3, #28
 800356a:	491b      	ldr	r1, [pc, #108]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003570:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 8003576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800357a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe f9c2 	bl	8001904 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe f9be 	bl	8001904 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e05f      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x47c>
 80035a2:	e057      	b.n	8003654 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 80035aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fe f9a8 	bl	8001904 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fe f9a4 	bl	8001904 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e045      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <HAL_RCC_OscConfig+0x4d0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4b0>
 80035d6:	e03d      	b.n	8003654 <HAL_RCC_OscConfig+0x54c>
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035e0:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <HAL_RCC_OscConfig+0x558>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d030      	beq.n	8003650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d129      	bne.n	8003650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d122      	bne.n	8003650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003610:	4013      	ands	r3, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003616:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003618:	4293      	cmp	r3, r2
 800361a:	d119      	bne.n	8003650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	3b01      	subs	r3, #1
 800362a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d10f      	bne.n	8003650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d107      	bne.n	8003650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800

08003664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0d0      	b.n	800381e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800367c:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d910      	bls.n	80036ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b67      	ldr	r3, [pc, #412]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 020f 	bic.w	r2, r3, #15
 8003692:	4965      	ldr	r1, [pc, #404]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b63      	ldr	r3, [pc, #396]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0b8      	b.n	800381e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d020      	beq.n	80036fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c4:	4b59      	ldr	r3, [pc, #356]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a58      	ldr	r2, [pc, #352]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 80036ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036dc:	4b53      	ldr	r3, [pc, #332]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4a52      	ldr	r2, [pc, #328]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 80036e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e8:	4b50      	ldr	r3, [pc, #320]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	494d      	ldr	r1, [pc, #308]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d040      	beq.n	8003788 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	4b47      	ldr	r3, [pc, #284]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d115      	bne.n	8003746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e07f      	b.n	800381e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003726:	4b41      	ldr	r3, [pc, #260]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e073      	b.n	800381e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003736:	4b3d      	ldr	r3, [pc, #244]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e06b      	b.n	800381e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003746:	4b39      	ldr	r3, [pc, #228]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f023 0203 	bic.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4936      	ldr	r1, [pc, #216]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 8003754:	4313      	orrs	r3, r2
 8003756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003758:	f7fe f8d4 	bl	8001904 <HAL_GetTick>
 800375c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	e00a      	b.n	8003776 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003760:	f7fe f8d0 	bl	8001904 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e053      	b.n	800381e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	4b2d      	ldr	r3, [pc, #180]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 020c 	and.w	r2, r3, #12
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	429a      	cmp	r2, r3
 8003786:	d1eb      	bne.n	8003760 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003788:	4b27      	ldr	r3, [pc, #156]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d210      	bcs.n	80037b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b24      	ldr	r3, [pc, #144]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 020f 	bic.w	r2, r3, #15
 800379e:	4922      	ldr	r1, [pc, #136]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b20      	ldr	r3, [pc, #128]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e032      	b.n	800381e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4916      	ldr	r1, [pc, #88]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	490e      	ldr	r1, [pc, #56]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037f6:	f000 f821 	bl	800383c <HAL_RCC_GetSysClockFreq>
 80037fa:	4602      	mov	r2, r0
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	490a      	ldr	r1, [pc, #40]	; (8003830 <HAL_RCC_ClockConfig+0x1cc>)
 8003808:	5ccb      	ldrb	r3, [r1, r3]
 800380a:	fa22 f303 	lsr.w	r3, r2, r3
 800380e:	4a09      	ldr	r2, [pc, #36]	; (8003834 <HAL_RCC_ClockConfig+0x1d0>)
 8003810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_RCC_ClockConfig+0x1d4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe f830 	bl	800187c <HAL_InitTick>

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40023c00 	.word	0x40023c00
 800382c:	40023800 	.word	0x40023800
 8003830:	0800a7a4 	.word	0x0800a7a4
 8003834:	20000000 	.word	0x20000000
 8003838:	20000004 	.word	0x20000004

0800383c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800383c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003840:	b094      	sub	sp, #80	; 0x50
 8003842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	647b      	str	r3, [r7, #68]	; 0x44
 8003848:	2300      	movs	r3, #0
 800384a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800384c:	2300      	movs	r3, #0
 800384e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003854:	4b79      	ldr	r3, [pc, #484]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b08      	cmp	r3, #8
 800385e:	d00d      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x40>
 8003860:	2b08      	cmp	r3, #8
 8003862:	f200 80e1 	bhi.w	8003a28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x34>
 800386a:	2b04      	cmp	r3, #4
 800386c:	d003      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x3a>
 800386e:	e0db      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003870:	4b73      	ldr	r3, [pc, #460]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003872:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003874:	e0db      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003876:	4b73      	ldr	r3, [pc, #460]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x208>)
 8003878:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800387a:	e0d8      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800387c:	4b6f      	ldr	r3, [pc, #444]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003884:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003886:	4b6d      	ldr	r3, [pc, #436]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d063      	beq.n	800395a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003892:	4b6a      	ldr	r3, [pc, #424]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	099b      	lsrs	r3, r3, #6
 8003898:	2200      	movs	r2, #0
 800389a:	63bb      	str	r3, [r7, #56]	; 0x38
 800389c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800389e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a4:	633b      	str	r3, [r7, #48]	; 0x30
 80038a6:	2300      	movs	r3, #0
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
 80038aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038ae:	4622      	mov	r2, r4
 80038b0:	462b      	mov	r3, r5
 80038b2:	f04f 0000 	mov.w	r0, #0
 80038b6:	f04f 0100 	mov.w	r1, #0
 80038ba:	0159      	lsls	r1, r3, #5
 80038bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c0:	0150      	lsls	r0, r2, #5
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4621      	mov	r1, r4
 80038c8:	1a51      	subs	r1, r2, r1
 80038ca:	6139      	str	r1, [r7, #16]
 80038cc:	4629      	mov	r1, r5
 80038ce:	eb63 0301 	sbc.w	r3, r3, r1
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038e0:	4659      	mov	r1, fp
 80038e2:	018b      	lsls	r3, r1, #6
 80038e4:	4651      	mov	r1, sl
 80038e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ea:	4651      	mov	r1, sl
 80038ec:	018a      	lsls	r2, r1, #6
 80038ee:	4651      	mov	r1, sl
 80038f0:	ebb2 0801 	subs.w	r8, r2, r1
 80038f4:	4659      	mov	r1, fp
 80038f6:	eb63 0901 	sbc.w	r9, r3, r1
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800390a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800390e:	4690      	mov	r8, r2
 8003910:	4699      	mov	r9, r3
 8003912:	4623      	mov	r3, r4
 8003914:	eb18 0303 	adds.w	r3, r8, r3
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	462b      	mov	r3, r5
 800391c:	eb49 0303 	adc.w	r3, r9, r3
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800392e:	4629      	mov	r1, r5
 8003930:	024b      	lsls	r3, r1, #9
 8003932:	4621      	mov	r1, r4
 8003934:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003938:	4621      	mov	r1, r4
 800393a:	024a      	lsls	r2, r1, #9
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003942:	2200      	movs	r2, #0
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
 8003946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800394c:	f7fc fe8c 	bl	8000668 <__aeabi_uldivmod>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4613      	mov	r3, r2
 8003956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003958:	e058      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800395a:	4b38      	ldr	r3, [pc, #224]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	099b      	lsrs	r3, r3, #6
 8003960:	2200      	movs	r2, #0
 8003962:	4618      	mov	r0, r3
 8003964:	4611      	mov	r1, r2
 8003966:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800396a:	623b      	str	r3, [r7, #32]
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
 8003970:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003974:	4642      	mov	r2, r8
 8003976:	464b      	mov	r3, r9
 8003978:	f04f 0000 	mov.w	r0, #0
 800397c:	f04f 0100 	mov.w	r1, #0
 8003980:	0159      	lsls	r1, r3, #5
 8003982:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003986:	0150      	lsls	r0, r2, #5
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4641      	mov	r1, r8
 800398e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003992:	4649      	mov	r1, r9
 8003994:	eb63 0b01 	sbc.w	fp, r3, r1
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039ac:	ebb2 040a 	subs.w	r4, r2, sl
 80039b0:	eb63 050b 	sbc.w	r5, r3, fp
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	00eb      	lsls	r3, r5, #3
 80039be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039c2:	00e2      	lsls	r2, r4, #3
 80039c4:	4614      	mov	r4, r2
 80039c6:	461d      	mov	r5, r3
 80039c8:	4643      	mov	r3, r8
 80039ca:	18e3      	adds	r3, r4, r3
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	464b      	mov	r3, r9
 80039d0:	eb45 0303 	adc.w	r3, r5, r3
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039e2:	4629      	mov	r1, r5
 80039e4:	028b      	lsls	r3, r1, #10
 80039e6:	4621      	mov	r1, r4
 80039e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ec:	4621      	mov	r1, r4
 80039ee:	028a      	lsls	r2, r1, #10
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f6:	2200      	movs	r2, #0
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	61fa      	str	r2, [r7, #28]
 80039fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a00:	f7fc fe32 	bl	8000668 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4613      	mov	r3, r2
 8003a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	3301      	adds	r3, #1
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003a1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a26:	e002      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3750      	adds	r7, #80	; 0x50
 8003a34:	46bd      	mov	sp, r7
 8003a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	007a1200 	.word	0x007a1200

08003a48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000000 	.word	0x20000000

08003a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a64:	f7ff fff0 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0a9b      	lsrs	r3, r3, #10
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4903      	ldr	r1, [pc, #12]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	0800a7b4 	.word	0x0800a7b4

08003a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a8c:	f7ff ffdc 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0b5b      	lsrs	r3, r3, #13
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4903      	ldr	r1, [pc, #12]	; (8003aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	0800a7b4 	.word	0x0800a7b4

08003ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d012      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ad8:	4b69      	ldr	r3, [pc, #420]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4a68      	ldr	r2, [pc, #416]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ae2:	6093      	str	r3, [r2, #8]
 8003ae4:	4b66      	ldr	r3, [pc, #408]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aec:	4964      	ldr	r1, [pc, #400]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003afa:	2301      	movs	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d017      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b0a:	4b5d      	ldr	r3, [pc, #372]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	4959      	ldr	r1, [pc, #356]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b28:	d101      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b36:	2301      	movs	r3, #1
 8003b38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d017      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b46:	4b4e      	ldr	r3, [pc, #312]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	494a      	ldr	r1, [pc, #296]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b64:	d101      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b66:	2301      	movs	r3, #1
 8003b68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b72:	2301      	movs	r3, #1
 8003b74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b82:	2301      	movs	r3, #1
 8003b84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 808b 	beq.w	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b94:	4b3a      	ldr	r3, [pc, #232]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	4a39      	ldr	r2, [pc, #228]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba0:	4b37      	ldr	r3, [pc, #220]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bac:	4b35      	ldr	r3, [pc, #212]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a34      	ldr	r2, [pc, #208]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb8:	f7fd fea4 	bl	8001904 <HAL_GetTick>
 8003bbc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc0:	f7fd fea0 	bl	8001904 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	; 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e38f      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bd2:	4b2c      	ldr	r3, [pc, #176]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bde:	4b28      	ldr	r3, [pc, #160]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d035      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d02e      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bfc:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c06:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4a1d      	ldr	r2, [pc, #116]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c1e:	4a18      	ldr	r2, [pc, #96]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c24:	4b16      	ldr	r3, [pc, #88]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d114      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fd fe68 	bl	8001904 <HAL_GetTick>
 8003c34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	e00a      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7fd fe64 	bl	8001904 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e351      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0ee      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c66:	d111      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c76:	400b      	ands	r3, r1
 8003c78:	4901      	ldr	r1, [pc, #4]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40007000 	.word	0x40007000
 8003c88:	0ffffcff 	.word	0x0ffffcff
 8003c8c:	4bac      	ldr	r3, [pc, #688]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4aab      	ldr	r2, [pc, #684]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c96:	6093      	str	r3, [r2, #8]
 8003c98:	4ba9      	ldr	r3, [pc, #676]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca4:	49a6      	ldr	r1, [pc, #664]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d010      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cb6:	4ba2      	ldr	r3, [pc, #648]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cbc:	4aa0      	ldr	r2, [pc, #640]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cc6:	4b9e      	ldr	r3, [pc, #632]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	499b      	ldr	r1, [pc, #620]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ce4:	4b96      	ldr	r3, [pc, #600]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf2:	4993      	ldr	r1, [pc, #588]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d06:	4b8e      	ldr	r3, [pc, #568]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d14:	498a      	ldr	r1, [pc, #552]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d28:	4b85      	ldr	r3, [pc, #532]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d36:	4982      	ldr	r1, [pc, #520]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d4a:	4b7d      	ldr	r3, [pc, #500]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	4979      	ldr	r1, [pc, #484]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d6c:	4b74      	ldr	r3, [pc, #464]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	f023 0203 	bic.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	4971      	ldr	r1, [pc, #452]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d8e:	4b6c      	ldr	r3, [pc, #432]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	f023 020c 	bic.w	r2, r3, #12
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9c:	4968      	ldr	r1, [pc, #416]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003db0:	4b63      	ldr	r3, [pc, #396]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbe:	4960      	ldr	r1, [pc, #384]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dd2:	4b5b      	ldr	r3, [pc, #364]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de0:	4957      	ldr	r1, [pc, #348]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003df4:	4b52      	ldr	r3, [pc, #328]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	494f      	ldr	r1, [pc, #316]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e16:	4b4a      	ldr	r3, [pc, #296]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	4946      	ldr	r1, [pc, #280]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e38:	4b41      	ldr	r3, [pc, #260]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e46:	493e      	ldr	r1, [pc, #248]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e5a:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e68:	4935      	ldr	r1, [pc, #212]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e7c:	4b30      	ldr	r3, [pc, #192]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8a:	492d      	ldr	r1, [pc, #180]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d011      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e9e:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eac:	4924      	ldr	r1, [pc, #144]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ede:	4b18      	ldr	r3, [pc, #96]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eec:	4914      	ldr	r1, [pc, #80]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f10:	490b      	ldr	r1, [pc, #44]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00f      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f34:	4902      	ldr	r1, [pc, #8]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f3c:	e002      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00b      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f50:	4b8a      	ldr	r3, [pc, #552]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	4986      	ldr	r1, [pc, #536]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00b      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f74:	4b81      	ldr	r3, [pc, #516]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f84:	497d      	ldr	r1, [pc, #500]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d006      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 80d6 	beq.w	800414c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fa0:	4b76      	ldr	r3, [pc, #472]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a75      	ldr	r2, [pc, #468]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fac:	f7fd fcaa 	bl	8001904 <HAL_GetTick>
 8003fb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fb4:	f7fd fca6 	bl	8001904 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	; 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e195      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fc6:	4b6d      	ldr	r3, [pc, #436]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d021      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d11d      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fe6:	4b65      	ldr	r3, [pc, #404]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ff4:	4b61      	ldr	r3, [pc, #388]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffa:	0e1b      	lsrs	r3, r3, #24
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	019a      	lsls	r2, r3, #6
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	041b      	lsls	r3, r3, #16
 800400c:	431a      	orrs	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	061b      	lsls	r3, r3, #24
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	071b      	lsls	r3, r3, #28
 800401a:	4958      	ldr	r1, [pc, #352]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d004      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004040:	2b00      	cmp	r3, #0
 8004042:	d02e      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404c:	d129      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800404e:	4b4b      	ldr	r3, [pc, #300]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800405c:	4b47      	ldr	r3, [pc, #284]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800405e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004062:	0f1b      	lsrs	r3, r3, #28
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	019a      	lsls	r2, r3, #6
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	061b      	lsls	r3, r3, #24
 800407c:	431a      	orrs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	071b      	lsls	r3, r3, #28
 8004082:	493e      	ldr	r1, [pc, #248]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800408a:	4b3c      	ldr	r3, [pc, #240]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800408c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004090:	f023 021f 	bic.w	r2, r3, #31
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	3b01      	subs	r3, #1
 800409a:	4938      	ldr	r1, [pc, #224]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01d      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040ae:	4b33      	ldr	r3, [pc, #204]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b4:	0e1b      	lsrs	r3, r3, #24
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040bc:	4b2f      	ldr	r3, [pc, #188]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c2:	0f1b      	lsrs	r3, r3, #28
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	019a      	lsls	r2, r3, #6
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	431a      	orrs	r2, r3
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	061b      	lsls	r3, r3, #24
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	071b      	lsls	r3, r3, #28
 80040e2:	4926      	ldr	r1, [pc, #152]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d011      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	019a      	lsls	r2, r3, #6
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	071b      	lsls	r3, r3, #28
 8004112:	491a      	ldr	r1, [pc, #104]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800411a:	4b18      	ldr	r3, [pc, #96]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a17      	ldr	r2, [pc, #92]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004120:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004126:	f7fd fbed 	bl	8001904 <HAL_GetTick>
 800412a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800412e:	f7fd fbe9 	bl	8001904 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b64      	cmp	r3, #100	; 0x64
 800413a:	d901      	bls.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e0d8      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004140:	4b0e      	ldr	r3, [pc, #56]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b01      	cmp	r3, #1
 8004150:	f040 80ce 	bne.w	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004154:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a08      	ldr	r2, [pc, #32]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800415e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004160:	f7fd fbd0 	bl	8001904 <HAL_GetTick>
 8004164:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004166:	e00b      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004168:	f7fd fbcc 	bl	8001904 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d904      	bls.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e0bb      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004180:	4b5e      	ldr	r3, [pc, #376]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800418c:	d0ec      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d02e      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d12a      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041b6:	4b51      	ldr	r3, [pc, #324]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041c4:	4b4d      	ldr	r3, [pc, #308]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ca:	0f1b      	lsrs	r3, r3, #28
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	019a      	lsls	r2, r3, #6
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	041b      	lsls	r3, r3, #16
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	061b      	lsls	r3, r3, #24
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	071b      	lsls	r3, r3, #28
 80041ea:	4944      	ldr	r1, [pc, #272]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041f2:	4b42      	ldr	r3, [pc, #264]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	3b01      	subs	r3, #1
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	493d      	ldr	r1, [pc, #244]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d022      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800421c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004220:	d11d      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004222:	4b36      	ldr	r3, [pc, #216]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	0e1b      	lsrs	r3, r3, #24
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004230:	4b32      	ldr	r3, [pc, #200]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004236:	0f1b      	lsrs	r3, r3, #28
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	019a      	lsls	r2, r3, #6
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	061b      	lsls	r3, r3, #24
 8004250:	431a      	orrs	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	071b      	lsls	r3, r3, #28
 8004256:	4929      	ldr	r1, [pc, #164]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d028      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800426a:	4b24      	ldr	r3, [pc, #144]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	0e1b      	lsrs	r3, r3, #24
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004278:	4b20      	ldr	r3, [pc, #128]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427e:	0c1b      	lsrs	r3, r3, #16
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	019a      	lsls	r2, r3, #6
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	041b      	lsls	r3, r3, #16
 8004290:	431a      	orrs	r2, r3
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	061b      	lsls	r3, r3, #24
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	071b      	lsls	r3, r3, #28
 800429e:	4917      	ldr	r1, [pc, #92]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042a6:	4b15      	ldr	r3, [pc, #84]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	4911      	ldr	r1, [pc, #68]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0e      	ldr	r2, [pc, #56]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c8:	f7fd fb1c 	bl	8001904 <HAL_GetTick>
 80042cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042d0:	f7fd fb18 	bl	8001904 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	; 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e007      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ee:	d1ef      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40023800 	.word	0x40023800

08004300 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e071      	b.n	80043fa <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	7f5b      	ldrb	r3, [r3, #29]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d105      	bne.n	800432c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fd f8c0 	bl	80014ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b10      	cmp	r3, #16
 800433e:	d053      	beq.n	80043e8 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	22ca      	movs	r2, #202	; 0xca
 8004346:	625a      	str	r2, [r3, #36]	; 0x24
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2253      	movs	r2, #83	; 0x53
 800434e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f92f 	bl	80045b4 <RTC_EnterInitMode>
 8004356:	4603      	mov	r3, r0
 8004358:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d12a      	bne.n	80043b6 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6899      	ldr	r1, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b26      	ldr	r3, [pc, #152]	; (8004404 <HAL_RTC_Init+0x104>)
 800436c:	400b      	ands	r3, r1
 800436e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6899      	ldr	r1, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68d2      	ldr	r2, [r2, #12]
 8004396:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6919      	ldr	r1, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	041a      	lsls	r2, r3, #16
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f938 	bl	8004622 <RTC_ExitInitMode>
 80043b2:	4603      	mov	r3, r0
 80043b4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d110      	bne.n	80043de <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0208 	bic.w	r2, r2, #8
 80043ca:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	22ff      	movs	r2, #255	; 0xff
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24
 80043e6:	e001      	b.n	80043ec <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d102      	bne.n	80043f8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	ff8fffbf 	.word	0xff8fffbf

08004408 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4b22      	ldr	r3, [pc, #136]	; (80044c0 <HAL_RTC_GetTime+0xb8>)
 8004438:	4013      	ands	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	0c1b      	lsrs	r3, r3, #16
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004446:	b2da      	uxtb	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004456:	b2da      	uxtb	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	0d9b      	lsrs	r3, r3, #22
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d11a      	bne.n	80044b6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f000 f8f1 	bl	800466c <RTC_Bcd2ToByte>
 800448a:	4603      	mov	r3, r0
 800448c:	461a      	mov	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	785b      	ldrb	r3, [r3, #1]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f8e8 	bl	800466c <RTC_Bcd2ToByte>
 800449c:	4603      	mov	r3, r0
 800449e:	461a      	mov	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	789b      	ldrb	r3, [r3, #2]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f8df 	bl	800466c <RTC_Bcd2ToByte>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	007f7f7f 	.word	0x007f7f7f

080044c4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	4b21      	ldr	r3, [pc, #132]	; (8004560 <HAL_RTC_GetDate+0x9c>)
 80044dc:	4013      	ands	r3, r2
 80044de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	0c1b      	lsrs	r3, r3, #16
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	0a1b      	lsrs	r3, r3, #8
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004502:	b2da      	uxtb	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	0b5b      	lsrs	r3, r3, #13
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	b2da      	uxtb	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d11a      	bne.n	8004554 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	78db      	ldrb	r3, [r3, #3]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f8a2 	bl	800466c <RTC_Bcd2ToByte>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	785b      	ldrb	r3, [r3, #1]
 8004534:	4618      	mov	r0, r3
 8004536:	f000 f899 	bl	800466c <RTC_Bcd2ToByte>
 800453a:	4603      	mov	r3, r0
 800453c:	461a      	mov	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	789b      	ldrb	r3, [r3, #2]
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f890 	bl	800466c <RTC_Bcd2ToByte>
 800454c:	4603      	mov	r3, r0
 800454e:	461a      	mov	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	00ffff3f 	.word	0x00ffff3f

08004564 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800457e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004580:	f7fd f9c0 	bl	8001904 <HAL_GetTick>
 8004584:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004586:	e009      	b.n	800459c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004588:	f7fd f9bc 	bl	8001904 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004596:	d901      	bls.n	800459c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e007      	b.n	80045ac <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0ee      	beq.n	8004588 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d122      	bne.n	8004618 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045e2:	f7fd f98f 	bl	8001904 <HAL_GetTick>
 80045e6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045e8:	e00c      	b.n	8004604 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045ea:	f7fd f98b 	bl	8001904 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045f8:	d904      	bls.n	8004604 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2204      	movs	r2, #4
 80045fe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d102      	bne.n	8004618 <RTC_EnterInitMode+0x64>
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d1e8      	bne.n	80045ea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800463c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff89 	bl	8004564 <HAL_RTC_WaitForSynchro>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d004      	beq.n	8004662 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2204      	movs	r2, #4
 800465c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004662:	7bfb      	ldrb	r3, [r7, #15]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	b2db      	uxtb	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	b2da      	uxtb	r2, r3
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	b2db      	uxtb	r3, r3
 8004698:	4413      	add	r3, r2
 800469a:	b2db      	uxtb	r3, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e049      	b.n	800474e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fc ff1a 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4619      	mov	r1, r3
 80046e6:	4610      	mov	r0, r2
 80046e8:	f000 f9f6 	bl	8004ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b01      	cmp	r3, #1
 800476a:	d001      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e054      	b.n	800481a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a26      	ldr	r2, [pc, #152]	; (8004828 <HAL_TIM_Base_Start_IT+0xd0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d022      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479a:	d01d      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a22      	ldr	r2, [pc, #136]	; (800482c <HAL_TIM_Base_Start_IT+0xd4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d018      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a21      	ldr	r2, [pc, #132]	; (8004830 <HAL_TIM_Base_Start_IT+0xd8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d013      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1f      	ldr	r2, [pc, #124]	; (8004834 <HAL_TIM_Base_Start_IT+0xdc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1e      	ldr	r2, [pc, #120]	; (8004838 <HAL_TIM_Base_Start_IT+0xe0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1c      	ldr	r2, [pc, #112]	; (800483c <HAL_TIM_Base_Start_IT+0xe4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x80>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1b      	ldr	r2, [pc, #108]	; (8004840 <HAL_TIM_Base_Start_IT+0xe8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d115      	bne.n	8004804 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	4b19      	ldr	r3, [pc, #100]	; (8004844 <HAL_TIM_Base_Start_IT+0xec>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b06      	cmp	r3, #6
 80047e8:	d015      	beq.n	8004816 <HAL_TIM_Base_Start_IT+0xbe>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f0:	d011      	beq.n	8004816 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 0201 	orr.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004802:	e008      	b.n	8004816 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	e000      	b.n	8004818 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004816:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40010000 	.word	0x40010000
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00
 8004838:	40010400 	.word	0x40010400
 800483c:	40014000 	.word	0x40014000
 8004840:	40001800 	.word	0x40001800
 8004844:	00010007 	.word	0x00010007

08004848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b02      	cmp	r3, #2
 800485c:	d122      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b02      	cmp	r3, #2
 800486a:	d11b      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0202 	mvn.w	r2, #2
 8004874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f905 	bl	8004a9a <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f8f7 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f908 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d122      	bne.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d11b      	bne.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0204 	mvn.w	r2, #4
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f8db 	bl	8004a9a <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f8cd 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f8de 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b08      	cmp	r3, #8
 8004904:	d122      	bne.n	800494c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b08      	cmp	r3, #8
 8004912:	d11b      	bne.n	800494c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0208 	mvn.w	r2, #8
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2204      	movs	r2, #4
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f8b1 	bl	8004a9a <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8a3 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f8b4 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b10      	cmp	r3, #16
 8004958:	d122      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b10      	cmp	r3, #16
 8004966:	d11b      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0210 	mvn.w	r2, #16
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2208      	movs	r2, #8
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f887 	bl	8004a9a <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f879 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f88a 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10e      	bne.n	80049cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d107      	bne.n	80049cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0201 	mvn.w	r2, #1
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc fabe 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b80      	cmp	r3, #128	; 0x80
 80049d8:	d10e      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e4:	2b80      	cmp	r3, #128	; 0x80
 80049e6:	d107      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f9a8 	bl	8004d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a06:	d10e      	bne.n	8004a26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a12:	2b80      	cmp	r3, #128	; 0x80
 8004a14:	d107      	bne.n	8004a26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f99b 	bl	8004d5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	d10e      	bne.n	8004a52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d107      	bne.n	8004a52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f838 	bl	8004ac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d10e      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d107      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f06f 0220 	mvn.w	r2, #32
 8004a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f95b 	bl	8004d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
	...

08004ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a40      	ldr	r2, [pc, #256]	; (8004bec <TIM_Base_SetConfig+0x114>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af6:	d00f      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a3d      	ldr	r2, [pc, #244]	; (8004bf0 <TIM_Base_SetConfig+0x118>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00b      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a3c      	ldr	r2, [pc, #240]	; (8004bf4 <TIM_Base_SetConfig+0x11c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d007      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a3b      	ldr	r2, [pc, #236]	; (8004bf8 <TIM_Base_SetConfig+0x120>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a3a      	ldr	r2, [pc, #232]	; (8004bfc <TIM_Base_SetConfig+0x124>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d108      	bne.n	8004b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a2f      	ldr	r2, [pc, #188]	; (8004bec <TIM_Base_SetConfig+0x114>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d02b      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b38:	d027      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a2c      	ldr	r2, [pc, #176]	; (8004bf0 <TIM_Base_SetConfig+0x118>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d023      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a2b      	ldr	r2, [pc, #172]	; (8004bf4 <TIM_Base_SetConfig+0x11c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01f      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a2a      	ldr	r2, [pc, #168]	; (8004bf8 <TIM_Base_SetConfig+0x120>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01b      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a29      	ldr	r2, [pc, #164]	; (8004bfc <TIM_Base_SetConfig+0x124>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d017      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a28      	ldr	r2, [pc, #160]	; (8004c00 <TIM_Base_SetConfig+0x128>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d013      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <TIM_Base_SetConfig+0x12c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00f      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <TIM_Base_SetConfig+0x130>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a25      	ldr	r2, [pc, #148]	; (8004c0c <TIM_Base_SetConfig+0x134>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a24      	ldr	r2, [pc, #144]	; (8004c10 <TIM_Base_SetConfig+0x138>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a23      	ldr	r2, [pc, #140]	; (8004c14 <TIM_Base_SetConfig+0x13c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d108      	bne.n	8004b9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <TIM_Base_SetConfig+0x114>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_Base_SetConfig+0xf8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a0c      	ldr	r2, [pc, #48]	; (8004bfc <TIM_Base_SetConfig+0x124>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d103      	bne.n	8004bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	615a      	str	r2, [r3, #20]
}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40010400 	.word	0x40010400
 8004c00:	40014000 	.word	0x40014000
 8004c04:	40014400 	.word	0x40014400
 8004c08:	40014800 	.word	0x40014800
 8004c0c:	40001800 	.word	0x40001800
 8004c10:	40001c00 	.word	0x40001c00
 8004c14:	40002000 	.word	0x40002000

08004c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e06d      	b.n	8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a30      	ldr	r2, [pc, #192]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2f      	ldr	r2, [pc, #188]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d108      	bne.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a20      	ldr	r2, [pc, #128]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d022      	beq.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca2:	d01d      	beq.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1d      	ldr	r2, [pc, #116]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d018      	beq.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1c      	ldr	r2, [pc, #112]	; (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1a      	ldr	r2, [pc, #104]	; (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00e      	beq.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d009      	beq.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a16      	ldr	r2, [pc, #88]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d004      	beq.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a15      	ldr	r2, [pc, #84]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d10c      	bne.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40010400 	.word	0x40010400
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40000c00 	.word	0x40000c00
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40001800 	.word	0x40001800

08004d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e040      	b.n	8004e04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fc fbde 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2224      	movs	r2, #36	; 0x24
 8004d9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0201 	bic.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f974 	bl	800509c <UART_SetConfig>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e022      	b.n	8004e04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fbcc 	bl	8005564 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fc53 	bl	80056a8 <UART_CheckIdleState>
 8004e02:	4603      	mov	r3, r0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	; 0x28
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d171      	bne.n	8004f08 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <HAL_UART_Transmit+0x24>
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e06a      	b.n	8004f0a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2221      	movs	r2, #33	; 0x21
 8004e40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e42:	f7fc fd5f 	bl	8001904 <HAL_GetTick>
 8004e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	88fa      	ldrh	r2, [r7, #6]
 8004e4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e60:	d108      	bne.n	8004e74 <HAL_UART_Transmit+0x68>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d104      	bne.n	8004e74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	e003      	b.n	8004e7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e7c:	e02c      	b.n	8004ed8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2200      	movs	r2, #0
 8004e86:	2180      	movs	r1, #128	; 0x80
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 fc5a 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e038      	b.n	8004f0a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10b      	bne.n	8004eb6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	e007      	b.n	8004ec6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	781a      	ldrb	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1cc      	bne.n	8004e7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2200      	movs	r2, #0
 8004eec:	2140      	movs	r1, #64	; 0x40
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fc27 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e005      	b.n	8004f0a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	e000      	b.n	8004f0a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
  }
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3720      	adds	r7, #32
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b08a      	sub	sp, #40	; 0x28
 8004f16:	af02      	add	r7, sp, #8
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	603b      	str	r3, [r7, #0]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	f040 80b1 	bne.w	8005090 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_UART_Receive+0x28>
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e0a9      	b.n	8005092 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2222      	movs	r2, #34	; 0x22
 8004f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f54:	f7fc fcd6 	bl	8001904 <HAL_GetTick>
 8004f58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	88fa      	ldrh	r2, [r7, #6]
 8004f5e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	88fa      	ldrh	r2, [r7, #6]
 8004f66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f72:	d10e      	bne.n	8004f92 <HAL_UART_Receive+0x80>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d105      	bne.n	8004f88 <HAL_UART_Receive+0x76>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004f82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f86:	e02d      	b.n	8004fe4 <HAL_UART_Receive+0xd2>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	22ff      	movs	r2, #255	; 0xff
 8004f8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f90:	e028      	b.n	8004fe4 <HAL_UART_Receive+0xd2>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10d      	bne.n	8004fb6 <HAL_UART_Receive+0xa4>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d104      	bne.n	8004fac <HAL_UART_Receive+0x9a>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	22ff      	movs	r2, #255	; 0xff
 8004fa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004faa:	e01b      	b.n	8004fe4 <HAL_UART_Receive+0xd2>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	227f      	movs	r2, #127	; 0x7f
 8004fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fb4:	e016      	b.n	8004fe4 <HAL_UART_Receive+0xd2>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fbe:	d10d      	bne.n	8004fdc <HAL_UART_Receive+0xca>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <HAL_UART_Receive+0xc0>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	227f      	movs	r2, #127	; 0x7f
 8004fcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fd0:	e008      	b.n	8004fe4 <HAL_UART_Receive+0xd2>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	223f      	movs	r2, #63	; 0x3f
 8004fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fda:	e003      	b.n	8004fe4 <HAL_UART_Receive+0xd2>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff4:	d108      	bne.n	8005008 <HAL_UART_Receive+0xf6>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d104      	bne.n	8005008 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	e003      	b.n	8005010 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800500c:	2300      	movs	r3, #0
 800500e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005010:	e032      	b.n	8005078 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2200      	movs	r2, #0
 800501a:	2120      	movs	r1, #32
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 fb90 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e032      	b.n	8005092 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10c      	bne.n	800504c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	b29a      	uxth	r2, r3
 800503a:	8a7b      	ldrh	r3, [r7, #18]
 800503c:	4013      	ands	r3, r2
 800503e:	b29a      	uxth	r2, r3
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	3302      	adds	r3, #2
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	e00c      	b.n	8005066 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	b2da      	uxtb	r2, r3
 8005054:	8a7b      	ldrh	r3, [r7, #18]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	4013      	ands	r3, r2
 800505a:	b2da      	uxtb	r2, r3
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	3301      	adds	r3, #1
 8005064:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1c6      	bne.n	8005012 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2220      	movs	r2, #32
 8005088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	e000      	b.n	8005092 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
  }
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4ba6      	ldr	r3, [pc, #664]	; (8005360 <UART_SetConfig+0x2c4>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	6979      	ldr	r1, [r7, #20]
 80050d0:	430b      	orrs	r3, r1
 80050d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	430a      	orrs	r2, r1
 800510c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a94      	ldr	r2, [pc, #592]	; (8005364 <UART_SetConfig+0x2c8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d120      	bne.n	800515a <UART_SetConfig+0xbe>
 8005118:	4b93      	ldr	r3, [pc, #588]	; (8005368 <UART_SetConfig+0x2cc>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b03      	cmp	r3, #3
 8005124:	d816      	bhi.n	8005154 <UART_SetConfig+0xb8>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <UART_SetConfig+0x90>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	0800513d 	.word	0x0800513d
 8005130:	08005149 	.word	0x08005149
 8005134:	08005143 	.word	0x08005143
 8005138:	0800514f 	.word	0x0800514f
 800513c:	2301      	movs	r3, #1
 800513e:	77fb      	strb	r3, [r7, #31]
 8005140:	e150      	b.n	80053e4 <UART_SetConfig+0x348>
 8005142:	2302      	movs	r3, #2
 8005144:	77fb      	strb	r3, [r7, #31]
 8005146:	e14d      	b.n	80053e4 <UART_SetConfig+0x348>
 8005148:	2304      	movs	r3, #4
 800514a:	77fb      	strb	r3, [r7, #31]
 800514c:	e14a      	b.n	80053e4 <UART_SetConfig+0x348>
 800514e:	2308      	movs	r3, #8
 8005150:	77fb      	strb	r3, [r7, #31]
 8005152:	e147      	b.n	80053e4 <UART_SetConfig+0x348>
 8005154:	2310      	movs	r3, #16
 8005156:	77fb      	strb	r3, [r7, #31]
 8005158:	e144      	b.n	80053e4 <UART_SetConfig+0x348>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a83      	ldr	r2, [pc, #524]	; (800536c <UART_SetConfig+0x2d0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d132      	bne.n	80051ca <UART_SetConfig+0x12e>
 8005164:	4b80      	ldr	r3, [pc, #512]	; (8005368 <UART_SetConfig+0x2cc>)
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	2b0c      	cmp	r3, #12
 8005170:	d828      	bhi.n	80051c4 <UART_SetConfig+0x128>
 8005172:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <UART_SetConfig+0xdc>)
 8005174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005178:	080051ad 	.word	0x080051ad
 800517c:	080051c5 	.word	0x080051c5
 8005180:	080051c5 	.word	0x080051c5
 8005184:	080051c5 	.word	0x080051c5
 8005188:	080051b9 	.word	0x080051b9
 800518c:	080051c5 	.word	0x080051c5
 8005190:	080051c5 	.word	0x080051c5
 8005194:	080051c5 	.word	0x080051c5
 8005198:	080051b3 	.word	0x080051b3
 800519c:	080051c5 	.word	0x080051c5
 80051a0:	080051c5 	.word	0x080051c5
 80051a4:	080051c5 	.word	0x080051c5
 80051a8:	080051bf 	.word	0x080051bf
 80051ac:	2300      	movs	r3, #0
 80051ae:	77fb      	strb	r3, [r7, #31]
 80051b0:	e118      	b.n	80053e4 <UART_SetConfig+0x348>
 80051b2:	2302      	movs	r3, #2
 80051b4:	77fb      	strb	r3, [r7, #31]
 80051b6:	e115      	b.n	80053e4 <UART_SetConfig+0x348>
 80051b8:	2304      	movs	r3, #4
 80051ba:	77fb      	strb	r3, [r7, #31]
 80051bc:	e112      	b.n	80053e4 <UART_SetConfig+0x348>
 80051be:	2308      	movs	r3, #8
 80051c0:	77fb      	strb	r3, [r7, #31]
 80051c2:	e10f      	b.n	80053e4 <UART_SetConfig+0x348>
 80051c4:	2310      	movs	r3, #16
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e10c      	b.n	80053e4 <UART_SetConfig+0x348>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a68      	ldr	r2, [pc, #416]	; (8005370 <UART_SetConfig+0x2d4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d120      	bne.n	8005216 <UART_SetConfig+0x17a>
 80051d4:	4b64      	ldr	r3, [pc, #400]	; (8005368 <UART_SetConfig+0x2cc>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051de:	2b30      	cmp	r3, #48	; 0x30
 80051e0:	d013      	beq.n	800520a <UART_SetConfig+0x16e>
 80051e2:	2b30      	cmp	r3, #48	; 0x30
 80051e4:	d814      	bhi.n	8005210 <UART_SetConfig+0x174>
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d009      	beq.n	80051fe <UART_SetConfig+0x162>
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d810      	bhi.n	8005210 <UART_SetConfig+0x174>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <UART_SetConfig+0x15c>
 80051f2:	2b10      	cmp	r3, #16
 80051f4:	d006      	beq.n	8005204 <UART_SetConfig+0x168>
 80051f6:	e00b      	b.n	8005210 <UART_SetConfig+0x174>
 80051f8:	2300      	movs	r3, #0
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e0f2      	b.n	80053e4 <UART_SetConfig+0x348>
 80051fe:	2302      	movs	r3, #2
 8005200:	77fb      	strb	r3, [r7, #31]
 8005202:	e0ef      	b.n	80053e4 <UART_SetConfig+0x348>
 8005204:	2304      	movs	r3, #4
 8005206:	77fb      	strb	r3, [r7, #31]
 8005208:	e0ec      	b.n	80053e4 <UART_SetConfig+0x348>
 800520a:	2308      	movs	r3, #8
 800520c:	77fb      	strb	r3, [r7, #31]
 800520e:	e0e9      	b.n	80053e4 <UART_SetConfig+0x348>
 8005210:	2310      	movs	r3, #16
 8005212:	77fb      	strb	r3, [r7, #31]
 8005214:	e0e6      	b.n	80053e4 <UART_SetConfig+0x348>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a56      	ldr	r2, [pc, #344]	; (8005374 <UART_SetConfig+0x2d8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d120      	bne.n	8005262 <UART_SetConfig+0x1c6>
 8005220:	4b51      	ldr	r3, [pc, #324]	; (8005368 <UART_SetConfig+0x2cc>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005226:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800522a:	2bc0      	cmp	r3, #192	; 0xc0
 800522c:	d013      	beq.n	8005256 <UART_SetConfig+0x1ba>
 800522e:	2bc0      	cmp	r3, #192	; 0xc0
 8005230:	d814      	bhi.n	800525c <UART_SetConfig+0x1c0>
 8005232:	2b80      	cmp	r3, #128	; 0x80
 8005234:	d009      	beq.n	800524a <UART_SetConfig+0x1ae>
 8005236:	2b80      	cmp	r3, #128	; 0x80
 8005238:	d810      	bhi.n	800525c <UART_SetConfig+0x1c0>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <UART_SetConfig+0x1a8>
 800523e:	2b40      	cmp	r3, #64	; 0x40
 8005240:	d006      	beq.n	8005250 <UART_SetConfig+0x1b4>
 8005242:	e00b      	b.n	800525c <UART_SetConfig+0x1c0>
 8005244:	2300      	movs	r3, #0
 8005246:	77fb      	strb	r3, [r7, #31]
 8005248:	e0cc      	b.n	80053e4 <UART_SetConfig+0x348>
 800524a:	2302      	movs	r3, #2
 800524c:	77fb      	strb	r3, [r7, #31]
 800524e:	e0c9      	b.n	80053e4 <UART_SetConfig+0x348>
 8005250:	2304      	movs	r3, #4
 8005252:	77fb      	strb	r3, [r7, #31]
 8005254:	e0c6      	b.n	80053e4 <UART_SetConfig+0x348>
 8005256:	2308      	movs	r3, #8
 8005258:	77fb      	strb	r3, [r7, #31]
 800525a:	e0c3      	b.n	80053e4 <UART_SetConfig+0x348>
 800525c:	2310      	movs	r3, #16
 800525e:	77fb      	strb	r3, [r7, #31]
 8005260:	e0c0      	b.n	80053e4 <UART_SetConfig+0x348>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a44      	ldr	r2, [pc, #272]	; (8005378 <UART_SetConfig+0x2dc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d125      	bne.n	80052b8 <UART_SetConfig+0x21c>
 800526c:	4b3e      	ldr	r3, [pc, #248]	; (8005368 <UART_SetConfig+0x2cc>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527a:	d017      	beq.n	80052ac <UART_SetConfig+0x210>
 800527c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005280:	d817      	bhi.n	80052b2 <UART_SetConfig+0x216>
 8005282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005286:	d00b      	beq.n	80052a0 <UART_SetConfig+0x204>
 8005288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800528c:	d811      	bhi.n	80052b2 <UART_SetConfig+0x216>
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <UART_SetConfig+0x1fe>
 8005292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005296:	d006      	beq.n	80052a6 <UART_SetConfig+0x20a>
 8005298:	e00b      	b.n	80052b2 <UART_SetConfig+0x216>
 800529a:	2300      	movs	r3, #0
 800529c:	77fb      	strb	r3, [r7, #31]
 800529e:	e0a1      	b.n	80053e4 <UART_SetConfig+0x348>
 80052a0:	2302      	movs	r3, #2
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e09e      	b.n	80053e4 <UART_SetConfig+0x348>
 80052a6:	2304      	movs	r3, #4
 80052a8:	77fb      	strb	r3, [r7, #31]
 80052aa:	e09b      	b.n	80053e4 <UART_SetConfig+0x348>
 80052ac:	2308      	movs	r3, #8
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e098      	b.n	80053e4 <UART_SetConfig+0x348>
 80052b2:	2310      	movs	r3, #16
 80052b4:	77fb      	strb	r3, [r7, #31]
 80052b6:	e095      	b.n	80053e4 <UART_SetConfig+0x348>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a2f      	ldr	r2, [pc, #188]	; (800537c <UART_SetConfig+0x2e0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d125      	bne.n	800530e <UART_SetConfig+0x272>
 80052c2:	4b29      	ldr	r3, [pc, #164]	; (8005368 <UART_SetConfig+0x2cc>)
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052d0:	d017      	beq.n	8005302 <UART_SetConfig+0x266>
 80052d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052d6:	d817      	bhi.n	8005308 <UART_SetConfig+0x26c>
 80052d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052dc:	d00b      	beq.n	80052f6 <UART_SetConfig+0x25a>
 80052de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e2:	d811      	bhi.n	8005308 <UART_SetConfig+0x26c>
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <UART_SetConfig+0x254>
 80052e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ec:	d006      	beq.n	80052fc <UART_SetConfig+0x260>
 80052ee:	e00b      	b.n	8005308 <UART_SetConfig+0x26c>
 80052f0:	2301      	movs	r3, #1
 80052f2:	77fb      	strb	r3, [r7, #31]
 80052f4:	e076      	b.n	80053e4 <UART_SetConfig+0x348>
 80052f6:	2302      	movs	r3, #2
 80052f8:	77fb      	strb	r3, [r7, #31]
 80052fa:	e073      	b.n	80053e4 <UART_SetConfig+0x348>
 80052fc:	2304      	movs	r3, #4
 80052fe:	77fb      	strb	r3, [r7, #31]
 8005300:	e070      	b.n	80053e4 <UART_SetConfig+0x348>
 8005302:	2308      	movs	r3, #8
 8005304:	77fb      	strb	r3, [r7, #31]
 8005306:	e06d      	b.n	80053e4 <UART_SetConfig+0x348>
 8005308:	2310      	movs	r3, #16
 800530a:	77fb      	strb	r3, [r7, #31]
 800530c:	e06a      	b.n	80053e4 <UART_SetConfig+0x348>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1b      	ldr	r2, [pc, #108]	; (8005380 <UART_SetConfig+0x2e4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d138      	bne.n	800538a <UART_SetConfig+0x2ee>
 8005318:	4b13      	ldr	r3, [pc, #76]	; (8005368 <UART_SetConfig+0x2cc>)
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005322:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005326:	d017      	beq.n	8005358 <UART_SetConfig+0x2bc>
 8005328:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800532c:	d82a      	bhi.n	8005384 <UART_SetConfig+0x2e8>
 800532e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005332:	d00b      	beq.n	800534c <UART_SetConfig+0x2b0>
 8005334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005338:	d824      	bhi.n	8005384 <UART_SetConfig+0x2e8>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <UART_SetConfig+0x2aa>
 800533e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005342:	d006      	beq.n	8005352 <UART_SetConfig+0x2b6>
 8005344:	e01e      	b.n	8005384 <UART_SetConfig+0x2e8>
 8005346:	2300      	movs	r3, #0
 8005348:	77fb      	strb	r3, [r7, #31]
 800534a:	e04b      	b.n	80053e4 <UART_SetConfig+0x348>
 800534c:	2302      	movs	r3, #2
 800534e:	77fb      	strb	r3, [r7, #31]
 8005350:	e048      	b.n	80053e4 <UART_SetConfig+0x348>
 8005352:	2304      	movs	r3, #4
 8005354:	77fb      	strb	r3, [r7, #31]
 8005356:	e045      	b.n	80053e4 <UART_SetConfig+0x348>
 8005358:	2308      	movs	r3, #8
 800535a:	77fb      	strb	r3, [r7, #31]
 800535c:	e042      	b.n	80053e4 <UART_SetConfig+0x348>
 800535e:	bf00      	nop
 8005360:	efff69f3 	.word	0xefff69f3
 8005364:	40011000 	.word	0x40011000
 8005368:	40023800 	.word	0x40023800
 800536c:	40004400 	.word	0x40004400
 8005370:	40004800 	.word	0x40004800
 8005374:	40004c00 	.word	0x40004c00
 8005378:	40005000 	.word	0x40005000
 800537c:	40011400 	.word	0x40011400
 8005380:	40007800 	.word	0x40007800
 8005384:	2310      	movs	r3, #16
 8005386:	77fb      	strb	r3, [r7, #31]
 8005388:	e02c      	b.n	80053e4 <UART_SetConfig+0x348>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a72      	ldr	r2, [pc, #456]	; (8005558 <UART_SetConfig+0x4bc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d125      	bne.n	80053e0 <UART_SetConfig+0x344>
 8005394:	4b71      	ldr	r3, [pc, #452]	; (800555c <UART_SetConfig+0x4c0>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800539e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053a2:	d017      	beq.n	80053d4 <UART_SetConfig+0x338>
 80053a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053a8:	d817      	bhi.n	80053da <UART_SetConfig+0x33e>
 80053aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ae:	d00b      	beq.n	80053c8 <UART_SetConfig+0x32c>
 80053b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b4:	d811      	bhi.n	80053da <UART_SetConfig+0x33e>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <UART_SetConfig+0x326>
 80053ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053be:	d006      	beq.n	80053ce <UART_SetConfig+0x332>
 80053c0:	e00b      	b.n	80053da <UART_SetConfig+0x33e>
 80053c2:	2300      	movs	r3, #0
 80053c4:	77fb      	strb	r3, [r7, #31]
 80053c6:	e00d      	b.n	80053e4 <UART_SetConfig+0x348>
 80053c8:	2302      	movs	r3, #2
 80053ca:	77fb      	strb	r3, [r7, #31]
 80053cc:	e00a      	b.n	80053e4 <UART_SetConfig+0x348>
 80053ce:	2304      	movs	r3, #4
 80053d0:	77fb      	strb	r3, [r7, #31]
 80053d2:	e007      	b.n	80053e4 <UART_SetConfig+0x348>
 80053d4:	2308      	movs	r3, #8
 80053d6:	77fb      	strb	r3, [r7, #31]
 80053d8:	e004      	b.n	80053e4 <UART_SetConfig+0x348>
 80053da:	2310      	movs	r3, #16
 80053dc:	77fb      	strb	r3, [r7, #31]
 80053de:	e001      	b.n	80053e4 <UART_SetConfig+0x348>
 80053e0:	2310      	movs	r3, #16
 80053e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ec:	d15b      	bne.n	80054a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80053ee:	7ffb      	ldrb	r3, [r7, #31]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d828      	bhi.n	8005446 <UART_SetConfig+0x3aa>
 80053f4:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <UART_SetConfig+0x360>)
 80053f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fa:	bf00      	nop
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005429 	.word	0x08005429
 8005404:	08005431 	.word	0x08005431
 8005408:	08005447 	.word	0x08005447
 800540c:	08005437 	.word	0x08005437
 8005410:	08005447 	.word	0x08005447
 8005414:	08005447 	.word	0x08005447
 8005418:	08005447 	.word	0x08005447
 800541c:	0800543f 	.word	0x0800543f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005420:	f7fe fb1e 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 8005424:	61b8      	str	r0, [r7, #24]
        break;
 8005426:	e013      	b.n	8005450 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005428:	f7fe fb2e 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 800542c:	61b8      	str	r0, [r7, #24]
        break;
 800542e:	e00f      	b.n	8005450 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005430:	4b4b      	ldr	r3, [pc, #300]	; (8005560 <UART_SetConfig+0x4c4>)
 8005432:	61bb      	str	r3, [r7, #24]
        break;
 8005434:	e00c      	b.n	8005450 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005436:	f7fe fa01 	bl	800383c <HAL_RCC_GetSysClockFreq>
 800543a:	61b8      	str	r0, [r7, #24]
        break;
 800543c:	e008      	b.n	8005450 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005442:	61bb      	str	r3, [r7, #24]
        break;
 8005444:	e004      	b.n	8005450 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	77bb      	strb	r3, [r7, #30]
        break;
 800544e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d074      	beq.n	8005540 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	005a      	lsls	r2, r3, #1
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	441a      	add	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	fbb2 f3f3 	udiv	r3, r2, r3
 800546a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	2b0f      	cmp	r3, #15
 8005470:	d916      	bls.n	80054a0 <UART_SetConfig+0x404>
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005478:	d212      	bcs.n	80054a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	b29b      	uxth	r3, r3
 800547e:	f023 030f 	bic.w	r3, r3, #15
 8005482:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	b29b      	uxth	r3, r3
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	b29a      	uxth	r2, r3
 8005490:	89fb      	ldrh	r3, [r7, #14]
 8005492:	4313      	orrs	r3, r2
 8005494:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	89fa      	ldrh	r2, [r7, #14]
 800549c:	60da      	str	r2, [r3, #12]
 800549e:	e04f      	b.n	8005540 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	77bb      	strb	r3, [r7, #30]
 80054a4:	e04c      	b.n	8005540 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054a6:	7ffb      	ldrb	r3, [r7, #31]
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d828      	bhi.n	80054fe <UART_SetConfig+0x462>
 80054ac:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <UART_SetConfig+0x418>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054d9 	.word	0x080054d9
 80054b8:	080054e1 	.word	0x080054e1
 80054bc:	080054e9 	.word	0x080054e9
 80054c0:	080054ff 	.word	0x080054ff
 80054c4:	080054ef 	.word	0x080054ef
 80054c8:	080054ff 	.word	0x080054ff
 80054cc:	080054ff 	.word	0x080054ff
 80054d0:	080054ff 	.word	0x080054ff
 80054d4:	080054f7 	.word	0x080054f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d8:	f7fe fac2 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 80054dc:	61b8      	str	r0, [r7, #24]
        break;
 80054de:	e013      	b.n	8005508 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054e0:	f7fe fad2 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 80054e4:	61b8      	str	r0, [r7, #24]
        break;
 80054e6:	e00f      	b.n	8005508 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e8:	4b1d      	ldr	r3, [pc, #116]	; (8005560 <UART_SetConfig+0x4c4>)
 80054ea:	61bb      	str	r3, [r7, #24]
        break;
 80054ec:	e00c      	b.n	8005508 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ee:	f7fe f9a5 	bl	800383c <HAL_RCC_GetSysClockFreq>
 80054f2:	61b8      	str	r0, [r7, #24]
        break;
 80054f4:	e008      	b.n	8005508 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054fa:	61bb      	str	r3, [r7, #24]
        break;
 80054fc:	e004      	b.n	8005508 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	77bb      	strb	r3, [r7, #30]
        break;
 8005506:	bf00      	nop
    }

    if (pclk != 0U)
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d018      	beq.n	8005540 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	085a      	lsrs	r2, r3, #1
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	441a      	add	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b0f      	cmp	r3, #15
 8005526:	d909      	bls.n	800553c <UART_SetConfig+0x4a0>
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552e:	d205      	bcs.n	800553c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	b29a      	uxth	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60da      	str	r2, [r3, #12]
 800553a:	e001      	b.n	8005540 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800554c:	7fbb      	ldrb	r3, [r7, #30]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3720      	adds	r7, #32
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40007c00 	.word	0x40007c00
 800555c:	40023800 	.word	0x40023800
 8005560:	00f42400 	.word	0x00f42400

08005564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01a      	beq.n	800567a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005662:	d10a      	bne.n	800567a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	605a      	str	r2, [r3, #4]
  }
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056b8:	f7fc f924 	bl	8001904 <HAL_GetTick>
 80056bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d10e      	bne.n	80056ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f831 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e027      	b.n	800573a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d10e      	bne.n	8005716 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f81b 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e011      	b.n	800573a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b09c      	sub	sp, #112	; 0x70
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	603b      	str	r3, [r7, #0]
 800574e:	4613      	mov	r3, r2
 8005750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005752:	e0a7      	b.n	80058a4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	f000 80a3 	beq.w	80058a4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575e:	f7fc f8d1 	bl	8001904 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800576a:	429a      	cmp	r2, r3
 800576c:	d302      	bcc.n	8005774 <UART_WaitOnFlagUntilTimeout+0x32>
 800576e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005770:	2b00      	cmp	r3, #0
 8005772:	d13f      	bne.n	80057f4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005784:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005788:	667b      	str	r3, [r7, #100]	; 0x64
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005794:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005798:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e6      	bne.n	8005774 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	663b      	str	r3, [r7, #96]	; 0x60
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3308      	adds	r3, #8
 80057c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80057c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057ce:	e841 2300 	strex	r3, r2, [r1]
 80057d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1e5      	bne.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e068      	b.n	80058c6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d050      	beq.n	80058a4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800580c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005810:	d148      	bne.n	80058a4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800581a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005830:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583a:	637b      	str	r3, [r7, #52]	; 0x34
 800583c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e6      	bne.n	800581c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3308      	adds	r3, #8
 8005854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	613b      	str	r3, [r7, #16]
   return(result);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	66bb      	str	r3, [r7, #104]	; 0x68
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3308      	adds	r3, #8
 800586c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800586e:	623a      	str	r2, [r7, #32]
 8005870:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	69f9      	ldr	r1, [r7, #28]
 8005874:	6a3a      	ldr	r2, [r7, #32]
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	61bb      	str	r3, [r7, #24]
   return(result);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e5      	bne.n	800584e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2220      	movs	r2, #32
 8005886:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e010      	b.n	80058c6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69da      	ldr	r2, [r3, #28]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	4013      	ands	r3, r2
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	bf0c      	ite	eq
 80058b4:	2301      	moveq	r3, #1
 80058b6:	2300      	movne	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	429a      	cmp	r2, r3
 80058c0:	f43f af48 	beq.w	8005754 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3770      	adds	r7, #112	; 0x70
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058d0:	b084      	sub	sp, #16
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	f107 001c 	add.w	r0, r7, #28
 80058de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d120      	bne.n	800592a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	4b20      	ldr	r3, [pc, #128]	; (800597c <USB_CoreInit+0xac>)
 80058fa:	4013      	ands	r3, r2
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800590c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590e:	2b01      	cmp	r3, #1
 8005910:	d105      	bne.n	800591e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fa96 	bl	8005e50 <USB_CoreReset>
 8005924:	4603      	mov	r3, r0
 8005926:	73fb      	strb	r3, [r7, #15]
 8005928:	e010      	b.n	800594c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fa8a 	bl	8005e50 <USB_CoreReset>
 800593c:	4603      	mov	r3, r0
 800593e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	2b01      	cmp	r3, #1
 8005950:	d10b      	bne.n	800596a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f043 0206 	orr.w	r2, r3, #6
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f043 0220 	orr.w	r2, r3, #32
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800596a:	7bfb      	ldrb	r3, [r7, #15]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005976:	b004      	add	sp, #16
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	ffbdffbf 	.word	0xffbdffbf

08005980 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f023 0201 	bic.w	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	460b      	mov	r3, r1
 80059ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d115      	bne.n	80059f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059d0:	2001      	movs	r0, #1
 80059d2:	f7fb ffa3 	bl	800191c <HAL_Delay>
      ms++;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3301      	adds	r3, #1
 80059da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fa29 	bl	8005e34 <USB_GetMode>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d01e      	beq.n	8005a26 <USB_SetCurrentMode+0x84>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b31      	cmp	r3, #49	; 0x31
 80059ec:	d9f0      	bls.n	80059d0 <USB_SetCurrentMode+0x2e>
 80059ee:	e01a      	b.n	8005a26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d115      	bne.n	8005a22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a02:	2001      	movs	r0, #1
 8005a04:	f7fb ff8a 	bl	800191c <HAL_Delay>
      ms++;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fa10 	bl	8005e34 <USB_GetMode>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <USB_SetCurrentMode+0x84>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b31      	cmp	r3, #49	; 0x31
 8005a1e:	d9f0      	bls.n	8005a02 <USB_SetCurrentMode+0x60>
 8005a20:	e001      	b.n	8005a26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e005      	b.n	8005a32 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b32      	cmp	r3, #50	; 0x32
 8005a2a:	d101      	bne.n	8005a30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e000      	b.n	8005a32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b086      	sub	sp, #24
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a56:	2300      	movs	r3, #0
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	e009      	b.n	8005a70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	3340      	adds	r3, #64	; 0x40
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	2200      	movs	r2, #0
 8005a68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b0e      	cmp	r3, #14
 8005a74:	d9f2      	bls.n	8005a5c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11c      	bne.n	8005ab6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a8a:	f043 0302 	orr.w	r3, r3, #2
 8005a8e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e005      	b.n	8005ac2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2300      	movs	r3, #0
 8005acc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005adc:	461a      	mov	r2, r3
 8005ade:	680b      	ldr	r3, [r1, #0]
 8005ae0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d10c      	bne.n	8005b02 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005aee:	2100      	movs	r1, #0
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f965 	bl	8005dc0 <USB_SetDevSpeed>
 8005af6:	e008      	b.n	8005b0a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005af8:	2101      	movs	r1, #1
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f960 	bl	8005dc0 <USB_SetDevSpeed>
 8005b00:	e003      	b.n	8005b0a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b02:	2103      	movs	r1, #3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f95b 	bl	8005dc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b0a:	2110      	movs	r1, #16
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f8f3 	bl	8005cf8 <USB_FlushTxFifo>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f91f 	bl	8005d60 <USB_FlushRxFifo>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b32:	461a      	mov	r2, r3
 8005b34:	2300      	movs	r3, #0
 8005b36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3e:	461a      	mov	r2, r3
 8005b40:	2300      	movs	r3, #0
 8005b42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	e043      	b.n	8005bde <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b6c:	d118      	bne.n	8005ba0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	461a      	mov	r2, r3
 8005b82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	e013      	b.n	8005bb2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b96:	461a      	mov	r2, r3
 8005b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e008      	b.n	8005bb2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	461a      	mov	r2, r3
 8005bae:	2300      	movs	r3, #0
 8005bb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d3b7      	bcc.n	8005b56 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	e043      	b.n	8005c74 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c02:	d118      	bne.n	8005c36 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c16:	461a      	mov	r2, r3
 8005c18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e013      	b.n	8005c48 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e008      	b.n	8005c48 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c42:	461a      	mov	r2, r3
 8005c44:	2300      	movs	r3, #0
 8005c46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c54:	461a      	mov	r2, r3
 8005c56:	2300      	movs	r3, #0
 8005c58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c66:	461a      	mov	r2, r3
 8005c68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	3301      	adds	r3, #1
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d3b7      	bcc.n	8005bec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d105      	bne.n	8005cb0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f043 0210 	orr.w	r2, r3, #16
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	4b0e      	ldr	r3, [pc, #56]	; (8005cf0 <USB_DevInit+0x2b4>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d005      	beq.n	8005cce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f043 0208 	orr.w	r2, r3, #8
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d105      	bne.n	8005ce0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699a      	ldr	r2, [r3, #24]
 8005cd8:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <USB_DevInit+0x2b8>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cec:	b004      	add	sp, #16
 8005cee:	4770      	bx	lr
 8005cf0:	803c3800 	.word	0x803c3800
 8005cf4:	40000004 	.word	0x40000004

08005cf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4a13      	ldr	r2, [pc, #76]	; (8005d5c <USB_FlushTxFifo+0x64>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d901      	bls.n	8005d18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e01b      	b.n	8005d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	daf2      	bge.n	8005d06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	019b      	lsls	r3, r3, #6
 8005d28:	f043 0220 	orr.w	r2, r3, #32
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3301      	adds	r3, #1
 8005d34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4a08      	ldr	r2, [pc, #32]	; (8005d5c <USB_FlushTxFifo+0x64>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e006      	b.n	8005d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d0f0      	beq.n	8005d30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	00030d40 	.word	0x00030d40

08005d60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <USB_FlushRxFifo+0x5c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d901      	bls.n	8005d7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e018      	b.n	8005db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	daf2      	bge.n	8005d6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2210      	movs	r2, #16
 8005d8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3301      	adds	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4a08      	ldr	r2, [pc, #32]	; (8005dbc <USB_FlushRxFifo+0x5c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d901      	bls.n	8005da2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e006      	b.n	8005db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0310 	and.w	r3, r3, #16
 8005daa:	2b10      	cmp	r3, #16
 8005dac:	d0f0      	beq.n	8005d90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	00030d40 	.word	0x00030d40

08005dc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005de0:	4313      	orrs	r3, r2
 8005de2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e0c:	f023 0303 	bic.w	r3, r3, #3
 8005e10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e20:	f043 0302 	orr.w	r3, r3, #2
 8005e24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	f003 0301 	and.w	r3, r3, #1
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a13      	ldr	r2, [pc, #76]	; (8005eb4 <USB_CoreReset+0x64>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d901      	bls.n	8005e6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e01b      	b.n	8005ea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	daf2      	bge.n	8005e5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f043 0201 	orr.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4a09      	ldr	r2, [pc, #36]	; (8005eb4 <USB_CoreReset+0x64>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d901      	bls.n	8005e98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e006      	b.n	8005ea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d0f0      	beq.n	8005e86 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	00030d40 	.word	0x00030d40

08005eb8 <_calloc_r>:
 8005eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eba:	fba1 2402 	umull	r2, r4, r1, r2
 8005ebe:	b94c      	cbnz	r4, 8005ed4 <_calloc_r+0x1c>
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	9201      	str	r2, [sp, #4]
 8005ec4:	f000 f836 	bl	8005f34 <_malloc_r>
 8005ec8:	9a01      	ldr	r2, [sp, #4]
 8005eca:	4605      	mov	r5, r0
 8005ecc:	b930      	cbnz	r0, 8005edc <_calloc_r+0x24>
 8005ece:	4628      	mov	r0, r5
 8005ed0:	b003      	add	sp, #12
 8005ed2:	bd30      	pop	{r4, r5, pc}
 8005ed4:	220c      	movs	r2, #12
 8005ed6:	6002      	str	r2, [r0, #0]
 8005ed8:	2500      	movs	r5, #0
 8005eda:	e7f8      	b.n	8005ece <_calloc_r+0x16>
 8005edc:	4621      	mov	r1, r4
 8005ede:	f001 fa4f 	bl	8007380 <memset>
 8005ee2:	e7f4      	b.n	8005ece <_calloc_r+0x16>

08005ee4 <malloc>:
 8005ee4:	4b02      	ldr	r3, [pc, #8]	; (8005ef0 <malloc+0xc>)
 8005ee6:	4601      	mov	r1, r0
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	f000 b823 	b.w	8005f34 <_malloc_r>
 8005eee:	bf00      	nop
 8005ef0:	20000064 	.word	0x20000064

08005ef4 <sbrk_aligned>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	4e0e      	ldr	r6, [pc, #56]	; (8005f30 <sbrk_aligned+0x3c>)
 8005ef8:	460c      	mov	r4, r1
 8005efa:	6831      	ldr	r1, [r6, #0]
 8005efc:	4605      	mov	r5, r0
 8005efe:	b911      	cbnz	r1, 8005f06 <sbrk_aligned+0x12>
 8005f00:	f001 fa7e 	bl	8007400 <_sbrk_r>
 8005f04:	6030      	str	r0, [r6, #0]
 8005f06:	4621      	mov	r1, r4
 8005f08:	4628      	mov	r0, r5
 8005f0a:	f001 fa79 	bl	8007400 <_sbrk_r>
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	d00a      	beq.n	8005f28 <sbrk_aligned+0x34>
 8005f12:	1cc4      	adds	r4, r0, #3
 8005f14:	f024 0403 	bic.w	r4, r4, #3
 8005f18:	42a0      	cmp	r0, r4
 8005f1a:	d007      	beq.n	8005f2c <sbrk_aligned+0x38>
 8005f1c:	1a21      	subs	r1, r4, r0
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f001 fa6e 	bl	8007400 <_sbrk_r>
 8005f24:	3001      	adds	r0, #1
 8005f26:	d101      	bne.n	8005f2c <sbrk_aligned+0x38>
 8005f28:	f04f 34ff 	mov.w	r4, #4294967295
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
 8005f30:	20003188 	.word	0x20003188

08005f34 <_malloc_r>:
 8005f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f38:	1ccd      	adds	r5, r1, #3
 8005f3a:	f025 0503 	bic.w	r5, r5, #3
 8005f3e:	3508      	adds	r5, #8
 8005f40:	2d0c      	cmp	r5, #12
 8005f42:	bf38      	it	cc
 8005f44:	250c      	movcc	r5, #12
 8005f46:	2d00      	cmp	r5, #0
 8005f48:	4607      	mov	r7, r0
 8005f4a:	db01      	blt.n	8005f50 <_malloc_r+0x1c>
 8005f4c:	42a9      	cmp	r1, r5
 8005f4e:	d905      	bls.n	8005f5c <_malloc_r+0x28>
 8005f50:	230c      	movs	r3, #12
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	2600      	movs	r6, #0
 8005f56:	4630      	mov	r0, r6
 8005f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006030 <_malloc_r+0xfc>
 8005f60:	f000 f868 	bl	8006034 <__malloc_lock>
 8005f64:	f8d8 3000 	ldr.w	r3, [r8]
 8005f68:	461c      	mov	r4, r3
 8005f6a:	bb5c      	cbnz	r4, 8005fc4 <_malloc_r+0x90>
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	4638      	mov	r0, r7
 8005f70:	f7ff ffc0 	bl	8005ef4 <sbrk_aligned>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	4604      	mov	r4, r0
 8005f78:	d155      	bne.n	8006026 <_malloc_r+0xf2>
 8005f7a:	f8d8 4000 	ldr.w	r4, [r8]
 8005f7e:	4626      	mov	r6, r4
 8005f80:	2e00      	cmp	r6, #0
 8005f82:	d145      	bne.n	8006010 <_malloc_r+0xdc>
 8005f84:	2c00      	cmp	r4, #0
 8005f86:	d048      	beq.n	800601a <_malloc_r+0xe6>
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	eb04 0903 	add.w	r9, r4, r3
 8005f92:	f001 fa35 	bl	8007400 <_sbrk_r>
 8005f96:	4581      	cmp	r9, r0
 8005f98:	d13f      	bne.n	800601a <_malloc_r+0xe6>
 8005f9a:	6821      	ldr	r1, [r4, #0]
 8005f9c:	1a6d      	subs	r5, r5, r1
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	f7ff ffa7 	bl	8005ef4 <sbrk_aligned>
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d037      	beq.n	800601a <_malloc_r+0xe6>
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	442b      	add	r3, r5
 8005fae:	6023      	str	r3, [r4, #0]
 8005fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d038      	beq.n	800602a <_malloc_r+0xf6>
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	42a2      	cmp	r2, r4
 8005fbc:	d12b      	bne.n	8006016 <_malloc_r+0xe2>
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	e00f      	b.n	8005fe4 <_malloc_r+0xb0>
 8005fc4:	6822      	ldr	r2, [r4, #0]
 8005fc6:	1b52      	subs	r2, r2, r5
 8005fc8:	d41f      	bmi.n	800600a <_malloc_r+0xd6>
 8005fca:	2a0b      	cmp	r2, #11
 8005fcc:	d917      	bls.n	8005ffe <_malloc_r+0xca>
 8005fce:	1961      	adds	r1, r4, r5
 8005fd0:	42a3      	cmp	r3, r4
 8005fd2:	6025      	str	r5, [r4, #0]
 8005fd4:	bf18      	it	ne
 8005fd6:	6059      	strne	r1, [r3, #4]
 8005fd8:	6863      	ldr	r3, [r4, #4]
 8005fda:	bf08      	it	eq
 8005fdc:	f8c8 1000 	streq.w	r1, [r8]
 8005fe0:	5162      	str	r2, [r4, r5]
 8005fe2:	604b      	str	r3, [r1, #4]
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	f104 060b 	add.w	r6, r4, #11
 8005fea:	f000 f829 	bl	8006040 <__malloc_unlock>
 8005fee:	f026 0607 	bic.w	r6, r6, #7
 8005ff2:	1d23      	adds	r3, r4, #4
 8005ff4:	1af2      	subs	r2, r6, r3
 8005ff6:	d0ae      	beq.n	8005f56 <_malloc_r+0x22>
 8005ff8:	1b9b      	subs	r3, r3, r6
 8005ffa:	50a3      	str	r3, [r4, r2]
 8005ffc:	e7ab      	b.n	8005f56 <_malloc_r+0x22>
 8005ffe:	42a3      	cmp	r3, r4
 8006000:	6862      	ldr	r2, [r4, #4]
 8006002:	d1dd      	bne.n	8005fc0 <_malloc_r+0x8c>
 8006004:	f8c8 2000 	str.w	r2, [r8]
 8006008:	e7ec      	b.n	8005fe4 <_malloc_r+0xb0>
 800600a:	4623      	mov	r3, r4
 800600c:	6864      	ldr	r4, [r4, #4]
 800600e:	e7ac      	b.n	8005f6a <_malloc_r+0x36>
 8006010:	4634      	mov	r4, r6
 8006012:	6876      	ldr	r6, [r6, #4]
 8006014:	e7b4      	b.n	8005f80 <_malloc_r+0x4c>
 8006016:	4613      	mov	r3, r2
 8006018:	e7cc      	b.n	8005fb4 <_malloc_r+0x80>
 800601a:	230c      	movs	r3, #12
 800601c:	603b      	str	r3, [r7, #0]
 800601e:	4638      	mov	r0, r7
 8006020:	f000 f80e 	bl	8006040 <__malloc_unlock>
 8006024:	e797      	b.n	8005f56 <_malloc_r+0x22>
 8006026:	6025      	str	r5, [r4, #0]
 8006028:	e7dc      	b.n	8005fe4 <_malloc_r+0xb0>
 800602a:	605b      	str	r3, [r3, #4]
 800602c:	deff      	udf	#255	; 0xff
 800602e:	bf00      	nop
 8006030:	20003184 	.word	0x20003184

08006034 <__malloc_lock>:
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <__malloc_lock+0x8>)
 8006036:	f001 ba30 	b.w	800749a <__retarget_lock_acquire_recursive>
 800603a:	bf00      	nop
 800603c:	200032cc 	.word	0x200032cc

08006040 <__malloc_unlock>:
 8006040:	4801      	ldr	r0, [pc, #4]	; (8006048 <__malloc_unlock+0x8>)
 8006042:	f001 ba2b 	b.w	800749c <__retarget_lock_release_recursive>
 8006046:	bf00      	nop
 8006048:	200032cc 	.word	0x200032cc

0800604c <_strtol_l.constprop.0>:
 800604c:	2b01      	cmp	r3, #1
 800604e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006052:	d001      	beq.n	8006058 <_strtol_l.constprop.0+0xc>
 8006054:	2b24      	cmp	r3, #36	; 0x24
 8006056:	d906      	bls.n	8006066 <_strtol_l.constprop.0+0x1a>
 8006058:	f001 f9f4 	bl	8007444 <__errno>
 800605c:	2316      	movs	r3, #22
 800605e:	6003      	str	r3, [r0, #0]
 8006060:	2000      	movs	r0, #0
 8006062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006066:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800614c <_strtol_l.constprop.0+0x100>
 800606a:	460d      	mov	r5, r1
 800606c:	462e      	mov	r6, r5
 800606e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006072:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006076:	f017 0708 	ands.w	r7, r7, #8
 800607a:	d1f7      	bne.n	800606c <_strtol_l.constprop.0+0x20>
 800607c:	2c2d      	cmp	r4, #45	; 0x2d
 800607e:	d132      	bne.n	80060e6 <_strtol_l.constprop.0+0x9a>
 8006080:	782c      	ldrb	r4, [r5, #0]
 8006082:	2701      	movs	r7, #1
 8006084:	1cb5      	adds	r5, r6, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d05b      	beq.n	8006142 <_strtol_l.constprop.0+0xf6>
 800608a:	2b10      	cmp	r3, #16
 800608c:	d109      	bne.n	80060a2 <_strtol_l.constprop.0+0x56>
 800608e:	2c30      	cmp	r4, #48	; 0x30
 8006090:	d107      	bne.n	80060a2 <_strtol_l.constprop.0+0x56>
 8006092:	782c      	ldrb	r4, [r5, #0]
 8006094:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006098:	2c58      	cmp	r4, #88	; 0x58
 800609a:	d14d      	bne.n	8006138 <_strtol_l.constprop.0+0xec>
 800609c:	786c      	ldrb	r4, [r5, #1]
 800609e:	2310      	movs	r3, #16
 80060a0:	3502      	adds	r5, #2
 80060a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80060a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80060aa:	f04f 0e00 	mov.w	lr, #0
 80060ae:	fbb8 f9f3 	udiv	r9, r8, r3
 80060b2:	4676      	mov	r6, lr
 80060b4:	fb03 8a19 	mls	sl, r3, r9, r8
 80060b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80060bc:	f1bc 0f09 	cmp.w	ip, #9
 80060c0:	d816      	bhi.n	80060f0 <_strtol_l.constprop.0+0xa4>
 80060c2:	4664      	mov	r4, ip
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	dd24      	ble.n	8006112 <_strtol_l.constprop.0+0xc6>
 80060c8:	f1be 3fff 	cmp.w	lr, #4294967295
 80060cc:	d008      	beq.n	80060e0 <_strtol_l.constprop.0+0x94>
 80060ce:	45b1      	cmp	r9, r6
 80060d0:	d31c      	bcc.n	800610c <_strtol_l.constprop.0+0xc0>
 80060d2:	d101      	bne.n	80060d8 <_strtol_l.constprop.0+0x8c>
 80060d4:	45a2      	cmp	sl, r4
 80060d6:	db19      	blt.n	800610c <_strtol_l.constprop.0+0xc0>
 80060d8:	fb06 4603 	mla	r6, r6, r3, r4
 80060dc:	f04f 0e01 	mov.w	lr, #1
 80060e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060e4:	e7e8      	b.n	80060b8 <_strtol_l.constprop.0+0x6c>
 80060e6:	2c2b      	cmp	r4, #43	; 0x2b
 80060e8:	bf04      	itt	eq
 80060ea:	782c      	ldrbeq	r4, [r5, #0]
 80060ec:	1cb5      	addeq	r5, r6, #2
 80060ee:	e7ca      	b.n	8006086 <_strtol_l.constprop.0+0x3a>
 80060f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80060f4:	f1bc 0f19 	cmp.w	ip, #25
 80060f8:	d801      	bhi.n	80060fe <_strtol_l.constprop.0+0xb2>
 80060fa:	3c37      	subs	r4, #55	; 0x37
 80060fc:	e7e2      	b.n	80060c4 <_strtol_l.constprop.0+0x78>
 80060fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006102:	f1bc 0f19 	cmp.w	ip, #25
 8006106:	d804      	bhi.n	8006112 <_strtol_l.constprop.0+0xc6>
 8006108:	3c57      	subs	r4, #87	; 0x57
 800610a:	e7db      	b.n	80060c4 <_strtol_l.constprop.0+0x78>
 800610c:	f04f 3eff 	mov.w	lr, #4294967295
 8006110:	e7e6      	b.n	80060e0 <_strtol_l.constprop.0+0x94>
 8006112:	f1be 3fff 	cmp.w	lr, #4294967295
 8006116:	d105      	bne.n	8006124 <_strtol_l.constprop.0+0xd8>
 8006118:	2322      	movs	r3, #34	; 0x22
 800611a:	6003      	str	r3, [r0, #0]
 800611c:	4646      	mov	r6, r8
 800611e:	b942      	cbnz	r2, 8006132 <_strtol_l.constprop.0+0xe6>
 8006120:	4630      	mov	r0, r6
 8006122:	e79e      	b.n	8006062 <_strtol_l.constprop.0+0x16>
 8006124:	b107      	cbz	r7, 8006128 <_strtol_l.constprop.0+0xdc>
 8006126:	4276      	negs	r6, r6
 8006128:	2a00      	cmp	r2, #0
 800612a:	d0f9      	beq.n	8006120 <_strtol_l.constprop.0+0xd4>
 800612c:	f1be 0f00 	cmp.w	lr, #0
 8006130:	d000      	beq.n	8006134 <_strtol_l.constprop.0+0xe8>
 8006132:	1e69      	subs	r1, r5, #1
 8006134:	6011      	str	r1, [r2, #0]
 8006136:	e7f3      	b.n	8006120 <_strtol_l.constprop.0+0xd4>
 8006138:	2430      	movs	r4, #48	; 0x30
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1b1      	bne.n	80060a2 <_strtol_l.constprop.0+0x56>
 800613e:	2308      	movs	r3, #8
 8006140:	e7af      	b.n	80060a2 <_strtol_l.constprop.0+0x56>
 8006142:	2c30      	cmp	r4, #48	; 0x30
 8006144:	d0a5      	beq.n	8006092 <_strtol_l.constprop.0+0x46>
 8006146:	230a      	movs	r3, #10
 8006148:	e7ab      	b.n	80060a2 <_strtol_l.constprop.0+0x56>
 800614a:	bf00      	nop
 800614c:	0800a7bd 	.word	0x0800a7bd

08006150 <_strtol_r>:
 8006150:	f7ff bf7c 	b.w	800604c <_strtol_l.constprop.0>

08006154 <__cvt>:
 8006154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006156:	ed2d 8b02 	vpush	{d8}
 800615a:	eeb0 8b40 	vmov.f64	d8, d0
 800615e:	b085      	sub	sp, #20
 8006160:	4617      	mov	r7, r2
 8006162:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006164:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006166:	ee18 2a90 	vmov	r2, s17
 800616a:	f025 0520 	bic.w	r5, r5, #32
 800616e:	2a00      	cmp	r2, #0
 8006170:	bfb6      	itet	lt
 8006172:	222d      	movlt	r2, #45	; 0x2d
 8006174:	2200      	movge	r2, #0
 8006176:	eeb1 8b40 	vneglt.f64	d8, d0
 800617a:	2d46      	cmp	r5, #70	; 0x46
 800617c:	460c      	mov	r4, r1
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	d004      	beq.n	800618c <__cvt+0x38>
 8006182:	2d45      	cmp	r5, #69	; 0x45
 8006184:	d100      	bne.n	8006188 <__cvt+0x34>
 8006186:	3401      	adds	r4, #1
 8006188:	2102      	movs	r1, #2
 800618a:	e000      	b.n	800618e <__cvt+0x3a>
 800618c:	2103      	movs	r1, #3
 800618e:	ab03      	add	r3, sp, #12
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	ab02      	add	r3, sp, #8
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	4622      	mov	r2, r4
 8006198:	4633      	mov	r3, r6
 800619a:	eeb0 0b48 	vmov.f64	d0, d8
 800619e:	f001 fa1b 	bl	80075d8 <_dtoa_r>
 80061a2:	2d47      	cmp	r5, #71	; 0x47
 80061a4:	d101      	bne.n	80061aa <__cvt+0x56>
 80061a6:	07fb      	lsls	r3, r7, #31
 80061a8:	d51a      	bpl.n	80061e0 <__cvt+0x8c>
 80061aa:	2d46      	cmp	r5, #70	; 0x46
 80061ac:	eb00 0204 	add.w	r2, r0, r4
 80061b0:	d10c      	bne.n	80061cc <__cvt+0x78>
 80061b2:	7803      	ldrb	r3, [r0, #0]
 80061b4:	2b30      	cmp	r3, #48	; 0x30
 80061b6:	d107      	bne.n	80061c8 <__cvt+0x74>
 80061b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80061bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c0:	bf1c      	itt	ne
 80061c2:	f1c4 0401 	rsbne	r4, r4, #1
 80061c6:	6034      	strne	r4, [r6, #0]
 80061c8:	6833      	ldr	r3, [r6, #0]
 80061ca:	441a      	add	r2, r3
 80061cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80061d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d4:	bf08      	it	eq
 80061d6:	9203      	streq	r2, [sp, #12]
 80061d8:	2130      	movs	r1, #48	; 0x30
 80061da:	9b03      	ldr	r3, [sp, #12]
 80061dc:	4293      	cmp	r3, r2
 80061de:	d307      	bcc.n	80061f0 <__cvt+0x9c>
 80061e0:	9b03      	ldr	r3, [sp, #12]
 80061e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061e4:	1a1b      	subs	r3, r3, r0
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	b005      	add	sp, #20
 80061ea:	ecbd 8b02 	vpop	{d8}
 80061ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061f0:	1c5c      	adds	r4, r3, #1
 80061f2:	9403      	str	r4, [sp, #12]
 80061f4:	7019      	strb	r1, [r3, #0]
 80061f6:	e7f0      	b.n	80061da <__cvt+0x86>

080061f8 <__exponent>:
 80061f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061fa:	4603      	mov	r3, r0
 80061fc:	2900      	cmp	r1, #0
 80061fe:	bfb8      	it	lt
 8006200:	4249      	neglt	r1, r1
 8006202:	f803 2b02 	strb.w	r2, [r3], #2
 8006206:	bfb4      	ite	lt
 8006208:	222d      	movlt	r2, #45	; 0x2d
 800620a:	222b      	movge	r2, #43	; 0x2b
 800620c:	2909      	cmp	r1, #9
 800620e:	7042      	strb	r2, [r0, #1]
 8006210:	dd2a      	ble.n	8006268 <__exponent+0x70>
 8006212:	f10d 0207 	add.w	r2, sp, #7
 8006216:	4617      	mov	r7, r2
 8006218:	260a      	movs	r6, #10
 800621a:	4694      	mov	ip, r2
 800621c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006220:	fb06 1415 	mls	r4, r6, r5, r1
 8006224:	3430      	adds	r4, #48	; 0x30
 8006226:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800622a:	460c      	mov	r4, r1
 800622c:	2c63      	cmp	r4, #99	; 0x63
 800622e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006232:	4629      	mov	r1, r5
 8006234:	dcf1      	bgt.n	800621a <__exponent+0x22>
 8006236:	3130      	adds	r1, #48	; 0x30
 8006238:	f1ac 0402 	sub.w	r4, ip, #2
 800623c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006240:	1c41      	adds	r1, r0, #1
 8006242:	4622      	mov	r2, r4
 8006244:	42ba      	cmp	r2, r7
 8006246:	d30a      	bcc.n	800625e <__exponent+0x66>
 8006248:	f10d 0209 	add.w	r2, sp, #9
 800624c:	eba2 020c 	sub.w	r2, r2, ip
 8006250:	42bc      	cmp	r4, r7
 8006252:	bf88      	it	hi
 8006254:	2200      	movhi	r2, #0
 8006256:	4413      	add	r3, r2
 8006258:	1a18      	subs	r0, r3, r0
 800625a:	b003      	add	sp, #12
 800625c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800625e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006262:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006266:	e7ed      	b.n	8006244 <__exponent+0x4c>
 8006268:	2330      	movs	r3, #48	; 0x30
 800626a:	3130      	adds	r1, #48	; 0x30
 800626c:	7083      	strb	r3, [r0, #2]
 800626e:	70c1      	strb	r1, [r0, #3]
 8006270:	1d03      	adds	r3, r0, #4
 8006272:	e7f1      	b.n	8006258 <__exponent+0x60>
 8006274:	0000      	movs	r0, r0
	...

08006278 <_printf_float>:
 8006278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627c:	b08b      	sub	sp, #44	; 0x2c
 800627e:	460c      	mov	r4, r1
 8006280:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006284:	4616      	mov	r6, r2
 8006286:	461f      	mov	r7, r3
 8006288:	4605      	mov	r5, r0
 800628a:	f001 f881 	bl	8007390 <_localeconv_r>
 800628e:	f8d0 b000 	ldr.w	fp, [r0]
 8006292:	4658      	mov	r0, fp
 8006294:	f7fa f824 	bl	80002e0 <strlen>
 8006298:	2300      	movs	r3, #0
 800629a:	9308      	str	r3, [sp, #32]
 800629c:	f8d8 3000 	ldr.w	r3, [r8]
 80062a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80062a4:	6822      	ldr	r2, [r4, #0]
 80062a6:	3307      	adds	r3, #7
 80062a8:	f023 0307 	bic.w	r3, r3, #7
 80062ac:	f103 0108 	add.w	r1, r3, #8
 80062b0:	f8c8 1000 	str.w	r1, [r8]
 80062b4:	ed93 0b00 	vldr	d0, [r3]
 80062b8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006518 <_printf_float+0x2a0>
 80062bc:	eeb0 7bc0 	vabs.f64	d7, d0
 80062c0:	eeb4 7b46 	vcmp.f64	d7, d6
 80062c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80062cc:	4682      	mov	sl, r0
 80062ce:	dd24      	ble.n	800631a <_printf_float+0xa2>
 80062d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80062d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d8:	d502      	bpl.n	80062e0 <_printf_float+0x68>
 80062da:	232d      	movs	r3, #45	; 0x2d
 80062dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062e0:	498f      	ldr	r1, [pc, #572]	; (8006520 <_printf_float+0x2a8>)
 80062e2:	4b90      	ldr	r3, [pc, #576]	; (8006524 <_printf_float+0x2ac>)
 80062e4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80062e8:	bf94      	ite	ls
 80062ea:	4688      	movls	r8, r1
 80062ec:	4698      	movhi	r8, r3
 80062ee:	2303      	movs	r3, #3
 80062f0:	6123      	str	r3, [r4, #16]
 80062f2:	f022 0204 	bic.w	r2, r2, #4
 80062f6:	2300      	movs	r3, #0
 80062f8:	6022      	str	r2, [r4, #0]
 80062fa:	9304      	str	r3, [sp, #16]
 80062fc:	9700      	str	r7, [sp, #0]
 80062fe:	4633      	mov	r3, r6
 8006300:	aa09      	add	r2, sp, #36	; 0x24
 8006302:	4621      	mov	r1, r4
 8006304:	4628      	mov	r0, r5
 8006306:	f000 f9d1 	bl	80066ac <_printf_common>
 800630a:	3001      	adds	r0, #1
 800630c:	f040 808a 	bne.w	8006424 <_printf_float+0x1ac>
 8006310:	f04f 30ff 	mov.w	r0, #4294967295
 8006314:	b00b      	add	sp, #44	; 0x2c
 8006316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631a:	eeb4 0b40 	vcmp.f64	d0, d0
 800631e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006322:	d709      	bvc.n	8006338 <_printf_float+0xc0>
 8006324:	ee10 3a90 	vmov	r3, s1
 8006328:	2b00      	cmp	r3, #0
 800632a:	bfbc      	itt	lt
 800632c:	232d      	movlt	r3, #45	; 0x2d
 800632e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006332:	497d      	ldr	r1, [pc, #500]	; (8006528 <_printf_float+0x2b0>)
 8006334:	4b7d      	ldr	r3, [pc, #500]	; (800652c <_printf_float+0x2b4>)
 8006336:	e7d5      	b.n	80062e4 <_printf_float+0x6c>
 8006338:	6863      	ldr	r3, [r4, #4]
 800633a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800633e:	9104      	str	r1, [sp, #16]
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	d13c      	bne.n	80063be <_printf_float+0x146>
 8006344:	2306      	movs	r3, #6
 8006346:	6063      	str	r3, [r4, #4]
 8006348:	2300      	movs	r3, #0
 800634a:	9303      	str	r3, [sp, #12]
 800634c:	ab08      	add	r3, sp, #32
 800634e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006352:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006356:	ab07      	add	r3, sp, #28
 8006358:	6861      	ldr	r1, [r4, #4]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	6022      	str	r2, [r4, #0]
 800635e:	f10d 031b 	add.w	r3, sp, #27
 8006362:	4628      	mov	r0, r5
 8006364:	f7ff fef6 	bl	8006154 <__cvt>
 8006368:	9b04      	ldr	r3, [sp, #16]
 800636a:	9907      	ldr	r1, [sp, #28]
 800636c:	2b47      	cmp	r3, #71	; 0x47
 800636e:	4680      	mov	r8, r0
 8006370:	d108      	bne.n	8006384 <_printf_float+0x10c>
 8006372:	1cc8      	adds	r0, r1, #3
 8006374:	db02      	blt.n	800637c <_printf_float+0x104>
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	4299      	cmp	r1, r3
 800637a:	dd41      	ble.n	8006400 <_printf_float+0x188>
 800637c:	f1a9 0902 	sub.w	r9, r9, #2
 8006380:	fa5f f989 	uxtb.w	r9, r9
 8006384:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006388:	d820      	bhi.n	80063cc <_printf_float+0x154>
 800638a:	3901      	subs	r1, #1
 800638c:	464a      	mov	r2, r9
 800638e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006392:	9107      	str	r1, [sp, #28]
 8006394:	f7ff ff30 	bl	80061f8 <__exponent>
 8006398:	9a08      	ldr	r2, [sp, #32]
 800639a:	9004      	str	r0, [sp, #16]
 800639c:	1813      	adds	r3, r2, r0
 800639e:	2a01      	cmp	r2, #1
 80063a0:	6123      	str	r3, [r4, #16]
 80063a2:	dc02      	bgt.n	80063aa <_printf_float+0x132>
 80063a4:	6822      	ldr	r2, [r4, #0]
 80063a6:	07d2      	lsls	r2, r2, #31
 80063a8:	d501      	bpl.n	80063ae <_printf_float+0x136>
 80063aa:	3301      	adds	r3, #1
 80063ac:	6123      	str	r3, [r4, #16]
 80063ae:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0a2      	beq.n	80062fc <_printf_float+0x84>
 80063b6:	232d      	movs	r3, #45	; 0x2d
 80063b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063bc:	e79e      	b.n	80062fc <_printf_float+0x84>
 80063be:	9904      	ldr	r1, [sp, #16]
 80063c0:	2947      	cmp	r1, #71	; 0x47
 80063c2:	d1c1      	bne.n	8006348 <_printf_float+0xd0>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1bf      	bne.n	8006348 <_printf_float+0xd0>
 80063c8:	2301      	movs	r3, #1
 80063ca:	e7bc      	b.n	8006346 <_printf_float+0xce>
 80063cc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80063d0:	d118      	bne.n	8006404 <_printf_float+0x18c>
 80063d2:	2900      	cmp	r1, #0
 80063d4:	6863      	ldr	r3, [r4, #4]
 80063d6:	dd0b      	ble.n	80063f0 <_printf_float+0x178>
 80063d8:	6121      	str	r1, [r4, #16]
 80063da:	b913      	cbnz	r3, 80063e2 <_printf_float+0x16a>
 80063dc:	6822      	ldr	r2, [r4, #0]
 80063de:	07d0      	lsls	r0, r2, #31
 80063e0:	d502      	bpl.n	80063e8 <_printf_float+0x170>
 80063e2:	3301      	adds	r3, #1
 80063e4:	440b      	add	r3, r1
 80063e6:	6123      	str	r3, [r4, #16]
 80063e8:	2300      	movs	r3, #0
 80063ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80063ec:	9304      	str	r3, [sp, #16]
 80063ee:	e7de      	b.n	80063ae <_printf_float+0x136>
 80063f0:	b913      	cbnz	r3, 80063f8 <_printf_float+0x180>
 80063f2:	6822      	ldr	r2, [r4, #0]
 80063f4:	07d2      	lsls	r2, r2, #31
 80063f6:	d501      	bpl.n	80063fc <_printf_float+0x184>
 80063f8:	3302      	adds	r3, #2
 80063fa:	e7f4      	b.n	80063e6 <_printf_float+0x16e>
 80063fc:	2301      	movs	r3, #1
 80063fe:	e7f2      	b.n	80063e6 <_printf_float+0x16e>
 8006400:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006404:	9b08      	ldr	r3, [sp, #32]
 8006406:	4299      	cmp	r1, r3
 8006408:	db05      	blt.n	8006416 <_printf_float+0x19e>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	6121      	str	r1, [r4, #16]
 800640e:	07d8      	lsls	r0, r3, #31
 8006410:	d5ea      	bpl.n	80063e8 <_printf_float+0x170>
 8006412:	1c4b      	adds	r3, r1, #1
 8006414:	e7e7      	b.n	80063e6 <_printf_float+0x16e>
 8006416:	2900      	cmp	r1, #0
 8006418:	bfd4      	ite	le
 800641a:	f1c1 0202 	rsble	r2, r1, #2
 800641e:	2201      	movgt	r2, #1
 8006420:	4413      	add	r3, r2
 8006422:	e7e0      	b.n	80063e6 <_printf_float+0x16e>
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	055a      	lsls	r2, r3, #21
 8006428:	d407      	bmi.n	800643a <_printf_float+0x1c2>
 800642a:	6923      	ldr	r3, [r4, #16]
 800642c:	4642      	mov	r2, r8
 800642e:	4631      	mov	r1, r6
 8006430:	4628      	mov	r0, r5
 8006432:	47b8      	blx	r7
 8006434:	3001      	adds	r0, #1
 8006436:	d12a      	bne.n	800648e <_printf_float+0x216>
 8006438:	e76a      	b.n	8006310 <_printf_float+0x98>
 800643a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800643e:	f240 80e0 	bls.w	8006602 <_printf_float+0x38a>
 8006442:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006446:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800644a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800644e:	d133      	bne.n	80064b8 <_printf_float+0x240>
 8006450:	4a37      	ldr	r2, [pc, #220]	; (8006530 <_printf_float+0x2b8>)
 8006452:	2301      	movs	r3, #1
 8006454:	4631      	mov	r1, r6
 8006456:	4628      	mov	r0, r5
 8006458:	47b8      	blx	r7
 800645a:	3001      	adds	r0, #1
 800645c:	f43f af58 	beq.w	8006310 <_printf_float+0x98>
 8006460:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006464:	429a      	cmp	r2, r3
 8006466:	db02      	blt.n	800646e <_printf_float+0x1f6>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	07d8      	lsls	r0, r3, #31
 800646c:	d50f      	bpl.n	800648e <_printf_float+0x216>
 800646e:	4653      	mov	r3, sl
 8006470:	465a      	mov	r2, fp
 8006472:	4631      	mov	r1, r6
 8006474:	4628      	mov	r0, r5
 8006476:	47b8      	blx	r7
 8006478:	3001      	adds	r0, #1
 800647a:	f43f af49 	beq.w	8006310 <_printf_float+0x98>
 800647e:	f04f 0800 	mov.w	r8, #0
 8006482:	f104 091a 	add.w	r9, r4, #26
 8006486:	9b08      	ldr	r3, [sp, #32]
 8006488:	3b01      	subs	r3, #1
 800648a:	4543      	cmp	r3, r8
 800648c:	dc09      	bgt.n	80064a2 <_printf_float+0x22a>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	079b      	lsls	r3, r3, #30
 8006492:	f100 8106 	bmi.w	80066a2 <_printf_float+0x42a>
 8006496:	68e0      	ldr	r0, [r4, #12]
 8006498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649a:	4298      	cmp	r0, r3
 800649c:	bfb8      	it	lt
 800649e:	4618      	movlt	r0, r3
 80064a0:	e738      	b.n	8006314 <_printf_float+0x9c>
 80064a2:	2301      	movs	r3, #1
 80064a4:	464a      	mov	r2, r9
 80064a6:	4631      	mov	r1, r6
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b8      	blx	r7
 80064ac:	3001      	adds	r0, #1
 80064ae:	f43f af2f 	beq.w	8006310 <_printf_float+0x98>
 80064b2:	f108 0801 	add.w	r8, r8, #1
 80064b6:	e7e6      	b.n	8006486 <_printf_float+0x20e>
 80064b8:	9b07      	ldr	r3, [sp, #28]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dc3a      	bgt.n	8006534 <_printf_float+0x2bc>
 80064be:	4a1c      	ldr	r2, [pc, #112]	; (8006530 <_printf_float+0x2b8>)
 80064c0:	2301      	movs	r3, #1
 80064c2:	4631      	mov	r1, r6
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b8      	blx	r7
 80064c8:	3001      	adds	r0, #1
 80064ca:	f43f af21 	beq.w	8006310 <_printf_float+0x98>
 80064ce:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	d102      	bne.n	80064dc <_printf_float+0x264>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	07d9      	lsls	r1, r3, #31
 80064da:	d5d8      	bpl.n	800648e <_printf_float+0x216>
 80064dc:	4653      	mov	r3, sl
 80064de:	465a      	mov	r2, fp
 80064e0:	4631      	mov	r1, r6
 80064e2:	4628      	mov	r0, r5
 80064e4:	47b8      	blx	r7
 80064e6:	3001      	adds	r0, #1
 80064e8:	f43f af12 	beq.w	8006310 <_printf_float+0x98>
 80064ec:	f04f 0900 	mov.w	r9, #0
 80064f0:	f104 0a1a 	add.w	sl, r4, #26
 80064f4:	9b07      	ldr	r3, [sp, #28]
 80064f6:	425b      	negs	r3, r3
 80064f8:	454b      	cmp	r3, r9
 80064fa:	dc01      	bgt.n	8006500 <_printf_float+0x288>
 80064fc:	9b08      	ldr	r3, [sp, #32]
 80064fe:	e795      	b.n	800642c <_printf_float+0x1b4>
 8006500:	2301      	movs	r3, #1
 8006502:	4652      	mov	r2, sl
 8006504:	4631      	mov	r1, r6
 8006506:	4628      	mov	r0, r5
 8006508:	47b8      	blx	r7
 800650a:	3001      	adds	r0, #1
 800650c:	f43f af00 	beq.w	8006310 <_printf_float+0x98>
 8006510:	f109 0901 	add.w	r9, r9, #1
 8006514:	e7ee      	b.n	80064f4 <_printf_float+0x27c>
 8006516:	bf00      	nop
 8006518:	ffffffff 	.word	0xffffffff
 800651c:	7fefffff 	.word	0x7fefffff
 8006520:	0800a8bd 	.word	0x0800a8bd
 8006524:	0800a8c1 	.word	0x0800a8c1
 8006528:	0800a8c5 	.word	0x0800a8c5
 800652c:	0800a8c9 	.word	0x0800a8c9
 8006530:	0800a8cd 	.word	0x0800a8cd
 8006534:	9a08      	ldr	r2, [sp, #32]
 8006536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006538:	429a      	cmp	r2, r3
 800653a:	bfa8      	it	ge
 800653c:	461a      	movge	r2, r3
 800653e:	2a00      	cmp	r2, #0
 8006540:	4691      	mov	r9, r2
 8006542:	dc38      	bgt.n	80065b6 <_printf_float+0x33e>
 8006544:	2300      	movs	r3, #0
 8006546:	9305      	str	r3, [sp, #20]
 8006548:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800654c:	f104 021a 	add.w	r2, r4, #26
 8006550:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006552:	9905      	ldr	r1, [sp, #20]
 8006554:	9304      	str	r3, [sp, #16]
 8006556:	eba3 0309 	sub.w	r3, r3, r9
 800655a:	428b      	cmp	r3, r1
 800655c:	dc33      	bgt.n	80065c6 <_printf_float+0x34e>
 800655e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006562:	429a      	cmp	r2, r3
 8006564:	db3c      	blt.n	80065e0 <_printf_float+0x368>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	07da      	lsls	r2, r3, #31
 800656a:	d439      	bmi.n	80065e0 <_printf_float+0x368>
 800656c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006570:	eba2 0903 	sub.w	r9, r2, r3
 8006574:	9b04      	ldr	r3, [sp, #16]
 8006576:	1ad2      	subs	r2, r2, r3
 8006578:	4591      	cmp	r9, r2
 800657a:	bfa8      	it	ge
 800657c:	4691      	movge	r9, r2
 800657e:	f1b9 0f00 	cmp.w	r9, #0
 8006582:	dc35      	bgt.n	80065f0 <_printf_float+0x378>
 8006584:	f04f 0800 	mov.w	r8, #0
 8006588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800658c:	f104 0a1a 	add.w	sl, r4, #26
 8006590:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	eba3 0309 	sub.w	r3, r3, r9
 800659a:	4543      	cmp	r3, r8
 800659c:	f77f af77 	ble.w	800648e <_printf_float+0x216>
 80065a0:	2301      	movs	r3, #1
 80065a2:	4652      	mov	r2, sl
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b8      	blx	r7
 80065aa:	3001      	adds	r0, #1
 80065ac:	f43f aeb0 	beq.w	8006310 <_printf_float+0x98>
 80065b0:	f108 0801 	add.w	r8, r8, #1
 80065b4:	e7ec      	b.n	8006590 <_printf_float+0x318>
 80065b6:	4613      	mov	r3, r2
 80065b8:	4631      	mov	r1, r6
 80065ba:	4642      	mov	r2, r8
 80065bc:	4628      	mov	r0, r5
 80065be:	47b8      	blx	r7
 80065c0:	3001      	adds	r0, #1
 80065c2:	d1bf      	bne.n	8006544 <_printf_float+0x2cc>
 80065c4:	e6a4      	b.n	8006310 <_printf_float+0x98>
 80065c6:	2301      	movs	r3, #1
 80065c8:	4631      	mov	r1, r6
 80065ca:	4628      	mov	r0, r5
 80065cc:	9204      	str	r2, [sp, #16]
 80065ce:	47b8      	blx	r7
 80065d0:	3001      	adds	r0, #1
 80065d2:	f43f ae9d 	beq.w	8006310 <_printf_float+0x98>
 80065d6:	9b05      	ldr	r3, [sp, #20]
 80065d8:	9a04      	ldr	r2, [sp, #16]
 80065da:	3301      	adds	r3, #1
 80065dc:	9305      	str	r3, [sp, #20]
 80065de:	e7b7      	b.n	8006550 <_printf_float+0x2d8>
 80065e0:	4653      	mov	r3, sl
 80065e2:	465a      	mov	r2, fp
 80065e4:	4631      	mov	r1, r6
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b8      	blx	r7
 80065ea:	3001      	adds	r0, #1
 80065ec:	d1be      	bne.n	800656c <_printf_float+0x2f4>
 80065ee:	e68f      	b.n	8006310 <_printf_float+0x98>
 80065f0:	9a04      	ldr	r2, [sp, #16]
 80065f2:	464b      	mov	r3, r9
 80065f4:	4442      	add	r2, r8
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b8      	blx	r7
 80065fc:	3001      	adds	r0, #1
 80065fe:	d1c1      	bne.n	8006584 <_printf_float+0x30c>
 8006600:	e686      	b.n	8006310 <_printf_float+0x98>
 8006602:	9a08      	ldr	r2, [sp, #32]
 8006604:	2a01      	cmp	r2, #1
 8006606:	dc01      	bgt.n	800660c <_printf_float+0x394>
 8006608:	07db      	lsls	r3, r3, #31
 800660a:	d537      	bpl.n	800667c <_printf_float+0x404>
 800660c:	2301      	movs	r3, #1
 800660e:	4642      	mov	r2, r8
 8006610:	4631      	mov	r1, r6
 8006612:	4628      	mov	r0, r5
 8006614:	47b8      	blx	r7
 8006616:	3001      	adds	r0, #1
 8006618:	f43f ae7a 	beq.w	8006310 <_printf_float+0x98>
 800661c:	4653      	mov	r3, sl
 800661e:	465a      	mov	r2, fp
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	f43f ae72 	beq.w	8006310 <_printf_float+0x98>
 800662c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006630:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006638:	9b08      	ldr	r3, [sp, #32]
 800663a:	d01a      	beq.n	8006672 <_printf_float+0x3fa>
 800663c:	3b01      	subs	r3, #1
 800663e:	f108 0201 	add.w	r2, r8, #1
 8006642:	4631      	mov	r1, r6
 8006644:	4628      	mov	r0, r5
 8006646:	47b8      	blx	r7
 8006648:	3001      	adds	r0, #1
 800664a:	d10e      	bne.n	800666a <_printf_float+0x3f2>
 800664c:	e660      	b.n	8006310 <_printf_float+0x98>
 800664e:	2301      	movs	r3, #1
 8006650:	464a      	mov	r2, r9
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	47b8      	blx	r7
 8006658:	3001      	adds	r0, #1
 800665a:	f43f ae59 	beq.w	8006310 <_printf_float+0x98>
 800665e:	f108 0801 	add.w	r8, r8, #1
 8006662:	9b08      	ldr	r3, [sp, #32]
 8006664:	3b01      	subs	r3, #1
 8006666:	4543      	cmp	r3, r8
 8006668:	dcf1      	bgt.n	800664e <_printf_float+0x3d6>
 800666a:	9b04      	ldr	r3, [sp, #16]
 800666c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006670:	e6dd      	b.n	800642e <_printf_float+0x1b6>
 8006672:	f04f 0800 	mov.w	r8, #0
 8006676:	f104 091a 	add.w	r9, r4, #26
 800667a:	e7f2      	b.n	8006662 <_printf_float+0x3ea>
 800667c:	2301      	movs	r3, #1
 800667e:	4642      	mov	r2, r8
 8006680:	e7df      	b.n	8006642 <_printf_float+0x3ca>
 8006682:	2301      	movs	r3, #1
 8006684:	464a      	mov	r2, r9
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	f43f ae3f 	beq.w	8006310 <_printf_float+0x98>
 8006692:	f108 0801 	add.w	r8, r8, #1
 8006696:	68e3      	ldr	r3, [r4, #12]
 8006698:	9909      	ldr	r1, [sp, #36]	; 0x24
 800669a:	1a5b      	subs	r3, r3, r1
 800669c:	4543      	cmp	r3, r8
 800669e:	dcf0      	bgt.n	8006682 <_printf_float+0x40a>
 80066a0:	e6f9      	b.n	8006496 <_printf_float+0x21e>
 80066a2:	f04f 0800 	mov.w	r8, #0
 80066a6:	f104 0919 	add.w	r9, r4, #25
 80066aa:	e7f4      	b.n	8006696 <_printf_float+0x41e>

080066ac <_printf_common>:
 80066ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	4616      	mov	r6, r2
 80066b2:	4699      	mov	r9, r3
 80066b4:	688a      	ldr	r2, [r1, #8]
 80066b6:	690b      	ldr	r3, [r1, #16]
 80066b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066bc:	4293      	cmp	r3, r2
 80066be:	bfb8      	it	lt
 80066c0:	4613      	movlt	r3, r2
 80066c2:	6033      	str	r3, [r6, #0]
 80066c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066c8:	4607      	mov	r7, r0
 80066ca:	460c      	mov	r4, r1
 80066cc:	b10a      	cbz	r2, 80066d2 <_printf_common+0x26>
 80066ce:	3301      	adds	r3, #1
 80066d0:	6033      	str	r3, [r6, #0]
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	0699      	lsls	r1, r3, #26
 80066d6:	bf42      	ittt	mi
 80066d8:	6833      	ldrmi	r3, [r6, #0]
 80066da:	3302      	addmi	r3, #2
 80066dc:	6033      	strmi	r3, [r6, #0]
 80066de:	6825      	ldr	r5, [r4, #0]
 80066e0:	f015 0506 	ands.w	r5, r5, #6
 80066e4:	d106      	bne.n	80066f4 <_printf_common+0x48>
 80066e6:	f104 0a19 	add.w	sl, r4, #25
 80066ea:	68e3      	ldr	r3, [r4, #12]
 80066ec:	6832      	ldr	r2, [r6, #0]
 80066ee:	1a9b      	subs	r3, r3, r2
 80066f0:	42ab      	cmp	r3, r5
 80066f2:	dc26      	bgt.n	8006742 <_printf_common+0x96>
 80066f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066f8:	1e13      	subs	r3, r2, #0
 80066fa:	6822      	ldr	r2, [r4, #0]
 80066fc:	bf18      	it	ne
 80066fe:	2301      	movne	r3, #1
 8006700:	0692      	lsls	r2, r2, #26
 8006702:	d42b      	bmi.n	800675c <_printf_common+0xb0>
 8006704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006708:	4649      	mov	r1, r9
 800670a:	4638      	mov	r0, r7
 800670c:	47c0      	blx	r8
 800670e:	3001      	adds	r0, #1
 8006710:	d01e      	beq.n	8006750 <_printf_common+0xa4>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	6922      	ldr	r2, [r4, #16]
 8006716:	f003 0306 	and.w	r3, r3, #6
 800671a:	2b04      	cmp	r3, #4
 800671c:	bf02      	ittt	eq
 800671e:	68e5      	ldreq	r5, [r4, #12]
 8006720:	6833      	ldreq	r3, [r6, #0]
 8006722:	1aed      	subeq	r5, r5, r3
 8006724:	68a3      	ldr	r3, [r4, #8]
 8006726:	bf0c      	ite	eq
 8006728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800672c:	2500      	movne	r5, #0
 800672e:	4293      	cmp	r3, r2
 8006730:	bfc4      	itt	gt
 8006732:	1a9b      	subgt	r3, r3, r2
 8006734:	18ed      	addgt	r5, r5, r3
 8006736:	2600      	movs	r6, #0
 8006738:	341a      	adds	r4, #26
 800673a:	42b5      	cmp	r5, r6
 800673c:	d11a      	bne.n	8006774 <_printf_common+0xc8>
 800673e:	2000      	movs	r0, #0
 8006740:	e008      	b.n	8006754 <_printf_common+0xa8>
 8006742:	2301      	movs	r3, #1
 8006744:	4652      	mov	r2, sl
 8006746:	4649      	mov	r1, r9
 8006748:	4638      	mov	r0, r7
 800674a:	47c0      	blx	r8
 800674c:	3001      	adds	r0, #1
 800674e:	d103      	bne.n	8006758 <_printf_common+0xac>
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006758:	3501      	adds	r5, #1
 800675a:	e7c6      	b.n	80066ea <_printf_common+0x3e>
 800675c:	18e1      	adds	r1, r4, r3
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	2030      	movs	r0, #48	; 0x30
 8006762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006766:	4422      	add	r2, r4
 8006768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800676c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006770:	3302      	adds	r3, #2
 8006772:	e7c7      	b.n	8006704 <_printf_common+0x58>
 8006774:	2301      	movs	r3, #1
 8006776:	4622      	mov	r2, r4
 8006778:	4649      	mov	r1, r9
 800677a:	4638      	mov	r0, r7
 800677c:	47c0      	blx	r8
 800677e:	3001      	adds	r0, #1
 8006780:	d0e6      	beq.n	8006750 <_printf_common+0xa4>
 8006782:	3601      	adds	r6, #1
 8006784:	e7d9      	b.n	800673a <_printf_common+0x8e>
	...

08006788 <_printf_i>:
 8006788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800678c:	7e0f      	ldrb	r7, [r1, #24]
 800678e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006790:	2f78      	cmp	r7, #120	; 0x78
 8006792:	4691      	mov	r9, r2
 8006794:	4680      	mov	r8, r0
 8006796:	460c      	mov	r4, r1
 8006798:	469a      	mov	sl, r3
 800679a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800679e:	d807      	bhi.n	80067b0 <_printf_i+0x28>
 80067a0:	2f62      	cmp	r7, #98	; 0x62
 80067a2:	d80a      	bhi.n	80067ba <_printf_i+0x32>
 80067a4:	2f00      	cmp	r7, #0
 80067a6:	f000 80d4 	beq.w	8006952 <_printf_i+0x1ca>
 80067aa:	2f58      	cmp	r7, #88	; 0x58
 80067ac:	f000 80c0 	beq.w	8006930 <_printf_i+0x1a8>
 80067b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067b8:	e03a      	b.n	8006830 <_printf_i+0xa8>
 80067ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067be:	2b15      	cmp	r3, #21
 80067c0:	d8f6      	bhi.n	80067b0 <_printf_i+0x28>
 80067c2:	a101      	add	r1, pc, #4	; (adr r1, 80067c8 <_printf_i+0x40>)
 80067c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c8:	08006821 	.word	0x08006821
 80067cc:	08006835 	.word	0x08006835
 80067d0:	080067b1 	.word	0x080067b1
 80067d4:	080067b1 	.word	0x080067b1
 80067d8:	080067b1 	.word	0x080067b1
 80067dc:	080067b1 	.word	0x080067b1
 80067e0:	08006835 	.word	0x08006835
 80067e4:	080067b1 	.word	0x080067b1
 80067e8:	080067b1 	.word	0x080067b1
 80067ec:	080067b1 	.word	0x080067b1
 80067f0:	080067b1 	.word	0x080067b1
 80067f4:	08006939 	.word	0x08006939
 80067f8:	08006861 	.word	0x08006861
 80067fc:	080068f3 	.word	0x080068f3
 8006800:	080067b1 	.word	0x080067b1
 8006804:	080067b1 	.word	0x080067b1
 8006808:	0800695b 	.word	0x0800695b
 800680c:	080067b1 	.word	0x080067b1
 8006810:	08006861 	.word	0x08006861
 8006814:	080067b1 	.word	0x080067b1
 8006818:	080067b1 	.word	0x080067b1
 800681c:	080068fb 	.word	0x080068fb
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	1d1a      	adds	r2, r3, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	602a      	str	r2, [r5, #0]
 8006828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800682c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006830:	2301      	movs	r3, #1
 8006832:	e09f      	b.n	8006974 <_printf_i+0x1ec>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	682b      	ldr	r3, [r5, #0]
 8006838:	0607      	lsls	r7, r0, #24
 800683a:	f103 0104 	add.w	r1, r3, #4
 800683e:	6029      	str	r1, [r5, #0]
 8006840:	d501      	bpl.n	8006846 <_printf_i+0xbe>
 8006842:	681e      	ldr	r6, [r3, #0]
 8006844:	e003      	b.n	800684e <_printf_i+0xc6>
 8006846:	0646      	lsls	r6, r0, #25
 8006848:	d5fb      	bpl.n	8006842 <_printf_i+0xba>
 800684a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800684e:	2e00      	cmp	r6, #0
 8006850:	da03      	bge.n	800685a <_printf_i+0xd2>
 8006852:	232d      	movs	r3, #45	; 0x2d
 8006854:	4276      	negs	r6, r6
 8006856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685a:	485a      	ldr	r0, [pc, #360]	; (80069c4 <_printf_i+0x23c>)
 800685c:	230a      	movs	r3, #10
 800685e:	e012      	b.n	8006886 <_printf_i+0xfe>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	6820      	ldr	r0, [r4, #0]
 8006864:	1d19      	adds	r1, r3, #4
 8006866:	6029      	str	r1, [r5, #0]
 8006868:	0605      	lsls	r5, r0, #24
 800686a:	d501      	bpl.n	8006870 <_printf_i+0xe8>
 800686c:	681e      	ldr	r6, [r3, #0]
 800686e:	e002      	b.n	8006876 <_printf_i+0xee>
 8006870:	0641      	lsls	r1, r0, #25
 8006872:	d5fb      	bpl.n	800686c <_printf_i+0xe4>
 8006874:	881e      	ldrh	r6, [r3, #0]
 8006876:	4853      	ldr	r0, [pc, #332]	; (80069c4 <_printf_i+0x23c>)
 8006878:	2f6f      	cmp	r7, #111	; 0x6f
 800687a:	bf0c      	ite	eq
 800687c:	2308      	moveq	r3, #8
 800687e:	230a      	movne	r3, #10
 8006880:	2100      	movs	r1, #0
 8006882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006886:	6865      	ldr	r5, [r4, #4]
 8006888:	60a5      	str	r5, [r4, #8]
 800688a:	2d00      	cmp	r5, #0
 800688c:	bfa2      	ittt	ge
 800688e:	6821      	ldrge	r1, [r4, #0]
 8006890:	f021 0104 	bicge.w	r1, r1, #4
 8006894:	6021      	strge	r1, [r4, #0]
 8006896:	b90e      	cbnz	r6, 800689c <_printf_i+0x114>
 8006898:	2d00      	cmp	r5, #0
 800689a:	d04b      	beq.n	8006934 <_printf_i+0x1ac>
 800689c:	4615      	mov	r5, r2
 800689e:	fbb6 f1f3 	udiv	r1, r6, r3
 80068a2:	fb03 6711 	mls	r7, r3, r1, r6
 80068a6:	5dc7      	ldrb	r7, [r0, r7]
 80068a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068ac:	4637      	mov	r7, r6
 80068ae:	42bb      	cmp	r3, r7
 80068b0:	460e      	mov	r6, r1
 80068b2:	d9f4      	bls.n	800689e <_printf_i+0x116>
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d10b      	bne.n	80068d0 <_printf_i+0x148>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	07de      	lsls	r6, r3, #31
 80068bc:	d508      	bpl.n	80068d0 <_printf_i+0x148>
 80068be:	6923      	ldr	r3, [r4, #16]
 80068c0:	6861      	ldr	r1, [r4, #4]
 80068c2:	4299      	cmp	r1, r3
 80068c4:	bfde      	ittt	le
 80068c6:	2330      	movle	r3, #48	; 0x30
 80068c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068d0:	1b52      	subs	r2, r2, r5
 80068d2:	6122      	str	r2, [r4, #16]
 80068d4:	f8cd a000 	str.w	sl, [sp]
 80068d8:	464b      	mov	r3, r9
 80068da:	aa03      	add	r2, sp, #12
 80068dc:	4621      	mov	r1, r4
 80068de:	4640      	mov	r0, r8
 80068e0:	f7ff fee4 	bl	80066ac <_printf_common>
 80068e4:	3001      	adds	r0, #1
 80068e6:	d14a      	bne.n	800697e <_printf_i+0x1f6>
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	b004      	add	sp, #16
 80068ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	f043 0320 	orr.w	r3, r3, #32
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	4833      	ldr	r0, [pc, #204]	; (80069c8 <_printf_i+0x240>)
 80068fc:	2778      	movs	r7, #120	; 0x78
 80068fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	6829      	ldr	r1, [r5, #0]
 8006906:	061f      	lsls	r7, r3, #24
 8006908:	f851 6b04 	ldr.w	r6, [r1], #4
 800690c:	d402      	bmi.n	8006914 <_printf_i+0x18c>
 800690e:	065f      	lsls	r7, r3, #25
 8006910:	bf48      	it	mi
 8006912:	b2b6      	uxthmi	r6, r6
 8006914:	07df      	lsls	r7, r3, #31
 8006916:	bf48      	it	mi
 8006918:	f043 0320 	orrmi.w	r3, r3, #32
 800691c:	6029      	str	r1, [r5, #0]
 800691e:	bf48      	it	mi
 8006920:	6023      	strmi	r3, [r4, #0]
 8006922:	b91e      	cbnz	r6, 800692c <_printf_i+0x1a4>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	f023 0320 	bic.w	r3, r3, #32
 800692a:	6023      	str	r3, [r4, #0]
 800692c:	2310      	movs	r3, #16
 800692e:	e7a7      	b.n	8006880 <_printf_i+0xf8>
 8006930:	4824      	ldr	r0, [pc, #144]	; (80069c4 <_printf_i+0x23c>)
 8006932:	e7e4      	b.n	80068fe <_printf_i+0x176>
 8006934:	4615      	mov	r5, r2
 8006936:	e7bd      	b.n	80068b4 <_printf_i+0x12c>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	6826      	ldr	r6, [r4, #0]
 800693c:	6961      	ldr	r1, [r4, #20]
 800693e:	1d18      	adds	r0, r3, #4
 8006940:	6028      	str	r0, [r5, #0]
 8006942:	0635      	lsls	r5, r6, #24
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	d501      	bpl.n	800694c <_printf_i+0x1c4>
 8006948:	6019      	str	r1, [r3, #0]
 800694a:	e002      	b.n	8006952 <_printf_i+0x1ca>
 800694c:	0670      	lsls	r0, r6, #25
 800694e:	d5fb      	bpl.n	8006948 <_printf_i+0x1c0>
 8006950:	8019      	strh	r1, [r3, #0]
 8006952:	2300      	movs	r3, #0
 8006954:	6123      	str	r3, [r4, #16]
 8006956:	4615      	mov	r5, r2
 8006958:	e7bc      	b.n	80068d4 <_printf_i+0x14c>
 800695a:	682b      	ldr	r3, [r5, #0]
 800695c:	1d1a      	adds	r2, r3, #4
 800695e:	602a      	str	r2, [r5, #0]
 8006960:	681d      	ldr	r5, [r3, #0]
 8006962:	6862      	ldr	r2, [r4, #4]
 8006964:	2100      	movs	r1, #0
 8006966:	4628      	mov	r0, r5
 8006968:	f7f9 fc6a 	bl	8000240 <memchr>
 800696c:	b108      	cbz	r0, 8006972 <_printf_i+0x1ea>
 800696e:	1b40      	subs	r0, r0, r5
 8006970:	6060      	str	r0, [r4, #4]
 8006972:	6863      	ldr	r3, [r4, #4]
 8006974:	6123      	str	r3, [r4, #16]
 8006976:	2300      	movs	r3, #0
 8006978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800697c:	e7aa      	b.n	80068d4 <_printf_i+0x14c>
 800697e:	6923      	ldr	r3, [r4, #16]
 8006980:	462a      	mov	r2, r5
 8006982:	4649      	mov	r1, r9
 8006984:	4640      	mov	r0, r8
 8006986:	47d0      	blx	sl
 8006988:	3001      	adds	r0, #1
 800698a:	d0ad      	beq.n	80068e8 <_printf_i+0x160>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	079b      	lsls	r3, r3, #30
 8006990:	d413      	bmi.n	80069ba <_printf_i+0x232>
 8006992:	68e0      	ldr	r0, [r4, #12]
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	4298      	cmp	r0, r3
 8006998:	bfb8      	it	lt
 800699a:	4618      	movlt	r0, r3
 800699c:	e7a6      	b.n	80068ec <_printf_i+0x164>
 800699e:	2301      	movs	r3, #1
 80069a0:	4632      	mov	r2, r6
 80069a2:	4649      	mov	r1, r9
 80069a4:	4640      	mov	r0, r8
 80069a6:	47d0      	blx	sl
 80069a8:	3001      	adds	r0, #1
 80069aa:	d09d      	beq.n	80068e8 <_printf_i+0x160>
 80069ac:	3501      	adds	r5, #1
 80069ae:	68e3      	ldr	r3, [r4, #12]
 80069b0:	9903      	ldr	r1, [sp, #12]
 80069b2:	1a5b      	subs	r3, r3, r1
 80069b4:	42ab      	cmp	r3, r5
 80069b6:	dcf2      	bgt.n	800699e <_printf_i+0x216>
 80069b8:	e7eb      	b.n	8006992 <_printf_i+0x20a>
 80069ba:	2500      	movs	r5, #0
 80069bc:	f104 0619 	add.w	r6, r4, #25
 80069c0:	e7f5      	b.n	80069ae <_printf_i+0x226>
 80069c2:	bf00      	nop
 80069c4:	0800a8cf 	.word	0x0800a8cf
 80069c8:	0800a8e0 	.word	0x0800a8e0

080069cc <_scanf_float>:
 80069cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d0:	b087      	sub	sp, #28
 80069d2:	4617      	mov	r7, r2
 80069d4:	9303      	str	r3, [sp, #12]
 80069d6:	688b      	ldr	r3, [r1, #8]
 80069d8:	1e5a      	subs	r2, r3, #1
 80069da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80069de:	bf83      	ittte	hi
 80069e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80069e4:	195b      	addhi	r3, r3, r5
 80069e6:	9302      	strhi	r3, [sp, #8]
 80069e8:	2300      	movls	r3, #0
 80069ea:	bf86      	itte	hi
 80069ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80069f0:	608b      	strhi	r3, [r1, #8]
 80069f2:	9302      	strls	r3, [sp, #8]
 80069f4:	680b      	ldr	r3, [r1, #0]
 80069f6:	468b      	mov	fp, r1
 80069f8:	2500      	movs	r5, #0
 80069fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80069fe:	f84b 3b1c 	str.w	r3, [fp], #28
 8006a02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a06:	4680      	mov	r8, r0
 8006a08:	460c      	mov	r4, r1
 8006a0a:	465e      	mov	r6, fp
 8006a0c:	46aa      	mov	sl, r5
 8006a0e:	46a9      	mov	r9, r5
 8006a10:	9501      	str	r5, [sp, #4]
 8006a12:	68a2      	ldr	r2, [r4, #8]
 8006a14:	b152      	cbz	r2, 8006a2c <_scanf_float+0x60>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	2b4e      	cmp	r3, #78	; 0x4e
 8006a1c:	d864      	bhi.n	8006ae8 <_scanf_float+0x11c>
 8006a1e:	2b40      	cmp	r3, #64	; 0x40
 8006a20:	d83c      	bhi.n	8006a9c <_scanf_float+0xd0>
 8006a22:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006a26:	b2c8      	uxtb	r0, r1
 8006a28:	280e      	cmp	r0, #14
 8006a2a:	d93a      	bls.n	8006aa2 <_scanf_float+0xd6>
 8006a2c:	f1b9 0f00 	cmp.w	r9, #0
 8006a30:	d003      	beq.n	8006a3a <_scanf_float+0x6e>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a3e:	f1ba 0f01 	cmp.w	sl, #1
 8006a42:	f200 8113 	bhi.w	8006c6c <_scanf_float+0x2a0>
 8006a46:	455e      	cmp	r6, fp
 8006a48:	f200 8105 	bhi.w	8006c56 <_scanf_float+0x28a>
 8006a4c:	2501      	movs	r5, #1
 8006a4e:	4628      	mov	r0, r5
 8006a50:	b007      	add	sp, #28
 8006a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a56:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006a5a:	2a0d      	cmp	r2, #13
 8006a5c:	d8e6      	bhi.n	8006a2c <_scanf_float+0x60>
 8006a5e:	a101      	add	r1, pc, #4	; (adr r1, 8006a64 <_scanf_float+0x98>)
 8006a60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a64:	08006ba3 	.word	0x08006ba3
 8006a68:	08006a2d 	.word	0x08006a2d
 8006a6c:	08006a2d 	.word	0x08006a2d
 8006a70:	08006a2d 	.word	0x08006a2d
 8006a74:	08006c03 	.word	0x08006c03
 8006a78:	08006bdb 	.word	0x08006bdb
 8006a7c:	08006a2d 	.word	0x08006a2d
 8006a80:	08006a2d 	.word	0x08006a2d
 8006a84:	08006bb1 	.word	0x08006bb1
 8006a88:	08006a2d 	.word	0x08006a2d
 8006a8c:	08006a2d 	.word	0x08006a2d
 8006a90:	08006a2d 	.word	0x08006a2d
 8006a94:	08006a2d 	.word	0x08006a2d
 8006a98:	08006b69 	.word	0x08006b69
 8006a9c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006aa0:	e7db      	b.n	8006a5a <_scanf_float+0x8e>
 8006aa2:	290e      	cmp	r1, #14
 8006aa4:	d8c2      	bhi.n	8006a2c <_scanf_float+0x60>
 8006aa6:	a001      	add	r0, pc, #4	; (adr r0, 8006aac <_scanf_float+0xe0>)
 8006aa8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006aac:	08006b5b 	.word	0x08006b5b
 8006ab0:	08006a2d 	.word	0x08006a2d
 8006ab4:	08006b5b 	.word	0x08006b5b
 8006ab8:	08006bef 	.word	0x08006bef
 8006abc:	08006a2d 	.word	0x08006a2d
 8006ac0:	08006b09 	.word	0x08006b09
 8006ac4:	08006b45 	.word	0x08006b45
 8006ac8:	08006b45 	.word	0x08006b45
 8006acc:	08006b45 	.word	0x08006b45
 8006ad0:	08006b45 	.word	0x08006b45
 8006ad4:	08006b45 	.word	0x08006b45
 8006ad8:	08006b45 	.word	0x08006b45
 8006adc:	08006b45 	.word	0x08006b45
 8006ae0:	08006b45 	.word	0x08006b45
 8006ae4:	08006b45 	.word	0x08006b45
 8006ae8:	2b6e      	cmp	r3, #110	; 0x6e
 8006aea:	d809      	bhi.n	8006b00 <_scanf_float+0x134>
 8006aec:	2b60      	cmp	r3, #96	; 0x60
 8006aee:	d8b2      	bhi.n	8006a56 <_scanf_float+0x8a>
 8006af0:	2b54      	cmp	r3, #84	; 0x54
 8006af2:	d077      	beq.n	8006be4 <_scanf_float+0x218>
 8006af4:	2b59      	cmp	r3, #89	; 0x59
 8006af6:	d199      	bne.n	8006a2c <_scanf_float+0x60>
 8006af8:	2d07      	cmp	r5, #7
 8006afa:	d197      	bne.n	8006a2c <_scanf_float+0x60>
 8006afc:	2508      	movs	r5, #8
 8006afe:	e029      	b.n	8006b54 <_scanf_float+0x188>
 8006b00:	2b74      	cmp	r3, #116	; 0x74
 8006b02:	d06f      	beq.n	8006be4 <_scanf_float+0x218>
 8006b04:	2b79      	cmp	r3, #121	; 0x79
 8006b06:	e7f6      	b.n	8006af6 <_scanf_float+0x12a>
 8006b08:	6821      	ldr	r1, [r4, #0]
 8006b0a:	05c8      	lsls	r0, r1, #23
 8006b0c:	d51a      	bpl.n	8006b44 <_scanf_float+0x178>
 8006b0e:	9b02      	ldr	r3, [sp, #8]
 8006b10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b14:	6021      	str	r1, [r4, #0]
 8006b16:	f109 0901 	add.w	r9, r9, #1
 8006b1a:	b11b      	cbz	r3, 8006b24 <_scanf_float+0x158>
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	3201      	adds	r2, #1
 8006b20:	9302      	str	r3, [sp, #8]
 8006b22:	60a2      	str	r2, [r4, #8]
 8006b24:	68a3      	ldr	r3, [r4, #8]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	60a3      	str	r3, [r4, #8]
 8006b2a:	6923      	ldr	r3, [r4, #16]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	6123      	str	r3, [r4, #16]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	607b      	str	r3, [r7, #4]
 8006b38:	f340 8084 	ble.w	8006c44 <_scanf_float+0x278>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	603b      	str	r3, [r7, #0]
 8006b42:	e766      	b.n	8006a12 <_scanf_float+0x46>
 8006b44:	eb1a 0f05 	cmn.w	sl, r5
 8006b48:	f47f af70 	bne.w	8006a2c <_scanf_float+0x60>
 8006b4c:	6822      	ldr	r2, [r4, #0]
 8006b4e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006b52:	6022      	str	r2, [r4, #0]
 8006b54:	f806 3b01 	strb.w	r3, [r6], #1
 8006b58:	e7e4      	b.n	8006b24 <_scanf_float+0x158>
 8006b5a:	6822      	ldr	r2, [r4, #0]
 8006b5c:	0610      	lsls	r0, r2, #24
 8006b5e:	f57f af65 	bpl.w	8006a2c <_scanf_float+0x60>
 8006b62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b66:	e7f4      	b.n	8006b52 <_scanf_float+0x186>
 8006b68:	f1ba 0f00 	cmp.w	sl, #0
 8006b6c:	d10e      	bne.n	8006b8c <_scanf_float+0x1c0>
 8006b6e:	f1b9 0f00 	cmp.w	r9, #0
 8006b72:	d10e      	bne.n	8006b92 <_scanf_float+0x1c6>
 8006b74:	6822      	ldr	r2, [r4, #0]
 8006b76:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b7a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b7e:	d108      	bne.n	8006b92 <_scanf_float+0x1c6>
 8006b80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b84:	6022      	str	r2, [r4, #0]
 8006b86:	f04f 0a01 	mov.w	sl, #1
 8006b8a:	e7e3      	b.n	8006b54 <_scanf_float+0x188>
 8006b8c:	f1ba 0f02 	cmp.w	sl, #2
 8006b90:	d055      	beq.n	8006c3e <_scanf_float+0x272>
 8006b92:	2d01      	cmp	r5, #1
 8006b94:	d002      	beq.n	8006b9c <_scanf_float+0x1d0>
 8006b96:	2d04      	cmp	r5, #4
 8006b98:	f47f af48 	bne.w	8006a2c <_scanf_float+0x60>
 8006b9c:	3501      	adds	r5, #1
 8006b9e:	b2ed      	uxtb	r5, r5
 8006ba0:	e7d8      	b.n	8006b54 <_scanf_float+0x188>
 8006ba2:	f1ba 0f01 	cmp.w	sl, #1
 8006ba6:	f47f af41 	bne.w	8006a2c <_scanf_float+0x60>
 8006baa:	f04f 0a02 	mov.w	sl, #2
 8006bae:	e7d1      	b.n	8006b54 <_scanf_float+0x188>
 8006bb0:	b97d      	cbnz	r5, 8006bd2 <_scanf_float+0x206>
 8006bb2:	f1b9 0f00 	cmp.w	r9, #0
 8006bb6:	f47f af3c 	bne.w	8006a32 <_scanf_float+0x66>
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006bc0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006bc4:	f47f af39 	bne.w	8006a3a <_scanf_float+0x6e>
 8006bc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bcc:	6022      	str	r2, [r4, #0]
 8006bce:	2501      	movs	r5, #1
 8006bd0:	e7c0      	b.n	8006b54 <_scanf_float+0x188>
 8006bd2:	2d03      	cmp	r5, #3
 8006bd4:	d0e2      	beq.n	8006b9c <_scanf_float+0x1d0>
 8006bd6:	2d05      	cmp	r5, #5
 8006bd8:	e7de      	b.n	8006b98 <_scanf_float+0x1cc>
 8006bda:	2d02      	cmp	r5, #2
 8006bdc:	f47f af26 	bne.w	8006a2c <_scanf_float+0x60>
 8006be0:	2503      	movs	r5, #3
 8006be2:	e7b7      	b.n	8006b54 <_scanf_float+0x188>
 8006be4:	2d06      	cmp	r5, #6
 8006be6:	f47f af21 	bne.w	8006a2c <_scanf_float+0x60>
 8006bea:	2507      	movs	r5, #7
 8006bec:	e7b2      	b.n	8006b54 <_scanf_float+0x188>
 8006bee:	6822      	ldr	r2, [r4, #0]
 8006bf0:	0591      	lsls	r1, r2, #22
 8006bf2:	f57f af1b 	bpl.w	8006a2c <_scanf_float+0x60>
 8006bf6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006bfa:	6022      	str	r2, [r4, #0]
 8006bfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c00:	e7a8      	b.n	8006b54 <_scanf_float+0x188>
 8006c02:	6822      	ldr	r2, [r4, #0]
 8006c04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006c08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c0c:	d006      	beq.n	8006c1c <_scanf_float+0x250>
 8006c0e:	0550      	lsls	r0, r2, #21
 8006c10:	f57f af0c 	bpl.w	8006a2c <_scanf_float+0x60>
 8006c14:	f1b9 0f00 	cmp.w	r9, #0
 8006c18:	f43f af0f 	beq.w	8006a3a <_scanf_float+0x6e>
 8006c1c:	0591      	lsls	r1, r2, #22
 8006c1e:	bf58      	it	pl
 8006c20:	9901      	ldrpl	r1, [sp, #4]
 8006c22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c26:	bf58      	it	pl
 8006c28:	eba9 0101 	subpl.w	r1, r9, r1
 8006c2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006c30:	bf58      	it	pl
 8006c32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c36:	6022      	str	r2, [r4, #0]
 8006c38:	f04f 0900 	mov.w	r9, #0
 8006c3c:	e78a      	b.n	8006b54 <_scanf_float+0x188>
 8006c3e:	f04f 0a03 	mov.w	sl, #3
 8006c42:	e787      	b.n	8006b54 <_scanf_float+0x188>
 8006c44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c48:	4639      	mov	r1, r7
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	4798      	blx	r3
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	f43f aedf 	beq.w	8006a12 <_scanf_float+0x46>
 8006c54:	e6ea      	b.n	8006a2c <_scanf_float+0x60>
 8006c56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c5e:	463a      	mov	r2, r7
 8006c60:	4640      	mov	r0, r8
 8006c62:	4798      	blx	r3
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	6123      	str	r3, [r4, #16]
 8006c6a:	e6ec      	b.n	8006a46 <_scanf_float+0x7a>
 8006c6c:	1e6b      	subs	r3, r5, #1
 8006c6e:	2b06      	cmp	r3, #6
 8006c70:	d825      	bhi.n	8006cbe <_scanf_float+0x2f2>
 8006c72:	2d02      	cmp	r5, #2
 8006c74:	d836      	bhi.n	8006ce4 <_scanf_float+0x318>
 8006c76:	455e      	cmp	r6, fp
 8006c78:	f67f aee8 	bls.w	8006a4c <_scanf_float+0x80>
 8006c7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c84:	463a      	mov	r2, r7
 8006c86:	4640      	mov	r0, r8
 8006c88:	4798      	blx	r3
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	6123      	str	r3, [r4, #16]
 8006c90:	e7f1      	b.n	8006c76 <_scanf_float+0x2aa>
 8006c92:	9802      	ldr	r0, [sp, #8]
 8006c94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006c9c:	9002      	str	r0, [sp, #8]
 8006c9e:	463a      	mov	r2, r7
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	4798      	blx	r3
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	6123      	str	r3, [r4, #16]
 8006caa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cae:	fa5f fa8a 	uxtb.w	sl, sl
 8006cb2:	f1ba 0f02 	cmp.w	sl, #2
 8006cb6:	d1ec      	bne.n	8006c92 <_scanf_float+0x2c6>
 8006cb8:	3d03      	subs	r5, #3
 8006cba:	b2ed      	uxtb	r5, r5
 8006cbc:	1b76      	subs	r6, r6, r5
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	05da      	lsls	r2, r3, #23
 8006cc2:	d52f      	bpl.n	8006d24 <_scanf_float+0x358>
 8006cc4:	055b      	lsls	r3, r3, #21
 8006cc6:	d510      	bpl.n	8006cea <_scanf_float+0x31e>
 8006cc8:	455e      	cmp	r6, fp
 8006cca:	f67f aebf 	bls.w	8006a4c <_scanf_float+0x80>
 8006cce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cd6:	463a      	mov	r2, r7
 8006cd8:	4640      	mov	r0, r8
 8006cda:	4798      	blx	r3
 8006cdc:	6923      	ldr	r3, [r4, #16]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	6123      	str	r3, [r4, #16]
 8006ce2:	e7f1      	b.n	8006cc8 <_scanf_float+0x2fc>
 8006ce4:	46aa      	mov	sl, r5
 8006ce6:	9602      	str	r6, [sp, #8]
 8006ce8:	e7df      	b.n	8006caa <_scanf_float+0x2de>
 8006cea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006cee:	6923      	ldr	r3, [r4, #16]
 8006cf0:	2965      	cmp	r1, #101	; 0x65
 8006cf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006cf6:	f106 35ff 	add.w	r5, r6, #4294967295
 8006cfa:	6123      	str	r3, [r4, #16]
 8006cfc:	d00c      	beq.n	8006d18 <_scanf_float+0x34c>
 8006cfe:	2945      	cmp	r1, #69	; 0x45
 8006d00:	d00a      	beq.n	8006d18 <_scanf_float+0x34c>
 8006d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d06:	463a      	mov	r2, r7
 8006d08:	4640      	mov	r0, r8
 8006d0a:	4798      	blx	r3
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	1eb5      	subs	r5, r6, #2
 8006d16:	6123      	str	r3, [r4, #16]
 8006d18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d1c:	463a      	mov	r2, r7
 8006d1e:	4640      	mov	r0, r8
 8006d20:	4798      	blx	r3
 8006d22:	462e      	mov	r6, r5
 8006d24:	6825      	ldr	r5, [r4, #0]
 8006d26:	f015 0510 	ands.w	r5, r5, #16
 8006d2a:	d14d      	bne.n	8006dc8 <_scanf_float+0x3fc>
 8006d2c:	7035      	strb	r5, [r6, #0]
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d38:	d11a      	bne.n	8006d70 <_scanf_float+0x3a4>
 8006d3a:	9b01      	ldr	r3, [sp, #4]
 8006d3c:	454b      	cmp	r3, r9
 8006d3e:	eba3 0209 	sub.w	r2, r3, r9
 8006d42:	d122      	bne.n	8006d8a <_scanf_float+0x3be>
 8006d44:	2200      	movs	r2, #0
 8006d46:	4659      	mov	r1, fp
 8006d48:	4640      	mov	r0, r8
 8006d4a:	f002 fc73 	bl	8009634 <_strtod_r>
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	6821      	ldr	r1, [r4, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f011 0f02 	tst.w	r1, #2
 8006d58:	f103 0204 	add.w	r2, r3, #4
 8006d5c:	d020      	beq.n	8006da0 <_scanf_float+0x3d4>
 8006d5e:	9903      	ldr	r1, [sp, #12]
 8006d60:	600a      	str	r2, [r1, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	ed83 0b00 	vstr	d0, [r3]
 8006d68:	68e3      	ldr	r3, [r4, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60e3      	str	r3, [r4, #12]
 8006d6e:	e66e      	b.n	8006a4e <_scanf_float+0x82>
 8006d70:	9b04      	ldr	r3, [sp, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0e6      	beq.n	8006d44 <_scanf_float+0x378>
 8006d76:	9905      	ldr	r1, [sp, #20]
 8006d78:	230a      	movs	r3, #10
 8006d7a:	462a      	mov	r2, r5
 8006d7c:	3101      	adds	r1, #1
 8006d7e:	4640      	mov	r0, r8
 8006d80:	f7ff f9e6 	bl	8006150 <_strtol_r>
 8006d84:	9b04      	ldr	r3, [sp, #16]
 8006d86:	9e05      	ldr	r6, [sp, #20]
 8006d88:	1ac2      	subs	r2, r0, r3
 8006d8a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d8e:	429e      	cmp	r6, r3
 8006d90:	bf28      	it	cs
 8006d92:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006d96:	490d      	ldr	r1, [pc, #52]	; (8006dcc <_scanf_float+0x400>)
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f000 f9f9 	bl	8007190 <siprintf>
 8006d9e:	e7d1      	b.n	8006d44 <_scanf_float+0x378>
 8006da0:	f011 0f04 	tst.w	r1, #4
 8006da4:	9903      	ldr	r1, [sp, #12]
 8006da6:	600a      	str	r2, [r1, #0]
 8006da8:	d1db      	bne.n	8006d62 <_scanf_float+0x396>
 8006daa:	eeb4 0b40 	vcmp.f64	d0, d0
 8006dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db2:	681e      	ldr	r6, [r3, #0]
 8006db4:	d705      	bvc.n	8006dc2 <_scanf_float+0x3f6>
 8006db6:	4806      	ldr	r0, [pc, #24]	; (8006dd0 <_scanf_float+0x404>)
 8006db8:	f000 fb80 	bl	80074bc <nanf>
 8006dbc:	ed86 0a00 	vstr	s0, [r6]
 8006dc0:	e7d2      	b.n	8006d68 <_scanf_float+0x39c>
 8006dc2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006dc6:	e7f9      	b.n	8006dbc <_scanf_float+0x3f0>
 8006dc8:	2500      	movs	r5, #0
 8006dca:	e640      	b.n	8006a4e <_scanf_float+0x82>
 8006dcc:	0800a8f1 	.word	0x0800a8f1
 8006dd0:	0800ab84 	.word	0x0800ab84

08006dd4 <std>:
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	4604      	mov	r4, r0
 8006dda:	e9c0 3300 	strd	r3, r3, [r0]
 8006dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006de2:	6083      	str	r3, [r0, #8]
 8006de4:	8181      	strh	r1, [r0, #12]
 8006de6:	6643      	str	r3, [r0, #100]	; 0x64
 8006de8:	81c2      	strh	r2, [r0, #14]
 8006dea:	6183      	str	r3, [r0, #24]
 8006dec:	4619      	mov	r1, r3
 8006dee:	2208      	movs	r2, #8
 8006df0:	305c      	adds	r0, #92	; 0x5c
 8006df2:	f000 fac5 	bl	8007380 <memset>
 8006df6:	4b0d      	ldr	r3, [pc, #52]	; (8006e2c <std+0x58>)
 8006df8:	6263      	str	r3, [r4, #36]	; 0x24
 8006dfa:	4b0d      	ldr	r3, [pc, #52]	; (8006e30 <std+0x5c>)
 8006dfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006dfe:	4b0d      	ldr	r3, [pc, #52]	; (8006e34 <std+0x60>)
 8006e00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e02:	4b0d      	ldr	r3, [pc, #52]	; (8006e38 <std+0x64>)
 8006e04:	6323      	str	r3, [r4, #48]	; 0x30
 8006e06:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <std+0x68>)
 8006e08:	6224      	str	r4, [r4, #32]
 8006e0a:	429c      	cmp	r4, r3
 8006e0c:	d006      	beq.n	8006e1c <std+0x48>
 8006e0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006e12:	4294      	cmp	r4, r2
 8006e14:	d002      	beq.n	8006e1c <std+0x48>
 8006e16:	33d0      	adds	r3, #208	; 0xd0
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	d105      	bne.n	8006e28 <std+0x54>
 8006e1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e24:	f000 bb38 	b.w	8007498 <__retarget_lock_init_recursive>
 8006e28:	bd10      	pop	{r4, pc}
 8006e2a:	bf00      	nop
 8006e2c:	080071d1 	.word	0x080071d1
 8006e30:	080071f3 	.word	0x080071f3
 8006e34:	0800722b 	.word	0x0800722b
 8006e38:	0800724f 	.word	0x0800724f
 8006e3c:	2000318c 	.word	0x2000318c

08006e40 <stdio_exit_handler>:
 8006e40:	4a02      	ldr	r2, [pc, #8]	; (8006e4c <stdio_exit_handler+0xc>)
 8006e42:	4903      	ldr	r1, [pc, #12]	; (8006e50 <stdio_exit_handler+0x10>)
 8006e44:	4803      	ldr	r0, [pc, #12]	; (8006e54 <stdio_exit_handler+0x14>)
 8006e46:	f000 b869 	b.w	8006f1c <_fwalk_sglue>
 8006e4a:	bf00      	nop
 8006e4c:	2000000c 	.word	0x2000000c
 8006e50:	08009c85 	.word	0x08009c85
 8006e54:	20000018 	.word	0x20000018

08006e58 <cleanup_stdio>:
 8006e58:	6841      	ldr	r1, [r0, #4]
 8006e5a:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <cleanup_stdio+0x34>)
 8006e5c:	4299      	cmp	r1, r3
 8006e5e:	b510      	push	{r4, lr}
 8006e60:	4604      	mov	r4, r0
 8006e62:	d001      	beq.n	8006e68 <cleanup_stdio+0x10>
 8006e64:	f002 ff0e 	bl	8009c84 <_fflush_r>
 8006e68:	68a1      	ldr	r1, [r4, #8]
 8006e6a:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <cleanup_stdio+0x38>)
 8006e6c:	4299      	cmp	r1, r3
 8006e6e:	d002      	beq.n	8006e76 <cleanup_stdio+0x1e>
 8006e70:	4620      	mov	r0, r4
 8006e72:	f002 ff07 	bl	8009c84 <_fflush_r>
 8006e76:	68e1      	ldr	r1, [r4, #12]
 8006e78:	4b06      	ldr	r3, [pc, #24]	; (8006e94 <cleanup_stdio+0x3c>)
 8006e7a:	4299      	cmp	r1, r3
 8006e7c:	d004      	beq.n	8006e88 <cleanup_stdio+0x30>
 8006e7e:	4620      	mov	r0, r4
 8006e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e84:	f002 befe 	b.w	8009c84 <_fflush_r>
 8006e88:	bd10      	pop	{r4, pc}
 8006e8a:	bf00      	nop
 8006e8c:	2000318c 	.word	0x2000318c
 8006e90:	200031f4 	.word	0x200031f4
 8006e94:	2000325c 	.word	0x2000325c

08006e98 <global_stdio_init.part.0>:
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ec8 <global_stdio_init.part.0+0x30>)
 8006e9c:	4c0b      	ldr	r4, [pc, #44]	; (8006ecc <global_stdio_init.part.0+0x34>)
 8006e9e:	4a0c      	ldr	r2, [pc, #48]	; (8006ed0 <global_stdio_init.part.0+0x38>)
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2104      	movs	r1, #4
 8006ea8:	f7ff ff94 	bl	8006dd4 <std>
 8006eac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	2109      	movs	r1, #9
 8006eb4:	f7ff ff8e 	bl	8006dd4 <std>
 8006eb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec2:	2112      	movs	r1, #18
 8006ec4:	f7ff bf86 	b.w	8006dd4 <std>
 8006ec8:	200032c4 	.word	0x200032c4
 8006ecc:	2000318c 	.word	0x2000318c
 8006ed0:	08006e41 	.word	0x08006e41

08006ed4 <__sfp_lock_acquire>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__sfp_lock_acquire+0x8>)
 8006ed6:	f000 bae0 	b.w	800749a <__retarget_lock_acquire_recursive>
 8006eda:	bf00      	nop
 8006edc:	200032cd 	.word	0x200032cd

08006ee0 <__sfp_lock_release>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	; (8006ee8 <__sfp_lock_release+0x8>)
 8006ee2:	f000 badb 	b.w	800749c <__retarget_lock_release_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	200032cd 	.word	0x200032cd

08006eec <__sinit>:
 8006eec:	b510      	push	{r4, lr}
 8006eee:	4604      	mov	r4, r0
 8006ef0:	f7ff fff0 	bl	8006ed4 <__sfp_lock_acquire>
 8006ef4:	6a23      	ldr	r3, [r4, #32]
 8006ef6:	b11b      	cbz	r3, 8006f00 <__sinit+0x14>
 8006ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006efc:	f7ff bff0 	b.w	8006ee0 <__sfp_lock_release>
 8006f00:	4b04      	ldr	r3, [pc, #16]	; (8006f14 <__sinit+0x28>)
 8006f02:	6223      	str	r3, [r4, #32]
 8006f04:	4b04      	ldr	r3, [pc, #16]	; (8006f18 <__sinit+0x2c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1f5      	bne.n	8006ef8 <__sinit+0xc>
 8006f0c:	f7ff ffc4 	bl	8006e98 <global_stdio_init.part.0>
 8006f10:	e7f2      	b.n	8006ef8 <__sinit+0xc>
 8006f12:	bf00      	nop
 8006f14:	08006e59 	.word	0x08006e59
 8006f18:	200032c4 	.word	0x200032c4

08006f1c <_fwalk_sglue>:
 8006f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f20:	4607      	mov	r7, r0
 8006f22:	4688      	mov	r8, r1
 8006f24:	4614      	mov	r4, r2
 8006f26:	2600      	movs	r6, #0
 8006f28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f2c:	f1b9 0901 	subs.w	r9, r9, #1
 8006f30:	d505      	bpl.n	8006f3e <_fwalk_sglue+0x22>
 8006f32:	6824      	ldr	r4, [r4, #0]
 8006f34:	2c00      	cmp	r4, #0
 8006f36:	d1f7      	bne.n	8006f28 <_fwalk_sglue+0xc>
 8006f38:	4630      	mov	r0, r6
 8006f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d907      	bls.n	8006f54 <_fwalk_sglue+0x38>
 8006f44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	d003      	beq.n	8006f54 <_fwalk_sglue+0x38>
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	4638      	mov	r0, r7
 8006f50:	47c0      	blx	r8
 8006f52:	4306      	orrs	r6, r0
 8006f54:	3568      	adds	r5, #104	; 0x68
 8006f56:	e7e9      	b.n	8006f2c <_fwalk_sglue+0x10>

08006f58 <iprintf>:
 8006f58:	b40f      	push	{r0, r1, r2, r3}
 8006f5a:	b507      	push	{r0, r1, r2, lr}
 8006f5c:	4906      	ldr	r1, [pc, #24]	; (8006f78 <iprintf+0x20>)
 8006f5e:	ab04      	add	r3, sp, #16
 8006f60:	6808      	ldr	r0, [r1, #0]
 8006f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f66:	6881      	ldr	r1, [r0, #8]
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	f002 fceb 	bl	8009944 <_vfiprintf_r>
 8006f6e:	b003      	add	sp, #12
 8006f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f74:	b004      	add	sp, #16
 8006f76:	4770      	bx	lr
 8006f78:	20000064 	.word	0x20000064

08006f7c <_puts_r>:
 8006f7c:	6a03      	ldr	r3, [r0, #32]
 8006f7e:	b570      	push	{r4, r5, r6, lr}
 8006f80:	6884      	ldr	r4, [r0, #8]
 8006f82:	4605      	mov	r5, r0
 8006f84:	460e      	mov	r6, r1
 8006f86:	b90b      	cbnz	r3, 8006f8c <_puts_r+0x10>
 8006f88:	f7ff ffb0 	bl	8006eec <__sinit>
 8006f8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f8e:	07db      	lsls	r3, r3, #31
 8006f90:	d405      	bmi.n	8006f9e <_puts_r+0x22>
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	0598      	lsls	r0, r3, #22
 8006f96:	d402      	bmi.n	8006f9e <_puts_r+0x22>
 8006f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f9a:	f000 fa7e 	bl	800749a <__retarget_lock_acquire_recursive>
 8006f9e:	89a3      	ldrh	r3, [r4, #12]
 8006fa0:	0719      	lsls	r1, r3, #28
 8006fa2:	d513      	bpl.n	8006fcc <_puts_r+0x50>
 8006fa4:	6923      	ldr	r3, [r4, #16]
 8006fa6:	b18b      	cbz	r3, 8006fcc <_puts_r+0x50>
 8006fa8:	3e01      	subs	r6, #1
 8006faa:	68a3      	ldr	r3, [r4, #8]
 8006fac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	60a3      	str	r3, [r4, #8]
 8006fb4:	b9e9      	cbnz	r1, 8006ff2 <_puts_r+0x76>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	da2e      	bge.n	8007018 <_puts_r+0x9c>
 8006fba:	4622      	mov	r2, r4
 8006fbc:	210a      	movs	r1, #10
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f000 f949 	bl	8007256 <__swbuf_r>
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d007      	beq.n	8006fd8 <_puts_r+0x5c>
 8006fc8:	250a      	movs	r5, #10
 8006fca:	e007      	b.n	8006fdc <_puts_r+0x60>
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f000 f97e 	bl	80072d0 <__swsetup_r>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d0e7      	beq.n	8006fa8 <_puts_r+0x2c>
 8006fd8:	f04f 35ff 	mov.w	r5, #4294967295
 8006fdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fde:	07da      	lsls	r2, r3, #31
 8006fe0:	d405      	bmi.n	8006fee <_puts_r+0x72>
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	059b      	lsls	r3, r3, #22
 8006fe6:	d402      	bmi.n	8006fee <_puts_r+0x72>
 8006fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fea:	f000 fa57 	bl	800749c <__retarget_lock_release_recursive>
 8006fee:	4628      	mov	r0, r5
 8006ff0:	bd70      	pop	{r4, r5, r6, pc}
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	da04      	bge.n	8007000 <_puts_r+0x84>
 8006ff6:	69a2      	ldr	r2, [r4, #24]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	dc06      	bgt.n	800700a <_puts_r+0x8e>
 8006ffc:	290a      	cmp	r1, #10
 8006ffe:	d004      	beq.n	800700a <_puts_r+0x8e>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	6022      	str	r2, [r4, #0]
 8007006:	7019      	strb	r1, [r3, #0]
 8007008:	e7cf      	b.n	8006faa <_puts_r+0x2e>
 800700a:	4622      	mov	r2, r4
 800700c:	4628      	mov	r0, r5
 800700e:	f000 f922 	bl	8007256 <__swbuf_r>
 8007012:	3001      	adds	r0, #1
 8007014:	d1c9      	bne.n	8006faa <_puts_r+0x2e>
 8007016:	e7df      	b.n	8006fd8 <_puts_r+0x5c>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	250a      	movs	r5, #10
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	6022      	str	r2, [r4, #0]
 8007020:	701d      	strb	r5, [r3, #0]
 8007022:	e7db      	b.n	8006fdc <_puts_r+0x60>

08007024 <puts>:
 8007024:	4b02      	ldr	r3, [pc, #8]	; (8007030 <puts+0xc>)
 8007026:	4601      	mov	r1, r0
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	f7ff bfa7 	b.w	8006f7c <_puts_r>
 800702e:	bf00      	nop
 8007030:	20000064 	.word	0x20000064

08007034 <setvbuf>:
 8007034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007038:	461d      	mov	r5, r3
 800703a:	4b54      	ldr	r3, [pc, #336]	; (800718c <setvbuf+0x158>)
 800703c:	681f      	ldr	r7, [r3, #0]
 800703e:	4604      	mov	r4, r0
 8007040:	460e      	mov	r6, r1
 8007042:	4690      	mov	r8, r2
 8007044:	b127      	cbz	r7, 8007050 <setvbuf+0x1c>
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	b913      	cbnz	r3, 8007050 <setvbuf+0x1c>
 800704a:	4638      	mov	r0, r7
 800704c:	f7ff ff4e 	bl	8006eec <__sinit>
 8007050:	f1b8 0f02 	cmp.w	r8, #2
 8007054:	d006      	beq.n	8007064 <setvbuf+0x30>
 8007056:	f1b8 0f01 	cmp.w	r8, #1
 800705a:	f200 8094 	bhi.w	8007186 <setvbuf+0x152>
 800705e:	2d00      	cmp	r5, #0
 8007060:	f2c0 8091 	blt.w	8007186 <setvbuf+0x152>
 8007064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007066:	07da      	lsls	r2, r3, #31
 8007068:	d405      	bmi.n	8007076 <setvbuf+0x42>
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	059b      	lsls	r3, r3, #22
 800706e:	d402      	bmi.n	8007076 <setvbuf+0x42>
 8007070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007072:	f000 fa12 	bl	800749a <__retarget_lock_acquire_recursive>
 8007076:	4621      	mov	r1, r4
 8007078:	4638      	mov	r0, r7
 800707a:	f002 fe03 	bl	8009c84 <_fflush_r>
 800707e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007080:	b141      	cbz	r1, 8007094 <setvbuf+0x60>
 8007082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007086:	4299      	cmp	r1, r3
 8007088:	d002      	beq.n	8007090 <setvbuf+0x5c>
 800708a:	4638      	mov	r0, r7
 800708c:	f001 f810 	bl	80080b0 <_free_r>
 8007090:	2300      	movs	r3, #0
 8007092:	6363      	str	r3, [r4, #52]	; 0x34
 8007094:	2300      	movs	r3, #0
 8007096:	61a3      	str	r3, [r4, #24]
 8007098:	6063      	str	r3, [r4, #4]
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	0618      	lsls	r0, r3, #24
 800709e:	d503      	bpl.n	80070a8 <setvbuf+0x74>
 80070a0:	6921      	ldr	r1, [r4, #16]
 80070a2:	4638      	mov	r0, r7
 80070a4:	f001 f804 	bl	80080b0 <_free_r>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80070ae:	f023 0303 	bic.w	r3, r3, #3
 80070b2:	f1b8 0f02 	cmp.w	r8, #2
 80070b6:	81a3      	strh	r3, [r4, #12]
 80070b8:	d05f      	beq.n	800717a <setvbuf+0x146>
 80070ba:	ab01      	add	r3, sp, #4
 80070bc:	466a      	mov	r2, sp
 80070be:	4621      	mov	r1, r4
 80070c0:	4638      	mov	r0, r7
 80070c2:	f002 fe07 	bl	8009cd4 <__swhatbuf_r>
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	4318      	orrs	r0, r3
 80070ca:	81a0      	strh	r0, [r4, #12]
 80070cc:	bb2d      	cbnz	r5, 800711a <setvbuf+0xe6>
 80070ce:	9d00      	ldr	r5, [sp, #0]
 80070d0:	4628      	mov	r0, r5
 80070d2:	f7fe ff07 	bl	8005ee4 <malloc>
 80070d6:	4606      	mov	r6, r0
 80070d8:	2800      	cmp	r0, #0
 80070da:	d150      	bne.n	800717e <setvbuf+0x14a>
 80070dc:	f8dd 9000 	ldr.w	r9, [sp]
 80070e0:	45a9      	cmp	r9, r5
 80070e2:	d13e      	bne.n	8007162 <setvbuf+0x12e>
 80070e4:	f04f 35ff 	mov.w	r5, #4294967295
 80070e8:	2200      	movs	r2, #0
 80070ea:	60a2      	str	r2, [r4, #8]
 80070ec:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80070f0:	6022      	str	r2, [r4, #0]
 80070f2:	6122      	str	r2, [r4, #16]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fa:	6162      	str	r2, [r4, #20]
 80070fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070fe:	f043 0302 	orr.w	r3, r3, #2
 8007102:	07d1      	lsls	r1, r2, #31
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	d404      	bmi.n	8007112 <setvbuf+0xde>
 8007108:	059b      	lsls	r3, r3, #22
 800710a:	d402      	bmi.n	8007112 <setvbuf+0xde>
 800710c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800710e:	f000 f9c5 	bl	800749c <__retarget_lock_release_recursive>
 8007112:	4628      	mov	r0, r5
 8007114:	b003      	add	sp, #12
 8007116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800711a:	2e00      	cmp	r6, #0
 800711c:	d0d8      	beq.n	80070d0 <setvbuf+0x9c>
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	b913      	cbnz	r3, 8007128 <setvbuf+0xf4>
 8007122:	4638      	mov	r0, r7
 8007124:	f7ff fee2 	bl	8006eec <__sinit>
 8007128:	f1b8 0f01 	cmp.w	r8, #1
 800712c:	bf08      	it	eq
 800712e:	89a3      	ldrheq	r3, [r4, #12]
 8007130:	6026      	str	r6, [r4, #0]
 8007132:	bf04      	itt	eq
 8007134:	f043 0301 	orreq.w	r3, r3, #1
 8007138:	81a3      	strheq	r3, [r4, #12]
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	f013 0208 	ands.w	r2, r3, #8
 8007140:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007144:	d01d      	beq.n	8007182 <setvbuf+0x14e>
 8007146:	07da      	lsls	r2, r3, #31
 8007148:	bf41      	itttt	mi
 800714a:	2200      	movmi	r2, #0
 800714c:	426d      	negmi	r5, r5
 800714e:	60a2      	strmi	r2, [r4, #8]
 8007150:	61a5      	strmi	r5, [r4, #24]
 8007152:	bf58      	it	pl
 8007154:	60a5      	strpl	r5, [r4, #8]
 8007156:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007158:	f015 0501 	ands.w	r5, r5, #1
 800715c:	d0d4      	beq.n	8007108 <setvbuf+0xd4>
 800715e:	2500      	movs	r5, #0
 8007160:	e7d7      	b.n	8007112 <setvbuf+0xde>
 8007162:	4648      	mov	r0, r9
 8007164:	f7fe febe 	bl	8005ee4 <malloc>
 8007168:	4606      	mov	r6, r0
 800716a:	2800      	cmp	r0, #0
 800716c:	d0ba      	beq.n	80070e4 <setvbuf+0xb0>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	464d      	mov	r5, r9
 8007178:	e7d1      	b.n	800711e <setvbuf+0xea>
 800717a:	2500      	movs	r5, #0
 800717c:	e7b4      	b.n	80070e8 <setvbuf+0xb4>
 800717e:	46a9      	mov	r9, r5
 8007180:	e7f5      	b.n	800716e <setvbuf+0x13a>
 8007182:	60a2      	str	r2, [r4, #8]
 8007184:	e7e7      	b.n	8007156 <setvbuf+0x122>
 8007186:	f04f 35ff 	mov.w	r5, #4294967295
 800718a:	e7c2      	b.n	8007112 <setvbuf+0xde>
 800718c:	20000064 	.word	0x20000064

08007190 <siprintf>:
 8007190:	b40e      	push	{r1, r2, r3}
 8007192:	b500      	push	{lr}
 8007194:	b09c      	sub	sp, #112	; 0x70
 8007196:	ab1d      	add	r3, sp, #116	; 0x74
 8007198:	9002      	str	r0, [sp, #8]
 800719a:	9006      	str	r0, [sp, #24]
 800719c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071a0:	4809      	ldr	r0, [pc, #36]	; (80071c8 <siprintf+0x38>)
 80071a2:	9107      	str	r1, [sp, #28]
 80071a4:	9104      	str	r1, [sp, #16]
 80071a6:	4909      	ldr	r1, [pc, #36]	; (80071cc <siprintf+0x3c>)
 80071a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ac:	9105      	str	r1, [sp, #20]
 80071ae:	6800      	ldr	r0, [r0, #0]
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	a902      	add	r1, sp, #8
 80071b4:	f002 fa9e 	bl	80096f4 <_svfiprintf_r>
 80071b8:	9b02      	ldr	r3, [sp, #8]
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	b01c      	add	sp, #112	; 0x70
 80071c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c4:	b003      	add	sp, #12
 80071c6:	4770      	bx	lr
 80071c8:	20000064 	.word	0x20000064
 80071cc:	ffff0208 	.word	0xffff0208

080071d0 <__sread>:
 80071d0:	b510      	push	{r4, lr}
 80071d2:	460c      	mov	r4, r1
 80071d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d8:	f000 f900 	bl	80073dc <_read_r>
 80071dc:	2800      	cmp	r0, #0
 80071de:	bfab      	itete	ge
 80071e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071e2:	89a3      	ldrhlt	r3, [r4, #12]
 80071e4:	181b      	addge	r3, r3, r0
 80071e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071ea:	bfac      	ite	ge
 80071ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80071ee:	81a3      	strhlt	r3, [r4, #12]
 80071f0:	bd10      	pop	{r4, pc}

080071f2 <__swrite>:
 80071f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f6:	461f      	mov	r7, r3
 80071f8:	898b      	ldrh	r3, [r1, #12]
 80071fa:	05db      	lsls	r3, r3, #23
 80071fc:	4605      	mov	r5, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	4616      	mov	r6, r2
 8007202:	d505      	bpl.n	8007210 <__swrite+0x1e>
 8007204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007208:	2302      	movs	r3, #2
 800720a:	2200      	movs	r2, #0
 800720c:	f000 f8d4 	bl	80073b8 <_lseek_r>
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800721a:	81a3      	strh	r3, [r4, #12]
 800721c:	4632      	mov	r2, r6
 800721e:	463b      	mov	r3, r7
 8007220:	4628      	mov	r0, r5
 8007222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007226:	f000 b8fb 	b.w	8007420 <_write_r>

0800722a <__sseek>:
 800722a:	b510      	push	{r4, lr}
 800722c:	460c      	mov	r4, r1
 800722e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007232:	f000 f8c1 	bl	80073b8 <_lseek_r>
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	bf15      	itete	ne
 800723c:	6560      	strne	r0, [r4, #84]	; 0x54
 800723e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007246:	81a3      	strheq	r3, [r4, #12]
 8007248:	bf18      	it	ne
 800724a:	81a3      	strhne	r3, [r4, #12]
 800724c:	bd10      	pop	{r4, pc}

0800724e <__sclose>:
 800724e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007252:	f000 b8a1 	b.w	8007398 <_close_r>

08007256 <__swbuf_r>:
 8007256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007258:	460e      	mov	r6, r1
 800725a:	4614      	mov	r4, r2
 800725c:	4605      	mov	r5, r0
 800725e:	b118      	cbz	r0, 8007268 <__swbuf_r+0x12>
 8007260:	6a03      	ldr	r3, [r0, #32]
 8007262:	b90b      	cbnz	r3, 8007268 <__swbuf_r+0x12>
 8007264:	f7ff fe42 	bl	8006eec <__sinit>
 8007268:	69a3      	ldr	r3, [r4, #24]
 800726a:	60a3      	str	r3, [r4, #8]
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	071a      	lsls	r2, r3, #28
 8007270:	d525      	bpl.n	80072be <__swbuf_r+0x68>
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	b31b      	cbz	r3, 80072be <__swbuf_r+0x68>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	6922      	ldr	r2, [r4, #16]
 800727a:	1a98      	subs	r0, r3, r2
 800727c:	6963      	ldr	r3, [r4, #20]
 800727e:	b2f6      	uxtb	r6, r6
 8007280:	4283      	cmp	r3, r0
 8007282:	4637      	mov	r7, r6
 8007284:	dc04      	bgt.n	8007290 <__swbuf_r+0x3a>
 8007286:	4621      	mov	r1, r4
 8007288:	4628      	mov	r0, r5
 800728a:	f002 fcfb 	bl	8009c84 <_fflush_r>
 800728e:	b9e0      	cbnz	r0, 80072ca <__swbuf_r+0x74>
 8007290:	68a3      	ldr	r3, [r4, #8]
 8007292:	3b01      	subs	r3, #1
 8007294:	60a3      	str	r3, [r4, #8]
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	6022      	str	r2, [r4, #0]
 800729c:	701e      	strb	r6, [r3, #0]
 800729e:	6962      	ldr	r2, [r4, #20]
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d004      	beq.n	80072b0 <__swbuf_r+0x5a>
 80072a6:	89a3      	ldrh	r3, [r4, #12]
 80072a8:	07db      	lsls	r3, r3, #31
 80072aa:	d506      	bpl.n	80072ba <__swbuf_r+0x64>
 80072ac:	2e0a      	cmp	r6, #10
 80072ae:	d104      	bne.n	80072ba <__swbuf_r+0x64>
 80072b0:	4621      	mov	r1, r4
 80072b2:	4628      	mov	r0, r5
 80072b4:	f002 fce6 	bl	8009c84 <_fflush_r>
 80072b8:	b938      	cbnz	r0, 80072ca <__swbuf_r+0x74>
 80072ba:	4638      	mov	r0, r7
 80072bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072be:	4621      	mov	r1, r4
 80072c0:	4628      	mov	r0, r5
 80072c2:	f000 f805 	bl	80072d0 <__swsetup_r>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d0d5      	beq.n	8007276 <__swbuf_r+0x20>
 80072ca:	f04f 37ff 	mov.w	r7, #4294967295
 80072ce:	e7f4      	b.n	80072ba <__swbuf_r+0x64>

080072d0 <__swsetup_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	4b2a      	ldr	r3, [pc, #168]	; (800737c <__swsetup_r+0xac>)
 80072d4:	4605      	mov	r5, r0
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	460c      	mov	r4, r1
 80072da:	b118      	cbz	r0, 80072e4 <__swsetup_r+0x14>
 80072dc:	6a03      	ldr	r3, [r0, #32]
 80072de:	b90b      	cbnz	r3, 80072e4 <__swsetup_r+0x14>
 80072e0:	f7ff fe04 	bl	8006eec <__sinit>
 80072e4:	89a3      	ldrh	r3, [r4, #12]
 80072e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072ea:	0718      	lsls	r0, r3, #28
 80072ec:	d422      	bmi.n	8007334 <__swsetup_r+0x64>
 80072ee:	06d9      	lsls	r1, r3, #27
 80072f0:	d407      	bmi.n	8007302 <__swsetup_r+0x32>
 80072f2:	2309      	movs	r3, #9
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072fa:	81a3      	strh	r3, [r4, #12]
 80072fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007300:	e034      	b.n	800736c <__swsetup_r+0x9c>
 8007302:	0758      	lsls	r0, r3, #29
 8007304:	d512      	bpl.n	800732c <__swsetup_r+0x5c>
 8007306:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007308:	b141      	cbz	r1, 800731c <__swsetup_r+0x4c>
 800730a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800730e:	4299      	cmp	r1, r3
 8007310:	d002      	beq.n	8007318 <__swsetup_r+0x48>
 8007312:	4628      	mov	r0, r5
 8007314:	f000 fecc 	bl	80080b0 <_free_r>
 8007318:	2300      	movs	r3, #0
 800731a:	6363      	str	r3, [r4, #52]	; 0x34
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007322:	81a3      	strh	r3, [r4, #12]
 8007324:	2300      	movs	r3, #0
 8007326:	6063      	str	r3, [r4, #4]
 8007328:	6923      	ldr	r3, [r4, #16]
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	f043 0308 	orr.w	r3, r3, #8
 8007332:	81a3      	strh	r3, [r4, #12]
 8007334:	6923      	ldr	r3, [r4, #16]
 8007336:	b94b      	cbnz	r3, 800734c <__swsetup_r+0x7c>
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800733e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007342:	d003      	beq.n	800734c <__swsetup_r+0x7c>
 8007344:	4621      	mov	r1, r4
 8007346:	4628      	mov	r0, r5
 8007348:	f002 fcea 	bl	8009d20 <__smakebuf_r>
 800734c:	89a0      	ldrh	r0, [r4, #12]
 800734e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007352:	f010 0301 	ands.w	r3, r0, #1
 8007356:	d00a      	beq.n	800736e <__swsetup_r+0x9e>
 8007358:	2300      	movs	r3, #0
 800735a:	60a3      	str	r3, [r4, #8]
 800735c:	6963      	ldr	r3, [r4, #20]
 800735e:	425b      	negs	r3, r3
 8007360:	61a3      	str	r3, [r4, #24]
 8007362:	6923      	ldr	r3, [r4, #16]
 8007364:	b943      	cbnz	r3, 8007378 <__swsetup_r+0xa8>
 8007366:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800736a:	d1c4      	bne.n	80072f6 <__swsetup_r+0x26>
 800736c:	bd38      	pop	{r3, r4, r5, pc}
 800736e:	0781      	lsls	r1, r0, #30
 8007370:	bf58      	it	pl
 8007372:	6963      	ldrpl	r3, [r4, #20]
 8007374:	60a3      	str	r3, [r4, #8]
 8007376:	e7f4      	b.n	8007362 <__swsetup_r+0x92>
 8007378:	2000      	movs	r0, #0
 800737a:	e7f7      	b.n	800736c <__swsetup_r+0x9c>
 800737c:	20000064 	.word	0x20000064

08007380 <memset>:
 8007380:	4402      	add	r2, r0
 8007382:	4603      	mov	r3, r0
 8007384:	4293      	cmp	r3, r2
 8007386:	d100      	bne.n	800738a <memset+0xa>
 8007388:	4770      	bx	lr
 800738a:	f803 1b01 	strb.w	r1, [r3], #1
 800738e:	e7f9      	b.n	8007384 <memset+0x4>

08007390 <_localeconv_r>:
 8007390:	4800      	ldr	r0, [pc, #0]	; (8007394 <_localeconv_r+0x4>)
 8007392:	4770      	bx	lr
 8007394:	20000158 	.word	0x20000158

08007398 <_close_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	4d06      	ldr	r5, [pc, #24]	; (80073b4 <_close_r+0x1c>)
 800739c:	2300      	movs	r3, #0
 800739e:	4604      	mov	r4, r0
 80073a0:	4608      	mov	r0, r1
 80073a2:	602b      	str	r3, [r5, #0]
 80073a4:	f7f9 fefa 	bl	800119c <_close>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_close_r+0x1a>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_close_r+0x1a>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	200032c8 	.word	0x200032c8

080073b8 <_lseek_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4d07      	ldr	r5, [pc, #28]	; (80073d8 <_lseek_r+0x20>)
 80073bc:	4604      	mov	r4, r0
 80073be:	4608      	mov	r0, r1
 80073c0:	4611      	mov	r1, r2
 80073c2:	2200      	movs	r2, #0
 80073c4:	602a      	str	r2, [r5, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	f7f9 feff 	bl	80011ca <_lseek>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_lseek_r+0x1e>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_lseek_r+0x1e>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	200032c8 	.word	0x200032c8

080073dc <_read_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4d07      	ldr	r5, [pc, #28]	; (80073fc <_read_r+0x20>)
 80073e0:	4604      	mov	r4, r0
 80073e2:	4608      	mov	r0, r1
 80073e4:	4611      	mov	r1, r2
 80073e6:	2200      	movs	r2, #0
 80073e8:	602a      	str	r2, [r5, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	f7f9 fefe 	bl	80011ec <_read>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d102      	bne.n	80073fa <_read_r+0x1e>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	b103      	cbz	r3, 80073fa <_read_r+0x1e>
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	bd38      	pop	{r3, r4, r5, pc}
 80073fc:	200032c8 	.word	0x200032c8

08007400 <_sbrk_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4d06      	ldr	r5, [pc, #24]	; (800741c <_sbrk_r+0x1c>)
 8007404:	2300      	movs	r3, #0
 8007406:	4604      	mov	r4, r0
 8007408:	4608      	mov	r0, r1
 800740a:	602b      	str	r3, [r5, #0]
 800740c:	f7fa f9b8 	bl	8001780 <_sbrk>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	d102      	bne.n	800741a <_sbrk_r+0x1a>
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	b103      	cbz	r3, 800741a <_sbrk_r+0x1a>
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	bd38      	pop	{r3, r4, r5, pc}
 800741c:	200032c8 	.word	0x200032c8

08007420 <_write_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4d07      	ldr	r5, [pc, #28]	; (8007440 <_write_r+0x20>)
 8007424:	4604      	mov	r4, r0
 8007426:	4608      	mov	r0, r1
 8007428:	4611      	mov	r1, r2
 800742a:	2200      	movs	r2, #0
 800742c:	602a      	str	r2, [r5, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	f7f9 fe88 	bl	8001144 <_write>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d102      	bne.n	800743e <_write_r+0x1e>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	b103      	cbz	r3, 800743e <_write_r+0x1e>
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	200032c8 	.word	0x200032c8

08007444 <__errno>:
 8007444:	4b01      	ldr	r3, [pc, #4]	; (800744c <__errno+0x8>)
 8007446:	6818      	ldr	r0, [r3, #0]
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	20000064 	.word	0x20000064

08007450 <__libc_init_array>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	4d0d      	ldr	r5, [pc, #52]	; (8007488 <__libc_init_array+0x38>)
 8007454:	4c0d      	ldr	r4, [pc, #52]	; (800748c <__libc_init_array+0x3c>)
 8007456:	1b64      	subs	r4, r4, r5
 8007458:	10a4      	asrs	r4, r4, #2
 800745a:	2600      	movs	r6, #0
 800745c:	42a6      	cmp	r6, r4
 800745e:	d109      	bne.n	8007474 <__libc_init_array+0x24>
 8007460:	4d0b      	ldr	r5, [pc, #44]	; (8007490 <__libc_init_array+0x40>)
 8007462:	4c0c      	ldr	r4, [pc, #48]	; (8007494 <__libc_init_array+0x44>)
 8007464:	f003 f92c 	bl	800a6c0 <_init>
 8007468:	1b64      	subs	r4, r4, r5
 800746a:	10a4      	asrs	r4, r4, #2
 800746c:	2600      	movs	r6, #0
 800746e:	42a6      	cmp	r6, r4
 8007470:	d105      	bne.n	800747e <__libc_init_array+0x2e>
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	f855 3b04 	ldr.w	r3, [r5], #4
 8007478:	4798      	blx	r3
 800747a:	3601      	adds	r6, #1
 800747c:	e7ee      	b.n	800745c <__libc_init_array+0xc>
 800747e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007482:	4798      	blx	r3
 8007484:	3601      	adds	r6, #1
 8007486:	e7f2      	b.n	800746e <__libc_init_array+0x1e>
 8007488:	0800abf0 	.word	0x0800abf0
 800748c:	0800abf0 	.word	0x0800abf0
 8007490:	0800abf0 	.word	0x0800abf0
 8007494:	0800abf4 	.word	0x0800abf4

08007498 <__retarget_lock_init_recursive>:
 8007498:	4770      	bx	lr

0800749a <__retarget_lock_acquire_recursive>:
 800749a:	4770      	bx	lr

0800749c <__retarget_lock_release_recursive>:
 800749c:	4770      	bx	lr

0800749e <memcpy>:
 800749e:	440a      	add	r2, r1
 80074a0:	4291      	cmp	r1, r2
 80074a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80074a6:	d100      	bne.n	80074aa <memcpy+0xc>
 80074a8:	4770      	bx	lr
 80074aa:	b510      	push	{r4, lr}
 80074ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074b4:	4291      	cmp	r1, r2
 80074b6:	d1f9      	bne.n	80074ac <memcpy+0xe>
 80074b8:	bd10      	pop	{r4, pc}
	...

080074bc <nanf>:
 80074bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80074c4 <nanf+0x8>
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	7fc00000 	.word	0x7fc00000

080074c8 <quorem>:
 80074c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	6903      	ldr	r3, [r0, #16]
 80074ce:	690c      	ldr	r4, [r1, #16]
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	4607      	mov	r7, r0
 80074d4:	db7e      	blt.n	80075d4 <quorem+0x10c>
 80074d6:	3c01      	subs	r4, #1
 80074d8:	f101 0814 	add.w	r8, r1, #20
 80074dc:	f100 0514 	add.w	r5, r0, #20
 80074e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074ee:	3301      	adds	r3, #1
 80074f0:	429a      	cmp	r2, r3
 80074f2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80074f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074fa:	fbb2 f6f3 	udiv	r6, r2, r3
 80074fe:	d331      	bcc.n	8007564 <quorem+0x9c>
 8007500:	f04f 0e00 	mov.w	lr, #0
 8007504:	4640      	mov	r0, r8
 8007506:	46ac      	mov	ip, r5
 8007508:	46f2      	mov	sl, lr
 800750a:	f850 2b04 	ldr.w	r2, [r0], #4
 800750e:	b293      	uxth	r3, r2
 8007510:	fb06 e303 	mla	r3, r6, r3, lr
 8007514:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007518:	0c1a      	lsrs	r2, r3, #16
 800751a:	b29b      	uxth	r3, r3
 800751c:	ebaa 0303 	sub.w	r3, sl, r3
 8007520:	f8dc a000 	ldr.w	sl, [ip]
 8007524:	fa13 f38a 	uxtah	r3, r3, sl
 8007528:	fb06 220e 	mla	r2, r6, lr, r2
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	9b00      	ldr	r3, [sp, #0]
 8007530:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007534:	b292      	uxth	r2, r2
 8007536:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800753a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800753e:	f8bd 3000 	ldrh.w	r3, [sp]
 8007542:	4581      	cmp	r9, r0
 8007544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007548:	f84c 3b04 	str.w	r3, [ip], #4
 800754c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007550:	d2db      	bcs.n	800750a <quorem+0x42>
 8007552:	f855 300b 	ldr.w	r3, [r5, fp]
 8007556:	b92b      	cbnz	r3, 8007564 <quorem+0x9c>
 8007558:	9b01      	ldr	r3, [sp, #4]
 800755a:	3b04      	subs	r3, #4
 800755c:	429d      	cmp	r5, r3
 800755e:	461a      	mov	r2, r3
 8007560:	d32c      	bcc.n	80075bc <quorem+0xf4>
 8007562:	613c      	str	r4, [r7, #16]
 8007564:	4638      	mov	r0, r7
 8007566:	f001 f8b5 	bl	80086d4 <__mcmp>
 800756a:	2800      	cmp	r0, #0
 800756c:	db22      	blt.n	80075b4 <quorem+0xec>
 800756e:	3601      	adds	r6, #1
 8007570:	4629      	mov	r1, r5
 8007572:	2000      	movs	r0, #0
 8007574:	f858 2b04 	ldr.w	r2, [r8], #4
 8007578:	f8d1 c000 	ldr.w	ip, [r1]
 800757c:	b293      	uxth	r3, r2
 800757e:	1ac3      	subs	r3, r0, r3
 8007580:	0c12      	lsrs	r2, r2, #16
 8007582:	fa13 f38c 	uxtah	r3, r3, ip
 8007586:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800758a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800758e:	b29b      	uxth	r3, r3
 8007590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007594:	45c1      	cmp	r9, r8
 8007596:	f841 3b04 	str.w	r3, [r1], #4
 800759a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800759e:	d2e9      	bcs.n	8007574 <quorem+0xac>
 80075a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075a8:	b922      	cbnz	r2, 80075b4 <quorem+0xec>
 80075aa:	3b04      	subs	r3, #4
 80075ac:	429d      	cmp	r5, r3
 80075ae:	461a      	mov	r2, r3
 80075b0:	d30a      	bcc.n	80075c8 <quorem+0x100>
 80075b2:	613c      	str	r4, [r7, #16]
 80075b4:	4630      	mov	r0, r6
 80075b6:	b003      	add	sp, #12
 80075b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	3b04      	subs	r3, #4
 80075c0:	2a00      	cmp	r2, #0
 80075c2:	d1ce      	bne.n	8007562 <quorem+0x9a>
 80075c4:	3c01      	subs	r4, #1
 80075c6:	e7c9      	b.n	800755c <quorem+0x94>
 80075c8:	6812      	ldr	r2, [r2, #0]
 80075ca:	3b04      	subs	r3, #4
 80075cc:	2a00      	cmp	r2, #0
 80075ce:	d1f0      	bne.n	80075b2 <quorem+0xea>
 80075d0:	3c01      	subs	r4, #1
 80075d2:	e7eb      	b.n	80075ac <quorem+0xe4>
 80075d4:	2000      	movs	r0, #0
 80075d6:	e7ee      	b.n	80075b6 <quorem+0xee>

080075d8 <_dtoa_r>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	ed2d 8b02 	vpush	{d8}
 80075e0:	69c5      	ldr	r5, [r0, #28]
 80075e2:	b091      	sub	sp, #68	; 0x44
 80075e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80075e8:	ec59 8b10 	vmov	r8, r9, d0
 80075ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80075ee:	9106      	str	r1, [sp, #24]
 80075f0:	4606      	mov	r6, r0
 80075f2:	9208      	str	r2, [sp, #32]
 80075f4:	930c      	str	r3, [sp, #48]	; 0x30
 80075f6:	b975      	cbnz	r5, 8007616 <_dtoa_r+0x3e>
 80075f8:	2010      	movs	r0, #16
 80075fa:	f7fe fc73 	bl	8005ee4 <malloc>
 80075fe:	4602      	mov	r2, r0
 8007600:	61f0      	str	r0, [r6, #28]
 8007602:	b920      	cbnz	r0, 800760e <_dtoa_r+0x36>
 8007604:	4ba6      	ldr	r3, [pc, #664]	; (80078a0 <_dtoa_r+0x2c8>)
 8007606:	21ef      	movs	r1, #239	; 0xef
 8007608:	48a6      	ldr	r0, [pc, #664]	; (80078a4 <_dtoa_r+0x2cc>)
 800760a:	f002 fc1d 	bl	8009e48 <__assert_func>
 800760e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007612:	6005      	str	r5, [r0, #0]
 8007614:	60c5      	str	r5, [r0, #12]
 8007616:	69f3      	ldr	r3, [r6, #28]
 8007618:	6819      	ldr	r1, [r3, #0]
 800761a:	b151      	cbz	r1, 8007632 <_dtoa_r+0x5a>
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	604a      	str	r2, [r1, #4]
 8007620:	2301      	movs	r3, #1
 8007622:	4093      	lsls	r3, r2
 8007624:	608b      	str	r3, [r1, #8]
 8007626:	4630      	mov	r0, r6
 8007628:	f000 fdce 	bl	80081c8 <_Bfree>
 800762c:	69f3      	ldr	r3, [r6, #28]
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	f1b9 0300 	subs.w	r3, r9, #0
 8007636:	bfbb      	ittet	lt
 8007638:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800763c:	9303      	strlt	r3, [sp, #12]
 800763e:	2300      	movge	r3, #0
 8007640:	2201      	movlt	r2, #1
 8007642:	bfac      	ite	ge
 8007644:	6023      	strge	r3, [r4, #0]
 8007646:	6022      	strlt	r2, [r4, #0]
 8007648:	4b97      	ldr	r3, [pc, #604]	; (80078a8 <_dtoa_r+0x2d0>)
 800764a:	9c03      	ldr	r4, [sp, #12]
 800764c:	43a3      	bics	r3, r4
 800764e:	d11c      	bne.n	800768a <_dtoa_r+0xb2>
 8007650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007652:	f242 730f 	movw	r3, #9999	; 0x270f
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800765c:	ea53 0308 	orrs.w	r3, r3, r8
 8007660:	f000 84fb 	beq.w	800805a <_dtoa_r+0xa82>
 8007664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007666:	b963      	cbnz	r3, 8007682 <_dtoa_r+0xaa>
 8007668:	4b90      	ldr	r3, [pc, #576]	; (80078ac <_dtoa_r+0x2d4>)
 800766a:	e020      	b.n	80076ae <_dtoa_r+0xd6>
 800766c:	4b90      	ldr	r3, [pc, #576]	; (80078b0 <_dtoa_r+0x2d8>)
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	3308      	adds	r3, #8
 8007672:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	9801      	ldr	r0, [sp, #4]
 8007678:	b011      	add	sp, #68	; 0x44
 800767a:	ecbd 8b02 	vpop	{d8}
 800767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007682:	4b8a      	ldr	r3, [pc, #552]	; (80078ac <_dtoa_r+0x2d4>)
 8007684:	9301      	str	r3, [sp, #4]
 8007686:	3303      	adds	r3, #3
 8007688:	e7f3      	b.n	8007672 <_dtoa_r+0x9a>
 800768a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800768e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007696:	d10c      	bne.n	80076b2 <_dtoa_r+0xda>
 8007698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800769a:	2301      	movs	r3, #1
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 84d7 	beq.w	8008054 <_dtoa_r+0xa7c>
 80076a6:	4b83      	ldr	r3, [pc, #524]	; (80078b4 <_dtoa_r+0x2dc>)
 80076a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	e7e1      	b.n	8007676 <_dtoa_r+0x9e>
 80076b2:	aa0e      	add	r2, sp, #56	; 0x38
 80076b4:	a90f      	add	r1, sp, #60	; 0x3c
 80076b6:	4630      	mov	r0, r6
 80076b8:	eeb0 0b48 	vmov.f64	d0, d8
 80076bc:	f001 f920 	bl	8008900 <__d2b>
 80076c0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80076c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076c6:	4605      	mov	r5, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d046      	beq.n	800775a <_dtoa_r+0x182>
 80076cc:	eeb0 7b48 	vmov.f64	d7, d8
 80076d0:	ee18 1a90 	vmov	r1, s17
 80076d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80076d8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80076dc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80076e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80076e4:	2000      	movs	r0, #0
 80076e6:	ee07 1a90 	vmov	s15, r1
 80076ea:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80076ee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007888 <_dtoa_r+0x2b0>
 80076f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80076f6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007890 <_dtoa_r+0x2b8>
 80076fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80076fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007898 <_dtoa_r+0x2c0>
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800770a:	eeb0 7b46 	vmov.f64	d7, d6
 800770e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007712:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007716:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800771a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800771e:	ee16 ba90 	vmov	fp, s13
 8007722:	9009      	str	r0, [sp, #36]	; 0x24
 8007724:	d508      	bpl.n	8007738 <_dtoa_r+0x160>
 8007726:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800772a:	eeb4 6b47 	vcmp.f64	d6, d7
 800772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007732:	bf18      	it	ne
 8007734:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007738:	f1bb 0f16 	cmp.w	fp, #22
 800773c:	d82b      	bhi.n	8007796 <_dtoa_r+0x1be>
 800773e:	495e      	ldr	r1, [pc, #376]	; (80078b8 <_dtoa_r+0x2e0>)
 8007740:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007744:	ed91 7b00 	vldr	d7, [r1]
 8007748:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800774c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007750:	d501      	bpl.n	8007756 <_dtoa_r+0x17e>
 8007752:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007756:	2100      	movs	r1, #0
 8007758:	e01e      	b.n	8007798 <_dtoa_r+0x1c0>
 800775a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800775c:	4413      	add	r3, r2
 800775e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007762:	2920      	cmp	r1, #32
 8007764:	bfc1      	itttt	gt
 8007766:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800776a:	408c      	lslgt	r4, r1
 800776c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007770:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007774:	bfd6      	itet	le
 8007776:	f1c1 0120 	rsble	r1, r1, #32
 800777a:	4321      	orrgt	r1, r4
 800777c:	fa08 f101 	lslle.w	r1, r8, r1
 8007780:	ee07 1a90 	vmov	s15, r1
 8007784:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007788:	3b01      	subs	r3, #1
 800778a:	ee17 1a90 	vmov	r1, s15
 800778e:	2001      	movs	r0, #1
 8007790:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007794:	e7a7      	b.n	80076e6 <_dtoa_r+0x10e>
 8007796:	2101      	movs	r1, #1
 8007798:	1ad2      	subs	r2, r2, r3
 800779a:	1e53      	subs	r3, r2, #1
 800779c:	9305      	str	r3, [sp, #20]
 800779e:	bf45      	ittet	mi
 80077a0:	f1c2 0301 	rsbmi	r3, r2, #1
 80077a4:	9304      	strmi	r3, [sp, #16]
 80077a6:	2300      	movpl	r3, #0
 80077a8:	2300      	movmi	r3, #0
 80077aa:	bf4c      	ite	mi
 80077ac:	9305      	strmi	r3, [sp, #20]
 80077ae:	9304      	strpl	r3, [sp, #16]
 80077b0:	f1bb 0f00 	cmp.w	fp, #0
 80077b4:	910b      	str	r1, [sp, #44]	; 0x2c
 80077b6:	db18      	blt.n	80077ea <_dtoa_r+0x212>
 80077b8:	9b05      	ldr	r3, [sp, #20]
 80077ba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80077be:	445b      	add	r3, fp
 80077c0:	9305      	str	r3, [sp, #20]
 80077c2:	2300      	movs	r3, #0
 80077c4:	9a06      	ldr	r2, [sp, #24]
 80077c6:	2a09      	cmp	r2, #9
 80077c8:	d848      	bhi.n	800785c <_dtoa_r+0x284>
 80077ca:	2a05      	cmp	r2, #5
 80077cc:	bfc4      	itt	gt
 80077ce:	3a04      	subgt	r2, #4
 80077d0:	9206      	strgt	r2, [sp, #24]
 80077d2:	9a06      	ldr	r2, [sp, #24]
 80077d4:	f1a2 0202 	sub.w	r2, r2, #2
 80077d8:	bfcc      	ite	gt
 80077da:	2400      	movgt	r4, #0
 80077dc:	2401      	movle	r4, #1
 80077de:	2a03      	cmp	r2, #3
 80077e0:	d847      	bhi.n	8007872 <_dtoa_r+0x29a>
 80077e2:	e8df f002 	tbb	[pc, r2]
 80077e6:	2d0b      	.short	0x2d0b
 80077e8:	392b      	.short	0x392b
 80077ea:	9b04      	ldr	r3, [sp, #16]
 80077ec:	2200      	movs	r2, #0
 80077ee:	eba3 030b 	sub.w	r3, r3, fp
 80077f2:	9304      	str	r3, [sp, #16]
 80077f4:	920a      	str	r2, [sp, #40]	; 0x28
 80077f6:	f1cb 0300 	rsb	r3, fp, #0
 80077fa:	e7e3      	b.n	80077c4 <_dtoa_r+0x1ec>
 80077fc:	2200      	movs	r2, #0
 80077fe:	9207      	str	r2, [sp, #28]
 8007800:	9a08      	ldr	r2, [sp, #32]
 8007802:	2a00      	cmp	r2, #0
 8007804:	dc38      	bgt.n	8007878 <_dtoa_r+0x2a0>
 8007806:	f04f 0a01 	mov.w	sl, #1
 800780a:	46d1      	mov	r9, sl
 800780c:	4652      	mov	r2, sl
 800780e:	f8cd a020 	str.w	sl, [sp, #32]
 8007812:	69f7      	ldr	r7, [r6, #28]
 8007814:	2100      	movs	r1, #0
 8007816:	2004      	movs	r0, #4
 8007818:	f100 0c14 	add.w	ip, r0, #20
 800781c:	4594      	cmp	ip, r2
 800781e:	d930      	bls.n	8007882 <_dtoa_r+0x2aa>
 8007820:	6079      	str	r1, [r7, #4]
 8007822:	4630      	mov	r0, r6
 8007824:	930d      	str	r3, [sp, #52]	; 0x34
 8007826:	f000 fc8f 	bl	8008148 <_Balloc>
 800782a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800782c:	9001      	str	r0, [sp, #4]
 800782e:	4602      	mov	r2, r0
 8007830:	2800      	cmp	r0, #0
 8007832:	d145      	bne.n	80078c0 <_dtoa_r+0x2e8>
 8007834:	4b21      	ldr	r3, [pc, #132]	; (80078bc <_dtoa_r+0x2e4>)
 8007836:	f240 11af 	movw	r1, #431	; 0x1af
 800783a:	e6e5      	b.n	8007608 <_dtoa_r+0x30>
 800783c:	2201      	movs	r2, #1
 800783e:	e7de      	b.n	80077fe <_dtoa_r+0x226>
 8007840:	2200      	movs	r2, #0
 8007842:	9207      	str	r2, [sp, #28]
 8007844:	9a08      	ldr	r2, [sp, #32]
 8007846:	eb0b 0a02 	add.w	sl, fp, r2
 800784a:	f10a 0901 	add.w	r9, sl, #1
 800784e:	464a      	mov	r2, r9
 8007850:	2a01      	cmp	r2, #1
 8007852:	bfb8      	it	lt
 8007854:	2201      	movlt	r2, #1
 8007856:	e7dc      	b.n	8007812 <_dtoa_r+0x23a>
 8007858:	2201      	movs	r2, #1
 800785a:	e7f2      	b.n	8007842 <_dtoa_r+0x26a>
 800785c:	2401      	movs	r4, #1
 800785e:	2200      	movs	r2, #0
 8007860:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007864:	f04f 3aff 	mov.w	sl, #4294967295
 8007868:	2100      	movs	r1, #0
 800786a:	46d1      	mov	r9, sl
 800786c:	2212      	movs	r2, #18
 800786e:	9108      	str	r1, [sp, #32]
 8007870:	e7cf      	b.n	8007812 <_dtoa_r+0x23a>
 8007872:	2201      	movs	r2, #1
 8007874:	9207      	str	r2, [sp, #28]
 8007876:	e7f5      	b.n	8007864 <_dtoa_r+0x28c>
 8007878:	f8dd a020 	ldr.w	sl, [sp, #32]
 800787c:	46d1      	mov	r9, sl
 800787e:	4652      	mov	r2, sl
 8007880:	e7c7      	b.n	8007812 <_dtoa_r+0x23a>
 8007882:	3101      	adds	r1, #1
 8007884:	0040      	lsls	r0, r0, #1
 8007886:	e7c7      	b.n	8007818 <_dtoa_r+0x240>
 8007888:	636f4361 	.word	0x636f4361
 800788c:	3fd287a7 	.word	0x3fd287a7
 8007890:	8b60c8b3 	.word	0x8b60c8b3
 8007894:	3fc68a28 	.word	0x3fc68a28
 8007898:	509f79fb 	.word	0x509f79fb
 800789c:	3fd34413 	.word	0x3fd34413
 80078a0:	0800a903 	.word	0x0800a903
 80078a4:	0800a91a 	.word	0x0800a91a
 80078a8:	7ff00000 	.word	0x7ff00000
 80078ac:	0800a8ff 	.word	0x0800a8ff
 80078b0:	0800a8f6 	.word	0x0800a8f6
 80078b4:	0800a8ce 	.word	0x0800a8ce
 80078b8:	0800aa08 	.word	0x0800aa08
 80078bc:	0800a972 	.word	0x0800a972
 80078c0:	69f2      	ldr	r2, [r6, #28]
 80078c2:	9901      	ldr	r1, [sp, #4]
 80078c4:	6011      	str	r1, [r2, #0]
 80078c6:	f1b9 0f0e 	cmp.w	r9, #14
 80078ca:	d86c      	bhi.n	80079a6 <_dtoa_r+0x3ce>
 80078cc:	2c00      	cmp	r4, #0
 80078ce:	d06a      	beq.n	80079a6 <_dtoa_r+0x3ce>
 80078d0:	f1bb 0f00 	cmp.w	fp, #0
 80078d4:	f340 80a0 	ble.w	8007a18 <_dtoa_r+0x440>
 80078d8:	4ac1      	ldr	r2, [pc, #772]	; (8007be0 <_dtoa_r+0x608>)
 80078da:	f00b 010f 	and.w	r1, fp, #15
 80078de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80078e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80078e6:	ed92 7b00 	vldr	d7, [r2]
 80078ea:	ea4f 122b 	mov.w	r2, fp, asr #4
 80078ee:	f000 8087 	beq.w	8007a00 <_dtoa_r+0x428>
 80078f2:	49bc      	ldr	r1, [pc, #752]	; (8007be4 <_dtoa_r+0x60c>)
 80078f4:	ed91 6b08 	vldr	d6, [r1, #32]
 80078f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80078fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007900:	f002 020f 	and.w	r2, r2, #15
 8007904:	2103      	movs	r1, #3
 8007906:	48b7      	ldr	r0, [pc, #732]	; (8007be4 <_dtoa_r+0x60c>)
 8007908:	2a00      	cmp	r2, #0
 800790a:	d17b      	bne.n	8007a04 <_dtoa_r+0x42c>
 800790c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007910:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007914:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007918:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800791a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800791e:	2a00      	cmp	r2, #0
 8007920:	f000 80a0 	beq.w	8007a64 <_dtoa_r+0x48c>
 8007924:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007928:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800792c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007930:	f140 8098 	bpl.w	8007a64 <_dtoa_r+0x48c>
 8007934:	f1b9 0f00 	cmp.w	r9, #0
 8007938:	f000 8094 	beq.w	8007a64 <_dtoa_r+0x48c>
 800793c:	f1ba 0f00 	cmp.w	sl, #0
 8007940:	dd2f      	ble.n	80079a2 <_dtoa_r+0x3ca>
 8007942:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007946:	ee27 7b06 	vmul.f64	d7, d7, d6
 800794a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800794e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007952:	3101      	adds	r1, #1
 8007954:	4654      	mov	r4, sl
 8007956:	ed9d 6b02 	vldr	d6, [sp, #8]
 800795a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800795e:	ee07 1a90 	vmov	s15, r1
 8007962:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007966:	eea7 5b06 	vfma.f64	d5, d7, d6
 800796a:	ee15 7a90 	vmov	r7, s11
 800796e:	ec51 0b15 	vmov	r0, r1, d5
 8007972:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8007976:	2c00      	cmp	r4, #0
 8007978:	d177      	bne.n	8007a6a <_dtoa_r+0x492>
 800797a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800797e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007982:	ec41 0b17 	vmov	d7, r0, r1
 8007986:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800798a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800798e:	f300 826a 	bgt.w	8007e66 <_dtoa_r+0x88e>
 8007992:	eeb1 7b47 	vneg.f64	d7, d7
 8007996:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800799a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799e:	f100 8260 	bmi.w	8007e62 <_dtoa_r+0x88a>
 80079a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80079a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	f2c0 811d 	blt.w	8007be8 <_dtoa_r+0x610>
 80079ae:	f1bb 0f0e 	cmp.w	fp, #14
 80079b2:	f300 8119 	bgt.w	8007be8 <_dtoa_r+0x610>
 80079b6:	4b8a      	ldr	r3, [pc, #552]	; (8007be0 <_dtoa_r+0x608>)
 80079b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079bc:	ed93 6b00 	vldr	d6, [r3]
 80079c0:	9b08      	ldr	r3, [sp, #32]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f280 80b7 	bge.w	8007b36 <_dtoa_r+0x55e>
 80079c8:	f1b9 0f00 	cmp.w	r9, #0
 80079cc:	f300 80b3 	bgt.w	8007b36 <_dtoa_r+0x55e>
 80079d0:	f040 8246 	bne.w	8007e60 <_dtoa_r+0x888>
 80079d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80079d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80079dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e8:	464c      	mov	r4, r9
 80079ea:	464f      	mov	r7, r9
 80079ec:	f280 821c 	bge.w	8007e28 <_dtoa_r+0x850>
 80079f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80079f4:	2331      	movs	r3, #49	; 0x31
 80079f6:	f808 3b01 	strb.w	r3, [r8], #1
 80079fa:	f10b 0b01 	add.w	fp, fp, #1
 80079fe:	e218      	b.n	8007e32 <_dtoa_r+0x85a>
 8007a00:	2102      	movs	r1, #2
 8007a02:	e780      	b.n	8007906 <_dtoa_r+0x32e>
 8007a04:	07d4      	lsls	r4, r2, #31
 8007a06:	d504      	bpl.n	8007a12 <_dtoa_r+0x43a>
 8007a08:	ed90 6b00 	vldr	d6, [r0]
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a12:	1052      	asrs	r2, r2, #1
 8007a14:	3008      	adds	r0, #8
 8007a16:	e777      	b.n	8007908 <_dtoa_r+0x330>
 8007a18:	d022      	beq.n	8007a60 <_dtoa_r+0x488>
 8007a1a:	f1cb 0200 	rsb	r2, fp, #0
 8007a1e:	4970      	ldr	r1, [pc, #448]	; (8007be0 <_dtoa_r+0x608>)
 8007a20:	f002 000f 	and.w	r0, r2, #15
 8007a24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007a28:	ed91 7b00 	vldr	d7, [r1]
 8007a2c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007a30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a34:	486b      	ldr	r0, [pc, #428]	; (8007be4 <_dtoa_r+0x60c>)
 8007a36:	1112      	asrs	r2, r2, #4
 8007a38:	2400      	movs	r4, #0
 8007a3a:	2102      	movs	r1, #2
 8007a3c:	b92a      	cbnz	r2, 8007a4a <_dtoa_r+0x472>
 8007a3e:	2c00      	cmp	r4, #0
 8007a40:	f43f af6a 	beq.w	8007918 <_dtoa_r+0x340>
 8007a44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a48:	e766      	b.n	8007918 <_dtoa_r+0x340>
 8007a4a:	07d7      	lsls	r7, r2, #31
 8007a4c:	d505      	bpl.n	8007a5a <_dtoa_r+0x482>
 8007a4e:	ed90 6b00 	vldr	d6, [r0]
 8007a52:	3101      	adds	r1, #1
 8007a54:	2401      	movs	r4, #1
 8007a56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a5a:	1052      	asrs	r2, r2, #1
 8007a5c:	3008      	adds	r0, #8
 8007a5e:	e7ed      	b.n	8007a3c <_dtoa_r+0x464>
 8007a60:	2102      	movs	r1, #2
 8007a62:	e759      	b.n	8007918 <_dtoa_r+0x340>
 8007a64:	465a      	mov	r2, fp
 8007a66:	464c      	mov	r4, r9
 8007a68:	e775      	b.n	8007956 <_dtoa_r+0x37e>
 8007a6a:	ec41 0b17 	vmov	d7, r0, r1
 8007a6e:	495c      	ldr	r1, [pc, #368]	; (8007be0 <_dtoa_r+0x608>)
 8007a70:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007a74:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007a78:	9901      	ldr	r1, [sp, #4]
 8007a7a:	440c      	add	r4, r1
 8007a7c:	9907      	ldr	r1, [sp, #28]
 8007a7e:	b351      	cbz	r1, 8007ad6 <_dtoa_r+0x4fe>
 8007a80:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007a84:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007a88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a8c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007a90:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007a94:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007a98:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007a9c:	ee14 1a90 	vmov	r1, s9
 8007aa0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007aa4:	3130      	adds	r1, #48	; 0x30
 8007aa6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007aaa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab2:	f808 1b01 	strb.w	r1, [r8], #1
 8007ab6:	d439      	bmi.n	8007b2c <_dtoa_r+0x554>
 8007ab8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007abc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac4:	d472      	bmi.n	8007bac <_dtoa_r+0x5d4>
 8007ac6:	45a0      	cmp	r8, r4
 8007ac8:	f43f af6b 	beq.w	80079a2 <_dtoa_r+0x3ca>
 8007acc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007ad0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007ad4:	e7e0      	b.n	8007a98 <_dtoa_r+0x4c0>
 8007ad6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007ada:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ade:	4620      	mov	r0, r4
 8007ae0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007ae4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007ae8:	ee14 1a90 	vmov	r1, s9
 8007aec:	3130      	adds	r1, #48	; 0x30
 8007aee:	f808 1b01 	strb.w	r1, [r8], #1
 8007af2:	45a0      	cmp	r8, r4
 8007af4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007af8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007afc:	d118      	bne.n	8007b30 <_dtoa_r+0x558>
 8007afe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007b02:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007b06:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b0e:	dc4d      	bgt.n	8007bac <_dtoa_r+0x5d4>
 8007b10:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007b14:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1c:	f57f af41 	bpl.w	80079a2 <_dtoa_r+0x3ca>
 8007b20:	4680      	mov	r8, r0
 8007b22:	3801      	subs	r0, #1
 8007b24:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007b28:	2b30      	cmp	r3, #48	; 0x30
 8007b2a:	d0f9      	beq.n	8007b20 <_dtoa_r+0x548>
 8007b2c:	4693      	mov	fp, r2
 8007b2e:	e02a      	b.n	8007b86 <_dtoa_r+0x5ae>
 8007b30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007b34:	e7d6      	b.n	8007ae4 <_dtoa_r+0x50c>
 8007b36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b3a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007b3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b42:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007b46:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007b4a:	ee15 3a10 	vmov	r3, s10
 8007b4e:	3330      	adds	r3, #48	; 0x30
 8007b50:	f808 3b01 	strb.w	r3, [r8], #1
 8007b54:	9b01      	ldr	r3, [sp, #4]
 8007b56:	eba8 0303 	sub.w	r3, r8, r3
 8007b5a:	4599      	cmp	r9, r3
 8007b5c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007b60:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007b64:	d133      	bne.n	8007bce <_dtoa_r+0x5f6>
 8007b66:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007b6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b72:	dc1a      	bgt.n	8007baa <_dtoa_r+0x5d2>
 8007b74:	eeb4 7b46 	vcmp.f64	d7, d6
 8007b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b7c:	d103      	bne.n	8007b86 <_dtoa_r+0x5ae>
 8007b7e:	ee15 3a10 	vmov	r3, s10
 8007b82:	07d9      	lsls	r1, r3, #31
 8007b84:	d411      	bmi.n	8007baa <_dtoa_r+0x5d2>
 8007b86:	4629      	mov	r1, r5
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f000 fb1d 	bl	80081c8 <_Bfree>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b92:	f888 3000 	strb.w	r3, [r8]
 8007b96:	f10b 0301 	add.w	r3, fp, #1
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f43f ad69 	beq.w	8007676 <_dtoa_r+0x9e>
 8007ba4:	f8c3 8000 	str.w	r8, [r3]
 8007ba8:	e565      	b.n	8007676 <_dtoa_r+0x9e>
 8007baa:	465a      	mov	r2, fp
 8007bac:	4643      	mov	r3, r8
 8007bae:	4698      	mov	r8, r3
 8007bb0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007bb4:	2939      	cmp	r1, #57	; 0x39
 8007bb6:	d106      	bne.n	8007bc6 <_dtoa_r+0x5ee>
 8007bb8:	9901      	ldr	r1, [sp, #4]
 8007bba:	4299      	cmp	r1, r3
 8007bbc:	d1f7      	bne.n	8007bae <_dtoa_r+0x5d6>
 8007bbe:	9801      	ldr	r0, [sp, #4]
 8007bc0:	2130      	movs	r1, #48	; 0x30
 8007bc2:	3201      	adds	r2, #1
 8007bc4:	7001      	strb	r1, [r0, #0]
 8007bc6:	7819      	ldrb	r1, [r3, #0]
 8007bc8:	3101      	adds	r1, #1
 8007bca:	7019      	strb	r1, [r3, #0]
 8007bcc:	e7ae      	b.n	8007b2c <_dtoa_r+0x554>
 8007bce:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007bd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bda:	d1b2      	bne.n	8007b42 <_dtoa_r+0x56a>
 8007bdc:	e7d3      	b.n	8007b86 <_dtoa_r+0x5ae>
 8007bde:	bf00      	nop
 8007be0:	0800aa08 	.word	0x0800aa08
 8007be4:	0800a9e0 	.word	0x0800a9e0
 8007be8:	9907      	ldr	r1, [sp, #28]
 8007bea:	2900      	cmp	r1, #0
 8007bec:	f000 80d0 	beq.w	8007d90 <_dtoa_r+0x7b8>
 8007bf0:	9906      	ldr	r1, [sp, #24]
 8007bf2:	2901      	cmp	r1, #1
 8007bf4:	f300 80b4 	bgt.w	8007d60 <_dtoa_r+0x788>
 8007bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bfa:	2900      	cmp	r1, #0
 8007bfc:	f000 80ac 	beq.w	8007d58 <_dtoa_r+0x780>
 8007c00:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007c08:	461c      	mov	r4, r3
 8007c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c0c:	9b04      	ldr	r3, [sp, #16]
 8007c0e:	4413      	add	r3, r2
 8007c10:	9304      	str	r3, [sp, #16]
 8007c12:	9b05      	ldr	r3, [sp, #20]
 8007c14:	2101      	movs	r1, #1
 8007c16:	4413      	add	r3, r2
 8007c18:	4630      	mov	r0, r6
 8007c1a:	9305      	str	r3, [sp, #20]
 8007c1c:	f000 fbd4 	bl	80083c8 <__i2b>
 8007c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c22:	4607      	mov	r7, r0
 8007c24:	f1b8 0f00 	cmp.w	r8, #0
 8007c28:	d00d      	beq.n	8007c46 <_dtoa_r+0x66e>
 8007c2a:	9a05      	ldr	r2, [sp, #20]
 8007c2c:	2a00      	cmp	r2, #0
 8007c2e:	dd0a      	ble.n	8007c46 <_dtoa_r+0x66e>
 8007c30:	4542      	cmp	r2, r8
 8007c32:	9904      	ldr	r1, [sp, #16]
 8007c34:	bfa8      	it	ge
 8007c36:	4642      	movge	r2, r8
 8007c38:	1a89      	subs	r1, r1, r2
 8007c3a:	9104      	str	r1, [sp, #16]
 8007c3c:	9905      	ldr	r1, [sp, #20]
 8007c3e:	eba8 0802 	sub.w	r8, r8, r2
 8007c42:	1a8a      	subs	r2, r1, r2
 8007c44:	9205      	str	r2, [sp, #20]
 8007c46:	b303      	cbz	r3, 8007c8a <_dtoa_r+0x6b2>
 8007c48:	9a07      	ldr	r2, [sp, #28]
 8007c4a:	2a00      	cmp	r2, #0
 8007c4c:	f000 80a5 	beq.w	8007d9a <_dtoa_r+0x7c2>
 8007c50:	2c00      	cmp	r4, #0
 8007c52:	dd13      	ble.n	8007c7c <_dtoa_r+0x6a4>
 8007c54:	4639      	mov	r1, r7
 8007c56:	4622      	mov	r2, r4
 8007c58:	4630      	mov	r0, r6
 8007c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8007c5c:	f000 fc74 	bl	8008548 <__pow5mult>
 8007c60:	462a      	mov	r2, r5
 8007c62:	4601      	mov	r1, r0
 8007c64:	4607      	mov	r7, r0
 8007c66:	4630      	mov	r0, r6
 8007c68:	f000 fbc4 	bl	80083f4 <__multiply>
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	9009      	str	r0, [sp, #36]	; 0x24
 8007c70:	4630      	mov	r0, r6
 8007c72:	f000 faa9 	bl	80081c8 <_Bfree>
 8007c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c7a:	4615      	mov	r5, r2
 8007c7c:	1b1a      	subs	r2, r3, r4
 8007c7e:	d004      	beq.n	8007c8a <_dtoa_r+0x6b2>
 8007c80:	4629      	mov	r1, r5
 8007c82:	4630      	mov	r0, r6
 8007c84:	f000 fc60 	bl	8008548 <__pow5mult>
 8007c88:	4605      	mov	r5, r0
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f000 fb9b 	bl	80083c8 <__i2b>
 8007c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	4604      	mov	r4, r0
 8007c98:	f340 8081 	ble.w	8007d9e <_dtoa_r+0x7c6>
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	4601      	mov	r1, r0
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	f000 fc51 	bl	8008548 <__pow5mult>
 8007ca6:	9b06      	ldr	r3, [sp, #24]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	4604      	mov	r4, r0
 8007cac:	dd7a      	ble.n	8007da4 <_dtoa_r+0x7cc>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb2:	6922      	ldr	r2, [r4, #16]
 8007cb4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007cb8:	6910      	ldr	r0, [r2, #16]
 8007cba:	f000 fb37 	bl	800832c <__hi0bits>
 8007cbe:	f1c0 0020 	rsb	r0, r0, #32
 8007cc2:	9b05      	ldr	r3, [sp, #20]
 8007cc4:	4418      	add	r0, r3
 8007cc6:	f010 001f 	ands.w	r0, r0, #31
 8007cca:	f000 8093 	beq.w	8007df4 <_dtoa_r+0x81c>
 8007cce:	f1c0 0220 	rsb	r2, r0, #32
 8007cd2:	2a04      	cmp	r2, #4
 8007cd4:	f340 8085 	ble.w	8007de2 <_dtoa_r+0x80a>
 8007cd8:	9b04      	ldr	r3, [sp, #16]
 8007cda:	f1c0 001c 	rsb	r0, r0, #28
 8007cde:	4403      	add	r3, r0
 8007ce0:	9304      	str	r3, [sp, #16]
 8007ce2:	9b05      	ldr	r3, [sp, #20]
 8007ce4:	4480      	add	r8, r0
 8007ce6:	4403      	add	r3, r0
 8007ce8:	9305      	str	r3, [sp, #20]
 8007cea:	9b04      	ldr	r3, [sp, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	dd05      	ble.n	8007cfc <_dtoa_r+0x724>
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f000 fc81 	bl	80085fc <__lshift>
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	9b05      	ldr	r3, [sp, #20]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	dd05      	ble.n	8007d0e <_dtoa_r+0x736>
 8007d02:	4621      	mov	r1, r4
 8007d04:	461a      	mov	r2, r3
 8007d06:	4630      	mov	r0, r6
 8007d08:	f000 fc78 	bl	80085fc <__lshift>
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d071      	beq.n	8007df8 <_dtoa_r+0x820>
 8007d14:	4621      	mov	r1, r4
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 fcdc 	bl	80086d4 <__mcmp>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	da6b      	bge.n	8007df8 <_dtoa_r+0x820>
 8007d20:	2300      	movs	r3, #0
 8007d22:	4629      	mov	r1, r5
 8007d24:	220a      	movs	r2, #10
 8007d26:	4630      	mov	r0, r6
 8007d28:	f000 fa70 	bl	800820c <__multadd>
 8007d2c:	9b07      	ldr	r3, [sp, #28]
 8007d2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d32:	4605      	mov	r5, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 8197 	beq.w	8008068 <_dtoa_r+0xa90>
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	220a      	movs	r2, #10
 8007d40:	4630      	mov	r0, r6
 8007d42:	f000 fa63 	bl	800820c <__multadd>
 8007d46:	f1ba 0f00 	cmp.w	sl, #0
 8007d4a:	4607      	mov	r7, r0
 8007d4c:	f300 8093 	bgt.w	8007e76 <_dtoa_r+0x89e>
 8007d50:	9b06      	ldr	r3, [sp, #24]
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	dc57      	bgt.n	8007e06 <_dtoa_r+0x82e>
 8007d56:	e08e      	b.n	8007e76 <_dtoa_r+0x89e>
 8007d58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007d5e:	e751      	b.n	8007c04 <_dtoa_r+0x62c>
 8007d60:	f109 34ff 	add.w	r4, r9, #4294967295
 8007d64:	42a3      	cmp	r3, r4
 8007d66:	bfbf      	itttt	lt
 8007d68:	1ae2      	sublt	r2, r4, r3
 8007d6a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d6c:	189b      	addlt	r3, r3, r2
 8007d6e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007d70:	bfae      	itee	ge
 8007d72:	1b1c      	subge	r4, r3, r4
 8007d74:	4623      	movlt	r3, r4
 8007d76:	2400      	movlt	r4, #0
 8007d78:	f1b9 0f00 	cmp.w	r9, #0
 8007d7c:	bfb5      	itete	lt
 8007d7e:	9a04      	ldrlt	r2, [sp, #16]
 8007d80:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007d84:	eba2 0809 	sublt.w	r8, r2, r9
 8007d88:	464a      	movge	r2, r9
 8007d8a:	bfb8      	it	lt
 8007d8c:	2200      	movlt	r2, #0
 8007d8e:	e73c      	b.n	8007c0a <_dtoa_r+0x632>
 8007d90:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007d94:	9f07      	ldr	r7, [sp, #28]
 8007d96:	461c      	mov	r4, r3
 8007d98:	e744      	b.n	8007c24 <_dtoa_r+0x64c>
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	e770      	b.n	8007c80 <_dtoa_r+0x6a8>
 8007d9e:	9b06      	ldr	r3, [sp, #24]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	dc18      	bgt.n	8007dd6 <_dtoa_r+0x7fe>
 8007da4:	9b02      	ldr	r3, [sp, #8]
 8007da6:	b9b3      	cbnz	r3, 8007dd6 <_dtoa_r+0x7fe>
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007dae:	b9a2      	cbnz	r2, 8007dda <_dtoa_r+0x802>
 8007db0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007db4:	0d12      	lsrs	r2, r2, #20
 8007db6:	0512      	lsls	r2, r2, #20
 8007db8:	b18a      	cbz	r2, 8007dde <_dtoa_r+0x806>
 8007dba:	9b04      	ldr	r3, [sp, #16]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	9304      	str	r3, [sp, #16]
 8007dc0:	9b05      	ldr	r3, [sp, #20]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	9305      	str	r3, [sp, #20]
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f47f af70 	bne.w	8007cb2 <_dtoa_r+0x6da>
 8007dd2:	2001      	movs	r0, #1
 8007dd4:	e775      	b.n	8007cc2 <_dtoa_r+0x6ea>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e7f6      	b.n	8007dc8 <_dtoa_r+0x7f0>
 8007dda:	9b02      	ldr	r3, [sp, #8]
 8007ddc:	e7f4      	b.n	8007dc8 <_dtoa_r+0x7f0>
 8007dde:	9209      	str	r2, [sp, #36]	; 0x24
 8007de0:	e7f3      	b.n	8007dca <_dtoa_r+0x7f2>
 8007de2:	d082      	beq.n	8007cea <_dtoa_r+0x712>
 8007de4:	9b04      	ldr	r3, [sp, #16]
 8007de6:	321c      	adds	r2, #28
 8007de8:	4413      	add	r3, r2
 8007dea:	9304      	str	r3, [sp, #16]
 8007dec:	9b05      	ldr	r3, [sp, #20]
 8007dee:	4490      	add	r8, r2
 8007df0:	4413      	add	r3, r2
 8007df2:	e779      	b.n	8007ce8 <_dtoa_r+0x710>
 8007df4:	4602      	mov	r2, r0
 8007df6:	e7f5      	b.n	8007de4 <_dtoa_r+0x80c>
 8007df8:	f1b9 0f00 	cmp.w	r9, #0
 8007dfc:	dc36      	bgt.n	8007e6c <_dtoa_r+0x894>
 8007dfe:	9b06      	ldr	r3, [sp, #24]
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	dd33      	ble.n	8007e6c <_dtoa_r+0x894>
 8007e04:	46ca      	mov	sl, r9
 8007e06:	f1ba 0f00 	cmp.w	sl, #0
 8007e0a:	d10d      	bne.n	8007e28 <_dtoa_r+0x850>
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4653      	mov	r3, sl
 8007e10:	2205      	movs	r2, #5
 8007e12:	4630      	mov	r0, r6
 8007e14:	f000 f9fa 	bl	800820c <__multadd>
 8007e18:	4601      	mov	r1, r0
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f000 fc59 	bl	80086d4 <__mcmp>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	f73f ade4 	bgt.w	80079f0 <_dtoa_r+0x418>
 8007e28:	9b08      	ldr	r3, [sp, #32]
 8007e2a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e2e:	ea6f 0b03 	mvn.w	fp, r3
 8007e32:	f04f 0900 	mov.w	r9, #0
 8007e36:	4621      	mov	r1, r4
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f000 f9c5 	bl	80081c8 <_Bfree>
 8007e3e:	2f00      	cmp	r7, #0
 8007e40:	f43f aea1 	beq.w	8007b86 <_dtoa_r+0x5ae>
 8007e44:	f1b9 0f00 	cmp.w	r9, #0
 8007e48:	d005      	beq.n	8007e56 <_dtoa_r+0x87e>
 8007e4a:	45b9      	cmp	r9, r7
 8007e4c:	d003      	beq.n	8007e56 <_dtoa_r+0x87e>
 8007e4e:	4649      	mov	r1, r9
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 f9b9 	bl	80081c8 <_Bfree>
 8007e56:	4639      	mov	r1, r7
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f000 f9b5 	bl	80081c8 <_Bfree>
 8007e5e:	e692      	b.n	8007b86 <_dtoa_r+0x5ae>
 8007e60:	2400      	movs	r4, #0
 8007e62:	4627      	mov	r7, r4
 8007e64:	e7e0      	b.n	8007e28 <_dtoa_r+0x850>
 8007e66:	4693      	mov	fp, r2
 8007e68:	4627      	mov	r7, r4
 8007e6a:	e5c1      	b.n	80079f0 <_dtoa_r+0x418>
 8007e6c:	9b07      	ldr	r3, [sp, #28]
 8007e6e:	46ca      	mov	sl, r9
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 8100 	beq.w	8008076 <_dtoa_r+0xa9e>
 8007e76:	f1b8 0f00 	cmp.w	r8, #0
 8007e7a:	dd05      	ble.n	8007e88 <_dtoa_r+0x8b0>
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	4642      	mov	r2, r8
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 fbbb 	bl	80085fc <__lshift>
 8007e86:	4607      	mov	r7, r0
 8007e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d05d      	beq.n	8007f4a <_dtoa_r+0x972>
 8007e8e:	6879      	ldr	r1, [r7, #4]
 8007e90:	4630      	mov	r0, r6
 8007e92:	f000 f959 	bl	8008148 <_Balloc>
 8007e96:	4680      	mov	r8, r0
 8007e98:	b928      	cbnz	r0, 8007ea6 <_dtoa_r+0x8ce>
 8007e9a:	4b82      	ldr	r3, [pc, #520]	; (80080a4 <_dtoa_r+0xacc>)
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007ea2:	f7ff bbb1 	b.w	8007608 <_dtoa_r+0x30>
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	3202      	adds	r2, #2
 8007eaa:	0092      	lsls	r2, r2, #2
 8007eac:	f107 010c 	add.w	r1, r7, #12
 8007eb0:	300c      	adds	r0, #12
 8007eb2:	f7ff faf4 	bl	800749e <memcpy>
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	4641      	mov	r1, r8
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f000 fb9e 	bl	80085fc <__lshift>
 8007ec0:	9b01      	ldr	r3, [sp, #4]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	9304      	str	r3, [sp, #16]
 8007ec6:	9b01      	ldr	r3, [sp, #4]
 8007ec8:	4453      	add	r3, sl
 8007eca:	9308      	str	r3, [sp, #32]
 8007ecc:	9b02      	ldr	r3, [sp, #8]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	46b9      	mov	r9, r7
 8007ed4:	9307      	str	r3, [sp, #28]
 8007ed6:	4607      	mov	r7, r0
 8007ed8:	9b04      	ldr	r3, [sp, #16]
 8007eda:	4621      	mov	r1, r4
 8007edc:	3b01      	subs	r3, #1
 8007ede:	4628      	mov	r0, r5
 8007ee0:	9302      	str	r3, [sp, #8]
 8007ee2:	f7ff faf1 	bl	80074c8 <quorem>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	3330      	adds	r3, #48	; 0x30
 8007eea:	9005      	str	r0, [sp, #20]
 8007eec:	4649      	mov	r1, r9
 8007eee:	4628      	mov	r0, r5
 8007ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef2:	f000 fbef 	bl	80086d4 <__mcmp>
 8007ef6:	463a      	mov	r2, r7
 8007ef8:	4682      	mov	sl, r0
 8007efa:	4621      	mov	r1, r4
 8007efc:	4630      	mov	r0, r6
 8007efe:	f000 fc05 	bl	800870c <__mdiff>
 8007f02:	68c2      	ldr	r2, [r0, #12]
 8007f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f06:	4680      	mov	r8, r0
 8007f08:	bb0a      	cbnz	r2, 8007f4e <_dtoa_r+0x976>
 8007f0a:	4601      	mov	r1, r0
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	f000 fbe1 	bl	80086d4 <__mcmp>
 8007f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f14:	4602      	mov	r2, r0
 8007f16:	4641      	mov	r1, r8
 8007f18:	4630      	mov	r0, r6
 8007f1a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007f1e:	f000 f953 	bl	80081c8 <_Bfree>
 8007f22:	9b06      	ldr	r3, [sp, #24]
 8007f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f26:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007f2a:	ea43 0102 	orr.w	r1, r3, r2
 8007f2e:	9b07      	ldr	r3, [sp, #28]
 8007f30:	4319      	orrs	r1, r3
 8007f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f34:	d10d      	bne.n	8007f52 <_dtoa_r+0x97a>
 8007f36:	2b39      	cmp	r3, #57	; 0x39
 8007f38:	d029      	beq.n	8007f8e <_dtoa_r+0x9b6>
 8007f3a:	f1ba 0f00 	cmp.w	sl, #0
 8007f3e:	dd01      	ble.n	8007f44 <_dtoa_r+0x96c>
 8007f40:	9b05      	ldr	r3, [sp, #20]
 8007f42:	3331      	adds	r3, #49	; 0x31
 8007f44:	9a02      	ldr	r2, [sp, #8]
 8007f46:	7013      	strb	r3, [r2, #0]
 8007f48:	e775      	b.n	8007e36 <_dtoa_r+0x85e>
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	e7b8      	b.n	8007ec0 <_dtoa_r+0x8e8>
 8007f4e:	2201      	movs	r2, #1
 8007f50:	e7e1      	b.n	8007f16 <_dtoa_r+0x93e>
 8007f52:	f1ba 0f00 	cmp.w	sl, #0
 8007f56:	db06      	blt.n	8007f66 <_dtoa_r+0x98e>
 8007f58:	9906      	ldr	r1, [sp, #24]
 8007f5a:	ea41 0a0a 	orr.w	sl, r1, sl
 8007f5e:	9907      	ldr	r1, [sp, #28]
 8007f60:	ea5a 0a01 	orrs.w	sl, sl, r1
 8007f64:	d120      	bne.n	8007fa8 <_dtoa_r+0x9d0>
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	ddec      	ble.n	8007f44 <_dtoa_r+0x96c>
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	4630      	mov	r0, r6
 8007f70:	9304      	str	r3, [sp, #16]
 8007f72:	f000 fb43 	bl	80085fc <__lshift>
 8007f76:	4621      	mov	r1, r4
 8007f78:	4605      	mov	r5, r0
 8007f7a:	f000 fbab 	bl	80086d4 <__mcmp>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	9b04      	ldr	r3, [sp, #16]
 8007f82:	dc02      	bgt.n	8007f8a <_dtoa_r+0x9b2>
 8007f84:	d1de      	bne.n	8007f44 <_dtoa_r+0x96c>
 8007f86:	07da      	lsls	r2, r3, #31
 8007f88:	d5dc      	bpl.n	8007f44 <_dtoa_r+0x96c>
 8007f8a:	2b39      	cmp	r3, #57	; 0x39
 8007f8c:	d1d8      	bne.n	8007f40 <_dtoa_r+0x968>
 8007f8e:	9a02      	ldr	r2, [sp, #8]
 8007f90:	2339      	movs	r3, #57	; 0x39
 8007f92:	7013      	strb	r3, [r2, #0]
 8007f94:	4643      	mov	r3, r8
 8007f96:	4698      	mov	r8, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007f9e:	2a39      	cmp	r2, #57	; 0x39
 8007fa0:	d051      	beq.n	8008046 <_dtoa_r+0xa6e>
 8007fa2:	3201      	adds	r2, #1
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	e746      	b.n	8007e36 <_dtoa_r+0x85e>
 8007fa8:	2a00      	cmp	r2, #0
 8007faa:	dd03      	ble.n	8007fb4 <_dtoa_r+0x9dc>
 8007fac:	2b39      	cmp	r3, #57	; 0x39
 8007fae:	d0ee      	beq.n	8007f8e <_dtoa_r+0x9b6>
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	e7c7      	b.n	8007f44 <_dtoa_r+0x96c>
 8007fb4:	9a04      	ldr	r2, [sp, #16]
 8007fb6:	9908      	ldr	r1, [sp, #32]
 8007fb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007fbc:	428a      	cmp	r2, r1
 8007fbe:	d02b      	beq.n	8008018 <_dtoa_r+0xa40>
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	220a      	movs	r2, #10
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f000 f920 	bl	800820c <__multadd>
 8007fcc:	45b9      	cmp	r9, r7
 8007fce:	4605      	mov	r5, r0
 8007fd0:	f04f 0300 	mov.w	r3, #0
 8007fd4:	f04f 020a 	mov.w	r2, #10
 8007fd8:	4649      	mov	r1, r9
 8007fda:	4630      	mov	r0, r6
 8007fdc:	d107      	bne.n	8007fee <_dtoa_r+0xa16>
 8007fde:	f000 f915 	bl	800820c <__multadd>
 8007fe2:	4681      	mov	r9, r0
 8007fe4:	4607      	mov	r7, r0
 8007fe6:	9b04      	ldr	r3, [sp, #16]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	9304      	str	r3, [sp, #16]
 8007fec:	e774      	b.n	8007ed8 <_dtoa_r+0x900>
 8007fee:	f000 f90d 	bl	800820c <__multadd>
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	4681      	mov	r9, r0
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	220a      	movs	r2, #10
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f000 f906 	bl	800820c <__multadd>
 8008000:	4607      	mov	r7, r0
 8008002:	e7f0      	b.n	8007fe6 <_dtoa_r+0xa0e>
 8008004:	f1ba 0f00 	cmp.w	sl, #0
 8008008:	9a01      	ldr	r2, [sp, #4]
 800800a:	bfcc      	ite	gt
 800800c:	46d0      	movgt	r8, sl
 800800e:	f04f 0801 	movle.w	r8, #1
 8008012:	4490      	add	r8, r2
 8008014:	f04f 0900 	mov.w	r9, #0
 8008018:	4629      	mov	r1, r5
 800801a:	2201      	movs	r2, #1
 800801c:	4630      	mov	r0, r6
 800801e:	9302      	str	r3, [sp, #8]
 8008020:	f000 faec 	bl	80085fc <__lshift>
 8008024:	4621      	mov	r1, r4
 8008026:	4605      	mov	r5, r0
 8008028:	f000 fb54 	bl	80086d4 <__mcmp>
 800802c:	2800      	cmp	r0, #0
 800802e:	dcb1      	bgt.n	8007f94 <_dtoa_r+0x9bc>
 8008030:	d102      	bne.n	8008038 <_dtoa_r+0xa60>
 8008032:	9b02      	ldr	r3, [sp, #8]
 8008034:	07db      	lsls	r3, r3, #31
 8008036:	d4ad      	bmi.n	8007f94 <_dtoa_r+0x9bc>
 8008038:	4643      	mov	r3, r8
 800803a:	4698      	mov	r8, r3
 800803c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008040:	2a30      	cmp	r2, #48	; 0x30
 8008042:	d0fa      	beq.n	800803a <_dtoa_r+0xa62>
 8008044:	e6f7      	b.n	8007e36 <_dtoa_r+0x85e>
 8008046:	9a01      	ldr	r2, [sp, #4]
 8008048:	429a      	cmp	r2, r3
 800804a:	d1a4      	bne.n	8007f96 <_dtoa_r+0x9be>
 800804c:	f10b 0b01 	add.w	fp, fp, #1
 8008050:	2331      	movs	r3, #49	; 0x31
 8008052:	e778      	b.n	8007f46 <_dtoa_r+0x96e>
 8008054:	4b14      	ldr	r3, [pc, #80]	; (80080a8 <_dtoa_r+0xad0>)
 8008056:	f7ff bb2a 	b.w	80076ae <_dtoa_r+0xd6>
 800805a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800805c:	2b00      	cmp	r3, #0
 800805e:	f47f ab05 	bne.w	800766c <_dtoa_r+0x94>
 8008062:	4b12      	ldr	r3, [pc, #72]	; (80080ac <_dtoa_r+0xad4>)
 8008064:	f7ff bb23 	b.w	80076ae <_dtoa_r+0xd6>
 8008068:	f1ba 0f00 	cmp.w	sl, #0
 800806c:	dc03      	bgt.n	8008076 <_dtoa_r+0xa9e>
 800806e:	9b06      	ldr	r3, [sp, #24]
 8008070:	2b02      	cmp	r3, #2
 8008072:	f73f aec8 	bgt.w	8007e06 <_dtoa_r+0x82e>
 8008076:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800807a:	4621      	mov	r1, r4
 800807c:	4628      	mov	r0, r5
 800807e:	f7ff fa23 	bl	80074c8 <quorem>
 8008082:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008086:	f808 3b01 	strb.w	r3, [r8], #1
 800808a:	9a01      	ldr	r2, [sp, #4]
 800808c:	eba8 0202 	sub.w	r2, r8, r2
 8008090:	4592      	cmp	sl, r2
 8008092:	ddb7      	ble.n	8008004 <_dtoa_r+0xa2c>
 8008094:	4629      	mov	r1, r5
 8008096:	2300      	movs	r3, #0
 8008098:	220a      	movs	r2, #10
 800809a:	4630      	mov	r0, r6
 800809c:	f000 f8b6 	bl	800820c <__multadd>
 80080a0:	4605      	mov	r5, r0
 80080a2:	e7ea      	b.n	800807a <_dtoa_r+0xaa2>
 80080a4:	0800a972 	.word	0x0800a972
 80080a8:	0800a8cd 	.word	0x0800a8cd
 80080ac:	0800a8f6 	.word	0x0800a8f6

080080b0 <_free_r>:
 80080b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080b2:	2900      	cmp	r1, #0
 80080b4:	d044      	beq.n	8008140 <_free_r+0x90>
 80080b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ba:	9001      	str	r0, [sp, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f1a1 0404 	sub.w	r4, r1, #4
 80080c2:	bfb8      	it	lt
 80080c4:	18e4      	addlt	r4, r4, r3
 80080c6:	f7fd ffb5 	bl	8006034 <__malloc_lock>
 80080ca:	4a1e      	ldr	r2, [pc, #120]	; (8008144 <_free_r+0x94>)
 80080cc:	9801      	ldr	r0, [sp, #4]
 80080ce:	6813      	ldr	r3, [r2, #0]
 80080d0:	b933      	cbnz	r3, 80080e0 <_free_r+0x30>
 80080d2:	6063      	str	r3, [r4, #4]
 80080d4:	6014      	str	r4, [r2, #0]
 80080d6:	b003      	add	sp, #12
 80080d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080dc:	f7fd bfb0 	b.w	8006040 <__malloc_unlock>
 80080e0:	42a3      	cmp	r3, r4
 80080e2:	d908      	bls.n	80080f6 <_free_r+0x46>
 80080e4:	6825      	ldr	r5, [r4, #0]
 80080e6:	1961      	adds	r1, r4, r5
 80080e8:	428b      	cmp	r3, r1
 80080ea:	bf01      	itttt	eq
 80080ec:	6819      	ldreq	r1, [r3, #0]
 80080ee:	685b      	ldreq	r3, [r3, #4]
 80080f0:	1949      	addeq	r1, r1, r5
 80080f2:	6021      	streq	r1, [r4, #0]
 80080f4:	e7ed      	b.n	80080d2 <_free_r+0x22>
 80080f6:	461a      	mov	r2, r3
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	b10b      	cbz	r3, 8008100 <_free_r+0x50>
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	d9fa      	bls.n	80080f6 <_free_r+0x46>
 8008100:	6811      	ldr	r1, [r2, #0]
 8008102:	1855      	adds	r5, r2, r1
 8008104:	42a5      	cmp	r5, r4
 8008106:	d10b      	bne.n	8008120 <_free_r+0x70>
 8008108:	6824      	ldr	r4, [r4, #0]
 800810a:	4421      	add	r1, r4
 800810c:	1854      	adds	r4, r2, r1
 800810e:	42a3      	cmp	r3, r4
 8008110:	6011      	str	r1, [r2, #0]
 8008112:	d1e0      	bne.n	80080d6 <_free_r+0x26>
 8008114:	681c      	ldr	r4, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	6053      	str	r3, [r2, #4]
 800811a:	440c      	add	r4, r1
 800811c:	6014      	str	r4, [r2, #0]
 800811e:	e7da      	b.n	80080d6 <_free_r+0x26>
 8008120:	d902      	bls.n	8008128 <_free_r+0x78>
 8008122:	230c      	movs	r3, #12
 8008124:	6003      	str	r3, [r0, #0]
 8008126:	e7d6      	b.n	80080d6 <_free_r+0x26>
 8008128:	6825      	ldr	r5, [r4, #0]
 800812a:	1961      	adds	r1, r4, r5
 800812c:	428b      	cmp	r3, r1
 800812e:	bf04      	itt	eq
 8008130:	6819      	ldreq	r1, [r3, #0]
 8008132:	685b      	ldreq	r3, [r3, #4]
 8008134:	6063      	str	r3, [r4, #4]
 8008136:	bf04      	itt	eq
 8008138:	1949      	addeq	r1, r1, r5
 800813a:	6021      	streq	r1, [r4, #0]
 800813c:	6054      	str	r4, [r2, #4]
 800813e:	e7ca      	b.n	80080d6 <_free_r+0x26>
 8008140:	b003      	add	sp, #12
 8008142:	bd30      	pop	{r4, r5, pc}
 8008144:	20003184 	.word	0x20003184

08008148 <_Balloc>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	69c6      	ldr	r6, [r0, #28]
 800814c:	4604      	mov	r4, r0
 800814e:	460d      	mov	r5, r1
 8008150:	b976      	cbnz	r6, 8008170 <_Balloc+0x28>
 8008152:	2010      	movs	r0, #16
 8008154:	f7fd fec6 	bl	8005ee4 <malloc>
 8008158:	4602      	mov	r2, r0
 800815a:	61e0      	str	r0, [r4, #28]
 800815c:	b920      	cbnz	r0, 8008168 <_Balloc+0x20>
 800815e:	4b18      	ldr	r3, [pc, #96]	; (80081c0 <_Balloc+0x78>)
 8008160:	4818      	ldr	r0, [pc, #96]	; (80081c4 <_Balloc+0x7c>)
 8008162:	216b      	movs	r1, #107	; 0x6b
 8008164:	f001 fe70 	bl	8009e48 <__assert_func>
 8008168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800816c:	6006      	str	r6, [r0, #0]
 800816e:	60c6      	str	r6, [r0, #12]
 8008170:	69e6      	ldr	r6, [r4, #28]
 8008172:	68f3      	ldr	r3, [r6, #12]
 8008174:	b183      	cbz	r3, 8008198 <_Balloc+0x50>
 8008176:	69e3      	ldr	r3, [r4, #28]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800817e:	b9b8      	cbnz	r0, 80081b0 <_Balloc+0x68>
 8008180:	2101      	movs	r1, #1
 8008182:	fa01 f605 	lsl.w	r6, r1, r5
 8008186:	1d72      	adds	r2, r6, #5
 8008188:	0092      	lsls	r2, r2, #2
 800818a:	4620      	mov	r0, r4
 800818c:	f7fd fe94 	bl	8005eb8 <_calloc_r>
 8008190:	b160      	cbz	r0, 80081ac <_Balloc+0x64>
 8008192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008196:	e00e      	b.n	80081b6 <_Balloc+0x6e>
 8008198:	2221      	movs	r2, #33	; 0x21
 800819a:	2104      	movs	r1, #4
 800819c:	4620      	mov	r0, r4
 800819e:	f7fd fe8b 	bl	8005eb8 <_calloc_r>
 80081a2:	69e3      	ldr	r3, [r4, #28]
 80081a4:	60f0      	str	r0, [r6, #12]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e4      	bne.n	8008176 <_Balloc+0x2e>
 80081ac:	2000      	movs	r0, #0
 80081ae:	bd70      	pop	{r4, r5, r6, pc}
 80081b0:	6802      	ldr	r2, [r0, #0]
 80081b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081b6:	2300      	movs	r3, #0
 80081b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081bc:	e7f7      	b.n	80081ae <_Balloc+0x66>
 80081be:	bf00      	nop
 80081c0:	0800a903 	.word	0x0800a903
 80081c4:	0800a983 	.word	0x0800a983

080081c8 <_Bfree>:
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	69c6      	ldr	r6, [r0, #28]
 80081cc:	4605      	mov	r5, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	b976      	cbnz	r6, 80081f0 <_Bfree+0x28>
 80081d2:	2010      	movs	r0, #16
 80081d4:	f7fd fe86 	bl	8005ee4 <malloc>
 80081d8:	4602      	mov	r2, r0
 80081da:	61e8      	str	r0, [r5, #28]
 80081dc:	b920      	cbnz	r0, 80081e8 <_Bfree+0x20>
 80081de:	4b09      	ldr	r3, [pc, #36]	; (8008204 <_Bfree+0x3c>)
 80081e0:	4809      	ldr	r0, [pc, #36]	; (8008208 <_Bfree+0x40>)
 80081e2:	218f      	movs	r1, #143	; 0x8f
 80081e4:	f001 fe30 	bl	8009e48 <__assert_func>
 80081e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081ec:	6006      	str	r6, [r0, #0]
 80081ee:	60c6      	str	r6, [r0, #12]
 80081f0:	b13c      	cbz	r4, 8008202 <_Bfree+0x3a>
 80081f2:	69eb      	ldr	r3, [r5, #28]
 80081f4:	6862      	ldr	r2, [r4, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081fc:	6021      	str	r1, [r4, #0]
 80081fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008202:	bd70      	pop	{r4, r5, r6, pc}
 8008204:	0800a903 	.word	0x0800a903
 8008208:	0800a983 	.word	0x0800a983

0800820c <__multadd>:
 800820c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008210:	690d      	ldr	r5, [r1, #16]
 8008212:	4607      	mov	r7, r0
 8008214:	460c      	mov	r4, r1
 8008216:	461e      	mov	r6, r3
 8008218:	f101 0c14 	add.w	ip, r1, #20
 800821c:	2000      	movs	r0, #0
 800821e:	f8dc 3000 	ldr.w	r3, [ip]
 8008222:	b299      	uxth	r1, r3
 8008224:	fb02 6101 	mla	r1, r2, r1, r6
 8008228:	0c1e      	lsrs	r6, r3, #16
 800822a:	0c0b      	lsrs	r3, r1, #16
 800822c:	fb02 3306 	mla	r3, r2, r6, r3
 8008230:	b289      	uxth	r1, r1
 8008232:	3001      	adds	r0, #1
 8008234:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008238:	4285      	cmp	r5, r0
 800823a:	f84c 1b04 	str.w	r1, [ip], #4
 800823e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008242:	dcec      	bgt.n	800821e <__multadd+0x12>
 8008244:	b30e      	cbz	r6, 800828a <__multadd+0x7e>
 8008246:	68a3      	ldr	r3, [r4, #8]
 8008248:	42ab      	cmp	r3, r5
 800824a:	dc19      	bgt.n	8008280 <__multadd+0x74>
 800824c:	6861      	ldr	r1, [r4, #4]
 800824e:	4638      	mov	r0, r7
 8008250:	3101      	adds	r1, #1
 8008252:	f7ff ff79 	bl	8008148 <_Balloc>
 8008256:	4680      	mov	r8, r0
 8008258:	b928      	cbnz	r0, 8008266 <__multadd+0x5a>
 800825a:	4602      	mov	r2, r0
 800825c:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <__multadd+0x84>)
 800825e:	480d      	ldr	r0, [pc, #52]	; (8008294 <__multadd+0x88>)
 8008260:	21ba      	movs	r1, #186	; 0xba
 8008262:	f001 fdf1 	bl	8009e48 <__assert_func>
 8008266:	6922      	ldr	r2, [r4, #16]
 8008268:	3202      	adds	r2, #2
 800826a:	f104 010c 	add.w	r1, r4, #12
 800826e:	0092      	lsls	r2, r2, #2
 8008270:	300c      	adds	r0, #12
 8008272:	f7ff f914 	bl	800749e <memcpy>
 8008276:	4621      	mov	r1, r4
 8008278:	4638      	mov	r0, r7
 800827a:	f7ff ffa5 	bl	80081c8 <_Bfree>
 800827e:	4644      	mov	r4, r8
 8008280:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008284:	3501      	adds	r5, #1
 8008286:	615e      	str	r6, [r3, #20]
 8008288:	6125      	str	r5, [r4, #16]
 800828a:	4620      	mov	r0, r4
 800828c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008290:	0800a972 	.word	0x0800a972
 8008294:	0800a983 	.word	0x0800a983

08008298 <__s2b>:
 8008298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800829c:	460c      	mov	r4, r1
 800829e:	4615      	mov	r5, r2
 80082a0:	461f      	mov	r7, r3
 80082a2:	2209      	movs	r2, #9
 80082a4:	3308      	adds	r3, #8
 80082a6:	4606      	mov	r6, r0
 80082a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80082ac:	2100      	movs	r1, #0
 80082ae:	2201      	movs	r2, #1
 80082b0:	429a      	cmp	r2, r3
 80082b2:	db09      	blt.n	80082c8 <__s2b+0x30>
 80082b4:	4630      	mov	r0, r6
 80082b6:	f7ff ff47 	bl	8008148 <_Balloc>
 80082ba:	b940      	cbnz	r0, 80082ce <__s2b+0x36>
 80082bc:	4602      	mov	r2, r0
 80082be:	4b19      	ldr	r3, [pc, #100]	; (8008324 <__s2b+0x8c>)
 80082c0:	4819      	ldr	r0, [pc, #100]	; (8008328 <__s2b+0x90>)
 80082c2:	21d3      	movs	r1, #211	; 0xd3
 80082c4:	f001 fdc0 	bl	8009e48 <__assert_func>
 80082c8:	0052      	lsls	r2, r2, #1
 80082ca:	3101      	adds	r1, #1
 80082cc:	e7f0      	b.n	80082b0 <__s2b+0x18>
 80082ce:	9b08      	ldr	r3, [sp, #32]
 80082d0:	6143      	str	r3, [r0, #20]
 80082d2:	2d09      	cmp	r5, #9
 80082d4:	f04f 0301 	mov.w	r3, #1
 80082d8:	6103      	str	r3, [r0, #16]
 80082da:	dd16      	ble.n	800830a <__s2b+0x72>
 80082dc:	f104 0909 	add.w	r9, r4, #9
 80082e0:	46c8      	mov	r8, r9
 80082e2:	442c      	add	r4, r5
 80082e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80082e8:	4601      	mov	r1, r0
 80082ea:	3b30      	subs	r3, #48	; 0x30
 80082ec:	220a      	movs	r2, #10
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7ff ff8c 	bl	800820c <__multadd>
 80082f4:	45a0      	cmp	r8, r4
 80082f6:	d1f5      	bne.n	80082e4 <__s2b+0x4c>
 80082f8:	f1a5 0408 	sub.w	r4, r5, #8
 80082fc:	444c      	add	r4, r9
 80082fe:	1b2d      	subs	r5, r5, r4
 8008300:	1963      	adds	r3, r4, r5
 8008302:	42bb      	cmp	r3, r7
 8008304:	db04      	blt.n	8008310 <__s2b+0x78>
 8008306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830a:	340a      	adds	r4, #10
 800830c:	2509      	movs	r5, #9
 800830e:	e7f6      	b.n	80082fe <__s2b+0x66>
 8008310:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008314:	4601      	mov	r1, r0
 8008316:	3b30      	subs	r3, #48	; 0x30
 8008318:	220a      	movs	r2, #10
 800831a:	4630      	mov	r0, r6
 800831c:	f7ff ff76 	bl	800820c <__multadd>
 8008320:	e7ee      	b.n	8008300 <__s2b+0x68>
 8008322:	bf00      	nop
 8008324:	0800a972 	.word	0x0800a972
 8008328:	0800a983 	.word	0x0800a983

0800832c <__hi0bits>:
 800832c:	0c03      	lsrs	r3, r0, #16
 800832e:	041b      	lsls	r3, r3, #16
 8008330:	b9d3      	cbnz	r3, 8008368 <__hi0bits+0x3c>
 8008332:	0400      	lsls	r0, r0, #16
 8008334:	2310      	movs	r3, #16
 8008336:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800833a:	bf04      	itt	eq
 800833c:	0200      	lsleq	r0, r0, #8
 800833e:	3308      	addeq	r3, #8
 8008340:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008344:	bf04      	itt	eq
 8008346:	0100      	lsleq	r0, r0, #4
 8008348:	3304      	addeq	r3, #4
 800834a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800834e:	bf04      	itt	eq
 8008350:	0080      	lsleq	r0, r0, #2
 8008352:	3302      	addeq	r3, #2
 8008354:	2800      	cmp	r0, #0
 8008356:	db05      	blt.n	8008364 <__hi0bits+0x38>
 8008358:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800835c:	f103 0301 	add.w	r3, r3, #1
 8008360:	bf08      	it	eq
 8008362:	2320      	moveq	r3, #32
 8008364:	4618      	mov	r0, r3
 8008366:	4770      	bx	lr
 8008368:	2300      	movs	r3, #0
 800836a:	e7e4      	b.n	8008336 <__hi0bits+0xa>

0800836c <__lo0bits>:
 800836c:	6803      	ldr	r3, [r0, #0]
 800836e:	f013 0207 	ands.w	r2, r3, #7
 8008372:	d00c      	beq.n	800838e <__lo0bits+0x22>
 8008374:	07d9      	lsls	r1, r3, #31
 8008376:	d422      	bmi.n	80083be <__lo0bits+0x52>
 8008378:	079a      	lsls	r2, r3, #30
 800837a:	bf49      	itett	mi
 800837c:	085b      	lsrmi	r3, r3, #1
 800837e:	089b      	lsrpl	r3, r3, #2
 8008380:	6003      	strmi	r3, [r0, #0]
 8008382:	2201      	movmi	r2, #1
 8008384:	bf5c      	itt	pl
 8008386:	6003      	strpl	r3, [r0, #0]
 8008388:	2202      	movpl	r2, #2
 800838a:	4610      	mov	r0, r2
 800838c:	4770      	bx	lr
 800838e:	b299      	uxth	r1, r3
 8008390:	b909      	cbnz	r1, 8008396 <__lo0bits+0x2a>
 8008392:	0c1b      	lsrs	r3, r3, #16
 8008394:	2210      	movs	r2, #16
 8008396:	b2d9      	uxtb	r1, r3
 8008398:	b909      	cbnz	r1, 800839e <__lo0bits+0x32>
 800839a:	3208      	adds	r2, #8
 800839c:	0a1b      	lsrs	r3, r3, #8
 800839e:	0719      	lsls	r1, r3, #28
 80083a0:	bf04      	itt	eq
 80083a2:	091b      	lsreq	r3, r3, #4
 80083a4:	3204      	addeq	r2, #4
 80083a6:	0799      	lsls	r1, r3, #30
 80083a8:	bf04      	itt	eq
 80083aa:	089b      	lsreq	r3, r3, #2
 80083ac:	3202      	addeq	r2, #2
 80083ae:	07d9      	lsls	r1, r3, #31
 80083b0:	d403      	bmi.n	80083ba <__lo0bits+0x4e>
 80083b2:	085b      	lsrs	r3, r3, #1
 80083b4:	f102 0201 	add.w	r2, r2, #1
 80083b8:	d003      	beq.n	80083c2 <__lo0bits+0x56>
 80083ba:	6003      	str	r3, [r0, #0]
 80083bc:	e7e5      	b.n	800838a <__lo0bits+0x1e>
 80083be:	2200      	movs	r2, #0
 80083c0:	e7e3      	b.n	800838a <__lo0bits+0x1e>
 80083c2:	2220      	movs	r2, #32
 80083c4:	e7e1      	b.n	800838a <__lo0bits+0x1e>
	...

080083c8 <__i2b>:
 80083c8:	b510      	push	{r4, lr}
 80083ca:	460c      	mov	r4, r1
 80083cc:	2101      	movs	r1, #1
 80083ce:	f7ff febb 	bl	8008148 <_Balloc>
 80083d2:	4602      	mov	r2, r0
 80083d4:	b928      	cbnz	r0, 80083e2 <__i2b+0x1a>
 80083d6:	4b05      	ldr	r3, [pc, #20]	; (80083ec <__i2b+0x24>)
 80083d8:	4805      	ldr	r0, [pc, #20]	; (80083f0 <__i2b+0x28>)
 80083da:	f240 1145 	movw	r1, #325	; 0x145
 80083de:	f001 fd33 	bl	8009e48 <__assert_func>
 80083e2:	2301      	movs	r3, #1
 80083e4:	6144      	str	r4, [r0, #20]
 80083e6:	6103      	str	r3, [r0, #16]
 80083e8:	bd10      	pop	{r4, pc}
 80083ea:	bf00      	nop
 80083ec:	0800a972 	.word	0x0800a972
 80083f0:	0800a983 	.word	0x0800a983

080083f4 <__multiply>:
 80083f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	4691      	mov	r9, r2
 80083fa:	690a      	ldr	r2, [r1, #16]
 80083fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008400:	429a      	cmp	r2, r3
 8008402:	bfb8      	it	lt
 8008404:	460b      	movlt	r3, r1
 8008406:	460c      	mov	r4, r1
 8008408:	bfbc      	itt	lt
 800840a:	464c      	movlt	r4, r9
 800840c:	4699      	movlt	r9, r3
 800840e:	6927      	ldr	r7, [r4, #16]
 8008410:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008414:	68a3      	ldr	r3, [r4, #8]
 8008416:	6861      	ldr	r1, [r4, #4]
 8008418:	eb07 060a 	add.w	r6, r7, sl
 800841c:	42b3      	cmp	r3, r6
 800841e:	b085      	sub	sp, #20
 8008420:	bfb8      	it	lt
 8008422:	3101      	addlt	r1, #1
 8008424:	f7ff fe90 	bl	8008148 <_Balloc>
 8008428:	b930      	cbnz	r0, 8008438 <__multiply+0x44>
 800842a:	4602      	mov	r2, r0
 800842c:	4b44      	ldr	r3, [pc, #272]	; (8008540 <__multiply+0x14c>)
 800842e:	4845      	ldr	r0, [pc, #276]	; (8008544 <__multiply+0x150>)
 8008430:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008434:	f001 fd08 	bl	8009e48 <__assert_func>
 8008438:	f100 0514 	add.w	r5, r0, #20
 800843c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008440:	462b      	mov	r3, r5
 8008442:	2200      	movs	r2, #0
 8008444:	4543      	cmp	r3, r8
 8008446:	d321      	bcc.n	800848c <__multiply+0x98>
 8008448:	f104 0314 	add.w	r3, r4, #20
 800844c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008450:	f109 0314 	add.w	r3, r9, #20
 8008454:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008458:	9202      	str	r2, [sp, #8]
 800845a:	1b3a      	subs	r2, r7, r4
 800845c:	3a15      	subs	r2, #21
 800845e:	f022 0203 	bic.w	r2, r2, #3
 8008462:	3204      	adds	r2, #4
 8008464:	f104 0115 	add.w	r1, r4, #21
 8008468:	428f      	cmp	r7, r1
 800846a:	bf38      	it	cc
 800846c:	2204      	movcc	r2, #4
 800846e:	9201      	str	r2, [sp, #4]
 8008470:	9a02      	ldr	r2, [sp, #8]
 8008472:	9303      	str	r3, [sp, #12]
 8008474:	429a      	cmp	r2, r3
 8008476:	d80c      	bhi.n	8008492 <__multiply+0x9e>
 8008478:	2e00      	cmp	r6, #0
 800847a:	dd03      	ble.n	8008484 <__multiply+0x90>
 800847c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008480:	2b00      	cmp	r3, #0
 8008482:	d05b      	beq.n	800853c <__multiply+0x148>
 8008484:	6106      	str	r6, [r0, #16]
 8008486:	b005      	add	sp, #20
 8008488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848c:	f843 2b04 	str.w	r2, [r3], #4
 8008490:	e7d8      	b.n	8008444 <__multiply+0x50>
 8008492:	f8b3 a000 	ldrh.w	sl, [r3]
 8008496:	f1ba 0f00 	cmp.w	sl, #0
 800849a:	d024      	beq.n	80084e6 <__multiply+0xf2>
 800849c:	f104 0e14 	add.w	lr, r4, #20
 80084a0:	46a9      	mov	r9, r5
 80084a2:	f04f 0c00 	mov.w	ip, #0
 80084a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80084aa:	f8d9 1000 	ldr.w	r1, [r9]
 80084ae:	fa1f fb82 	uxth.w	fp, r2
 80084b2:	b289      	uxth	r1, r1
 80084b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80084b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80084bc:	f8d9 2000 	ldr.w	r2, [r9]
 80084c0:	4461      	add	r1, ip
 80084c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80084ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084ce:	b289      	uxth	r1, r1
 80084d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084d4:	4577      	cmp	r7, lr
 80084d6:	f849 1b04 	str.w	r1, [r9], #4
 80084da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084de:	d8e2      	bhi.n	80084a6 <__multiply+0xb2>
 80084e0:	9a01      	ldr	r2, [sp, #4]
 80084e2:	f845 c002 	str.w	ip, [r5, r2]
 80084e6:	9a03      	ldr	r2, [sp, #12]
 80084e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084ec:	3304      	adds	r3, #4
 80084ee:	f1b9 0f00 	cmp.w	r9, #0
 80084f2:	d021      	beq.n	8008538 <__multiply+0x144>
 80084f4:	6829      	ldr	r1, [r5, #0]
 80084f6:	f104 0c14 	add.w	ip, r4, #20
 80084fa:	46ae      	mov	lr, r5
 80084fc:	f04f 0a00 	mov.w	sl, #0
 8008500:	f8bc b000 	ldrh.w	fp, [ip]
 8008504:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008508:	fb09 220b 	mla	r2, r9, fp, r2
 800850c:	4452      	add	r2, sl
 800850e:	b289      	uxth	r1, r1
 8008510:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008514:	f84e 1b04 	str.w	r1, [lr], #4
 8008518:	f85c 1b04 	ldr.w	r1, [ip], #4
 800851c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008520:	f8be 1000 	ldrh.w	r1, [lr]
 8008524:	fb09 110a 	mla	r1, r9, sl, r1
 8008528:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800852c:	4567      	cmp	r7, ip
 800852e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008532:	d8e5      	bhi.n	8008500 <__multiply+0x10c>
 8008534:	9a01      	ldr	r2, [sp, #4]
 8008536:	50a9      	str	r1, [r5, r2]
 8008538:	3504      	adds	r5, #4
 800853a:	e799      	b.n	8008470 <__multiply+0x7c>
 800853c:	3e01      	subs	r6, #1
 800853e:	e79b      	b.n	8008478 <__multiply+0x84>
 8008540:	0800a972 	.word	0x0800a972
 8008544:	0800a983 	.word	0x0800a983

08008548 <__pow5mult>:
 8008548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800854c:	4615      	mov	r5, r2
 800854e:	f012 0203 	ands.w	r2, r2, #3
 8008552:	4606      	mov	r6, r0
 8008554:	460f      	mov	r7, r1
 8008556:	d007      	beq.n	8008568 <__pow5mult+0x20>
 8008558:	4c25      	ldr	r4, [pc, #148]	; (80085f0 <__pow5mult+0xa8>)
 800855a:	3a01      	subs	r2, #1
 800855c:	2300      	movs	r3, #0
 800855e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008562:	f7ff fe53 	bl	800820c <__multadd>
 8008566:	4607      	mov	r7, r0
 8008568:	10ad      	asrs	r5, r5, #2
 800856a:	d03d      	beq.n	80085e8 <__pow5mult+0xa0>
 800856c:	69f4      	ldr	r4, [r6, #28]
 800856e:	b97c      	cbnz	r4, 8008590 <__pow5mult+0x48>
 8008570:	2010      	movs	r0, #16
 8008572:	f7fd fcb7 	bl	8005ee4 <malloc>
 8008576:	4602      	mov	r2, r0
 8008578:	61f0      	str	r0, [r6, #28]
 800857a:	b928      	cbnz	r0, 8008588 <__pow5mult+0x40>
 800857c:	4b1d      	ldr	r3, [pc, #116]	; (80085f4 <__pow5mult+0xac>)
 800857e:	481e      	ldr	r0, [pc, #120]	; (80085f8 <__pow5mult+0xb0>)
 8008580:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008584:	f001 fc60 	bl	8009e48 <__assert_func>
 8008588:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800858c:	6004      	str	r4, [r0, #0]
 800858e:	60c4      	str	r4, [r0, #12]
 8008590:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008594:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008598:	b94c      	cbnz	r4, 80085ae <__pow5mult+0x66>
 800859a:	f240 2171 	movw	r1, #625	; 0x271
 800859e:	4630      	mov	r0, r6
 80085a0:	f7ff ff12 	bl	80083c8 <__i2b>
 80085a4:	2300      	movs	r3, #0
 80085a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80085aa:	4604      	mov	r4, r0
 80085ac:	6003      	str	r3, [r0, #0]
 80085ae:	f04f 0900 	mov.w	r9, #0
 80085b2:	07eb      	lsls	r3, r5, #31
 80085b4:	d50a      	bpl.n	80085cc <__pow5mult+0x84>
 80085b6:	4639      	mov	r1, r7
 80085b8:	4622      	mov	r2, r4
 80085ba:	4630      	mov	r0, r6
 80085bc:	f7ff ff1a 	bl	80083f4 <__multiply>
 80085c0:	4639      	mov	r1, r7
 80085c2:	4680      	mov	r8, r0
 80085c4:	4630      	mov	r0, r6
 80085c6:	f7ff fdff 	bl	80081c8 <_Bfree>
 80085ca:	4647      	mov	r7, r8
 80085cc:	106d      	asrs	r5, r5, #1
 80085ce:	d00b      	beq.n	80085e8 <__pow5mult+0xa0>
 80085d0:	6820      	ldr	r0, [r4, #0]
 80085d2:	b938      	cbnz	r0, 80085e4 <__pow5mult+0x9c>
 80085d4:	4622      	mov	r2, r4
 80085d6:	4621      	mov	r1, r4
 80085d8:	4630      	mov	r0, r6
 80085da:	f7ff ff0b 	bl	80083f4 <__multiply>
 80085de:	6020      	str	r0, [r4, #0]
 80085e0:	f8c0 9000 	str.w	r9, [r0]
 80085e4:	4604      	mov	r4, r0
 80085e6:	e7e4      	b.n	80085b2 <__pow5mult+0x6a>
 80085e8:	4638      	mov	r0, r7
 80085ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ee:	bf00      	nop
 80085f0:	0800aad0 	.word	0x0800aad0
 80085f4:	0800a903 	.word	0x0800a903
 80085f8:	0800a983 	.word	0x0800a983

080085fc <__lshift>:
 80085fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008600:	460c      	mov	r4, r1
 8008602:	6849      	ldr	r1, [r1, #4]
 8008604:	6923      	ldr	r3, [r4, #16]
 8008606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800860a:	68a3      	ldr	r3, [r4, #8]
 800860c:	4607      	mov	r7, r0
 800860e:	4691      	mov	r9, r2
 8008610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008614:	f108 0601 	add.w	r6, r8, #1
 8008618:	42b3      	cmp	r3, r6
 800861a:	db0b      	blt.n	8008634 <__lshift+0x38>
 800861c:	4638      	mov	r0, r7
 800861e:	f7ff fd93 	bl	8008148 <_Balloc>
 8008622:	4605      	mov	r5, r0
 8008624:	b948      	cbnz	r0, 800863a <__lshift+0x3e>
 8008626:	4602      	mov	r2, r0
 8008628:	4b28      	ldr	r3, [pc, #160]	; (80086cc <__lshift+0xd0>)
 800862a:	4829      	ldr	r0, [pc, #164]	; (80086d0 <__lshift+0xd4>)
 800862c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008630:	f001 fc0a 	bl	8009e48 <__assert_func>
 8008634:	3101      	adds	r1, #1
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	e7ee      	b.n	8008618 <__lshift+0x1c>
 800863a:	2300      	movs	r3, #0
 800863c:	f100 0114 	add.w	r1, r0, #20
 8008640:	f100 0210 	add.w	r2, r0, #16
 8008644:	4618      	mov	r0, r3
 8008646:	4553      	cmp	r3, sl
 8008648:	db33      	blt.n	80086b2 <__lshift+0xb6>
 800864a:	6920      	ldr	r0, [r4, #16]
 800864c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008650:	f104 0314 	add.w	r3, r4, #20
 8008654:	f019 091f 	ands.w	r9, r9, #31
 8008658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800865c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008660:	d02b      	beq.n	80086ba <__lshift+0xbe>
 8008662:	f1c9 0e20 	rsb	lr, r9, #32
 8008666:	468a      	mov	sl, r1
 8008668:	2200      	movs	r2, #0
 800866a:	6818      	ldr	r0, [r3, #0]
 800866c:	fa00 f009 	lsl.w	r0, r0, r9
 8008670:	4310      	orrs	r0, r2
 8008672:	f84a 0b04 	str.w	r0, [sl], #4
 8008676:	f853 2b04 	ldr.w	r2, [r3], #4
 800867a:	459c      	cmp	ip, r3
 800867c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008680:	d8f3      	bhi.n	800866a <__lshift+0x6e>
 8008682:	ebac 0304 	sub.w	r3, ip, r4
 8008686:	3b15      	subs	r3, #21
 8008688:	f023 0303 	bic.w	r3, r3, #3
 800868c:	3304      	adds	r3, #4
 800868e:	f104 0015 	add.w	r0, r4, #21
 8008692:	4584      	cmp	ip, r0
 8008694:	bf38      	it	cc
 8008696:	2304      	movcc	r3, #4
 8008698:	50ca      	str	r2, [r1, r3]
 800869a:	b10a      	cbz	r2, 80086a0 <__lshift+0xa4>
 800869c:	f108 0602 	add.w	r6, r8, #2
 80086a0:	3e01      	subs	r6, #1
 80086a2:	4638      	mov	r0, r7
 80086a4:	612e      	str	r6, [r5, #16]
 80086a6:	4621      	mov	r1, r4
 80086a8:	f7ff fd8e 	bl	80081c8 <_Bfree>
 80086ac:	4628      	mov	r0, r5
 80086ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80086b6:	3301      	adds	r3, #1
 80086b8:	e7c5      	b.n	8008646 <__lshift+0x4a>
 80086ba:	3904      	subs	r1, #4
 80086bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80086c4:	459c      	cmp	ip, r3
 80086c6:	d8f9      	bhi.n	80086bc <__lshift+0xc0>
 80086c8:	e7ea      	b.n	80086a0 <__lshift+0xa4>
 80086ca:	bf00      	nop
 80086cc:	0800a972 	.word	0x0800a972
 80086d0:	0800a983 	.word	0x0800a983

080086d4 <__mcmp>:
 80086d4:	b530      	push	{r4, r5, lr}
 80086d6:	6902      	ldr	r2, [r0, #16]
 80086d8:	690c      	ldr	r4, [r1, #16]
 80086da:	1b12      	subs	r2, r2, r4
 80086dc:	d10e      	bne.n	80086fc <__mcmp+0x28>
 80086de:	f100 0314 	add.w	r3, r0, #20
 80086e2:	3114      	adds	r1, #20
 80086e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80086e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80086ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80086f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80086f4:	42a5      	cmp	r5, r4
 80086f6:	d003      	beq.n	8008700 <__mcmp+0x2c>
 80086f8:	d305      	bcc.n	8008706 <__mcmp+0x32>
 80086fa:	2201      	movs	r2, #1
 80086fc:	4610      	mov	r0, r2
 80086fe:	bd30      	pop	{r4, r5, pc}
 8008700:	4283      	cmp	r3, r0
 8008702:	d3f3      	bcc.n	80086ec <__mcmp+0x18>
 8008704:	e7fa      	b.n	80086fc <__mcmp+0x28>
 8008706:	f04f 32ff 	mov.w	r2, #4294967295
 800870a:	e7f7      	b.n	80086fc <__mcmp+0x28>

0800870c <__mdiff>:
 800870c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008710:	460c      	mov	r4, r1
 8008712:	4606      	mov	r6, r0
 8008714:	4611      	mov	r1, r2
 8008716:	4620      	mov	r0, r4
 8008718:	4690      	mov	r8, r2
 800871a:	f7ff ffdb 	bl	80086d4 <__mcmp>
 800871e:	1e05      	subs	r5, r0, #0
 8008720:	d110      	bne.n	8008744 <__mdiff+0x38>
 8008722:	4629      	mov	r1, r5
 8008724:	4630      	mov	r0, r6
 8008726:	f7ff fd0f 	bl	8008148 <_Balloc>
 800872a:	b930      	cbnz	r0, 800873a <__mdiff+0x2e>
 800872c:	4b3a      	ldr	r3, [pc, #232]	; (8008818 <__mdiff+0x10c>)
 800872e:	4602      	mov	r2, r0
 8008730:	f240 2137 	movw	r1, #567	; 0x237
 8008734:	4839      	ldr	r0, [pc, #228]	; (800881c <__mdiff+0x110>)
 8008736:	f001 fb87 	bl	8009e48 <__assert_func>
 800873a:	2301      	movs	r3, #1
 800873c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008744:	bfa4      	itt	ge
 8008746:	4643      	movge	r3, r8
 8008748:	46a0      	movge	r8, r4
 800874a:	4630      	mov	r0, r6
 800874c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008750:	bfa6      	itte	ge
 8008752:	461c      	movge	r4, r3
 8008754:	2500      	movge	r5, #0
 8008756:	2501      	movlt	r5, #1
 8008758:	f7ff fcf6 	bl	8008148 <_Balloc>
 800875c:	b920      	cbnz	r0, 8008768 <__mdiff+0x5c>
 800875e:	4b2e      	ldr	r3, [pc, #184]	; (8008818 <__mdiff+0x10c>)
 8008760:	4602      	mov	r2, r0
 8008762:	f240 2145 	movw	r1, #581	; 0x245
 8008766:	e7e5      	b.n	8008734 <__mdiff+0x28>
 8008768:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800876c:	6926      	ldr	r6, [r4, #16]
 800876e:	60c5      	str	r5, [r0, #12]
 8008770:	f104 0914 	add.w	r9, r4, #20
 8008774:	f108 0514 	add.w	r5, r8, #20
 8008778:	f100 0e14 	add.w	lr, r0, #20
 800877c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008780:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008784:	f108 0210 	add.w	r2, r8, #16
 8008788:	46f2      	mov	sl, lr
 800878a:	2100      	movs	r1, #0
 800878c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008794:	fa11 f88b 	uxtah	r8, r1, fp
 8008798:	b299      	uxth	r1, r3
 800879a:	0c1b      	lsrs	r3, r3, #16
 800879c:	eba8 0801 	sub.w	r8, r8, r1
 80087a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80087a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80087a8:	fa1f f888 	uxth.w	r8, r8
 80087ac:	1419      	asrs	r1, r3, #16
 80087ae:	454e      	cmp	r6, r9
 80087b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80087b4:	f84a 3b04 	str.w	r3, [sl], #4
 80087b8:	d8e8      	bhi.n	800878c <__mdiff+0x80>
 80087ba:	1b33      	subs	r3, r6, r4
 80087bc:	3b15      	subs	r3, #21
 80087be:	f023 0303 	bic.w	r3, r3, #3
 80087c2:	3304      	adds	r3, #4
 80087c4:	3415      	adds	r4, #21
 80087c6:	42a6      	cmp	r6, r4
 80087c8:	bf38      	it	cc
 80087ca:	2304      	movcc	r3, #4
 80087cc:	441d      	add	r5, r3
 80087ce:	4473      	add	r3, lr
 80087d0:	469e      	mov	lr, r3
 80087d2:	462e      	mov	r6, r5
 80087d4:	4566      	cmp	r6, ip
 80087d6:	d30e      	bcc.n	80087f6 <__mdiff+0xea>
 80087d8:	f10c 0203 	add.w	r2, ip, #3
 80087dc:	1b52      	subs	r2, r2, r5
 80087de:	f022 0203 	bic.w	r2, r2, #3
 80087e2:	3d03      	subs	r5, #3
 80087e4:	45ac      	cmp	ip, r5
 80087e6:	bf38      	it	cc
 80087e8:	2200      	movcc	r2, #0
 80087ea:	4413      	add	r3, r2
 80087ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80087f0:	b17a      	cbz	r2, 8008812 <__mdiff+0x106>
 80087f2:	6107      	str	r7, [r0, #16]
 80087f4:	e7a4      	b.n	8008740 <__mdiff+0x34>
 80087f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80087fa:	fa11 f288 	uxtah	r2, r1, r8
 80087fe:	1414      	asrs	r4, r2, #16
 8008800:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008804:	b292      	uxth	r2, r2
 8008806:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800880a:	f84e 2b04 	str.w	r2, [lr], #4
 800880e:	1421      	asrs	r1, r4, #16
 8008810:	e7e0      	b.n	80087d4 <__mdiff+0xc8>
 8008812:	3f01      	subs	r7, #1
 8008814:	e7ea      	b.n	80087ec <__mdiff+0xe0>
 8008816:	bf00      	nop
 8008818:	0800a972 	.word	0x0800a972
 800881c:	0800a983 	.word	0x0800a983

08008820 <__ulp>:
 8008820:	b082      	sub	sp, #8
 8008822:	ed8d 0b00 	vstr	d0, [sp]
 8008826:	9a01      	ldr	r2, [sp, #4]
 8008828:	4b0f      	ldr	r3, [pc, #60]	; (8008868 <__ulp+0x48>)
 800882a:	4013      	ands	r3, r2
 800882c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008830:	2b00      	cmp	r3, #0
 8008832:	dc08      	bgt.n	8008846 <__ulp+0x26>
 8008834:	425b      	negs	r3, r3
 8008836:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800883a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800883e:	da04      	bge.n	800884a <__ulp+0x2a>
 8008840:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008844:	4113      	asrs	r3, r2
 8008846:	2200      	movs	r2, #0
 8008848:	e008      	b.n	800885c <__ulp+0x3c>
 800884a:	f1a2 0314 	sub.w	r3, r2, #20
 800884e:	2b1e      	cmp	r3, #30
 8008850:	bfda      	itte	le
 8008852:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008856:	40da      	lsrle	r2, r3
 8008858:	2201      	movgt	r2, #1
 800885a:	2300      	movs	r3, #0
 800885c:	4619      	mov	r1, r3
 800885e:	4610      	mov	r0, r2
 8008860:	ec41 0b10 	vmov	d0, r0, r1
 8008864:	b002      	add	sp, #8
 8008866:	4770      	bx	lr
 8008868:	7ff00000 	.word	0x7ff00000

0800886c <__b2d>:
 800886c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008870:	6906      	ldr	r6, [r0, #16]
 8008872:	f100 0814 	add.w	r8, r0, #20
 8008876:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800887a:	1f37      	subs	r7, r6, #4
 800887c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008880:	4610      	mov	r0, r2
 8008882:	f7ff fd53 	bl	800832c <__hi0bits>
 8008886:	f1c0 0320 	rsb	r3, r0, #32
 800888a:	280a      	cmp	r0, #10
 800888c:	600b      	str	r3, [r1, #0]
 800888e:	491b      	ldr	r1, [pc, #108]	; (80088fc <__b2d+0x90>)
 8008890:	dc15      	bgt.n	80088be <__b2d+0x52>
 8008892:	f1c0 0c0b 	rsb	ip, r0, #11
 8008896:	fa22 f30c 	lsr.w	r3, r2, ip
 800889a:	45b8      	cmp	r8, r7
 800889c:	ea43 0501 	orr.w	r5, r3, r1
 80088a0:	bf34      	ite	cc
 80088a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80088a6:	2300      	movcs	r3, #0
 80088a8:	3015      	adds	r0, #21
 80088aa:	fa02 f000 	lsl.w	r0, r2, r0
 80088ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80088b2:	4303      	orrs	r3, r0
 80088b4:	461c      	mov	r4, r3
 80088b6:	ec45 4b10 	vmov	d0, r4, r5
 80088ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088be:	45b8      	cmp	r8, r7
 80088c0:	bf3a      	itte	cc
 80088c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80088c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80088ca:	2300      	movcs	r3, #0
 80088cc:	380b      	subs	r0, #11
 80088ce:	d012      	beq.n	80088f6 <__b2d+0x8a>
 80088d0:	f1c0 0120 	rsb	r1, r0, #32
 80088d4:	fa23 f401 	lsr.w	r4, r3, r1
 80088d8:	4082      	lsls	r2, r0
 80088da:	4322      	orrs	r2, r4
 80088dc:	4547      	cmp	r7, r8
 80088de:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80088e2:	bf8c      	ite	hi
 80088e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80088e8:	2200      	movls	r2, #0
 80088ea:	4083      	lsls	r3, r0
 80088ec:	40ca      	lsrs	r2, r1
 80088ee:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80088f2:	4313      	orrs	r3, r2
 80088f4:	e7de      	b.n	80088b4 <__b2d+0x48>
 80088f6:	ea42 0501 	orr.w	r5, r2, r1
 80088fa:	e7db      	b.n	80088b4 <__b2d+0x48>
 80088fc:	3ff00000 	.word	0x3ff00000

08008900 <__d2b>:
 8008900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008904:	460f      	mov	r7, r1
 8008906:	2101      	movs	r1, #1
 8008908:	ec59 8b10 	vmov	r8, r9, d0
 800890c:	4616      	mov	r6, r2
 800890e:	f7ff fc1b 	bl	8008148 <_Balloc>
 8008912:	4604      	mov	r4, r0
 8008914:	b930      	cbnz	r0, 8008924 <__d2b+0x24>
 8008916:	4602      	mov	r2, r0
 8008918:	4b24      	ldr	r3, [pc, #144]	; (80089ac <__d2b+0xac>)
 800891a:	4825      	ldr	r0, [pc, #148]	; (80089b0 <__d2b+0xb0>)
 800891c:	f240 310f 	movw	r1, #783	; 0x30f
 8008920:	f001 fa92 	bl	8009e48 <__assert_func>
 8008924:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800892c:	bb2d      	cbnz	r5, 800897a <__d2b+0x7a>
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	f1b8 0300 	subs.w	r3, r8, #0
 8008934:	d026      	beq.n	8008984 <__d2b+0x84>
 8008936:	4668      	mov	r0, sp
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	f7ff fd17 	bl	800836c <__lo0bits>
 800893e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008942:	b1e8      	cbz	r0, 8008980 <__d2b+0x80>
 8008944:	f1c0 0320 	rsb	r3, r0, #32
 8008948:	fa02 f303 	lsl.w	r3, r2, r3
 800894c:	430b      	orrs	r3, r1
 800894e:	40c2      	lsrs	r2, r0
 8008950:	6163      	str	r3, [r4, #20]
 8008952:	9201      	str	r2, [sp, #4]
 8008954:	9b01      	ldr	r3, [sp, #4]
 8008956:	61a3      	str	r3, [r4, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	bf14      	ite	ne
 800895c:	2202      	movne	r2, #2
 800895e:	2201      	moveq	r2, #1
 8008960:	6122      	str	r2, [r4, #16]
 8008962:	b1bd      	cbz	r5, 8008994 <__d2b+0x94>
 8008964:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008968:	4405      	add	r5, r0
 800896a:	603d      	str	r5, [r7, #0]
 800896c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008970:	6030      	str	r0, [r6, #0]
 8008972:	4620      	mov	r0, r4
 8008974:	b003      	add	sp, #12
 8008976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800897a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800897e:	e7d6      	b.n	800892e <__d2b+0x2e>
 8008980:	6161      	str	r1, [r4, #20]
 8008982:	e7e7      	b.n	8008954 <__d2b+0x54>
 8008984:	a801      	add	r0, sp, #4
 8008986:	f7ff fcf1 	bl	800836c <__lo0bits>
 800898a:	9b01      	ldr	r3, [sp, #4]
 800898c:	6163      	str	r3, [r4, #20]
 800898e:	3020      	adds	r0, #32
 8008990:	2201      	movs	r2, #1
 8008992:	e7e5      	b.n	8008960 <__d2b+0x60>
 8008994:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008998:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800899c:	6038      	str	r0, [r7, #0]
 800899e:	6918      	ldr	r0, [r3, #16]
 80089a0:	f7ff fcc4 	bl	800832c <__hi0bits>
 80089a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089a8:	e7e2      	b.n	8008970 <__d2b+0x70>
 80089aa:	bf00      	nop
 80089ac:	0800a972 	.word	0x0800a972
 80089b0:	0800a983 	.word	0x0800a983

080089b4 <__ratio>:
 80089b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b8:	4688      	mov	r8, r1
 80089ba:	4669      	mov	r1, sp
 80089bc:	4681      	mov	r9, r0
 80089be:	f7ff ff55 	bl	800886c <__b2d>
 80089c2:	a901      	add	r1, sp, #4
 80089c4:	4640      	mov	r0, r8
 80089c6:	ec55 4b10 	vmov	r4, r5, d0
 80089ca:	ee10 aa10 	vmov	sl, s0
 80089ce:	f7ff ff4d 	bl	800886c <__b2d>
 80089d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80089d6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80089da:	1ad2      	subs	r2, r2, r3
 80089dc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80089e0:	1a5b      	subs	r3, r3, r1
 80089e2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80089e6:	ec57 6b10 	vmov	r6, r7, d0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	bfd6      	itet	le
 80089ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80089f2:	462a      	movgt	r2, r5
 80089f4:	463a      	movle	r2, r7
 80089f6:	46ab      	mov	fp, r5
 80089f8:	bfd6      	itet	le
 80089fa:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80089fe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008a02:	ee00 3a90 	vmovle	s1, r3
 8008a06:	ec4b ab17 	vmov	d7, sl, fp
 8008a0a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8008a0e:	b003      	add	sp, #12
 8008a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a14 <__copybits>:
 8008a14:	3901      	subs	r1, #1
 8008a16:	b570      	push	{r4, r5, r6, lr}
 8008a18:	1149      	asrs	r1, r1, #5
 8008a1a:	6914      	ldr	r4, [r2, #16]
 8008a1c:	3101      	adds	r1, #1
 8008a1e:	f102 0314 	add.w	r3, r2, #20
 8008a22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a2a:	1f05      	subs	r5, r0, #4
 8008a2c:	42a3      	cmp	r3, r4
 8008a2e:	d30c      	bcc.n	8008a4a <__copybits+0x36>
 8008a30:	1aa3      	subs	r3, r4, r2
 8008a32:	3b11      	subs	r3, #17
 8008a34:	f023 0303 	bic.w	r3, r3, #3
 8008a38:	3211      	adds	r2, #17
 8008a3a:	42a2      	cmp	r2, r4
 8008a3c:	bf88      	it	hi
 8008a3e:	2300      	movhi	r3, #0
 8008a40:	4418      	add	r0, r3
 8008a42:	2300      	movs	r3, #0
 8008a44:	4288      	cmp	r0, r1
 8008a46:	d305      	bcc.n	8008a54 <__copybits+0x40>
 8008a48:	bd70      	pop	{r4, r5, r6, pc}
 8008a4a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a4e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008a52:	e7eb      	b.n	8008a2c <__copybits+0x18>
 8008a54:	f840 3b04 	str.w	r3, [r0], #4
 8008a58:	e7f4      	b.n	8008a44 <__copybits+0x30>

08008a5a <__any_on>:
 8008a5a:	f100 0214 	add.w	r2, r0, #20
 8008a5e:	6900      	ldr	r0, [r0, #16]
 8008a60:	114b      	asrs	r3, r1, #5
 8008a62:	4298      	cmp	r0, r3
 8008a64:	b510      	push	{r4, lr}
 8008a66:	db11      	blt.n	8008a8c <__any_on+0x32>
 8008a68:	dd0a      	ble.n	8008a80 <__any_on+0x26>
 8008a6a:	f011 011f 	ands.w	r1, r1, #31
 8008a6e:	d007      	beq.n	8008a80 <__any_on+0x26>
 8008a70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a74:	fa24 f001 	lsr.w	r0, r4, r1
 8008a78:	fa00 f101 	lsl.w	r1, r0, r1
 8008a7c:	428c      	cmp	r4, r1
 8008a7e:	d10b      	bne.n	8008a98 <__any_on+0x3e>
 8008a80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d803      	bhi.n	8008a90 <__any_on+0x36>
 8008a88:	2000      	movs	r0, #0
 8008a8a:	bd10      	pop	{r4, pc}
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	e7f7      	b.n	8008a80 <__any_on+0x26>
 8008a90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a94:	2900      	cmp	r1, #0
 8008a96:	d0f5      	beq.n	8008a84 <__any_on+0x2a>
 8008a98:	2001      	movs	r0, #1
 8008a9a:	e7f6      	b.n	8008a8a <__any_on+0x30>

08008a9c <sulp>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	460d      	mov	r5, r1
 8008aa2:	4616      	mov	r6, r2
 8008aa4:	ec45 4b10 	vmov	d0, r4, r5
 8008aa8:	f7ff feba 	bl	8008820 <__ulp>
 8008aac:	b17e      	cbz	r6, 8008ace <sulp+0x32>
 8008aae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ab2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	dd09      	ble.n	8008ace <sulp+0x32>
 8008aba:	051b      	lsls	r3, r3, #20
 8008abc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008ac6:	ec41 0b17 	vmov	d7, r0, r1
 8008aca:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008ace:	bd70      	pop	{r4, r5, r6, pc}

08008ad0 <_strtod_l>:
 8008ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad4:	ed2d 8b0e 	vpush	{d8-d14}
 8008ad8:	b097      	sub	sp, #92	; 0x5c
 8008ada:	4604      	mov	r4, r0
 8008adc:	920d      	str	r2, [sp, #52]	; 0x34
 8008ade:	2200      	movs	r2, #0
 8008ae0:	9212      	str	r2, [sp, #72]	; 0x48
 8008ae2:	468a      	mov	sl, r1
 8008ae4:	f04f 0800 	mov.w	r8, #0
 8008ae8:	f04f 0900 	mov.w	r9, #0
 8008aec:	460a      	mov	r2, r1
 8008aee:	9211      	str	r2, [sp, #68]	; 0x44
 8008af0:	7811      	ldrb	r1, [r2, #0]
 8008af2:	292b      	cmp	r1, #43	; 0x2b
 8008af4:	d04c      	beq.n	8008b90 <_strtod_l+0xc0>
 8008af6:	d839      	bhi.n	8008b6c <_strtod_l+0x9c>
 8008af8:	290d      	cmp	r1, #13
 8008afa:	d833      	bhi.n	8008b64 <_strtod_l+0x94>
 8008afc:	2908      	cmp	r1, #8
 8008afe:	d833      	bhi.n	8008b68 <_strtod_l+0x98>
 8008b00:	2900      	cmp	r1, #0
 8008b02:	d03c      	beq.n	8008b7e <_strtod_l+0xae>
 8008b04:	2200      	movs	r2, #0
 8008b06:	9208      	str	r2, [sp, #32]
 8008b08:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008b0a:	7832      	ldrb	r2, [r6, #0]
 8008b0c:	2a30      	cmp	r2, #48	; 0x30
 8008b0e:	f040 80b8 	bne.w	8008c82 <_strtod_l+0x1b2>
 8008b12:	7872      	ldrb	r2, [r6, #1]
 8008b14:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008b18:	2a58      	cmp	r2, #88	; 0x58
 8008b1a:	d170      	bne.n	8008bfe <_strtod_l+0x12e>
 8008b1c:	9302      	str	r3, [sp, #8]
 8008b1e:	9b08      	ldr	r3, [sp, #32]
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	ab12      	add	r3, sp, #72	; 0x48
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	4a91      	ldr	r2, [pc, #580]	; (8008d6c <_strtod_l+0x29c>)
 8008b28:	ab13      	add	r3, sp, #76	; 0x4c
 8008b2a:	a911      	add	r1, sp, #68	; 0x44
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f001 fa11 	bl	8009f54 <__gethex>
 8008b32:	f010 070f 	ands.w	r7, r0, #15
 8008b36:	4605      	mov	r5, r0
 8008b38:	d005      	beq.n	8008b46 <_strtod_l+0x76>
 8008b3a:	2f06      	cmp	r7, #6
 8008b3c:	d12a      	bne.n	8008b94 <_strtod_l+0xc4>
 8008b3e:	3601      	adds	r6, #1
 8008b40:	2300      	movs	r3, #0
 8008b42:	9611      	str	r6, [sp, #68]	; 0x44
 8008b44:	9308      	str	r3, [sp, #32]
 8008b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f040 8555 	bne.w	80095f8 <_strtod_l+0xb28>
 8008b4e:	9b08      	ldr	r3, [sp, #32]
 8008b50:	ec49 8b10 	vmov	d0, r8, r9
 8008b54:	b1cb      	cbz	r3, 8008b8a <_strtod_l+0xba>
 8008b56:	eeb1 0b40 	vneg.f64	d0, d0
 8008b5a:	b017      	add	sp, #92	; 0x5c
 8008b5c:	ecbd 8b0e 	vpop	{d8-d14}
 8008b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b64:	2920      	cmp	r1, #32
 8008b66:	d1cd      	bne.n	8008b04 <_strtod_l+0x34>
 8008b68:	3201      	adds	r2, #1
 8008b6a:	e7c0      	b.n	8008aee <_strtod_l+0x1e>
 8008b6c:	292d      	cmp	r1, #45	; 0x2d
 8008b6e:	d1c9      	bne.n	8008b04 <_strtod_l+0x34>
 8008b70:	2101      	movs	r1, #1
 8008b72:	9108      	str	r1, [sp, #32]
 8008b74:	1c51      	adds	r1, r2, #1
 8008b76:	9111      	str	r1, [sp, #68]	; 0x44
 8008b78:	7852      	ldrb	r2, [r2, #1]
 8008b7a:	2a00      	cmp	r2, #0
 8008b7c:	d1c4      	bne.n	8008b08 <_strtod_l+0x38>
 8008b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b80:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f040 8535 	bne.w	80095f4 <_strtod_l+0xb24>
 8008b8a:	ec49 8b10 	vmov	d0, r8, r9
 8008b8e:	e7e4      	b.n	8008b5a <_strtod_l+0x8a>
 8008b90:	2100      	movs	r1, #0
 8008b92:	e7ee      	b.n	8008b72 <_strtod_l+0xa2>
 8008b94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b96:	b13a      	cbz	r2, 8008ba8 <_strtod_l+0xd8>
 8008b98:	2135      	movs	r1, #53	; 0x35
 8008b9a:	a814      	add	r0, sp, #80	; 0x50
 8008b9c:	f7ff ff3a 	bl	8008a14 <__copybits>
 8008ba0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f7ff fb10 	bl	80081c8 <_Bfree>
 8008ba8:	1e7b      	subs	r3, r7, #1
 8008baa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008bac:	2b04      	cmp	r3, #4
 8008bae:	d806      	bhi.n	8008bbe <_strtod_l+0xee>
 8008bb0:	e8df f003 	tbb	[pc, r3]
 8008bb4:	201d0314 	.word	0x201d0314
 8008bb8:	14          	.byte	0x14
 8008bb9:	00          	.byte	0x00
 8008bba:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008bbe:	05eb      	lsls	r3, r5, #23
 8008bc0:	bf48      	it	mi
 8008bc2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008bc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bca:	0d1b      	lsrs	r3, r3, #20
 8008bcc:	051b      	lsls	r3, r3, #20
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1b9      	bne.n	8008b46 <_strtod_l+0x76>
 8008bd2:	f7fe fc37 	bl	8007444 <__errno>
 8008bd6:	2322      	movs	r3, #34	; 0x22
 8008bd8:	6003      	str	r3, [r0, #0]
 8008bda:	e7b4      	b.n	8008b46 <_strtod_l+0x76>
 8008bdc:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8008be0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008be4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008be8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008bec:	e7e7      	b.n	8008bbe <_strtod_l+0xee>
 8008bee:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8008d74 <_strtod_l+0x2a4>
 8008bf2:	e7e4      	b.n	8008bbe <_strtod_l+0xee>
 8008bf4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008bf8:	f04f 38ff 	mov.w	r8, #4294967295
 8008bfc:	e7df      	b.n	8008bbe <_strtod_l+0xee>
 8008bfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	9211      	str	r2, [sp, #68]	; 0x44
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	2b30      	cmp	r3, #48	; 0x30
 8008c08:	d0f9      	beq.n	8008bfe <_strtod_l+0x12e>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d09b      	beq.n	8008b46 <_strtod_l+0x76>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	9306      	str	r3, [sp, #24]
 8008c12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c14:	9309      	str	r3, [sp, #36]	; 0x24
 8008c16:	2300      	movs	r3, #0
 8008c18:	9305      	str	r3, [sp, #20]
 8008c1a:	9307      	str	r3, [sp, #28]
 8008c1c:	461e      	mov	r6, r3
 8008c1e:	220a      	movs	r2, #10
 8008c20:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008c22:	7805      	ldrb	r5, [r0, #0]
 8008c24:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008c28:	b2d9      	uxtb	r1, r3
 8008c2a:	2909      	cmp	r1, #9
 8008c2c:	d92b      	bls.n	8008c86 <_strtod_l+0x1b6>
 8008c2e:	4950      	ldr	r1, [pc, #320]	; (8008d70 <_strtod_l+0x2a0>)
 8008c30:	2201      	movs	r2, #1
 8008c32:	f001 f8cb 	bl	8009dcc <strncmp>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d035      	beq.n	8008ca6 <_strtod_l+0x1d6>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	462a      	mov	r2, r5
 8008c3e:	4633      	mov	r3, r6
 8008c40:	4683      	mov	fp, r0
 8008c42:	4601      	mov	r1, r0
 8008c44:	2a65      	cmp	r2, #101	; 0x65
 8008c46:	d001      	beq.n	8008c4c <_strtod_l+0x17c>
 8008c48:	2a45      	cmp	r2, #69	; 0x45
 8008c4a:	d118      	bne.n	8008c7e <_strtod_l+0x1ae>
 8008c4c:	b91b      	cbnz	r3, 8008c56 <_strtod_l+0x186>
 8008c4e:	9b06      	ldr	r3, [sp, #24]
 8008c50:	4303      	orrs	r3, r0
 8008c52:	d094      	beq.n	8008b7e <_strtod_l+0xae>
 8008c54:	2300      	movs	r3, #0
 8008c56:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8008c5a:	f10a 0201 	add.w	r2, sl, #1
 8008c5e:	9211      	str	r2, [sp, #68]	; 0x44
 8008c60:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8008c64:	2a2b      	cmp	r2, #43	; 0x2b
 8008c66:	d075      	beq.n	8008d54 <_strtod_l+0x284>
 8008c68:	2a2d      	cmp	r2, #45	; 0x2d
 8008c6a:	d07b      	beq.n	8008d64 <_strtod_l+0x294>
 8008c6c:	f04f 0e00 	mov.w	lr, #0
 8008c70:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008c74:	2d09      	cmp	r5, #9
 8008c76:	f240 8083 	bls.w	8008d80 <_strtod_l+0x2b0>
 8008c7a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8008c7e:	2500      	movs	r5, #0
 8008c80:	e09e      	b.n	8008dc0 <_strtod_l+0x2f0>
 8008c82:	2300      	movs	r3, #0
 8008c84:	e7c4      	b.n	8008c10 <_strtod_l+0x140>
 8008c86:	2e08      	cmp	r6, #8
 8008c88:	bfd5      	itete	le
 8008c8a:	9907      	ldrle	r1, [sp, #28]
 8008c8c:	9905      	ldrgt	r1, [sp, #20]
 8008c8e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c92:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008c96:	f100 0001 	add.w	r0, r0, #1
 8008c9a:	bfd4      	ite	le
 8008c9c:	9307      	strle	r3, [sp, #28]
 8008c9e:	9305      	strgt	r3, [sp, #20]
 8008ca0:	3601      	adds	r6, #1
 8008ca2:	9011      	str	r0, [sp, #68]	; 0x44
 8008ca4:	e7bc      	b.n	8008c20 <_strtod_l+0x150>
 8008ca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	9211      	str	r2, [sp, #68]	; 0x44
 8008cac:	785a      	ldrb	r2, [r3, #1]
 8008cae:	b3ae      	cbz	r6, 8008d1c <_strtod_l+0x24c>
 8008cb0:	4683      	mov	fp, r0
 8008cb2:	4633      	mov	r3, r6
 8008cb4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008cb8:	2909      	cmp	r1, #9
 8008cba:	d912      	bls.n	8008ce2 <_strtod_l+0x212>
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	e7c1      	b.n	8008c44 <_strtod_l+0x174>
 8008cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	9211      	str	r2, [sp, #68]	; 0x44
 8008cc6:	785a      	ldrb	r2, [r3, #1]
 8008cc8:	3001      	adds	r0, #1
 8008cca:	2a30      	cmp	r2, #48	; 0x30
 8008ccc:	d0f8      	beq.n	8008cc0 <_strtod_l+0x1f0>
 8008cce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008cd2:	2b08      	cmp	r3, #8
 8008cd4:	f200 8495 	bhi.w	8009602 <_strtod_l+0xb32>
 8008cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cda:	9309      	str	r3, [sp, #36]	; 0x24
 8008cdc:	4683      	mov	fp, r0
 8008cde:	2000      	movs	r0, #0
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	3a30      	subs	r2, #48	; 0x30
 8008ce4:	f100 0101 	add.w	r1, r0, #1
 8008ce8:	d012      	beq.n	8008d10 <_strtod_l+0x240>
 8008cea:	448b      	add	fp, r1
 8008cec:	eb00 0c03 	add.w	ip, r0, r3
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	250a      	movs	r5, #10
 8008cf4:	4561      	cmp	r1, ip
 8008cf6:	d113      	bne.n	8008d20 <_strtod_l+0x250>
 8008cf8:	1819      	adds	r1, r3, r0
 8008cfa:	2908      	cmp	r1, #8
 8008cfc:	f103 0301 	add.w	r3, r3, #1
 8008d00:	4403      	add	r3, r0
 8008d02:	dc1b      	bgt.n	8008d3c <_strtod_l+0x26c>
 8008d04:	9807      	ldr	r0, [sp, #28]
 8008d06:	210a      	movs	r1, #10
 8008d08:	fb01 2200 	mla	r2, r1, r0, r2
 8008d0c:	9207      	str	r2, [sp, #28]
 8008d0e:	2100      	movs	r1, #0
 8008d10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d12:	1c50      	adds	r0, r2, #1
 8008d14:	9011      	str	r0, [sp, #68]	; 0x44
 8008d16:	7852      	ldrb	r2, [r2, #1]
 8008d18:	4608      	mov	r0, r1
 8008d1a:	e7cb      	b.n	8008cb4 <_strtod_l+0x1e4>
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	e7d4      	b.n	8008cca <_strtod_l+0x1fa>
 8008d20:	2908      	cmp	r1, #8
 8008d22:	f101 0101 	add.w	r1, r1, #1
 8008d26:	dc03      	bgt.n	8008d30 <_strtod_l+0x260>
 8008d28:	9f07      	ldr	r7, [sp, #28]
 8008d2a:	436f      	muls	r7, r5
 8008d2c:	9707      	str	r7, [sp, #28]
 8008d2e:	e7e1      	b.n	8008cf4 <_strtod_l+0x224>
 8008d30:	2910      	cmp	r1, #16
 8008d32:	bfde      	ittt	le
 8008d34:	9f05      	ldrle	r7, [sp, #20]
 8008d36:	436f      	mulle	r7, r5
 8008d38:	9705      	strle	r7, [sp, #20]
 8008d3a:	e7db      	b.n	8008cf4 <_strtod_l+0x224>
 8008d3c:	2b10      	cmp	r3, #16
 8008d3e:	bfdf      	itttt	le
 8008d40:	9805      	ldrle	r0, [sp, #20]
 8008d42:	210a      	movle	r1, #10
 8008d44:	fb01 2200 	mlale	r2, r1, r0, r2
 8008d48:	9205      	strle	r2, [sp, #20]
 8008d4a:	e7e0      	b.n	8008d0e <_strtod_l+0x23e>
 8008d4c:	f04f 0b00 	mov.w	fp, #0
 8008d50:	2101      	movs	r1, #1
 8008d52:	e77c      	b.n	8008c4e <_strtod_l+0x17e>
 8008d54:	f04f 0e00 	mov.w	lr, #0
 8008d58:	f10a 0202 	add.w	r2, sl, #2
 8008d5c:	9211      	str	r2, [sp, #68]	; 0x44
 8008d5e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8008d62:	e785      	b.n	8008c70 <_strtod_l+0x1a0>
 8008d64:	f04f 0e01 	mov.w	lr, #1
 8008d68:	e7f6      	b.n	8008d58 <_strtod_l+0x288>
 8008d6a:	bf00      	nop
 8008d6c:	0800aae0 	.word	0x0800aae0
 8008d70:	0800aadc 	.word	0x0800aadc
 8008d74:	7ff00000 	.word	0x7ff00000
 8008d78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d7a:	1c55      	adds	r5, r2, #1
 8008d7c:	9511      	str	r5, [sp, #68]	; 0x44
 8008d7e:	7852      	ldrb	r2, [r2, #1]
 8008d80:	2a30      	cmp	r2, #48	; 0x30
 8008d82:	d0f9      	beq.n	8008d78 <_strtod_l+0x2a8>
 8008d84:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008d88:	2d08      	cmp	r5, #8
 8008d8a:	f63f af78 	bhi.w	8008c7e <_strtod_l+0x1ae>
 8008d8e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008d92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d94:	920a      	str	r2, [sp, #40]	; 0x28
 8008d96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d98:	1c55      	adds	r5, r2, #1
 8008d9a:	9511      	str	r5, [sp, #68]	; 0x44
 8008d9c:	7852      	ldrb	r2, [r2, #1]
 8008d9e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8008da2:	2f09      	cmp	r7, #9
 8008da4:	d937      	bls.n	8008e16 <_strtod_l+0x346>
 8008da6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008da8:	1bed      	subs	r5, r5, r7
 8008daa:	2d08      	cmp	r5, #8
 8008dac:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008db0:	dc02      	bgt.n	8008db8 <_strtod_l+0x2e8>
 8008db2:	4565      	cmp	r5, ip
 8008db4:	bfa8      	it	ge
 8008db6:	4665      	movge	r5, ip
 8008db8:	f1be 0f00 	cmp.w	lr, #0
 8008dbc:	d000      	beq.n	8008dc0 <_strtod_l+0x2f0>
 8008dbe:	426d      	negs	r5, r5
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d14d      	bne.n	8008e60 <_strtod_l+0x390>
 8008dc4:	9b06      	ldr	r3, [sp, #24]
 8008dc6:	4303      	orrs	r3, r0
 8008dc8:	f47f aebd 	bne.w	8008b46 <_strtod_l+0x76>
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	f47f aed6 	bne.w	8008b7e <_strtod_l+0xae>
 8008dd2:	2a69      	cmp	r2, #105	; 0x69
 8008dd4:	d027      	beq.n	8008e26 <_strtod_l+0x356>
 8008dd6:	dc24      	bgt.n	8008e22 <_strtod_l+0x352>
 8008dd8:	2a49      	cmp	r2, #73	; 0x49
 8008dda:	d024      	beq.n	8008e26 <_strtod_l+0x356>
 8008ddc:	2a4e      	cmp	r2, #78	; 0x4e
 8008dde:	f47f aece 	bne.w	8008b7e <_strtod_l+0xae>
 8008de2:	4995      	ldr	r1, [pc, #596]	; (8009038 <_strtod_l+0x568>)
 8008de4:	a811      	add	r0, sp, #68	; 0x44
 8008de6:	f001 faf5 	bl	800a3d4 <__match>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	f43f aec7 	beq.w	8008b7e <_strtod_l+0xae>
 8008df0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b28      	cmp	r3, #40	; 0x28
 8008df6:	d12d      	bne.n	8008e54 <_strtod_l+0x384>
 8008df8:	4990      	ldr	r1, [pc, #576]	; (800903c <_strtod_l+0x56c>)
 8008dfa:	aa14      	add	r2, sp, #80	; 0x50
 8008dfc:	a811      	add	r0, sp, #68	; 0x44
 8008dfe:	f001 fafd 	bl	800a3fc <__hexnan>
 8008e02:	2805      	cmp	r0, #5
 8008e04:	d126      	bne.n	8008e54 <_strtod_l+0x384>
 8008e06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008e0c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008e10:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008e14:	e697      	b.n	8008b46 <_strtod_l+0x76>
 8008e16:	250a      	movs	r5, #10
 8008e18:	fb05 2c0c 	mla	ip, r5, ip, r2
 8008e1c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008e20:	e7b9      	b.n	8008d96 <_strtod_l+0x2c6>
 8008e22:	2a6e      	cmp	r2, #110	; 0x6e
 8008e24:	e7db      	b.n	8008dde <_strtod_l+0x30e>
 8008e26:	4986      	ldr	r1, [pc, #536]	; (8009040 <_strtod_l+0x570>)
 8008e28:	a811      	add	r0, sp, #68	; 0x44
 8008e2a:	f001 fad3 	bl	800a3d4 <__match>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f43f aea5 	beq.w	8008b7e <_strtod_l+0xae>
 8008e34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e36:	4983      	ldr	r1, [pc, #524]	; (8009044 <_strtod_l+0x574>)
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	a811      	add	r0, sp, #68	; 0x44
 8008e3c:	9311      	str	r3, [sp, #68]	; 0x44
 8008e3e:	f001 fac9 	bl	800a3d4 <__match>
 8008e42:	b910      	cbnz	r0, 8008e4a <_strtod_l+0x37a>
 8008e44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e46:	3301      	adds	r3, #1
 8008e48:	9311      	str	r3, [sp, #68]	; 0x44
 8008e4a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8009058 <_strtod_l+0x588>
 8008e4e:	f04f 0800 	mov.w	r8, #0
 8008e52:	e678      	b.n	8008b46 <_strtod_l+0x76>
 8008e54:	487c      	ldr	r0, [pc, #496]	; (8009048 <_strtod_l+0x578>)
 8008e56:	f000 ffef 	bl	8009e38 <nan>
 8008e5a:	ec59 8b10 	vmov	r8, r9, d0
 8008e5e:	e672      	b.n	8008b46 <_strtod_l+0x76>
 8008e60:	eddd 7a07 	vldr	s15, [sp, #28]
 8008e64:	eba5 020b 	sub.w	r2, r5, fp
 8008e68:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008e6c:	2e00      	cmp	r6, #0
 8008e6e:	bf08      	it	eq
 8008e70:	461e      	moveq	r6, r3
 8008e72:	2b10      	cmp	r3, #16
 8008e74:	9206      	str	r2, [sp, #24]
 8008e76:	461a      	mov	r2, r3
 8008e78:	bfa8      	it	ge
 8008e7a:	2210      	movge	r2, #16
 8008e7c:	2b09      	cmp	r3, #9
 8008e7e:	ec59 8b17 	vmov	r8, r9, d7
 8008e82:	dd0c      	ble.n	8008e9e <_strtod_l+0x3ce>
 8008e84:	4971      	ldr	r1, [pc, #452]	; (800904c <_strtod_l+0x57c>)
 8008e86:	eddd 6a05 	vldr	s13, [sp, #20]
 8008e8a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008e8e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8008e92:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008e96:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008e9a:	ec59 8b16 	vmov	r8, r9, d6
 8008e9e:	2b0f      	cmp	r3, #15
 8008ea0:	dc37      	bgt.n	8008f12 <_strtod_l+0x442>
 8008ea2:	9906      	ldr	r1, [sp, #24]
 8008ea4:	2900      	cmp	r1, #0
 8008ea6:	f43f ae4e 	beq.w	8008b46 <_strtod_l+0x76>
 8008eaa:	dd23      	ble.n	8008ef4 <_strtod_l+0x424>
 8008eac:	2916      	cmp	r1, #22
 8008eae:	dc0b      	bgt.n	8008ec8 <_strtod_l+0x3f8>
 8008eb0:	4b66      	ldr	r3, [pc, #408]	; (800904c <_strtod_l+0x57c>)
 8008eb2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008eb6:	ed93 7b00 	vldr	d7, [r3]
 8008eba:	ec49 8b16 	vmov	d6, r8, r9
 8008ebe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ec2:	ec59 8b17 	vmov	r8, r9, d7
 8008ec6:	e63e      	b.n	8008b46 <_strtod_l+0x76>
 8008ec8:	9806      	ldr	r0, [sp, #24]
 8008eca:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008ece:	4281      	cmp	r1, r0
 8008ed0:	db1f      	blt.n	8008f12 <_strtod_l+0x442>
 8008ed2:	4a5e      	ldr	r2, [pc, #376]	; (800904c <_strtod_l+0x57c>)
 8008ed4:	f1c3 030f 	rsb	r3, r3, #15
 8008ed8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008edc:	ed91 7b00 	vldr	d7, [r1]
 8008ee0:	ec49 8b16 	vmov	d6, r8, r9
 8008ee4:	1ac3      	subs	r3, r0, r3
 8008ee6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008eea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008eee:	ed92 6b00 	vldr	d6, [r2]
 8008ef2:	e7e4      	b.n	8008ebe <_strtod_l+0x3ee>
 8008ef4:	9906      	ldr	r1, [sp, #24]
 8008ef6:	3116      	adds	r1, #22
 8008ef8:	db0b      	blt.n	8008f12 <_strtod_l+0x442>
 8008efa:	4b54      	ldr	r3, [pc, #336]	; (800904c <_strtod_l+0x57c>)
 8008efc:	ebab 0505 	sub.w	r5, fp, r5
 8008f00:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008f04:	ed95 7b00 	vldr	d7, [r5]
 8008f08:	ec49 8b16 	vmov	d6, r8, r9
 8008f0c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008f10:	e7d7      	b.n	8008ec2 <_strtod_l+0x3f2>
 8008f12:	9906      	ldr	r1, [sp, #24]
 8008f14:	1a9a      	subs	r2, r3, r2
 8008f16:	440a      	add	r2, r1
 8008f18:	2a00      	cmp	r2, #0
 8008f1a:	dd6e      	ble.n	8008ffa <_strtod_l+0x52a>
 8008f1c:	f012 000f 	ands.w	r0, r2, #15
 8008f20:	d00a      	beq.n	8008f38 <_strtod_l+0x468>
 8008f22:	494a      	ldr	r1, [pc, #296]	; (800904c <_strtod_l+0x57c>)
 8008f24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008f28:	ed91 7b00 	vldr	d7, [r1]
 8008f2c:	ec49 8b16 	vmov	d6, r8, r9
 8008f30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f34:	ec59 8b17 	vmov	r8, r9, d7
 8008f38:	f032 020f 	bics.w	r2, r2, #15
 8008f3c:	d04e      	beq.n	8008fdc <_strtod_l+0x50c>
 8008f3e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008f42:	dd22      	ble.n	8008f8a <_strtod_l+0x4ba>
 8008f44:	2500      	movs	r5, #0
 8008f46:	462e      	mov	r6, r5
 8008f48:	9507      	str	r5, [sp, #28]
 8008f4a:	462f      	mov	r7, r5
 8008f4c:	2322      	movs	r3, #34	; 0x22
 8008f4e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009058 <_strtod_l+0x588>
 8008f52:	6023      	str	r3, [r4, #0]
 8008f54:	f04f 0800 	mov.w	r8, #0
 8008f58:	9b07      	ldr	r3, [sp, #28]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f43f adf3 	beq.w	8008b46 <_strtod_l+0x76>
 8008f60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008f62:	4620      	mov	r0, r4
 8008f64:	f7ff f930 	bl	80081c8 <_Bfree>
 8008f68:	4639      	mov	r1, r7
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f7ff f92c 	bl	80081c8 <_Bfree>
 8008f70:	4631      	mov	r1, r6
 8008f72:	4620      	mov	r0, r4
 8008f74:	f7ff f928 	bl	80081c8 <_Bfree>
 8008f78:	9907      	ldr	r1, [sp, #28]
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f7ff f924 	bl	80081c8 <_Bfree>
 8008f80:	4629      	mov	r1, r5
 8008f82:	4620      	mov	r0, r4
 8008f84:	f7ff f920 	bl	80081c8 <_Bfree>
 8008f88:	e5dd      	b.n	8008b46 <_strtod_l+0x76>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	ec49 8b17 	vmov	d7, r8, r9
 8008f90:	4f2f      	ldr	r7, [pc, #188]	; (8009050 <_strtod_l+0x580>)
 8008f92:	1112      	asrs	r2, r2, #4
 8008f94:	4601      	mov	r1, r0
 8008f96:	2a01      	cmp	r2, #1
 8008f98:	dc23      	bgt.n	8008fe2 <_strtod_l+0x512>
 8008f9a:	b108      	cbz	r0, 8008fa0 <_strtod_l+0x4d0>
 8008f9c:	ec59 8b17 	vmov	r8, r9, d7
 8008fa0:	4a2b      	ldr	r2, [pc, #172]	; (8009050 <_strtod_l+0x580>)
 8008fa2:	482c      	ldr	r0, [pc, #176]	; (8009054 <_strtod_l+0x584>)
 8008fa4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008fa8:	ed92 7b00 	vldr	d7, [r2]
 8008fac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008fb0:	ec49 8b16 	vmov	d6, r8, r9
 8008fb4:	4a28      	ldr	r2, [pc, #160]	; (8009058 <_strtod_l+0x588>)
 8008fb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fba:	ee17 1a90 	vmov	r1, s15
 8008fbe:	400a      	ands	r2, r1
 8008fc0:	4282      	cmp	r2, r0
 8008fc2:	ec59 8b17 	vmov	r8, r9, d7
 8008fc6:	d8bd      	bhi.n	8008f44 <_strtod_l+0x474>
 8008fc8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008fcc:	4282      	cmp	r2, r0
 8008fce:	bf86      	itte	hi
 8008fd0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800905c <_strtod_l+0x58c>
 8008fd4:	f04f 38ff 	movhi.w	r8, #4294967295
 8008fd8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008fdc:	2200      	movs	r2, #0
 8008fde:	9205      	str	r2, [sp, #20]
 8008fe0:	e076      	b.n	80090d0 <_strtod_l+0x600>
 8008fe2:	f012 0f01 	tst.w	r2, #1
 8008fe6:	d004      	beq.n	8008ff2 <_strtod_l+0x522>
 8008fe8:	ed97 6b00 	vldr	d6, [r7]
 8008fec:	2001      	movs	r0, #1
 8008fee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ff2:	3101      	adds	r1, #1
 8008ff4:	1052      	asrs	r2, r2, #1
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	e7cd      	b.n	8008f96 <_strtod_l+0x4c6>
 8008ffa:	d0ef      	beq.n	8008fdc <_strtod_l+0x50c>
 8008ffc:	4252      	negs	r2, r2
 8008ffe:	f012 000f 	ands.w	r0, r2, #15
 8009002:	d00a      	beq.n	800901a <_strtod_l+0x54a>
 8009004:	4911      	ldr	r1, [pc, #68]	; (800904c <_strtod_l+0x57c>)
 8009006:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800900a:	ed91 7b00 	vldr	d7, [r1]
 800900e:	ec49 8b16 	vmov	d6, r8, r9
 8009012:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009016:	ec59 8b17 	vmov	r8, r9, d7
 800901a:	1112      	asrs	r2, r2, #4
 800901c:	d0de      	beq.n	8008fdc <_strtod_l+0x50c>
 800901e:	2a1f      	cmp	r2, #31
 8009020:	dd1e      	ble.n	8009060 <_strtod_l+0x590>
 8009022:	2500      	movs	r5, #0
 8009024:	462e      	mov	r6, r5
 8009026:	9507      	str	r5, [sp, #28]
 8009028:	462f      	mov	r7, r5
 800902a:	2322      	movs	r3, #34	; 0x22
 800902c:	f04f 0800 	mov.w	r8, #0
 8009030:	f04f 0900 	mov.w	r9, #0
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	e78f      	b.n	8008f58 <_strtod_l+0x488>
 8009038:	0800a8ca 	.word	0x0800a8ca
 800903c:	0800aaf4 	.word	0x0800aaf4
 8009040:	0800a8c2 	.word	0x0800a8c2
 8009044:	0800a8f9 	.word	0x0800a8f9
 8009048:	0800ab84 	.word	0x0800ab84
 800904c:	0800aa08 	.word	0x0800aa08
 8009050:	0800a9e0 	.word	0x0800a9e0
 8009054:	7ca00000 	.word	0x7ca00000
 8009058:	7ff00000 	.word	0x7ff00000
 800905c:	7fefffff 	.word	0x7fefffff
 8009060:	f012 0110 	ands.w	r1, r2, #16
 8009064:	bf18      	it	ne
 8009066:	216a      	movne	r1, #106	; 0x6a
 8009068:	9105      	str	r1, [sp, #20]
 800906a:	ec49 8b17 	vmov	d7, r8, r9
 800906e:	49be      	ldr	r1, [pc, #760]	; (8009368 <_strtod_l+0x898>)
 8009070:	2000      	movs	r0, #0
 8009072:	07d7      	lsls	r7, r2, #31
 8009074:	d504      	bpl.n	8009080 <_strtod_l+0x5b0>
 8009076:	ed91 6b00 	vldr	d6, [r1]
 800907a:	2001      	movs	r0, #1
 800907c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009080:	1052      	asrs	r2, r2, #1
 8009082:	f101 0108 	add.w	r1, r1, #8
 8009086:	d1f4      	bne.n	8009072 <_strtod_l+0x5a2>
 8009088:	b108      	cbz	r0, 800908e <_strtod_l+0x5be>
 800908a:	ec59 8b17 	vmov	r8, r9, d7
 800908e:	9a05      	ldr	r2, [sp, #20]
 8009090:	b1ba      	cbz	r2, 80090c2 <_strtod_l+0x5f2>
 8009092:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8009096:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800909a:	2a00      	cmp	r2, #0
 800909c:	4648      	mov	r0, r9
 800909e:	dd10      	ble.n	80090c2 <_strtod_l+0x5f2>
 80090a0:	2a1f      	cmp	r2, #31
 80090a2:	f340 812c 	ble.w	80092fe <_strtod_l+0x82e>
 80090a6:	2a34      	cmp	r2, #52	; 0x34
 80090a8:	bfde      	ittt	le
 80090aa:	f04f 32ff 	movle.w	r2, #4294967295
 80090ae:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80090b2:	408a      	lslle	r2, r1
 80090b4:	f04f 0800 	mov.w	r8, #0
 80090b8:	bfcc      	ite	gt
 80090ba:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80090be:	ea02 0900 	andle.w	r9, r2, r0
 80090c2:	ec49 8b17 	vmov	d7, r8, r9
 80090c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80090ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ce:	d0a8      	beq.n	8009022 <_strtod_l+0x552>
 80090d0:	9a07      	ldr	r2, [sp, #28]
 80090d2:	9200      	str	r2, [sp, #0]
 80090d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090d6:	4632      	mov	r2, r6
 80090d8:	4620      	mov	r0, r4
 80090da:	f7ff f8dd 	bl	8008298 <__s2b>
 80090de:	9007      	str	r0, [sp, #28]
 80090e0:	2800      	cmp	r0, #0
 80090e2:	f43f af2f 	beq.w	8008f44 <_strtod_l+0x474>
 80090e6:	9a06      	ldr	r2, [sp, #24]
 80090e8:	2a00      	cmp	r2, #0
 80090ea:	ebab 0305 	sub.w	r3, fp, r5
 80090ee:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8009348 <_strtod_l+0x878>
 80090f2:	bfa8      	it	ge
 80090f4:	2300      	movge	r3, #0
 80090f6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8009350 <_strtod_l+0x880>
 80090fa:	ed9f bb97 	vldr	d11, [pc, #604]	; 8009358 <_strtod_l+0x888>
 80090fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009100:	2500      	movs	r5, #0
 8009102:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009106:	930c      	str	r3, [sp, #48]	; 0x30
 8009108:	462e      	mov	r6, r5
 800910a:	9b07      	ldr	r3, [sp, #28]
 800910c:	4620      	mov	r0, r4
 800910e:	6859      	ldr	r1, [r3, #4]
 8009110:	f7ff f81a 	bl	8008148 <_Balloc>
 8009114:	4607      	mov	r7, r0
 8009116:	2800      	cmp	r0, #0
 8009118:	f43f af18 	beq.w	8008f4c <_strtod_l+0x47c>
 800911c:	9b07      	ldr	r3, [sp, #28]
 800911e:	691a      	ldr	r2, [r3, #16]
 8009120:	3202      	adds	r2, #2
 8009122:	f103 010c 	add.w	r1, r3, #12
 8009126:	0092      	lsls	r2, r2, #2
 8009128:	300c      	adds	r0, #12
 800912a:	f7fe f9b8 	bl	800749e <memcpy>
 800912e:	ec49 8b10 	vmov	d0, r8, r9
 8009132:	aa14      	add	r2, sp, #80	; 0x50
 8009134:	a913      	add	r1, sp, #76	; 0x4c
 8009136:	4620      	mov	r0, r4
 8009138:	f7ff fbe2 	bl	8008900 <__d2b>
 800913c:	ec49 8b18 	vmov	d8, r8, r9
 8009140:	9012      	str	r0, [sp, #72]	; 0x48
 8009142:	2800      	cmp	r0, #0
 8009144:	f43f af02 	beq.w	8008f4c <_strtod_l+0x47c>
 8009148:	2101      	movs	r1, #1
 800914a:	4620      	mov	r0, r4
 800914c:	f7ff f93c 	bl	80083c8 <__i2b>
 8009150:	4606      	mov	r6, r0
 8009152:	2800      	cmp	r0, #0
 8009154:	f43f aefa 	beq.w	8008f4c <_strtod_l+0x47c>
 8009158:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800915a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800915c:	2b00      	cmp	r3, #0
 800915e:	bfab      	itete	ge
 8009160:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8009162:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009164:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8009168:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800916c:	bfac      	ite	ge
 800916e:	eb03 0b02 	addge.w	fp, r3, r2
 8009172:	eba2 0a03 	sublt.w	sl, r2, r3
 8009176:	9a05      	ldr	r2, [sp, #20]
 8009178:	1a9b      	subs	r3, r3, r2
 800917a:	440b      	add	r3, r1
 800917c:	4a7b      	ldr	r2, [pc, #492]	; (800936c <_strtod_l+0x89c>)
 800917e:	3b01      	subs	r3, #1
 8009180:	4293      	cmp	r3, r2
 8009182:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009186:	f280 80cd 	bge.w	8009324 <_strtod_l+0x854>
 800918a:	1ad2      	subs	r2, r2, r3
 800918c:	2a1f      	cmp	r2, #31
 800918e:	eba1 0102 	sub.w	r1, r1, r2
 8009192:	f04f 0001 	mov.w	r0, #1
 8009196:	f300 80b9 	bgt.w	800930c <_strtod_l+0x83c>
 800919a:	fa00 f302 	lsl.w	r3, r0, r2
 800919e:	930b      	str	r3, [sp, #44]	; 0x2c
 80091a0:	2300      	movs	r3, #0
 80091a2:	930a      	str	r3, [sp, #40]	; 0x28
 80091a4:	eb0b 0301 	add.w	r3, fp, r1
 80091a8:	9a05      	ldr	r2, [sp, #20]
 80091aa:	459b      	cmp	fp, r3
 80091ac:	448a      	add	sl, r1
 80091ae:	4492      	add	sl, r2
 80091b0:	465a      	mov	r2, fp
 80091b2:	bfa8      	it	ge
 80091b4:	461a      	movge	r2, r3
 80091b6:	4552      	cmp	r2, sl
 80091b8:	bfa8      	it	ge
 80091ba:	4652      	movge	r2, sl
 80091bc:	2a00      	cmp	r2, #0
 80091be:	bfc2      	ittt	gt
 80091c0:	1a9b      	subgt	r3, r3, r2
 80091c2:	ebaa 0a02 	subgt.w	sl, sl, r2
 80091c6:	ebab 0b02 	subgt.w	fp, fp, r2
 80091ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	dd18      	ble.n	8009202 <_strtod_l+0x732>
 80091d0:	4631      	mov	r1, r6
 80091d2:	4620      	mov	r0, r4
 80091d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80091d6:	f7ff f9b7 	bl	8008548 <__pow5mult>
 80091da:	4606      	mov	r6, r0
 80091dc:	2800      	cmp	r0, #0
 80091de:	f43f aeb5 	beq.w	8008f4c <_strtod_l+0x47c>
 80091e2:	4601      	mov	r1, r0
 80091e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091e6:	4620      	mov	r0, r4
 80091e8:	f7ff f904 	bl	80083f4 <__multiply>
 80091ec:	900e      	str	r0, [sp, #56]	; 0x38
 80091ee:	2800      	cmp	r0, #0
 80091f0:	f43f aeac 	beq.w	8008f4c <_strtod_l+0x47c>
 80091f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80091f6:	4620      	mov	r0, r4
 80091f8:	f7fe ffe6 	bl	80081c8 <_Bfree>
 80091fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009200:	9212      	str	r2, [sp, #72]	; 0x48
 8009202:	2b00      	cmp	r3, #0
 8009204:	f300 8093 	bgt.w	800932e <_strtod_l+0x85e>
 8009208:	9b06      	ldr	r3, [sp, #24]
 800920a:	2b00      	cmp	r3, #0
 800920c:	dd08      	ble.n	8009220 <_strtod_l+0x750>
 800920e:	4639      	mov	r1, r7
 8009210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009212:	4620      	mov	r0, r4
 8009214:	f7ff f998 	bl	8008548 <__pow5mult>
 8009218:	4607      	mov	r7, r0
 800921a:	2800      	cmp	r0, #0
 800921c:	f43f ae96 	beq.w	8008f4c <_strtod_l+0x47c>
 8009220:	f1ba 0f00 	cmp.w	sl, #0
 8009224:	dd08      	ble.n	8009238 <_strtod_l+0x768>
 8009226:	4639      	mov	r1, r7
 8009228:	4652      	mov	r2, sl
 800922a:	4620      	mov	r0, r4
 800922c:	f7ff f9e6 	bl	80085fc <__lshift>
 8009230:	4607      	mov	r7, r0
 8009232:	2800      	cmp	r0, #0
 8009234:	f43f ae8a 	beq.w	8008f4c <_strtod_l+0x47c>
 8009238:	f1bb 0f00 	cmp.w	fp, #0
 800923c:	dd08      	ble.n	8009250 <_strtod_l+0x780>
 800923e:	4631      	mov	r1, r6
 8009240:	465a      	mov	r2, fp
 8009242:	4620      	mov	r0, r4
 8009244:	f7ff f9da 	bl	80085fc <__lshift>
 8009248:	4606      	mov	r6, r0
 800924a:	2800      	cmp	r0, #0
 800924c:	f43f ae7e 	beq.w	8008f4c <_strtod_l+0x47c>
 8009250:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009252:	463a      	mov	r2, r7
 8009254:	4620      	mov	r0, r4
 8009256:	f7ff fa59 	bl	800870c <__mdiff>
 800925a:	4605      	mov	r5, r0
 800925c:	2800      	cmp	r0, #0
 800925e:	f43f ae75 	beq.w	8008f4c <_strtod_l+0x47c>
 8009262:	2300      	movs	r3, #0
 8009264:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009268:	60c3      	str	r3, [r0, #12]
 800926a:	4631      	mov	r1, r6
 800926c:	f7ff fa32 	bl	80086d4 <__mcmp>
 8009270:	2800      	cmp	r0, #0
 8009272:	da7f      	bge.n	8009374 <_strtod_l+0x8a4>
 8009274:	ea5a 0a08 	orrs.w	sl, sl, r8
 8009278:	f040 80a5 	bne.w	80093c6 <_strtod_l+0x8f6>
 800927c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009280:	2b00      	cmp	r3, #0
 8009282:	f040 80a0 	bne.w	80093c6 <_strtod_l+0x8f6>
 8009286:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800928a:	0d1b      	lsrs	r3, r3, #20
 800928c:	051b      	lsls	r3, r3, #20
 800928e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009292:	f240 8098 	bls.w	80093c6 <_strtod_l+0x8f6>
 8009296:	696b      	ldr	r3, [r5, #20]
 8009298:	b91b      	cbnz	r3, 80092a2 <_strtod_l+0x7d2>
 800929a:	692b      	ldr	r3, [r5, #16]
 800929c:	2b01      	cmp	r3, #1
 800929e:	f340 8092 	ble.w	80093c6 <_strtod_l+0x8f6>
 80092a2:	4629      	mov	r1, r5
 80092a4:	2201      	movs	r2, #1
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7ff f9a8 	bl	80085fc <__lshift>
 80092ac:	4631      	mov	r1, r6
 80092ae:	4605      	mov	r5, r0
 80092b0:	f7ff fa10 	bl	80086d4 <__mcmp>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f340 8086 	ble.w	80093c6 <_strtod_l+0x8f6>
 80092ba:	9905      	ldr	r1, [sp, #20]
 80092bc:	4a2c      	ldr	r2, [pc, #176]	; (8009370 <_strtod_l+0x8a0>)
 80092be:	464b      	mov	r3, r9
 80092c0:	2900      	cmp	r1, #0
 80092c2:	f000 809f 	beq.w	8009404 <_strtod_l+0x934>
 80092c6:	ea02 0109 	and.w	r1, r2, r9
 80092ca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80092ce:	f300 8099 	bgt.w	8009404 <_strtod_l+0x934>
 80092d2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80092d6:	f77f aea8 	ble.w	800902a <_strtod_l+0x55a>
 80092da:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009360 <_strtod_l+0x890>
 80092de:	ec49 8b16 	vmov	d6, r8, r9
 80092e2:	4b23      	ldr	r3, [pc, #140]	; (8009370 <_strtod_l+0x8a0>)
 80092e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80092e8:	ee17 2a90 	vmov	r2, s15
 80092ec:	4013      	ands	r3, r2
 80092ee:	ec59 8b17 	vmov	r8, r9, d7
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f47f ae34 	bne.w	8008f60 <_strtod_l+0x490>
 80092f8:	2322      	movs	r3, #34	; 0x22
 80092fa:	6023      	str	r3, [r4, #0]
 80092fc:	e630      	b.n	8008f60 <_strtod_l+0x490>
 80092fe:	f04f 31ff 	mov.w	r1, #4294967295
 8009302:	fa01 f202 	lsl.w	r2, r1, r2
 8009306:	ea02 0808 	and.w	r8, r2, r8
 800930a:	e6da      	b.n	80090c2 <_strtod_l+0x5f2>
 800930c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009310:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009314:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009318:	33e2      	adds	r3, #226	; 0xe2
 800931a:	fa00 f303 	lsl.w	r3, r0, r3
 800931e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8009322:	e73f      	b.n	80091a4 <_strtod_l+0x6d4>
 8009324:	2200      	movs	r2, #0
 8009326:	2301      	movs	r3, #1
 8009328:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800932c:	e73a      	b.n	80091a4 <_strtod_l+0x6d4>
 800932e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009330:	461a      	mov	r2, r3
 8009332:	4620      	mov	r0, r4
 8009334:	f7ff f962 	bl	80085fc <__lshift>
 8009338:	9012      	str	r0, [sp, #72]	; 0x48
 800933a:	2800      	cmp	r0, #0
 800933c:	f47f af64 	bne.w	8009208 <_strtod_l+0x738>
 8009340:	e604      	b.n	8008f4c <_strtod_l+0x47c>
 8009342:	bf00      	nop
 8009344:	f3af 8000 	nop.w
 8009348:	94a03595 	.word	0x94a03595
 800934c:	3fcfffff 	.word	0x3fcfffff
 8009350:	94a03595 	.word	0x94a03595
 8009354:	3fdfffff 	.word	0x3fdfffff
 8009358:	35afe535 	.word	0x35afe535
 800935c:	3fe00000 	.word	0x3fe00000
 8009360:	00000000 	.word	0x00000000
 8009364:	39500000 	.word	0x39500000
 8009368:	0800ab08 	.word	0x0800ab08
 800936c:	fffffc02 	.word	0xfffffc02
 8009370:	7ff00000 	.word	0x7ff00000
 8009374:	46cb      	mov	fp, r9
 8009376:	d15f      	bne.n	8009438 <_strtod_l+0x968>
 8009378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800937c:	f1ba 0f00 	cmp.w	sl, #0
 8009380:	d02a      	beq.n	80093d8 <_strtod_l+0x908>
 8009382:	4aa7      	ldr	r2, [pc, #668]	; (8009620 <_strtod_l+0xb50>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d12b      	bne.n	80093e0 <_strtod_l+0x910>
 8009388:	9b05      	ldr	r3, [sp, #20]
 800938a:	4642      	mov	r2, r8
 800938c:	b1fb      	cbz	r3, 80093ce <_strtod_l+0x8fe>
 800938e:	4ba5      	ldr	r3, [pc, #660]	; (8009624 <_strtod_l+0xb54>)
 8009390:	ea09 0303 	and.w	r3, r9, r3
 8009394:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009398:	f04f 31ff 	mov.w	r1, #4294967295
 800939c:	d81a      	bhi.n	80093d4 <_strtod_l+0x904>
 800939e:	0d1b      	lsrs	r3, r3, #20
 80093a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093a4:	fa01 f303 	lsl.w	r3, r1, r3
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d119      	bne.n	80093e0 <_strtod_l+0x910>
 80093ac:	4b9e      	ldr	r3, [pc, #632]	; (8009628 <_strtod_l+0xb58>)
 80093ae:	459b      	cmp	fp, r3
 80093b0:	d102      	bne.n	80093b8 <_strtod_l+0x8e8>
 80093b2:	3201      	adds	r2, #1
 80093b4:	f43f adca 	beq.w	8008f4c <_strtod_l+0x47c>
 80093b8:	4b9a      	ldr	r3, [pc, #616]	; (8009624 <_strtod_l+0xb54>)
 80093ba:	ea0b 0303 	and.w	r3, fp, r3
 80093be:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80093c2:	f04f 0800 	mov.w	r8, #0
 80093c6:	9b05      	ldr	r3, [sp, #20]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d186      	bne.n	80092da <_strtod_l+0x80a>
 80093cc:	e5c8      	b.n	8008f60 <_strtod_l+0x490>
 80093ce:	f04f 33ff 	mov.w	r3, #4294967295
 80093d2:	e7e9      	b.n	80093a8 <_strtod_l+0x8d8>
 80093d4:	460b      	mov	r3, r1
 80093d6:	e7e7      	b.n	80093a8 <_strtod_l+0x8d8>
 80093d8:	ea53 0308 	orrs.w	r3, r3, r8
 80093dc:	f43f af6d 	beq.w	80092ba <_strtod_l+0x7ea>
 80093e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e2:	b1cb      	cbz	r3, 8009418 <_strtod_l+0x948>
 80093e4:	ea13 0f0b 	tst.w	r3, fp
 80093e8:	d0ed      	beq.n	80093c6 <_strtod_l+0x8f6>
 80093ea:	9a05      	ldr	r2, [sp, #20]
 80093ec:	4640      	mov	r0, r8
 80093ee:	4649      	mov	r1, r9
 80093f0:	f1ba 0f00 	cmp.w	sl, #0
 80093f4:	d014      	beq.n	8009420 <_strtod_l+0x950>
 80093f6:	f7ff fb51 	bl	8008a9c <sulp>
 80093fa:	ee38 7b00 	vadd.f64	d7, d8, d0
 80093fe:	ec59 8b17 	vmov	r8, r9, d7
 8009402:	e7e0      	b.n	80093c6 <_strtod_l+0x8f6>
 8009404:	4013      	ands	r3, r2
 8009406:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800940a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800940e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009412:	f04f 38ff 	mov.w	r8, #4294967295
 8009416:	e7d6      	b.n	80093c6 <_strtod_l+0x8f6>
 8009418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800941a:	ea13 0f08 	tst.w	r3, r8
 800941e:	e7e3      	b.n	80093e8 <_strtod_l+0x918>
 8009420:	f7ff fb3c 	bl	8008a9c <sulp>
 8009424:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009428:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800942c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009430:	ec59 8b10 	vmov	r8, r9, d0
 8009434:	d1c7      	bne.n	80093c6 <_strtod_l+0x8f6>
 8009436:	e5f8      	b.n	800902a <_strtod_l+0x55a>
 8009438:	4631      	mov	r1, r6
 800943a:	4628      	mov	r0, r5
 800943c:	f7ff faba 	bl	80089b4 <__ratio>
 8009440:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009444:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944c:	d85f      	bhi.n	800950e <_strtod_l+0xa3e>
 800944e:	f1ba 0f00 	cmp.w	sl, #0
 8009452:	d166      	bne.n	8009522 <_strtod_l+0xa52>
 8009454:	f1b8 0f00 	cmp.w	r8, #0
 8009458:	d14d      	bne.n	80094f6 <_strtod_l+0xa26>
 800945a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800945e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d162      	bne.n	800952c <_strtod_l+0xa5c>
 8009466:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800946a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800946e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009472:	d401      	bmi.n	8009478 <_strtod_l+0x9a8>
 8009474:	ee20 db0d 	vmul.f64	d13, d0, d13
 8009478:	eeb1 cb4d 	vneg.f64	d12, d13
 800947c:	4869      	ldr	r0, [pc, #420]	; (8009624 <_strtod_l+0xb54>)
 800947e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8009630 <_strtod_l+0xb60>
 8009482:	ea0b 0100 	and.w	r1, fp, r0
 8009486:	4561      	cmp	r1, ip
 8009488:	ec53 2b1c 	vmov	r2, r3, d12
 800948c:	d17a      	bne.n	8009584 <_strtod_l+0xab4>
 800948e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009492:	ec49 8b10 	vmov	d0, r8, r9
 8009496:	910a      	str	r1, [sp, #40]	; 0x28
 8009498:	f7ff f9c2 	bl	8008820 <__ulp>
 800949c:	ec49 8b1e 	vmov	d14, r8, r9
 80094a0:	4860      	ldr	r0, [pc, #384]	; (8009624 <_strtod_l+0xb54>)
 80094a2:	eea0 eb0c 	vfma.f64	d14, d0, d12
 80094a6:	ee1e 3a90 	vmov	r3, s29
 80094aa:	4a60      	ldr	r2, [pc, #384]	; (800962c <_strtod_l+0xb5c>)
 80094ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094ae:	4018      	ands	r0, r3
 80094b0:	4290      	cmp	r0, r2
 80094b2:	ec59 8b1e 	vmov	r8, r9, d14
 80094b6:	d93c      	bls.n	8009532 <_strtod_l+0xa62>
 80094b8:	ee18 2a90 	vmov	r2, s17
 80094bc:	4b5a      	ldr	r3, [pc, #360]	; (8009628 <_strtod_l+0xb58>)
 80094be:	429a      	cmp	r2, r3
 80094c0:	d104      	bne.n	80094cc <_strtod_l+0x9fc>
 80094c2:	ee18 3a10 	vmov	r3, s16
 80094c6:	3301      	adds	r3, #1
 80094c8:	f43f ad40 	beq.w	8008f4c <_strtod_l+0x47c>
 80094cc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8009628 <_strtod_l+0xb58>
 80094d0:	f04f 38ff 	mov.w	r8, #4294967295
 80094d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80094d6:	4620      	mov	r0, r4
 80094d8:	f7fe fe76 	bl	80081c8 <_Bfree>
 80094dc:	4639      	mov	r1, r7
 80094de:	4620      	mov	r0, r4
 80094e0:	f7fe fe72 	bl	80081c8 <_Bfree>
 80094e4:	4631      	mov	r1, r6
 80094e6:	4620      	mov	r0, r4
 80094e8:	f7fe fe6e 	bl	80081c8 <_Bfree>
 80094ec:	4629      	mov	r1, r5
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7fe fe6a 	bl	80081c8 <_Bfree>
 80094f4:	e609      	b.n	800910a <_strtod_l+0x63a>
 80094f6:	f1b8 0f01 	cmp.w	r8, #1
 80094fa:	d103      	bne.n	8009504 <_strtod_l+0xa34>
 80094fc:	f1b9 0f00 	cmp.w	r9, #0
 8009500:	f43f ad93 	beq.w	800902a <_strtod_l+0x55a>
 8009504:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8009508:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800950c:	e7b6      	b.n	800947c <_strtod_l+0x9ac>
 800950e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009512:	ee20 db0d 	vmul.f64	d13, d0, d13
 8009516:	f1ba 0f00 	cmp.w	sl, #0
 800951a:	d0ad      	beq.n	8009478 <_strtod_l+0x9a8>
 800951c:	eeb0 cb4d 	vmov.f64	d12, d13
 8009520:	e7ac      	b.n	800947c <_strtod_l+0x9ac>
 8009522:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8009526:	eeb0 db4c 	vmov.f64	d13, d12
 800952a:	e7a7      	b.n	800947c <_strtod_l+0x9ac>
 800952c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8009530:	e7a4      	b.n	800947c <_strtod_l+0x9ac>
 8009532:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009536:	9b05      	ldr	r3, [sp, #20]
 8009538:	46cb      	mov	fp, r9
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1ca      	bne.n	80094d4 <_strtod_l+0xa04>
 800953e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009542:	0d1b      	lsrs	r3, r3, #20
 8009544:	051b      	lsls	r3, r3, #20
 8009546:	4299      	cmp	r1, r3
 8009548:	d1c4      	bne.n	80094d4 <_strtod_l+0xa04>
 800954a:	ec51 0b1d 	vmov	r0, r1, d13
 800954e:	f7f7 f8a3 	bl	8000698 <__aeabi_d2lz>
 8009552:	f7f7 f85b 	bl	800060c <__aeabi_l2d>
 8009556:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800955a:	ec41 0b17 	vmov	d7, r0, r1
 800955e:	ea4b 0b08 	orr.w	fp, fp, r8
 8009562:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8009566:	ee3d db47 	vsub.f64	d13, d13, d7
 800956a:	d03c      	beq.n	80095e6 <_strtod_l+0xb16>
 800956c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8009570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009574:	f53f acf4 	bmi.w	8008f60 <_strtod_l+0x490>
 8009578:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800957c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009580:	dda8      	ble.n	80094d4 <_strtod_l+0xa04>
 8009582:	e4ed      	b.n	8008f60 <_strtod_l+0x490>
 8009584:	9805      	ldr	r0, [sp, #20]
 8009586:	b1f0      	cbz	r0, 80095c6 <_strtod_l+0xaf6>
 8009588:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800958c:	d81b      	bhi.n	80095c6 <_strtod_l+0xaf6>
 800958e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8009618 <_strtod_l+0xb48>
 8009592:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8009596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959a:	d811      	bhi.n	80095c0 <_strtod_l+0xaf0>
 800959c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80095a0:	ee1d 3a10 	vmov	r3, s26
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	bf38      	it	cc
 80095a8:	2301      	movcc	r3, #1
 80095aa:	ee0d 3a10 	vmov	s26, r3
 80095ae:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80095b2:	f1ba 0f00 	cmp.w	sl, #0
 80095b6:	d113      	bne.n	80095e0 <_strtod_l+0xb10>
 80095b8:	eeb1 7b4d 	vneg.f64	d7, d13
 80095bc:	ec53 2b17 	vmov	r2, r3, d7
 80095c0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80095c4:	1a43      	subs	r3, r0, r1
 80095c6:	eeb0 0b48 	vmov.f64	d0, d8
 80095ca:	ec43 2b1c 	vmov	d12, r2, r3
 80095ce:	910a      	str	r1, [sp, #40]	; 0x28
 80095d0:	f7ff f926 	bl	8008820 <__ulp>
 80095d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095d6:	eeac 8b00 	vfma.f64	d8, d12, d0
 80095da:	ec59 8b18 	vmov	r8, r9, d8
 80095de:	e7aa      	b.n	8009536 <_strtod_l+0xa66>
 80095e0:	eeb0 7b4d 	vmov.f64	d7, d13
 80095e4:	e7ea      	b.n	80095bc <_strtod_l+0xaec>
 80095e6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80095ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ee:	f57f af71 	bpl.w	80094d4 <_strtod_l+0xa04>
 80095f2:	e4b5      	b.n	8008f60 <_strtod_l+0x490>
 80095f4:	2300      	movs	r3, #0
 80095f6:	9308      	str	r3, [sp, #32]
 80095f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	f7ff baa6 	b.w	8008b4e <_strtod_l+0x7e>
 8009602:	2a65      	cmp	r2, #101	; 0x65
 8009604:	f43f aba2 	beq.w	8008d4c <_strtod_l+0x27c>
 8009608:	2a45      	cmp	r2, #69	; 0x45
 800960a:	f43f ab9f 	beq.w	8008d4c <_strtod_l+0x27c>
 800960e:	2101      	movs	r1, #1
 8009610:	f7ff bbd8 	b.w	8008dc4 <_strtod_l+0x2f4>
 8009614:	f3af 8000 	nop.w
 8009618:	ffc00000 	.word	0xffc00000
 800961c:	41dfffff 	.word	0x41dfffff
 8009620:	000fffff 	.word	0x000fffff
 8009624:	7ff00000 	.word	0x7ff00000
 8009628:	7fefffff 	.word	0x7fefffff
 800962c:	7c9fffff 	.word	0x7c9fffff
 8009630:	7fe00000 	.word	0x7fe00000

08009634 <_strtod_r>:
 8009634:	4b01      	ldr	r3, [pc, #4]	; (800963c <_strtod_r+0x8>)
 8009636:	f7ff ba4b 	b.w	8008ad0 <_strtod_l>
 800963a:	bf00      	nop
 800963c:	20000068 	.word	0x20000068

08009640 <__ssputs_r>:
 8009640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009644:	688e      	ldr	r6, [r1, #8]
 8009646:	461f      	mov	r7, r3
 8009648:	42be      	cmp	r6, r7
 800964a:	680b      	ldr	r3, [r1, #0]
 800964c:	4682      	mov	sl, r0
 800964e:	460c      	mov	r4, r1
 8009650:	4690      	mov	r8, r2
 8009652:	d82c      	bhi.n	80096ae <__ssputs_r+0x6e>
 8009654:	898a      	ldrh	r2, [r1, #12]
 8009656:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800965a:	d026      	beq.n	80096aa <__ssputs_r+0x6a>
 800965c:	6965      	ldr	r5, [r4, #20]
 800965e:	6909      	ldr	r1, [r1, #16]
 8009660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009664:	eba3 0901 	sub.w	r9, r3, r1
 8009668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800966c:	1c7b      	adds	r3, r7, #1
 800966e:	444b      	add	r3, r9
 8009670:	106d      	asrs	r5, r5, #1
 8009672:	429d      	cmp	r5, r3
 8009674:	bf38      	it	cc
 8009676:	461d      	movcc	r5, r3
 8009678:	0553      	lsls	r3, r2, #21
 800967a:	d527      	bpl.n	80096cc <__ssputs_r+0x8c>
 800967c:	4629      	mov	r1, r5
 800967e:	f7fc fc59 	bl	8005f34 <_malloc_r>
 8009682:	4606      	mov	r6, r0
 8009684:	b360      	cbz	r0, 80096e0 <__ssputs_r+0xa0>
 8009686:	6921      	ldr	r1, [r4, #16]
 8009688:	464a      	mov	r2, r9
 800968a:	f7fd ff08 	bl	800749e <memcpy>
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	6126      	str	r6, [r4, #16]
 800969c:	6165      	str	r5, [r4, #20]
 800969e:	444e      	add	r6, r9
 80096a0:	eba5 0509 	sub.w	r5, r5, r9
 80096a4:	6026      	str	r6, [r4, #0]
 80096a6:	60a5      	str	r5, [r4, #8]
 80096a8:	463e      	mov	r6, r7
 80096aa:	42be      	cmp	r6, r7
 80096ac:	d900      	bls.n	80096b0 <__ssputs_r+0x70>
 80096ae:	463e      	mov	r6, r7
 80096b0:	6820      	ldr	r0, [r4, #0]
 80096b2:	4632      	mov	r2, r6
 80096b4:	4641      	mov	r1, r8
 80096b6:	f000 fb6f 	bl	8009d98 <memmove>
 80096ba:	68a3      	ldr	r3, [r4, #8]
 80096bc:	1b9b      	subs	r3, r3, r6
 80096be:	60a3      	str	r3, [r4, #8]
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	4433      	add	r3, r6
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	2000      	movs	r0, #0
 80096c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096cc:	462a      	mov	r2, r5
 80096ce:	f000 ff42 	bl	800a556 <_realloc_r>
 80096d2:	4606      	mov	r6, r0
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d1e0      	bne.n	800969a <__ssputs_r+0x5a>
 80096d8:	6921      	ldr	r1, [r4, #16]
 80096da:	4650      	mov	r0, sl
 80096dc:	f7fe fce8 	bl	80080b0 <_free_r>
 80096e0:	230c      	movs	r3, #12
 80096e2:	f8ca 3000 	str.w	r3, [sl]
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096ec:	81a3      	strh	r3, [r4, #12]
 80096ee:	f04f 30ff 	mov.w	r0, #4294967295
 80096f2:	e7e9      	b.n	80096c8 <__ssputs_r+0x88>

080096f4 <_svfiprintf_r>:
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	4698      	mov	r8, r3
 80096fa:	898b      	ldrh	r3, [r1, #12]
 80096fc:	061b      	lsls	r3, r3, #24
 80096fe:	b09d      	sub	sp, #116	; 0x74
 8009700:	4607      	mov	r7, r0
 8009702:	460d      	mov	r5, r1
 8009704:	4614      	mov	r4, r2
 8009706:	d50e      	bpl.n	8009726 <_svfiprintf_r+0x32>
 8009708:	690b      	ldr	r3, [r1, #16]
 800970a:	b963      	cbnz	r3, 8009726 <_svfiprintf_r+0x32>
 800970c:	2140      	movs	r1, #64	; 0x40
 800970e:	f7fc fc11 	bl	8005f34 <_malloc_r>
 8009712:	6028      	str	r0, [r5, #0]
 8009714:	6128      	str	r0, [r5, #16]
 8009716:	b920      	cbnz	r0, 8009722 <_svfiprintf_r+0x2e>
 8009718:	230c      	movs	r3, #12
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	e0d0      	b.n	80098c4 <_svfiprintf_r+0x1d0>
 8009722:	2340      	movs	r3, #64	; 0x40
 8009724:	616b      	str	r3, [r5, #20]
 8009726:	2300      	movs	r3, #0
 8009728:	9309      	str	r3, [sp, #36]	; 0x24
 800972a:	2320      	movs	r3, #32
 800972c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009730:	f8cd 800c 	str.w	r8, [sp, #12]
 8009734:	2330      	movs	r3, #48	; 0x30
 8009736:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80098dc <_svfiprintf_r+0x1e8>
 800973a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800973e:	f04f 0901 	mov.w	r9, #1
 8009742:	4623      	mov	r3, r4
 8009744:	469a      	mov	sl, r3
 8009746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974a:	b10a      	cbz	r2, 8009750 <_svfiprintf_r+0x5c>
 800974c:	2a25      	cmp	r2, #37	; 0x25
 800974e:	d1f9      	bne.n	8009744 <_svfiprintf_r+0x50>
 8009750:	ebba 0b04 	subs.w	fp, sl, r4
 8009754:	d00b      	beq.n	800976e <_svfiprintf_r+0x7a>
 8009756:	465b      	mov	r3, fp
 8009758:	4622      	mov	r2, r4
 800975a:	4629      	mov	r1, r5
 800975c:	4638      	mov	r0, r7
 800975e:	f7ff ff6f 	bl	8009640 <__ssputs_r>
 8009762:	3001      	adds	r0, #1
 8009764:	f000 80a9 	beq.w	80098ba <_svfiprintf_r+0x1c6>
 8009768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800976a:	445a      	add	r2, fp
 800976c:	9209      	str	r2, [sp, #36]	; 0x24
 800976e:	f89a 3000 	ldrb.w	r3, [sl]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 80a1 	beq.w	80098ba <_svfiprintf_r+0x1c6>
 8009778:	2300      	movs	r3, #0
 800977a:	f04f 32ff 	mov.w	r2, #4294967295
 800977e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009782:	f10a 0a01 	add.w	sl, sl, #1
 8009786:	9304      	str	r3, [sp, #16]
 8009788:	9307      	str	r3, [sp, #28]
 800978a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800978e:	931a      	str	r3, [sp, #104]	; 0x68
 8009790:	4654      	mov	r4, sl
 8009792:	2205      	movs	r2, #5
 8009794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009798:	4850      	ldr	r0, [pc, #320]	; (80098dc <_svfiprintf_r+0x1e8>)
 800979a:	f7f6 fd51 	bl	8000240 <memchr>
 800979e:	9a04      	ldr	r2, [sp, #16]
 80097a0:	b9d8      	cbnz	r0, 80097da <_svfiprintf_r+0xe6>
 80097a2:	06d0      	lsls	r0, r2, #27
 80097a4:	bf44      	itt	mi
 80097a6:	2320      	movmi	r3, #32
 80097a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ac:	0711      	lsls	r1, r2, #28
 80097ae:	bf44      	itt	mi
 80097b0:	232b      	movmi	r3, #43	; 0x2b
 80097b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b6:	f89a 3000 	ldrb.w	r3, [sl]
 80097ba:	2b2a      	cmp	r3, #42	; 0x2a
 80097bc:	d015      	beq.n	80097ea <_svfiprintf_r+0xf6>
 80097be:	9a07      	ldr	r2, [sp, #28]
 80097c0:	4654      	mov	r4, sl
 80097c2:	2000      	movs	r0, #0
 80097c4:	f04f 0c0a 	mov.w	ip, #10
 80097c8:	4621      	mov	r1, r4
 80097ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ce:	3b30      	subs	r3, #48	; 0x30
 80097d0:	2b09      	cmp	r3, #9
 80097d2:	d94d      	bls.n	8009870 <_svfiprintf_r+0x17c>
 80097d4:	b1b0      	cbz	r0, 8009804 <_svfiprintf_r+0x110>
 80097d6:	9207      	str	r2, [sp, #28]
 80097d8:	e014      	b.n	8009804 <_svfiprintf_r+0x110>
 80097da:	eba0 0308 	sub.w	r3, r0, r8
 80097de:	fa09 f303 	lsl.w	r3, r9, r3
 80097e2:	4313      	orrs	r3, r2
 80097e4:	9304      	str	r3, [sp, #16]
 80097e6:	46a2      	mov	sl, r4
 80097e8:	e7d2      	b.n	8009790 <_svfiprintf_r+0x9c>
 80097ea:	9b03      	ldr	r3, [sp, #12]
 80097ec:	1d19      	adds	r1, r3, #4
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	9103      	str	r1, [sp, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bfbb      	ittet	lt
 80097f6:	425b      	neglt	r3, r3
 80097f8:	f042 0202 	orrlt.w	r2, r2, #2
 80097fc:	9307      	strge	r3, [sp, #28]
 80097fe:	9307      	strlt	r3, [sp, #28]
 8009800:	bfb8      	it	lt
 8009802:	9204      	strlt	r2, [sp, #16]
 8009804:	7823      	ldrb	r3, [r4, #0]
 8009806:	2b2e      	cmp	r3, #46	; 0x2e
 8009808:	d10c      	bne.n	8009824 <_svfiprintf_r+0x130>
 800980a:	7863      	ldrb	r3, [r4, #1]
 800980c:	2b2a      	cmp	r3, #42	; 0x2a
 800980e:	d134      	bne.n	800987a <_svfiprintf_r+0x186>
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	1d1a      	adds	r2, r3, #4
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	9203      	str	r2, [sp, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	bfb8      	it	lt
 800981c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009820:	3402      	adds	r4, #2
 8009822:	9305      	str	r3, [sp, #20]
 8009824:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80098ec <_svfiprintf_r+0x1f8>
 8009828:	7821      	ldrb	r1, [r4, #0]
 800982a:	2203      	movs	r2, #3
 800982c:	4650      	mov	r0, sl
 800982e:	f7f6 fd07 	bl	8000240 <memchr>
 8009832:	b138      	cbz	r0, 8009844 <_svfiprintf_r+0x150>
 8009834:	9b04      	ldr	r3, [sp, #16]
 8009836:	eba0 000a 	sub.w	r0, r0, sl
 800983a:	2240      	movs	r2, #64	; 0x40
 800983c:	4082      	lsls	r2, r0
 800983e:	4313      	orrs	r3, r2
 8009840:	3401      	adds	r4, #1
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009848:	4825      	ldr	r0, [pc, #148]	; (80098e0 <_svfiprintf_r+0x1ec>)
 800984a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800984e:	2206      	movs	r2, #6
 8009850:	f7f6 fcf6 	bl	8000240 <memchr>
 8009854:	2800      	cmp	r0, #0
 8009856:	d038      	beq.n	80098ca <_svfiprintf_r+0x1d6>
 8009858:	4b22      	ldr	r3, [pc, #136]	; (80098e4 <_svfiprintf_r+0x1f0>)
 800985a:	bb1b      	cbnz	r3, 80098a4 <_svfiprintf_r+0x1b0>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	3307      	adds	r3, #7
 8009860:	f023 0307 	bic.w	r3, r3, #7
 8009864:	3308      	adds	r3, #8
 8009866:	9303      	str	r3, [sp, #12]
 8009868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986a:	4433      	add	r3, r6
 800986c:	9309      	str	r3, [sp, #36]	; 0x24
 800986e:	e768      	b.n	8009742 <_svfiprintf_r+0x4e>
 8009870:	fb0c 3202 	mla	r2, ip, r2, r3
 8009874:	460c      	mov	r4, r1
 8009876:	2001      	movs	r0, #1
 8009878:	e7a6      	b.n	80097c8 <_svfiprintf_r+0xd4>
 800987a:	2300      	movs	r3, #0
 800987c:	3401      	adds	r4, #1
 800987e:	9305      	str	r3, [sp, #20]
 8009880:	4619      	mov	r1, r3
 8009882:	f04f 0c0a 	mov.w	ip, #10
 8009886:	4620      	mov	r0, r4
 8009888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800988c:	3a30      	subs	r2, #48	; 0x30
 800988e:	2a09      	cmp	r2, #9
 8009890:	d903      	bls.n	800989a <_svfiprintf_r+0x1a6>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0c6      	beq.n	8009824 <_svfiprintf_r+0x130>
 8009896:	9105      	str	r1, [sp, #20]
 8009898:	e7c4      	b.n	8009824 <_svfiprintf_r+0x130>
 800989a:	fb0c 2101 	mla	r1, ip, r1, r2
 800989e:	4604      	mov	r4, r0
 80098a0:	2301      	movs	r3, #1
 80098a2:	e7f0      	b.n	8009886 <_svfiprintf_r+0x192>
 80098a4:	ab03      	add	r3, sp, #12
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	462a      	mov	r2, r5
 80098aa:	4b0f      	ldr	r3, [pc, #60]	; (80098e8 <_svfiprintf_r+0x1f4>)
 80098ac:	a904      	add	r1, sp, #16
 80098ae:	4638      	mov	r0, r7
 80098b0:	f7fc fce2 	bl	8006278 <_printf_float>
 80098b4:	1c42      	adds	r2, r0, #1
 80098b6:	4606      	mov	r6, r0
 80098b8:	d1d6      	bne.n	8009868 <_svfiprintf_r+0x174>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	065b      	lsls	r3, r3, #25
 80098be:	f53f af2d 	bmi.w	800971c <_svfiprintf_r+0x28>
 80098c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098c4:	b01d      	add	sp, #116	; 0x74
 80098c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ca:	ab03      	add	r3, sp, #12
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	462a      	mov	r2, r5
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <_svfiprintf_r+0x1f4>)
 80098d2:	a904      	add	r1, sp, #16
 80098d4:	4638      	mov	r0, r7
 80098d6:	f7fc ff57 	bl	8006788 <_printf_i>
 80098da:	e7eb      	b.n	80098b4 <_svfiprintf_r+0x1c0>
 80098dc:	0800ab30 	.word	0x0800ab30
 80098e0:	0800ab3a 	.word	0x0800ab3a
 80098e4:	08006279 	.word	0x08006279
 80098e8:	08009641 	.word	0x08009641
 80098ec:	0800ab36 	.word	0x0800ab36

080098f0 <__sfputc_r>:
 80098f0:	6893      	ldr	r3, [r2, #8]
 80098f2:	3b01      	subs	r3, #1
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	b410      	push	{r4}
 80098f8:	6093      	str	r3, [r2, #8]
 80098fa:	da08      	bge.n	800990e <__sfputc_r+0x1e>
 80098fc:	6994      	ldr	r4, [r2, #24]
 80098fe:	42a3      	cmp	r3, r4
 8009900:	db01      	blt.n	8009906 <__sfputc_r+0x16>
 8009902:	290a      	cmp	r1, #10
 8009904:	d103      	bne.n	800990e <__sfputc_r+0x1e>
 8009906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800990a:	f7fd bca4 	b.w	8007256 <__swbuf_r>
 800990e:	6813      	ldr	r3, [r2, #0]
 8009910:	1c58      	adds	r0, r3, #1
 8009912:	6010      	str	r0, [r2, #0]
 8009914:	7019      	strb	r1, [r3, #0]
 8009916:	4608      	mov	r0, r1
 8009918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800991c:	4770      	bx	lr

0800991e <__sfputs_r>:
 800991e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009920:	4606      	mov	r6, r0
 8009922:	460f      	mov	r7, r1
 8009924:	4614      	mov	r4, r2
 8009926:	18d5      	adds	r5, r2, r3
 8009928:	42ac      	cmp	r4, r5
 800992a:	d101      	bne.n	8009930 <__sfputs_r+0x12>
 800992c:	2000      	movs	r0, #0
 800992e:	e007      	b.n	8009940 <__sfputs_r+0x22>
 8009930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009934:	463a      	mov	r2, r7
 8009936:	4630      	mov	r0, r6
 8009938:	f7ff ffda 	bl	80098f0 <__sfputc_r>
 800993c:	1c43      	adds	r3, r0, #1
 800993e:	d1f3      	bne.n	8009928 <__sfputs_r+0xa>
 8009940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009944 <_vfiprintf_r>:
 8009944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	460d      	mov	r5, r1
 800994a:	b09d      	sub	sp, #116	; 0x74
 800994c:	4614      	mov	r4, r2
 800994e:	4698      	mov	r8, r3
 8009950:	4606      	mov	r6, r0
 8009952:	b118      	cbz	r0, 800995c <_vfiprintf_r+0x18>
 8009954:	6a03      	ldr	r3, [r0, #32]
 8009956:	b90b      	cbnz	r3, 800995c <_vfiprintf_r+0x18>
 8009958:	f7fd fac8 	bl	8006eec <__sinit>
 800995c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800995e:	07d9      	lsls	r1, r3, #31
 8009960:	d405      	bmi.n	800996e <_vfiprintf_r+0x2a>
 8009962:	89ab      	ldrh	r3, [r5, #12]
 8009964:	059a      	lsls	r2, r3, #22
 8009966:	d402      	bmi.n	800996e <_vfiprintf_r+0x2a>
 8009968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800996a:	f7fd fd96 	bl	800749a <__retarget_lock_acquire_recursive>
 800996e:	89ab      	ldrh	r3, [r5, #12]
 8009970:	071b      	lsls	r3, r3, #28
 8009972:	d501      	bpl.n	8009978 <_vfiprintf_r+0x34>
 8009974:	692b      	ldr	r3, [r5, #16]
 8009976:	b99b      	cbnz	r3, 80099a0 <_vfiprintf_r+0x5c>
 8009978:	4629      	mov	r1, r5
 800997a:	4630      	mov	r0, r6
 800997c:	f7fd fca8 	bl	80072d0 <__swsetup_r>
 8009980:	b170      	cbz	r0, 80099a0 <_vfiprintf_r+0x5c>
 8009982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009984:	07dc      	lsls	r4, r3, #31
 8009986:	d504      	bpl.n	8009992 <_vfiprintf_r+0x4e>
 8009988:	f04f 30ff 	mov.w	r0, #4294967295
 800998c:	b01d      	add	sp, #116	; 0x74
 800998e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009992:	89ab      	ldrh	r3, [r5, #12]
 8009994:	0598      	lsls	r0, r3, #22
 8009996:	d4f7      	bmi.n	8009988 <_vfiprintf_r+0x44>
 8009998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800999a:	f7fd fd7f 	bl	800749c <__retarget_lock_release_recursive>
 800999e:	e7f3      	b.n	8009988 <_vfiprintf_r+0x44>
 80099a0:	2300      	movs	r3, #0
 80099a2:	9309      	str	r3, [sp, #36]	; 0x24
 80099a4:	2320      	movs	r3, #32
 80099a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80099ae:	2330      	movs	r3, #48	; 0x30
 80099b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009b64 <_vfiprintf_r+0x220>
 80099b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099b8:	f04f 0901 	mov.w	r9, #1
 80099bc:	4623      	mov	r3, r4
 80099be:	469a      	mov	sl, r3
 80099c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c4:	b10a      	cbz	r2, 80099ca <_vfiprintf_r+0x86>
 80099c6:	2a25      	cmp	r2, #37	; 0x25
 80099c8:	d1f9      	bne.n	80099be <_vfiprintf_r+0x7a>
 80099ca:	ebba 0b04 	subs.w	fp, sl, r4
 80099ce:	d00b      	beq.n	80099e8 <_vfiprintf_r+0xa4>
 80099d0:	465b      	mov	r3, fp
 80099d2:	4622      	mov	r2, r4
 80099d4:	4629      	mov	r1, r5
 80099d6:	4630      	mov	r0, r6
 80099d8:	f7ff ffa1 	bl	800991e <__sfputs_r>
 80099dc:	3001      	adds	r0, #1
 80099de:	f000 80a9 	beq.w	8009b34 <_vfiprintf_r+0x1f0>
 80099e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099e4:	445a      	add	r2, fp
 80099e6:	9209      	str	r2, [sp, #36]	; 0x24
 80099e8:	f89a 3000 	ldrb.w	r3, [sl]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f000 80a1 	beq.w	8009b34 <_vfiprintf_r+0x1f0>
 80099f2:	2300      	movs	r3, #0
 80099f4:	f04f 32ff 	mov.w	r2, #4294967295
 80099f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099fc:	f10a 0a01 	add.w	sl, sl, #1
 8009a00:	9304      	str	r3, [sp, #16]
 8009a02:	9307      	str	r3, [sp, #28]
 8009a04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a08:	931a      	str	r3, [sp, #104]	; 0x68
 8009a0a:	4654      	mov	r4, sl
 8009a0c:	2205      	movs	r2, #5
 8009a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a12:	4854      	ldr	r0, [pc, #336]	; (8009b64 <_vfiprintf_r+0x220>)
 8009a14:	f7f6 fc14 	bl	8000240 <memchr>
 8009a18:	9a04      	ldr	r2, [sp, #16]
 8009a1a:	b9d8      	cbnz	r0, 8009a54 <_vfiprintf_r+0x110>
 8009a1c:	06d1      	lsls	r1, r2, #27
 8009a1e:	bf44      	itt	mi
 8009a20:	2320      	movmi	r3, #32
 8009a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a26:	0713      	lsls	r3, r2, #28
 8009a28:	bf44      	itt	mi
 8009a2a:	232b      	movmi	r3, #43	; 0x2b
 8009a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a30:	f89a 3000 	ldrb.w	r3, [sl]
 8009a34:	2b2a      	cmp	r3, #42	; 0x2a
 8009a36:	d015      	beq.n	8009a64 <_vfiprintf_r+0x120>
 8009a38:	9a07      	ldr	r2, [sp, #28]
 8009a3a:	4654      	mov	r4, sl
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	f04f 0c0a 	mov.w	ip, #10
 8009a42:	4621      	mov	r1, r4
 8009a44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a48:	3b30      	subs	r3, #48	; 0x30
 8009a4a:	2b09      	cmp	r3, #9
 8009a4c:	d94d      	bls.n	8009aea <_vfiprintf_r+0x1a6>
 8009a4e:	b1b0      	cbz	r0, 8009a7e <_vfiprintf_r+0x13a>
 8009a50:	9207      	str	r2, [sp, #28]
 8009a52:	e014      	b.n	8009a7e <_vfiprintf_r+0x13a>
 8009a54:	eba0 0308 	sub.w	r3, r0, r8
 8009a58:	fa09 f303 	lsl.w	r3, r9, r3
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	9304      	str	r3, [sp, #16]
 8009a60:	46a2      	mov	sl, r4
 8009a62:	e7d2      	b.n	8009a0a <_vfiprintf_r+0xc6>
 8009a64:	9b03      	ldr	r3, [sp, #12]
 8009a66:	1d19      	adds	r1, r3, #4
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	9103      	str	r1, [sp, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	bfbb      	ittet	lt
 8009a70:	425b      	neglt	r3, r3
 8009a72:	f042 0202 	orrlt.w	r2, r2, #2
 8009a76:	9307      	strge	r3, [sp, #28]
 8009a78:	9307      	strlt	r3, [sp, #28]
 8009a7a:	bfb8      	it	lt
 8009a7c:	9204      	strlt	r2, [sp, #16]
 8009a7e:	7823      	ldrb	r3, [r4, #0]
 8009a80:	2b2e      	cmp	r3, #46	; 0x2e
 8009a82:	d10c      	bne.n	8009a9e <_vfiprintf_r+0x15a>
 8009a84:	7863      	ldrb	r3, [r4, #1]
 8009a86:	2b2a      	cmp	r3, #42	; 0x2a
 8009a88:	d134      	bne.n	8009af4 <_vfiprintf_r+0x1b0>
 8009a8a:	9b03      	ldr	r3, [sp, #12]
 8009a8c:	1d1a      	adds	r2, r3, #4
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	9203      	str	r2, [sp, #12]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	bfb8      	it	lt
 8009a96:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a9a:	3402      	adds	r4, #2
 8009a9c:	9305      	str	r3, [sp, #20]
 8009a9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009b74 <_vfiprintf_r+0x230>
 8009aa2:	7821      	ldrb	r1, [r4, #0]
 8009aa4:	2203      	movs	r2, #3
 8009aa6:	4650      	mov	r0, sl
 8009aa8:	f7f6 fbca 	bl	8000240 <memchr>
 8009aac:	b138      	cbz	r0, 8009abe <_vfiprintf_r+0x17a>
 8009aae:	9b04      	ldr	r3, [sp, #16]
 8009ab0:	eba0 000a 	sub.w	r0, r0, sl
 8009ab4:	2240      	movs	r2, #64	; 0x40
 8009ab6:	4082      	lsls	r2, r0
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	3401      	adds	r4, #1
 8009abc:	9304      	str	r3, [sp, #16]
 8009abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac2:	4829      	ldr	r0, [pc, #164]	; (8009b68 <_vfiprintf_r+0x224>)
 8009ac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ac8:	2206      	movs	r2, #6
 8009aca:	f7f6 fbb9 	bl	8000240 <memchr>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d03f      	beq.n	8009b52 <_vfiprintf_r+0x20e>
 8009ad2:	4b26      	ldr	r3, [pc, #152]	; (8009b6c <_vfiprintf_r+0x228>)
 8009ad4:	bb1b      	cbnz	r3, 8009b1e <_vfiprintf_r+0x1da>
 8009ad6:	9b03      	ldr	r3, [sp, #12]
 8009ad8:	3307      	adds	r3, #7
 8009ada:	f023 0307 	bic.w	r3, r3, #7
 8009ade:	3308      	adds	r3, #8
 8009ae0:	9303      	str	r3, [sp, #12]
 8009ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae4:	443b      	add	r3, r7
 8009ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae8:	e768      	b.n	80099bc <_vfiprintf_r+0x78>
 8009aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aee:	460c      	mov	r4, r1
 8009af0:	2001      	movs	r0, #1
 8009af2:	e7a6      	b.n	8009a42 <_vfiprintf_r+0xfe>
 8009af4:	2300      	movs	r3, #0
 8009af6:	3401      	adds	r4, #1
 8009af8:	9305      	str	r3, [sp, #20]
 8009afa:	4619      	mov	r1, r3
 8009afc:	f04f 0c0a 	mov.w	ip, #10
 8009b00:	4620      	mov	r0, r4
 8009b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b06:	3a30      	subs	r2, #48	; 0x30
 8009b08:	2a09      	cmp	r2, #9
 8009b0a:	d903      	bls.n	8009b14 <_vfiprintf_r+0x1d0>
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0c6      	beq.n	8009a9e <_vfiprintf_r+0x15a>
 8009b10:	9105      	str	r1, [sp, #20]
 8009b12:	e7c4      	b.n	8009a9e <_vfiprintf_r+0x15a>
 8009b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b18:	4604      	mov	r4, r0
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e7f0      	b.n	8009b00 <_vfiprintf_r+0x1bc>
 8009b1e:	ab03      	add	r3, sp, #12
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	462a      	mov	r2, r5
 8009b24:	4b12      	ldr	r3, [pc, #72]	; (8009b70 <_vfiprintf_r+0x22c>)
 8009b26:	a904      	add	r1, sp, #16
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f7fc fba5 	bl	8006278 <_printf_float>
 8009b2e:	4607      	mov	r7, r0
 8009b30:	1c78      	adds	r0, r7, #1
 8009b32:	d1d6      	bne.n	8009ae2 <_vfiprintf_r+0x19e>
 8009b34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b36:	07d9      	lsls	r1, r3, #31
 8009b38:	d405      	bmi.n	8009b46 <_vfiprintf_r+0x202>
 8009b3a:	89ab      	ldrh	r3, [r5, #12]
 8009b3c:	059a      	lsls	r2, r3, #22
 8009b3e:	d402      	bmi.n	8009b46 <_vfiprintf_r+0x202>
 8009b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b42:	f7fd fcab 	bl	800749c <__retarget_lock_release_recursive>
 8009b46:	89ab      	ldrh	r3, [r5, #12]
 8009b48:	065b      	lsls	r3, r3, #25
 8009b4a:	f53f af1d 	bmi.w	8009988 <_vfiprintf_r+0x44>
 8009b4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b50:	e71c      	b.n	800998c <_vfiprintf_r+0x48>
 8009b52:	ab03      	add	r3, sp, #12
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	462a      	mov	r2, r5
 8009b58:	4b05      	ldr	r3, [pc, #20]	; (8009b70 <_vfiprintf_r+0x22c>)
 8009b5a:	a904      	add	r1, sp, #16
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f7fc fe13 	bl	8006788 <_printf_i>
 8009b62:	e7e4      	b.n	8009b2e <_vfiprintf_r+0x1ea>
 8009b64:	0800ab30 	.word	0x0800ab30
 8009b68:	0800ab3a 	.word	0x0800ab3a
 8009b6c:	08006279 	.word	0x08006279
 8009b70:	0800991f 	.word	0x0800991f
 8009b74:	0800ab36 	.word	0x0800ab36

08009b78 <__sflush_r>:
 8009b78:	898a      	ldrh	r2, [r1, #12]
 8009b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7e:	4605      	mov	r5, r0
 8009b80:	0710      	lsls	r0, r2, #28
 8009b82:	460c      	mov	r4, r1
 8009b84:	d458      	bmi.n	8009c38 <__sflush_r+0xc0>
 8009b86:	684b      	ldr	r3, [r1, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	dc05      	bgt.n	8009b98 <__sflush_r+0x20>
 8009b8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	dc02      	bgt.n	8009b98 <__sflush_r+0x20>
 8009b92:	2000      	movs	r0, #0
 8009b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b9a:	2e00      	cmp	r6, #0
 8009b9c:	d0f9      	beq.n	8009b92 <__sflush_r+0x1a>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ba4:	682f      	ldr	r7, [r5, #0]
 8009ba6:	6a21      	ldr	r1, [r4, #32]
 8009ba8:	602b      	str	r3, [r5, #0]
 8009baa:	d032      	beq.n	8009c12 <__sflush_r+0x9a>
 8009bac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bae:	89a3      	ldrh	r3, [r4, #12]
 8009bb0:	075a      	lsls	r2, r3, #29
 8009bb2:	d505      	bpl.n	8009bc0 <__sflush_r+0x48>
 8009bb4:	6863      	ldr	r3, [r4, #4]
 8009bb6:	1ac0      	subs	r0, r0, r3
 8009bb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bba:	b10b      	cbz	r3, 8009bc0 <__sflush_r+0x48>
 8009bbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bbe:	1ac0      	subs	r0, r0, r3
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bc6:	6a21      	ldr	r1, [r4, #32]
 8009bc8:	4628      	mov	r0, r5
 8009bca:	47b0      	blx	r6
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	d106      	bne.n	8009be0 <__sflush_r+0x68>
 8009bd2:	6829      	ldr	r1, [r5, #0]
 8009bd4:	291d      	cmp	r1, #29
 8009bd6:	d82b      	bhi.n	8009c30 <__sflush_r+0xb8>
 8009bd8:	4a29      	ldr	r2, [pc, #164]	; (8009c80 <__sflush_r+0x108>)
 8009bda:	410a      	asrs	r2, r1
 8009bdc:	07d6      	lsls	r6, r2, #31
 8009bde:	d427      	bmi.n	8009c30 <__sflush_r+0xb8>
 8009be0:	2200      	movs	r2, #0
 8009be2:	6062      	str	r2, [r4, #4]
 8009be4:	04d9      	lsls	r1, r3, #19
 8009be6:	6922      	ldr	r2, [r4, #16]
 8009be8:	6022      	str	r2, [r4, #0]
 8009bea:	d504      	bpl.n	8009bf6 <__sflush_r+0x7e>
 8009bec:	1c42      	adds	r2, r0, #1
 8009bee:	d101      	bne.n	8009bf4 <__sflush_r+0x7c>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	b903      	cbnz	r3, 8009bf6 <__sflush_r+0x7e>
 8009bf4:	6560      	str	r0, [r4, #84]	; 0x54
 8009bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bf8:	602f      	str	r7, [r5, #0]
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	d0c9      	beq.n	8009b92 <__sflush_r+0x1a>
 8009bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c02:	4299      	cmp	r1, r3
 8009c04:	d002      	beq.n	8009c0c <__sflush_r+0x94>
 8009c06:	4628      	mov	r0, r5
 8009c08:	f7fe fa52 	bl	80080b0 <_free_r>
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	6360      	str	r0, [r4, #52]	; 0x34
 8009c10:	e7c0      	b.n	8009b94 <__sflush_r+0x1c>
 8009c12:	2301      	movs	r3, #1
 8009c14:	4628      	mov	r0, r5
 8009c16:	47b0      	blx	r6
 8009c18:	1c41      	adds	r1, r0, #1
 8009c1a:	d1c8      	bne.n	8009bae <__sflush_r+0x36>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d0c5      	beq.n	8009bae <__sflush_r+0x36>
 8009c22:	2b1d      	cmp	r3, #29
 8009c24:	d001      	beq.n	8009c2a <__sflush_r+0xb2>
 8009c26:	2b16      	cmp	r3, #22
 8009c28:	d101      	bne.n	8009c2e <__sflush_r+0xb6>
 8009c2a:	602f      	str	r7, [r5, #0]
 8009c2c:	e7b1      	b.n	8009b92 <__sflush_r+0x1a>
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c34:	81a3      	strh	r3, [r4, #12]
 8009c36:	e7ad      	b.n	8009b94 <__sflush_r+0x1c>
 8009c38:	690f      	ldr	r7, [r1, #16]
 8009c3a:	2f00      	cmp	r7, #0
 8009c3c:	d0a9      	beq.n	8009b92 <__sflush_r+0x1a>
 8009c3e:	0793      	lsls	r3, r2, #30
 8009c40:	680e      	ldr	r6, [r1, #0]
 8009c42:	bf08      	it	eq
 8009c44:	694b      	ldreq	r3, [r1, #20]
 8009c46:	600f      	str	r7, [r1, #0]
 8009c48:	bf18      	it	ne
 8009c4a:	2300      	movne	r3, #0
 8009c4c:	eba6 0807 	sub.w	r8, r6, r7
 8009c50:	608b      	str	r3, [r1, #8]
 8009c52:	f1b8 0f00 	cmp.w	r8, #0
 8009c56:	dd9c      	ble.n	8009b92 <__sflush_r+0x1a>
 8009c58:	6a21      	ldr	r1, [r4, #32]
 8009c5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c5c:	4643      	mov	r3, r8
 8009c5e:	463a      	mov	r2, r7
 8009c60:	4628      	mov	r0, r5
 8009c62:	47b0      	blx	r6
 8009c64:	2800      	cmp	r0, #0
 8009c66:	dc06      	bgt.n	8009c76 <__sflush_r+0xfe>
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c6e:	81a3      	strh	r3, [r4, #12]
 8009c70:	f04f 30ff 	mov.w	r0, #4294967295
 8009c74:	e78e      	b.n	8009b94 <__sflush_r+0x1c>
 8009c76:	4407      	add	r7, r0
 8009c78:	eba8 0800 	sub.w	r8, r8, r0
 8009c7c:	e7e9      	b.n	8009c52 <__sflush_r+0xda>
 8009c7e:	bf00      	nop
 8009c80:	dfbffffe 	.word	0xdfbffffe

08009c84 <_fflush_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	690b      	ldr	r3, [r1, #16]
 8009c88:	4605      	mov	r5, r0
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	b913      	cbnz	r3, 8009c94 <_fflush_r+0x10>
 8009c8e:	2500      	movs	r5, #0
 8009c90:	4628      	mov	r0, r5
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	b118      	cbz	r0, 8009c9e <_fflush_r+0x1a>
 8009c96:	6a03      	ldr	r3, [r0, #32]
 8009c98:	b90b      	cbnz	r3, 8009c9e <_fflush_r+0x1a>
 8009c9a:	f7fd f927 	bl	8006eec <__sinit>
 8009c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0f3      	beq.n	8009c8e <_fflush_r+0xa>
 8009ca6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ca8:	07d0      	lsls	r0, r2, #31
 8009caa:	d404      	bmi.n	8009cb6 <_fflush_r+0x32>
 8009cac:	0599      	lsls	r1, r3, #22
 8009cae:	d402      	bmi.n	8009cb6 <_fflush_r+0x32>
 8009cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cb2:	f7fd fbf2 	bl	800749a <__retarget_lock_acquire_recursive>
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	4621      	mov	r1, r4
 8009cba:	f7ff ff5d 	bl	8009b78 <__sflush_r>
 8009cbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cc0:	07da      	lsls	r2, r3, #31
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	d4e4      	bmi.n	8009c90 <_fflush_r+0xc>
 8009cc6:	89a3      	ldrh	r3, [r4, #12]
 8009cc8:	059b      	lsls	r3, r3, #22
 8009cca:	d4e1      	bmi.n	8009c90 <_fflush_r+0xc>
 8009ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cce:	f7fd fbe5 	bl	800749c <__retarget_lock_release_recursive>
 8009cd2:	e7dd      	b.n	8009c90 <_fflush_r+0xc>

08009cd4 <__swhatbuf_r>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cdc:	2900      	cmp	r1, #0
 8009cde:	b096      	sub	sp, #88	; 0x58
 8009ce0:	4615      	mov	r5, r2
 8009ce2:	461e      	mov	r6, r3
 8009ce4:	da0d      	bge.n	8009d02 <__swhatbuf_r+0x2e>
 8009ce6:	89a3      	ldrh	r3, [r4, #12]
 8009ce8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009cec:	f04f 0100 	mov.w	r1, #0
 8009cf0:	bf0c      	ite	eq
 8009cf2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009cf6:	2340      	movne	r3, #64	; 0x40
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	6031      	str	r1, [r6, #0]
 8009cfc:	602b      	str	r3, [r5, #0]
 8009cfe:	b016      	add	sp, #88	; 0x58
 8009d00:	bd70      	pop	{r4, r5, r6, pc}
 8009d02:	466a      	mov	r2, sp
 8009d04:	f000 f874 	bl	8009df0 <_fstat_r>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	dbec      	blt.n	8009ce6 <__swhatbuf_r+0x12>
 8009d0c:	9901      	ldr	r1, [sp, #4]
 8009d0e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009d12:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009d16:	4259      	negs	r1, r3
 8009d18:	4159      	adcs	r1, r3
 8009d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d1e:	e7eb      	b.n	8009cf8 <__swhatbuf_r+0x24>

08009d20 <__smakebuf_r>:
 8009d20:	898b      	ldrh	r3, [r1, #12]
 8009d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d24:	079d      	lsls	r5, r3, #30
 8009d26:	4606      	mov	r6, r0
 8009d28:	460c      	mov	r4, r1
 8009d2a:	d507      	bpl.n	8009d3c <__smakebuf_r+0x1c>
 8009d2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	6123      	str	r3, [r4, #16]
 8009d34:	2301      	movs	r3, #1
 8009d36:	6163      	str	r3, [r4, #20]
 8009d38:	b002      	add	sp, #8
 8009d3a:	bd70      	pop	{r4, r5, r6, pc}
 8009d3c:	ab01      	add	r3, sp, #4
 8009d3e:	466a      	mov	r2, sp
 8009d40:	f7ff ffc8 	bl	8009cd4 <__swhatbuf_r>
 8009d44:	9900      	ldr	r1, [sp, #0]
 8009d46:	4605      	mov	r5, r0
 8009d48:	4630      	mov	r0, r6
 8009d4a:	f7fc f8f3 	bl	8005f34 <_malloc_r>
 8009d4e:	b948      	cbnz	r0, 8009d64 <__smakebuf_r+0x44>
 8009d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d54:	059a      	lsls	r2, r3, #22
 8009d56:	d4ef      	bmi.n	8009d38 <__smakebuf_r+0x18>
 8009d58:	f023 0303 	bic.w	r3, r3, #3
 8009d5c:	f043 0302 	orr.w	r3, r3, #2
 8009d60:	81a3      	strh	r3, [r4, #12]
 8009d62:	e7e3      	b.n	8009d2c <__smakebuf_r+0xc>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	6020      	str	r0, [r4, #0]
 8009d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6c:	81a3      	strh	r3, [r4, #12]
 8009d6e:	9b00      	ldr	r3, [sp, #0]
 8009d70:	6163      	str	r3, [r4, #20]
 8009d72:	9b01      	ldr	r3, [sp, #4]
 8009d74:	6120      	str	r0, [r4, #16]
 8009d76:	b15b      	cbz	r3, 8009d90 <__smakebuf_r+0x70>
 8009d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	f000 f849 	bl	8009e14 <_isatty_r>
 8009d82:	b128      	cbz	r0, 8009d90 <__smakebuf_r+0x70>
 8009d84:	89a3      	ldrh	r3, [r4, #12]
 8009d86:	f023 0303 	bic.w	r3, r3, #3
 8009d8a:	f043 0301 	orr.w	r3, r3, #1
 8009d8e:	81a3      	strh	r3, [r4, #12]
 8009d90:	89a3      	ldrh	r3, [r4, #12]
 8009d92:	431d      	orrs	r5, r3
 8009d94:	81a5      	strh	r5, [r4, #12]
 8009d96:	e7cf      	b.n	8009d38 <__smakebuf_r+0x18>

08009d98 <memmove>:
 8009d98:	4288      	cmp	r0, r1
 8009d9a:	b510      	push	{r4, lr}
 8009d9c:	eb01 0402 	add.w	r4, r1, r2
 8009da0:	d902      	bls.n	8009da8 <memmove+0x10>
 8009da2:	4284      	cmp	r4, r0
 8009da4:	4623      	mov	r3, r4
 8009da6:	d807      	bhi.n	8009db8 <memmove+0x20>
 8009da8:	1e43      	subs	r3, r0, #1
 8009daa:	42a1      	cmp	r1, r4
 8009dac:	d008      	beq.n	8009dc0 <memmove+0x28>
 8009dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009db6:	e7f8      	b.n	8009daa <memmove+0x12>
 8009db8:	4402      	add	r2, r0
 8009dba:	4601      	mov	r1, r0
 8009dbc:	428a      	cmp	r2, r1
 8009dbe:	d100      	bne.n	8009dc2 <memmove+0x2a>
 8009dc0:	bd10      	pop	{r4, pc}
 8009dc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dca:	e7f7      	b.n	8009dbc <memmove+0x24>

08009dcc <strncmp>:
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	b16a      	cbz	r2, 8009dec <strncmp+0x20>
 8009dd0:	3901      	subs	r1, #1
 8009dd2:	1884      	adds	r4, r0, r2
 8009dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d103      	bne.n	8009de8 <strncmp+0x1c>
 8009de0:	42a0      	cmp	r0, r4
 8009de2:	d001      	beq.n	8009de8 <strncmp+0x1c>
 8009de4:	2a00      	cmp	r2, #0
 8009de6:	d1f5      	bne.n	8009dd4 <strncmp+0x8>
 8009de8:	1ad0      	subs	r0, r2, r3
 8009dea:	bd10      	pop	{r4, pc}
 8009dec:	4610      	mov	r0, r2
 8009dee:	e7fc      	b.n	8009dea <strncmp+0x1e>

08009df0 <_fstat_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4d07      	ldr	r5, [pc, #28]	; (8009e10 <_fstat_r+0x20>)
 8009df4:	2300      	movs	r3, #0
 8009df6:	4604      	mov	r4, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	602b      	str	r3, [r5, #0]
 8009dfe:	f7f7 fa1d 	bl	800123c <_fstat>
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	d102      	bne.n	8009e0c <_fstat_r+0x1c>
 8009e06:	682b      	ldr	r3, [r5, #0]
 8009e08:	b103      	cbz	r3, 8009e0c <_fstat_r+0x1c>
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	bd38      	pop	{r3, r4, r5, pc}
 8009e0e:	bf00      	nop
 8009e10:	200032c8 	.word	0x200032c8

08009e14 <_isatty_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d06      	ldr	r5, [pc, #24]	; (8009e30 <_isatty_r+0x1c>)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	602b      	str	r3, [r5, #0]
 8009e20:	f7f7 f97a 	bl	8001118 <_isatty>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_isatty_r+0x1a>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_isatty_r+0x1a>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	200032c8 	.word	0x200032c8
 8009e34:	00000000 	.word	0x00000000

08009e38 <nan>:
 8009e38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009e40 <nan+0x8>
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	00000000 	.word	0x00000000
 8009e44:	7ff80000 	.word	0x7ff80000

08009e48 <__assert_func>:
 8009e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e4a:	4614      	mov	r4, r2
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	4b09      	ldr	r3, [pc, #36]	; (8009e74 <__assert_func+0x2c>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4605      	mov	r5, r0
 8009e54:	68d8      	ldr	r0, [r3, #12]
 8009e56:	b14c      	cbz	r4, 8009e6c <__assert_func+0x24>
 8009e58:	4b07      	ldr	r3, [pc, #28]	; (8009e78 <__assert_func+0x30>)
 8009e5a:	9100      	str	r1, [sp, #0]
 8009e5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e60:	4906      	ldr	r1, [pc, #24]	; (8009e7c <__assert_func+0x34>)
 8009e62:	462b      	mov	r3, r5
 8009e64:	f000 fbb4 	bl	800a5d0 <fiprintf>
 8009e68:	f000 fbc4 	bl	800a5f4 <abort>
 8009e6c:	4b04      	ldr	r3, [pc, #16]	; (8009e80 <__assert_func+0x38>)
 8009e6e:	461c      	mov	r4, r3
 8009e70:	e7f3      	b.n	8009e5a <__assert_func+0x12>
 8009e72:	bf00      	nop
 8009e74:	20000064 	.word	0x20000064
 8009e78:	0800ab49 	.word	0x0800ab49
 8009e7c:	0800ab56 	.word	0x0800ab56
 8009e80:	0800ab84 	.word	0x0800ab84

08009e84 <rshift>:
 8009e84:	6903      	ldr	r3, [r0, #16]
 8009e86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e92:	f100 0414 	add.w	r4, r0, #20
 8009e96:	dd45      	ble.n	8009f24 <rshift+0xa0>
 8009e98:	f011 011f 	ands.w	r1, r1, #31
 8009e9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ea0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ea4:	d10c      	bne.n	8009ec0 <rshift+0x3c>
 8009ea6:	f100 0710 	add.w	r7, r0, #16
 8009eaa:	4629      	mov	r1, r5
 8009eac:	42b1      	cmp	r1, r6
 8009eae:	d334      	bcc.n	8009f1a <rshift+0x96>
 8009eb0:	1a9b      	subs	r3, r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	1eea      	subs	r2, r5, #3
 8009eb6:	4296      	cmp	r6, r2
 8009eb8:	bf38      	it	cc
 8009eba:	2300      	movcc	r3, #0
 8009ebc:	4423      	add	r3, r4
 8009ebe:	e015      	b.n	8009eec <rshift+0x68>
 8009ec0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ec4:	f1c1 0820 	rsb	r8, r1, #32
 8009ec8:	40cf      	lsrs	r7, r1
 8009eca:	f105 0e04 	add.w	lr, r5, #4
 8009ece:	46a1      	mov	r9, r4
 8009ed0:	4576      	cmp	r6, lr
 8009ed2:	46f4      	mov	ip, lr
 8009ed4:	d815      	bhi.n	8009f02 <rshift+0x7e>
 8009ed6:	1a9a      	subs	r2, r3, r2
 8009ed8:	0092      	lsls	r2, r2, #2
 8009eda:	3a04      	subs	r2, #4
 8009edc:	3501      	adds	r5, #1
 8009ede:	42ae      	cmp	r6, r5
 8009ee0:	bf38      	it	cc
 8009ee2:	2200      	movcc	r2, #0
 8009ee4:	18a3      	adds	r3, r4, r2
 8009ee6:	50a7      	str	r7, [r4, r2]
 8009ee8:	b107      	cbz	r7, 8009eec <rshift+0x68>
 8009eea:	3304      	adds	r3, #4
 8009eec:	1b1a      	subs	r2, r3, r4
 8009eee:	42a3      	cmp	r3, r4
 8009ef0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009ef4:	bf08      	it	eq
 8009ef6:	2300      	moveq	r3, #0
 8009ef8:	6102      	str	r2, [r0, #16]
 8009efa:	bf08      	it	eq
 8009efc:	6143      	streq	r3, [r0, #20]
 8009efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f02:	f8dc c000 	ldr.w	ip, [ip]
 8009f06:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f0a:	ea4c 0707 	orr.w	r7, ip, r7
 8009f0e:	f849 7b04 	str.w	r7, [r9], #4
 8009f12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f16:	40cf      	lsrs	r7, r1
 8009f18:	e7da      	b.n	8009ed0 <rshift+0x4c>
 8009f1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f22:	e7c3      	b.n	8009eac <rshift+0x28>
 8009f24:	4623      	mov	r3, r4
 8009f26:	e7e1      	b.n	8009eec <rshift+0x68>

08009f28 <__hexdig_fun>:
 8009f28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009f2c:	2b09      	cmp	r3, #9
 8009f2e:	d802      	bhi.n	8009f36 <__hexdig_fun+0xe>
 8009f30:	3820      	subs	r0, #32
 8009f32:	b2c0      	uxtb	r0, r0
 8009f34:	4770      	bx	lr
 8009f36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009f3a:	2b05      	cmp	r3, #5
 8009f3c:	d801      	bhi.n	8009f42 <__hexdig_fun+0x1a>
 8009f3e:	3847      	subs	r0, #71	; 0x47
 8009f40:	e7f7      	b.n	8009f32 <__hexdig_fun+0xa>
 8009f42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009f46:	2b05      	cmp	r3, #5
 8009f48:	d801      	bhi.n	8009f4e <__hexdig_fun+0x26>
 8009f4a:	3827      	subs	r0, #39	; 0x27
 8009f4c:	e7f1      	b.n	8009f32 <__hexdig_fun+0xa>
 8009f4e:	2000      	movs	r0, #0
 8009f50:	4770      	bx	lr
	...

08009f54 <__gethex>:
 8009f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f58:	4617      	mov	r7, r2
 8009f5a:	680a      	ldr	r2, [r1, #0]
 8009f5c:	b085      	sub	sp, #20
 8009f5e:	f102 0b02 	add.w	fp, r2, #2
 8009f62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009f66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009f6a:	4681      	mov	r9, r0
 8009f6c:	468a      	mov	sl, r1
 8009f6e:	9302      	str	r3, [sp, #8]
 8009f70:	32fe      	adds	r2, #254	; 0xfe
 8009f72:	eb02 030b 	add.w	r3, r2, fp
 8009f76:	46d8      	mov	r8, fp
 8009f78:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009f7c:	9301      	str	r3, [sp, #4]
 8009f7e:	2830      	cmp	r0, #48	; 0x30
 8009f80:	d0f7      	beq.n	8009f72 <__gethex+0x1e>
 8009f82:	f7ff ffd1 	bl	8009f28 <__hexdig_fun>
 8009f86:	4604      	mov	r4, r0
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d138      	bne.n	8009ffe <__gethex+0xaa>
 8009f8c:	49a7      	ldr	r1, [pc, #668]	; (800a22c <__gethex+0x2d8>)
 8009f8e:	2201      	movs	r2, #1
 8009f90:	4640      	mov	r0, r8
 8009f92:	f7ff ff1b 	bl	8009dcc <strncmp>
 8009f96:	4606      	mov	r6, r0
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d169      	bne.n	800a070 <__gethex+0x11c>
 8009f9c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009fa0:	465d      	mov	r5, fp
 8009fa2:	f7ff ffc1 	bl	8009f28 <__hexdig_fun>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d064      	beq.n	800a074 <__gethex+0x120>
 8009faa:	465a      	mov	r2, fp
 8009fac:	7810      	ldrb	r0, [r2, #0]
 8009fae:	2830      	cmp	r0, #48	; 0x30
 8009fb0:	4690      	mov	r8, r2
 8009fb2:	f102 0201 	add.w	r2, r2, #1
 8009fb6:	d0f9      	beq.n	8009fac <__gethex+0x58>
 8009fb8:	f7ff ffb6 	bl	8009f28 <__hexdig_fun>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	fab0 f480 	clz	r4, r0
 8009fc2:	0964      	lsrs	r4, r4, #5
 8009fc4:	465e      	mov	r6, fp
 8009fc6:	9301      	str	r3, [sp, #4]
 8009fc8:	4642      	mov	r2, r8
 8009fca:	4615      	mov	r5, r2
 8009fcc:	3201      	adds	r2, #1
 8009fce:	7828      	ldrb	r0, [r5, #0]
 8009fd0:	f7ff ffaa 	bl	8009f28 <__hexdig_fun>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d1f8      	bne.n	8009fca <__gethex+0x76>
 8009fd8:	4994      	ldr	r1, [pc, #592]	; (800a22c <__gethex+0x2d8>)
 8009fda:	2201      	movs	r2, #1
 8009fdc:	4628      	mov	r0, r5
 8009fde:	f7ff fef5 	bl	8009dcc <strncmp>
 8009fe2:	b978      	cbnz	r0, 800a004 <__gethex+0xb0>
 8009fe4:	b946      	cbnz	r6, 8009ff8 <__gethex+0xa4>
 8009fe6:	1c6e      	adds	r6, r5, #1
 8009fe8:	4632      	mov	r2, r6
 8009fea:	4615      	mov	r5, r2
 8009fec:	3201      	adds	r2, #1
 8009fee:	7828      	ldrb	r0, [r5, #0]
 8009ff0:	f7ff ff9a 	bl	8009f28 <__hexdig_fun>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d1f8      	bne.n	8009fea <__gethex+0x96>
 8009ff8:	1b73      	subs	r3, r6, r5
 8009ffa:	009e      	lsls	r6, r3, #2
 8009ffc:	e004      	b.n	800a008 <__gethex+0xb4>
 8009ffe:	2400      	movs	r4, #0
 800a000:	4626      	mov	r6, r4
 800a002:	e7e1      	b.n	8009fc8 <__gethex+0x74>
 800a004:	2e00      	cmp	r6, #0
 800a006:	d1f7      	bne.n	8009ff8 <__gethex+0xa4>
 800a008:	782b      	ldrb	r3, [r5, #0]
 800a00a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a00e:	2b50      	cmp	r3, #80	; 0x50
 800a010:	d13d      	bne.n	800a08e <__gethex+0x13a>
 800a012:	786b      	ldrb	r3, [r5, #1]
 800a014:	2b2b      	cmp	r3, #43	; 0x2b
 800a016:	d02f      	beq.n	800a078 <__gethex+0x124>
 800a018:	2b2d      	cmp	r3, #45	; 0x2d
 800a01a:	d031      	beq.n	800a080 <__gethex+0x12c>
 800a01c:	1c69      	adds	r1, r5, #1
 800a01e:	f04f 0b00 	mov.w	fp, #0
 800a022:	7808      	ldrb	r0, [r1, #0]
 800a024:	f7ff ff80 	bl	8009f28 <__hexdig_fun>
 800a028:	1e42      	subs	r2, r0, #1
 800a02a:	b2d2      	uxtb	r2, r2
 800a02c:	2a18      	cmp	r2, #24
 800a02e:	d82e      	bhi.n	800a08e <__gethex+0x13a>
 800a030:	f1a0 0210 	sub.w	r2, r0, #16
 800a034:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a038:	f7ff ff76 	bl	8009f28 <__hexdig_fun>
 800a03c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a040:	fa5f fc8c 	uxtb.w	ip, ip
 800a044:	f1bc 0f18 	cmp.w	ip, #24
 800a048:	d91d      	bls.n	800a086 <__gethex+0x132>
 800a04a:	f1bb 0f00 	cmp.w	fp, #0
 800a04e:	d000      	beq.n	800a052 <__gethex+0xfe>
 800a050:	4252      	negs	r2, r2
 800a052:	4416      	add	r6, r2
 800a054:	f8ca 1000 	str.w	r1, [sl]
 800a058:	b1dc      	cbz	r4, 800a092 <__gethex+0x13e>
 800a05a:	9b01      	ldr	r3, [sp, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	bf14      	ite	ne
 800a060:	f04f 0800 	movne.w	r8, #0
 800a064:	f04f 0806 	moveq.w	r8, #6
 800a068:	4640      	mov	r0, r8
 800a06a:	b005      	add	sp, #20
 800a06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a070:	4645      	mov	r5, r8
 800a072:	4626      	mov	r6, r4
 800a074:	2401      	movs	r4, #1
 800a076:	e7c7      	b.n	800a008 <__gethex+0xb4>
 800a078:	f04f 0b00 	mov.w	fp, #0
 800a07c:	1ca9      	adds	r1, r5, #2
 800a07e:	e7d0      	b.n	800a022 <__gethex+0xce>
 800a080:	f04f 0b01 	mov.w	fp, #1
 800a084:	e7fa      	b.n	800a07c <__gethex+0x128>
 800a086:	230a      	movs	r3, #10
 800a088:	fb03 0002 	mla	r0, r3, r2, r0
 800a08c:	e7d0      	b.n	800a030 <__gethex+0xdc>
 800a08e:	4629      	mov	r1, r5
 800a090:	e7e0      	b.n	800a054 <__gethex+0x100>
 800a092:	eba5 0308 	sub.w	r3, r5, r8
 800a096:	3b01      	subs	r3, #1
 800a098:	4621      	mov	r1, r4
 800a09a:	2b07      	cmp	r3, #7
 800a09c:	dc0a      	bgt.n	800a0b4 <__gethex+0x160>
 800a09e:	4648      	mov	r0, r9
 800a0a0:	f7fe f852 	bl	8008148 <_Balloc>
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	b940      	cbnz	r0, 800a0ba <__gethex+0x166>
 800a0a8:	4b61      	ldr	r3, [pc, #388]	; (800a230 <__gethex+0x2dc>)
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	21e4      	movs	r1, #228	; 0xe4
 800a0ae:	4861      	ldr	r0, [pc, #388]	; (800a234 <__gethex+0x2e0>)
 800a0b0:	f7ff feca 	bl	8009e48 <__assert_func>
 800a0b4:	3101      	adds	r1, #1
 800a0b6:	105b      	asrs	r3, r3, #1
 800a0b8:	e7ef      	b.n	800a09a <__gethex+0x146>
 800a0ba:	f100 0a14 	add.w	sl, r0, #20
 800a0be:	2300      	movs	r3, #0
 800a0c0:	495a      	ldr	r1, [pc, #360]	; (800a22c <__gethex+0x2d8>)
 800a0c2:	f8cd a004 	str.w	sl, [sp, #4]
 800a0c6:	469b      	mov	fp, r3
 800a0c8:	45a8      	cmp	r8, r5
 800a0ca:	d342      	bcc.n	800a152 <__gethex+0x1fe>
 800a0cc:	9801      	ldr	r0, [sp, #4]
 800a0ce:	f840 bb04 	str.w	fp, [r0], #4
 800a0d2:	eba0 000a 	sub.w	r0, r0, sl
 800a0d6:	1080      	asrs	r0, r0, #2
 800a0d8:	6120      	str	r0, [r4, #16]
 800a0da:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a0de:	4658      	mov	r0, fp
 800a0e0:	f7fe f924 	bl	800832c <__hi0bits>
 800a0e4:	683d      	ldr	r5, [r7, #0]
 800a0e6:	eba8 0000 	sub.w	r0, r8, r0
 800a0ea:	42a8      	cmp	r0, r5
 800a0ec:	dd59      	ble.n	800a1a2 <__gethex+0x24e>
 800a0ee:	eba0 0805 	sub.w	r8, r0, r5
 800a0f2:	4641      	mov	r1, r8
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f7fe fcb0 	bl	8008a5a <__any_on>
 800a0fa:	4683      	mov	fp, r0
 800a0fc:	b1b8      	cbz	r0, 800a12e <__gethex+0x1da>
 800a0fe:	f108 33ff 	add.w	r3, r8, #4294967295
 800a102:	1159      	asrs	r1, r3, #5
 800a104:	f003 021f 	and.w	r2, r3, #31
 800a108:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a10c:	f04f 0b01 	mov.w	fp, #1
 800a110:	fa0b f202 	lsl.w	r2, fp, r2
 800a114:	420a      	tst	r2, r1
 800a116:	d00a      	beq.n	800a12e <__gethex+0x1da>
 800a118:	455b      	cmp	r3, fp
 800a11a:	dd06      	ble.n	800a12a <__gethex+0x1d6>
 800a11c:	f1a8 0102 	sub.w	r1, r8, #2
 800a120:	4620      	mov	r0, r4
 800a122:	f7fe fc9a 	bl	8008a5a <__any_on>
 800a126:	2800      	cmp	r0, #0
 800a128:	d138      	bne.n	800a19c <__gethex+0x248>
 800a12a:	f04f 0b02 	mov.w	fp, #2
 800a12e:	4641      	mov	r1, r8
 800a130:	4620      	mov	r0, r4
 800a132:	f7ff fea7 	bl	8009e84 <rshift>
 800a136:	4446      	add	r6, r8
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	42b3      	cmp	r3, r6
 800a13c:	da41      	bge.n	800a1c2 <__gethex+0x26e>
 800a13e:	4621      	mov	r1, r4
 800a140:	4648      	mov	r0, r9
 800a142:	f7fe f841 	bl	80081c8 <_Bfree>
 800a146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a148:	2300      	movs	r3, #0
 800a14a:	6013      	str	r3, [r2, #0]
 800a14c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a150:	e78a      	b.n	800a068 <__gethex+0x114>
 800a152:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a156:	2a2e      	cmp	r2, #46	; 0x2e
 800a158:	d014      	beq.n	800a184 <__gethex+0x230>
 800a15a:	2b20      	cmp	r3, #32
 800a15c:	d106      	bne.n	800a16c <__gethex+0x218>
 800a15e:	9b01      	ldr	r3, [sp, #4]
 800a160:	f843 bb04 	str.w	fp, [r3], #4
 800a164:	f04f 0b00 	mov.w	fp, #0
 800a168:	9301      	str	r3, [sp, #4]
 800a16a:	465b      	mov	r3, fp
 800a16c:	7828      	ldrb	r0, [r5, #0]
 800a16e:	9303      	str	r3, [sp, #12]
 800a170:	f7ff feda 	bl	8009f28 <__hexdig_fun>
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	f000 000f 	and.w	r0, r0, #15
 800a17a:	4098      	lsls	r0, r3
 800a17c:	ea4b 0b00 	orr.w	fp, fp, r0
 800a180:	3304      	adds	r3, #4
 800a182:	e7a1      	b.n	800a0c8 <__gethex+0x174>
 800a184:	45a8      	cmp	r8, r5
 800a186:	d8e8      	bhi.n	800a15a <__gethex+0x206>
 800a188:	2201      	movs	r2, #1
 800a18a:	4628      	mov	r0, r5
 800a18c:	9303      	str	r3, [sp, #12]
 800a18e:	f7ff fe1d 	bl	8009dcc <strncmp>
 800a192:	4926      	ldr	r1, [pc, #152]	; (800a22c <__gethex+0x2d8>)
 800a194:	9b03      	ldr	r3, [sp, #12]
 800a196:	2800      	cmp	r0, #0
 800a198:	d1df      	bne.n	800a15a <__gethex+0x206>
 800a19a:	e795      	b.n	800a0c8 <__gethex+0x174>
 800a19c:	f04f 0b03 	mov.w	fp, #3
 800a1a0:	e7c5      	b.n	800a12e <__gethex+0x1da>
 800a1a2:	da0b      	bge.n	800a1bc <__gethex+0x268>
 800a1a4:	eba5 0800 	sub.w	r8, r5, r0
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	4642      	mov	r2, r8
 800a1ac:	4648      	mov	r0, r9
 800a1ae:	f7fe fa25 	bl	80085fc <__lshift>
 800a1b2:	eba6 0608 	sub.w	r6, r6, r8
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	f100 0a14 	add.w	sl, r0, #20
 800a1bc:	f04f 0b00 	mov.w	fp, #0
 800a1c0:	e7ba      	b.n	800a138 <__gethex+0x1e4>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	42b3      	cmp	r3, r6
 800a1c6:	dd73      	ble.n	800a2b0 <__gethex+0x35c>
 800a1c8:	1b9e      	subs	r6, r3, r6
 800a1ca:	42b5      	cmp	r5, r6
 800a1cc:	dc34      	bgt.n	800a238 <__gethex+0x2e4>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	d023      	beq.n	800a21c <__gethex+0x2c8>
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	d025      	beq.n	800a224 <__gethex+0x2d0>
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d115      	bne.n	800a208 <__gethex+0x2b4>
 800a1dc:	42b5      	cmp	r5, r6
 800a1de:	d113      	bne.n	800a208 <__gethex+0x2b4>
 800a1e0:	2d01      	cmp	r5, #1
 800a1e2:	d10b      	bne.n	800a1fc <__gethex+0x2a8>
 800a1e4:	9a02      	ldr	r2, [sp, #8]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6013      	str	r3, [r2, #0]
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	6123      	str	r3, [r4, #16]
 800a1ee:	f8ca 3000 	str.w	r3, [sl]
 800a1f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1f4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a1f8:	601c      	str	r4, [r3, #0]
 800a1fa:	e735      	b.n	800a068 <__gethex+0x114>
 800a1fc:	1e69      	subs	r1, r5, #1
 800a1fe:	4620      	mov	r0, r4
 800a200:	f7fe fc2b 	bl	8008a5a <__any_on>
 800a204:	2800      	cmp	r0, #0
 800a206:	d1ed      	bne.n	800a1e4 <__gethex+0x290>
 800a208:	4621      	mov	r1, r4
 800a20a:	4648      	mov	r0, r9
 800a20c:	f7fd ffdc 	bl	80081c8 <_Bfree>
 800a210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a212:	2300      	movs	r3, #0
 800a214:	6013      	str	r3, [r2, #0]
 800a216:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a21a:	e725      	b.n	800a068 <__gethex+0x114>
 800a21c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1f2      	bne.n	800a208 <__gethex+0x2b4>
 800a222:	e7df      	b.n	800a1e4 <__gethex+0x290>
 800a224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1dc      	bne.n	800a1e4 <__gethex+0x290>
 800a22a:	e7ed      	b.n	800a208 <__gethex+0x2b4>
 800a22c:	0800aadc 	.word	0x0800aadc
 800a230:	0800a972 	.word	0x0800a972
 800a234:	0800ab85 	.word	0x0800ab85
 800a238:	f106 38ff 	add.w	r8, r6, #4294967295
 800a23c:	f1bb 0f00 	cmp.w	fp, #0
 800a240:	d133      	bne.n	800a2aa <__gethex+0x356>
 800a242:	f1b8 0f00 	cmp.w	r8, #0
 800a246:	d004      	beq.n	800a252 <__gethex+0x2fe>
 800a248:	4641      	mov	r1, r8
 800a24a:	4620      	mov	r0, r4
 800a24c:	f7fe fc05 	bl	8008a5a <__any_on>
 800a250:	4683      	mov	fp, r0
 800a252:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a256:	2301      	movs	r3, #1
 800a258:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a25c:	f008 081f 	and.w	r8, r8, #31
 800a260:	fa03 f308 	lsl.w	r3, r3, r8
 800a264:	4213      	tst	r3, r2
 800a266:	4631      	mov	r1, r6
 800a268:	4620      	mov	r0, r4
 800a26a:	bf18      	it	ne
 800a26c:	f04b 0b02 	orrne.w	fp, fp, #2
 800a270:	1bad      	subs	r5, r5, r6
 800a272:	f7ff fe07 	bl	8009e84 <rshift>
 800a276:	687e      	ldr	r6, [r7, #4]
 800a278:	f04f 0802 	mov.w	r8, #2
 800a27c:	f1bb 0f00 	cmp.w	fp, #0
 800a280:	d04a      	beq.n	800a318 <__gethex+0x3c4>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b02      	cmp	r3, #2
 800a286:	d016      	beq.n	800a2b6 <__gethex+0x362>
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d018      	beq.n	800a2be <__gethex+0x36a>
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d109      	bne.n	800a2a4 <__gethex+0x350>
 800a290:	f01b 0f02 	tst.w	fp, #2
 800a294:	d006      	beq.n	800a2a4 <__gethex+0x350>
 800a296:	f8da 3000 	ldr.w	r3, [sl]
 800a29a:	ea4b 0b03 	orr.w	fp, fp, r3
 800a29e:	f01b 0f01 	tst.w	fp, #1
 800a2a2:	d10f      	bne.n	800a2c4 <__gethex+0x370>
 800a2a4:	f048 0810 	orr.w	r8, r8, #16
 800a2a8:	e036      	b.n	800a318 <__gethex+0x3c4>
 800a2aa:	f04f 0b01 	mov.w	fp, #1
 800a2ae:	e7d0      	b.n	800a252 <__gethex+0x2fe>
 800a2b0:	f04f 0801 	mov.w	r8, #1
 800a2b4:	e7e2      	b.n	800a27c <__gethex+0x328>
 800a2b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2b8:	f1c3 0301 	rsb	r3, r3, #1
 800a2bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d0ef      	beq.n	800a2a4 <__gethex+0x350>
 800a2c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2c8:	f104 0214 	add.w	r2, r4, #20
 800a2cc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a2d0:	9301      	str	r3, [sp, #4]
 800a2d2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	4694      	mov	ip, r2
 800a2da:	f852 1b04 	ldr.w	r1, [r2], #4
 800a2de:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a2e2:	d01e      	beq.n	800a322 <__gethex+0x3ce>
 800a2e4:	3101      	adds	r1, #1
 800a2e6:	f8cc 1000 	str.w	r1, [ip]
 800a2ea:	f1b8 0f02 	cmp.w	r8, #2
 800a2ee:	f104 0214 	add.w	r2, r4, #20
 800a2f2:	d13d      	bne.n	800a370 <__gethex+0x41c>
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	42ab      	cmp	r3, r5
 800a2fa:	d10b      	bne.n	800a314 <__gethex+0x3c0>
 800a2fc:	1169      	asrs	r1, r5, #5
 800a2fe:	2301      	movs	r3, #1
 800a300:	f005 051f 	and.w	r5, r5, #31
 800a304:	fa03 f505 	lsl.w	r5, r3, r5
 800a308:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a30c:	421d      	tst	r5, r3
 800a30e:	bf18      	it	ne
 800a310:	f04f 0801 	movne.w	r8, #1
 800a314:	f048 0820 	orr.w	r8, r8, #32
 800a318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a31a:	601c      	str	r4, [r3, #0]
 800a31c:	9b02      	ldr	r3, [sp, #8]
 800a31e:	601e      	str	r6, [r3, #0]
 800a320:	e6a2      	b.n	800a068 <__gethex+0x114>
 800a322:	4290      	cmp	r0, r2
 800a324:	f842 3c04 	str.w	r3, [r2, #-4]
 800a328:	d8d6      	bhi.n	800a2d8 <__gethex+0x384>
 800a32a:	68a2      	ldr	r2, [r4, #8]
 800a32c:	4593      	cmp	fp, r2
 800a32e:	db17      	blt.n	800a360 <__gethex+0x40c>
 800a330:	6861      	ldr	r1, [r4, #4]
 800a332:	4648      	mov	r0, r9
 800a334:	3101      	adds	r1, #1
 800a336:	f7fd ff07 	bl	8008148 <_Balloc>
 800a33a:	4682      	mov	sl, r0
 800a33c:	b918      	cbnz	r0, 800a346 <__gethex+0x3f2>
 800a33e:	4b1b      	ldr	r3, [pc, #108]	; (800a3ac <__gethex+0x458>)
 800a340:	4602      	mov	r2, r0
 800a342:	2184      	movs	r1, #132	; 0x84
 800a344:	e6b3      	b.n	800a0ae <__gethex+0x15a>
 800a346:	6922      	ldr	r2, [r4, #16]
 800a348:	3202      	adds	r2, #2
 800a34a:	f104 010c 	add.w	r1, r4, #12
 800a34e:	0092      	lsls	r2, r2, #2
 800a350:	300c      	adds	r0, #12
 800a352:	f7fd f8a4 	bl	800749e <memcpy>
 800a356:	4621      	mov	r1, r4
 800a358:	4648      	mov	r0, r9
 800a35a:	f7fd ff35 	bl	80081c8 <_Bfree>
 800a35e:	4654      	mov	r4, sl
 800a360:	6922      	ldr	r2, [r4, #16]
 800a362:	1c51      	adds	r1, r2, #1
 800a364:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a368:	6121      	str	r1, [r4, #16]
 800a36a:	2101      	movs	r1, #1
 800a36c:	6151      	str	r1, [r2, #20]
 800a36e:	e7bc      	b.n	800a2ea <__gethex+0x396>
 800a370:	6921      	ldr	r1, [r4, #16]
 800a372:	4559      	cmp	r1, fp
 800a374:	dd0b      	ble.n	800a38e <__gethex+0x43a>
 800a376:	2101      	movs	r1, #1
 800a378:	4620      	mov	r0, r4
 800a37a:	f7ff fd83 	bl	8009e84 <rshift>
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	3601      	adds	r6, #1
 800a382:	42b3      	cmp	r3, r6
 800a384:	f6ff aedb 	blt.w	800a13e <__gethex+0x1ea>
 800a388:	f04f 0801 	mov.w	r8, #1
 800a38c:	e7c2      	b.n	800a314 <__gethex+0x3c0>
 800a38e:	f015 051f 	ands.w	r5, r5, #31
 800a392:	d0f9      	beq.n	800a388 <__gethex+0x434>
 800a394:	9b01      	ldr	r3, [sp, #4]
 800a396:	441a      	add	r2, r3
 800a398:	f1c5 0520 	rsb	r5, r5, #32
 800a39c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a3a0:	f7fd ffc4 	bl	800832c <__hi0bits>
 800a3a4:	42a8      	cmp	r0, r5
 800a3a6:	dbe6      	blt.n	800a376 <__gethex+0x422>
 800a3a8:	e7ee      	b.n	800a388 <__gethex+0x434>
 800a3aa:	bf00      	nop
 800a3ac:	0800a972 	.word	0x0800a972

0800a3b0 <L_shift>:
 800a3b0:	f1c2 0208 	rsb	r2, r2, #8
 800a3b4:	0092      	lsls	r2, r2, #2
 800a3b6:	b570      	push	{r4, r5, r6, lr}
 800a3b8:	f1c2 0620 	rsb	r6, r2, #32
 800a3bc:	6843      	ldr	r3, [r0, #4]
 800a3be:	6804      	ldr	r4, [r0, #0]
 800a3c0:	fa03 f506 	lsl.w	r5, r3, r6
 800a3c4:	432c      	orrs	r4, r5
 800a3c6:	40d3      	lsrs	r3, r2
 800a3c8:	6004      	str	r4, [r0, #0]
 800a3ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3ce:	4288      	cmp	r0, r1
 800a3d0:	d3f4      	bcc.n	800a3bc <L_shift+0xc>
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}

0800a3d4 <__match>:
 800a3d4:	b530      	push	{r4, r5, lr}
 800a3d6:	6803      	ldr	r3, [r0, #0]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3de:	b914      	cbnz	r4, 800a3e6 <__match+0x12>
 800a3e0:	6003      	str	r3, [r0, #0]
 800a3e2:	2001      	movs	r0, #1
 800a3e4:	bd30      	pop	{r4, r5, pc}
 800a3e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a3ee:	2d19      	cmp	r5, #25
 800a3f0:	bf98      	it	ls
 800a3f2:	3220      	addls	r2, #32
 800a3f4:	42a2      	cmp	r2, r4
 800a3f6:	d0f0      	beq.n	800a3da <__match+0x6>
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	e7f3      	b.n	800a3e4 <__match+0x10>

0800a3fc <__hexnan>:
 800a3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a400:	680b      	ldr	r3, [r1, #0]
 800a402:	6801      	ldr	r1, [r0, #0]
 800a404:	115e      	asrs	r6, r3, #5
 800a406:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a40a:	f013 031f 	ands.w	r3, r3, #31
 800a40e:	b087      	sub	sp, #28
 800a410:	bf18      	it	ne
 800a412:	3604      	addne	r6, #4
 800a414:	2500      	movs	r5, #0
 800a416:	1f37      	subs	r7, r6, #4
 800a418:	4682      	mov	sl, r0
 800a41a:	4690      	mov	r8, r2
 800a41c:	9301      	str	r3, [sp, #4]
 800a41e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a422:	46b9      	mov	r9, r7
 800a424:	463c      	mov	r4, r7
 800a426:	9502      	str	r5, [sp, #8]
 800a428:	46ab      	mov	fp, r5
 800a42a:	784a      	ldrb	r2, [r1, #1]
 800a42c:	1c4b      	adds	r3, r1, #1
 800a42e:	9303      	str	r3, [sp, #12]
 800a430:	b342      	cbz	r2, 800a484 <__hexnan+0x88>
 800a432:	4610      	mov	r0, r2
 800a434:	9105      	str	r1, [sp, #20]
 800a436:	9204      	str	r2, [sp, #16]
 800a438:	f7ff fd76 	bl	8009f28 <__hexdig_fun>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d14f      	bne.n	800a4e0 <__hexnan+0xe4>
 800a440:	9a04      	ldr	r2, [sp, #16]
 800a442:	9905      	ldr	r1, [sp, #20]
 800a444:	2a20      	cmp	r2, #32
 800a446:	d818      	bhi.n	800a47a <__hexnan+0x7e>
 800a448:	9b02      	ldr	r3, [sp, #8]
 800a44a:	459b      	cmp	fp, r3
 800a44c:	dd13      	ble.n	800a476 <__hexnan+0x7a>
 800a44e:	454c      	cmp	r4, r9
 800a450:	d206      	bcs.n	800a460 <__hexnan+0x64>
 800a452:	2d07      	cmp	r5, #7
 800a454:	dc04      	bgt.n	800a460 <__hexnan+0x64>
 800a456:	462a      	mov	r2, r5
 800a458:	4649      	mov	r1, r9
 800a45a:	4620      	mov	r0, r4
 800a45c:	f7ff ffa8 	bl	800a3b0 <L_shift>
 800a460:	4544      	cmp	r4, r8
 800a462:	d950      	bls.n	800a506 <__hexnan+0x10a>
 800a464:	2300      	movs	r3, #0
 800a466:	f1a4 0904 	sub.w	r9, r4, #4
 800a46a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a46e:	f8cd b008 	str.w	fp, [sp, #8]
 800a472:	464c      	mov	r4, r9
 800a474:	461d      	mov	r5, r3
 800a476:	9903      	ldr	r1, [sp, #12]
 800a478:	e7d7      	b.n	800a42a <__hexnan+0x2e>
 800a47a:	2a29      	cmp	r2, #41	; 0x29
 800a47c:	d155      	bne.n	800a52a <__hexnan+0x12e>
 800a47e:	3102      	adds	r1, #2
 800a480:	f8ca 1000 	str.w	r1, [sl]
 800a484:	f1bb 0f00 	cmp.w	fp, #0
 800a488:	d04f      	beq.n	800a52a <__hexnan+0x12e>
 800a48a:	454c      	cmp	r4, r9
 800a48c:	d206      	bcs.n	800a49c <__hexnan+0xa0>
 800a48e:	2d07      	cmp	r5, #7
 800a490:	dc04      	bgt.n	800a49c <__hexnan+0xa0>
 800a492:	462a      	mov	r2, r5
 800a494:	4649      	mov	r1, r9
 800a496:	4620      	mov	r0, r4
 800a498:	f7ff ff8a 	bl	800a3b0 <L_shift>
 800a49c:	4544      	cmp	r4, r8
 800a49e:	d934      	bls.n	800a50a <__hexnan+0x10e>
 800a4a0:	f1a8 0204 	sub.w	r2, r8, #4
 800a4a4:	4623      	mov	r3, r4
 800a4a6:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4aa:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4ae:	429f      	cmp	r7, r3
 800a4b0:	d2f9      	bcs.n	800a4a6 <__hexnan+0xaa>
 800a4b2:	1b3b      	subs	r3, r7, r4
 800a4b4:	f023 0303 	bic.w	r3, r3, #3
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	3e03      	subs	r6, #3
 800a4bc:	3401      	adds	r4, #1
 800a4be:	42a6      	cmp	r6, r4
 800a4c0:	bf38      	it	cc
 800a4c2:	2304      	movcc	r3, #4
 800a4c4:	4443      	add	r3, r8
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f843 2b04 	str.w	r2, [r3], #4
 800a4cc:	429f      	cmp	r7, r3
 800a4ce:	d2fb      	bcs.n	800a4c8 <__hexnan+0xcc>
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	b91b      	cbnz	r3, 800a4dc <__hexnan+0xe0>
 800a4d4:	4547      	cmp	r7, r8
 800a4d6:	d126      	bne.n	800a526 <__hexnan+0x12a>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	603b      	str	r3, [r7, #0]
 800a4dc:	2005      	movs	r0, #5
 800a4de:	e025      	b.n	800a52c <__hexnan+0x130>
 800a4e0:	3501      	adds	r5, #1
 800a4e2:	2d08      	cmp	r5, #8
 800a4e4:	f10b 0b01 	add.w	fp, fp, #1
 800a4e8:	dd06      	ble.n	800a4f8 <__hexnan+0xfc>
 800a4ea:	4544      	cmp	r4, r8
 800a4ec:	d9c3      	bls.n	800a476 <__hexnan+0x7a>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4f4:	2501      	movs	r5, #1
 800a4f6:	3c04      	subs	r4, #4
 800a4f8:	6822      	ldr	r2, [r4, #0]
 800a4fa:	f000 000f 	and.w	r0, r0, #15
 800a4fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a502:	6020      	str	r0, [r4, #0]
 800a504:	e7b7      	b.n	800a476 <__hexnan+0x7a>
 800a506:	2508      	movs	r5, #8
 800a508:	e7b5      	b.n	800a476 <__hexnan+0x7a>
 800a50a:	9b01      	ldr	r3, [sp, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d0df      	beq.n	800a4d0 <__hexnan+0xd4>
 800a510:	f1c3 0320 	rsb	r3, r3, #32
 800a514:	f04f 32ff 	mov.w	r2, #4294967295
 800a518:	40da      	lsrs	r2, r3
 800a51a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a51e:	4013      	ands	r3, r2
 800a520:	f846 3c04 	str.w	r3, [r6, #-4]
 800a524:	e7d4      	b.n	800a4d0 <__hexnan+0xd4>
 800a526:	3f04      	subs	r7, #4
 800a528:	e7d2      	b.n	800a4d0 <__hexnan+0xd4>
 800a52a:	2004      	movs	r0, #4
 800a52c:	b007      	add	sp, #28
 800a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a532 <__ascii_mbtowc>:
 800a532:	b082      	sub	sp, #8
 800a534:	b901      	cbnz	r1, 800a538 <__ascii_mbtowc+0x6>
 800a536:	a901      	add	r1, sp, #4
 800a538:	b142      	cbz	r2, 800a54c <__ascii_mbtowc+0x1a>
 800a53a:	b14b      	cbz	r3, 800a550 <__ascii_mbtowc+0x1e>
 800a53c:	7813      	ldrb	r3, [r2, #0]
 800a53e:	600b      	str	r3, [r1, #0]
 800a540:	7812      	ldrb	r2, [r2, #0]
 800a542:	1e10      	subs	r0, r2, #0
 800a544:	bf18      	it	ne
 800a546:	2001      	movne	r0, #1
 800a548:	b002      	add	sp, #8
 800a54a:	4770      	bx	lr
 800a54c:	4610      	mov	r0, r2
 800a54e:	e7fb      	b.n	800a548 <__ascii_mbtowc+0x16>
 800a550:	f06f 0001 	mvn.w	r0, #1
 800a554:	e7f8      	b.n	800a548 <__ascii_mbtowc+0x16>

0800a556 <_realloc_r>:
 800a556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a55a:	4680      	mov	r8, r0
 800a55c:	4614      	mov	r4, r2
 800a55e:	460e      	mov	r6, r1
 800a560:	b921      	cbnz	r1, 800a56c <_realloc_r+0x16>
 800a562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a566:	4611      	mov	r1, r2
 800a568:	f7fb bce4 	b.w	8005f34 <_malloc_r>
 800a56c:	b92a      	cbnz	r2, 800a57a <_realloc_r+0x24>
 800a56e:	f7fd fd9f 	bl	80080b0 <_free_r>
 800a572:	4625      	mov	r5, r4
 800a574:	4628      	mov	r0, r5
 800a576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57a:	f000 f842 	bl	800a602 <_malloc_usable_size_r>
 800a57e:	4284      	cmp	r4, r0
 800a580:	4607      	mov	r7, r0
 800a582:	d802      	bhi.n	800a58a <_realloc_r+0x34>
 800a584:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a588:	d812      	bhi.n	800a5b0 <_realloc_r+0x5a>
 800a58a:	4621      	mov	r1, r4
 800a58c:	4640      	mov	r0, r8
 800a58e:	f7fb fcd1 	bl	8005f34 <_malloc_r>
 800a592:	4605      	mov	r5, r0
 800a594:	2800      	cmp	r0, #0
 800a596:	d0ed      	beq.n	800a574 <_realloc_r+0x1e>
 800a598:	42bc      	cmp	r4, r7
 800a59a:	4622      	mov	r2, r4
 800a59c:	4631      	mov	r1, r6
 800a59e:	bf28      	it	cs
 800a5a0:	463a      	movcs	r2, r7
 800a5a2:	f7fc ff7c 	bl	800749e <memcpy>
 800a5a6:	4631      	mov	r1, r6
 800a5a8:	4640      	mov	r0, r8
 800a5aa:	f7fd fd81 	bl	80080b0 <_free_r>
 800a5ae:	e7e1      	b.n	800a574 <_realloc_r+0x1e>
 800a5b0:	4635      	mov	r5, r6
 800a5b2:	e7df      	b.n	800a574 <_realloc_r+0x1e>

0800a5b4 <__ascii_wctomb>:
 800a5b4:	b149      	cbz	r1, 800a5ca <__ascii_wctomb+0x16>
 800a5b6:	2aff      	cmp	r2, #255	; 0xff
 800a5b8:	bf85      	ittet	hi
 800a5ba:	238a      	movhi	r3, #138	; 0x8a
 800a5bc:	6003      	strhi	r3, [r0, #0]
 800a5be:	700a      	strbls	r2, [r1, #0]
 800a5c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a5c4:	bf98      	it	ls
 800a5c6:	2001      	movls	r0, #1
 800a5c8:	4770      	bx	lr
 800a5ca:	4608      	mov	r0, r1
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <fiprintf>:
 800a5d0:	b40e      	push	{r1, r2, r3}
 800a5d2:	b503      	push	{r0, r1, lr}
 800a5d4:	4601      	mov	r1, r0
 800a5d6:	ab03      	add	r3, sp, #12
 800a5d8:	4805      	ldr	r0, [pc, #20]	; (800a5f0 <fiprintf+0x20>)
 800a5da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5de:	6800      	ldr	r0, [r0, #0]
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	f7ff f9af 	bl	8009944 <_vfiprintf_r>
 800a5e6:	b002      	add	sp, #8
 800a5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5ec:	b003      	add	sp, #12
 800a5ee:	4770      	bx	lr
 800a5f0:	20000064 	.word	0x20000064

0800a5f4 <abort>:
 800a5f4:	b508      	push	{r3, lr}
 800a5f6:	2006      	movs	r0, #6
 800a5f8:	f000 f834 	bl	800a664 <raise>
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	f000 f85d 	bl	800a6bc <_exit>

0800a602 <_malloc_usable_size_r>:
 800a602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a606:	1f18      	subs	r0, r3, #4
 800a608:	2b00      	cmp	r3, #0
 800a60a:	bfbc      	itt	lt
 800a60c:	580b      	ldrlt	r3, [r1, r0]
 800a60e:	18c0      	addlt	r0, r0, r3
 800a610:	4770      	bx	lr

0800a612 <_raise_r>:
 800a612:	291f      	cmp	r1, #31
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	4604      	mov	r4, r0
 800a618:	460d      	mov	r5, r1
 800a61a:	d904      	bls.n	800a626 <_raise_r+0x14>
 800a61c:	2316      	movs	r3, #22
 800a61e:	6003      	str	r3, [r0, #0]
 800a620:	f04f 30ff 	mov.w	r0, #4294967295
 800a624:	bd38      	pop	{r3, r4, r5, pc}
 800a626:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a628:	b112      	cbz	r2, 800a630 <_raise_r+0x1e>
 800a62a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a62e:	b94b      	cbnz	r3, 800a644 <_raise_r+0x32>
 800a630:	4620      	mov	r0, r4
 800a632:	f000 f831 	bl	800a698 <_getpid_r>
 800a636:	462a      	mov	r2, r5
 800a638:	4601      	mov	r1, r0
 800a63a:	4620      	mov	r0, r4
 800a63c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a640:	f000 b818 	b.w	800a674 <_kill_r>
 800a644:	2b01      	cmp	r3, #1
 800a646:	d00a      	beq.n	800a65e <_raise_r+0x4c>
 800a648:	1c59      	adds	r1, r3, #1
 800a64a:	d103      	bne.n	800a654 <_raise_r+0x42>
 800a64c:	2316      	movs	r3, #22
 800a64e:	6003      	str	r3, [r0, #0]
 800a650:	2001      	movs	r0, #1
 800a652:	e7e7      	b.n	800a624 <_raise_r+0x12>
 800a654:	2400      	movs	r4, #0
 800a656:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a65a:	4628      	mov	r0, r5
 800a65c:	4798      	blx	r3
 800a65e:	2000      	movs	r0, #0
 800a660:	e7e0      	b.n	800a624 <_raise_r+0x12>
	...

0800a664 <raise>:
 800a664:	4b02      	ldr	r3, [pc, #8]	; (800a670 <raise+0xc>)
 800a666:	4601      	mov	r1, r0
 800a668:	6818      	ldr	r0, [r3, #0]
 800a66a:	f7ff bfd2 	b.w	800a612 <_raise_r>
 800a66e:	bf00      	nop
 800a670:	20000064 	.word	0x20000064

0800a674 <_kill_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4d07      	ldr	r5, [pc, #28]	; (800a694 <_kill_r+0x20>)
 800a678:	2300      	movs	r3, #0
 800a67a:	4604      	mov	r4, r0
 800a67c:	4608      	mov	r0, r1
 800a67e:	4611      	mov	r1, r2
 800a680:	602b      	str	r3, [r5, #0]
 800a682:	f000 f813 	bl	800a6ac <_kill>
 800a686:	1c43      	adds	r3, r0, #1
 800a688:	d102      	bne.n	800a690 <_kill_r+0x1c>
 800a68a:	682b      	ldr	r3, [r5, #0]
 800a68c:	b103      	cbz	r3, 800a690 <_kill_r+0x1c>
 800a68e:	6023      	str	r3, [r4, #0]
 800a690:	bd38      	pop	{r3, r4, r5, pc}
 800a692:	bf00      	nop
 800a694:	200032c8 	.word	0x200032c8

0800a698 <_getpid_r>:
 800a698:	f000 b800 	b.w	800a69c <_getpid>

0800a69c <_getpid>:
 800a69c:	4b02      	ldr	r3, [pc, #8]	; (800a6a8 <_getpid+0xc>)
 800a69e:	2258      	movs	r2, #88	; 0x58
 800a6a0:	601a      	str	r2, [r3, #0]
 800a6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a6:	4770      	bx	lr
 800a6a8:	200032c8 	.word	0x200032c8

0800a6ac <_kill>:
 800a6ac:	4b02      	ldr	r3, [pc, #8]	; (800a6b8 <_kill+0xc>)
 800a6ae:	2258      	movs	r2, #88	; 0x58
 800a6b0:	601a      	str	r2, [r3, #0]
 800a6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b6:	4770      	bx	lr
 800a6b8:	200032c8 	.word	0x200032c8

0800a6bc <_exit>:
 800a6bc:	e7fe      	b.n	800a6bc <_exit>
	...

0800a6c0 <_init>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	bf00      	nop
 800a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	469e      	mov	lr, r3
 800a6ca:	4770      	bx	lr

0800a6cc <_fini>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	bf00      	nop
 800a6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d2:	bc08      	pop	{r3}
 800a6d4:	469e      	mov	lr, r3
 800a6d6:	4770      	bx	lr

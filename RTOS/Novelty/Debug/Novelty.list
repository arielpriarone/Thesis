
Novelty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e8c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800708c  0800708c  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800722c  0800722c  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800722c  0800722c  0001722c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007234  08007234  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007234  08007234  00017234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007238  08007238  00017238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800723c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  080072a4  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  08007344  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008b0  200001a8  080073e4  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000a58  080073e4  00020a58  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201d6  2**0
                  CONTENTS, READONLY
 15 .debug_info   000149cd  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002cef  00000000  00000000  00034be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000f28  00000000  00000000  000378d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000ba2  00000000  00000000  00038800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a464  00000000  00000000  000393a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000139b0  00000000  00000000  00063806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00101d09  00000000  00000000  000771b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004a2c  00000000  00000000  00178ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  0017d8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a8 	.word	0x200001a8
 800021c:	00000000 	.word	0x00000000
 8000220:	08007074 	.word	0x08007074

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ac 	.word	0x200001ac
 800023c:	08007074 	.word	0x08007074

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b09a      	sub	sp, #104	; 0x68
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fe0c 	bl	80011fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f82f 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f9bb 	bl	8000964 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 f99b 	bl	8000928 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 f93b 	bl	800086c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 f969 	bl	80008cc <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005fa:	f000 f897 	bl	800072c <MX_ADC1_Init>
  MX_ETH_Init();
 80005fe:	f000 f8e7 	bl	80007d0 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3); // redirect the printf() and scanf() function to huart
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <main+0x54>)
 8000604:	f000 fa66 	bl	8000ad4 <RetargetInit>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000608:	220a      	movs	r2, #10
 800060a:	490a      	ldr	r1, [pc, #40]	; (8000634 <main+0x58>)
 800060c:	480a      	ldr	r0, [pc, #40]	; (8000638 <main+0x5c>)
 800060e:	f000 febb 	bl	8001388 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  printf("\r\nYour name: ");
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <main+0x60>)
 8000614:	f005 f96a 	bl	80058ec <iprintf>
	  scanf("%s", buf);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4808      	ldr	r0, [pc, #32]	; (8000640 <main+0x64>)
 800061e:	f005 f977 	bl	8005910 <iscanf>
	  printf("\r\nHello, %s!\r\n", buf);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4619      	mov	r1, r3
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <main+0x68>)
 8000628:	f005 f960 	bl	80058ec <iprintf>
  {
 800062c:	e7f1      	b.n	8000612 <main+0x36>
 800062e:	bf00      	nop
 8000630:	20000354 	.word	0x20000354
 8000634:	200008e4 	.word	0x200008e4
 8000638:	200001fc 	.word	0x200001fc
 800063c:	0800708c 	.word	0x0800708c
 8000640:	0800709c 	.word	0x0800709c
 8000644:	080070a0 	.word	0x080070a0

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2234      	movs	r2, #52	; 0x34
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 faf2 	bl	8005c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800066c:	f002 fd44 	bl	80030f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <SystemClock_Config+0xdc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a2b      	ldr	r2, [pc, #172]	; (8000724 <SystemClock_Config+0xdc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b29      	ldr	r3, [pc, #164]	; (8000724 <SystemClock_Config+0xdc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000688:	4b27      	ldr	r3, [pc, #156]	; (8000728 <SystemClock_Config+0xe0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000690:	4a25      	ldr	r2, [pc, #148]	; (8000728 <SystemClock_Config+0xe0>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <SystemClock_Config+0xe0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006bc:	2360      	movs	r3, #96	; 0x60
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fd71 	bl	80031b8 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006dc:	f000 f9ee 	bl	8000abc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e0:	f002 fd1a 	bl	8003118 <HAL_PWREx_EnableOverDrive>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ea:	f000 f9e7 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2103      	movs	r1, #3
 800070a:	4618      	mov	r0, r3
 800070c:	f003 f802 	bl	8003714 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000716:	f000 f9d1 	bl	8000abc <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000732:	463b      	mov	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <MX_ADC1_Init+0x9c>)
 8000742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000746:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800074a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_ADC1_Init+0x98>)
 800075a:	2201      	movs	r2, #1
 800075c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_ADC1_Init+0x98>)
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <MX_ADC1_Init+0xa0>)
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_ADC1_Init+0x98>)
 800077a:	2201      	movs	r2, #1
 800077c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000780:	2201      	movs	r2, #1
 8000782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000788:	2201      	movs	r2, #1
 800078a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_ADC1_Init+0x98>)
 800078e:	f000 fdb7 	bl	8001300 <HAL_ADC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000798:	f000 f990 	bl	8000abc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_ADC1_Init+0x98>)
 80007ae:	f000 fef9 	bl	80015a4 <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007b8:	f000 f980 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200001fc 	.word	0x200001fc
 80007c8:	40012000 	.word	0x40012000
 80007cc:	0f000001 	.word	0x0f000001

080007d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_ETH_Init+0x84>)
 80007d6:	4a20      	ldr	r2, [pc, #128]	; (8000858 <MX_ETH_Init+0x88>)
 80007d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007da:	4b20      	ldr	r3, [pc, #128]	; (800085c <MX_ETH_Init+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007e0:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_ETH_Init+0x8c>)
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_ETH_Init+0x8c>)
 80007e8:	22e1      	movs	r2, #225	; 0xe1
 80007ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_ETH_Init+0x8c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_ETH_Init+0x8c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_ETH_Init+0x8c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_ETH_Init+0x84>)
 8000800:	4a16      	ldr	r2, [pc, #88]	; (800085c <MX_ETH_Init+0x8c>)
 8000802:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_ETH_Init+0x84>)
 8000806:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800080a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_ETH_Init+0x84>)
 800080e:	4a14      	ldr	r2, [pc, #80]	; (8000860 <MX_ETH_Init+0x90>)
 8000810:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_ETH_Init+0x84>)
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <MX_ETH_Init+0x94>)
 8000816:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_ETH_Init+0x84>)
 800081a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800081e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_ETH_Init+0x84>)
 8000822:	f001 fe1b 	bl	800245c <HAL_ETH_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800082c:	f000 f946 	bl	8000abc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000830:	2238      	movs	r2, #56	; 0x38
 8000832:	2100      	movs	r1, #0
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_ETH_Init+0x98>)
 8000836:	f005 fa03 	bl	8005c40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_ETH_Init+0x98>)
 800083c:	2221      	movs	r2, #33	; 0x21
 800083e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_ETH_Init+0x98>)
 8000842:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000846:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_ETH_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200002a4 	.word	0x200002a4
 8000858:	40028000 	.word	0x40028000
 800085c:	200008f8 	.word	0x200008f8
 8000860:	20000108 	.word	0x20000108
 8000864:	20000068 	.word	0x20000068
 8000868:	200001c4 	.word	0x200001c4

0800086c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_USART3_UART_Init+0x5c>)
 8000874:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART3_UART_Init+0x58>)
 80008b0:	f003 fd7e 	bl	80043b0 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008ba:	f000 f8ff 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000354 	.word	0x20000354
 80008c8:	40004800 	.word	0x40004800

080008cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008da:	2206      	movs	r2, #6
 80008dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	2201      	movs	r2, #1
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	f002 faa9 	bl	8002e66 <HAL_PCD_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800091a:	f000 f8cf 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200003dc 	.word	0x200003dc

08000928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_DMA_Init+0x38>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <MX_DMA_Init+0x38>)
 8000934:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_DMA_Init+0x38>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2038      	movs	r0, #56	; 0x38
 800094c:	f001 f9d7 	bl	8001cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000950:	2038      	movs	r0, #56	; 0x38
 8000952:	f001 f9f0 	bl	8001d36 <HAL_NVIC_EnableIRQ>

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b47      	ldr	r3, [pc, #284]	; (8000a98 <MX_GPIO_Init+0x134>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a46      	ldr	r2, [pc, #280]	; (8000a98 <MX_GPIO_Init+0x134>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b44      	ldr	r3, [pc, #272]	; (8000a98 <MX_GPIO_Init+0x134>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	4b41      	ldr	r3, [pc, #260]	; (8000a98 <MX_GPIO_Init+0x134>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a40      	ldr	r2, [pc, #256]	; (8000a98 <MX_GPIO_Init+0x134>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b3e      	ldr	r3, [pc, #248]	; (8000a98 <MX_GPIO_Init+0x134>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <MX_GPIO_Init+0x134>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a3a      	ldr	r2, [pc, #232]	; (8000a98 <MX_GPIO_Init+0x134>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b38      	ldr	r3, [pc, #224]	; (8000a98 <MX_GPIO_Init+0x134>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b35      	ldr	r3, [pc, #212]	; (8000a98 <MX_GPIO_Init+0x134>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a34      	ldr	r2, [pc, #208]	; (8000a98 <MX_GPIO_Init+0x134>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <MX_GPIO_Init+0x134>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	4b2f      	ldr	r3, [pc, #188]	; (8000a98 <MX_GPIO_Init+0x134>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a2e      	ldr	r2, [pc, #184]	; (8000a98 <MX_GPIO_Init+0x134>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <MX_GPIO_Init+0x134>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f2:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <MX_GPIO_Init+0x134>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <MX_GPIO_Init+0x134>)
 80009f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <MX_GPIO_Init+0x134>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a10:	4822      	ldr	r0, [pc, #136]	; (8000a9c <MX_GPIO_Init+0x138>)
 8000a12:	f002 f9f5 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2140      	movs	r1, #64	; 0x40
 8000a1a:	4821      	ldr	r0, [pc, #132]	; (8000aa0 <MX_GPIO_Init+0x13c>)
 8000a1c:	f002 f9f0 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	481b      	ldr	r0, [pc, #108]	; (8000aa4 <MX_GPIO_Init+0x140>)
 8000a38:	f002 f836 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a3c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_GPIO_Init+0x138>)
 8000a56:	f002 f827 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a5a:	2340      	movs	r3, #64	; 0x40
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <MX_GPIO_Init+0x13c>)
 8000a72:	f002 f819 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_GPIO_Init+0x13c>)
 8000a8a:	f002 f80d 	bl	8002aa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8e:	bf00      	nop
 8000a90:	3730      	adds	r7, #48	; 0x30
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40021800 	.word	0x40021800
 8000aa4:	40020800 	.word	0x40020800

08000aa8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) { //what to do when the analogue acquisition end
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
			Error_Handler();
		 }
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);*/


}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000ac4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac8:	4801      	ldr	r0, [pc, #4]	; (8000ad0 <Error_Handler+0x14>)
 8000aca:	f002 f9b2 	bl	8002e32 <HAL_GPIO_TogglePin>
 8000ace:	e7f9      	b.n	8000ac4 <Error_Handler+0x8>
 8000ad0:	40020400 	.word	0x40020400

08000ad4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <RetargetInit+0x28>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <RetargetInit+0x2c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6898      	ldr	r0, [r3, #8]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2202      	movs	r2, #2
 8000aec:	2100      	movs	r1, #0
 8000aee:	f004 ff21 	bl	8005934 <setvbuf>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000900 	.word	0x20000900
 8000b00:	20000064 	.word	0x20000064

08000b04 <_isatty>:

int _isatty(int fd) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db04      	blt.n	8000b1c <_isatty+0x18>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	dc01      	bgt.n	8000b1c <_isatty+0x18>
    return 1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e005      	b.n	8000b28 <_isatty+0x24>

  errno = EBADF;
 8000b1c:	f005 f8ee 	bl	8005cfc <__errno>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2209      	movs	r2, #9
 8000b24:	601a      	str	r2, [r3, #0]
  return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_write>:

int _write(int fd, char* ptr, int len) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d002      	beq.n	8000b48 <_write+0x18>
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d111      	bne.n	8000b6c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <_write+0x54>)
 8000b4a:	6818      	ldr	r0, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	f003 fc79 	bl	800444c <HAL_UART_Transmit>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b5e:	7dfb      	ldrb	r3, [r7, #23]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <_write+0x38>
      return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	e008      	b.n	8000b7a <_write+0x4a>
    else
      return EIO;
 8000b68:	2305      	movs	r3, #5
 8000b6a:	e006      	b.n	8000b7a <_write+0x4a>
  }
  errno = EBADF;
 8000b6c:	f005 f8c6 	bl	8005cfc <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2209      	movs	r2, #9
 8000b74:	601a      	str	r2, [r3, #0]
  return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000900 	.word	0x20000900

08000b88 <_close>:

int _close(int fd) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db04      	blt.n	8000ba0 <_close+0x18>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	dc01      	bgt.n	8000ba0 <_close+0x18>
    return 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e006      	b.n	8000bae <_close+0x26>

  errno = EBADF;
 8000ba0:	f005 f8ac 	bl	8005cfc <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2209      	movs	r2, #9
 8000ba8:	601a      	str	r2, [r3, #0]
  return -1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000bc2:	f005 f89b 	bl	8005cfc <__errno>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2209      	movs	r2, #9
 8000bca:	601a      	str	r2, [r3, #0]
  return -1;
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_read>:

int _read(int fd, char* ptr, int len) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d110      	bne.n	8000c0c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <_read+0x4c>)
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	f003 fcac 	bl	8004552 <HAL_UART_Receive>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d101      	bne.n	8000c08 <_read+0x30>
      return 1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e008      	b.n	8000c1a <_read+0x42>
    else
      return EIO;
 8000c08:	2305      	movs	r3, #5
 8000c0a:	e006      	b.n	8000c1a <_read+0x42>
  }
  errno = EBADF;
 8000c0c:	f005 f876 	bl	8005cfc <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2209      	movs	r2, #9
 8000c14:	601a      	str	r2, [r3, #0]
  return -1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000900 	.word	0x20000900

08000c28 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db08      	blt.n	8000c4a <_fstat+0x22>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	dc05      	bgt.n	8000c4a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c44:	605a      	str	r2, [r3, #4]
    return 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e005      	b.n	8000c56 <_fstat+0x2e>
  }

  errno = EBADF;
 8000c4a:	f005 f857 	bl	8005cfc <__errno>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2209      	movs	r2, #9
 8000c52:	601a      	str	r2, [r3, #0]
  return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a2d      	ldr	r2, [pc, #180]	; (8000d7c <HAL_ADC_MspInit+0xd4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d153      	bne.n	8000d72 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <HAL_ADC_MspInit+0xd8>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a2c      	ldr	r2, [pc, #176]	; (8000d80 <HAL_ADC_MspInit+0xd8>)
 8000cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <HAL_ADC_MspInit+0xd8>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <HAL_ADC_MspInit+0xd8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <HAL_ADC_MspInit+0xd8>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <HAL_ADC_MspInit+0xd8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	481d      	ldr	r0, [pc, #116]	; (8000d84 <HAL_ADC_MspInit+0xdc>)
 8000d0e:	f001 fecb 	bl	8002aa8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <HAL_ADC_MspInit+0xe0>)
 8000d14:	4a1d      	ldr	r2, [pc, #116]	; (8000d8c <HAL_ADC_MspInit+0xe4>)
 8000d16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <HAL_ADC_MspInit+0xe0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <HAL_ADC_MspInit+0xe0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_ADC_MspInit+0xe0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <HAL_ADC_MspInit+0xe0>)
 8000d2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_ADC_MspInit+0xe0>)
 8000d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <HAL_ADC_MspInit+0xe0>)
 8000d3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_ADC_MspInit+0xe0>)
 8000d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d48:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_ADC_MspInit+0xe0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_ADC_MspInit+0xe0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d56:	480c      	ldr	r0, [pc, #48]	; (8000d88 <HAL_ADC_MspInit+0xe0>)
 8000d58:	f001 f808 	bl	8001d6c <HAL_DMA_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000d62:	f7ff feab 	bl	8000abc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_ADC_MspInit+0xe0>)
 8000d6a:	639a      	str	r2, [r3, #56]	; 0x38
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <HAL_ADC_MspInit+0xe0>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40012000 	.word	0x40012000
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000
 8000d88:	20000244 	.word	0x20000244
 8000d8c:	40026410 	.word	0x40026410

08000d90 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08e      	sub	sp, #56	; 0x38
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a4e      	ldr	r2, [pc, #312]	; (8000ee8 <HAL_ETH_MspInit+0x158>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	f040 8096 	bne.w	8000ee0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000db4:	4b4d      	ldr	r3, [pc, #308]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	4a4c      	ldr	r2, [pc, #304]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000dba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc0:	4b4a      	ldr	r3, [pc, #296]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dc8:	623b      	str	r3, [r7, #32]
 8000dca:	6a3b      	ldr	r3, [r7, #32]
 8000dcc:	4b47      	ldr	r3, [pc, #284]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4a46      	ldr	r2, [pc, #280]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000dd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd8:	4b44      	ldr	r3, [pc, #272]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	4b41      	ldr	r3, [pc, #260]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4a40      	ldr	r2, [pc, #256]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000dea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dee:	6313      	str	r3, [r2, #48]	; 0x30
 8000df0:	4b3e      	ldr	r3, [pc, #248]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfc:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	4a3a      	ldr	r2, [pc, #232]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6313      	str	r3, [r2, #48]	; 0x30
 8000e08:	4b38      	ldr	r3, [pc, #224]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b35      	ldr	r3, [pc, #212]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	4a34      	ldr	r2, [pc, #208]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e20:	4b32      	ldr	r3, [pc, #200]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	4a2e      	ldr	r2, [pc, #184]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	6313      	str	r3, [r2, #48]	; 0x30
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e44:	4b29      	ldr	r3, [pc, #164]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	4a28      	ldr	r2, [pc, #160]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_ETH_MspInit+0x15c>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e5c:	2332      	movs	r3, #50	; 0x32
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e6c:	230b      	movs	r3, #11
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	481e      	ldr	r0, [pc, #120]	; (8000ef0 <HAL_ETH_MspInit+0x160>)
 8000e78:	f001 fe16 	bl	8002aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e7c:	2386      	movs	r3, #134	; 0x86
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e8c:	230b      	movs	r3, #11
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <HAL_ETH_MspInit+0x164>)
 8000e98:	f001 fe06 	bl	8002aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eae:	230b      	movs	r3, #11
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480f      	ldr	r0, [pc, #60]	; (8000ef8 <HAL_ETH_MspInit+0x168>)
 8000eba:	f001 fdf5 	bl	8002aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ebe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed0:	230b      	movs	r3, #11
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4808      	ldr	r0, [pc, #32]	; (8000efc <HAL_ETH_MspInit+0x16c>)
 8000edc:	f001 fde4 	bl	8002aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3738      	adds	r7, #56	; 0x38
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40028000 	.word	0x40028000
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40021800 	.word	0x40021800

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0ae      	sub	sp, #184	; 0xb8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2290      	movs	r2, #144	; 0x90
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f004 fe8d 	bl	8005c40 <memset>
  if(huart->Instance==USART3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <HAL_UART_MspInit+0xb4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d13c      	bne.n	8000faa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fe0e 	bl	8003b60 <HAL_RCCEx_PeriphCLKConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f4a:	f7ff fdb7 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a19      	ldr	r2, [pc, #100]	; (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_UART_MspInit+0xbc>)
 8000fa6:	f001 fd7f 	bl	8002aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	37b8      	adds	r7, #184	; 0xb8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40004800 	.word	0x40004800
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020c00 	.word	0x40020c00

08000fc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0ae      	sub	sp, #184	; 0xb8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2290      	movs	r2, #144	; 0x90
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f004 fe2d 	bl	8005c40 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fee:	d159      	bne.n	80010a4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ff0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ff4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fdad 	bl	8003b60 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800100c:	f7ff fd56 	bl	8000abc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a25      	ldr	r2, [pc, #148]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <HAL_PCD_MspInit+0xec>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001028:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800102c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001042:	230a      	movs	r3, #10
 8001044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800104c:	4619      	mov	r1, r3
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <HAL_PCD_MspInit+0xf0>)
 8001050:	f001 fd2a 	bl	8002aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800106c:	4619      	mov	r1, r3
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <HAL_PCD_MspInit+0xf0>)
 8001070:	f001 fd1a 	bl	8002aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_PCD_MspInit+0xec>)
 800107a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107e:	6353      	str	r3, [r2, #52]	; 0x34
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_PCD_MspInit+0xec>)
 800108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_PCD_MspInit+0xec>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001096:	6453      	str	r3, [r2, #68]	; 0x44
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_PCD_MspInit+0xec>)
 800109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	37b8      	adds	r7, #184	; 0xb8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001100:	f000 f8ba 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <DMA2_Stream0_IRQHandler+0x10>)
 800110e:	f000 ff3b 	bl	8001f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000244 	.word	0x20000244

0800111c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <_sbrk+0x5c>)
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <_sbrk+0x60>)
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <_sbrk+0x64>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <_sbrk+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	d207      	bcs.n	800115c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800114c:	f004 fdd6 	bl	8005cfc <__errno>
 8001150:	4603      	mov	r3, r0
 8001152:	220c      	movs	r2, #12
 8001154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	e009      	b.n	8001170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <_sbrk+0x64>)
 800116c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20080000 	.word	0x20080000
 800117c:	00000400 	.word	0x00000400
 8001180:	20000904 	.word	0x20000904
 8001184:	20000a58 	.word	0x20000a58

08001188 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <SystemInit+0x20>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <SystemInit+0x20>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011b2:	490e      	ldr	r1, [pc, #56]	; (80011ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b4:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c8:	4c0b      	ldr	r4, [pc, #44]	; (80011f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011d6:	f7ff ffd7 	bl	8001188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011da:	f004 fd95 	bl	8005d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011de:	f7ff f9fd 	bl	80005dc <main>
  bx  lr    
 80011e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011f0:	0800723c 	.word	0x0800723c
  ldr r2, =_sbss
 80011f4:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 80011f8:	20000a58 	.word	0x20000a58

080011fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC_IRQHandler>

080011fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001202:	2003      	movs	r0, #3
 8001204:	f000 fd70 	bl	8001ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001208:	2000      	movs	r0, #0
 800120a:	f000 f805 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120e:	f7ff fd27 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x54>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x58>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fd8b 	bl	8001d52 <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f000 fd53 	bl	8001cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_InitTick+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000000 	.word	0x20000000
 8001270:	20000008 	.word	0x20000008
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008
 800129c:	20000908 	.word	0x20000908

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000908 	.word	0x20000908

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008

08001300 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e031      	b.n	800137a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fcc2 	bl	8000ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	d116      	bne.n	800136c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_ADC_Init+0x84>)
 8001344:	4013      	ands	r3, r2
 8001346:	f043 0202 	orr.w	r2, r3, #2
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fa7e 	bl	8001850 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f023 0303 	bic.w	r3, r3, #3
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
 800136a:	e001      	b.n	8001370 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	ffffeefd 	.word	0xffffeefd

08001388 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Start_DMA+0x1e>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e0d4      	b.n	8001550 <HAL_ADC_Start_DMA+0x1c8>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d018      	beq.n	80013ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80013cc:	4b62      	ldr	r3, [pc, #392]	; (8001558 <HAL_ADC_Start_DMA+0x1d0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a62      	ldr	r2, [pc, #392]	; (800155c <HAL_ADC_Start_DMA+0x1d4>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0c9a      	lsrs	r2, r3, #18
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80013e0:	e002      	b.n	80013e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f9      	bne.n	80013e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	f040 809c 	bne.w	8001536 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001402:	4b57      	ldr	r3, [pc, #348]	; (8001560 <HAL_ADC_Start_DMA+0x1d8>)
 8001404:	4013      	ands	r3, r2
 8001406:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001418:	2b00      	cmp	r3, #0
 800141a:	d007      	beq.n	800142c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001424:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001438:	d106      	bne.n	8001448 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f023 0206 	bic.w	r2, r3, #6
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	645a      	str	r2, [r3, #68]	; 0x44
 8001446:	e002      	b.n	800144e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145a:	4a42      	ldr	r2, [pc, #264]	; (8001564 <HAL_ADC_Start_DMA+0x1dc>)
 800145c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	4a41      	ldr	r2, [pc, #260]	; (8001568 <HAL_ADC_Start_DMA+0x1e0>)
 8001464:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146a:	4a40      	ldr	r2, [pc, #256]	; (800156c <HAL_ADC_Start_DMA+0x1e4>)
 800146c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001476:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001486:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001496:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	334c      	adds	r3, #76	; 0x4c
 80014a2:	4619      	mov	r1, r3
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f000 fd0e 	bl	8001ec8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80014ac:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_ADC_Start_DMA+0x1e8>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 031f 	and.w	r3, r3, #31
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10f      	bne.n	80014d8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d143      	bne.n	800154e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	e03a      	b.n	800154e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a25      	ldr	r2, [pc, #148]	; (8001574 <HAL_ADC_Start_DMA+0x1ec>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d10e      	bne.n	8001500 <HAL_ADC_Start_DMA+0x178>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d107      	bne.n	8001500 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014fe:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_ADC_Start_DMA+0x1e8>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b00      	cmp	r3, #0
 800150a:	d120      	bne.n	800154e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_ADC_Start_DMA+0x1f0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d11b      	bne.n	800154e <HAL_ADC_Start_DMA+0x1c6>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d114      	bne.n	800154e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	e00b      	b.n	800154e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f043 0210 	orr.w	r2, r3, #16
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f043 0201 	orr.w	r2, r3, #1
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000000 	.word	0x20000000
 800155c:	431bde83 	.word	0x431bde83
 8001560:	fffff8fe 	.word	0xfffff8fe
 8001564:	08001a45 	.word	0x08001a45
 8001568:	08001aff 	.word	0x08001aff
 800156c:	08001b1b 	.word	0x08001b1b
 8001570:	40012300 	.word	0x40012300
 8001574:	40012000 	.word	0x40012000
 8001578:	40012200 	.word	0x40012200

0800157c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x1c>
 80015bc:	2302      	movs	r3, #2
 80015be:	e136      	b.n	800182e <HAL_ADC_ConfigChannel+0x28a>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	d93a      	bls.n	8001646 <HAL_ADC_ConfigChannel+0xa2>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015d8:	d035      	beq.n	8001646 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68d9      	ldr	r1, [r3, #12]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	3b1e      	subs	r3, #30
 80015f0:	2207      	movs	r2, #7
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	400a      	ands	r2, r1
 80015fe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a8d      	ldr	r2, [pc, #564]	; (800183c <HAL_ADC_ConfigChannel+0x298>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10a      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68d9      	ldr	r1, [r3, #12]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	061a      	lsls	r2, r3, #24
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800161e:	e035      	b.n	800168c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68d9      	ldr	r1, [r3, #12]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	4603      	mov	r3, r0
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4403      	add	r3, r0
 8001638:	3b1e      	subs	r3, #30
 800163a:	409a      	lsls	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001644:	e022      	b.n	800168c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6919      	ldr	r1, [r3, #16]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	2207      	movs	r2, #7
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43da      	mvns	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	400a      	ands	r2, r1
 8001668:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6919      	ldr	r1, [r3, #16]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	4603      	mov	r3, r0
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4403      	add	r3, r0
 8001682:	409a      	lsls	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b06      	cmp	r3, #6
 8001692:	d824      	bhi.n	80016de <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	3b05      	subs	r3, #5
 80016a6:	221f      	movs	r2, #31
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43da      	mvns	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	400a      	ands	r2, r1
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	3b05      	subs	r3, #5
 80016d0:	fa00 f203 	lsl.w	r2, r0, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	635a      	str	r2, [r3, #52]	; 0x34
 80016dc:	e04c      	b.n	8001778 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d824      	bhi.n	8001730 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b23      	subs	r3, #35	; 0x23
 80016f8:	221f      	movs	r2, #31
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	400a      	ands	r2, r1
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	3b23      	subs	r3, #35	; 0x23
 8001722:	fa00 f203 	lsl.w	r2, r0, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	631a      	str	r2, [r3, #48]	; 0x30
 800172e:	e023      	b.n	8001778 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b41      	subs	r3, #65	; 0x41
 8001742:	221f      	movs	r2, #31
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43da      	mvns	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	400a      	ands	r2, r1
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	b29b      	uxth	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	3b41      	subs	r3, #65	; 0x41
 800176c:	fa00 f203 	lsl.w	r2, r0, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a30      	ldr	r2, [pc, #192]	; (8001840 <HAL_ADC_ConfigChannel+0x29c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10a      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x1f4>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800178a:	d105      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800178c:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_ADC_ConfigChannel+0x2a0>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a2c      	ldr	r2, [pc, #176]	; (8001844 <HAL_ADC_ConfigChannel+0x2a0>)
 8001792:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001796:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a28      	ldr	r2, [pc, #160]	; (8001840 <HAL_ADC_ConfigChannel+0x29c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d10f      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x21e>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b12      	cmp	r3, #18
 80017a8:	d10b      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <HAL_ADC_ConfigChannel+0x2a0>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4a25      	ldr	r2, [pc, #148]	; (8001844 <HAL_ADC_ConfigChannel+0x2a0>)
 80017b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017b4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <HAL_ADC_ConfigChannel+0x2a0>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a22      	ldr	r2, [pc, #136]	; (8001844 <HAL_ADC_ConfigChannel+0x2a0>)
 80017bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <HAL_ADC_ConfigChannel+0x29c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d12b      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x280>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a1a      	ldr	r2, [pc, #104]	; (800183c <HAL_ADC_ConfigChannel+0x298>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d003      	beq.n	80017de <HAL_ADC_ConfigChannel+0x23a>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b11      	cmp	r3, #17
 80017dc:	d122      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_ADC_ConfigChannel+0x2a0>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4a18      	ldr	r2, [pc, #96]	; (8001844 <HAL_ADC_ConfigChannel+0x2a0>)
 80017e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80017e8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <HAL_ADC_ConfigChannel+0x2a0>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a15      	ldr	r2, [pc, #84]	; (8001844 <HAL_ADC_ConfigChannel+0x2a0>)
 80017f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017f4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_ADC_ConfigChannel+0x298>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d111      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_ADC_ConfigChannel+0x2a4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a11      	ldr	r2, [pc, #68]	; (800184c <HAL_ADC_ConfigChannel+0x2a8>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0c9a      	lsrs	r2, r3, #18
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001816:	e002      	b.n	800181e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3b01      	subs	r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f9      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	10000012 	.word	0x10000012
 8001840:	40012000 	.word	0x40012000
 8001844:	40012300 	.word	0x40012300
 8001848:	20000000 	.word	0x20000000
 800184c:	431bde83 	.word	0x431bde83

08001850 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001858:	4b78      	ldr	r3, [pc, #480]	; (8001a3c <ADC_Init+0x1ec>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a77      	ldr	r2, [pc, #476]	; (8001a3c <ADC_Init+0x1ec>)
 800185e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001862:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001864:	4b75      	ldr	r3, [pc, #468]	; (8001a3c <ADC_Init+0x1ec>)
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4973      	ldr	r1, [pc, #460]	; (8001a3c <ADC_Init+0x1ec>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001880:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6859      	ldr	r1, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	021a      	lsls	r2, r3, #8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6899      	ldr	r1, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	4a58      	ldr	r2, [pc, #352]	; (8001a40 <ADC_Init+0x1f0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d022      	beq.n	800192a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6899      	ldr	r1, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001914:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	e00f      	b.n	800194a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001938:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001948:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0202 	bic.w	r2, r2, #2
 8001958:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6899      	ldr	r1, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	005a      	lsls	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01b      	beq.n	80019b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001986:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001996:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6859      	ldr	r1, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	3b01      	subs	r3, #1
 80019a4:	035a      	lsls	r2, r3, #13
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	e007      	b.n	80019c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	3b01      	subs	r3, #1
 80019dc:	051a      	lsls	r2, r3, #20
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6899      	ldr	r1, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a02:	025a      	lsls	r2, r3, #9
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6899      	ldr	r1, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	029a      	lsls	r2, r3, #10
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40012300 	.word	0x40012300
 8001a40:	0f000001 	.word	0x0f000001

08001a44 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a50:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d13c      	bne.n	8001ad8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d12b      	bne.n	8001ad0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d127      	bne.n	8001ad0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d119      	bne.n	8001ad0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0220 	bic.w	r2, r2, #32
 8001aaa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d105      	bne.n	8001ad0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f043 0201 	orr.w	r2, r3, #1
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f7fe ffe9 	bl	8000aa8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ad6:	e00e      	b.n	8001af6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f7ff fd53 	bl	8001590 <HAL_ADC_ErrorCallback>
}
 8001aea:	e004      	b.n	8001af6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	4798      	blx	r3
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff fd35 	bl	800157c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2240      	movs	r2, #64	; 0x40
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f043 0204 	orr.w	r2, r3, #4
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff fd28 	bl	8001590 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <__NVIC_SetPriorityGrouping+0x40>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b76:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <__NVIC_SetPriorityGrouping+0x40>)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	60d3      	str	r3, [r2, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00
 8001b8c:	05fa0000 	.word	0x05fa0000

08001b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db0b      	blt.n	8001bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	f003 021f 	and.w	r2, r3, #31
 8001bc4:	4907      	ldr	r1, [pc, #28]	; (8001be4 <__NVIC_EnableIRQ+0x38>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2001      	movs	r0, #1
 8001bce:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	; (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	; (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf28      	it	cs
 8001c5a:	2304      	movcs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b03      	subs	r3, #3
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	; 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb4:	d301      	bcc.n	8001cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00f      	b.n	8001cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <SysTick_Config+0x40>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f7ff ff8e 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <SysTick_Config+0x40>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd2:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <SysTick_Config+0x40>)
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	e000e010 	.word	0xe000e010

08001ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff29 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d10:	f7ff ff3e 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	6978      	ldr	r0, [r7, #20]
 8001d1c:	f7ff ff8e 	bl	8001c3c <NVIC_EncodePriority>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff5d 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff31 	bl	8001bac <__NVIC_EnableIRQ>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffa2 	bl	8001ca4 <SysTick_Config>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff fa92 	bl	80012a0 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e099      	b.n	8001ebc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da8:	e00f      	b.n	8001dca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001daa:	f7ff fa79 	bl	80012a0 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d908      	bls.n	8001dca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e078      	b.n	8001ebc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1e8      	bne.n	8001daa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_DMA_Init+0x158>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d107      	bne.n	8001e34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f023 0307 	bic.w	r3, r3, #7
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d117      	bne.n	8001e8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00e      	beq.n	8001e8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fa77 	bl	8002364 <DMA_CheckFifoParam>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2240      	movs	r2, #64	; 0x40
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e016      	b.n	8001ebc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fa2e 	bl	80022f8 <DMA_CalcBaseAndBitshift>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	223f      	movs	r2, #63	; 0x3f
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	e010803f 	.word	0xe010803f

08001ec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_DMA_Start_IT+0x26>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e048      	b.n	8001f80 <HAL_DMA_Start_IT+0xb8>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d137      	bne.n	8001f72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2202      	movs	r2, #2
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f9c0 	bl	800229c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	223f      	movs	r2, #63	; 0x3f
 8001f22:	409a      	lsls	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0216 	orr.w	r2, r2, #22
 8001f36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f46:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0208 	orr.w	r2, r2, #8
 8001f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e005      	b.n	8001f7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001f94:	4b8e      	ldr	r3, [pc, #568]	; (80021d0 <HAL_DMA_IRQHandler+0x248>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a8e      	ldr	r2, [pc, #568]	; (80021d4 <HAL_DMA_IRQHandler+0x24c>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	0a9b      	lsrs	r3, r3, #10
 8001fa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01a      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d013      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0204 	bic.w	r2, r2, #4
 8001fda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d012      	beq.n	800202a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00b      	beq.n	800202a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	2201      	movs	r2, #1
 8002018:	409a      	lsls	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f043 0202 	orr.w	r2, r3, #2
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202e:	2204      	movs	r2, #4
 8002030:	409a      	lsls	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d012      	beq.n	8002060 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00b      	beq.n	8002060 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	2204      	movs	r2, #4
 800204e:	409a      	lsls	r2, r3
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	f043 0204 	orr.w	r2, r3, #4
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002064:	2210      	movs	r2, #16
 8002066:	409a      	lsls	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d043      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d03c      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	2210      	movs	r2, #16
 8002084:	409a      	lsls	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d018      	beq.n	80020ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d108      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d024      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
 80020b6:	e01f      	b.n	80020f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01b      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
 80020c8:	e016      	b.n	80020f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0208 	bic.w	r2, r2, #8
 80020e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fc:	2220      	movs	r2, #32
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 808f 	beq.w	8002228 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 8087 	beq.w	8002228 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	2220      	movs	r2, #32
 8002120:	409a      	lsls	r2, r3
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b05      	cmp	r3, #5
 8002130:	d136      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0216 	bic.w	r2, r2, #22
 8002140:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002150:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d103      	bne.n	8002162 <HAL_DMA_IRQHandler+0x1da>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0208 	bic.w	r2, r2, #8
 8002170:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	223f      	movs	r2, #63	; 0x3f
 8002178:	409a      	lsls	r2, r3
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002192:	2b00      	cmp	r3, #0
 8002194:	d07e      	beq.n	8002294 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
        }
        return;
 800219e:	e079      	b.n	8002294 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d01d      	beq.n	80021ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10d      	bne.n	80021d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d031      	beq.n	8002228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
 80021cc:	e02c      	b.n	8002228 <HAL_DMA_IRQHandler+0x2a0>
 80021ce:	bf00      	nop
 80021d0:	20000000 	.word	0x20000000
 80021d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d023      	beq.n	8002228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4798      	blx	r3
 80021e8:	e01e      	b.n	8002228 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10f      	bne.n	8002218 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0210 	bic.w	r2, r2, #16
 8002206:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	2b00      	cmp	r3, #0
 800222e:	d032      	beq.n	8002296 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d022      	beq.n	8002282 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2205      	movs	r2, #5
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	3301      	adds	r3, #1
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	429a      	cmp	r2, r3
 800225e:	d307      	bcc.n	8002270 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f2      	bne.n	8002254 <HAL_DMA_IRQHandler+0x2cc>
 800226e:	e000      	b.n	8002272 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002270:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
 8002292:	e000      	b.n	8002296 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002294:	bf00      	nop
    }
  }
}
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b40      	cmp	r3, #64	; 0x40
 80022c8:	d108      	bne.n	80022dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022da:	e007      	b.n	80022ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	60da      	str	r2, [r3, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3b10      	subs	r3, #16
 8002308:	4a13      	ldr	r2, [pc, #76]	; (8002358 <DMA_CalcBaseAndBitshift+0x60>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <DMA_CalcBaseAndBitshift+0x64>)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d908      	bls.n	8002338 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <DMA_CalcBaseAndBitshift+0x68>)
 800232e:	4013      	ands	r3, r2
 8002330:	1d1a      	adds	r2, r3, #4
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	659a      	str	r2, [r3, #88]	; 0x58
 8002336:	e006      	b.n	8002346 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <DMA_CalcBaseAndBitshift+0x68>)
 8002340:	4013      	ands	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	aaaaaaab 	.word	0xaaaaaaab
 800235c:	080070d4 	.word	0x080070d4
 8002360:	fffffc00 	.word	0xfffffc00

08002364 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d11f      	bne.n	80023be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d856      	bhi.n	8002432 <DMA_CheckFifoParam+0xce>
 8002384:	a201      	add	r2, pc, #4	; (adr r2, 800238c <DMA_CheckFifoParam+0x28>)
 8002386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	0800239d 	.word	0x0800239d
 8002390:	080023af 	.word	0x080023af
 8002394:	0800239d 	.word	0x0800239d
 8002398:	08002433 	.word	0x08002433
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d046      	beq.n	8002436 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ac:	e043      	b.n	8002436 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023b6:	d140      	bne.n	800243a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023bc:	e03d      	b.n	800243a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c6:	d121      	bne.n	800240c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d837      	bhi.n	800243e <DMA_CheckFifoParam+0xda>
 80023ce:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <DMA_CheckFifoParam+0x70>)
 80023d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d4:	080023e5 	.word	0x080023e5
 80023d8:	080023eb 	.word	0x080023eb
 80023dc:	080023e5 	.word	0x080023e5
 80023e0:	080023fd 	.word	0x080023fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      break;
 80023e8:	e030      	b.n	800244c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d025      	beq.n	8002442 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023fa:	e022      	b.n	8002442 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002404:	d11f      	bne.n	8002446 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800240a:	e01c      	b.n	8002446 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d903      	bls.n	800241a <DMA_CheckFifoParam+0xb6>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d003      	beq.n	8002420 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002418:	e018      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
      break;
 800241e:	e015      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00e      	beq.n	800244a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
      break;
 8002430:	e00b      	b.n	800244a <DMA_CheckFifoParam+0xe6>
      break;
 8002432:	bf00      	nop
 8002434:	e00a      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
 8002438:	e008      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 800243a:	bf00      	nop
 800243c:	e006      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 800243e:	bf00      	nop
 8002440:	e004      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
 8002444:	e002      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;   
 8002446:	bf00      	nop
 8002448:	e000      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
    }
  } 
  
  return status; 
 800244c:	7bfb      	ldrb	r3, [r7, #15]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop

0800245c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e06a      	b.n	8002544 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002474:	2b00      	cmp	r3, #0
 8002476:	d106      	bne.n	8002486 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2223      	movs	r2, #35	; 0x23
 800247c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7fe fc85 	bl	8000d90 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002486:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_ETH_Init+0xf0>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a30      	ldr	r2, [pc, #192]	; (800254c <HAL_ETH_Init+0xf0>)
 800248c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b2e      	ldr	r3, [pc, #184]	; (800254c <HAL_ETH_Init+0xf0>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800249e:	4b2c      	ldr	r3, [pc, #176]	; (8002550 <HAL_ETH_Init+0xf4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4a2b      	ldr	r2, [pc, #172]	; (8002550 <HAL_ETH_Init+0xf4>)
 80024a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024a8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024aa:	4b29      	ldr	r3, [pc, #164]	; (8002550 <HAL_ETH_Init+0xf4>)
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	4927      	ldr	r1, [pc, #156]	; (8002550 <HAL_ETH_Init+0xf4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024b8:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_ETH_Init+0xf4>)
 80024ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024d4:	f7fe fee4 	bl	80012a0 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024da:	e011      	b.n	8002500 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80024dc:	f7fe fee0 	bl	80012a0 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024ea:	d909      	bls.n	8002500 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2204      	movs	r2, #4
 80024f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	22e0      	movs	r2, #224	; 0xe0
 80024f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e021      	b.n	8002544 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1e4      	bne.n	80024dc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f958 	bl	80027c8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f9ff 	bl	800291c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fa55 	bl	80029ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	461a      	mov	r2, r3
 800252a:	2100      	movs	r1, #0
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f9bd 	bl	80028ac <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2210      	movs	r2, #16
 800253e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	40013800 	.word	0x40013800

08002554 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4b51      	ldr	r3, [pc, #324]	; (80026b0 <ETH_SetMACConfig+0x15c>)
 800256a:	4013      	ands	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	7c1b      	ldrb	r3, [r3, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d102      	bne.n	800257c <ETH_SetMACConfig+0x28>
 8002576:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800257a:	e000      	b.n	800257e <ETH_SetMACConfig+0x2a>
 800257c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	7c5b      	ldrb	r3, [r3, #17]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <ETH_SetMACConfig+0x38>
 8002586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800258a:	e000      	b.n	800258e <ETH_SetMACConfig+0x3a>
 800258c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800258e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002594:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	7fdb      	ldrb	r3, [r3, #31]
 800259a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800259c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	7f92      	ldrb	r2, [r2, #30]
 80025a8:	2a00      	cmp	r2, #0
 80025aa:	d102      	bne.n	80025b2 <ETH_SetMACConfig+0x5e>
 80025ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025b0:	e000      	b.n	80025b4 <ETH_SetMACConfig+0x60>
 80025b2:	2200      	movs	r2, #0
                        macconf->Speed |
 80025b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	7f1b      	ldrb	r3, [r3, #28]
 80025ba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025bc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	791b      	ldrb	r3, [r3, #4]
 80025c8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80025ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	f892 2020 	ldrb.w	r2, [r2, #32]
 80025d2:	2a00      	cmp	r2, #0
 80025d4:	d102      	bne.n	80025dc <ETH_SetMACConfig+0x88>
 80025d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025da:	e000      	b.n	80025de <ETH_SetMACConfig+0x8a>
 80025dc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	7bdb      	ldrb	r3, [r3, #15]
 80025e4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025e6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025f4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025f6:	4313      	orrs	r3, r2
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800260e:	2001      	movs	r0, #1
 8002610:	f7fe fe52 	bl	80012b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	f64f 7341 	movw	r3, #65345	; 0xff41
 800262a:	4013      	ands	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002632:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800263a:	2a00      	cmp	r2, #0
 800263c:	d101      	bne.n	8002642 <ETH_SetMACConfig+0xee>
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	e000      	b.n	8002644 <ETH_SetMACConfig+0xf0>
 8002642:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002644:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800264a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002652:	2a01      	cmp	r2, #1
 8002654:	d101      	bne.n	800265a <ETH_SetMACConfig+0x106>
 8002656:	2208      	movs	r2, #8
 8002658:	e000      	b.n	800265c <ETH_SetMACConfig+0x108>
 800265a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800265c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002664:	2a01      	cmp	r2, #1
 8002666:	d101      	bne.n	800266c <ETH_SetMACConfig+0x118>
 8002668:	2204      	movs	r2, #4
 800266a:	e000      	b.n	800266e <ETH_SetMACConfig+0x11a>
 800266c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800266e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002676:	2a01      	cmp	r2, #1
 8002678:	d101      	bne.n	800267e <ETH_SetMACConfig+0x12a>
 800267a:	2202      	movs	r2, #2
 800267c:	e000      	b.n	8002680 <ETH_SetMACConfig+0x12c>
 800267e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002680:	4313      	orrs	r3, r2
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002698:	2001      	movs	r0, #1
 800269a:	f7fe fe0d 	bl	80012b8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	ff20810f 	.word	0xff20810f

080026b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <ETH_SetDMAConfig+0x110>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	7b1b      	ldrb	r3, [r3, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <ETH_SetDMAConfig+0x2c>
 80026da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026de:	e000      	b.n	80026e2 <ETH_SetDMAConfig+0x2e>
 80026e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	7b5b      	ldrb	r3, [r3, #13]
 80026e6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026e8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	7f52      	ldrb	r2, [r2, #29]
 80026ee:	2a00      	cmp	r2, #0
 80026f0:	d102      	bne.n	80026f8 <ETH_SetDMAConfig+0x44>
 80026f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026f6:	e000      	b.n	80026fa <ETH_SetDMAConfig+0x46>
 80026f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	7b9b      	ldrb	r3, [r3, #14]
 8002700:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002702:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002708:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	7f1b      	ldrb	r3, [r3, #28]
 800270e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002710:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	7f9b      	ldrb	r3, [r3, #30]
 8002716:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002718:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800271e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002726:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002728:	4313      	orrs	r3, r2
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002738:	461a      	mov	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800274a:	2001      	movs	r0, #1
 800274c:	f7fe fdb4 	bl	80012b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002758:	461a      	mov	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	791b      	ldrb	r3, [r3, #4]
 8002762:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002768:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800276e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002774:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800277c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800277e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002786:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800278c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002796:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800279a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a8:	2001      	movs	r0, #1
 80027aa:	f7fe fd85 	bl	80012b8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	f8de3f23 	.word	0xf8de3f23

080027c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0a6      	sub	sp, #152	; 0x98
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80027dc:	2300      	movs	r3, #0
 80027de:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002804:	2300      	movs	r3, #0
 8002806:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002808:	2300      	movs	r3, #0
 800280a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800280e:	2300      	movs	r3, #0
 8002810:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002812:	2300      	movs	r3, #0
 8002814:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800282a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800282e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002830:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002834:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800283c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002840:	4619      	mov	r1, r3
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff fe86 	bl	8002554 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002848:	2301      	movs	r3, #1
 800284a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800284c:	2301      	movs	r3, #1
 800284e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002850:	2301      	movs	r3, #1
 8002852:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002856:	2301      	movs	r3, #1
 8002858:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800285e:	2300      	movs	r3, #0
 8002860:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800286a:	2300      	movs	r3, #0
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800286e:	2301      	movs	r3, #1
 8002870:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002874:	2301      	movs	r3, #1
 8002876:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800287c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800287e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002882:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002888:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002894:	2300      	movs	r3, #0
 8002896:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002898:	f107 0308 	add.w	r3, r7, #8
 800289c:	4619      	mov	r1, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ff08 	bl	80026b4 <ETH_SetDMAConfig>
}
 80028a4:	bf00      	nop
 80028a6:	3798      	adds	r7, #152	; 0x98
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3305      	adds	r3, #5
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	3204      	adds	r2, #4
 80028c4:	7812      	ldrb	r2, [r2, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <ETH_MACAddressConfig+0x68>)
 80028ce:	4413      	add	r3, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3303      	adds	r3, #3
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	061a      	lsls	r2, r3, #24
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3302      	adds	r3, #2
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	041b      	lsls	r3, r3, #16
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3301      	adds	r3, #1
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	4313      	orrs	r3, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <ETH_MACAddressConfig+0x6c>)
 80028fe:	4413      	add	r3, r2
 8002900:	461a      	mov	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	6013      	str	r3, [r2, #0]
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40028040 	.word	0x40028040
 8002918:	40028044 	.word	0x40028044

0800291c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	e03e      	b.n	80029a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68d9      	ldr	r1, [r3, #12]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2200      	movs	r2, #0
 8002946:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2200      	movs	r2, #0
 8002952:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	3206      	adds	r2, #6
 800295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d80c      	bhi.n	800298c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68d9      	ldr	r1, [r3, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	461a      	mov	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	e004      	b.n	8002996 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	461a      	mov	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3301      	adds	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d9bd      	bls.n	800292a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c0:	611a      	str	r2, [r3, #16]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e046      	b.n	8002a6a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6919      	ldr	r1, [r3, #16]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2200      	movs	r2, #0
 80029f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a18:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002a20:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	3212      	adds	r2, #18
 8002a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d80c      	bhi.n	8002a5a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6919      	ldr	r1, [r3, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	461a      	mov	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	60da      	str	r2, [r3, #12]
 8002a58:	e004      	b.n	8002a64 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3301      	adds	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d9b5      	bls.n	80029dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a9a:	60da      	str	r2, [r3, #12]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e175      	b.n	8002db4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ac8:	2201      	movs	r2, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	f040 8164 	bne.w	8002dae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d005      	beq.n	8002afe <HAL_GPIO_Init+0x56>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d130      	bne.n	8002b60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	2203      	movs	r2, #3
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b34:	2201      	movs	r2, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 0201 	and.w	r2, r3, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d017      	beq.n	8002b9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d123      	bne.n	8002bf0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	08da      	lsrs	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3208      	adds	r2, #8
 8002bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	220f      	movs	r2, #15
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	08da      	lsrs	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3208      	adds	r2, #8
 8002bea:	69b9      	ldr	r1, [r7, #24]
 8002bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80be 	beq.w	8002dae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c32:	4b66      	ldr	r3, [pc, #408]	; (8002dcc <HAL_GPIO_Init+0x324>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	4a65      	ldr	r2, [pc, #404]	; (8002dcc <HAL_GPIO_Init+0x324>)
 8002c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3e:	4b63      	ldr	r3, [pc, #396]	; (8002dcc <HAL_GPIO_Init+0x324>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c4a:	4a61      	ldr	r2, [pc, #388]	; (8002dd0 <HAL_GPIO_Init+0x328>)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a58      	ldr	r2, [pc, #352]	; (8002dd4 <HAL_GPIO_Init+0x32c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d037      	beq.n	8002ce6 <HAL_GPIO_Init+0x23e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a57      	ldr	r2, [pc, #348]	; (8002dd8 <HAL_GPIO_Init+0x330>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d031      	beq.n	8002ce2 <HAL_GPIO_Init+0x23a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a56      	ldr	r2, [pc, #344]	; (8002ddc <HAL_GPIO_Init+0x334>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d02b      	beq.n	8002cde <HAL_GPIO_Init+0x236>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a55      	ldr	r2, [pc, #340]	; (8002de0 <HAL_GPIO_Init+0x338>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d025      	beq.n	8002cda <HAL_GPIO_Init+0x232>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a54      	ldr	r2, [pc, #336]	; (8002de4 <HAL_GPIO_Init+0x33c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01f      	beq.n	8002cd6 <HAL_GPIO_Init+0x22e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a53      	ldr	r2, [pc, #332]	; (8002de8 <HAL_GPIO_Init+0x340>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d019      	beq.n	8002cd2 <HAL_GPIO_Init+0x22a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_GPIO_Init+0x344>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_GPIO_Init+0x226>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a51      	ldr	r2, [pc, #324]	; (8002df0 <HAL_GPIO_Init+0x348>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00d      	beq.n	8002cca <HAL_GPIO_Init+0x222>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a50      	ldr	r2, [pc, #320]	; (8002df4 <HAL_GPIO_Init+0x34c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d007      	beq.n	8002cc6 <HAL_GPIO_Init+0x21e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4f      	ldr	r2, [pc, #316]	; (8002df8 <HAL_GPIO_Init+0x350>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_GPIO_Init+0x21a>
 8002cbe:	2309      	movs	r3, #9
 8002cc0:	e012      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cc2:	230a      	movs	r3, #10
 8002cc4:	e010      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	e00e      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cca:	2307      	movs	r3, #7
 8002ccc:	e00c      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cce:	2306      	movs	r3, #6
 8002cd0:	e00a      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	e008      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e004      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_GPIO_Init+0x240>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f002 0203 	and.w	r2, r2, #3
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	4093      	lsls	r3, r2
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cf8:	4935      	ldr	r1, [pc, #212]	; (8002dd0 <HAL_GPIO_Init+0x328>)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2a:	4a34      	ldr	r2, [pc, #208]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d30:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d54:	4a29      	ldr	r2, [pc, #164]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d5a:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d7e:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d84:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002da8:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <HAL_GPIO_Init+0x354>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3301      	adds	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	f67f ae86 	bls.w	8002ac8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40013800 	.word	0x40013800
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	40020c00 	.word	0x40020c00
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40021400 	.word	0x40021400
 8002dec:	40021800 	.word	0x40021800
 8002df0:	40021c00 	.word	0x40021c00
 8002df4:	40022000 	.word	0x40022000
 8002df8:	40022400 	.word	0x40022400
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e10:	787b      	ldrb	r3, [r7, #1]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e16:	887a      	ldrh	r2, [r7, #2]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e1c:	e003      	b.n	8002e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	041a      	lsls	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	619a      	str	r2, [r3, #24]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b085      	sub	sp, #20
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e44:	887a      	ldrh	r2, [r7, #2]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	041a      	lsls	r2, r3, #16
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	887b      	ldrh	r3, [r7, #2]
 8002e52:	400b      	ands	r3, r1
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	619a      	str	r2, [r3, #24]
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e68:	b08f      	sub	sp, #60	; 0x3c
 8002e6a:	af0a      	add	r7, sp, #40	; 0x28
 8002e6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e116      	b.n	80030a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe f894 	bl	8000fc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 f882 	bl	8004fc0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	687e      	ldr	r6, [r7, #4]
 8002ec4:	466d      	mov	r5, sp
 8002ec6:	f106 0410 	add.w	r4, r6, #16
 8002eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ed2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ed6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eda:	1d33      	adds	r3, r6, #4
 8002edc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ede:	6838      	ldr	r0, [r7, #0]
 8002ee0:	f002 f816 	bl	8004f10 <USB_CoreInit>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0d7      	b.n	80030a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f002 f870 	bl	8004fe2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	e04a      	b.n	8002f9e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	333d      	adds	r3, #61	; 0x3d
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f1c:	7bfa      	ldrb	r2, [r7, #15]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	333c      	adds	r3, #60	; 0x3c
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f30:	7bfa      	ldrb	r2, [r7, #15]
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	b298      	uxth	r0, r3
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	3344      	adds	r3, #68	; 0x44
 8002f44:	4602      	mov	r2, r0
 8002f46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	3340      	adds	r3, #64	; 0x40
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3348      	adds	r3, #72	; 0x48
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	334c      	adds	r3, #76	; 0x4c
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	3354      	adds	r3, #84	; 0x54
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3af      	bcc.n	8002f08 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73fb      	strb	r3, [r7, #15]
 8002fac:	e044      	b.n	8003038 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	3301      	adds	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	429a      	cmp	r2, r3
 8003040:	d3b5      	bcc.n	8002fae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	687e      	ldr	r6, [r7, #4]
 800304a:	466d      	mov	r5, sp
 800304c:	f106 0410 	add.w	r4, r6, #16
 8003050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003058:	e894 0003 	ldmia.w	r4, {r0, r1}
 800305c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003060:	1d33      	adds	r3, r6, #4
 8003062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003064:	6838      	ldr	r0, [r7, #0]
 8003066:	f002 f809 	bl	800507c <USB_DevInit>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e014      	b.n	80030a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2b01      	cmp	r3, #1
 8003092:	d102      	bne.n	800309a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f80b 	bl	80030b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f002 f9c7 	bl	8005432 <USB_DevDisconnect>

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	10000003 	.word	0x10000003

080030f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40007000 	.word	0x40007000

08003118 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	4a22      	ldr	r2, [pc, #136]	; (80031b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312c:	6413      	str	r3, [r2, #64]	; 0x40
 800312e:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003146:	f7fe f8ab 	bl	80012a0 <HAL_GetTick>
 800314a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800314c:	e009      	b.n	8003162 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800314e:	f7fe f8a7 	bl	80012a0 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800315c:	d901      	bls.n	8003162 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e022      	b.n	80031a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003162:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316e:	d1ee      	bne.n	800314e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003170:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0f      	ldr	r2, [pc, #60]	; (80031b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800317c:	f7fe f890 	bl	80012a0 <HAL_GetTick>
 8003180:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003182:	e009      	b.n	8003198 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003184:	f7fe f88c 	bl	80012a0 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003192:	d901      	bls.n	8003198 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e007      	b.n	80031a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031a4:	d1ee      	bne.n	8003184 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40007000 	.word	0x40007000

080031b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031c0:	2300      	movs	r3, #0
 80031c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e29b      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8087 	beq.w	80032ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031dc:	4b96      	ldr	r3, [pc, #600]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d00c      	beq.n	8003202 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e8:	4b93      	ldr	r3, [pc, #588]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d112      	bne.n	800321a <HAL_RCC_OscConfig+0x62>
 80031f4:	4b90      	ldr	r3, [pc, #576]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003200:	d10b      	bne.n	800321a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003202:	4b8d      	ldr	r3, [pc, #564]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d06c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x130>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d168      	bne.n	80032e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e275      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x7a>
 8003224:	4b84      	ldr	r3, [pc, #528]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a83      	ldr	r2, [pc, #524]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e02e      	b.n	8003290 <HAL_RCC_OscConfig+0xd8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x9c>
 800323a:	4b7f      	ldr	r3, [pc, #508]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a7e      	ldr	r2, [pc, #504]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b7c      	ldr	r3, [pc, #496]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a7b      	ldr	r2, [pc, #492]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 800324c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xd8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0xc0>
 800325e:	4b76      	ldr	r3, [pc, #472]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a75      	ldr	r2, [pc, #468]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b73      	ldr	r3, [pc, #460]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a72      	ldr	r2, [pc, #456]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xd8>
 8003278:	4b6f      	ldr	r3, [pc, #444]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a6e      	ldr	r2, [pc, #440]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b6c      	ldr	r3, [pc, #432]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a6b      	ldr	r2, [pc, #428]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe f802 	bl	80012a0 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fd fffe 	bl	80012a0 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e229      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b61      	ldr	r3, [pc, #388]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xe8>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fd ffee 	bl	80012a0 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fd ffea 	bl	80012a0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e215      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	4b57      	ldr	r3, [pc, #348]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x110>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d069      	beq.n	80033ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f6:	4b50      	ldr	r3, [pc, #320]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003302:	4b4d      	ldr	r3, [pc, #308]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b08      	cmp	r3, #8
 800330c:	d11c      	bne.n	8003348 <HAL_RCC_OscConfig+0x190>
 800330e:	4b4a      	ldr	r3, [pc, #296]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	4b47      	ldr	r3, [pc, #284]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x17a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1e9      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b41      	ldr	r3, [pc, #260]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	493d      	ldr	r1, [pc, #244]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	e040      	b.n	80033ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d023      	beq.n	8003398 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003350:	4b39      	ldr	r3, [pc, #228]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a38      	ldr	r2, [pc, #224]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fd ffa0 	bl	80012a0 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003364:	f7fd ff9c 	bl	80012a0 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e1c7      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	4b30      	ldr	r3, [pc, #192]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003382:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4929      	ldr	r1, [pc, #164]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]
 8003396:	e018      	b.n	80033ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003398:	4b27      	ldr	r3, [pc, #156]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a26      	ldr	r2, [pc, #152]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fd ff7c 	bl	80012a0 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ac:	f7fd ff78 	bl	80012a0 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1a3      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d038      	beq.n	8003448 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d019      	beq.n	8003412 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033de:	4b16      	ldr	r3, [pc, #88]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 80033e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e2:	4a15      	ldr	r2, [pc, #84]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ea:	f7fd ff59 	bl	80012a0 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f2:	f7fd ff55 	bl	80012a0 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e180      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x23a>
 8003410:	e01a      	b.n	8003448 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003412:	4b09      	ldr	r3, [pc, #36]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003416:	4a08      	ldr	r2, [pc, #32]	; (8003438 <HAL_RCC_OscConfig+0x280>)
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341e:	f7fd ff3f 	bl	80012a0 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003426:	f7fd ff3b 	bl	80012a0 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d903      	bls.n	800343c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e166      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
 8003438:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343c:	4b92      	ldr	r3, [pc, #584]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 800343e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ee      	bne.n	8003426 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80a4 	beq.w	800359e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003456:	4b8c      	ldr	r3, [pc, #560]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10d      	bne.n	800347e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	4b89      	ldr	r3, [pc, #548]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	4a88      	ldr	r2, [pc, #544]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346c:	6413      	str	r3, [r2, #64]	; 0x40
 800346e:	4b86      	ldr	r3, [pc, #536]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347e:	4b83      	ldr	r3, [pc, #524]	; (800368c <HAL_RCC_OscConfig+0x4d4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d118      	bne.n	80034bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800348a:	4b80      	ldr	r3, [pc, #512]	; (800368c <HAL_RCC_OscConfig+0x4d4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7f      	ldr	r2, [pc, #508]	; (800368c <HAL_RCC_OscConfig+0x4d4>)
 8003490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003496:	f7fd ff03 	bl	80012a0 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349e:	f7fd feff 	bl	80012a0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b64      	cmp	r3, #100	; 0x64
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e12a      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b0:	4b76      	ldr	r3, [pc, #472]	; (800368c <HAL_RCC_OscConfig+0x4d4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x31a>
 80034c4:	4b70      	ldr	r3, [pc, #448]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	4a6f      	ldr	r2, [pc, #444]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6713      	str	r3, [r2, #112]	; 0x70
 80034d0:	e02d      	b.n	800352e <HAL_RCC_OscConfig+0x376>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x33c>
 80034da:	4b6b      	ldr	r3, [pc, #428]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	4a6a      	ldr	r2, [pc, #424]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6713      	str	r3, [r2, #112]	; 0x70
 80034e6:	4b68      	ldr	r3, [pc, #416]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	4a67      	ldr	r2, [pc, #412]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 80034ec:	f023 0304 	bic.w	r3, r3, #4
 80034f0:	6713      	str	r3, [r2, #112]	; 0x70
 80034f2:	e01c      	b.n	800352e <HAL_RCC_OscConfig+0x376>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d10c      	bne.n	8003516 <HAL_RCC_OscConfig+0x35e>
 80034fc:	4b62      	ldr	r3, [pc, #392]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	4a61      	ldr	r2, [pc, #388]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003502:	f043 0304 	orr.w	r3, r3, #4
 8003506:	6713      	str	r3, [r2, #112]	; 0x70
 8003508:	4b5f      	ldr	r3, [pc, #380]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a5e      	ldr	r2, [pc, #376]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	e00b      	b.n	800352e <HAL_RCC_OscConfig+0x376>
 8003516:	4b5c      	ldr	r3, [pc, #368]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	4a5b      	ldr	r2, [pc, #364]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6713      	str	r3, [r2, #112]	; 0x70
 8003522:	4b59      	ldr	r3, [pc, #356]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	4a58      	ldr	r2, [pc, #352]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003528:	f023 0304 	bic.w	r3, r3, #4
 800352c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d015      	beq.n	8003562 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003536:	f7fd feb3 	bl	80012a0 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fd feaf 	bl	80012a0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	; 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e0d8      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ee      	beq.n	800353e <HAL_RCC_OscConfig+0x386>
 8003560:	e014      	b.n	800358c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003562:	f7fd fe9d 	bl	80012a0 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fd fe99 	bl	80012a0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f241 3288 	movw	r2, #5000	; 0x1388
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0c2      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003580:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ee      	bne.n	800356a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d105      	bne.n	800359e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b3d      	ldr	r3, [pc, #244]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a3c      	ldr	r2, [pc, #240]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80ae 	beq.w	8003704 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a8:	4b37      	ldr	r3, [pc, #220]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d06d      	beq.n	8003690 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d14b      	bne.n	8003654 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035bc:	4b32      	ldr	r3, [pc, #200]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a31      	ldr	r2, [pc, #196]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 80035c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fd fe6a 	bl	80012a0 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fd fe66 	bl	80012a0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e091      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	4b29      	ldr	r3, [pc, #164]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	019b      	lsls	r3, r3, #6
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	3b01      	subs	r3, #1
 8003608:	041b      	lsls	r3, r3, #16
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	071b      	lsls	r3, r3, #28
 800361a:	491b      	ldr	r1, [pc, #108]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a18      	ldr	r2, [pc, #96]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fd fe38 	bl	80012a0 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fd fe34 	bl	80012a0 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e05f      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x47c>
 8003652:	e057      	b.n	8003704 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a0b      	ldr	r2, [pc, #44]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 800365a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800365e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fd fe1e 	bl	80012a0 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003668:	f7fd fe1a 	bl	80012a0 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e045      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	4b03      	ldr	r3, [pc, #12]	; (8003688 <HAL_RCC_OscConfig+0x4d0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x4b0>
 8003686:	e03d      	b.n	8003704 <HAL_RCC_OscConfig+0x54c>
 8003688:	40023800 	.word	0x40023800
 800368c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003690:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <HAL_RCC_OscConfig+0x558>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d030      	beq.n	8003700 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d129      	bne.n	8003700 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d122      	bne.n	8003700 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036c0:	4013      	ands	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d119      	bne.n	8003700 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	3b01      	subs	r3, #1
 80036da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d10f      	bne.n	8003700 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d107      	bne.n	8003700 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800

08003714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0d0      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800372c:	4b6a      	ldr	r3, [pc, #424]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d910      	bls.n	800375c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b67      	ldr	r3, [pc, #412]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 020f 	bic.w	r2, r3, #15
 8003742:	4965      	ldr	r1, [pc, #404]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b63      	ldr	r3, [pc, #396]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0b8      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003774:	4b59      	ldr	r3, [pc, #356]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4a58      	ldr	r2, [pc, #352]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 800377a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800377e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800378c:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a52      	ldr	r2, [pc, #328]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003796:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003798:	4b50      	ldr	r3, [pc, #320]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	494d      	ldr	r1, [pc, #308]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d040      	beq.n	8003838 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d115      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e07f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d6:	4b41      	ldr	r3, [pc, #260]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e073      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e6:	4b3d      	ldr	r3, [pc, #244]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e06b      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f6:	4b39      	ldr	r3, [pc, #228]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f023 0203 	bic.w	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4936      	ldr	r1, [pc, #216]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003804:	4313      	orrs	r3, r2
 8003806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003808:	f7fd fd4a 	bl	80012a0 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380e:	e00a      	b.n	8003826 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003810:	f7fd fd46 	bl	80012a0 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	; 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e053      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003826:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 020c 	and.w	r2, r3, #12
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	429a      	cmp	r2, r3
 8003836:	d1eb      	bne.n	8003810 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003838:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d210      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 020f 	bic.w	r2, r3, #15
 800384e:	4922      	ldr	r1, [pc, #136]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e032      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4916      	ldr	r1, [pc, #88]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	490e      	ldr	r1, [pc, #56]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038a6:	f000 f821 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 80038aa:	4602      	mov	r2, r0
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	490a      	ldr	r1, [pc, #40]	; (80038e0 <HAL_RCC_ClockConfig+0x1cc>)
 80038b8:	5ccb      	ldrb	r3, [r1, r3]
 80038ba:	fa22 f303 	lsr.w	r3, r2, r3
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1d0>)
 80038c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1d4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fd fca6 	bl	8001218 <HAL_InitTick>

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023c00 	.word	0x40023c00
 80038dc:	40023800 	.word	0x40023800
 80038e0:	080070bc 	.word	0x080070bc
 80038e4:	20000000 	.word	0x20000000
 80038e8:	20000004 	.word	0x20000004

080038ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f0:	b094      	sub	sp, #80	; 0x50
 80038f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	647b      	str	r3, [r7, #68]	; 0x44
 80038f8:	2300      	movs	r3, #0
 80038fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038fc:	2300      	movs	r3, #0
 80038fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003904:	4b79      	ldr	r3, [pc, #484]	; (8003aec <HAL_RCC_GetSysClockFreq+0x200>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b08      	cmp	r3, #8
 800390e:	d00d      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x40>
 8003910:	2b08      	cmp	r3, #8
 8003912:	f200 80e1 	bhi.w	8003ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x34>
 800391a:	2b04      	cmp	r3, #4
 800391c:	d003      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x3a>
 800391e:	e0db      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003920:	4b73      	ldr	r3, [pc, #460]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003922:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003924:	e0db      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003926:	4b73      	ldr	r3, [pc, #460]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800392a:	e0d8      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800392c:	4b6f      	ldr	r3, [pc, #444]	; (8003aec <HAL_RCC_GetSysClockFreq+0x200>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003934:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003936:	4b6d      	ldr	r3, [pc, #436]	; (8003aec <HAL_RCC_GetSysClockFreq+0x200>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d063      	beq.n	8003a0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003942:	4b6a      	ldr	r3, [pc, #424]	; (8003aec <HAL_RCC_GetSysClockFreq+0x200>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	099b      	lsrs	r3, r3, #6
 8003948:	2200      	movs	r2, #0
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38
 800394c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003954:	633b      	str	r3, [r7, #48]	; 0x30
 8003956:	2300      	movs	r3, #0
 8003958:	637b      	str	r3, [r7, #52]	; 0x34
 800395a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800395e:	4622      	mov	r2, r4
 8003960:	462b      	mov	r3, r5
 8003962:	f04f 0000 	mov.w	r0, #0
 8003966:	f04f 0100 	mov.w	r1, #0
 800396a:	0159      	lsls	r1, r3, #5
 800396c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003970:	0150      	lsls	r0, r2, #5
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4621      	mov	r1, r4
 8003978:	1a51      	subs	r1, r2, r1
 800397a:	6139      	str	r1, [r7, #16]
 800397c:	4629      	mov	r1, r5
 800397e:	eb63 0301 	sbc.w	r3, r3, r1
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003990:	4659      	mov	r1, fp
 8003992:	018b      	lsls	r3, r1, #6
 8003994:	4651      	mov	r1, sl
 8003996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800399a:	4651      	mov	r1, sl
 800399c:	018a      	lsls	r2, r1, #6
 800399e:	4651      	mov	r1, sl
 80039a0:	ebb2 0801 	subs.w	r8, r2, r1
 80039a4:	4659      	mov	r1, fp
 80039a6:	eb63 0901 	sbc.w	r9, r3, r1
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039be:	4690      	mov	r8, r2
 80039c0:	4699      	mov	r9, r3
 80039c2:	4623      	mov	r3, r4
 80039c4:	eb18 0303 	adds.w	r3, r8, r3
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	462b      	mov	r3, r5
 80039cc:	eb49 0303 	adc.w	r3, r9, r3
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039de:	4629      	mov	r1, r5
 80039e0:	024b      	lsls	r3, r1, #9
 80039e2:	4621      	mov	r1, r4
 80039e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039e8:	4621      	mov	r1, r4
 80039ea:	024a      	lsls	r2, r1, #9
 80039ec:	4610      	mov	r0, r2
 80039ee:	4619      	mov	r1, r3
 80039f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f2:	2200      	movs	r2, #0
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039fc:	f7fc fc70 	bl	80002e0 <__aeabi_uldivmod>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4613      	mov	r3, r2
 8003a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a08:	e058      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0a:	4b38      	ldr	r3, [pc, #224]	; (8003aec <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	2200      	movs	r2, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	4611      	mov	r1, r2
 8003a16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a1a:	623b      	str	r3, [r7, #32]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a24:	4642      	mov	r2, r8
 8003a26:	464b      	mov	r3, r9
 8003a28:	f04f 0000 	mov.w	r0, #0
 8003a2c:	f04f 0100 	mov.w	r1, #0
 8003a30:	0159      	lsls	r1, r3, #5
 8003a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a36:	0150      	lsls	r0, r2, #5
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a42:	4649      	mov	r1, r9
 8003a44:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a5c:	ebb2 040a 	subs.w	r4, r2, sl
 8003a60:	eb63 050b 	sbc.w	r5, r3, fp
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	00eb      	lsls	r3, r5, #3
 8003a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a72:	00e2      	lsls	r2, r4, #3
 8003a74:	4614      	mov	r4, r2
 8003a76:	461d      	mov	r5, r3
 8003a78:	4643      	mov	r3, r8
 8003a7a:	18e3      	adds	r3, r4, r3
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	464b      	mov	r3, r9
 8003a80:	eb45 0303 	adc.w	r3, r5, r3
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a92:	4629      	mov	r1, r5
 8003a94:	028b      	lsls	r3, r1, #10
 8003a96:	4621      	mov	r1, r4
 8003a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	028a      	lsls	r2, r1, #10
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	61fa      	str	r2, [r7, #28]
 8003aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab0:	f7fc fc16 	bl	80002e0 <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4613      	mov	r3, r2
 8003aba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_GetSysClockFreq+0x200>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003acc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ad6:	e002      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ada:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3750      	adds	r7, #80	; 0x50
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800
 8003af0:	00f42400 	.word	0x00f42400
 8003af4:	007a1200 	.word	0x007a1200

08003af8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003afe:	681b      	ldr	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000000 	.word	0x20000000

08003b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b14:	f7ff fff0 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	0a9b      	lsrs	r3, r3, #10
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4903      	ldr	r1, [pc, #12]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40023800 	.word	0x40023800
 8003b34:	080070cc 	.word	0x080070cc

08003b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b3c:	f7ff ffdc 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0b5b      	lsrs	r3, r3, #13
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4903      	ldr	r1, [pc, #12]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	080070cc 	.word	0x080070cc

08003b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d012      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b88:	4b69      	ldr	r3, [pc, #420]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a68      	ldr	r2, [pc, #416]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b92:	6093      	str	r3, [r2, #8]
 8003b94:	4b66      	ldr	r3, [pc, #408]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9c:	4964      	ldr	r1, [pc, #400]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003baa:	2301      	movs	r3, #1
 8003bac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d017      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bba:	4b5d      	ldr	r3, [pc, #372]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	4959      	ldr	r1, [pc, #356]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd8:	d101      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003be6:	2301      	movs	r3, #1
 8003be8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d017      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bf6:	4b4e      	ldr	r3, [pc, #312]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	494a      	ldr	r1, [pc, #296]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c14:	d101      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c16:	2301      	movs	r3, #1
 8003c18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c22:	2301      	movs	r3, #1
 8003c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 808b 	beq.w	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c44:	4b3a      	ldr	r3, [pc, #232]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	4a39      	ldr	r2, [pc, #228]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c50:	4b37      	ldr	r3, [pc, #220]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c5c:	4b35      	ldr	r3, [pc, #212]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a34      	ldr	r2, [pc, #208]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c68:	f7fd fb1a 	bl	80012a0 <HAL_GetTick>
 8003c6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c70:	f7fd fb16 	bl	80012a0 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e38f      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c82:	4b2c      	ldr	r3, [pc, #176]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c8e:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d035      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d02e      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cac:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cb6:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cc2:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc6:	4a1a      	ldr	r2, [pc, #104]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ccc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003cce:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cd4:	4b16      	ldr	r3, [pc, #88]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d114      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7fd fade 	bl	80012a0 <HAL_GetTick>
 8003ce4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fd fada 	bl	80012a0 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e351      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0ee      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d16:	d111      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d26:	400b      	ands	r3, r1
 8003d28:	4901      	ldr	r1, [pc, #4]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
 8003d2e:	e00b      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40007000 	.word	0x40007000
 8003d38:	0ffffcff 	.word	0x0ffffcff
 8003d3c:	4bac      	ldr	r3, [pc, #688]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4aab      	ldr	r2, [pc, #684]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d46:	6093      	str	r3, [r2, #8]
 8003d48:	4ba9      	ldr	r3, [pc, #676]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d54:	49a6      	ldr	r1, [pc, #664]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d010      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d66:	4ba2      	ldr	r3, [pc, #648]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d6c:	4aa0      	ldr	r2, [pc, #640]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d76:	4b9e      	ldr	r3, [pc, #632]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	499b      	ldr	r1, [pc, #620]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d94:	4b96      	ldr	r3, [pc, #600]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da2:	4993      	ldr	r1, [pc, #588]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003db6:	4b8e      	ldr	r3, [pc, #568]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dc4:	498a      	ldr	r1, [pc, #552]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dd8:	4b85      	ldr	r3, [pc, #532]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de6:	4982      	ldr	r1, [pc, #520]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dfa:	4b7d      	ldr	r3, [pc, #500]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	4979      	ldr	r1, [pc, #484]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e1c:	4b74      	ldr	r3, [pc, #464]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e22:	f023 0203 	bic.w	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	4971      	ldr	r1, [pc, #452]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e3e:	4b6c      	ldr	r3, [pc, #432]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	f023 020c 	bic.w	r2, r3, #12
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4c:	4968      	ldr	r1, [pc, #416]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e60:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6e:	4960      	ldr	r1, [pc, #384]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e82:	4b5b      	ldr	r3, [pc, #364]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e90:	4957      	ldr	r1, [pc, #348]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ea4:	4b52      	ldr	r3, [pc, #328]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	494f      	ldr	r1, [pc, #316]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ec6:	4b4a      	ldr	r3, [pc, #296]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed4:	4946      	ldr	r1, [pc, #280]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ee8:	4b41      	ldr	r3, [pc, #260]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef6:	493e      	ldr	r1, [pc, #248]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f0a:	4b39      	ldr	r3, [pc, #228]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f18:	4935      	ldr	r1, [pc, #212]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f2c:	4b30      	ldr	r3, [pc, #192]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f3a:	492d      	ldr	r1, [pc, #180]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d011      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f4e:	4b28      	ldr	r3, [pc, #160]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5c:	4924      	ldr	r1, [pc, #144]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f8e:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9c:	4914      	ldr	r1, [pc, #80]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00b      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc0:	490b      	ldr	r1, [pc, #44]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00f      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe4:	4902      	ldr	r1, [pc, #8]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fec:	e002      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00b      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004000:	4b8a      	ldr	r3, [pc, #552]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004006:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	4986      	ldr	r1, [pc, #536]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004024:	4b81      	ldr	r3, [pc, #516]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800402a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004034:	497d      	ldr	r1, [pc, #500]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d006      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80d6 	beq.w	80041fc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004050:	4b76      	ldr	r3, [pc, #472]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a75      	ldr	r2, [pc, #468]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004056:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800405a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405c:	f7fd f920 	bl	80012a0 <HAL_GetTick>
 8004060:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004064:	f7fd f91c 	bl	80012a0 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	; 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e195      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004076:	4b6d      	ldr	r3, [pc, #436]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d021      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004092:	2b00      	cmp	r3, #0
 8004094:	d11d      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004096:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040a4:	4b61      	ldr	r3, [pc, #388]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040aa:	0e1b      	lsrs	r3, r3, #24
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	019a      	lsls	r2, r3, #6
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	041b      	lsls	r3, r3, #16
 80040bc:	431a      	orrs	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	061b      	lsls	r3, r3, #24
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	071b      	lsls	r3, r3, #28
 80040ca:	4958      	ldr	r1, [pc, #352]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d02e      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040fc:	d129      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040fe:	4b4b      	ldr	r3, [pc, #300]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800410c:	4b47      	ldr	r3, [pc, #284]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800410e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004112:	0f1b      	lsrs	r3, r3, #28
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	019a      	lsls	r2, r3, #6
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	071b      	lsls	r3, r3, #28
 8004132:	493e      	ldr	r1, [pc, #248]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800413a:	4b3c      	ldr	r3, [pc, #240]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004140:	f023 021f 	bic.w	r2, r3, #31
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	3b01      	subs	r3, #1
 800414a:	4938      	ldr	r1, [pc, #224]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01d      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800415e:	4b33      	ldr	r3, [pc, #204]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004164:	0e1b      	lsrs	r3, r3, #24
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800416c:	4b2f      	ldr	r3, [pc, #188]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004172:	0f1b      	lsrs	r3, r3, #28
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	019a      	lsls	r2, r3, #6
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	041b      	lsls	r3, r3, #16
 8004186:	431a      	orrs	r2, r3
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	061b      	lsls	r3, r3, #24
 800418c:	431a      	orrs	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	071b      	lsls	r3, r3, #28
 8004192:	4926      	ldr	r1, [pc, #152]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d011      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	019a      	lsls	r2, r3, #6
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	061b      	lsls	r3, r3, #24
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	071b      	lsls	r3, r3, #28
 80041c2:	491a      	ldr	r1, [pc, #104]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041ca:	4b18      	ldr	r3, [pc, #96]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a17      	ldr	r2, [pc, #92]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d6:	f7fd f863 	bl	80012a0 <HAL_GetTick>
 80041da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041de:	f7fd f85f 	bl	80012a0 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b64      	cmp	r3, #100	; 0x64
 80041ea:	d901      	bls.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e0d8      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041f0:	4b0e      	ldr	r3, [pc, #56]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	f040 80ce 	bne.w	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004204:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a08      	ldr	r2, [pc, #32]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800420e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004210:	f7fd f846 	bl	80012a0 <HAL_GetTick>
 8004214:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004216:	e00b      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004218:	f7fd f842 	bl	80012a0 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d904      	bls.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e0bb      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004230:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800423c:	d0ec      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800425a:	2b00      	cmp	r3, #0
 800425c:	d02e      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d12a      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004266:	4b51      	ldr	r3, [pc, #324]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004274:	4b4d      	ldr	r3, [pc, #308]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	0f1b      	lsrs	r3, r3, #28
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	019a      	lsls	r2, r3, #6
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	061b      	lsls	r3, r3, #24
 8004294:	431a      	orrs	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	071b      	lsls	r3, r3, #28
 800429a:	4944      	ldr	r1, [pc, #272]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042a2:	4b42      	ldr	r3, [pc, #264]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	3b01      	subs	r3, #1
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	493d      	ldr	r1, [pc, #244]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d022      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d0:	d11d      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042d2:	4b36      	ldr	r3, [pc, #216]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d8:	0e1b      	lsrs	r3, r3, #24
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042e0:	4b32      	ldr	r3, [pc, #200]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	0f1b      	lsrs	r3, r3, #28
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	019a      	lsls	r2, r3, #6
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	041b      	lsls	r3, r3, #16
 80042fa:	431a      	orrs	r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	061b      	lsls	r3, r3, #24
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	071b      	lsls	r3, r3, #28
 8004306:	4929      	ldr	r1, [pc, #164]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d028      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800431a:	4b24      	ldr	r3, [pc, #144]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	0e1b      	lsrs	r3, r3, #24
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004328:	4b20      	ldr	r3, [pc, #128]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	0c1b      	lsrs	r3, r3, #16
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	019a      	lsls	r2, r3, #6
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	431a      	orrs	r2, r3
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	061b      	lsls	r3, r3, #24
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	071b      	lsls	r3, r3, #28
 800434e:	4917      	ldr	r1, [pc, #92]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004356:	4b15      	ldr	r3, [pc, #84]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	4911      	ldr	r1, [pc, #68]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800436c:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0e      	ldr	r2, [pc, #56]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004378:	f7fc ff92 	bl	80012a0 <HAL_GetTick>
 800437c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004380:	f7fc ff8e 	bl	80012a0 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e007      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800439a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800439e:	d1ef      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3720      	adds	r7, #32
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800

080043b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e040      	b.n	8004444 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fc fd94 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2224      	movs	r2, #36	; 0x24
 80043dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f974 	bl	80046dc <UART_SetConfig>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e022      	b.n	8004444 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fbcc 	bl	8004ba4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800441a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800442a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fc53 	bl	8004ce8 <UART_CheckIdleState>
 8004442:	4603      	mov	r3, r0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004460:	2b20      	cmp	r3, #32
 8004462:	d171      	bne.n	8004548 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_UART_Transmit+0x24>
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e06a      	b.n	800454a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2221      	movs	r2, #33	; 0x21
 8004480:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004482:	f7fc ff0d 	bl	80012a0 <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	88fa      	ldrh	r2, [r7, #6]
 8004494:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a0:	d108      	bne.n	80044b4 <HAL_UART_Transmit+0x68>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d104      	bne.n	80044b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	e003      	b.n	80044bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044bc:	e02c      	b.n	8004518 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2200      	movs	r2, #0
 80044c6:	2180      	movs	r1, #128	; 0x80
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fc5a 	bl	8004d82 <UART_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e038      	b.n	800454a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10b      	bne.n	80044f6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	3302      	adds	r3, #2
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	e007      	b.n	8004506 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	781a      	ldrb	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	3301      	adds	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1cc      	bne.n	80044be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2200      	movs	r2, #0
 800452c:	2140      	movs	r1, #64	; 0x40
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fc27 	bl	8004d82 <UART_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e005      	b.n	800454a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2220      	movs	r2, #32
 8004542:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	e000      	b.n	800454a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004548:	2302      	movs	r3, #2
  }
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b08a      	sub	sp, #40	; 0x28
 8004556:	af02      	add	r7, sp, #8
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	603b      	str	r3, [r7, #0]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004568:	2b20      	cmp	r3, #32
 800456a:	f040 80b1 	bne.w	80046d0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_UART_Receive+0x28>
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e0a9      	b.n	80046d2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2222      	movs	r2, #34	; 0x22
 800458a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004594:	f7fc fe84 	bl	80012a0 <HAL_GetTick>
 8004598:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	88fa      	ldrh	r2, [r7, #6]
 800459e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	88fa      	ldrh	r2, [r7, #6]
 80045a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b2:	d10e      	bne.n	80045d2 <HAL_UART_Receive+0x80>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <HAL_UART_Receive+0x76>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045c6:	e02d      	b.n	8004624 <HAL_UART_Receive+0xd2>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	22ff      	movs	r2, #255	; 0xff
 80045cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045d0:	e028      	b.n	8004624 <HAL_UART_Receive+0xd2>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10d      	bne.n	80045f6 <HAL_UART_Receive+0xa4>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d104      	bne.n	80045ec <HAL_UART_Receive+0x9a>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	22ff      	movs	r2, #255	; 0xff
 80045e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045ea:	e01b      	b.n	8004624 <HAL_UART_Receive+0xd2>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	227f      	movs	r2, #127	; 0x7f
 80045f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045f4:	e016      	b.n	8004624 <HAL_UART_Receive+0xd2>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045fe:	d10d      	bne.n	800461c <HAL_UART_Receive+0xca>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <HAL_UART_Receive+0xc0>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	227f      	movs	r2, #127	; 0x7f
 800460c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004610:	e008      	b.n	8004624 <HAL_UART_Receive+0xd2>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	223f      	movs	r2, #63	; 0x3f
 8004616:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800461a:	e003      	b.n	8004624 <HAL_UART_Receive+0xd2>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800462a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004634:	d108      	bne.n	8004648 <HAL_UART_Receive+0xf6>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	e003      	b.n	8004650 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800464c:	2300      	movs	r3, #0
 800464e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004650:	e032      	b.n	80046b8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2200      	movs	r2, #0
 800465a:	2120      	movs	r1, #32
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 fb90 	bl	8004d82 <UART_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e032      	b.n	80046d2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10c      	bne.n	800468c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	b29a      	uxth	r2, r3
 800467a:	8a7b      	ldrh	r3, [r7, #18]
 800467c:	4013      	ands	r3, r2
 800467e:	b29a      	uxth	r2, r3
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	3302      	adds	r3, #2
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	e00c      	b.n	80046a6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	b2da      	uxtb	r2, r3
 8004694:	8a7b      	ldrh	r3, [r7, #18]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	4013      	ands	r3, r2
 800469a:	b2da      	uxtb	r2, r3
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	3301      	adds	r3, #1
 80046a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1c6      	bne.n	8004652 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4ba6      	ldr	r3, [pc, #664]	; (80049a0 <UART_SetConfig+0x2c4>)
 8004708:	4013      	ands	r3, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6812      	ldr	r2, [r2, #0]
 800470e:	6979      	ldr	r1, [r7, #20]
 8004710:	430b      	orrs	r3, r1
 8004712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	430a      	orrs	r2, r1
 800474c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a94      	ldr	r2, [pc, #592]	; (80049a4 <UART_SetConfig+0x2c8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d120      	bne.n	800479a <UART_SetConfig+0xbe>
 8004758:	4b93      	ldr	r3, [pc, #588]	; (80049a8 <UART_SetConfig+0x2cc>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b03      	cmp	r3, #3
 8004764:	d816      	bhi.n	8004794 <UART_SetConfig+0xb8>
 8004766:	a201      	add	r2, pc, #4	; (adr r2, 800476c <UART_SetConfig+0x90>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	0800477d 	.word	0x0800477d
 8004770:	08004789 	.word	0x08004789
 8004774:	08004783 	.word	0x08004783
 8004778:	0800478f 	.word	0x0800478f
 800477c:	2301      	movs	r3, #1
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e150      	b.n	8004a24 <UART_SetConfig+0x348>
 8004782:	2302      	movs	r3, #2
 8004784:	77fb      	strb	r3, [r7, #31]
 8004786:	e14d      	b.n	8004a24 <UART_SetConfig+0x348>
 8004788:	2304      	movs	r3, #4
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e14a      	b.n	8004a24 <UART_SetConfig+0x348>
 800478e:	2308      	movs	r3, #8
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e147      	b.n	8004a24 <UART_SetConfig+0x348>
 8004794:	2310      	movs	r3, #16
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e144      	b.n	8004a24 <UART_SetConfig+0x348>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a83      	ldr	r2, [pc, #524]	; (80049ac <UART_SetConfig+0x2d0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d132      	bne.n	800480a <UART_SetConfig+0x12e>
 80047a4:	4b80      	ldr	r3, [pc, #512]	; (80049a8 <UART_SetConfig+0x2cc>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b0c      	cmp	r3, #12
 80047b0:	d828      	bhi.n	8004804 <UART_SetConfig+0x128>
 80047b2:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <UART_SetConfig+0xdc>)
 80047b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b8:	080047ed 	.word	0x080047ed
 80047bc:	08004805 	.word	0x08004805
 80047c0:	08004805 	.word	0x08004805
 80047c4:	08004805 	.word	0x08004805
 80047c8:	080047f9 	.word	0x080047f9
 80047cc:	08004805 	.word	0x08004805
 80047d0:	08004805 	.word	0x08004805
 80047d4:	08004805 	.word	0x08004805
 80047d8:	080047f3 	.word	0x080047f3
 80047dc:	08004805 	.word	0x08004805
 80047e0:	08004805 	.word	0x08004805
 80047e4:	08004805 	.word	0x08004805
 80047e8:	080047ff 	.word	0x080047ff
 80047ec:	2300      	movs	r3, #0
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e118      	b.n	8004a24 <UART_SetConfig+0x348>
 80047f2:	2302      	movs	r3, #2
 80047f4:	77fb      	strb	r3, [r7, #31]
 80047f6:	e115      	b.n	8004a24 <UART_SetConfig+0x348>
 80047f8:	2304      	movs	r3, #4
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e112      	b.n	8004a24 <UART_SetConfig+0x348>
 80047fe:	2308      	movs	r3, #8
 8004800:	77fb      	strb	r3, [r7, #31]
 8004802:	e10f      	b.n	8004a24 <UART_SetConfig+0x348>
 8004804:	2310      	movs	r3, #16
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e10c      	b.n	8004a24 <UART_SetConfig+0x348>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a68      	ldr	r2, [pc, #416]	; (80049b0 <UART_SetConfig+0x2d4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d120      	bne.n	8004856 <UART_SetConfig+0x17a>
 8004814:	4b64      	ldr	r3, [pc, #400]	; (80049a8 <UART_SetConfig+0x2cc>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800481e:	2b30      	cmp	r3, #48	; 0x30
 8004820:	d013      	beq.n	800484a <UART_SetConfig+0x16e>
 8004822:	2b30      	cmp	r3, #48	; 0x30
 8004824:	d814      	bhi.n	8004850 <UART_SetConfig+0x174>
 8004826:	2b20      	cmp	r3, #32
 8004828:	d009      	beq.n	800483e <UART_SetConfig+0x162>
 800482a:	2b20      	cmp	r3, #32
 800482c:	d810      	bhi.n	8004850 <UART_SetConfig+0x174>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <UART_SetConfig+0x15c>
 8004832:	2b10      	cmp	r3, #16
 8004834:	d006      	beq.n	8004844 <UART_SetConfig+0x168>
 8004836:	e00b      	b.n	8004850 <UART_SetConfig+0x174>
 8004838:	2300      	movs	r3, #0
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e0f2      	b.n	8004a24 <UART_SetConfig+0x348>
 800483e:	2302      	movs	r3, #2
 8004840:	77fb      	strb	r3, [r7, #31]
 8004842:	e0ef      	b.n	8004a24 <UART_SetConfig+0x348>
 8004844:	2304      	movs	r3, #4
 8004846:	77fb      	strb	r3, [r7, #31]
 8004848:	e0ec      	b.n	8004a24 <UART_SetConfig+0x348>
 800484a:	2308      	movs	r3, #8
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e0e9      	b.n	8004a24 <UART_SetConfig+0x348>
 8004850:	2310      	movs	r3, #16
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e0e6      	b.n	8004a24 <UART_SetConfig+0x348>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a56      	ldr	r2, [pc, #344]	; (80049b4 <UART_SetConfig+0x2d8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d120      	bne.n	80048a2 <UART_SetConfig+0x1c6>
 8004860:	4b51      	ldr	r3, [pc, #324]	; (80049a8 <UART_SetConfig+0x2cc>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800486a:	2bc0      	cmp	r3, #192	; 0xc0
 800486c:	d013      	beq.n	8004896 <UART_SetConfig+0x1ba>
 800486e:	2bc0      	cmp	r3, #192	; 0xc0
 8004870:	d814      	bhi.n	800489c <UART_SetConfig+0x1c0>
 8004872:	2b80      	cmp	r3, #128	; 0x80
 8004874:	d009      	beq.n	800488a <UART_SetConfig+0x1ae>
 8004876:	2b80      	cmp	r3, #128	; 0x80
 8004878:	d810      	bhi.n	800489c <UART_SetConfig+0x1c0>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <UART_SetConfig+0x1a8>
 800487e:	2b40      	cmp	r3, #64	; 0x40
 8004880:	d006      	beq.n	8004890 <UART_SetConfig+0x1b4>
 8004882:	e00b      	b.n	800489c <UART_SetConfig+0x1c0>
 8004884:	2300      	movs	r3, #0
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e0cc      	b.n	8004a24 <UART_SetConfig+0x348>
 800488a:	2302      	movs	r3, #2
 800488c:	77fb      	strb	r3, [r7, #31]
 800488e:	e0c9      	b.n	8004a24 <UART_SetConfig+0x348>
 8004890:	2304      	movs	r3, #4
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e0c6      	b.n	8004a24 <UART_SetConfig+0x348>
 8004896:	2308      	movs	r3, #8
 8004898:	77fb      	strb	r3, [r7, #31]
 800489a:	e0c3      	b.n	8004a24 <UART_SetConfig+0x348>
 800489c:	2310      	movs	r3, #16
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e0c0      	b.n	8004a24 <UART_SetConfig+0x348>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a44      	ldr	r2, [pc, #272]	; (80049b8 <UART_SetConfig+0x2dc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d125      	bne.n	80048f8 <UART_SetConfig+0x21c>
 80048ac:	4b3e      	ldr	r3, [pc, #248]	; (80049a8 <UART_SetConfig+0x2cc>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ba:	d017      	beq.n	80048ec <UART_SetConfig+0x210>
 80048bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c0:	d817      	bhi.n	80048f2 <UART_SetConfig+0x216>
 80048c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c6:	d00b      	beq.n	80048e0 <UART_SetConfig+0x204>
 80048c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048cc:	d811      	bhi.n	80048f2 <UART_SetConfig+0x216>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <UART_SetConfig+0x1fe>
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d6:	d006      	beq.n	80048e6 <UART_SetConfig+0x20a>
 80048d8:	e00b      	b.n	80048f2 <UART_SetConfig+0x216>
 80048da:	2300      	movs	r3, #0
 80048dc:	77fb      	strb	r3, [r7, #31]
 80048de:	e0a1      	b.n	8004a24 <UART_SetConfig+0x348>
 80048e0:	2302      	movs	r3, #2
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e09e      	b.n	8004a24 <UART_SetConfig+0x348>
 80048e6:	2304      	movs	r3, #4
 80048e8:	77fb      	strb	r3, [r7, #31]
 80048ea:	e09b      	b.n	8004a24 <UART_SetConfig+0x348>
 80048ec:	2308      	movs	r3, #8
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e098      	b.n	8004a24 <UART_SetConfig+0x348>
 80048f2:	2310      	movs	r3, #16
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e095      	b.n	8004a24 <UART_SetConfig+0x348>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a2f      	ldr	r2, [pc, #188]	; (80049bc <UART_SetConfig+0x2e0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d125      	bne.n	800494e <UART_SetConfig+0x272>
 8004902:	4b29      	ldr	r3, [pc, #164]	; (80049a8 <UART_SetConfig+0x2cc>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800490c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004910:	d017      	beq.n	8004942 <UART_SetConfig+0x266>
 8004912:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004916:	d817      	bhi.n	8004948 <UART_SetConfig+0x26c>
 8004918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491c:	d00b      	beq.n	8004936 <UART_SetConfig+0x25a>
 800491e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004922:	d811      	bhi.n	8004948 <UART_SetConfig+0x26c>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <UART_SetConfig+0x254>
 8004928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800492c:	d006      	beq.n	800493c <UART_SetConfig+0x260>
 800492e:	e00b      	b.n	8004948 <UART_SetConfig+0x26c>
 8004930:	2301      	movs	r3, #1
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	e076      	b.n	8004a24 <UART_SetConfig+0x348>
 8004936:	2302      	movs	r3, #2
 8004938:	77fb      	strb	r3, [r7, #31]
 800493a:	e073      	b.n	8004a24 <UART_SetConfig+0x348>
 800493c:	2304      	movs	r3, #4
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e070      	b.n	8004a24 <UART_SetConfig+0x348>
 8004942:	2308      	movs	r3, #8
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e06d      	b.n	8004a24 <UART_SetConfig+0x348>
 8004948:	2310      	movs	r3, #16
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e06a      	b.n	8004a24 <UART_SetConfig+0x348>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1b      	ldr	r2, [pc, #108]	; (80049c0 <UART_SetConfig+0x2e4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d138      	bne.n	80049ca <UART_SetConfig+0x2ee>
 8004958:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <UART_SetConfig+0x2cc>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004962:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004966:	d017      	beq.n	8004998 <UART_SetConfig+0x2bc>
 8004968:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800496c:	d82a      	bhi.n	80049c4 <UART_SetConfig+0x2e8>
 800496e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004972:	d00b      	beq.n	800498c <UART_SetConfig+0x2b0>
 8004974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004978:	d824      	bhi.n	80049c4 <UART_SetConfig+0x2e8>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <UART_SetConfig+0x2aa>
 800497e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004982:	d006      	beq.n	8004992 <UART_SetConfig+0x2b6>
 8004984:	e01e      	b.n	80049c4 <UART_SetConfig+0x2e8>
 8004986:	2300      	movs	r3, #0
 8004988:	77fb      	strb	r3, [r7, #31]
 800498a:	e04b      	b.n	8004a24 <UART_SetConfig+0x348>
 800498c:	2302      	movs	r3, #2
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	e048      	b.n	8004a24 <UART_SetConfig+0x348>
 8004992:	2304      	movs	r3, #4
 8004994:	77fb      	strb	r3, [r7, #31]
 8004996:	e045      	b.n	8004a24 <UART_SetConfig+0x348>
 8004998:	2308      	movs	r3, #8
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e042      	b.n	8004a24 <UART_SetConfig+0x348>
 800499e:	bf00      	nop
 80049a0:	efff69f3 	.word	0xefff69f3
 80049a4:	40011000 	.word	0x40011000
 80049a8:	40023800 	.word	0x40023800
 80049ac:	40004400 	.word	0x40004400
 80049b0:	40004800 	.word	0x40004800
 80049b4:	40004c00 	.word	0x40004c00
 80049b8:	40005000 	.word	0x40005000
 80049bc:	40011400 	.word	0x40011400
 80049c0:	40007800 	.word	0x40007800
 80049c4:	2310      	movs	r3, #16
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e02c      	b.n	8004a24 <UART_SetConfig+0x348>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a72      	ldr	r2, [pc, #456]	; (8004b98 <UART_SetConfig+0x4bc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d125      	bne.n	8004a20 <UART_SetConfig+0x344>
 80049d4:	4b71      	ldr	r3, [pc, #452]	; (8004b9c <UART_SetConfig+0x4c0>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049e2:	d017      	beq.n	8004a14 <UART_SetConfig+0x338>
 80049e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049e8:	d817      	bhi.n	8004a1a <UART_SetConfig+0x33e>
 80049ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ee:	d00b      	beq.n	8004a08 <UART_SetConfig+0x32c>
 80049f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f4:	d811      	bhi.n	8004a1a <UART_SetConfig+0x33e>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <UART_SetConfig+0x326>
 80049fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049fe:	d006      	beq.n	8004a0e <UART_SetConfig+0x332>
 8004a00:	e00b      	b.n	8004a1a <UART_SetConfig+0x33e>
 8004a02:	2300      	movs	r3, #0
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e00d      	b.n	8004a24 <UART_SetConfig+0x348>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e00a      	b.n	8004a24 <UART_SetConfig+0x348>
 8004a0e:	2304      	movs	r3, #4
 8004a10:	77fb      	strb	r3, [r7, #31]
 8004a12:	e007      	b.n	8004a24 <UART_SetConfig+0x348>
 8004a14:	2308      	movs	r3, #8
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e004      	b.n	8004a24 <UART_SetConfig+0x348>
 8004a1a:	2310      	movs	r3, #16
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	e001      	b.n	8004a24 <UART_SetConfig+0x348>
 8004a20:	2310      	movs	r3, #16
 8004a22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a2c:	d15b      	bne.n	8004ae6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a2e:	7ffb      	ldrb	r3, [r7, #31]
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d828      	bhi.n	8004a86 <UART_SetConfig+0x3aa>
 8004a34:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <UART_SetConfig+0x360>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a71 	.word	0x08004a71
 8004a48:	08004a87 	.word	0x08004a87
 8004a4c:	08004a77 	.word	0x08004a77
 8004a50:	08004a87 	.word	0x08004a87
 8004a54:	08004a87 	.word	0x08004a87
 8004a58:	08004a87 	.word	0x08004a87
 8004a5c:	08004a7f 	.word	0x08004a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a60:	f7ff f856 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8004a64:	61b8      	str	r0, [r7, #24]
        break;
 8004a66:	e013      	b.n	8004a90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a68:	f7ff f866 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 8004a6c:	61b8      	str	r0, [r7, #24]
        break;
 8004a6e:	e00f      	b.n	8004a90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a70:	4b4b      	ldr	r3, [pc, #300]	; (8004ba0 <UART_SetConfig+0x4c4>)
 8004a72:	61bb      	str	r3, [r7, #24]
        break;
 8004a74:	e00c      	b.n	8004a90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a76:	f7fe ff39 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 8004a7a:	61b8      	str	r0, [r7, #24]
        break;
 8004a7c:	e008      	b.n	8004a90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a82:	61bb      	str	r3, [r7, #24]
        break;
 8004a84:	e004      	b.n	8004a90 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d074      	beq.n	8004b80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	005a      	lsls	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	441a      	add	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b0f      	cmp	r3, #15
 8004ab0:	d916      	bls.n	8004ae0 <UART_SetConfig+0x404>
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab8:	d212      	bcs.n	8004ae0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f023 030f 	bic.w	r3, r3, #15
 8004ac2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	085b      	lsrs	r3, r3, #1
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	89fb      	ldrh	r3, [r7, #14]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	89fa      	ldrh	r2, [r7, #14]
 8004adc:	60da      	str	r2, [r3, #12]
 8004ade:	e04f      	b.n	8004b80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	77bb      	strb	r3, [r7, #30]
 8004ae4:	e04c      	b.n	8004b80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ae6:	7ffb      	ldrb	r3, [r7, #31]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d828      	bhi.n	8004b3e <UART_SetConfig+0x462>
 8004aec:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <UART_SetConfig+0x418>)
 8004aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af2:	bf00      	nop
 8004af4:	08004b19 	.word	0x08004b19
 8004af8:	08004b21 	.word	0x08004b21
 8004afc:	08004b29 	.word	0x08004b29
 8004b00:	08004b3f 	.word	0x08004b3f
 8004b04:	08004b2f 	.word	0x08004b2f
 8004b08:	08004b3f 	.word	0x08004b3f
 8004b0c:	08004b3f 	.word	0x08004b3f
 8004b10:	08004b3f 	.word	0x08004b3f
 8004b14:	08004b37 	.word	0x08004b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b18:	f7fe fffa 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8004b1c:	61b8      	str	r0, [r7, #24]
        break;
 8004b1e:	e013      	b.n	8004b48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b20:	f7ff f80a 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 8004b24:	61b8      	str	r0, [r7, #24]
        break;
 8004b26:	e00f      	b.n	8004b48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b28:	4b1d      	ldr	r3, [pc, #116]	; (8004ba0 <UART_SetConfig+0x4c4>)
 8004b2a:	61bb      	str	r3, [r7, #24]
        break;
 8004b2c:	e00c      	b.n	8004b48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b2e:	f7fe fedd 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 8004b32:	61b8      	str	r0, [r7, #24]
        break;
 8004b34:	e008      	b.n	8004b48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b3a:	61bb      	str	r3, [r7, #24]
        break;
 8004b3c:	e004      	b.n	8004b48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	77bb      	strb	r3, [r7, #30]
        break;
 8004b46:	bf00      	nop
    }

    if (pclk != 0U)
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d018      	beq.n	8004b80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	085a      	lsrs	r2, r3, #1
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	441a      	add	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b0f      	cmp	r3, #15
 8004b66:	d909      	bls.n	8004b7c <UART_SetConfig+0x4a0>
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6e:	d205      	bcs.n	8004b7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60da      	str	r2, [r3, #12]
 8004b7a:	e001      	b.n	8004b80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40007c00 	.word	0x40007c00
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	00f42400 	.word	0x00f42400

08004ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01a      	beq.n	8004cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca2:	d10a      	bne.n	8004cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cf8:	f7fc fad2 	bl	80012a0 <HAL_GetTick>
 8004cfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d10e      	bne.n	8004d2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f831 	bl	8004d82 <UART_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e027      	b.n	8004d7a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d10e      	bne.n	8004d56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f81b 	bl	8004d82 <UART_WaitOnFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e011      	b.n	8004d7a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b09c      	sub	sp, #112	; 0x70
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d92:	e0a7      	b.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	f000 80a3 	beq.w	8004ee4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9e:	f7fc fa7f 	bl	80012a0 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d302      	bcc.n	8004db4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d13f      	bne.n	8004e34 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dc8:	667b      	str	r3, [r7, #100]	; 0x64
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dd4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e6      	bne.n	8004db4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3308      	adds	r3, #8
 8004dec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	663b      	str	r3, [r7, #96]	; 0x60
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3308      	adds	r3, #8
 8004e04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e06:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e5      	bne.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e068      	b.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d050      	beq.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e50:	d148      	bne.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e5a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e7c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e6      	bne.n	8004e5c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3308      	adds	r3, #8
 8004e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004eae:	623a      	str	r2, [r7, #32]
 8004eb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	69f9      	ldr	r1, [r7, #28]
 8004eb4:	6a3a      	ldr	r2, [r7, #32]
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e010      	b.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69da      	ldr	r2, [r3, #28]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4013      	ands	r3, r2
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2301      	moveq	r3, #1
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	f43f af48 	beq.w	8004d94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3770      	adds	r7, #112	; 0x70
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f10:	b084      	sub	sp, #16
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	f107 001c 	add.w	r0, r7, #28
 8004f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d120      	bne.n	8004f6a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <USB_CoreInit+0xac>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d105      	bne.n	8004f5e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa96 	bl	8005490 <USB_CoreReset>
 8004f64:	4603      	mov	r3, r0
 8004f66:	73fb      	strb	r3, [r7, #15]
 8004f68:	e010      	b.n	8004f8c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fa8a 	bl	8005490 <USB_CoreReset>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d10b      	bne.n	8004faa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f043 0206 	orr.w	r2, r3, #6
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f043 0220 	orr.w	r2, r3, #32
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fb6:	b004      	add	sp, #16
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	ffbdffbf 	.word	0xffbdffbf

08004fc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f023 0201 	bic.w	r2, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	460b      	mov	r3, r1
 8004fec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d115      	bne.n	8005030 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005010:	2001      	movs	r0, #1
 8005012:	f7fc f951 	bl	80012b8 <HAL_Delay>
      ms++;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3301      	adds	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fa29 	bl	8005474 <USB_GetMode>
 8005022:	4603      	mov	r3, r0
 8005024:	2b01      	cmp	r3, #1
 8005026:	d01e      	beq.n	8005066 <USB_SetCurrentMode+0x84>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b31      	cmp	r3, #49	; 0x31
 800502c:	d9f0      	bls.n	8005010 <USB_SetCurrentMode+0x2e>
 800502e:	e01a      	b.n	8005066 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d115      	bne.n	8005062 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005042:	2001      	movs	r0, #1
 8005044:	f7fc f938 	bl	80012b8 <HAL_Delay>
      ms++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3301      	adds	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fa10 	bl	8005474 <USB_GetMode>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <USB_SetCurrentMode+0x84>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b31      	cmp	r3, #49	; 0x31
 800505e:	d9f0      	bls.n	8005042 <USB_SetCurrentMode+0x60>
 8005060:	e001      	b.n	8005066 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e005      	b.n	8005072 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b32      	cmp	r3, #50	; 0x32
 800506a:	d101      	bne.n	8005070 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800507c:	b084      	sub	sp, #16
 800507e:	b580      	push	{r7, lr}
 8005080:	b086      	sub	sp, #24
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800508a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	e009      	b.n	80050b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	3340      	adds	r3, #64	; 0x40
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	2200      	movs	r2, #0
 80050a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	3301      	adds	r3, #1
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b0e      	cmp	r3, #14
 80050b4:	d9f2      	bls.n	800509c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d11c      	bne.n	80050f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ca:	f043 0302 	orr.w	r3, r3, #2
 80050ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e005      	b.n	8005102 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005108:	461a      	mov	r2, r3
 800510a:	2300      	movs	r3, #0
 800510c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005114:	4619      	mov	r1, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511c:	461a      	mov	r2, r3
 800511e:	680b      	ldr	r3, [r1, #0]
 8005120:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005124:	2b01      	cmp	r3, #1
 8005126:	d10c      	bne.n	8005142 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800512e:	2100      	movs	r1, #0
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f965 	bl	8005400 <USB_SetDevSpeed>
 8005136:	e008      	b.n	800514a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005138:	2101      	movs	r1, #1
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f960 	bl	8005400 <USB_SetDevSpeed>
 8005140:	e003      	b.n	800514a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005142:	2103      	movs	r1, #3
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f95b 	bl	8005400 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800514a:	2110      	movs	r1, #16
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f8f3 	bl	8005338 <USB_FlushTxFifo>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f91f 	bl	80053a0 <USB_FlushRxFifo>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005172:	461a      	mov	r2, r3
 8005174:	2300      	movs	r3, #0
 8005176:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517e:	461a      	mov	r2, r3
 8005180:	2300      	movs	r3, #0
 8005182:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518a:	461a      	mov	r2, r3
 800518c:	2300      	movs	r3, #0
 800518e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005190:	2300      	movs	r3, #0
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	e043      	b.n	800521e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ac:	d118      	bne.n	80051e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c0:	461a      	mov	r2, r3
 80051c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	e013      	b.n	80051f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d6:	461a      	mov	r2, r3
 80051d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	e008      	b.n	80051f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	461a      	mov	r2, r3
 80051ee:	2300      	movs	r3, #0
 80051f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fe:	461a      	mov	r2, r3
 8005200:	2300      	movs	r3, #0
 8005202:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	461a      	mov	r2, r3
 8005212:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005216:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	3301      	adds	r3, #1
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	429a      	cmp	r2, r3
 8005224:	d3b7      	bcc.n	8005196 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005226:	2300      	movs	r3, #0
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	e043      	b.n	80052b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800523e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005242:	d118      	bne.n	8005276 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10a      	bne.n	8005260 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005256:	461a      	mov	r2, r3
 8005258:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	e013      	b.n	8005288 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526c:	461a      	mov	r2, r3
 800526e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005272:	6013      	str	r3, [r2, #0]
 8005274:	e008      	b.n	8005288 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005282:	461a      	mov	r2, r3
 8005284:	2300      	movs	r3, #0
 8005286:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005294:	461a      	mov	r2, r3
 8005296:	2300      	movs	r3, #0
 8005298:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a6:	461a      	mov	r2, r3
 80052a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	3301      	adds	r3, #1
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d3b7      	bcc.n	800522c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d105      	bne.n	80052f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f043 0210 	orr.w	r2, r3, #16
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699a      	ldr	r2, [r3, #24]
 80052f4:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <USB_DevInit+0x2b4>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f043 0208 	orr.w	r2, r3, #8
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800530e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005310:	2b01      	cmp	r3, #1
 8005312:	d105      	bne.n	8005320 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699a      	ldr	r2, [r3, #24]
 8005318:	4b06      	ldr	r3, [pc, #24]	; (8005334 <USB_DevInit+0x2b8>)
 800531a:	4313      	orrs	r3, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800532c:	b004      	add	sp, #16
 800532e:	4770      	bx	lr
 8005330:	803c3800 	.word	0x803c3800
 8005334:	40000004 	.word	0x40000004

08005338 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4a13      	ldr	r2, [pc, #76]	; (800539c <USB_FlushTxFifo+0x64>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d901      	bls.n	8005358 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e01b      	b.n	8005390 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	daf2      	bge.n	8005346 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	019b      	lsls	r3, r3, #6
 8005368:	f043 0220 	orr.w	r2, r3, #32
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4a08      	ldr	r2, [pc, #32]	; (800539c <USB_FlushTxFifo+0x64>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e006      	b.n	8005390 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b20      	cmp	r3, #32
 800538c:	d0f0      	beq.n	8005370 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	00030d40 	.word	0x00030d40

080053a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3301      	adds	r3, #1
 80053b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4a11      	ldr	r2, [pc, #68]	; (80053fc <USB_FlushRxFifo+0x5c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d901      	bls.n	80053be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e018      	b.n	80053f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	daf2      	bge.n	80053ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2210      	movs	r2, #16
 80053ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3301      	adds	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4a08      	ldr	r2, [pc, #32]	; (80053fc <USB_FlushRxFifo+0x5c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e006      	b.n	80053f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	2b10      	cmp	r3, #16
 80053ec:	d0f0      	beq.n	80053d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	00030d40 	.word	0x00030d40

08005400 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005420:	4313      	orrs	r3, r2
 8005422:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800544c:	f023 0303 	bic.w	r3, r3, #3
 8005450:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	f003 0301 	and.w	r3, r3, #1
}
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <USB_CoreReset+0x64>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e01b      	b.n	80054e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	daf2      	bge.n	800549c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f043 0201 	orr.w	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3301      	adds	r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4a09      	ldr	r2, [pc, #36]	; (80054f4 <USB_CoreReset+0x64>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d901      	bls.n	80054d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e006      	b.n	80054e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d0f0      	beq.n	80054c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	00030d40 	.word	0x00030d40

080054f8 <malloc>:
 80054f8:	4b02      	ldr	r3, [pc, #8]	; (8005504 <malloc+0xc>)
 80054fa:	4601      	mov	r1, r0
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	f000 b823 	b.w	8005548 <_malloc_r>
 8005502:	bf00      	nop
 8005504:	20000064 	.word	0x20000064

08005508 <sbrk_aligned>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4e0e      	ldr	r6, [pc, #56]	; (8005544 <sbrk_aligned+0x3c>)
 800550c:	460c      	mov	r4, r1
 800550e:	6831      	ldr	r1, [r6, #0]
 8005510:	4605      	mov	r5, r0
 8005512:	b911      	cbnz	r1, 800551a <sbrk_aligned+0x12>
 8005514:	f000 fbd0 	bl	8005cb8 <_sbrk_r>
 8005518:	6030      	str	r0, [r6, #0]
 800551a:	4621      	mov	r1, r4
 800551c:	4628      	mov	r0, r5
 800551e:	f000 fbcb 	bl	8005cb8 <_sbrk_r>
 8005522:	1c43      	adds	r3, r0, #1
 8005524:	d00a      	beq.n	800553c <sbrk_aligned+0x34>
 8005526:	1cc4      	adds	r4, r0, #3
 8005528:	f024 0403 	bic.w	r4, r4, #3
 800552c:	42a0      	cmp	r0, r4
 800552e:	d007      	beq.n	8005540 <sbrk_aligned+0x38>
 8005530:	1a21      	subs	r1, r4, r0
 8005532:	4628      	mov	r0, r5
 8005534:	f000 fbc0 	bl	8005cb8 <_sbrk_r>
 8005538:	3001      	adds	r0, #1
 800553a:	d101      	bne.n	8005540 <sbrk_aligned+0x38>
 800553c:	f04f 34ff 	mov.w	r4, #4294967295
 8005540:	4620      	mov	r0, r4
 8005542:	bd70      	pop	{r4, r5, r6, pc}
 8005544:	20000910 	.word	0x20000910

08005548 <_malloc_r>:
 8005548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800554c:	1ccd      	adds	r5, r1, #3
 800554e:	f025 0503 	bic.w	r5, r5, #3
 8005552:	3508      	adds	r5, #8
 8005554:	2d0c      	cmp	r5, #12
 8005556:	bf38      	it	cc
 8005558:	250c      	movcc	r5, #12
 800555a:	2d00      	cmp	r5, #0
 800555c:	4607      	mov	r7, r0
 800555e:	db01      	blt.n	8005564 <_malloc_r+0x1c>
 8005560:	42a9      	cmp	r1, r5
 8005562:	d905      	bls.n	8005570 <_malloc_r+0x28>
 8005564:	230c      	movs	r3, #12
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	2600      	movs	r6, #0
 800556a:	4630      	mov	r0, r6
 800556c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005570:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005644 <_malloc_r+0xfc>
 8005574:	f000 f868 	bl	8005648 <__malloc_lock>
 8005578:	f8d8 3000 	ldr.w	r3, [r8]
 800557c:	461c      	mov	r4, r3
 800557e:	bb5c      	cbnz	r4, 80055d8 <_malloc_r+0x90>
 8005580:	4629      	mov	r1, r5
 8005582:	4638      	mov	r0, r7
 8005584:	f7ff ffc0 	bl	8005508 <sbrk_aligned>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	4604      	mov	r4, r0
 800558c:	d155      	bne.n	800563a <_malloc_r+0xf2>
 800558e:	f8d8 4000 	ldr.w	r4, [r8]
 8005592:	4626      	mov	r6, r4
 8005594:	2e00      	cmp	r6, #0
 8005596:	d145      	bne.n	8005624 <_malloc_r+0xdc>
 8005598:	2c00      	cmp	r4, #0
 800559a:	d048      	beq.n	800562e <_malloc_r+0xe6>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	4631      	mov	r1, r6
 80055a0:	4638      	mov	r0, r7
 80055a2:	eb04 0903 	add.w	r9, r4, r3
 80055a6:	f000 fb87 	bl	8005cb8 <_sbrk_r>
 80055aa:	4581      	cmp	r9, r0
 80055ac:	d13f      	bne.n	800562e <_malloc_r+0xe6>
 80055ae:	6821      	ldr	r1, [r4, #0]
 80055b0:	1a6d      	subs	r5, r5, r1
 80055b2:	4629      	mov	r1, r5
 80055b4:	4638      	mov	r0, r7
 80055b6:	f7ff ffa7 	bl	8005508 <sbrk_aligned>
 80055ba:	3001      	adds	r0, #1
 80055bc:	d037      	beq.n	800562e <_malloc_r+0xe6>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	442b      	add	r3, r5
 80055c2:	6023      	str	r3, [r4, #0]
 80055c4:	f8d8 3000 	ldr.w	r3, [r8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d038      	beq.n	800563e <_malloc_r+0xf6>
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	42a2      	cmp	r2, r4
 80055d0:	d12b      	bne.n	800562a <_malloc_r+0xe2>
 80055d2:	2200      	movs	r2, #0
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	e00f      	b.n	80055f8 <_malloc_r+0xb0>
 80055d8:	6822      	ldr	r2, [r4, #0]
 80055da:	1b52      	subs	r2, r2, r5
 80055dc:	d41f      	bmi.n	800561e <_malloc_r+0xd6>
 80055de:	2a0b      	cmp	r2, #11
 80055e0:	d917      	bls.n	8005612 <_malloc_r+0xca>
 80055e2:	1961      	adds	r1, r4, r5
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	6025      	str	r5, [r4, #0]
 80055e8:	bf18      	it	ne
 80055ea:	6059      	strne	r1, [r3, #4]
 80055ec:	6863      	ldr	r3, [r4, #4]
 80055ee:	bf08      	it	eq
 80055f0:	f8c8 1000 	streq.w	r1, [r8]
 80055f4:	5162      	str	r2, [r4, r5]
 80055f6:	604b      	str	r3, [r1, #4]
 80055f8:	4638      	mov	r0, r7
 80055fa:	f104 060b 	add.w	r6, r4, #11
 80055fe:	f000 f829 	bl	8005654 <__malloc_unlock>
 8005602:	f026 0607 	bic.w	r6, r6, #7
 8005606:	1d23      	adds	r3, r4, #4
 8005608:	1af2      	subs	r2, r6, r3
 800560a:	d0ae      	beq.n	800556a <_malloc_r+0x22>
 800560c:	1b9b      	subs	r3, r3, r6
 800560e:	50a3      	str	r3, [r4, r2]
 8005610:	e7ab      	b.n	800556a <_malloc_r+0x22>
 8005612:	42a3      	cmp	r3, r4
 8005614:	6862      	ldr	r2, [r4, #4]
 8005616:	d1dd      	bne.n	80055d4 <_malloc_r+0x8c>
 8005618:	f8c8 2000 	str.w	r2, [r8]
 800561c:	e7ec      	b.n	80055f8 <_malloc_r+0xb0>
 800561e:	4623      	mov	r3, r4
 8005620:	6864      	ldr	r4, [r4, #4]
 8005622:	e7ac      	b.n	800557e <_malloc_r+0x36>
 8005624:	4634      	mov	r4, r6
 8005626:	6876      	ldr	r6, [r6, #4]
 8005628:	e7b4      	b.n	8005594 <_malloc_r+0x4c>
 800562a:	4613      	mov	r3, r2
 800562c:	e7cc      	b.n	80055c8 <_malloc_r+0x80>
 800562e:	230c      	movs	r3, #12
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	4638      	mov	r0, r7
 8005634:	f000 f80e 	bl	8005654 <__malloc_unlock>
 8005638:	e797      	b.n	800556a <_malloc_r+0x22>
 800563a:	6025      	str	r5, [r4, #0]
 800563c:	e7dc      	b.n	80055f8 <_malloc_r+0xb0>
 800563e:	605b      	str	r3, [r3, #4]
 8005640:	deff      	udf	#255	; 0xff
 8005642:	bf00      	nop
 8005644:	2000090c 	.word	0x2000090c

08005648 <__malloc_lock>:
 8005648:	4801      	ldr	r0, [pc, #4]	; (8005650 <__malloc_lock+0x8>)
 800564a:	f000 bb82 	b.w	8005d52 <__retarget_lock_acquire_recursive>
 800564e:	bf00      	nop
 8005650:	20000a54 	.word	0x20000a54

08005654 <__malloc_unlock>:
 8005654:	4801      	ldr	r0, [pc, #4]	; (800565c <__malloc_unlock+0x8>)
 8005656:	f000 bb7d 	b.w	8005d54 <__retarget_lock_release_recursive>
 800565a:	bf00      	nop
 800565c:	20000a54 	.word	0x20000a54

08005660 <_strtol_l.constprop.0>:
 8005660:	2b01      	cmp	r3, #1
 8005662:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005666:	d001      	beq.n	800566c <_strtol_l.constprop.0+0xc>
 8005668:	2b24      	cmp	r3, #36	; 0x24
 800566a:	d906      	bls.n	800567a <_strtol_l.constprop.0+0x1a>
 800566c:	f000 fb46 	bl	8005cfc <__errno>
 8005670:	2316      	movs	r3, #22
 8005672:	6003      	str	r3, [r0, #0]
 8005674:	2000      	movs	r0, #0
 8005676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005760 <_strtol_l.constprop.0+0x100>
 800567e:	460d      	mov	r5, r1
 8005680:	462e      	mov	r6, r5
 8005682:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005686:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800568a:	f017 0708 	ands.w	r7, r7, #8
 800568e:	d1f7      	bne.n	8005680 <_strtol_l.constprop.0+0x20>
 8005690:	2c2d      	cmp	r4, #45	; 0x2d
 8005692:	d132      	bne.n	80056fa <_strtol_l.constprop.0+0x9a>
 8005694:	782c      	ldrb	r4, [r5, #0]
 8005696:	2701      	movs	r7, #1
 8005698:	1cb5      	adds	r5, r6, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d05b      	beq.n	8005756 <_strtol_l.constprop.0+0xf6>
 800569e:	2b10      	cmp	r3, #16
 80056a0:	d109      	bne.n	80056b6 <_strtol_l.constprop.0+0x56>
 80056a2:	2c30      	cmp	r4, #48	; 0x30
 80056a4:	d107      	bne.n	80056b6 <_strtol_l.constprop.0+0x56>
 80056a6:	782c      	ldrb	r4, [r5, #0]
 80056a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80056ac:	2c58      	cmp	r4, #88	; 0x58
 80056ae:	d14d      	bne.n	800574c <_strtol_l.constprop.0+0xec>
 80056b0:	786c      	ldrb	r4, [r5, #1]
 80056b2:	2310      	movs	r3, #16
 80056b4:	3502      	adds	r5, #2
 80056b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80056ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80056be:	f04f 0e00 	mov.w	lr, #0
 80056c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80056c6:	4676      	mov	r6, lr
 80056c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80056cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80056d0:	f1bc 0f09 	cmp.w	ip, #9
 80056d4:	d816      	bhi.n	8005704 <_strtol_l.constprop.0+0xa4>
 80056d6:	4664      	mov	r4, ip
 80056d8:	42a3      	cmp	r3, r4
 80056da:	dd24      	ble.n	8005726 <_strtol_l.constprop.0+0xc6>
 80056dc:	f1be 3fff 	cmp.w	lr, #4294967295
 80056e0:	d008      	beq.n	80056f4 <_strtol_l.constprop.0+0x94>
 80056e2:	45b1      	cmp	r9, r6
 80056e4:	d31c      	bcc.n	8005720 <_strtol_l.constprop.0+0xc0>
 80056e6:	d101      	bne.n	80056ec <_strtol_l.constprop.0+0x8c>
 80056e8:	45a2      	cmp	sl, r4
 80056ea:	db19      	blt.n	8005720 <_strtol_l.constprop.0+0xc0>
 80056ec:	fb06 4603 	mla	r6, r6, r3, r4
 80056f0:	f04f 0e01 	mov.w	lr, #1
 80056f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056f8:	e7e8      	b.n	80056cc <_strtol_l.constprop.0+0x6c>
 80056fa:	2c2b      	cmp	r4, #43	; 0x2b
 80056fc:	bf04      	itt	eq
 80056fe:	782c      	ldrbeq	r4, [r5, #0]
 8005700:	1cb5      	addeq	r5, r6, #2
 8005702:	e7ca      	b.n	800569a <_strtol_l.constprop.0+0x3a>
 8005704:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005708:	f1bc 0f19 	cmp.w	ip, #25
 800570c:	d801      	bhi.n	8005712 <_strtol_l.constprop.0+0xb2>
 800570e:	3c37      	subs	r4, #55	; 0x37
 8005710:	e7e2      	b.n	80056d8 <_strtol_l.constprop.0+0x78>
 8005712:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005716:	f1bc 0f19 	cmp.w	ip, #25
 800571a:	d804      	bhi.n	8005726 <_strtol_l.constprop.0+0xc6>
 800571c:	3c57      	subs	r4, #87	; 0x57
 800571e:	e7db      	b.n	80056d8 <_strtol_l.constprop.0+0x78>
 8005720:	f04f 3eff 	mov.w	lr, #4294967295
 8005724:	e7e6      	b.n	80056f4 <_strtol_l.constprop.0+0x94>
 8005726:	f1be 3fff 	cmp.w	lr, #4294967295
 800572a:	d105      	bne.n	8005738 <_strtol_l.constprop.0+0xd8>
 800572c:	2322      	movs	r3, #34	; 0x22
 800572e:	6003      	str	r3, [r0, #0]
 8005730:	4646      	mov	r6, r8
 8005732:	b942      	cbnz	r2, 8005746 <_strtol_l.constprop.0+0xe6>
 8005734:	4630      	mov	r0, r6
 8005736:	e79e      	b.n	8005676 <_strtol_l.constprop.0+0x16>
 8005738:	b107      	cbz	r7, 800573c <_strtol_l.constprop.0+0xdc>
 800573a:	4276      	negs	r6, r6
 800573c:	2a00      	cmp	r2, #0
 800573e:	d0f9      	beq.n	8005734 <_strtol_l.constprop.0+0xd4>
 8005740:	f1be 0f00 	cmp.w	lr, #0
 8005744:	d000      	beq.n	8005748 <_strtol_l.constprop.0+0xe8>
 8005746:	1e69      	subs	r1, r5, #1
 8005748:	6011      	str	r1, [r2, #0]
 800574a:	e7f3      	b.n	8005734 <_strtol_l.constprop.0+0xd4>
 800574c:	2430      	movs	r4, #48	; 0x30
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1b1      	bne.n	80056b6 <_strtol_l.constprop.0+0x56>
 8005752:	2308      	movs	r3, #8
 8005754:	e7af      	b.n	80056b6 <_strtol_l.constprop.0+0x56>
 8005756:	2c30      	cmp	r4, #48	; 0x30
 8005758:	d0a5      	beq.n	80056a6 <_strtol_l.constprop.0+0x46>
 800575a:	230a      	movs	r3, #10
 800575c:	e7ab      	b.n	80056b6 <_strtol_l.constprop.0+0x56>
 800575e:	bf00      	nop
 8005760:	080070dd 	.word	0x080070dd

08005764 <_strtol_r>:
 8005764:	f7ff bf7c 	b.w	8005660 <_strtol_l.constprop.0>

08005768 <std>:
 8005768:	2300      	movs	r3, #0
 800576a:	b510      	push	{r4, lr}
 800576c:	4604      	mov	r4, r0
 800576e:	e9c0 3300 	strd	r3, r3, [r0]
 8005772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005776:	6083      	str	r3, [r0, #8]
 8005778:	8181      	strh	r1, [r0, #12]
 800577a:	6643      	str	r3, [r0, #100]	; 0x64
 800577c:	81c2      	strh	r2, [r0, #14]
 800577e:	6183      	str	r3, [r0, #24]
 8005780:	4619      	mov	r1, r3
 8005782:	2208      	movs	r2, #8
 8005784:	305c      	adds	r0, #92	; 0x5c
 8005786:	f000 fa5b 	bl	8005c40 <memset>
 800578a:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <std+0x58>)
 800578c:	6263      	str	r3, [r4, #36]	; 0x24
 800578e:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <std+0x5c>)
 8005790:	62a3      	str	r3, [r4, #40]	; 0x28
 8005792:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <std+0x60>)
 8005794:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005796:	4b0d      	ldr	r3, [pc, #52]	; (80057cc <std+0x64>)
 8005798:	6323      	str	r3, [r4, #48]	; 0x30
 800579a:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <std+0x68>)
 800579c:	6224      	str	r4, [r4, #32]
 800579e:	429c      	cmp	r4, r3
 80057a0:	d006      	beq.n	80057b0 <std+0x48>
 80057a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80057a6:	4294      	cmp	r4, r2
 80057a8:	d002      	beq.n	80057b0 <std+0x48>
 80057aa:	33d0      	adds	r3, #208	; 0xd0
 80057ac:	429c      	cmp	r4, r3
 80057ae:	d105      	bne.n	80057bc <std+0x54>
 80057b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b8:	f000 baca 	b.w	8005d50 <__retarget_lock_init_recursive>
 80057bc:	bd10      	pop	{r4, pc}
 80057be:	bf00      	nop
 80057c0:	08005a91 	.word	0x08005a91
 80057c4:	08005ab3 	.word	0x08005ab3
 80057c8:	08005aeb 	.word	0x08005aeb
 80057cc:	08005b0f 	.word	0x08005b0f
 80057d0:	20000914 	.word	0x20000914

080057d4 <stdio_exit_handler>:
 80057d4:	4a02      	ldr	r2, [pc, #8]	; (80057e0 <stdio_exit_handler+0xc>)
 80057d6:	4903      	ldr	r1, [pc, #12]	; (80057e4 <stdio_exit_handler+0x10>)
 80057d8:	4803      	ldr	r0, [pc, #12]	; (80057e8 <stdio_exit_handler+0x14>)
 80057da:	f000 b869 	b.w	80058b0 <_fwalk_sglue>
 80057de:	bf00      	nop
 80057e0:	2000000c 	.word	0x2000000c
 80057e4:	08006ac9 	.word	0x08006ac9
 80057e8:	20000018 	.word	0x20000018

080057ec <cleanup_stdio>:
 80057ec:	6841      	ldr	r1, [r0, #4]
 80057ee:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <cleanup_stdio+0x34>)
 80057f0:	4299      	cmp	r1, r3
 80057f2:	b510      	push	{r4, lr}
 80057f4:	4604      	mov	r4, r0
 80057f6:	d001      	beq.n	80057fc <cleanup_stdio+0x10>
 80057f8:	f001 f966 	bl	8006ac8 <_fflush_r>
 80057fc:	68a1      	ldr	r1, [r4, #8]
 80057fe:	4b09      	ldr	r3, [pc, #36]	; (8005824 <cleanup_stdio+0x38>)
 8005800:	4299      	cmp	r1, r3
 8005802:	d002      	beq.n	800580a <cleanup_stdio+0x1e>
 8005804:	4620      	mov	r0, r4
 8005806:	f001 f95f 	bl	8006ac8 <_fflush_r>
 800580a:	68e1      	ldr	r1, [r4, #12]
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <cleanup_stdio+0x3c>)
 800580e:	4299      	cmp	r1, r3
 8005810:	d004      	beq.n	800581c <cleanup_stdio+0x30>
 8005812:	4620      	mov	r0, r4
 8005814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005818:	f001 b956 	b.w	8006ac8 <_fflush_r>
 800581c:	bd10      	pop	{r4, pc}
 800581e:	bf00      	nop
 8005820:	20000914 	.word	0x20000914
 8005824:	2000097c 	.word	0x2000097c
 8005828:	200009e4 	.word	0x200009e4

0800582c <global_stdio_init.part.0>:
 800582c:	b510      	push	{r4, lr}
 800582e:	4b0b      	ldr	r3, [pc, #44]	; (800585c <global_stdio_init.part.0+0x30>)
 8005830:	4c0b      	ldr	r4, [pc, #44]	; (8005860 <global_stdio_init.part.0+0x34>)
 8005832:	4a0c      	ldr	r2, [pc, #48]	; (8005864 <global_stdio_init.part.0+0x38>)
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	4620      	mov	r0, r4
 8005838:	2200      	movs	r2, #0
 800583a:	2104      	movs	r1, #4
 800583c:	f7ff ff94 	bl	8005768 <std>
 8005840:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005844:	2201      	movs	r2, #1
 8005846:	2109      	movs	r1, #9
 8005848:	f7ff ff8e 	bl	8005768 <std>
 800584c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005850:	2202      	movs	r2, #2
 8005852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005856:	2112      	movs	r1, #18
 8005858:	f7ff bf86 	b.w	8005768 <std>
 800585c:	20000a4c 	.word	0x20000a4c
 8005860:	20000914 	.word	0x20000914
 8005864:	080057d5 	.word	0x080057d5

08005868 <__sfp_lock_acquire>:
 8005868:	4801      	ldr	r0, [pc, #4]	; (8005870 <__sfp_lock_acquire+0x8>)
 800586a:	f000 ba72 	b.w	8005d52 <__retarget_lock_acquire_recursive>
 800586e:	bf00      	nop
 8005870:	20000a55 	.word	0x20000a55

08005874 <__sfp_lock_release>:
 8005874:	4801      	ldr	r0, [pc, #4]	; (800587c <__sfp_lock_release+0x8>)
 8005876:	f000 ba6d 	b.w	8005d54 <__retarget_lock_release_recursive>
 800587a:	bf00      	nop
 800587c:	20000a55 	.word	0x20000a55

08005880 <__sinit>:
 8005880:	b510      	push	{r4, lr}
 8005882:	4604      	mov	r4, r0
 8005884:	f7ff fff0 	bl	8005868 <__sfp_lock_acquire>
 8005888:	6a23      	ldr	r3, [r4, #32]
 800588a:	b11b      	cbz	r3, 8005894 <__sinit+0x14>
 800588c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005890:	f7ff bff0 	b.w	8005874 <__sfp_lock_release>
 8005894:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <__sinit+0x28>)
 8005896:	6223      	str	r3, [r4, #32]
 8005898:	4b04      	ldr	r3, [pc, #16]	; (80058ac <__sinit+0x2c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f5      	bne.n	800588c <__sinit+0xc>
 80058a0:	f7ff ffc4 	bl	800582c <global_stdio_init.part.0>
 80058a4:	e7f2      	b.n	800588c <__sinit+0xc>
 80058a6:	bf00      	nop
 80058a8:	080057ed 	.word	0x080057ed
 80058ac:	20000a4c 	.word	0x20000a4c

080058b0 <_fwalk_sglue>:
 80058b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b4:	4607      	mov	r7, r0
 80058b6:	4688      	mov	r8, r1
 80058b8:	4614      	mov	r4, r2
 80058ba:	2600      	movs	r6, #0
 80058bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058c0:	f1b9 0901 	subs.w	r9, r9, #1
 80058c4:	d505      	bpl.n	80058d2 <_fwalk_sglue+0x22>
 80058c6:	6824      	ldr	r4, [r4, #0]
 80058c8:	2c00      	cmp	r4, #0
 80058ca:	d1f7      	bne.n	80058bc <_fwalk_sglue+0xc>
 80058cc:	4630      	mov	r0, r6
 80058ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058d2:	89ab      	ldrh	r3, [r5, #12]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d907      	bls.n	80058e8 <_fwalk_sglue+0x38>
 80058d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058dc:	3301      	adds	r3, #1
 80058de:	d003      	beq.n	80058e8 <_fwalk_sglue+0x38>
 80058e0:	4629      	mov	r1, r5
 80058e2:	4638      	mov	r0, r7
 80058e4:	47c0      	blx	r8
 80058e6:	4306      	orrs	r6, r0
 80058e8:	3568      	adds	r5, #104	; 0x68
 80058ea:	e7e9      	b.n	80058c0 <_fwalk_sglue+0x10>

080058ec <iprintf>:
 80058ec:	b40f      	push	{r0, r1, r2, r3}
 80058ee:	b507      	push	{r0, r1, r2, lr}
 80058f0:	4906      	ldr	r1, [pc, #24]	; (800590c <iprintf+0x20>)
 80058f2:	ab04      	add	r3, sp, #16
 80058f4:	6808      	ldr	r0, [r1, #0]
 80058f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058fa:	6881      	ldr	r1, [r0, #8]
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	f000 faaf 	bl	8005e60 <_vfiprintf_r>
 8005902:	b003      	add	sp, #12
 8005904:	f85d eb04 	ldr.w	lr, [sp], #4
 8005908:	b004      	add	sp, #16
 800590a:	4770      	bx	lr
 800590c:	20000064 	.word	0x20000064

08005910 <iscanf>:
 8005910:	b40f      	push	{r0, r1, r2, r3}
 8005912:	b507      	push	{r0, r1, r2, lr}
 8005914:	4906      	ldr	r1, [pc, #24]	; (8005930 <iscanf+0x20>)
 8005916:	ab04      	add	r3, sp, #16
 8005918:	6808      	ldr	r0, [r1, #0]
 800591a:	f853 2b04 	ldr.w	r2, [r3], #4
 800591e:	6841      	ldr	r1, [r0, #4]
 8005920:	9301      	str	r3, [sp, #4]
 8005922:	f000 fee9 	bl	80066f8 <_vfiscanf_r>
 8005926:	b003      	add	sp, #12
 8005928:	f85d eb04 	ldr.w	lr, [sp], #4
 800592c:	b004      	add	sp, #16
 800592e:	4770      	bx	lr
 8005930:	20000064 	.word	0x20000064

08005934 <setvbuf>:
 8005934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005938:	461d      	mov	r5, r3
 800593a:	4b54      	ldr	r3, [pc, #336]	; (8005a8c <setvbuf+0x158>)
 800593c:	681f      	ldr	r7, [r3, #0]
 800593e:	4604      	mov	r4, r0
 8005940:	460e      	mov	r6, r1
 8005942:	4690      	mov	r8, r2
 8005944:	b127      	cbz	r7, 8005950 <setvbuf+0x1c>
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	b913      	cbnz	r3, 8005950 <setvbuf+0x1c>
 800594a:	4638      	mov	r0, r7
 800594c:	f7ff ff98 	bl	8005880 <__sinit>
 8005950:	f1b8 0f02 	cmp.w	r8, #2
 8005954:	d006      	beq.n	8005964 <setvbuf+0x30>
 8005956:	f1b8 0f01 	cmp.w	r8, #1
 800595a:	f200 8094 	bhi.w	8005a86 <setvbuf+0x152>
 800595e:	2d00      	cmp	r5, #0
 8005960:	f2c0 8091 	blt.w	8005a86 <setvbuf+0x152>
 8005964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005966:	07da      	lsls	r2, r3, #31
 8005968:	d405      	bmi.n	8005976 <setvbuf+0x42>
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	059b      	lsls	r3, r3, #22
 800596e:	d402      	bmi.n	8005976 <setvbuf+0x42>
 8005970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005972:	f000 f9ee 	bl	8005d52 <__retarget_lock_acquire_recursive>
 8005976:	4621      	mov	r1, r4
 8005978:	4638      	mov	r0, r7
 800597a:	f001 f8a5 	bl	8006ac8 <_fflush_r>
 800597e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005980:	b141      	cbz	r1, 8005994 <setvbuf+0x60>
 8005982:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005986:	4299      	cmp	r1, r3
 8005988:	d002      	beq.n	8005990 <setvbuf+0x5c>
 800598a:	4638      	mov	r0, r7
 800598c:	f000 f9f2 	bl	8005d74 <_free_r>
 8005990:	2300      	movs	r3, #0
 8005992:	6363      	str	r3, [r4, #52]	; 0x34
 8005994:	2300      	movs	r3, #0
 8005996:	61a3      	str	r3, [r4, #24]
 8005998:	6063      	str	r3, [r4, #4]
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	0618      	lsls	r0, r3, #24
 800599e:	d503      	bpl.n	80059a8 <setvbuf+0x74>
 80059a0:	6921      	ldr	r1, [r4, #16]
 80059a2:	4638      	mov	r0, r7
 80059a4:	f000 f9e6 	bl	8005d74 <_free_r>
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	f1b8 0f02 	cmp.w	r8, #2
 80059b6:	81a3      	strh	r3, [r4, #12]
 80059b8:	d05f      	beq.n	8005a7a <setvbuf+0x146>
 80059ba:	ab01      	add	r3, sp, #4
 80059bc:	466a      	mov	r2, sp
 80059be:	4621      	mov	r1, r4
 80059c0:	4638      	mov	r0, r7
 80059c2:	f001 f8a9 	bl	8006b18 <__swhatbuf_r>
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	4318      	orrs	r0, r3
 80059ca:	81a0      	strh	r0, [r4, #12]
 80059cc:	bb2d      	cbnz	r5, 8005a1a <setvbuf+0xe6>
 80059ce:	9d00      	ldr	r5, [sp, #0]
 80059d0:	4628      	mov	r0, r5
 80059d2:	f7ff fd91 	bl	80054f8 <malloc>
 80059d6:	4606      	mov	r6, r0
 80059d8:	2800      	cmp	r0, #0
 80059da:	d150      	bne.n	8005a7e <setvbuf+0x14a>
 80059dc:	f8dd 9000 	ldr.w	r9, [sp]
 80059e0:	45a9      	cmp	r9, r5
 80059e2:	d13e      	bne.n	8005a62 <setvbuf+0x12e>
 80059e4:	f04f 35ff 	mov.w	r5, #4294967295
 80059e8:	2200      	movs	r2, #0
 80059ea:	60a2      	str	r2, [r4, #8]
 80059ec:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80059f0:	6022      	str	r2, [r4, #0]
 80059f2:	6122      	str	r2, [r4, #16]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059fa:	6162      	str	r2, [r4, #20]
 80059fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059fe:	f043 0302 	orr.w	r3, r3, #2
 8005a02:	07d1      	lsls	r1, r2, #31
 8005a04:	81a3      	strh	r3, [r4, #12]
 8005a06:	d404      	bmi.n	8005a12 <setvbuf+0xde>
 8005a08:	059b      	lsls	r3, r3, #22
 8005a0a:	d402      	bmi.n	8005a12 <setvbuf+0xde>
 8005a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a0e:	f000 f9a1 	bl	8005d54 <__retarget_lock_release_recursive>
 8005a12:	4628      	mov	r0, r5
 8005a14:	b003      	add	sp, #12
 8005a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a1a:	2e00      	cmp	r6, #0
 8005a1c:	d0d8      	beq.n	80059d0 <setvbuf+0x9c>
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	b913      	cbnz	r3, 8005a28 <setvbuf+0xf4>
 8005a22:	4638      	mov	r0, r7
 8005a24:	f7ff ff2c 	bl	8005880 <__sinit>
 8005a28:	f1b8 0f01 	cmp.w	r8, #1
 8005a2c:	bf08      	it	eq
 8005a2e:	89a3      	ldrheq	r3, [r4, #12]
 8005a30:	6026      	str	r6, [r4, #0]
 8005a32:	bf04      	itt	eq
 8005a34:	f043 0301 	orreq.w	r3, r3, #1
 8005a38:	81a3      	strheq	r3, [r4, #12]
 8005a3a:	89a3      	ldrh	r3, [r4, #12]
 8005a3c:	f013 0208 	ands.w	r2, r3, #8
 8005a40:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005a44:	d01d      	beq.n	8005a82 <setvbuf+0x14e>
 8005a46:	07da      	lsls	r2, r3, #31
 8005a48:	bf41      	itttt	mi
 8005a4a:	2200      	movmi	r2, #0
 8005a4c:	426d      	negmi	r5, r5
 8005a4e:	60a2      	strmi	r2, [r4, #8]
 8005a50:	61a5      	strmi	r5, [r4, #24]
 8005a52:	bf58      	it	pl
 8005a54:	60a5      	strpl	r5, [r4, #8]
 8005a56:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005a58:	f015 0501 	ands.w	r5, r5, #1
 8005a5c:	d0d4      	beq.n	8005a08 <setvbuf+0xd4>
 8005a5e:	2500      	movs	r5, #0
 8005a60:	e7d7      	b.n	8005a12 <setvbuf+0xde>
 8005a62:	4648      	mov	r0, r9
 8005a64:	f7ff fd48 	bl	80054f8 <malloc>
 8005a68:	4606      	mov	r6, r0
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d0ba      	beq.n	80059e4 <setvbuf+0xb0>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a74:	81a3      	strh	r3, [r4, #12]
 8005a76:	464d      	mov	r5, r9
 8005a78:	e7d1      	b.n	8005a1e <setvbuf+0xea>
 8005a7a:	2500      	movs	r5, #0
 8005a7c:	e7b4      	b.n	80059e8 <setvbuf+0xb4>
 8005a7e:	46a9      	mov	r9, r5
 8005a80:	e7f5      	b.n	8005a6e <setvbuf+0x13a>
 8005a82:	60a2      	str	r2, [r4, #8]
 8005a84:	e7e7      	b.n	8005a56 <setvbuf+0x122>
 8005a86:	f04f 35ff 	mov.w	r5, #4294967295
 8005a8a:	e7c2      	b.n	8005a12 <setvbuf+0xde>
 8005a8c:	20000064 	.word	0x20000064

08005a90 <__sread>:
 8005a90:	b510      	push	{r4, lr}
 8005a92:	460c      	mov	r4, r1
 8005a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a98:	f000 f8fc 	bl	8005c94 <_read_r>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	bfab      	itete	ge
 8005aa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8005aa4:	181b      	addge	r3, r3, r0
 8005aa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005aaa:	bfac      	ite	ge
 8005aac:	6563      	strge	r3, [r4, #84]	; 0x54
 8005aae:	81a3      	strhlt	r3, [r4, #12]
 8005ab0:	bd10      	pop	{r4, pc}

08005ab2 <__swrite>:
 8005ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab6:	461f      	mov	r7, r3
 8005ab8:	898b      	ldrh	r3, [r1, #12]
 8005aba:	05db      	lsls	r3, r3, #23
 8005abc:	4605      	mov	r5, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	4616      	mov	r6, r2
 8005ac2:	d505      	bpl.n	8005ad0 <__swrite+0x1e>
 8005ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac8:	2302      	movs	r3, #2
 8005aca:	2200      	movs	r2, #0
 8005acc:	f000 f8d0 	bl	8005c70 <_lseek_r>
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ada:	81a3      	strh	r3, [r4, #12]
 8005adc:	4632      	mov	r2, r6
 8005ade:	463b      	mov	r3, r7
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae6:	f000 b8f7 	b.w	8005cd8 <_write_r>

08005aea <__sseek>:
 8005aea:	b510      	push	{r4, lr}
 8005aec:	460c      	mov	r4, r1
 8005aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af2:	f000 f8bd 	bl	8005c70 <_lseek_r>
 8005af6:	1c43      	adds	r3, r0, #1
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	bf15      	itete	ne
 8005afc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005afe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b06:	81a3      	strheq	r3, [r4, #12]
 8005b08:	bf18      	it	ne
 8005b0a:	81a3      	strhne	r3, [r4, #12]
 8005b0c:	bd10      	pop	{r4, pc}

08005b0e <__sclose>:
 8005b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b12:	f000 b89d 	b.w	8005c50 <_close_r>

08005b16 <__swbuf_r>:
 8005b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b18:	460e      	mov	r6, r1
 8005b1a:	4614      	mov	r4, r2
 8005b1c:	4605      	mov	r5, r0
 8005b1e:	b118      	cbz	r0, 8005b28 <__swbuf_r+0x12>
 8005b20:	6a03      	ldr	r3, [r0, #32]
 8005b22:	b90b      	cbnz	r3, 8005b28 <__swbuf_r+0x12>
 8005b24:	f7ff feac 	bl	8005880 <__sinit>
 8005b28:	69a3      	ldr	r3, [r4, #24]
 8005b2a:	60a3      	str	r3, [r4, #8]
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	071a      	lsls	r2, r3, #28
 8005b30:	d525      	bpl.n	8005b7e <__swbuf_r+0x68>
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	b31b      	cbz	r3, 8005b7e <__swbuf_r+0x68>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	6922      	ldr	r2, [r4, #16]
 8005b3a:	1a98      	subs	r0, r3, r2
 8005b3c:	6963      	ldr	r3, [r4, #20]
 8005b3e:	b2f6      	uxtb	r6, r6
 8005b40:	4283      	cmp	r3, r0
 8005b42:	4637      	mov	r7, r6
 8005b44:	dc04      	bgt.n	8005b50 <__swbuf_r+0x3a>
 8005b46:	4621      	mov	r1, r4
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 ffbd 	bl	8006ac8 <_fflush_r>
 8005b4e:	b9e0      	cbnz	r0, 8005b8a <__swbuf_r+0x74>
 8005b50:	68a3      	ldr	r3, [r4, #8]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	60a3      	str	r3, [r4, #8]
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	6022      	str	r2, [r4, #0]
 8005b5c:	701e      	strb	r6, [r3, #0]
 8005b5e:	6962      	ldr	r2, [r4, #20]
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d004      	beq.n	8005b70 <__swbuf_r+0x5a>
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	07db      	lsls	r3, r3, #31
 8005b6a:	d506      	bpl.n	8005b7a <__swbuf_r+0x64>
 8005b6c:	2e0a      	cmp	r6, #10
 8005b6e:	d104      	bne.n	8005b7a <__swbuf_r+0x64>
 8005b70:	4621      	mov	r1, r4
 8005b72:	4628      	mov	r0, r5
 8005b74:	f000 ffa8 	bl	8006ac8 <_fflush_r>
 8005b78:	b938      	cbnz	r0, 8005b8a <__swbuf_r+0x74>
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b7e:	4621      	mov	r1, r4
 8005b80:	4628      	mov	r0, r5
 8005b82:	f000 f805 	bl	8005b90 <__swsetup_r>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d0d5      	beq.n	8005b36 <__swbuf_r+0x20>
 8005b8a:	f04f 37ff 	mov.w	r7, #4294967295
 8005b8e:	e7f4      	b.n	8005b7a <__swbuf_r+0x64>

08005b90 <__swsetup_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4b2a      	ldr	r3, [pc, #168]	; (8005c3c <__swsetup_r+0xac>)
 8005b94:	4605      	mov	r5, r0
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	460c      	mov	r4, r1
 8005b9a:	b118      	cbz	r0, 8005ba4 <__swsetup_r+0x14>
 8005b9c:	6a03      	ldr	r3, [r0, #32]
 8005b9e:	b90b      	cbnz	r3, 8005ba4 <__swsetup_r+0x14>
 8005ba0:	f7ff fe6e 	bl	8005880 <__sinit>
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005baa:	0718      	lsls	r0, r3, #28
 8005bac:	d422      	bmi.n	8005bf4 <__swsetup_r+0x64>
 8005bae:	06d9      	lsls	r1, r3, #27
 8005bb0:	d407      	bmi.n	8005bc2 <__swsetup_r+0x32>
 8005bb2:	2309      	movs	r3, #9
 8005bb4:	602b      	str	r3, [r5, #0]
 8005bb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc0:	e034      	b.n	8005c2c <__swsetup_r+0x9c>
 8005bc2:	0758      	lsls	r0, r3, #29
 8005bc4:	d512      	bpl.n	8005bec <__swsetup_r+0x5c>
 8005bc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bc8:	b141      	cbz	r1, 8005bdc <__swsetup_r+0x4c>
 8005bca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bce:	4299      	cmp	r1, r3
 8005bd0:	d002      	beq.n	8005bd8 <__swsetup_r+0x48>
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f000 f8ce 	bl	8005d74 <_free_r>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	6363      	str	r3, [r4, #52]	; 0x34
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005be2:	81a3      	strh	r3, [r4, #12]
 8005be4:	2300      	movs	r3, #0
 8005be6:	6063      	str	r3, [r4, #4]
 8005be8:	6923      	ldr	r3, [r4, #16]
 8005bea:	6023      	str	r3, [r4, #0]
 8005bec:	89a3      	ldrh	r3, [r4, #12]
 8005bee:	f043 0308 	orr.w	r3, r3, #8
 8005bf2:	81a3      	strh	r3, [r4, #12]
 8005bf4:	6923      	ldr	r3, [r4, #16]
 8005bf6:	b94b      	cbnz	r3, 8005c0c <__swsetup_r+0x7c>
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c02:	d003      	beq.n	8005c0c <__swsetup_r+0x7c>
 8005c04:	4621      	mov	r1, r4
 8005c06:	4628      	mov	r0, r5
 8005c08:	f000 ffac 	bl	8006b64 <__smakebuf_r>
 8005c0c:	89a0      	ldrh	r0, [r4, #12]
 8005c0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c12:	f010 0301 	ands.w	r3, r0, #1
 8005c16:	d00a      	beq.n	8005c2e <__swsetup_r+0x9e>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60a3      	str	r3, [r4, #8]
 8005c1c:	6963      	ldr	r3, [r4, #20]
 8005c1e:	425b      	negs	r3, r3
 8005c20:	61a3      	str	r3, [r4, #24]
 8005c22:	6923      	ldr	r3, [r4, #16]
 8005c24:	b943      	cbnz	r3, 8005c38 <__swsetup_r+0xa8>
 8005c26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c2a:	d1c4      	bne.n	8005bb6 <__swsetup_r+0x26>
 8005c2c:	bd38      	pop	{r3, r4, r5, pc}
 8005c2e:	0781      	lsls	r1, r0, #30
 8005c30:	bf58      	it	pl
 8005c32:	6963      	ldrpl	r3, [r4, #20]
 8005c34:	60a3      	str	r3, [r4, #8]
 8005c36:	e7f4      	b.n	8005c22 <__swsetup_r+0x92>
 8005c38:	2000      	movs	r0, #0
 8005c3a:	e7f7      	b.n	8005c2c <__swsetup_r+0x9c>
 8005c3c:	20000064 	.word	0x20000064

08005c40 <memset>:
 8005c40:	4402      	add	r2, r0
 8005c42:	4603      	mov	r3, r0
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d100      	bne.n	8005c4a <memset+0xa>
 8005c48:	4770      	bx	lr
 8005c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c4e:	e7f9      	b.n	8005c44 <memset+0x4>

08005c50 <_close_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4d06      	ldr	r5, [pc, #24]	; (8005c6c <_close_r+0x1c>)
 8005c54:	2300      	movs	r3, #0
 8005c56:	4604      	mov	r4, r0
 8005c58:	4608      	mov	r0, r1
 8005c5a:	602b      	str	r3, [r5, #0]
 8005c5c:	f7fa ff94 	bl	8000b88 <_close>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d102      	bne.n	8005c6a <_close_r+0x1a>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	b103      	cbz	r3, 8005c6a <_close_r+0x1a>
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	20000a50 	.word	0x20000a50

08005c70 <_lseek_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4d07      	ldr	r5, [pc, #28]	; (8005c90 <_lseek_r+0x20>)
 8005c74:	4604      	mov	r4, r0
 8005c76:	4608      	mov	r0, r1
 8005c78:	4611      	mov	r1, r2
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	602a      	str	r2, [r5, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f7fa ff99 	bl	8000bb6 <_lseek>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	d102      	bne.n	8005c8e <_lseek_r+0x1e>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	b103      	cbz	r3, 8005c8e <_lseek_r+0x1e>
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	bd38      	pop	{r3, r4, r5, pc}
 8005c90:	20000a50 	.word	0x20000a50

08005c94 <_read_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4d07      	ldr	r5, [pc, #28]	; (8005cb4 <_read_r+0x20>)
 8005c98:	4604      	mov	r4, r0
 8005c9a:	4608      	mov	r0, r1
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	602a      	str	r2, [r5, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f7fa ff98 	bl	8000bd8 <_read>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d102      	bne.n	8005cb2 <_read_r+0x1e>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	b103      	cbz	r3, 8005cb2 <_read_r+0x1e>
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	20000a50 	.word	0x20000a50

08005cb8 <_sbrk_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4d06      	ldr	r5, [pc, #24]	; (8005cd4 <_sbrk_r+0x1c>)
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	602b      	str	r3, [r5, #0]
 8005cc4:	f7fb fa2a 	bl	800111c <_sbrk>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d102      	bne.n	8005cd2 <_sbrk_r+0x1a>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b103      	cbz	r3, 8005cd2 <_sbrk_r+0x1a>
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	20000a50 	.word	0x20000a50

08005cd8 <_write_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4d07      	ldr	r5, [pc, #28]	; (8005cf8 <_write_r+0x20>)
 8005cdc:	4604      	mov	r4, r0
 8005cde:	4608      	mov	r0, r1
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	602a      	str	r2, [r5, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f7fa ff22 	bl	8000b30 <_write>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d102      	bne.n	8005cf6 <_write_r+0x1e>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b103      	cbz	r3, 8005cf6 <_write_r+0x1e>
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	20000a50 	.word	0x20000a50

08005cfc <__errno>:
 8005cfc:	4b01      	ldr	r3, [pc, #4]	; (8005d04 <__errno+0x8>)
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	20000064 	.word	0x20000064

08005d08 <__libc_init_array>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	4d0d      	ldr	r5, [pc, #52]	; (8005d40 <__libc_init_array+0x38>)
 8005d0c:	4c0d      	ldr	r4, [pc, #52]	; (8005d44 <__libc_init_array+0x3c>)
 8005d0e:	1b64      	subs	r4, r4, r5
 8005d10:	10a4      	asrs	r4, r4, #2
 8005d12:	2600      	movs	r6, #0
 8005d14:	42a6      	cmp	r6, r4
 8005d16:	d109      	bne.n	8005d2c <__libc_init_array+0x24>
 8005d18:	4d0b      	ldr	r5, [pc, #44]	; (8005d48 <__libc_init_array+0x40>)
 8005d1a:	4c0c      	ldr	r4, [pc, #48]	; (8005d4c <__libc_init_array+0x44>)
 8005d1c:	f001 f9aa 	bl	8007074 <_init>
 8005d20:	1b64      	subs	r4, r4, r5
 8005d22:	10a4      	asrs	r4, r4, #2
 8005d24:	2600      	movs	r6, #0
 8005d26:	42a6      	cmp	r6, r4
 8005d28:	d105      	bne.n	8005d36 <__libc_init_array+0x2e>
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d30:	4798      	blx	r3
 8005d32:	3601      	adds	r6, #1
 8005d34:	e7ee      	b.n	8005d14 <__libc_init_array+0xc>
 8005d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d3a:	4798      	blx	r3
 8005d3c:	3601      	adds	r6, #1
 8005d3e:	e7f2      	b.n	8005d26 <__libc_init_array+0x1e>
 8005d40:	08007234 	.word	0x08007234
 8005d44:	08007234 	.word	0x08007234
 8005d48:	08007234 	.word	0x08007234
 8005d4c:	08007238 	.word	0x08007238

08005d50 <__retarget_lock_init_recursive>:
 8005d50:	4770      	bx	lr

08005d52 <__retarget_lock_acquire_recursive>:
 8005d52:	4770      	bx	lr

08005d54 <__retarget_lock_release_recursive>:
 8005d54:	4770      	bx	lr

08005d56 <memcpy>:
 8005d56:	440a      	add	r2, r1
 8005d58:	4291      	cmp	r1, r2
 8005d5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d5e:	d100      	bne.n	8005d62 <memcpy+0xc>
 8005d60:	4770      	bx	lr
 8005d62:	b510      	push	{r4, lr}
 8005d64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d6c:	4291      	cmp	r1, r2
 8005d6e:	d1f9      	bne.n	8005d64 <memcpy+0xe>
 8005d70:	bd10      	pop	{r4, pc}
	...

08005d74 <_free_r>:
 8005d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d76:	2900      	cmp	r1, #0
 8005d78:	d044      	beq.n	8005e04 <_free_r+0x90>
 8005d7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d7e:	9001      	str	r0, [sp, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f1a1 0404 	sub.w	r4, r1, #4
 8005d86:	bfb8      	it	lt
 8005d88:	18e4      	addlt	r4, r4, r3
 8005d8a:	f7ff fc5d 	bl	8005648 <__malloc_lock>
 8005d8e:	4a1e      	ldr	r2, [pc, #120]	; (8005e08 <_free_r+0x94>)
 8005d90:	9801      	ldr	r0, [sp, #4]
 8005d92:	6813      	ldr	r3, [r2, #0]
 8005d94:	b933      	cbnz	r3, 8005da4 <_free_r+0x30>
 8005d96:	6063      	str	r3, [r4, #4]
 8005d98:	6014      	str	r4, [r2, #0]
 8005d9a:	b003      	add	sp, #12
 8005d9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005da0:	f7ff bc58 	b.w	8005654 <__malloc_unlock>
 8005da4:	42a3      	cmp	r3, r4
 8005da6:	d908      	bls.n	8005dba <_free_r+0x46>
 8005da8:	6825      	ldr	r5, [r4, #0]
 8005daa:	1961      	adds	r1, r4, r5
 8005dac:	428b      	cmp	r3, r1
 8005dae:	bf01      	itttt	eq
 8005db0:	6819      	ldreq	r1, [r3, #0]
 8005db2:	685b      	ldreq	r3, [r3, #4]
 8005db4:	1949      	addeq	r1, r1, r5
 8005db6:	6021      	streq	r1, [r4, #0]
 8005db8:	e7ed      	b.n	8005d96 <_free_r+0x22>
 8005dba:	461a      	mov	r2, r3
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	b10b      	cbz	r3, 8005dc4 <_free_r+0x50>
 8005dc0:	42a3      	cmp	r3, r4
 8005dc2:	d9fa      	bls.n	8005dba <_free_r+0x46>
 8005dc4:	6811      	ldr	r1, [r2, #0]
 8005dc6:	1855      	adds	r5, r2, r1
 8005dc8:	42a5      	cmp	r5, r4
 8005dca:	d10b      	bne.n	8005de4 <_free_r+0x70>
 8005dcc:	6824      	ldr	r4, [r4, #0]
 8005dce:	4421      	add	r1, r4
 8005dd0:	1854      	adds	r4, r2, r1
 8005dd2:	42a3      	cmp	r3, r4
 8005dd4:	6011      	str	r1, [r2, #0]
 8005dd6:	d1e0      	bne.n	8005d9a <_free_r+0x26>
 8005dd8:	681c      	ldr	r4, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	6053      	str	r3, [r2, #4]
 8005dde:	440c      	add	r4, r1
 8005de0:	6014      	str	r4, [r2, #0]
 8005de2:	e7da      	b.n	8005d9a <_free_r+0x26>
 8005de4:	d902      	bls.n	8005dec <_free_r+0x78>
 8005de6:	230c      	movs	r3, #12
 8005de8:	6003      	str	r3, [r0, #0]
 8005dea:	e7d6      	b.n	8005d9a <_free_r+0x26>
 8005dec:	6825      	ldr	r5, [r4, #0]
 8005dee:	1961      	adds	r1, r4, r5
 8005df0:	428b      	cmp	r3, r1
 8005df2:	bf04      	itt	eq
 8005df4:	6819      	ldreq	r1, [r3, #0]
 8005df6:	685b      	ldreq	r3, [r3, #4]
 8005df8:	6063      	str	r3, [r4, #4]
 8005dfa:	bf04      	itt	eq
 8005dfc:	1949      	addeq	r1, r1, r5
 8005dfe:	6021      	streq	r1, [r4, #0]
 8005e00:	6054      	str	r4, [r2, #4]
 8005e02:	e7ca      	b.n	8005d9a <_free_r+0x26>
 8005e04:	b003      	add	sp, #12
 8005e06:	bd30      	pop	{r4, r5, pc}
 8005e08:	2000090c 	.word	0x2000090c

08005e0c <__sfputc_r>:
 8005e0c:	6893      	ldr	r3, [r2, #8]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	b410      	push	{r4}
 8005e14:	6093      	str	r3, [r2, #8]
 8005e16:	da08      	bge.n	8005e2a <__sfputc_r+0x1e>
 8005e18:	6994      	ldr	r4, [r2, #24]
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	db01      	blt.n	8005e22 <__sfputc_r+0x16>
 8005e1e:	290a      	cmp	r1, #10
 8005e20:	d103      	bne.n	8005e2a <__sfputc_r+0x1e>
 8005e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e26:	f7ff be76 	b.w	8005b16 <__swbuf_r>
 8005e2a:	6813      	ldr	r3, [r2, #0]
 8005e2c:	1c58      	adds	r0, r3, #1
 8005e2e:	6010      	str	r0, [r2, #0]
 8005e30:	7019      	strb	r1, [r3, #0]
 8005e32:	4608      	mov	r0, r1
 8005e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <__sfputs_r>:
 8005e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	460f      	mov	r7, r1
 8005e40:	4614      	mov	r4, r2
 8005e42:	18d5      	adds	r5, r2, r3
 8005e44:	42ac      	cmp	r4, r5
 8005e46:	d101      	bne.n	8005e4c <__sfputs_r+0x12>
 8005e48:	2000      	movs	r0, #0
 8005e4a:	e007      	b.n	8005e5c <__sfputs_r+0x22>
 8005e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e50:	463a      	mov	r2, r7
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7ff ffda 	bl	8005e0c <__sfputc_r>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d1f3      	bne.n	8005e44 <__sfputs_r+0xa>
 8005e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e60 <_vfiprintf_r>:
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	460d      	mov	r5, r1
 8005e66:	b09d      	sub	sp, #116	; 0x74
 8005e68:	4614      	mov	r4, r2
 8005e6a:	4698      	mov	r8, r3
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	b118      	cbz	r0, 8005e78 <_vfiprintf_r+0x18>
 8005e70:	6a03      	ldr	r3, [r0, #32]
 8005e72:	b90b      	cbnz	r3, 8005e78 <_vfiprintf_r+0x18>
 8005e74:	f7ff fd04 	bl	8005880 <__sinit>
 8005e78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e7a:	07d9      	lsls	r1, r3, #31
 8005e7c:	d405      	bmi.n	8005e8a <_vfiprintf_r+0x2a>
 8005e7e:	89ab      	ldrh	r3, [r5, #12]
 8005e80:	059a      	lsls	r2, r3, #22
 8005e82:	d402      	bmi.n	8005e8a <_vfiprintf_r+0x2a>
 8005e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e86:	f7ff ff64 	bl	8005d52 <__retarget_lock_acquire_recursive>
 8005e8a:	89ab      	ldrh	r3, [r5, #12]
 8005e8c:	071b      	lsls	r3, r3, #28
 8005e8e:	d501      	bpl.n	8005e94 <_vfiprintf_r+0x34>
 8005e90:	692b      	ldr	r3, [r5, #16]
 8005e92:	b99b      	cbnz	r3, 8005ebc <_vfiprintf_r+0x5c>
 8005e94:	4629      	mov	r1, r5
 8005e96:	4630      	mov	r0, r6
 8005e98:	f7ff fe7a 	bl	8005b90 <__swsetup_r>
 8005e9c:	b170      	cbz	r0, 8005ebc <_vfiprintf_r+0x5c>
 8005e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ea0:	07dc      	lsls	r4, r3, #31
 8005ea2:	d504      	bpl.n	8005eae <_vfiprintf_r+0x4e>
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	b01d      	add	sp, #116	; 0x74
 8005eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eae:	89ab      	ldrh	r3, [r5, #12]
 8005eb0:	0598      	lsls	r0, r3, #22
 8005eb2:	d4f7      	bmi.n	8005ea4 <_vfiprintf_r+0x44>
 8005eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eb6:	f7ff ff4d 	bl	8005d54 <__retarget_lock_release_recursive>
 8005eba:	e7f3      	b.n	8005ea4 <_vfiprintf_r+0x44>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec0:	2320      	movs	r3, #32
 8005ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eca:	2330      	movs	r3, #48	; 0x30
 8005ecc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006080 <_vfiprintf_r+0x220>
 8005ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ed4:	f04f 0901 	mov.w	r9, #1
 8005ed8:	4623      	mov	r3, r4
 8005eda:	469a      	mov	sl, r3
 8005edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ee0:	b10a      	cbz	r2, 8005ee6 <_vfiprintf_r+0x86>
 8005ee2:	2a25      	cmp	r2, #37	; 0x25
 8005ee4:	d1f9      	bne.n	8005eda <_vfiprintf_r+0x7a>
 8005ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8005eea:	d00b      	beq.n	8005f04 <_vfiprintf_r+0xa4>
 8005eec:	465b      	mov	r3, fp
 8005eee:	4622      	mov	r2, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f7ff ffa1 	bl	8005e3a <__sfputs_r>
 8005ef8:	3001      	adds	r0, #1
 8005efa:	f000 80a9 	beq.w	8006050 <_vfiprintf_r+0x1f0>
 8005efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f00:	445a      	add	r2, fp
 8005f02:	9209      	str	r2, [sp, #36]	; 0x24
 8005f04:	f89a 3000 	ldrb.w	r3, [sl]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 80a1 	beq.w	8006050 <_vfiprintf_r+0x1f0>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f04f 32ff 	mov.w	r2, #4294967295
 8005f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f18:	f10a 0a01 	add.w	sl, sl, #1
 8005f1c:	9304      	str	r3, [sp, #16]
 8005f1e:	9307      	str	r3, [sp, #28]
 8005f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f24:	931a      	str	r3, [sp, #104]	; 0x68
 8005f26:	4654      	mov	r4, sl
 8005f28:	2205      	movs	r2, #5
 8005f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f2e:	4854      	ldr	r0, [pc, #336]	; (8006080 <_vfiprintf_r+0x220>)
 8005f30:	f7fa f986 	bl	8000240 <memchr>
 8005f34:	9a04      	ldr	r2, [sp, #16]
 8005f36:	b9d8      	cbnz	r0, 8005f70 <_vfiprintf_r+0x110>
 8005f38:	06d1      	lsls	r1, r2, #27
 8005f3a:	bf44      	itt	mi
 8005f3c:	2320      	movmi	r3, #32
 8005f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f42:	0713      	lsls	r3, r2, #28
 8005f44:	bf44      	itt	mi
 8005f46:	232b      	movmi	r3, #43	; 0x2b
 8005f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f50:	2b2a      	cmp	r3, #42	; 0x2a
 8005f52:	d015      	beq.n	8005f80 <_vfiprintf_r+0x120>
 8005f54:	9a07      	ldr	r2, [sp, #28]
 8005f56:	4654      	mov	r4, sl
 8005f58:	2000      	movs	r0, #0
 8005f5a:	f04f 0c0a 	mov.w	ip, #10
 8005f5e:	4621      	mov	r1, r4
 8005f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f64:	3b30      	subs	r3, #48	; 0x30
 8005f66:	2b09      	cmp	r3, #9
 8005f68:	d94d      	bls.n	8006006 <_vfiprintf_r+0x1a6>
 8005f6a:	b1b0      	cbz	r0, 8005f9a <_vfiprintf_r+0x13a>
 8005f6c:	9207      	str	r2, [sp, #28]
 8005f6e:	e014      	b.n	8005f9a <_vfiprintf_r+0x13a>
 8005f70:	eba0 0308 	sub.w	r3, r0, r8
 8005f74:	fa09 f303 	lsl.w	r3, r9, r3
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	9304      	str	r3, [sp, #16]
 8005f7c:	46a2      	mov	sl, r4
 8005f7e:	e7d2      	b.n	8005f26 <_vfiprintf_r+0xc6>
 8005f80:	9b03      	ldr	r3, [sp, #12]
 8005f82:	1d19      	adds	r1, r3, #4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	9103      	str	r1, [sp, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bfbb      	ittet	lt
 8005f8c:	425b      	neglt	r3, r3
 8005f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8005f92:	9307      	strge	r3, [sp, #28]
 8005f94:	9307      	strlt	r3, [sp, #28]
 8005f96:	bfb8      	it	lt
 8005f98:	9204      	strlt	r2, [sp, #16]
 8005f9a:	7823      	ldrb	r3, [r4, #0]
 8005f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f9e:	d10c      	bne.n	8005fba <_vfiprintf_r+0x15a>
 8005fa0:	7863      	ldrb	r3, [r4, #1]
 8005fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa4:	d134      	bne.n	8006010 <_vfiprintf_r+0x1b0>
 8005fa6:	9b03      	ldr	r3, [sp, #12]
 8005fa8:	1d1a      	adds	r2, r3, #4
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	9203      	str	r2, [sp, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bfb8      	it	lt
 8005fb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fb6:	3402      	adds	r4, #2
 8005fb8:	9305      	str	r3, [sp, #20]
 8005fba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006090 <_vfiprintf_r+0x230>
 8005fbe:	7821      	ldrb	r1, [r4, #0]
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	4650      	mov	r0, sl
 8005fc4:	f7fa f93c 	bl	8000240 <memchr>
 8005fc8:	b138      	cbz	r0, 8005fda <_vfiprintf_r+0x17a>
 8005fca:	9b04      	ldr	r3, [sp, #16]
 8005fcc:	eba0 000a 	sub.w	r0, r0, sl
 8005fd0:	2240      	movs	r2, #64	; 0x40
 8005fd2:	4082      	lsls	r2, r0
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	3401      	adds	r4, #1
 8005fd8:	9304      	str	r3, [sp, #16]
 8005fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fde:	4829      	ldr	r0, [pc, #164]	; (8006084 <_vfiprintf_r+0x224>)
 8005fe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fe4:	2206      	movs	r2, #6
 8005fe6:	f7fa f92b 	bl	8000240 <memchr>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d03f      	beq.n	800606e <_vfiprintf_r+0x20e>
 8005fee:	4b26      	ldr	r3, [pc, #152]	; (8006088 <_vfiprintf_r+0x228>)
 8005ff0:	bb1b      	cbnz	r3, 800603a <_vfiprintf_r+0x1da>
 8005ff2:	9b03      	ldr	r3, [sp, #12]
 8005ff4:	3307      	adds	r3, #7
 8005ff6:	f023 0307 	bic.w	r3, r3, #7
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	9303      	str	r3, [sp, #12]
 8005ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006000:	443b      	add	r3, r7
 8006002:	9309      	str	r3, [sp, #36]	; 0x24
 8006004:	e768      	b.n	8005ed8 <_vfiprintf_r+0x78>
 8006006:	fb0c 3202 	mla	r2, ip, r2, r3
 800600a:	460c      	mov	r4, r1
 800600c:	2001      	movs	r0, #1
 800600e:	e7a6      	b.n	8005f5e <_vfiprintf_r+0xfe>
 8006010:	2300      	movs	r3, #0
 8006012:	3401      	adds	r4, #1
 8006014:	9305      	str	r3, [sp, #20]
 8006016:	4619      	mov	r1, r3
 8006018:	f04f 0c0a 	mov.w	ip, #10
 800601c:	4620      	mov	r0, r4
 800601e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006022:	3a30      	subs	r2, #48	; 0x30
 8006024:	2a09      	cmp	r2, #9
 8006026:	d903      	bls.n	8006030 <_vfiprintf_r+0x1d0>
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0c6      	beq.n	8005fba <_vfiprintf_r+0x15a>
 800602c:	9105      	str	r1, [sp, #20]
 800602e:	e7c4      	b.n	8005fba <_vfiprintf_r+0x15a>
 8006030:	fb0c 2101 	mla	r1, ip, r1, r2
 8006034:	4604      	mov	r4, r0
 8006036:	2301      	movs	r3, #1
 8006038:	e7f0      	b.n	800601c <_vfiprintf_r+0x1bc>
 800603a:	ab03      	add	r3, sp, #12
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	462a      	mov	r2, r5
 8006040:	4b12      	ldr	r3, [pc, #72]	; (800608c <_vfiprintf_r+0x22c>)
 8006042:	a904      	add	r1, sp, #16
 8006044:	4630      	mov	r0, r6
 8006046:	f3af 8000 	nop.w
 800604a:	4607      	mov	r7, r0
 800604c:	1c78      	adds	r0, r7, #1
 800604e:	d1d6      	bne.n	8005ffe <_vfiprintf_r+0x19e>
 8006050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006052:	07d9      	lsls	r1, r3, #31
 8006054:	d405      	bmi.n	8006062 <_vfiprintf_r+0x202>
 8006056:	89ab      	ldrh	r3, [r5, #12]
 8006058:	059a      	lsls	r2, r3, #22
 800605a:	d402      	bmi.n	8006062 <_vfiprintf_r+0x202>
 800605c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800605e:	f7ff fe79 	bl	8005d54 <__retarget_lock_release_recursive>
 8006062:	89ab      	ldrh	r3, [r5, #12]
 8006064:	065b      	lsls	r3, r3, #25
 8006066:	f53f af1d 	bmi.w	8005ea4 <_vfiprintf_r+0x44>
 800606a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800606c:	e71c      	b.n	8005ea8 <_vfiprintf_r+0x48>
 800606e:	ab03      	add	r3, sp, #12
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	462a      	mov	r2, r5
 8006074:	4b05      	ldr	r3, [pc, #20]	; (800608c <_vfiprintf_r+0x22c>)
 8006076:	a904      	add	r1, sp, #16
 8006078:	4630      	mov	r0, r6
 800607a:	f000 f879 	bl	8006170 <_printf_i>
 800607e:	e7e4      	b.n	800604a <_vfiprintf_r+0x1ea>
 8006080:	080071dd 	.word	0x080071dd
 8006084:	080071e7 	.word	0x080071e7
 8006088:	00000000 	.word	0x00000000
 800608c:	08005e3b 	.word	0x08005e3b
 8006090:	080071e3 	.word	0x080071e3

08006094 <_printf_common>:
 8006094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	4616      	mov	r6, r2
 800609a:	4699      	mov	r9, r3
 800609c:	688a      	ldr	r2, [r1, #8]
 800609e:	690b      	ldr	r3, [r1, #16]
 80060a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060a4:	4293      	cmp	r3, r2
 80060a6:	bfb8      	it	lt
 80060a8:	4613      	movlt	r3, r2
 80060aa:	6033      	str	r3, [r6, #0]
 80060ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060b0:	4607      	mov	r7, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	b10a      	cbz	r2, 80060ba <_printf_common+0x26>
 80060b6:	3301      	adds	r3, #1
 80060b8:	6033      	str	r3, [r6, #0]
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	0699      	lsls	r1, r3, #26
 80060be:	bf42      	ittt	mi
 80060c0:	6833      	ldrmi	r3, [r6, #0]
 80060c2:	3302      	addmi	r3, #2
 80060c4:	6033      	strmi	r3, [r6, #0]
 80060c6:	6825      	ldr	r5, [r4, #0]
 80060c8:	f015 0506 	ands.w	r5, r5, #6
 80060cc:	d106      	bne.n	80060dc <_printf_common+0x48>
 80060ce:	f104 0a19 	add.w	sl, r4, #25
 80060d2:	68e3      	ldr	r3, [r4, #12]
 80060d4:	6832      	ldr	r2, [r6, #0]
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	42ab      	cmp	r3, r5
 80060da:	dc26      	bgt.n	800612a <_printf_common+0x96>
 80060dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060e0:	1e13      	subs	r3, r2, #0
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	bf18      	it	ne
 80060e6:	2301      	movne	r3, #1
 80060e8:	0692      	lsls	r2, r2, #26
 80060ea:	d42b      	bmi.n	8006144 <_printf_common+0xb0>
 80060ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060f0:	4649      	mov	r1, r9
 80060f2:	4638      	mov	r0, r7
 80060f4:	47c0      	blx	r8
 80060f6:	3001      	adds	r0, #1
 80060f8:	d01e      	beq.n	8006138 <_printf_common+0xa4>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	6922      	ldr	r2, [r4, #16]
 80060fe:	f003 0306 	and.w	r3, r3, #6
 8006102:	2b04      	cmp	r3, #4
 8006104:	bf02      	ittt	eq
 8006106:	68e5      	ldreq	r5, [r4, #12]
 8006108:	6833      	ldreq	r3, [r6, #0]
 800610a:	1aed      	subeq	r5, r5, r3
 800610c:	68a3      	ldr	r3, [r4, #8]
 800610e:	bf0c      	ite	eq
 8006110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006114:	2500      	movne	r5, #0
 8006116:	4293      	cmp	r3, r2
 8006118:	bfc4      	itt	gt
 800611a:	1a9b      	subgt	r3, r3, r2
 800611c:	18ed      	addgt	r5, r5, r3
 800611e:	2600      	movs	r6, #0
 8006120:	341a      	adds	r4, #26
 8006122:	42b5      	cmp	r5, r6
 8006124:	d11a      	bne.n	800615c <_printf_common+0xc8>
 8006126:	2000      	movs	r0, #0
 8006128:	e008      	b.n	800613c <_printf_common+0xa8>
 800612a:	2301      	movs	r3, #1
 800612c:	4652      	mov	r2, sl
 800612e:	4649      	mov	r1, r9
 8006130:	4638      	mov	r0, r7
 8006132:	47c0      	blx	r8
 8006134:	3001      	adds	r0, #1
 8006136:	d103      	bne.n	8006140 <_printf_common+0xac>
 8006138:	f04f 30ff 	mov.w	r0, #4294967295
 800613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006140:	3501      	adds	r5, #1
 8006142:	e7c6      	b.n	80060d2 <_printf_common+0x3e>
 8006144:	18e1      	adds	r1, r4, r3
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	2030      	movs	r0, #48	; 0x30
 800614a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800614e:	4422      	add	r2, r4
 8006150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006158:	3302      	adds	r3, #2
 800615a:	e7c7      	b.n	80060ec <_printf_common+0x58>
 800615c:	2301      	movs	r3, #1
 800615e:	4622      	mov	r2, r4
 8006160:	4649      	mov	r1, r9
 8006162:	4638      	mov	r0, r7
 8006164:	47c0      	blx	r8
 8006166:	3001      	adds	r0, #1
 8006168:	d0e6      	beq.n	8006138 <_printf_common+0xa4>
 800616a:	3601      	adds	r6, #1
 800616c:	e7d9      	b.n	8006122 <_printf_common+0x8e>
	...

08006170 <_printf_i>:
 8006170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006174:	7e0f      	ldrb	r7, [r1, #24]
 8006176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006178:	2f78      	cmp	r7, #120	; 0x78
 800617a:	4691      	mov	r9, r2
 800617c:	4680      	mov	r8, r0
 800617e:	460c      	mov	r4, r1
 8006180:	469a      	mov	sl, r3
 8006182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006186:	d807      	bhi.n	8006198 <_printf_i+0x28>
 8006188:	2f62      	cmp	r7, #98	; 0x62
 800618a:	d80a      	bhi.n	80061a2 <_printf_i+0x32>
 800618c:	2f00      	cmp	r7, #0
 800618e:	f000 80d4 	beq.w	800633a <_printf_i+0x1ca>
 8006192:	2f58      	cmp	r7, #88	; 0x58
 8006194:	f000 80c0 	beq.w	8006318 <_printf_i+0x1a8>
 8006198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800619c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061a0:	e03a      	b.n	8006218 <_printf_i+0xa8>
 80061a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061a6:	2b15      	cmp	r3, #21
 80061a8:	d8f6      	bhi.n	8006198 <_printf_i+0x28>
 80061aa:	a101      	add	r1, pc, #4	; (adr r1, 80061b0 <_printf_i+0x40>)
 80061ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061b0:	08006209 	.word	0x08006209
 80061b4:	0800621d 	.word	0x0800621d
 80061b8:	08006199 	.word	0x08006199
 80061bc:	08006199 	.word	0x08006199
 80061c0:	08006199 	.word	0x08006199
 80061c4:	08006199 	.word	0x08006199
 80061c8:	0800621d 	.word	0x0800621d
 80061cc:	08006199 	.word	0x08006199
 80061d0:	08006199 	.word	0x08006199
 80061d4:	08006199 	.word	0x08006199
 80061d8:	08006199 	.word	0x08006199
 80061dc:	08006321 	.word	0x08006321
 80061e0:	08006249 	.word	0x08006249
 80061e4:	080062db 	.word	0x080062db
 80061e8:	08006199 	.word	0x08006199
 80061ec:	08006199 	.word	0x08006199
 80061f0:	08006343 	.word	0x08006343
 80061f4:	08006199 	.word	0x08006199
 80061f8:	08006249 	.word	0x08006249
 80061fc:	08006199 	.word	0x08006199
 8006200:	08006199 	.word	0x08006199
 8006204:	080062e3 	.word	0x080062e3
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	1d1a      	adds	r2, r3, #4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	602a      	str	r2, [r5, #0]
 8006210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006218:	2301      	movs	r3, #1
 800621a:	e09f      	b.n	800635c <_printf_i+0x1ec>
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	682b      	ldr	r3, [r5, #0]
 8006220:	0607      	lsls	r7, r0, #24
 8006222:	f103 0104 	add.w	r1, r3, #4
 8006226:	6029      	str	r1, [r5, #0]
 8006228:	d501      	bpl.n	800622e <_printf_i+0xbe>
 800622a:	681e      	ldr	r6, [r3, #0]
 800622c:	e003      	b.n	8006236 <_printf_i+0xc6>
 800622e:	0646      	lsls	r6, r0, #25
 8006230:	d5fb      	bpl.n	800622a <_printf_i+0xba>
 8006232:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006236:	2e00      	cmp	r6, #0
 8006238:	da03      	bge.n	8006242 <_printf_i+0xd2>
 800623a:	232d      	movs	r3, #45	; 0x2d
 800623c:	4276      	negs	r6, r6
 800623e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006242:	485a      	ldr	r0, [pc, #360]	; (80063ac <_printf_i+0x23c>)
 8006244:	230a      	movs	r3, #10
 8006246:	e012      	b.n	800626e <_printf_i+0xfe>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	6820      	ldr	r0, [r4, #0]
 800624c:	1d19      	adds	r1, r3, #4
 800624e:	6029      	str	r1, [r5, #0]
 8006250:	0605      	lsls	r5, r0, #24
 8006252:	d501      	bpl.n	8006258 <_printf_i+0xe8>
 8006254:	681e      	ldr	r6, [r3, #0]
 8006256:	e002      	b.n	800625e <_printf_i+0xee>
 8006258:	0641      	lsls	r1, r0, #25
 800625a:	d5fb      	bpl.n	8006254 <_printf_i+0xe4>
 800625c:	881e      	ldrh	r6, [r3, #0]
 800625e:	4853      	ldr	r0, [pc, #332]	; (80063ac <_printf_i+0x23c>)
 8006260:	2f6f      	cmp	r7, #111	; 0x6f
 8006262:	bf0c      	ite	eq
 8006264:	2308      	moveq	r3, #8
 8006266:	230a      	movne	r3, #10
 8006268:	2100      	movs	r1, #0
 800626a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800626e:	6865      	ldr	r5, [r4, #4]
 8006270:	60a5      	str	r5, [r4, #8]
 8006272:	2d00      	cmp	r5, #0
 8006274:	bfa2      	ittt	ge
 8006276:	6821      	ldrge	r1, [r4, #0]
 8006278:	f021 0104 	bicge.w	r1, r1, #4
 800627c:	6021      	strge	r1, [r4, #0]
 800627e:	b90e      	cbnz	r6, 8006284 <_printf_i+0x114>
 8006280:	2d00      	cmp	r5, #0
 8006282:	d04b      	beq.n	800631c <_printf_i+0x1ac>
 8006284:	4615      	mov	r5, r2
 8006286:	fbb6 f1f3 	udiv	r1, r6, r3
 800628a:	fb03 6711 	mls	r7, r3, r1, r6
 800628e:	5dc7      	ldrb	r7, [r0, r7]
 8006290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006294:	4637      	mov	r7, r6
 8006296:	42bb      	cmp	r3, r7
 8006298:	460e      	mov	r6, r1
 800629a:	d9f4      	bls.n	8006286 <_printf_i+0x116>
 800629c:	2b08      	cmp	r3, #8
 800629e:	d10b      	bne.n	80062b8 <_printf_i+0x148>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	07de      	lsls	r6, r3, #31
 80062a4:	d508      	bpl.n	80062b8 <_printf_i+0x148>
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	6861      	ldr	r1, [r4, #4]
 80062aa:	4299      	cmp	r1, r3
 80062ac:	bfde      	ittt	le
 80062ae:	2330      	movle	r3, #48	; 0x30
 80062b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062b8:	1b52      	subs	r2, r2, r5
 80062ba:	6122      	str	r2, [r4, #16]
 80062bc:	f8cd a000 	str.w	sl, [sp]
 80062c0:	464b      	mov	r3, r9
 80062c2:	aa03      	add	r2, sp, #12
 80062c4:	4621      	mov	r1, r4
 80062c6:	4640      	mov	r0, r8
 80062c8:	f7ff fee4 	bl	8006094 <_printf_common>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d14a      	bne.n	8006366 <_printf_i+0x1f6>
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	b004      	add	sp, #16
 80062d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	f043 0320 	orr.w	r3, r3, #32
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	4833      	ldr	r0, [pc, #204]	; (80063b0 <_printf_i+0x240>)
 80062e4:	2778      	movs	r7, #120	; 0x78
 80062e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	6829      	ldr	r1, [r5, #0]
 80062ee:	061f      	lsls	r7, r3, #24
 80062f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80062f4:	d402      	bmi.n	80062fc <_printf_i+0x18c>
 80062f6:	065f      	lsls	r7, r3, #25
 80062f8:	bf48      	it	mi
 80062fa:	b2b6      	uxthmi	r6, r6
 80062fc:	07df      	lsls	r7, r3, #31
 80062fe:	bf48      	it	mi
 8006300:	f043 0320 	orrmi.w	r3, r3, #32
 8006304:	6029      	str	r1, [r5, #0]
 8006306:	bf48      	it	mi
 8006308:	6023      	strmi	r3, [r4, #0]
 800630a:	b91e      	cbnz	r6, 8006314 <_printf_i+0x1a4>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	f023 0320 	bic.w	r3, r3, #32
 8006312:	6023      	str	r3, [r4, #0]
 8006314:	2310      	movs	r3, #16
 8006316:	e7a7      	b.n	8006268 <_printf_i+0xf8>
 8006318:	4824      	ldr	r0, [pc, #144]	; (80063ac <_printf_i+0x23c>)
 800631a:	e7e4      	b.n	80062e6 <_printf_i+0x176>
 800631c:	4615      	mov	r5, r2
 800631e:	e7bd      	b.n	800629c <_printf_i+0x12c>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	6826      	ldr	r6, [r4, #0]
 8006324:	6961      	ldr	r1, [r4, #20]
 8006326:	1d18      	adds	r0, r3, #4
 8006328:	6028      	str	r0, [r5, #0]
 800632a:	0635      	lsls	r5, r6, #24
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	d501      	bpl.n	8006334 <_printf_i+0x1c4>
 8006330:	6019      	str	r1, [r3, #0]
 8006332:	e002      	b.n	800633a <_printf_i+0x1ca>
 8006334:	0670      	lsls	r0, r6, #25
 8006336:	d5fb      	bpl.n	8006330 <_printf_i+0x1c0>
 8006338:	8019      	strh	r1, [r3, #0]
 800633a:	2300      	movs	r3, #0
 800633c:	6123      	str	r3, [r4, #16]
 800633e:	4615      	mov	r5, r2
 8006340:	e7bc      	b.n	80062bc <_printf_i+0x14c>
 8006342:	682b      	ldr	r3, [r5, #0]
 8006344:	1d1a      	adds	r2, r3, #4
 8006346:	602a      	str	r2, [r5, #0]
 8006348:	681d      	ldr	r5, [r3, #0]
 800634a:	6862      	ldr	r2, [r4, #4]
 800634c:	2100      	movs	r1, #0
 800634e:	4628      	mov	r0, r5
 8006350:	f7f9 ff76 	bl	8000240 <memchr>
 8006354:	b108      	cbz	r0, 800635a <_printf_i+0x1ea>
 8006356:	1b40      	subs	r0, r0, r5
 8006358:	6060      	str	r0, [r4, #4]
 800635a:	6863      	ldr	r3, [r4, #4]
 800635c:	6123      	str	r3, [r4, #16]
 800635e:	2300      	movs	r3, #0
 8006360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006364:	e7aa      	b.n	80062bc <_printf_i+0x14c>
 8006366:	6923      	ldr	r3, [r4, #16]
 8006368:	462a      	mov	r2, r5
 800636a:	4649      	mov	r1, r9
 800636c:	4640      	mov	r0, r8
 800636e:	47d0      	blx	sl
 8006370:	3001      	adds	r0, #1
 8006372:	d0ad      	beq.n	80062d0 <_printf_i+0x160>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	079b      	lsls	r3, r3, #30
 8006378:	d413      	bmi.n	80063a2 <_printf_i+0x232>
 800637a:	68e0      	ldr	r0, [r4, #12]
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	4298      	cmp	r0, r3
 8006380:	bfb8      	it	lt
 8006382:	4618      	movlt	r0, r3
 8006384:	e7a6      	b.n	80062d4 <_printf_i+0x164>
 8006386:	2301      	movs	r3, #1
 8006388:	4632      	mov	r2, r6
 800638a:	4649      	mov	r1, r9
 800638c:	4640      	mov	r0, r8
 800638e:	47d0      	blx	sl
 8006390:	3001      	adds	r0, #1
 8006392:	d09d      	beq.n	80062d0 <_printf_i+0x160>
 8006394:	3501      	adds	r5, #1
 8006396:	68e3      	ldr	r3, [r4, #12]
 8006398:	9903      	ldr	r1, [sp, #12]
 800639a:	1a5b      	subs	r3, r3, r1
 800639c:	42ab      	cmp	r3, r5
 800639e:	dcf2      	bgt.n	8006386 <_printf_i+0x216>
 80063a0:	e7eb      	b.n	800637a <_printf_i+0x20a>
 80063a2:	2500      	movs	r5, #0
 80063a4:	f104 0619 	add.w	r6, r4, #25
 80063a8:	e7f5      	b.n	8006396 <_printf_i+0x226>
 80063aa:	bf00      	nop
 80063ac:	080071ee 	.word	0x080071ee
 80063b0:	080071ff 	.word	0x080071ff

080063b4 <__svfiscanf_r>:
 80063b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	461d      	mov	r5, r3
 80063ba:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80063bc:	07df      	lsls	r7, r3, #31
 80063be:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80063c2:	4606      	mov	r6, r0
 80063c4:	460c      	mov	r4, r1
 80063c6:	4692      	mov	sl, r2
 80063c8:	d405      	bmi.n	80063d6 <__svfiscanf_r+0x22>
 80063ca:	898b      	ldrh	r3, [r1, #12]
 80063cc:	0598      	lsls	r0, r3, #22
 80063ce:	d402      	bmi.n	80063d6 <__svfiscanf_r+0x22>
 80063d0:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80063d2:	f7ff fcbe 	bl	8005d52 <__retarget_lock_acquire_recursive>
 80063d6:	2300      	movs	r3, #0
 80063d8:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80063dc:	4baa      	ldr	r3, [pc, #680]	; (8006688 <__svfiscanf_r+0x2d4>)
 80063de:	93a0      	str	r3, [sp, #640]	; 0x280
 80063e0:	f10d 0804 	add.w	r8, sp, #4
 80063e4:	4ba9      	ldr	r3, [pc, #676]	; (800668c <__svfiscanf_r+0x2d8>)
 80063e6:	4faa      	ldr	r7, [pc, #680]	; (8006690 <__svfiscanf_r+0x2dc>)
 80063e8:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8006694 <__svfiscanf_r+0x2e0>
 80063ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80063f0:	93a1      	str	r3, [sp, #644]	; 0x284
 80063f2:	9500      	str	r5, [sp, #0]
 80063f4:	f89a 3000 	ldrb.w	r3, [sl]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 8170 	beq.w	80066de <__svfiscanf_r+0x32a>
 80063fe:	5cf9      	ldrb	r1, [r7, r3]
 8006400:	f011 0108 	ands.w	r1, r1, #8
 8006404:	f10a 0501 	add.w	r5, sl, #1
 8006408:	d019      	beq.n	800643e <__svfiscanf_r+0x8a>
 800640a:	6863      	ldr	r3, [r4, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	dd0f      	ble.n	8006430 <__svfiscanf_r+0x7c>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	781a      	ldrb	r2, [r3, #0]
 8006414:	5cba      	ldrb	r2, [r7, r2]
 8006416:	0711      	lsls	r1, r2, #28
 8006418:	d401      	bmi.n	800641e <__svfiscanf_r+0x6a>
 800641a:	46aa      	mov	sl, r5
 800641c:	e7ea      	b.n	80063f4 <__svfiscanf_r+0x40>
 800641e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006420:	3201      	adds	r2, #1
 8006422:	9245      	str	r2, [sp, #276]	; 0x114
 8006424:	6862      	ldr	r2, [r4, #4]
 8006426:	3301      	adds	r3, #1
 8006428:	3a01      	subs	r2, #1
 800642a:	6062      	str	r2, [r4, #4]
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	e7ec      	b.n	800640a <__svfiscanf_r+0x56>
 8006430:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006432:	4621      	mov	r1, r4
 8006434:	4630      	mov	r0, r6
 8006436:	4798      	blx	r3
 8006438:	2800      	cmp	r0, #0
 800643a:	d0e9      	beq.n	8006410 <__svfiscanf_r+0x5c>
 800643c:	e7ed      	b.n	800641a <__svfiscanf_r+0x66>
 800643e:	2b25      	cmp	r3, #37	; 0x25
 8006440:	d012      	beq.n	8006468 <__svfiscanf_r+0xb4>
 8006442:	469a      	mov	sl, r3
 8006444:	6863      	ldr	r3, [r4, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	f340 8093 	ble.w	8006572 <__svfiscanf_r+0x1be>
 800644c:	6822      	ldr	r2, [r4, #0]
 800644e:	7813      	ldrb	r3, [r2, #0]
 8006450:	4553      	cmp	r3, sl
 8006452:	f040 8144 	bne.w	80066de <__svfiscanf_r+0x32a>
 8006456:	6863      	ldr	r3, [r4, #4]
 8006458:	3b01      	subs	r3, #1
 800645a:	6063      	str	r3, [r4, #4]
 800645c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800645e:	3201      	adds	r2, #1
 8006460:	3301      	adds	r3, #1
 8006462:	6022      	str	r2, [r4, #0]
 8006464:	9345      	str	r3, [sp, #276]	; 0x114
 8006466:	e7d8      	b.n	800641a <__svfiscanf_r+0x66>
 8006468:	9141      	str	r1, [sp, #260]	; 0x104
 800646a:	9143      	str	r1, [sp, #268]	; 0x10c
 800646c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8006470:	2b2a      	cmp	r3, #42	; 0x2a
 8006472:	bf02      	ittt	eq
 8006474:	2310      	moveq	r3, #16
 8006476:	9341      	streq	r3, [sp, #260]	; 0x104
 8006478:	f10a 0502 	addeq.w	r5, sl, #2
 800647c:	220a      	movs	r2, #10
 800647e:	46aa      	mov	sl, r5
 8006480:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006484:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006488:	2b09      	cmp	r3, #9
 800648a:	d91d      	bls.n	80064c8 <__svfiscanf_r+0x114>
 800648c:	4881      	ldr	r0, [pc, #516]	; (8006694 <__svfiscanf_r+0x2e0>)
 800648e:	2203      	movs	r2, #3
 8006490:	f7f9 fed6 	bl	8000240 <memchr>
 8006494:	b138      	cbz	r0, 80064a6 <__svfiscanf_r+0xf2>
 8006496:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006498:	eba0 0009 	sub.w	r0, r0, r9
 800649c:	2301      	movs	r3, #1
 800649e:	4083      	lsls	r3, r0
 80064a0:	4313      	orrs	r3, r2
 80064a2:	9341      	str	r3, [sp, #260]	; 0x104
 80064a4:	4655      	mov	r5, sl
 80064a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064aa:	2b78      	cmp	r3, #120	; 0x78
 80064ac:	d807      	bhi.n	80064be <__svfiscanf_r+0x10a>
 80064ae:	2b57      	cmp	r3, #87	; 0x57
 80064b0:	d811      	bhi.n	80064d6 <__svfiscanf_r+0x122>
 80064b2:	2b25      	cmp	r3, #37	; 0x25
 80064b4:	d0c5      	beq.n	8006442 <__svfiscanf_r+0x8e>
 80064b6:	d857      	bhi.n	8006568 <__svfiscanf_r+0x1b4>
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80c6 	beq.w	800664a <__svfiscanf_r+0x296>
 80064be:	2303      	movs	r3, #3
 80064c0:	9347      	str	r3, [sp, #284]	; 0x11c
 80064c2:	230a      	movs	r3, #10
 80064c4:	9342      	str	r3, [sp, #264]	; 0x108
 80064c6:	e07f      	b.n	80065c8 <__svfiscanf_r+0x214>
 80064c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80064ca:	fb02 1103 	mla	r1, r2, r3, r1
 80064ce:	3930      	subs	r1, #48	; 0x30
 80064d0:	9143      	str	r1, [sp, #268]	; 0x10c
 80064d2:	4655      	mov	r5, sl
 80064d4:	e7d3      	b.n	800647e <__svfiscanf_r+0xca>
 80064d6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80064da:	2a20      	cmp	r2, #32
 80064dc:	d8ef      	bhi.n	80064be <__svfiscanf_r+0x10a>
 80064de:	a101      	add	r1, pc, #4	; (adr r1, 80064e4 <__svfiscanf_r+0x130>)
 80064e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064e4:	080065ab 	.word	0x080065ab
 80064e8:	080064bf 	.word	0x080064bf
 80064ec:	080064bf 	.word	0x080064bf
 80064f0:	08006609 	.word	0x08006609
 80064f4:	080064bf 	.word	0x080064bf
 80064f8:	080064bf 	.word	0x080064bf
 80064fc:	080064bf 	.word	0x080064bf
 8006500:	080064bf 	.word	0x080064bf
 8006504:	080064bf 	.word	0x080064bf
 8006508:	080064bf 	.word	0x080064bf
 800650c:	080064bf 	.word	0x080064bf
 8006510:	0800661f 	.word	0x0800661f
 8006514:	08006605 	.word	0x08006605
 8006518:	0800656f 	.word	0x0800656f
 800651c:	0800656f 	.word	0x0800656f
 8006520:	0800656f 	.word	0x0800656f
 8006524:	080064bf 	.word	0x080064bf
 8006528:	080065c1 	.word	0x080065c1
 800652c:	080064bf 	.word	0x080064bf
 8006530:	080064bf 	.word	0x080064bf
 8006534:	080064bf 	.word	0x080064bf
 8006538:	080064bf 	.word	0x080064bf
 800653c:	0800662f 	.word	0x0800662f
 8006540:	080065fd 	.word	0x080065fd
 8006544:	080065a3 	.word	0x080065a3
 8006548:	080064bf 	.word	0x080064bf
 800654c:	080064bf 	.word	0x080064bf
 8006550:	0800662b 	.word	0x0800662b
 8006554:	080064bf 	.word	0x080064bf
 8006558:	08006605 	.word	0x08006605
 800655c:	080064bf 	.word	0x080064bf
 8006560:	080064bf 	.word	0x080064bf
 8006564:	080065ab 	.word	0x080065ab
 8006568:	3b45      	subs	r3, #69	; 0x45
 800656a:	2b02      	cmp	r3, #2
 800656c:	d8a7      	bhi.n	80064be <__svfiscanf_r+0x10a>
 800656e:	2305      	movs	r3, #5
 8006570:	e029      	b.n	80065c6 <__svfiscanf_r+0x212>
 8006572:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006574:	4621      	mov	r1, r4
 8006576:	4630      	mov	r0, r6
 8006578:	4798      	blx	r3
 800657a:	2800      	cmp	r0, #0
 800657c:	f43f af66 	beq.w	800644c <__svfiscanf_r+0x98>
 8006580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006582:	07da      	lsls	r2, r3, #31
 8006584:	f140 80a3 	bpl.w	80066ce <__svfiscanf_r+0x31a>
 8006588:	9844      	ldr	r0, [sp, #272]	; 0x110
 800658a:	2800      	cmp	r0, #0
 800658c:	d066      	beq.n	800665c <__svfiscanf_r+0x2a8>
 800658e:	89a3      	ldrh	r3, [r4, #12]
 8006590:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006594:	bf18      	it	ne
 8006596:	f04f 30ff 	movne.w	r0, #4294967295
 800659a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800659e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80065a4:	f042 0220 	orr.w	r2, r2, #32
 80065a8:	9241      	str	r2, [sp, #260]	; 0x104
 80065aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80065ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b0:	9241      	str	r2, [sp, #260]	; 0x104
 80065b2:	2210      	movs	r2, #16
 80065b4:	2b6f      	cmp	r3, #111	; 0x6f
 80065b6:	9242      	str	r2, [sp, #264]	; 0x108
 80065b8:	bf34      	ite	cc
 80065ba:	2303      	movcc	r3, #3
 80065bc:	2304      	movcs	r3, #4
 80065be:	e002      	b.n	80065c6 <__svfiscanf_r+0x212>
 80065c0:	2300      	movs	r3, #0
 80065c2:	9342      	str	r3, [sp, #264]	; 0x108
 80065c4:	2303      	movs	r3, #3
 80065c6:	9347      	str	r3, [sp, #284]	; 0x11c
 80065c8:	6863      	ldr	r3, [r4, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	dd49      	ble.n	8006662 <__svfiscanf_r+0x2ae>
 80065ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80065d0:	065b      	lsls	r3, r3, #25
 80065d2:	d404      	bmi.n	80065de <__svfiscanf_r+0x22a>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	781a      	ldrb	r2, [r3, #0]
 80065d8:	5cba      	ldrb	r2, [r7, r2]
 80065da:	0710      	lsls	r0, r2, #28
 80065dc:	d448      	bmi.n	8006670 <__svfiscanf_r+0x2bc>
 80065de:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	dc60      	bgt.n	80066a6 <__svfiscanf_r+0x2f2>
 80065e4:	466b      	mov	r3, sp
 80065e6:	4622      	mov	r2, r4
 80065e8:	a941      	add	r1, sp, #260	; 0x104
 80065ea:	4630      	mov	r0, r6
 80065ec:	f000 f898 	bl	8006720 <_scanf_chars>
 80065f0:	2801      	cmp	r0, #1
 80065f2:	d074      	beq.n	80066de <__svfiscanf_r+0x32a>
 80065f4:	2802      	cmp	r0, #2
 80065f6:	f47f af10 	bne.w	800641a <__svfiscanf_r+0x66>
 80065fa:	e7c1      	b.n	8006580 <__svfiscanf_r+0x1cc>
 80065fc:	2308      	movs	r3, #8
 80065fe:	9342      	str	r3, [sp, #264]	; 0x108
 8006600:	2304      	movs	r3, #4
 8006602:	e7e0      	b.n	80065c6 <__svfiscanf_r+0x212>
 8006604:	220a      	movs	r2, #10
 8006606:	e7d5      	b.n	80065b4 <__svfiscanf_r+0x200>
 8006608:	4629      	mov	r1, r5
 800660a:	4640      	mov	r0, r8
 800660c:	f000 fb6c 	bl	8006ce8 <__sccl>
 8006610:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006616:	9341      	str	r3, [sp, #260]	; 0x104
 8006618:	4605      	mov	r5, r0
 800661a:	2301      	movs	r3, #1
 800661c:	e7d3      	b.n	80065c6 <__svfiscanf_r+0x212>
 800661e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006624:	9341      	str	r3, [sp, #260]	; 0x104
 8006626:	2300      	movs	r3, #0
 8006628:	e7cd      	b.n	80065c6 <__svfiscanf_r+0x212>
 800662a:	2302      	movs	r3, #2
 800662c:	e7cb      	b.n	80065c6 <__svfiscanf_r+0x212>
 800662e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006630:	06c3      	lsls	r3, r0, #27
 8006632:	f53f aef2 	bmi.w	800641a <__svfiscanf_r+0x66>
 8006636:	9b00      	ldr	r3, [sp, #0]
 8006638:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800663a:	1d19      	adds	r1, r3, #4
 800663c:	9100      	str	r1, [sp, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	07c0      	lsls	r0, r0, #31
 8006642:	bf4c      	ite	mi
 8006644:	801a      	strhmi	r2, [r3, #0]
 8006646:	601a      	strpl	r2, [r3, #0]
 8006648:	e6e7      	b.n	800641a <__svfiscanf_r+0x66>
 800664a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800664c:	07d8      	lsls	r0, r3, #31
 800664e:	d405      	bmi.n	800665c <__svfiscanf_r+0x2a8>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	0599      	lsls	r1, r3, #22
 8006654:	d402      	bmi.n	800665c <__svfiscanf_r+0x2a8>
 8006656:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006658:	f7ff fb7c 	bl	8005d54 <__retarget_lock_release_recursive>
 800665c:	f04f 30ff 	mov.w	r0, #4294967295
 8006660:	e79b      	b.n	800659a <__svfiscanf_r+0x1e6>
 8006662:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006664:	4621      	mov	r1, r4
 8006666:	4630      	mov	r0, r6
 8006668:	4798      	blx	r3
 800666a:	2800      	cmp	r0, #0
 800666c:	d0af      	beq.n	80065ce <__svfiscanf_r+0x21a>
 800666e:	e787      	b.n	8006580 <__svfiscanf_r+0x1cc>
 8006670:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006672:	3201      	adds	r2, #1
 8006674:	9245      	str	r2, [sp, #276]	; 0x114
 8006676:	6862      	ldr	r2, [r4, #4]
 8006678:	3a01      	subs	r2, #1
 800667a:	2a00      	cmp	r2, #0
 800667c:	6062      	str	r2, [r4, #4]
 800667e:	dd0b      	ble.n	8006698 <__svfiscanf_r+0x2e4>
 8006680:	3301      	adds	r3, #1
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	e7a6      	b.n	80065d4 <__svfiscanf_r+0x220>
 8006686:	bf00      	nop
 8006688:	08006dcf 	.word	0x08006dcf
 800668c:	08006bf9 	.word	0x08006bf9
 8006690:	080070dd 	.word	0x080070dd
 8006694:	080071e3 	.word	0x080071e3
 8006698:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800669a:	4621      	mov	r1, r4
 800669c:	4630      	mov	r0, r6
 800669e:	4798      	blx	r3
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d097      	beq.n	80065d4 <__svfiscanf_r+0x220>
 80066a4:	e76c      	b.n	8006580 <__svfiscanf_r+0x1cc>
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	dc06      	bgt.n	80066b8 <__svfiscanf_r+0x304>
 80066aa:	466b      	mov	r3, sp
 80066ac:	4622      	mov	r2, r4
 80066ae:	a941      	add	r1, sp, #260	; 0x104
 80066b0:	4630      	mov	r0, r6
 80066b2:	f000 f88f 	bl	80067d4 <_scanf_i>
 80066b6:	e79b      	b.n	80065f0 <__svfiscanf_r+0x23c>
 80066b8:	4b0e      	ldr	r3, [pc, #56]	; (80066f4 <__svfiscanf_r+0x340>)
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f43f aead 	beq.w	800641a <__svfiscanf_r+0x66>
 80066c0:	466b      	mov	r3, sp
 80066c2:	4622      	mov	r2, r4
 80066c4:	a941      	add	r1, sp, #260	; 0x104
 80066c6:	4630      	mov	r0, r6
 80066c8:	f3af 8000 	nop.w
 80066cc:	e790      	b.n	80065f0 <__svfiscanf_r+0x23c>
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	0599      	lsls	r1, r3, #22
 80066d2:	f53f af59 	bmi.w	8006588 <__svfiscanf_r+0x1d4>
 80066d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066d8:	f7ff fb3c 	bl	8005d54 <__retarget_lock_release_recursive>
 80066dc:	e754      	b.n	8006588 <__svfiscanf_r+0x1d4>
 80066de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066e0:	07da      	lsls	r2, r3, #31
 80066e2:	d405      	bmi.n	80066f0 <__svfiscanf_r+0x33c>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	059b      	lsls	r3, r3, #22
 80066e8:	d402      	bmi.n	80066f0 <__svfiscanf_r+0x33c>
 80066ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ec:	f7ff fb32 	bl	8005d54 <__retarget_lock_release_recursive>
 80066f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80066f2:	e752      	b.n	800659a <__svfiscanf_r+0x1e6>
 80066f4:	00000000 	.word	0x00000000

080066f8 <_vfiscanf_r>:
 80066f8:	b530      	push	{r4, r5, lr}
 80066fa:	4604      	mov	r4, r0
 80066fc:	b085      	sub	sp, #20
 80066fe:	b148      	cbz	r0, 8006714 <_vfiscanf_r+0x1c>
 8006700:	6a05      	ldr	r5, [r0, #32]
 8006702:	b93d      	cbnz	r5, 8006714 <_vfiscanf_r+0x1c>
 8006704:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006708:	9101      	str	r1, [sp, #4]
 800670a:	f7ff f8b9 	bl	8005880 <__sinit>
 800670e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006712:	9901      	ldr	r1, [sp, #4]
 8006714:	4620      	mov	r0, r4
 8006716:	b005      	add	sp, #20
 8006718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800671c:	f7ff be4a 	b.w	80063b4 <__svfiscanf_r>

08006720 <_scanf_chars>:
 8006720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006724:	4615      	mov	r5, r2
 8006726:	688a      	ldr	r2, [r1, #8]
 8006728:	4680      	mov	r8, r0
 800672a:	460c      	mov	r4, r1
 800672c:	b932      	cbnz	r2, 800673c <_scanf_chars+0x1c>
 800672e:	698a      	ldr	r2, [r1, #24]
 8006730:	2a00      	cmp	r2, #0
 8006732:	bf0c      	ite	eq
 8006734:	2201      	moveq	r2, #1
 8006736:	f04f 32ff 	movne.w	r2, #4294967295
 800673a:	608a      	str	r2, [r1, #8]
 800673c:	6822      	ldr	r2, [r4, #0]
 800673e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80067d0 <_scanf_chars+0xb0>
 8006742:	06d1      	lsls	r1, r2, #27
 8006744:	bf5f      	itttt	pl
 8006746:	681a      	ldrpl	r2, [r3, #0]
 8006748:	1d11      	addpl	r1, r2, #4
 800674a:	6019      	strpl	r1, [r3, #0]
 800674c:	6816      	ldrpl	r6, [r2, #0]
 800674e:	2700      	movs	r7, #0
 8006750:	69a0      	ldr	r0, [r4, #24]
 8006752:	b188      	cbz	r0, 8006778 <_scanf_chars+0x58>
 8006754:	2801      	cmp	r0, #1
 8006756:	d107      	bne.n	8006768 <_scanf_chars+0x48>
 8006758:	682a      	ldr	r2, [r5, #0]
 800675a:	7811      	ldrb	r1, [r2, #0]
 800675c:	6962      	ldr	r2, [r4, #20]
 800675e:	5c52      	ldrb	r2, [r2, r1]
 8006760:	b952      	cbnz	r2, 8006778 <_scanf_chars+0x58>
 8006762:	2f00      	cmp	r7, #0
 8006764:	d031      	beq.n	80067ca <_scanf_chars+0xaa>
 8006766:	e022      	b.n	80067ae <_scanf_chars+0x8e>
 8006768:	2802      	cmp	r0, #2
 800676a:	d120      	bne.n	80067ae <_scanf_chars+0x8e>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006774:	071b      	lsls	r3, r3, #28
 8006776:	d41a      	bmi.n	80067ae <_scanf_chars+0x8e>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	06da      	lsls	r2, r3, #27
 800677c:	bf5e      	ittt	pl
 800677e:	682b      	ldrpl	r3, [r5, #0]
 8006780:	781b      	ldrbpl	r3, [r3, #0]
 8006782:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006786:	682a      	ldr	r2, [r5, #0]
 8006788:	686b      	ldr	r3, [r5, #4]
 800678a:	3201      	adds	r2, #1
 800678c:	602a      	str	r2, [r5, #0]
 800678e:	68a2      	ldr	r2, [r4, #8]
 8006790:	3b01      	subs	r3, #1
 8006792:	3a01      	subs	r2, #1
 8006794:	606b      	str	r3, [r5, #4]
 8006796:	3701      	adds	r7, #1
 8006798:	60a2      	str	r2, [r4, #8]
 800679a:	b142      	cbz	r2, 80067ae <_scanf_chars+0x8e>
 800679c:	2b00      	cmp	r3, #0
 800679e:	dcd7      	bgt.n	8006750 <_scanf_chars+0x30>
 80067a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80067a4:	4629      	mov	r1, r5
 80067a6:	4640      	mov	r0, r8
 80067a8:	4798      	blx	r3
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d0d0      	beq.n	8006750 <_scanf_chars+0x30>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	f013 0310 	ands.w	r3, r3, #16
 80067b4:	d105      	bne.n	80067c2 <_scanf_chars+0xa2>
 80067b6:	68e2      	ldr	r2, [r4, #12]
 80067b8:	3201      	adds	r2, #1
 80067ba:	60e2      	str	r2, [r4, #12]
 80067bc:	69a2      	ldr	r2, [r4, #24]
 80067be:	b102      	cbz	r2, 80067c2 <_scanf_chars+0xa2>
 80067c0:	7033      	strb	r3, [r6, #0]
 80067c2:	6923      	ldr	r3, [r4, #16]
 80067c4:	443b      	add	r3, r7
 80067c6:	6123      	str	r3, [r4, #16]
 80067c8:	2000      	movs	r0, #0
 80067ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ce:	bf00      	nop
 80067d0:	080070dd 	.word	0x080070dd

080067d4 <_scanf_i>:
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	4698      	mov	r8, r3
 80067da:	4b74      	ldr	r3, [pc, #464]	; (80069ac <_scanf_i+0x1d8>)
 80067dc:	460c      	mov	r4, r1
 80067de:	4682      	mov	sl, r0
 80067e0:	4616      	mov	r6, r2
 80067e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067e6:	b087      	sub	sp, #28
 80067e8:	ab03      	add	r3, sp, #12
 80067ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80067ee:	4b70      	ldr	r3, [pc, #448]	; (80069b0 <_scanf_i+0x1dc>)
 80067f0:	69a1      	ldr	r1, [r4, #24]
 80067f2:	4a70      	ldr	r2, [pc, #448]	; (80069b4 <_scanf_i+0x1e0>)
 80067f4:	2903      	cmp	r1, #3
 80067f6:	bf18      	it	ne
 80067f8:	461a      	movne	r2, r3
 80067fa:	68a3      	ldr	r3, [r4, #8]
 80067fc:	9201      	str	r2, [sp, #4]
 80067fe:	1e5a      	subs	r2, r3, #1
 8006800:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006804:	bf88      	it	hi
 8006806:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800680a:	4627      	mov	r7, r4
 800680c:	bf82      	ittt	hi
 800680e:	eb03 0905 	addhi.w	r9, r3, r5
 8006812:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006816:	60a3      	strhi	r3, [r4, #8]
 8006818:	f857 3b1c 	ldr.w	r3, [r7], #28
 800681c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006820:	bf98      	it	ls
 8006822:	f04f 0900 	movls.w	r9, #0
 8006826:	6023      	str	r3, [r4, #0]
 8006828:	463d      	mov	r5, r7
 800682a:	f04f 0b00 	mov.w	fp, #0
 800682e:	6831      	ldr	r1, [r6, #0]
 8006830:	ab03      	add	r3, sp, #12
 8006832:	7809      	ldrb	r1, [r1, #0]
 8006834:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006838:	2202      	movs	r2, #2
 800683a:	f7f9 fd01 	bl	8000240 <memchr>
 800683e:	b328      	cbz	r0, 800688c <_scanf_i+0xb8>
 8006840:	f1bb 0f01 	cmp.w	fp, #1
 8006844:	d159      	bne.n	80068fa <_scanf_i+0x126>
 8006846:	6862      	ldr	r2, [r4, #4]
 8006848:	b92a      	cbnz	r2, 8006856 <_scanf_i+0x82>
 800684a:	6822      	ldr	r2, [r4, #0]
 800684c:	2308      	movs	r3, #8
 800684e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006852:	6063      	str	r3, [r4, #4]
 8006854:	6022      	str	r2, [r4, #0]
 8006856:	6822      	ldr	r2, [r4, #0]
 8006858:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800685c:	6022      	str	r2, [r4, #0]
 800685e:	68a2      	ldr	r2, [r4, #8]
 8006860:	1e51      	subs	r1, r2, #1
 8006862:	60a1      	str	r1, [r4, #8]
 8006864:	b192      	cbz	r2, 800688c <_scanf_i+0xb8>
 8006866:	6832      	ldr	r2, [r6, #0]
 8006868:	1c51      	adds	r1, r2, #1
 800686a:	6031      	str	r1, [r6, #0]
 800686c:	7812      	ldrb	r2, [r2, #0]
 800686e:	f805 2b01 	strb.w	r2, [r5], #1
 8006872:	6872      	ldr	r2, [r6, #4]
 8006874:	3a01      	subs	r2, #1
 8006876:	2a00      	cmp	r2, #0
 8006878:	6072      	str	r2, [r6, #4]
 800687a:	dc07      	bgt.n	800688c <_scanf_i+0xb8>
 800687c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006880:	4631      	mov	r1, r6
 8006882:	4650      	mov	r0, sl
 8006884:	4790      	blx	r2
 8006886:	2800      	cmp	r0, #0
 8006888:	f040 8085 	bne.w	8006996 <_scanf_i+0x1c2>
 800688c:	f10b 0b01 	add.w	fp, fp, #1
 8006890:	f1bb 0f03 	cmp.w	fp, #3
 8006894:	d1cb      	bne.n	800682e <_scanf_i+0x5a>
 8006896:	6863      	ldr	r3, [r4, #4]
 8006898:	b90b      	cbnz	r3, 800689e <_scanf_i+0xca>
 800689a:	230a      	movs	r3, #10
 800689c:	6063      	str	r3, [r4, #4]
 800689e:	6863      	ldr	r3, [r4, #4]
 80068a0:	4945      	ldr	r1, [pc, #276]	; (80069b8 <_scanf_i+0x1e4>)
 80068a2:	6960      	ldr	r0, [r4, #20]
 80068a4:	1ac9      	subs	r1, r1, r3
 80068a6:	f000 fa1f 	bl	8006ce8 <__sccl>
 80068aa:	f04f 0b00 	mov.w	fp, #0
 80068ae:	68a3      	ldr	r3, [r4, #8]
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d03d      	beq.n	8006932 <_scanf_i+0x15e>
 80068b6:	6831      	ldr	r1, [r6, #0]
 80068b8:	6960      	ldr	r0, [r4, #20]
 80068ba:	f891 c000 	ldrb.w	ip, [r1]
 80068be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d035      	beq.n	8006932 <_scanf_i+0x15e>
 80068c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80068ca:	d124      	bne.n	8006916 <_scanf_i+0x142>
 80068cc:	0510      	lsls	r0, r2, #20
 80068ce:	d522      	bpl.n	8006916 <_scanf_i+0x142>
 80068d0:	f10b 0b01 	add.w	fp, fp, #1
 80068d4:	f1b9 0f00 	cmp.w	r9, #0
 80068d8:	d003      	beq.n	80068e2 <_scanf_i+0x10e>
 80068da:	3301      	adds	r3, #1
 80068dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80068e0:	60a3      	str	r3, [r4, #8]
 80068e2:	6873      	ldr	r3, [r6, #4]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	6073      	str	r3, [r6, #4]
 80068ea:	dd1b      	ble.n	8006924 <_scanf_i+0x150>
 80068ec:	6833      	ldr	r3, [r6, #0]
 80068ee:	3301      	adds	r3, #1
 80068f0:	6033      	str	r3, [r6, #0]
 80068f2:	68a3      	ldr	r3, [r4, #8]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	60a3      	str	r3, [r4, #8]
 80068f8:	e7d9      	b.n	80068ae <_scanf_i+0xda>
 80068fa:	f1bb 0f02 	cmp.w	fp, #2
 80068fe:	d1ae      	bne.n	800685e <_scanf_i+0x8a>
 8006900:	6822      	ldr	r2, [r4, #0]
 8006902:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006906:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800690a:	d1bf      	bne.n	800688c <_scanf_i+0xb8>
 800690c:	2310      	movs	r3, #16
 800690e:	6063      	str	r3, [r4, #4]
 8006910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006914:	e7a2      	b.n	800685c <_scanf_i+0x88>
 8006916:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800691a:	6022      	str	r2, [r4, #0]
 800691c:	780b      	ldrb	r3, [r1, #0]
 800691e:	f805 3b01 	strb.w	r3, [r5], #1
 8006922:	e7de      	b.n	80068e2 <_scanf_i+0x10e>
 8006924:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006928:	4631      	mov	r1, r6
 800692a:	4650      	mov	r0, sl
 800692c:	4798      	blx	r3
 800692e:	2800      	cmp	r0, #0
 8006930:	d0df      	beq.n	80068f2 <_scanf_i+0x11e>
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	05d9      	lsls	r1, r3, #23
 8006936:	d50d      	bpl.n	8006954 <_scanf_i+0x180>
 8006938:	42bd      	cmp	r5, r7
 800693a:	d909      	bls.n	8006950 <_scanf_i+0x17c>
 800693c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006940:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006944:	4632      	mov	r2, r6
 8006946:	4650      	mov	r0, sl
 8006948:	4798      	blx	r3
 800694a:	f105 39ff 	add.w	r9, r5, #4294967295
 800694e:	464d      	mov	r5, r9
 8006950:	42bd      	cmp	r5, r7
 8006952:	d028      	beq.n	80069a6 <_scanf_i+0x1d2>
 8006954:	6822      	ldr	r2, [r4, #0]
 8006956:	f012 0210 	ands.w	r2, r2, #16
 800695a:	d113      	bne.n	8006984 <_scanf_i+0x1b0>
 800695c:	702a      	strb	r2, [r5, #0]
 800695e:	6863      	ldr	r3, [r4, #4]
 8006960:	9e01      	ldr	r6, [sp, #4]
 8006962:	4639      	mov	r1, r7
 8006964:	4650      	mov	r0, sl
 8006966:	47b0      	blx	r6
 8006968:	f8d8 3000 	ldr.w	r3, [r8]
 800696c:	6821      	ldr	r1, [r4, #0]
 800696e:	1d1a      	adds	r2, r3, #4
 8006970:	f8c8 2000 	str.w	r2, [r8]
 8006974:	f011 0f20 	tst.w	r1, #32
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	d00f      	beq.n	800699c <_scanf_i+0x1c8>
 800697c:	6018      	str	r0, [r3, #0]
 800697e:	68e3      	ldr	r3, [r4, #12]
 8006980:	3301      	adds	r3, #1
 8006982:	60e3      	str	r3, [r4, #12]
 8006984:	6923      	ldr	r3, [r4, #16]
 8006986:	1bed      	subs	r5, r5, r7
 8006988:	445d      	add	r5, fp
 800698a:	442b      	add	r3, r5
 800698c:	6123      	str	r3, [r4, #16]
 800698e:	2000      	movs	r0, #0
 8006990:	b007      	add	sp, #28
 8006992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006996:	f04f 0b00 	mov.w	fp, #0
 800699a:	e7ca      	b.n	8006932 <_scanf_i+0x15e>
 800699c:	07ca      	lsls	r2, r1, #31
 800699e:	bf4c      	ite	mi
 80069a0:	8018      	strhmi	r0, [r3, #0]
 80069a2:	6018      	strpl	r0, [r3, #0]
 80069a4:	e7eb      	b.n	800697e <_scanf_i+0x1aa>
 80069a6:	2001      	movs	r0, #1
 80069a8:	e7f2      	b.n	8006990 <_scanf_i+0x1bc>
 80069aa:	bf00      	nop
 80069ac:	080070b0 	.word	0x080070b0
 80069b0:	08007061 	.word	0x08007061
 80069b4:	08005765 	.word	0x08005765
 80069b8:	08007220 	.word	0x08007220

080069bc <__sflush_r>:
 80069bc:	898a      	ldrh	r2, [r1, #12]
 80069be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c2:	4605      	mov	r5, r0
 80069c4:	0710      	lsls	r0, r2, #28
 80069c6:	460c      	mov	r4, r1
 80069c8:	d458      	bmi.n	8006a7c <__sflush_r+0xc0>
 80069ca:	684b      	ldr	r3, [r1, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	dc05      	bgt.n	80069dc <__sflush_r+0x20>
 80069d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dc02      	bgt.n	80069dc <__sflush_r+0x20>
 80069d6:	2000      	movs	r0, #0
 80069d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069de:	2e00      	cmp	r6, #0
 80069e0:	d0f9      	beq.n	80069d6 <__sflush_r+0x1a>
 80069e2:	2300      	movs	r3, #0
 80069e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069e8:	682f      	ldr	r7, [r5, #0]
 80069ea:	6a21      	ldr	r1, [r4, #32]
 80069ec:	602b      	str	r3, [r5, #0]
 80069ee:	d032      	beq.n	8006a56 <__sflush_r+0x9a>
 80069f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	075a      	lsls	r2, r3, #29
 80069f6:	d505      	bpl.n	8006a04 <__sflush_r+0x48>
 80069f8:	6863      	ldr	r3, [r4, #4]
 80069fa:	1ac0      	subs	r0, r0, r3
 80069fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069fe:	b10b      	cbz	r3, 8006a04 <__sflush_r+0x48>
 8006a00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a02:	1ac0      	subs	r0, r0, r3
 8006a04:	2300      	movs	r3, #0
 8006a06:	4602      	mov	r2, r0
 8006a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a0a:	6a21      	ldr	r1, [r4, #32]
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	47b0      	blx	r6
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	89a3      	ldrh	r3, [r4, #12]
 8006a14:	d106      	bne.n	8006a24 <__sflush_r+0x68>
 8006a16:	6829      	ldr	r1, [r5, #0]
 8006a18:	291d      	cmp	r1, #29
 8006a1a:	d82b      	bhi.n	8006a74 <__sflush_r+0xb8>
 8006a1c:	4a29      	ldr	r2, [pc, #164]	; (8006ac4 <__sflush_r+0x108>)
 8006a1e:	410a      	asrs	r2, r1
 8006a20:	07d6      	lsls	r6, r2, #31
 8006a22:	d427      	bmi.n	8006a74 <__sflush_r+0xb8>
 8006a24:	2200      	movs	r2, #0
 8006a26:	6062      	str	r2, [r4, #4]
 8006a28:	04d9      	lsls	r1, r3, #19
 8006a2a:	6922      	ldr	r2, [r4, #16]
 8006a2c:	6022      	str	r2, [r4, #0]
 8006a2e:	d504      	bpl.n	8006a3a <__sflush_r+0x7e>
 8006a30:	1c42      	adds	r2, r0, #1
 8006a32:	d101      	bne.n	8006a38 <__sflush_r+0x7c>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	b903      	cbnz	r3, 8006a3a <__sflush_r+0x7e>
 8006a38:	6560      	str	r0, [r4, #84]	; 0x54
 8006a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a3c:	602f      	str	r7, [r5, #0]
 8006a3e:	2900      	cmp	r1, #0
 8006a40:	d0c9      	beq.n	80069d6 <__sflush_r+0x1a>
 8006a42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a46:	4299      	cmp	r1, r3
 8006a48:	d002      	beq.n	8006a50 <__sflush_r+0x94>
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f7ff f992 	bl	8005d74 <_free_r>
 8006a50:	2000      	movs	r0, #0
 8006a52:	6360      	str	r0, [r4, #52]	; 0x34
 8006a54:	e7c0      	b.n	80069d8 <__sflush_r+0x1c>
 8006a56:	2301      	movs	r3, #1
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b0      	blx	r6
 8006a5c:	1c41      	adds	r1, r0, #1
 8006a5e:	d1c8      	bne.n	80069f2 <__sflush_r+0x36>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0c5      	beq.n	80069f2 <__sflush_r+0x36>
 8006a66:	2b1d      	cmp	r3, #29
 8006a68:	d001      	beq.n	8006a6e <__sflush_r+0xb2>
 8006a6a:	2b16      	cmp	r3, #22
 8006a6c:	d101      	bne.n	8006a72 <__sflush_r+0xb6>
 8006a6e:	602f      	str	r7, [r5, #0]
 8006a70:	e7b1      	b.n	80069d6 <__sflush_r+0x1a>
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a78:	81a3      	strh	r3, [r4, #12]
 8006a7a:	e7ad      	b.n	80069d8 <__sflush_r+0x1c>
 8006a7c:	690f      	ldr	r7, [r1, #16]
 8006a7e:	2f00      	cmp	r7, #0
 8006a80:	d0a9      	beq.n	80069d6 <__sflush_r+0x1a>
 8006a82:	0793      	lsls	r3, r2, #30
 8006a84:	680e      	ldr	r6, [r1, #0]
 8006a86:	bf08      	it	eq
 8006a88:	694b      	ldreq	r3, [r1, #20]
 8006a8a:	600f      	str	r7, [r1, #0]
 8006a8c:	bf18      	it	ne
 8006a8e:	2300      	movne	r3, #0
 8006a90:	eba6 0807 	sub.w	r8, r6, r7
 8006a94:	608b      	str	r3, [r1, #8]
 8006a96:	f1b8 0f00 	cmp.w	r8, #0
 8006a9a:	dd9c      	ble.n	80069d6 <__sflush_r+0x1a>
 8006a9c:	6a21      	ldr	r1, [r4, #32]
 8006a9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006aa0:	4643      	mov	r3, r8
 8006aa2:	463a      	mov	r2, r7
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b0      	blx	r6
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	dc06      	bgt.n	8006aba <__sflush_r+0xfe>
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ab2:	81a3      	strh	r3, [r4, #12]
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	e78e      	b.n	80069d8 <__sflush_r+0x1c>
 8006aba:	4407      	add	r7, r0
 8006abc:	eba8 0800 	sub.w	r8, r8, r0
 8006ac0:	e7e9      	b.n	8006a96 <__sflush_r+0xda>
 8006ac2:	bf00      	nop
 8006ac4:	dfbffffe 	.word	0xdfbffffe

08006ac8 <_fflush_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	690b      	ldr	r3, [r1, #16]
 8006acc:	4605      	mov	r5, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	b913      	cbnz	r3, 8006ad8 <_fflush_r+0x10>
 8006ad2:	2500      	movs	r5, #0
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	b118      	cbz	r0, 8006ae2 <_fflush_r+0x1a>
 8006ada:	6a03      	ldr	r3, [r0, #32]
 8006adc:	b90b      	cbnz	r3, 8006ae2 <_fflush_r+0x1a>
 8006ade:	f7fe fecf 	bl	8005880 <__sinit>
 8006ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0f3      	beq.n	8006ad2 <_fflush_r+0xa>
 8006aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006aec:	07d0      	lsls	r0, r2, #31
 8006aee:	d404      	bmi.n	8006afa <_fflush_r+0x32>
 8006af0:	0599      	lsls	r1, r3, #22
 8006af2:	d402      	bmi.n	8006afa <_fflush_r+0x32>
 8006af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006af6:	f7ff f92c 	bl	8005d52 <__retarget_lock_acquire_recursive>
 8006afa:	4628      	mov	r0, r5
 8006afc:	4621      	mov	r1, r4
 8006afe:	f7ff ff5d 	bl	80069bc <__sflush_r>
 8006b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b04:	07da      	lsls	r2, r3, #31
 8006b06:	4605      	mov	r5, r0
 8006b08:	d4e4      	bmi.n	8006ad4 <_fflush_r+0xc>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	059b      	lsls	r3, r3, #22
 8006b0e:	d4e1      	bmi.n	8006ad4 <_fflush_r+0xc>
 8006b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b12:	f7ff f91f 	bl	8005d54 <__retarget_lock_release_recursive>
 8006b16:	e7dd      	b.n	8006ad4 <_fflush_r+0xc>

08006b18 <__swhatbuf_r>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b20:	2900      	cmp	r1, #0
 8006b22:	b096      	sub	sp, #88	; 0x58
 8006b24:	4615      	mov	r5, r2
 8006b26:	461e      	mov	r6, r3
 8006b28:	da0d      	bge.n	8006b46 <__swhatbuf_r+0x2e>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b30:	f04f 0100 	mov.w	r1, #0
 8006b34:	bf0c      	ite	eq
 8006b36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006b3a:	2340      	movne	r3, #64	; 0x40
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	6031      	str	r1, [r6, #0]
 8006b40:	602b      	str	r3, [r5, #0]
 8006b42:	b016      	add	sp, #88	; 0x58
 8006b44:	bd70      	pop	{r4, r5, r6, pc}
 8006b46:	466a      	mov	r2, sp
 8006b48:	f000 f9c6 	bl	8006ed8 <_fstat_r>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	dbec      	blt.n	8006b2a <__swhatbuf_r+0x12>
 8006b50:	9901      	ldr	r1, [sp, #4]
 8006b52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006b56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006b5a:	4259      	negs	r1, r3
 8006b5c:	4159      	adcs	r1, r3
 8006b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b62:	e7eb      	b.n	8006b3c <__swhatbuf_r+0x24>

08006b64 <__smakebuf_r>:
 8006b64:	898b      	ldrh	r3, [r1, #12]
 8006b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b68:	079d      	lsls	r5, r3, #30
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	d507      	bpl.n	8006b80 <__smakebuf_r+0x1c>
 8006b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	6123      	str	r3, [r4, #16]
 8006b78:	2301      	movs	r3, #1
 8006b7a:	6163      	str	r3, [r4, #20]
 8006b7c:	b002      	add	sp, #8
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	ab01      	add	r3, sp, #4
 8006b82:	466a      	mov	r2, sp
 8006b84:	f7ff ffc8 	bl	8006b18 <__swhatbuf_r>
 8006b88:	9900      	ldr	r1, [sp, #0]
 8006b8a:	4605      	mov	r5, r0
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f7fe fcdb 	bl	8005548 <_malloc_r>
 8006b92:	b948      	cbnz	r0, 8006ba8 <__smakebuf_r+0x44>
 8006b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b98:	059a      	lsls	r2, r3, #22
 8006b9a:	d4ef      	bmi.n	8006b7c <__smakebuf_r+0x18>
 8006b9c:	f023 0303 	bic.w	r3, r3, #3
 8006ba0:	f043 0302 	orr.w	r3, r3, #2
 8006ba4:	81a3      	strh	r3, [r4, #12]
 8006ba6:	e7e3      	b.n	8006b70 <__smakebuf_r+0xc>
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	6020      	str	r0, [r4, #0]
 8006bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	9b00      	ldr	r3, [sp, #0]
 8006bb4:	6163      	str	r3, [r4, #20]
 8006bb6:	9b01      	ldr	r3, [sp, #4]
 8006bb8:	6120      	str	r0, [r4, #16]
 8006bba:	b15b      	cbz	r3, 8006bd4 <__smakebuf_r+0x70>
 8006bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f000 f99b 	bl	8006efc <_isatty_r>
 8006bc6:	b128      	cbz	r0, 8006bd4 <__smakebuf_r+0x70>
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	f023 0303 	bic.w	r3, r3, #3
 8006bce:	f043 0301 	orr.w	r3, r3, #1
 8006bd2:	81a3      	strh	r3, [r4, #12]
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	431d      	orrs	r5, r3
 8006bd8:	81a5      	strh	r5, [r4, #12]
 8006bda:	e7cf      	b.n	8006b7c <__smakebuf_r+0x18>

08006bdc <lflush>:
 8006bdc:	898b      	ldrh	r3, [r1, #12]
 8006bde:	f003 0309 	and.w	r3, r3, #9
 8006be2:	2b09      	cmp	r3, #9
 8006be4:	d103      	bne.n	8006bee <lflush+0x12>
 8006be6:	4b03      	ldr	r3, [pc, #12]	; (8006bf4 <lflush+0x18>)
 8006be8:	6818      	ldr	r0, [r3, #0]
 8006bea:	f7ff bf6d 	b.w	8006ac8 <_fflush_r>
 8006bee:	2000      	movs	r0, #0
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	20000064 	.word	0x20000064

08006bf8 <__srefill_r>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	b118      	cbz	r0, 8006c08 <__srefill_r+0x10>
 8006c00:	6a03      	ldr	r3, [r0, #32]
 8006c02:	b90b      	cbnz	r3, 8006c08 <__srefill_r+0x10>
 8006c04:	f7fe fe3c 	bl	8005880 <__sinit>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6063      	str	r3, [r4, #4]
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c12:	069e      	lsls	r6, r3, #26
 8006c14:	d502      	bpl.n	8006c1c <__srefill_r+0x24>
 8006c16:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1a:	e05c      	b.n	8006cd6 <__srefill_r+0xde>
 8006c1c:	0758      	lsls	r0, r3, #29
 8006c1e:	d448      	bmi.n	8006cb2 <__srefill_r+0xba>
 8006c20:	06d9      	lsls	r1, r3, #27
 8006c22:	d405      	bmi.n	8006c30 <__srefill_r+0x38>
 8006c24:	2309      	movs	r3, #9
 8006c26:	602b      	str	r3, [r5, #0]
 8006c28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c2c:	81a3      	strh	r3, [r4, #12]
 8006c2e:	e7f2      	b.n	8006c16 <__srefill_r+0x1e>
 8006c30:	071a      	lsls	r2, r3, #28
 8006c32:	d50b      	bpl.n	8006c4c <__srefill_r+0x54>
 8006c34:	4621      	mov	r1, r4
 8006c36:	4628      	mov	r0, r5
 8006c38:	f7ff ff46 	bl	8006ac8 <_fflush_r>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d1ea      	bne.n	8006c16 <__srefill_r+0x1e>
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	60a0      	str	r0, [r4, #8]
 8006c44:	f023 0308 	bic.w	r3, r3, #8
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	61a0      	str	r0, [r4, #24]
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	f043 0304 	orr.w	r3, r3, #4
 8006c52:	81a3      	strh	r3, [r4, #12]
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	b91b      	cbnz	r3, 8006c60 <__srefill_r+0x68>
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f7ff ff82 	bl	8006b64 <__smakebuf_r>
 8006c60:	89a6      	ldrh	r6, [r4, #12]
 8006c62:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8006c66:	07b3      	lsls	r3, r6, #30
 8006c68:	d00f      	beq.n	8006c8a <__srefill_r+0x92>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	4a1b      	ldr	r2, [pc, #108]	; (8006cdc <__srefill_r+0xe4>)
 8006c6e:	491c      	ldr	r1, [pc, #112]	; (8006ce0 <__srefill_r+0xe8>)
 8006c70:	481c      	ldr	r0, [pc, #112]	; (8006ce4 <__srefill_r+0xec>)
 8006c72:	81a3      	strh	r3, [r4, #12]
 8006c74:	f006 0609 	and.w	r6, r6, #9
 8006c78:	f7fe fe1a 	bl	80058b0 <_fwalk_sglue>
 8006c7c:	2e09      	cmp	r6, #9
 8006c7e:	81a7      	strh	r7, [r4, #12]
 8006c80:	d103      	bne.n	8006c8a <__srefill_r+0x92>
 8006c82:	4621      	mov	r1, r4
 8006c84:	4628      	mov	r0, r5
 8006c86:	f7ff fe99 	bl	80069bc <__sflush_r>
 8006c8a:	6922      	ldr	r2, [r4, #16]
 8006c8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c8e:	6963      	ldr	r3, [r4, #20]
 8006c90:	6a21      	ldr	r1, [r4, #32]
 8006c92:	6022      	str	r2, [r4, #0]
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b0      	blx	r6
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	6060      	str	r0, [r4, #4]
 8006c9c:	dc1c      	bgt.n	8006cd8 <__srefill_r+0xe0>
 8006c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ca2:	bf17      	itett	ne
 8006ca4:	2200      	movne	r2, #0
 8006ca6:	f043 0320 	orreq.w	r3, r3, #32
 8006caa:	6062      	strne	r2, [r4, #4]
 8006cac:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8006cb0:	e7bc      	b.n	8006c2c <__srefill_r+0x34>
 8006cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cb4:	2900      	cmp	r1, #0
 8006cb6:	d0cd      	beq.n	8006c54 <__srefill_r+0x5c>
 8006cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cbc:	4299      	cmp	r1, r3
 8006cbe:	d002      	beq.n	8006cc6 <__srefill_r+0xce>
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	f7ff f857 	bl	8005d74 <_free_r>
 8006cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cc8:	6063      	str	r3, [r4, #4]
 8006cca:	2000      	movs	r0, #0
 8006ccc:	6360      	str	r0, [r4, #52]	; 0x34
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0c0      	beq.n	8006c54 <__srefill_r+0x5c>
 8006cd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd8:	2000      	movs	r0, #0
 8006cda:	e7fc      	b.n	8006cd6 <__srefill_r+0xde>
 8006cdc:	2000000c 	.word	0x2000000c
 8006ce0:	08006bdd 	.word	0x08006bdd
 8006ce4:	20000018 	.word	0x20000018

08006ce8 <__sccl>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	780b      	ldrb	r3, [r1, #0]
 8006cec:	4604      	mov	r4, r0
 8006cee:	2b5e      	cmp	r3, #94	; 0x5e
 8006cf0:	bf0b      	itete	eq
 8006cf2:	784b      	ldrbeq	r3, [r1, #1]
 8006cf4:	1c4a      	addne	r2, r1, #1
 8006cf6:	1c8a      	addeq	r2, r1, #2
 8006cf8:	2100      	movne	r1, #0
 8006cfa:	bf08      	it	eq
 8006cfc:	2101      	moveq	r1, #1
 8006cfe:	3801      	subs	r0, #1
 8006d00:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006d04:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006d08:	42a8      	cmp	r0, r5
 8006d0a:	d1fb      	bne.n	8006d04 <__sccl+0x1c>
 8006d0c:	b90b      	cbnz	r3, 8006d12 <__sccl+0x2a>
 8006d0e:	1e50      	subs	r0, r2, #1
 8006d10:	bd70      	pop	{r4, r5, r6, pc}
 8006d12:	f081 0101 	eor.w	r1, r1, #1
 8006d16:	54e1      	strb	r1, [r4, r3]
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006d20:	2d2d      	cmp	r5, #45	; 0x2d
 8006d22:	d005      	beq.n	8006d30 <__sccl+0x48>
 8006d24:	2d5d      	cmp	r5, #93	; 0x5d
 8006d26:	d016      	beq.n	8006d56 <__sccl+0x6e>
 8006d28:	2d00      	cmp	r5, #0
 8006d2a:	d0f1      	beq.n	8006d10 <__sccl+0x28>
 8006d2c:	462b      	mov	r3, r5
 8006d2e:	e7f2      	b.n	8006d16 <__sccl+0x2e>
 8006d30:	7846      	ldrb	r6, [r0, #1]
 8006d32:	2e5d      	cmp	r6, #93	; 0x5d
 8006d34:	d0fa      	beq.n	8006d2c <__sccl+0x44>
 8006d36:	42b3      	cmp	r3, r6
 8006d38:	dcf8      	bgt.n	8006d2c <__sccl+0x44>
 8006d3a:	3002      	adds	r0, #2
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	3201      	adds	r2, #1
 8006d40:	4296      	cmp	r6, r2
 8006d42:	54a1      	strb	r1, [r4, r2]
 8006d44:	dcfb      	bgt.n	8006d3e <__sccl+0x56>
 8006d46:	1af2      	subs	r2, r6, r3
 8006d48:	3a01      	subs	r2, #1
 8006d4a:	1c5d      	adds	r5, r3, #1
 8006d4c:	42b3      	cmp	r3, r6
 8006d4e:	bfa8      	it	ge
 8006d50:	2200      	movge	r2, #0
 8006d52:	18ab      	adds	r3, r5, r2
 8006d54:	e7e1      	b.n	8006d1a <__sccl+0x32>
 8006d56:	4610      	mov	r0, r2
 8006d58:	e7da      	b.n	8006d10 <__sccl+0x28>

08006d5a <__submore>:
 8006d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5e:	460c      	mov	r4, r1
 8006d60:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006d62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d66:	4299      	cmp	r1, r3
 8006d68:	d11d      	bne.n	8006da6 <__submore+0x4c>
 8006d6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d6e:	f7fe fbeb 	bl	8005548 <_malloc_r>
 8006d72:	b918      	cbnz	r0, 8006d7c <__submore+0x22>
 8006d74:	f04f 30ff 	mov.w	r0, #4294967295
 8006d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d80:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d82:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006d86:	6360      	str	r0, [r4, #52]	; 0x34
 8006d88:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006d8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006d90:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006d94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006d98:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006d9c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006da0:	6020      	str	r0, [r4, #0]
 8006da2:	2000      	movs	r0, #0
 8006da4:	e7e8      	b.n	8006d78 <__submore+0x1e>
 8006da6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006da8:	0077      	lsls	r7, r6, #1
 8006daa:	463a      	mov	r2, r7
 8006dac:	f000 f8b6 	bl	8006f1c <_realloc_r>
 8006db0:	4605      	mov	r5, r0
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d0de      	beq.n	8006d74 <__submore+0x1a>
 8006db6:	eb00 0806 	add.w	r8, r0, r6
 8006dba:	4601      	mov	r1, r0
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	f7fe ffc9 	bl	8005d56 <memcpy>
 8006dc4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006dc8:	f8c4 8000 	str.w	r8, [r4]
 8006dcc:	e7e9      	b.n	8006da2 <__submore+0x48>

08006dce <_ungetc_r>:
 8006dce:	b570      	push	{r4, r5, r6, lr}
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	1c4a      	adds	r2, r1, #1
 8006dd4:	4606      	mov	r6, r0
 8006dd6:	460d      	mov	r5, r1
 8006dd8:	d103      	bne.n	8006de2 <_ungetc_r+0x14>
 8006dda:	f04f 35ff 	mov.w	r5, #4294967295
 8006dde:	4628      	mov	r0, r5
 8006de0:	bd70      	pop	{r4, r5, r6, pc}
 8006de2:	b118      	cbz	r0, 8006dec <_ungetc_r+0x1e>
 8006de4:	6a03      	ldr	r3, [r0, #32]
 8006de6:	b90b      	cbnz	r3, 8006dec <_ungetc_r+0x1e>
 8006de8:	f7fe fd4a 	bl	8005880 <__sinit>
 8006dec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dee:	07db      	lsls	r3, r3, #31
 8006df0:	d405      	bmi.n	8006dfe <_ungetc_r+0x30>
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	0598      	lsls	r0, r3, #22
 8006df6:	d402      	bmi.n	8006dfe <_ungetc_r+0x30>
 8006df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dfa:	f7fe ffaa 	bl	8005d52 <__retarget_lock_acquire_recursive>
 8006dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e02:	f023 0320 	bic.w	r3, r3, #32
 8006e06:	0759      	lsls	r1, r3, #29
 8006e08:	81a3      	strh	r3, [r4, #12]
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	d423      	bmi.n	8006e56 <_ungetc_r+0x88>
 8006e0e:	06d3      	lsls	r3, r2, #27
 8006e10:	d409      	bmi.n	8006e26 <_ungetc_r+0x58>
 8006e12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e14:	07dd      	lsls	r5, r3, #31
 8006e16:	d4e0      	bmi.n	8006dda <_ungetc_r+0xc>
 8006e18:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006e1c:	d1dd      	bne.n	8006dda <_ungetc_r+0xc>
 8006e1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e20:	f7fe ff98 	bl	8005d54 <__retarget_lock_release_recursive>
 8006e24:	e7d9      	b.n	8006dda <_ungetc_r+0xc>
 8006e26:	0710      	lsls	r0, r2, #28
 8006e28:	d511      	bpl.n	8006e4e <_ungetc_r+0x80>
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f7ff fe4b 	bl	8006ac8 <_fflush_r>
 8006e32:	b130      	cbz	r0, 8006e42 <_ungetc_r+0x74>
 8006e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e36:	07d9      	lsls	r1, r3, #31
 8006e38:	d4cf      	bmi.n	8006dda <_ungetc_r+0xc>
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006e40:	e7ec      	b.n	8006e1c <_ungetc_r+0x4e>
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	60a0      	str	r0, [r4, #8]
 8006e46:	f023 0308 	bic.w	r3, r3, #8
 8006e4a:	81a3      	strh	r3, [r4, #12]
 8006e4c:	61a0      	str	r0, [r4, #24]
 8006e4e:	89a3      	ldrh	r3, [r4, #12]
 8006e50:	f043 0304 	orr.w	r3, r3, #4
 8006e54:	81a3      	strh	r3, [r4, #12]
 8006e56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e58:	6862      	ldr	r2, [r4, #4]
 8006e5a:	b2ed      	uxtb	r5, r5
 8006e5c:	b1d3      	cbz	r3, 8006e94 <_ungetc_r+0xc6>
 8006e5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e60:	4293      	cmp	r3, r2
 8006e62:	dc05      	bgt.n	8006e70 <_ungetc_r+0xa2>
 8006e64:	4621      	mov	r1, r4
 8006e66:	4630      	mov	r0, r6
 8006e68:	f7ff ff77 	bl	8006d5a <__submore>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d1e1      	bne.n	8006e34 <_ungetc_r+0x66>
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	1e5a      	subs	r2, r3, #1
 8006e74:	6022      	str	r2, [r4, #0]
 8006e76:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006e7a:	6863      	ldr	r3, [r4, #4]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	6063      	str	r3, [r4, #4]
 8006e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e82:	07da      	lsls	r2, r3, #31
 8006e84:	d4ab      	bmi.n	8006dde <_ungetc_r+0x10>
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	059b      	lsls	r3, r3, #22
 8006e8a:	d4a8      	bmi.n	8006dde <_ungetc_r+0x10>
 8006e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e8e:	f7fe ff61 	bl	8005d54 <__retarget_lock_release_recursive>
 8006e92:	e7a4      	b.n	8006dde <_ungetc_r+0x10>
 8006e94:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006e96:	6920      	ldr	r0, [r4, #16]
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	f001 0101 	and.w	r1, r1, #1
 8006e9e:	b160      	cbz	r0, 8006eba <_ungetc_r+0xec>
 8006ea0:	4298      	cmp	r0, r3
 8006ea2:	d20a      	bcs.n	8006eba <_ungetc_r+0xec>
 8006ea4:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8006ea8:	42a8      	cmp	r0, r5
 8006eaa:	d106      	bne.n	8006eba <_ungetc_r+0xec>
 8006eac:	3b01      	subs	r3, #1
 8006eae:	3201      	adds	r2, #1
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	6062      	str	r2, [r4, #4]
 8006eb4:	2900      	cmp	r1, #0
 8006eb6:	d192      	bne.n	8006dde <_ungetc_r+0x10>
 8006eb8:	e7e5      	b.n	8006e86 <_ungetc_r+0xb8>
 8006eba:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006ebe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ec2:	6363      	str	r3, [r4, #52]	; 0x34
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	63a3      	str	r3, [r4, #56]	; 0x38
 8006ec8:	4623      	mov	r3, r4
 8006eca:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	6063      	str	r3, [r4, #4]
 8006ed4:	e7ee      	b.n	8006eb4 <_ungetc_r+0xe6>
	...

08006ed8 <_fstat_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d07      	ldr	r5, [pc, #28]	; (8006ef8 <_fstat_r+0x20>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	602b      	str	r3, [r5, #0]
 8006ee6:	f7f9 fe9f 	bl	8000c28 <_fstat>
 8006eea:	1c43      	adds	r3, r0, #1
 8006eec:	d102      	bne.n	8006ef4 <_fstat_r+0x1c>
 8006eee:	682b      	ldr	r3, [r5, #0]
 8006ef0:	b103      	cbz	r3, 8006ef4 <_fstat_r+0x1c>
 8006ef2:	6023      	str	r3, [r4, #0]
 8006ef4:	bd38      	pop	{r3, r4, r5, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000a50 	.word	0x20000a50

08006efc <_isatty_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4d06      	ldr	r5, [pc, #24]	; (8006f18 <_isatty_r+0x1c>)
 8006f00:	2300      	movs	r3, #0
 8006f02:	4604      	mov	r4, r0
 8006f04:	4608      	mov	r0, r1
 8006f06:	602b      	str	r3, [r5, #0]
 8006f08:	f7f9 fdfc 	bl	8000b04 <_isatty>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_isatty_r+0x1a>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_isatty_r+0x1a>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20000a50 	.word	0x20000a50

08006f1c <_realloc_r>:
 8006f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f20:	4680      	mov	r8, r0
 8006f22:	4614      	mov	r4, r2
 8006f24:	460e      	mov	r6, r1
 8006f26:	b921      	cbnz	r1, 8006f32 <_realloc_r+0x16>
 8006f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	f7fe bb0b 	b.w	8005548 <_malloc_r>
 8006f32:	b92a      	cbnz	r2, 8006f40 <_realloc_r+0x24>
 8006f34:	f7fe ff1e 	bl	8005d74 <_free_r>
 8006f38:	4625      	mov	r5, r4
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f40:	f000 f890 	bl	8007064 <_malloc_usable_size_r>
 8006f44:	4284      	cmp	r4, r0
 8006f46:	4607      	mov	r7, r0
 8006f48:	d802      	bhi.n	8006f50 <_realloc_r+0x34>
 8006f4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f4e:	d812      	bhi.n	8006f76 <_realloc_r+0x5a>
 8006f50:	4621      	mov	r1, r4
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7fe faf8 	bl	8005548 <_malloc_r>
 8006f58:	4605      	mov	r5, r0
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d0ed      	beq.n	8006f3a <_realloc_r+0x1e>
 8006f5e:	42bc      	cmp	r4, r7
 8006f60:	4622      	mov	r2, r4
 8006f62:	4631      	mov	r1, r6
 8006f64:	bf28      	it	cs
 8006f66:	463a      	movcs	r2, r7
 8006f68:	f7fe fef5 	bl	8005d56 <memcpy>
 8006f6c:	4631      	mov	r1, r6
 8006f6e:	4640      	mov	r0, r8
 8006f70:	f7fe ff00 	bl	8005d74 <_free_r>
 8006f74:	e7e1      	b.n	8006f3a <_realloc_r+0x1e>
 8006f76:	4635      	mov	r5, r6
 8006f78:	e7df      	b.n	8006f3a <_realloc_r+0x1e>
	...

08006f7c <_strtoul_l.constprop.0>:
 8006f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f80:	4f36      	ldr	r7, [pc, #216]	; (800705c <_strtoul_l.constprop.0+0xe0>)
 8006f82:	4686      	mov	lr, r0
 8006f84:	460d      	mov	r5, r1
 8006f86:	4628      	mov	r0, r5
 8006f88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f8c:	5d3e      	ldrb	r6, [r7, r4]
 8006f8e:	f016 0608 	ands.w	r6, r6, #8
 8006f92:	d1f8      	bne.n	8006f86 <_strtoul_l.constprop.0+0xa>
 8006f94:	2c2d      	cmp	r4, #45	; 0x2d
 8006f96:	d130      	bne.n	8006ffa <_strtoul_l.constprop.0+0x7e>
 8006f98:	782c      	ldrb	r4, [r5, #0]
 8006f9a:	2601      	movs	r6, #1
 8006f9c:	1c85      	adds	r5, r0, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d057      	beq.n	8007052 <_strtoul_l.constprop.0+0xd6>
 8006fa2:	2b10      	cmp	r3, #16
 8006fa4:	d109      	bne.n	8006fba <_strtoul_l.constprop.0+0x3e>
 8006fa6:	2c30      	cmp	r4, #48	; 0x30
 8006fa8:	d107      	bne.n	8006fba <_strtoul_l.constprop.0+0x3e>
 8006faa:	7828      	ldrb	r0, [r5, #0]
 8006fac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006fb0:	2858      	cmp	r0, #88	; 0x58
 8006fb2:	d149      	bne.n	8007048 <_strtoul_l.constprop.0+0xcc>
 8006fb4:	786c      	ldrb	r4, [r5, #1]
 8006fb6:	2310      	movs	r3, #16
 8006fb8:	3502      	adds	r5, #2
 8006fba:	f04f 38ff 	mov.w	r8, #4294967295
 8006fbe:	2700      	movs	r7, #0
 8006fc0:	fbb8 f8f3 	udiv	r8, r8, r3
 8006fc4:	fb03 f908 	mul.w	r9, r3, r8
 8006fc8:	ea6f 0909 	mvn.w	r9, r9
 8006fcc:	4638      	mov	r0, r7
 8006fce:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006fd2:	f1bc 0f09 	cmp.w	ip, #9
 8006fd6:	d815      	bhi.n	8007004 <_strtoul_l.constprop.0+0x88>
 8006fd8:	4664      	mov	r4, ip
 8006fda:	42a3      	cmp	r3, r4
 8006fdc:	dd23      	ble.n	8007026 <_strtoul_l.constprop.0+0xaa>
 8006fde:	f1b7 3fff 	cmp.w	r7, #4294967295
 8006fe2:	d007      	beq.n	8006ff4 <_strtoul_l.constprop.0+0x78>
 8006fe4:	4580      	cmp	r8, r0
 8006fe6:	d31b      	bcc.n	8007020 <_strtoul_l.constprop.0+0xa4>
 8006fe8:	d101      	bne.n	8006fee <_strtoul_l.constprop.0+0x72>
 8006fea:	45a1      	cmp	r9, r4
 8006fec:	db18      	blt.n	8007020 <_strtoul_l.constprop.0+0xa4>
 8006fee:	fb00 4003 	mla	r0, r0, r3, r4
 8006ff2:	2701      	movs	r7, #1
 8006ff4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ff8:	e7e9      	b.n	8006fce <_strtoul_l.constprop.0+0x52>
 8006ffa:	2c2b      	cmp	r4, #43	; 0x2b
 8006ffc:	bf04      	itt	eq
 8006ffe:	782c      	ldrbeq	r4, [r5, #0]
 8007000:	1c85      	addeq	r5, r0, #2
 8007002:	e7cc      	b.n	8006f9e <_strtoul_l.constprop.0+0x22>
 8007004:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007008:	f1bc 0f19 	cmp.w	ip, #25
 800700c:	d801      	bhi.n	8007012 <_strtoul_l.constprop.0+0x96>
 800700e:	3c37      	subs	r4, #55	; 0x37
 8007010:	e7e3      	b.n	8006fda <_strtoul_l.constprop.0+0x5e>
 8007012:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007016:	f1bc 0f19 	cmp.w	ip, #25
 800701a:	d804      	bhi.n	8007026 <_strtoul_l.constprop.0+0xaa>
 800701c:	3c57      	subs	r4, #87	; 0x57
 800701e:	e7dc      	b.n	8006fda <_strtoul_l.constprop.0+0x5e>
 8007020:	f04f 37ff 	mov.w	r7, #4294967295
 8007024:	e7e6      	b.n	8006ff4 <_strtoul_l.constprop.0+0x78>
 8007026:	1c7b      	adds	r3, r7, #1
 8007028:	d106      	bne.n	8007038 <_strtoul_l.constprop.0+0xbc>
 800702a:	2322      	movs	r3, #34	; 0x22
 800702c:	f8ce 3000 	str.w	r3, [lr]
 8007030:	4638      	mov	r0, r7
 8007032:	b932      	cbnz	r2, 8007042 <_strtoul_l.constprop.0+0xc6>
 8007034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007038:	b106      	cbz	r6, 800703c <_strtoul_l.constprop.0+0xc0>
 800703a:	4240      	negs	r0, r0
 800703c:	2a00      	cmp	r2, #0
 800703e:	d0f9      	beq.n	8007034 <_strtoul_l.constprop.0+0xb8>
 8007040:	b107      	cbz	r7, 8007044 <_strtoul_l.constprop.0+0xc8>
 8007042:	1e69      	subs	r1, r5, #1
 8007044:	6011      	str	r1, [r2, #0]
 8007046:	e7f5      	b.n	8007034 <_strtoul_l.constprop.0+0xb8>
 8007048:	2430      	movs	r4, #48	; 0x30
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1b5      	bne.n	8006fba <_strtoul_l.constprop.0+0x3e>
 800704e:	2308      	movs	r3, #8
 8007050:	e7b3      	b.n	8006fba <_strtoul_l.constprop.0+0x3e>
 8007052:	2c30      	cmp	r4, #48	; 0x30
 8007054:	d0a9      	beq.n	8006faa <_strtoul_l.constprop.0+0x2e>
 8007056:	230a      	movs	r3, #10
 8007058:	e7af      	b.n	8006fba <_strtoul_l.constprop.0+0x3e>
 800705a:	bf00      	nop
 800705c:	080070dd 	.word	0x080070dd

08007060 <_strtoul_r>:
 8007060:	f7ff bf8c 	b.w	8006f7c <_strtoul_l.constprop.0>

08007064 <_malloc_usable_size_r>:
 8007064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007068:	1f18      	subs	r0, r3, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	bfbc      	itt	lt
 800706e:	580b      	ldrlt	r3, [r1, r0]
 8007070:	18c0      	addlt	r0, r0, r3
 8007072:	4770      	bx	lr

08007074 <_init>:
 8007074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007076:	bf00      	nop
 8007078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707a:	bc08      	pop	{r3}
 800707c:	469e      	mov	lr, r3
 800707e:	4770      	bx	lr

08007080 <_fini>:
 8007080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007082:	bf00      	nop
 8007084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007086:	bc08      	pop	{r3}
 8007088:	469e      	mov	lr, r3
 800708a:	4770      	bx	lr

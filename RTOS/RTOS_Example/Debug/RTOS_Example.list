
RTOS_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c08  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e70  08006e70  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08006e70  08006e70  00016e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e78  08006e78  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e78  08006e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e7c  08006e7c  00016e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08006ee0  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08006f80  00020100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004824  200001a0  08007020  000201a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200049c4  08007020  000249c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201ce  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001edab  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003eef  00000000  00000000  0003efbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001868  00000000  00000000  00042eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000012fc  00000000  00000000  00044718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b71b  00000000  00000000  00045a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001cc67  00000000  00000000  0007112f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010cd21  00000000  00000000  0008dd96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006a54  00000000  00000000  0019aab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006b  00000000  00000000  001a150c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08006df0 	.word	0x08006df0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08006df0 	.word	0x08006df0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4a07      	ldr	r2, [pc, #28]	; (8000568 <vApplicationGetIdleTaskMemory+0x2c>)
 800054c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <vApplicationGetIdleTaskMemory+0x30>)
 8000552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	200001bc 	.word	0x200001bc
 800056c:	2000025c 	.word	0x2000025c

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b090      	sub	sp, #64	; 0x40
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fcd6 	bl	8000f26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f847 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f963 	bl	8000848 <MX_GPIO_Init>
  MX_ETH_Init();
 8000582:	f000 f8b5 	bl	80006f0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000586:	f000 f901 	bl	800078c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800058a:	f000 f92f 	bl	80007ec <MX_USB_OTG_FS_PCD_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Binary_Sem */
  osSemaphoreDef(Binary_Sem);
 800058e:	2300      	movs	r3, #0
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
 8000592:	2300      	movs	r3, #0
 8000594:	63fb      	str	r3, [r7, #60]	; 0x3c
  Binary_SemHandle = osSemaphoreCreate(osSemaphore(Binary_Sem), 1);
 8000596:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800059a:	2101      	movs	r1, #1
 800059c:	4618      	mov	r0, r3
 800059e:	f004 f884 	bl	80046aa <osSemaphoreCreate>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <main+0x88>)
 80005a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_App, osPriorityNormal, 0, 128);
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <main+0x8c>)
 80005aa:	f107 041c 	add.w	r4, r7, #28
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 f811 	bl	80045ea <osThreadCreate>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <main+0x90>)
 80005cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_App, osPriorityNormal, 0, 128);
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <main+0x94>)
 80005d0:	463c      	mov	r4, r7
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80005e0:	463b      	mov	r3, r7
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 f800 	bl	80045ea <osThreadCreate>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <main+0x98>)
 80005ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f0:	f003 fff4 	bl	80045dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x84>
 80005f6:	bf00      	nop
 80005f8:	20000adc 	.word	0x20000adc
 80005fc:	08006e10 	.word	0x08006e10
 8000600:	20000ad4 	.word	0x20000ad4
 8000604:	08006e34 	.word	0x08006e34
 8000608:	20000ad8 	.word	0x20000ad8

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	2234      	movs	r2, #52	; 0x34
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f006 fafe 	bl	8006c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000630:	f001 fbe0 	bl	8001df4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <SystemClock_Config+0xdc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a2b      	ldr	r2, [pc, #172]	; (80006e8 <SystemClock_Config+0xdc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <SystemClock_Config+0xdc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <SystemClock_Config+0xe0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000654:	4a25      	ldr	r2, [pc, #148]	; (80006ec <SystemClock_Config+0xe0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <SystemClock_Config+0xe0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800066c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000670:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000680:	2360      	movs	r3, #96	; 0x60
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fc0d 	bl	8001eb4 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a0:	f000 f9ac 	bl	80009fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a4:	f001 fbb6 	bl	8001e14 <HAL_PWREx_EnableOverDrive>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ae:	f000 f9a5 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2103      	movs	r1, #3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fe9e 	bl	8002410 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006da:	f000 f98f 	bl	80009fc <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_ETH_Init+0x84>)
 80006f6:	4a20      	ldr	r2, [pc, #128]	; (8000778 <MX_ETH_Init+0x88>)
 80006f8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_ETH_Init+0x8c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_ETH_Init+0x8c>)
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_ETH_Init+0x8c>)
 8000708:	22e1      	movs	r2, #225	; 0xe1
 800070a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_ETH_Init+0x8c>)
 800070e:	2200      	movs	r2, #0
 8000710:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_ETH_Init+0x8c>)
 8000714:	2200      	movs	r2, #0
 8000716:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_ETH_Init+0x8c>)
 800071a:	2200      	movs	r2, #0
 800071c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_ETH_Init+0x84>)
 8000720:	4a16      	ldr	r2, [pc, #88]	; (800077c <MX_ETH_Init+0x8c>)
 8000722:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_ETH_Init+0x84>)
 8000726:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800072a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_ETH_Init+0x84>)
 800072e:	4a14      	ldr	r2, [pc, #80]	; (8000780 <MX_ETH_Init+0x90>)
 8000730:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_ETH_Init+0x84>)
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <MX_ETH_Init+0x94>)
 8000736:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_ETH_Init+0x84>)
 800073a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800073e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <MX_ETH_Init+0x84>)
 8000742:	f000 fd23 	bl	800118c <HAL_ETH_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800074c:	f000 f956 	bl	80009fc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000750:	2238      	movs	r2, #56	; 0x38
 8000752:	2100      	movs	r1, #0
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_ETH_Init+0x98>)
 8000756:	f006 fa61 	bl	8006c1c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_ETH_Init+0x98>)
 800075c:	2221      	movs	r2, #33	; 0x21
 800075e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_ETH_Init+0x98>)
 8000762:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000766:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_ETH_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000494 	.word	0x20000494
 8000778:	40028000 	.word	0x40028000
 800077c:	20000ae0 	.word	0x20000ae0
 8000780:	20000100 	.word	0x20000100
 8000784:	20000060 	.word	0x20000060
 8000788:	2000045c 	.word	0x2000045c

0800078c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <MX_USART3_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007d0:	f002 ff7e 	bl	80036d0 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f90f 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000544 	.word	0x20000544
 80007e8:	40004800 	.word	0x40004800

080007ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fa:	2206      	movs	r2, #6
 80007fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000800:	2202      	movs	r2, #2
 8000802:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080c:	2202      	movs	r2, #2
 800080e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2201      	movs	r2, #1
 8000814:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000824:	2201      	movs	r2, #1
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	f001 f997 	bl	8001b62 <HAL_PCD_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f8df 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200005cc 	.word	0x200005cc

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b47      	ldr	r3, [pc, #284]	; (800097c <MX_GPIO_Init+0x134>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a46      	ldr	r2, [pc, #280]	; (800097c <MX_GPIO_Init+0x134>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b44      	ldr	r3, [pc, #272]	; (800097c <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	61bb      	str	r3, [r7, #24]
 8000874:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	4b41      	ldr	r3, [pc, #260]	; (800097c <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a40      	ldr	r2, [pc, #256]	; (800097c <MX_GPIO_Init+0x134>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b3e      	ldr	r3, [pc, #248]	; (800097c <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b3b      	ldr	r3, [pc, #236]	; (800097c <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a3a      	ldr	r2, [pc, #232]	; (800097c <MX_GPIO_Init+0x134>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a34      	ldr	r2, [pc, #208]	; (800097c <MX_GPIO_Init+0x134>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <MX_GPIO_Init+0x134>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <MX_GPIO_Init+0x134>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a2e      	ldr	r2, [pc, #184]	; (800097c <MX_GPIO_Init+0x134>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_GPIO_Init+0x134>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_GPIO_Init+0x134>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a28      	ldr	r2, [pc, #160]	; (800097c <MX_GPIO_Init+0x134>)
 80008dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <MX_GPIO_Init+0x134>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008f4:	4822      	ldr	r0, [pc, #136]	; (8000980 <MX_GPIO_Init+0x138>)
 80008f6:	f001 f91b 	bl	8001b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2140      	movs	r1, #64	; 0x40
 80008fe:	4821      	ldr	r0, [pc, #132]	; (8000984 <MX_GPIO_Init+0x13c>)
 8000900:	f001 f916 	bl	8001b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000910:	2302      	movs	r3, #2
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	481b      	ldr	r0, [pc, #108]	; (8000988 <MX_GPIO_Init+0x140>)
 800091c:	f000 ff5c 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000920:	f244 0381 	movw	r3, #16513	; 0x4081
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4811      	ldr	r0, [pc, #68]	; (8000980 <MX_GPIO_Init+0x138>)
 800093a:	f000 ff4d 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800093e:	2340      	movs	r3, #64	; 0x40
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <MX_GPIO_Init+0x13c>)
 8000956:	f000 ff3f 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_GPIO_Init+0x13c>)
 800096e:	f000 ff33 	bl	80017d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40020400 	.word	0x40020400
 8000984:	40021800 	.word	0x40021800
 8000988:	40020800 	.word	0x40020800

0800098c <Task1_App>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_App */
void Task1_App(void const * argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2101      	movs	r1, #1
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <Task1_App+0x24>)
 800099a:	f001 f8c9 	bl	8001b30 <HAL_GPIO_WritePin>
	  osSemaphoreWait(Binary_SemHandle, osWaitForever); // both semaphore or time can exit and continue here
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <Task1_App+0x28>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f04f 31ff 	mov.w	r1, #4294967295
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 feb2 	bl	8004710 <osSemaphoreWait>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80009ac:	e7f2      	b.n	8000994 <Task1_App+0x8>
 80009ae:	bf00      	nop
 80009b0:	40020400 	.word	0x40020400
 80009b4:	20000adc 	.word	0x20000adc

080009b8 <Task2_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_App */
void Task2_App(void const * argument)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_App */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2101      	movs	r1, #1
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <Task2_App+0x1c>)
 80009c6:	f001 f8b3 	bl	8001b30 <HAL_GPIO_WritePin>
	  osDelay(1500);
 80009ca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80009ce:	f003 fe58 	bl	8004682 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009d2:	e7f5      	b.n	80009c0 <Task2_App+0x8>
 80009d4:	40020400 	.word	0x40020400

080009d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d101      	bne.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ea:	f000 faa9 	bl	8000f40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40001000 	.word	0x40001000

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <Error_Handler+0x8>
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	210f      	movs	r1, #15
 8000a42:	f06f 0001 	mvn.w	r0, #1
 8000a46:	f000 fb77 	bl	8001138 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08e      	sub	sp, #56	; 0x38
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a4e      	ldr	r2, [pc, #312]	; (8000bb0 <HAL_ETH_MspInit+0x158>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	f040 8096 	bne.w	8000ba8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a7c:	4b4d      	ldr	r3, [pc, #308]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	4a4c      	ldr	r2, [pc, #304]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000a82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a86:	6313      	str	r3, [r2, #48]	; 0x30
 8000a88:	4b4a      	ldr	r3, [pc, #296]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a90:	623b      	str	r3, [r7, #32]
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	4b47      	ldr	r3, [pc, #284]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	4a46      	ldr	r2, [pc, #280]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000a9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa0:	4b44      	ldr	r3, [pc, #272]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	4b41      	ldr	r3, [pc, #260]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a40      	ldr	r2, [pc, #256]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000ab2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	4b3e      	ldr	r3, [pc, #248]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac4:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	4a3a      	ldr	r2, [pc, #232]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad0:	4b38      	ldr	r3, [pc, #224]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a34      	ldr	r2, [pc, #208]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af4:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	4a2e      	ldr	r2, [pc, #184]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	6313      	str	r3, [r2, #48]	; 0x30
 8000b00:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0c:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a28      	ldr	r2, [pc, #160]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <HAL_ETH_MspInit+0x15c>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b24:	2332      	movs	r3, #50	; 0x32
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b34:	230b      	movs	r3, #11
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481e      	ldr	r0, [pc, #120]	; (8000bb8 <HAL_ETH_MspInit+0x160>)
 8000b40:	f000 fe4a 	bl	80017d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b44:	2386      	movs	r3, #134	; 0x86
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b54:	230b      	movs	r3, #11
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4817      	ldr	r0, [pc, #92]	; (8000bbc <HAL_ETH_MspInit+0x164>)
 8000b60:	f000 fe3a 	bl	80017d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b76:	230b      	movs	r3, #11
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480f      	ldr	r0, [pc, #60]	; (8000bc0 <HAL_ETH_MspInit+0x168>)
 8000b82:	f000 fe29 	bl	80017d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b98:	230b      	movs	r3, #11
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <HAL_ETH_MspInit+0x16c>)
 8000ba4:	f000 fe18 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3738      	adds	r7, #56	; 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40028000 	.word	0x40028000
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020800 	.word	0x40020800
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40020400 	.word	0x40020400
 8000bc4:	40021800 	.word	0x40021800

08000bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0ae      	sub	sp, #184	; 0xb8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2290      	movs	r2, #144	; 0x90
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f006 f817 	bl	8006c1c <memset>
  if(huart->Instance==USART3)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <HAL_UART_MspInit+0xb4>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d13c      	bne.n	8000c72 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fe5a 	bl	80028c0 <HAL_RCCEx_PeriphCLKConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c12:	f7ff fef3 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xb8>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xb8>)
 8000c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xb8>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xb8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xb8>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xb8>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c60:	2307      	movs	r3, #7
 8000c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_UART_MspInit+0xbc>)
 8000c6e:	f000 fdb3 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	37b8      	adds	r7, #184	; 0xb8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40004800 	.word	0x40004800
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020c00 	.word	0x40020c00

08000c88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0ae      	sub	sp, #184	; 0xb8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2290      	movs	r2, #144	; 0x90
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f005 ffb7 	bl	8006c1c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cb6:	d159      	bne.n	8000d6c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000cbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 fdf9 	bl	80028c0 <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000cd4:	f7ff fe92 	bl	80009fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <HAL_PCD_MspInit+0xec>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4a25      	ldr	r2, [pc, #148]	; (8000d74 <HAL_PCD_MspInit+0xec>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce4:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <HAL_PCD_MspInit+0xec>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cf0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d0a:	230a      	movs	r3, #10
 8000d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d14:	4619      	mov	r1, r3
 8000d16:	4818      	ldr	r0, [pc, #96]	; (8000d78 <HAL_PCD_MspInit+0xf0>)
 8000d18:	f000 fd5e 	bl	80017d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4810      	ldr	r0, [pc, #64]	; (8000d78 <HAL_PCD_MspInit+0xf0>)
 8000d38:	f000 fd4e 	bl	80017d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <HAL_PCD_MspInit+0xec>)
 8000d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d40:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <HAL_PCD_MspInit+0xec>)
 8000d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d46:	6353      	str	r3, [r2, #52]	; 0x34
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_PCD_MspInit+0xec>)
 8000d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_PCD_MspInit+0xec>)
 8000d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_PCD_MspInit+0xec>)
 8000d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <HAL_PCD_MspInit+0xec>)
 8000d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	37b8      	adds	r7, #184	; 0xb8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000

08000d7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	; 0x38
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d8c:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <HAL_InitTick+0xe0>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a32      	ldr	r2, [pc, #200]	; (8000e5c <HAL_InitTick+0xe0>)
 8000d92:	f043 0310 	orr.w	r3, r3, #16
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b30      	ldr	r3, [pc, #192]	; (8000e5c <HAL_InitTick+0xe0>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000da4:	f107 0210 	add.w	r2, r7, #16
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fd54 	bl	800285c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000db4:	6a3b      	ldr	r3, [r7, #32]
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d103      	bne.n	8000dc6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dbe:	f001 fd25 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8000dc2:	6378      	str	r0, [r7, #52]	; 0x34
 8000dc4:	e004      	b.n	8000dd0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dc6:	f001 fd21 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd2:	4a23      	ldr	r2, [pc, #140]	; (8000e60 <HAL_InitTick+0xe4>)
 8000dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd8:	0c9b      	lsrs	r3, r3, #18
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HAL_InitTick+0xe8>)
 8000de0:	4a21      	ldr	r2, [pc, #132]	; (8000e68 <HAL_InitTick+0xec>)
 8000de2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <HAL_InitTick+0xe8>)
 8000de6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dec:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <HAL_InitTick+0xe8>)
 8000dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_InitTick+0xe8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_InitTick+0xe8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_InitTick+0xe8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e04:	4817      	ldr	r0, [pc, #92]	; (8000e64 <HAL_InitTick+0xe8>)
 8000e06:	f002 f983 	bl	8003110 <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d11b      	bne.n	8000e50 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e18:	4812      	ldr	r0, [pc, #72]	; (8000e64 <HAL_InitTick+0xe8>)
 8000e1a:	f002 f9db 	bl	80031d4 <HAL_TIM_Base_Start_IT>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d111      	bne.n	8000e50 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e2c:	2036      	movs	r0, #54	; 0x36
 8000e2e:	f000 f99f 	bl	8001170 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d808      	bhi.n	8000e4a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	2036      	movs	r0, #54	; 0x36
 8000e3e:	f000 f97b 	bl	8001138 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_InitTick+0xf0>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	e002      	b.n	8000e50 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3738      	adds	r7, #56	; 0x38
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	431bde83 	.word	0x431bde83
 8000e64:	20000ae8 	.word	0x20000ae8
 8000e68:	40001000 	.word	0x40001000
 8000e6c:	20000004 	.word	0x20000004

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <TIM6_DAC_IRQHandler+0x10>)
 8000ea2:	f002 fa0f 	bl	80032c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000ae8 	.word	0x20000ae8

08000eb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <SystemInit+0x20>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <SystemInit+0x20>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eda:	490e      	ldr	r1, [pc, #56]	; (8000f14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef0:	4c0b      	ldr	r4, [pc, #44]	; (8000f20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000efe:	f7ff ffd7 	bl	8000eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f02:	f005 fee9 	bl	8006cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff fb33 	bl	8000570 <main>
  bx  lr    
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f0c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f18:	08006e80 	.word	0x08006e80
  ldr r2, =_sbss
 8000f1c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8000f20:	200049c4 	.word	0x200049c4

08000f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC_IRQHandler>

08000f26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	f000 f8f9 	bl	8001122 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f30:	200f      	movs	r0, #15
 8000f32:	f7ff ff23 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f36:	f7ff fd67 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000b34 	.word	0x20000b34

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000b34 	.word	0x20000b34

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <__NVIC_SetPriorityGrouping+0x40>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	05fa0000 	.word	0x05fa0000

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <__NVIC_EnableIRQ+0x38>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff4c 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114a:	f7ff ff61 	bl	8001010 <__NVIC_GetPriorityGrouping>
 800114e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	68b9      	ldr	r1, [r7, #8]
 8001154:	6978      	ldr	r0, [r7, #20]
 8001156:	f7ff ffb1 	bl	80010bc <NVIC_EncodePriority>
 800115a:	4602      	mov	r2, r0
 800115c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff80 	bl	8001068 <__NVIC_SetPriority>
}
 8001168:	bf00      	nop
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff54 	bl	800102c <__NVIC_EnableIRQ>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e06a      	b.n	8001274 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d106      	bne.n	80011b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2223      	movs	r2, #35	; 0x23
 80011ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff fc51 	bl	8000a58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	4b31      	ldr	r3, [pc, #196]	; (800127c <HAL_ETH_Init+0xf0>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a30      	ldr	r2, [pc, #192]	; (800127c <HAL_ETH_Init+0xf0>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	4b2e      	ldr	r3, [pc, #184]	; (800127c <HAL_ETH_Init+0xf0>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <HAL_ETH_Init+0xf4>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4a2b      	ldr	r2, [pc, #172]	; (8001280 <HAL_ETH_Init+0xf4>)
 80011d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <HAL_ETH_Init+0xf4>)
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	4927      	ldr	r1, [pc, #156]	; (8001280 <HAL_ETH_Init+0xf4>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_ETH_Init+0xf4>)
 80011ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001202:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001204:	f7ff feb0 	bl	8000f68 <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800120a:	e011      	b.n	8001230 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800120c:	f7ff feac 	bl	8000f68 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800121a:	d909      	bls.n	8001230 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2204      	movs	r2, #4
 8001220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	22e0      	movs	r2, #224	; 0xe0
 8001228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e021      	b.n	8001274 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1e4      	bne.n	800120c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f958 	bl	80014f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f9ff 	bl	800164c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 fa55 	bl	80016fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	461a      	mov	r2, r3
 800125a:	2100      	movs	r1, #0
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 f9bd 	bl	80015dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2210      	movs	r2, #16
 800126e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	40013800 	.word	0x40013800

08001284 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	4b51      	ldr	r3, [pc, #324]	; (80013e0 <ETH_SetMACConfig+0x15c>)
 800129a:	4013      	ands	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	7c1b      	ldrb	r3, [r3, #16]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d102      	bne.n	80012ac <ETH_SetMACConfig+0x28>
 80012a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012aa:	e000      	b.n	80012ae <ETH_SetMACConfig+0x2a>
 80012ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	7c5b      	ldrb	r3, [r3, #17]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <ETH_SetMACConfig+0x38>
 80012b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ba:	e000      	b.n	80012be <ETH_SetMACConfig+0x3a>
 80012bc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	7fdb      	ldrb	r3, [r3, #31]
 80012ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80012cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	7f92      	ldrb	r2, [r2, #30]
 80012d8:	2a00      	cmp	r2, #0
 80012da:	d102      	bne.n	80012e2 <ETH_SetMACConfig+0x5e>
 80012dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e0:	e000      	b.n	80012e4 <ETH_SetMACConfig+0x60>
 80012e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80012e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	7f1b      	ldrb	r3, [r3, #28]
 80012ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	791b      	ldrb	r3, [r3, #4]
 80012f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80012fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001302:	2a00      	cmp	r2, #0
 8001304:	d102      	bne.n	800130c <ETH_SetMACConfig+0x88>
 8001306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130a:	e000      	b.n	800130e <ETH_SetMACConfig+0x8a>
 800130c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800130e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	7bdb      	ldrb	r3, [r3, #15]
 8001314:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001316:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800131c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001324:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001326:	4313      	orrs	r3, r2
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff fe1e 	bl	8000f80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	f64f 7341 	movw	r3, #65345	; 0xff41
 800135a:	4013      	ands	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001362:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800136a:	2a00      	cmp	r2, #0
 800136c:	d101      	bne.n	8001372 <ETH_SetMACConfig+0xee>
 800136e:	2280      	movs	r2, #128	; 0x80
 8001370:	e000      	b.n	8001374 <ETH_SetMACConfig+0xf0>
 8001372:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001374:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800137a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001382:	2a01      	cmp	r2, #1
 8001384:	d101      	bne.n	800138a <ETH_SetMACConfig+0x106>
 8001386:	2208      	movs	r2, #8
 8001388:	e000      	b.n	800138c <ETH_SetMACConfig+0x108>
 800138a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800138c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001394:	2a01      	cmp	r2, #1
 8001396:	d101      	bne.n	800139c <ETH_SetMACConfig+0x118>
 8001398:	2204      	movs	r2, #4
 800139a:	e000      	b.n	800139e <ETH_SetMACConfig+0x11a>
 800139c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800139e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80013a6:	2a01      	cmp	r2, #1
 80013a8:	d101      	bne.n	80013ae <ETH_SetMACConfig+0x12a>
 80013aa:	2202      	movs	r2, #2
 80013ac:	e000      	b.n	80013b0 <ETH_SetMACConfig+0x12c>
 80013ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013b0:	4313      	orrs	r3, r2
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff fdd9 	bl	8000f80 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	ff20810f 	.word	0xff20810f

080013e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <ETH_SetDMAConfig+0x110>)
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	7b1b      	ldrb	r3, [r3, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <ETH_SetDMAConfig+0x2c>
 800140a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800140e:	e000      	b.n	8001412 <ETH_SetDMAConfig+0x2e>
 8001410:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	7b5b      	ldrb	r3, [r3, #13]
 8001416:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001418:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	7f52      	ldrb	r2, [r2, #29]
 800141e:	2a00      	cmp	r2, #0
 8001420:	d102      	bne.n	8001428 <ETH_SetDMAConfig+0x44>
 8001422:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001426:	e000      	b.n	800142a <ETH_SetDMAConfig+0x46>
 8001428:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800142a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	7b9b      	ldrb	r3, [r3, #14]
 8001430:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001432:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001438:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	7f1b      	ldrb	r3, [r3, #28]
 800143e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001440:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	7f9b      	ldrb	r3, [r3, #30]
 8001446:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001448:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800144e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001456:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001458:	4313      	orrs	r3, r2
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001468:	461a      	mov	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff fd80 	bl	8000f80 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001488:	461a      	mov	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	791b      	ldrb	r3, [r3, #4]
 8001492:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001498:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800149e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80014ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff fd51 	bl	8000f80 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	f8de3f23 	.word	0xf8de3f23

080014f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b0a6      	sub	sp, #152	; 0x98
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001500:	2301      	movs	r3, #1
 8001502:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001506:	2301      	movs	r3, #1
 8001508:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800150c:	2300      	movs	r3, #0
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001516:	2301      	movs	r3, #1
 8001518:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001522:	2301      	movs	r3, #1
 8001524:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001534:	2300      	movs	r3, #0
 8001536:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800153e:	2300      	movs	r3, #0
 8001540:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800155a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800155e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001564:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800156c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001570:	4619      	mov	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fe86 	bl	8001284 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001578:	2301      	movs	r3, #1
 800157a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800157c:	2301      	movs	r3, #1
 800157e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001580:	2301      	movs	r3, #1
 8001582:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001586:	2301      	movs	r3, #1
 8001588:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800159e:	2301      	movs	r3, #1
 80015a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ff08 	bl	80013e4 <ETH_SetDMAConfig>
}
 80015d4:	bf00      	nop
 80015d6:	3798      	adds	r7, #152	; 0x98
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3305      	adds	r3, #5
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	3204      	adds	r2, #4
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <ETH_MACAddressConfig+0x68>)
 80015fe:	4413      	add	r3, r2
 8001600:	461a      	mov	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3303      	adds	r3, #3
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	061a      	lsls	r2, r3, #24
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3302      	adds	r3, #2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3301      	adds	r3, #1
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	4313      	orrs	r3, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	4313      	orrs	r3, r2
 8001628:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <ETH_MACAddressConfig+0x6c>)
 800162e:	4413      	add	r3, r2
 8001630:	461a      	mov	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	6013      	str	r3, [r2, #0]
}
 8001636:	bf00      	nop
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40028040 	.word	0x40028040
 8001648:	40028044 	.word	0x40028044

0800164c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	e03e      	b.n	80016d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68d9      	ldr	r1, [r3, #12]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	440b      	add	r3, r1
 800166a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	3206      	adds	r2, #6
 800168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d80c      	bhi.n	80016bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68d9      	ldr	r1, [r3, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	461a      	mov	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	e004      	b.n	80016c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	461a      	mov	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3301      	adds	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d9bd      	bls.n	800165a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f0:	611a      	str	r2, [r3, #16]
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80016fe:	b480      	push	{r7}
 8001700:	b085      	sub	sp, #20
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e046      	b.n	800179a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6919      	ldr	r1, [r3, #16]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2200      	movs	r2, #0
 8001728:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001748:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001750:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800175e:	68b9      	ldr	r1, [r7, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	3212      	adds	r2, #18
 8001766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d80c      	bhi.n	800178a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6919      	ldr	r1, [r3, #16]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	440b      	add	r3, r1
 8001782:	461a      	mov	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	e004      	b.n	8001794 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	461a      	mov	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3301      	adds	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d9b5      	bls.n	800170c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691a      	ldr	r2, [r3, #16]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ca:	60da      	str	r2, [r3, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	e175      	b.n	8001ae4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017f8:	2201      	movs	r2, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	429a      	cmp	r2, r3
 8001812:	f040 8164 	bne.w	8001ade <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b01      	cmp	r3, #1
 8001820:	d005      	beq.n	800182e <HAL_GPIO_Init+0x56>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d130      	bne.n	8001890 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001864:	2201      	movs	r2, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 0201 	and.w	r2, r3, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b03      	cmp	r3, #3
 800189a:	d017      	beq.n	80018cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d123      	bne.n	8001920 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	08da      	lsrs	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3208      	adds	r2, #8
 80018e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	08da      	lsrs	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3208      	adds	r2, #8
 800191a:	69b9      	ldr	r1, [r7, #24]
 800191c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0203 	and.w	r2, r3, #3
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80be 	beq.w	8001ade <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	4b66      	ldr	r3, [pc, #408]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a65      	ldr	r2, [pc, #404]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b63      	ldr	r3, [pc, #396]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800197a:	4a61      	ldr	r2, [pc, #388]	; (8001b00 <HAL_GPIO_Init+0x328>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a58      	ldr	r2, [pc, #352]	; (8001b04 <HAL_GPIO_Init+0x32c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d037      	beq.n	8001a16 <HAL_GPIO_Init+0x23e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a57      	ldr	r2, [pc, #348]	; (8001b08 <HAL_GPIO_Init+0x330>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d031      	beq.n	8001a12 <HAL_GPIO_Init+0x23a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a56      	ldr	r2, [pc, #344]	; (8001b0c <HAL_GPIO_Init+0x334>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d02b      	beq.n	8001a0e <HAL_GPIO_Init+0x236>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a55      	ldr	r2, [pc, #340]	; (8001b10 <HAL_GPIO_Init+0x338>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d025      	beq.n	8001a0a <HAL_GPIO_Init+0x232>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a54      	ldr	r2, [pc, #336]	; (8001b14 <HAL_GPIO_Init+0x33c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01f      	beq.n	8001a06 <HAL_GPIO_Init+0x22e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a53      	ldr	r2, [pc, #332]	; (8001b18 <HAL_GPIO_Init+0x340>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d019      	beq.n	8001a02 <HAL_GPIO_Init+0x22a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <HAL_GPIO_Init+0x344>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_GPIO_Init+0x226>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a51      	ldr	r2, [pc, #324]	; (8001b20 <HAL_GPIO_Init+0x348>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00d      	beq.n	80019fa <HAL_GPIO_Init+0x222>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a50      	ldr	r2, [pc, #320]	; (8001b24 <HAL_GPIO_Init+0x34c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d007      	beq.n	80019f6 <HAL_GPIO_Init+0x21e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4f      	ldr	r2, [pc, #316]	; (8001b28 <HAL_GPIO_Init+0x350>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_GPIO_Init+0x21a>
 80019ee:	2309      	movs	r3, #9
 80019f0:	e012      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 80019f2:	230a      	movs	r3, #10
 80019f4:	e010      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 80019f6:	2308      	movs	r3, #8
 80019f8:	e00e      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 80019fa:	2307      	movs	r3, #7
 80019fc:	e00c      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 80019fe:	2306      	movs	r3, #6
 8001a00:	e00a      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 8001a02:	2305      	movs	r3, #5
 8001a04:	e008      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 8001a06:	2304      	movs	r3, #4
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e004      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e002      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_GPIO_Init+0x240>
 8001a16:	2300      	movs	r3, #0
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	f002 0203 	and.w	r2, r2, #3
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	4093      	lsls	r3, r2
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a28:	4935      	ldr	r1, [pc, #212]	; (8001b00 <HAL_GPIO_Init+0x328>)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	3302      	adds	r3, #2
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a5a:	4a34      	ldr	r2, [pc, #208]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a60:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a84:	4a29      	ldr	r2, [pc, #164]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a8a:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aae:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <HAL_GPIO_Init+0x354>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	f67f ae86 	bls.w	80017f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40013800 	.word	0x40013800
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	40020c00 	.word	0x40020c00
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40021400 	.word	0x40021400
 8001b1c:	40021800 	.word	0x40021800
 8001b20:	40021c00 	.word	0x40021c00
 8001b24:	40022000 	.word	0x40022000
 8001b28:	40022400 	.word	0x40022400
 8001b2c:	40013c00 	.word	0x40013c00

08001b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b4c:	e003      	b.n	8001b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	041a      	lsls	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	619a      	str	r2, [r3, #24]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b64:	b08f      	sub	sp, #60	; 0x3c
 8001b66:	af0a      	add	r7, sp, #40	; 0x28
 8001b68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e116      	b.n	8001da2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff f87a 	bl	8000c88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2203      	movs	r2, #3
 8001b98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 fa4c 	bl	8004050 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	687e      	ldr	r6, [r7, #4]
 8001bc0:	466d      	mov	r5, sp
 8001bc2:	f106 0410 	add.w	r4, r6, #16
 8001bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bd6:	1d33      	adds	r3, r6, #4
 8001bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bda:	6838      	ldr	r0, [r7, #0]
 8001bdc:	f002 f9e0 	bl	8003fa0 <USB_CoreInit>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2202      	movs	r2, #2
 8001bea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0d7      	b.n	8001da2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 fa3a 	bl	8004072 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]
 8001c02:	e04a      	b.n	8001c9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c04:	7bfa      	ldrb	r2, [r7, #15]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	333d      	adds	r3, #61	; 0x3d
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	333c      	adds	r3, #60	; 0x3c
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	b298      	uxth	r0, r3
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3344      	adds	r3, #68	; 0x44
 8001c40:	4602      	mov	r2, r0
 8001c42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	3340      	adds	r3, #64	; 0x40
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	3348      	adds	r3, #72	; 0x48
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	334c      	adds	r3, #76	; 0x4c
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3354      	adds	r3, #84	; 0x54
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	3301      	adds	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d3af      	bcc.n	8001c04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e044      	b.n	8001d34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cc0:	7bfa      	ldrb	r2, [r7, #15]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cec:	7bfa      	ldrb	r2, [r7, #15]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	3301      	adds	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d3b5      	bcc.n	8001caa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	687e      	ldr	r6, [r7, #4]
 8001d46:	466d      	mov	r5, sp
 8001d48:	f106 0410 	add.w	r4, r6, #16
 8001d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d58:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d5c:	1d33      	adds	r3, r6, #4
 8001d5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d60:	6838      	ldr	r0, [r7, #0]
 8001d62:	f002 f9d3 	bl	800410c <USB_DevInit>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e014      	b.n	8001da2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d102      	bne.n	8001d96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f80b 	bl	8001dac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fb91 	bl	80044c2 <USB_DevDisconnect>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001dac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	10000003 	.word	0x10000003

08001df4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40007000 	.word	0x40007000

08001e14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_PWREx_EnableOverDrive+0x98>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a22      	ldr	r2, [pc, #136]	; (8001eac <HAL_PWREx_EnableOverDrive+0x98>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_PWREx_EnableOverDrive+0x98>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e42:	f7ff f891 	bl	8000f68 <HAL_GetTick>
 8001e46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e48:	e009      	b.n	8001e5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e4a:	f7ff f88d 	bl	8000f68 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e58:	d901      	bls.n	8001e5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e022      	b.n	8001ea4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6a:	d1ee      	bne.n	8001e4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e78:	f7ff f876 	bl	8000f68 <HAL_GetTick>
 8001e7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e7e:	e009      	b.n	8001e94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e80:	f7ff f872 	bl	8000f68 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e8e:	d901      	bls.n	8001e94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e007      	b.n	8001ea4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ea0:	d1ee      	bne.n	8001e80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000

08001eb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e29b      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8087 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed8:	4b96      	ldr	r3, [pc, #600]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d00c      	beq.n	8001efe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee4:	4b93      	ldr	r3, [pc, #588]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d112      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62>
 8001ef0:	4b90      	ldr	r3, [pc, #576]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efc:	d10b      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efe:	4b8d      	ldr	r3, [pc, #564]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d06c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x130>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d168      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e275      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x7a>
 8001f20:	4b84      	ldr	r3, [pc, #528]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a83      	ldr	r2, [pc, #524]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	e02e      	b.n	8001f8c <HAL_RCC_OscConfig+0xd8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x9c>
 8001f36:	4b7f      	ldr	r3, [pc, #508]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7e      	ldr	r2, [pc, #504]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b7c      	ldr	r3, [pc, #496]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a7b      	ldr	r2, [pc, #492]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e01d      	b.n	8001f8c <HAL_RCC_OscConfig+0xd8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0xc0>
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a75      	ldr	r2, [pc, #468]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b73      	ldr	r3, [pc, #460]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a72      	ldr	r2, [pc, #456]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0xd8>
 8001f74:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a6e      	ldr	r2, [pc, #440]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b6c      	ldr	r3, [pc, #432]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a6b      	ldr	r2, [pc, #428]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7fe ffe8 	bl	8000f68 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7fe ffe4 	bl	8000f68 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e229      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b61      	ldr	r3, [pc, #388]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0xe8>
 8001fba:	e014      	b.n	8001fe6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7fe ffd4 	bl	8000f68 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7fe ffd0 	bl	8000f68 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e215      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	4b57      	ldr	r3, [pc, #348]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x110>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d069      	beq.n	80020c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff2:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d11c      	bne.n	8002044 <HAL_RCC_OscConfig+0x190>
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x17a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1e9      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	493d      	ldr	r1, [pc, #244]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	e040      	b.n	80020c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d023      	beq.n	8002094 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a38      	ldr	r2, [pc, #224]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe ff86 	bl	8000f68 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002060:	f7fe ff82 	bl	8000f68 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e1c7      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002072:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4929      	ldr	r1, [pc, #164]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
 8002092:	e018      	b.n	80020c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a26      	ldr	r2, [pc, #152]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7fe ff62 	bl	8000f68 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a8:	f7fe ff5e 	bl	8000f68 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1a3      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d038      	beq.n	8002144 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d019      	beq.n	800210e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 80020dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020de:	4a15      	ldr	r2, [pc, #84]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7fe ff3f 	bl	8000f68 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ee:	f7fe ff3b 	bl	8000f68 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e180      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x23a>
 800210c:	e01a      	b.n	8002144 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002112:	4a08      	ldr	r2, [pc, #32]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211a:	f7fe ff25 	bl	8000f68 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002122:	f7fe ff21 	bl	8000f68 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d903      	bls.n	8002138 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e166      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
 8002134:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	4b92      	ldr	r3, [pc, #584]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 800213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ee      	bne.n	8002122 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80a4 	beq.w	800229a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002152:	4b8c      	ldr	r3, [pc, #560]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10d      	bne.n	800217a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4b89      	ldr	r3, [pc, #548]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a88      	ldr	r2, [pc, #544]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b86      	ldr	r3, [pc, #536]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217a:	4b83      	ldr	r3, [pc, #524]	; (8002388 <HAL_RCC_OscConfig+0x4d4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002186:	4b80      	ldr	r3, [pc, #512]	; (8002388 <HAL_RCC_OscConfig+0x4d4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a7f      	ldr	r2, [pc, #508]	; (8002388 <HAL_RCC_OscConfig+0x4d4>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002192:	f7fe fee9 	bl	8000f68 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7fe fee5 	bl	8000f68 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b64      	cmp	r3, #100	; 0x64
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e12a      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ac:	4b76      	ldr	r3, [pc, #472]	; (8002388 <HAL_RCC_OscConfig+0x4d4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x31a>
 80021c0:	4b70      	ldr	r3, [pc, #448]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	4a6f      	ldr	r2, [pc, #444]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
 80021cc:	e02d      	b.n	800222a <HAL_RCC_OscConfig+0x376>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x33c>
 80021d6:	4b6b      	ldr	r3, [pc, #428]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	4a6a      	ldr	r2, [pc, #424]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6713      	str	r3, [r2, #112]	; 0x70
 80021e2:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	4a67      	ldr	r2, [pc, #412]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	6713      	str	r3, [r2, #112]	; 0x70
 80021ee:	e01c      	b.n	800222a <HAL_RCC_OscConfig+0x376>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d10c      	bne.n	8002212 <HAL_RCC_OscConfig+0x35e>
 80021f8:	4b62      	ldr	r3, [pc, #392]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a61      	ldr	r2, [pc, #388]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	4a5e      	ldr	r2, [pc, #376]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6713      	str	r3, [r2, #112]	; 0x70
 8002210:	e00b      	b.n	800222a <HAL_RCC_OscConfig+0x376>
 8002212:	4b5c      	ldr	r3, [pc, #368]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	4a5b      	ldr	r2, [pc, #364]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6713      	str	r3, [r2, #112]	; 0x70
 800221e:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a58      	ldr	r2, [pc, #352]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d015      	beq.n	800225e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7fe fe99 	bl	8000f68 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fe95 	bl	8000f68 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0d8      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	4b4c      	ldr	r3, [pc, #304]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ee      	beq.n	800223a <HAL_RCC_OscConfig+0x386>
 800225c:	e014      	b.n	8002288 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7fe fe83 	bl	8000f68 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7fe fe7f 	bl	8000f68 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0c2      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	4b41      	ldr	r3, [pc, #260]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ee      	bne.n	8002266 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d105      	bne.n	800229a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a3c      	ldr	r2, [pc, #240]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80ae 	beq.w	8002400 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a4:	4b37      	ldr	r3, [pc, #220]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d06d      	beq.n	800238c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d14b      	bne.n	8002350 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80022be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe fe50 	bl	8000f68 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022cc:	f7fe fe4c 	bl	8000f68 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e091      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	019b      	lsls	r3, r3, #6
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	085b      	lsrs	r3, r3, #1
 8002302:	3b01      	subs	r3, #1
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	071b      	lsls	r3, r3, #28
 8002316:	491b      	ldr	r1, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a18      	ldr	r2, [pc, #96]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fe1e 	bl	8000f68 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fe1a 	bl	8000f68 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e05f      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x47c>
 800234e:	e057      	b.n	8002400 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800235a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7fe fe04 	bl	8000f68 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe fe00 	bl	8000f68 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e045      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x4b0>
 8002382:	e03d      	b.n	8002400 <HAL_RCC_OscConfig+0x54c>
 8002384:	40023800 	.word	0x40023800
 8002388:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800238c:	4b1f      	ldr	r3, [pc, #124]	; (800240c <HAL_RCC_OscConfig+0x558>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d030      	beq.n	80023fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d129      	bne.n	80023fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d122      	bne.n	80023fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d119      	bne.n	80023fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	3b01      	subs	r3, #1
 80023d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d10f      	bne.n	80023fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0d0      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002428:	4b6a      	ldr	r3, [pc, #424]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d910      	bls.n	8002458 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b67      	ldr	r3, [pc, #412]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 020f 	bic.w	r2, r3, #15
 800243e:	4965      	ldr	r1, [pc, #404]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b63      	ldr	r3, [pc, #396]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0b8      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002470:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a58      	ldr	r2, [pc, #352]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800247a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002488:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a52      	ldr	r2, [pc, #328]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 800248e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002492:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002494:	4b50      	ldr	r3, [pc, #320]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	494d      	ldr	r1, [pc, #308]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d040      	beq.n	8002534 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d115      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e07f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d2:	4b41      	ldr	r3, [pc, #260]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e073      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e2:	4b3d      	ldr	r3, [pc, #244]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e06b      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f2:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f023 0203 	bic.w	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4936      	ldr	r1, [pc, #216]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002500:	4313      	orrs	r3, r2
 8002502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002504:	f7fe fd30 	bl	8000f68 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250a:	e00a      	b.n	8002522 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250c:	f7fe fd2c 	bl	8000f68 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e053      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 020c 	and.w	r2, r3, #12
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	429a      	cmp	r2, r3
 8002532:	d1eb      	bne.n	800250c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002534:	4b27      	ldr	r3, [pc, #156]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d210      	bcs.n	8002564 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002542:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 020f 	bic.w	r2, r3, #15
 800254a:	4922      	ldr	r1, [pc, #136]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e032      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4916      	ldr	r1, [pc, #88]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	490e      	ldr	r1, [pc, #56]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025a2:	f000 f821 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80025a6:	4602      	mov	r2, r0
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	490a      	ldr	r1, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x1cc>)
 80025b4:	5ccb      	ldrb	r3, [r1, r3]
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_RCC_ClockConfig+0x1d0>)
 80025bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1d4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fbda 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023c00 	.word	0x40023c00
 80025d8:	40023800 	.word	0x40023800
 80025dc:	08006e58 	.word	0x08006e58
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000004 	.word	0x20000004

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ec:	b094      	sub	sp, #80	; 0x50
 80025ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	647b      	str	r3, [r7, #68]	; 0x44
 80025f4:	2300      	movs	r3, #0
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f8:	2300      	movs	r3, #0
 80025fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002600:	4b79      	ldr	r3, [pc, #484]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b08      	cmp	r3, #8
 800260a:	d00d      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x40>
 800260c:	2b08      	cmp	r3, #8
 800260e:	f200 80e1 	bhi.w	80027d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x34>
 8002616:	2b04      	cmp	r3, #4
 8002618:	d003      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x3a>
 800261a:	e0db      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800261c:	4b73      	ldr	r3, [pc, #460]	; (80027ec <HAL_RCC_GetSysClockFreq+0x204>)
 800261e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002620:	e0db      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002622:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002624:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002626:	e0d8      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002628:	4b6f      	ldr	r3, [pc, #444]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002630:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002632:	4b6d      	ldr	r3, [pc, #436]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d063      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263e:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	2200      	movs	r2, #0
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
 8002648:	63fa      	str	r2, [r7, #60]	; 0x3c
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
 8002656:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800265a:	4622      	mov	r2, r4
 800265c:	462b      	mov	r3, r5
 800265e:	f04f 0000 	mov.w	r0, #0
 8002662:	f04f 0100 	mov.w	r1, #0
 8002666:	0159      	lsls	r1, r3, #5
 8002668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800266c:	0150      	lsls	r0, r2, #5
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4621      	mov	r1, r4
 8002674:	1a51      	subs	r1, r2, r1
 8002676:	6139      	str	r1, [r7, #16]
 8002678:	4629      	mov	r1, r5
 800267a:	eb63 0301 	sbc.w	r3, r3, r1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800268c:	4659      	mov	r1, fp
 800268e:	018b      	lsls	r3, r1, #6
 8002690:	4651      	mov	r1, sl
 8002692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002696:	4651      	mov	r1, sl
 8002698:	018a      	lsls	r2, r1, #6
 800269a:	4651      	mov	r1, sl
 800269c:	ebb2 0801 	subs.w	r8, r2, r1
 80026a0:	4659      	mov	r1, fp
 80026a2:	eb63 0901 	sbc.w	r9, r3, r1
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ba:	4690      	mov	r8, r2
 80026bc:	4699      	mov	r9, r3
 80026be:	4623      	mov	r3, r4
 80026c0:	eb18 0303 	adds.w	r3, r8, r3
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	462b      	mov	r3, r5
 80026c8:	eb49 0303 	adc.w	r3, r9, r3
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026da:	4629      	mov	r1, r5
 80026dc:	024b      	lsls	r3, r1, #9
 80026de:	4621      	mov	r1, r4
 80026e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026e4:	4621      	mov	r1, r4
 80026e6:	024a      	lsls	r2, r1, #9
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ee:	2200      	movs	r2, #0
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026f8:	f7fd fda2 	bl	8000240 <__aeabi_uldivmod>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4613      	mov	r3, r2
 8002702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002704:	e058      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	099b      	lsrs	r3, r3, #6
 800270c:	2200      	movs	r2, #0
 800270e:	4618      	mov	r0, r3
 8002710:	4611      	mov	r1, r2
 8002712:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002716:	623b      	str	r3, [r7, #32]
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
 800271c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002720:	4642      	mov	r2, r8
 8002722:	464b      	mov	r3, r9
 8002724:	f04f 0000 	mov.w	r0, #0
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	0159      	lsls	r1, r3, #5
 800272e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002732:	0150      	lsls	r0, r2, #5
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4641      	mov	r1, r8
 800273a:	ebb2 0a01 	subs.w	sl, r2, r1
 800273e:	4649      	mov	r1, r9
 8002740:	eb63 0b01 	sbc.w	fp, r3, r1
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002750:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002754:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002758:	ebb2 040a 	subs.w	r4, r2, sl
 800275c:	eb63 050b 	sbc.w	r5, r3, fp
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	00eb      	lsls	r3, r5, #3
 800276a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800276e:	00e2      	lsls	r2, r4, #3
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	4643      	mov	r3, r8
 8002776:	18e3      	adds	r3, r4, r3
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	464b      	mov	r3, r9
 800277c:	eb45 0303 	adc.w	r3, r5, r3
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800278e:	4629      	mov	r1, r5
 8002790:	028b      	lsls	r3, r1, #10
 8002792:	4621      	mov	r1, r4
 8002794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002798:	4621      	mov	r1, r4
 800279a:	028a      	lsls	r2, r1, #10
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a2:	2200      	movs	r2, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	61fa      	str	r2, [r7, #28]
 80027a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027ac:	f7fd fd48 	bl	8000240 <__aeabi_uldivmod>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4613      	mov	r3, r2
 80027b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	3301      	adds	r3, #1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80027c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetSysClockFreq+0x204>)
 80027d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3750      	adds	r7, #80	; 0x50
 80027e0:	46bd      	mov	sp, r7
 80027e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	007a1200 	.word	0x007a1200

080027f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCC_GetHCLKFreq+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002810:	f7ff fff0 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	08006e68 	.word	0x08006e68

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002838:	f7ff ffdc 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0b5b      	lsrs	r3, r3, #13
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	08006e68 	.word	0x08006e68

0800285c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	220f      	movs	r2, #15
 800286a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0203 	and.w	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	08db      	lsrs	r3, r3, #3
 8002896:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <HAL_RCC_GetClockConfig+0x60>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 020f 	and.w	r2, r3, #15
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	601a      	str	r2, [r3, #0]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40023c00 	.word	0x40023c00

080028c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d012      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028e8:	4b69      	ldr	r3, [pc, #420]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a68      	ldr	r2, [pc, #416]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028f2:	6093      	str	r3, [r2, #8]
 80028f4:	4b66      	ldr	r3, [pc, #408]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fc:	4964      	ldr	r1, [pc, #400]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800290a:	2301      	movs	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d017      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800291a:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002920:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	4959      	ldr	r1, [pc, #356]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002938:	d101      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800293a:	2301      	movs	r3, #1
 800293c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002946:	2301      	movs	r3, #1
 8002948:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d017      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002956:	4b4e      	ldr	r3, [pc, #312]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800295c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	494a      	ldr	r1, [pc, #296]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002974:	d101      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002976:	2301      	movs	r3, #1
 8002978:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002982:	2301      	movs	r3, #1
 8002984:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002992:	2301      	movs	r3, #1
 8002994:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 808b 	beq.w	8002aba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029a4:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	4a39      	ldr	r2, [pc, #228]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ae:	6413      	str	r3, [r2, #64]	; 0x40
 80029b0:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029bc:	4b35      	ldr	r3, [pc, #212]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a34      	ldr	r2, [pc, #208]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c8:	f7fe face 	bl	8000f68 <HAL_GetTick>
 80029cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d0:	f7fe faca 	bl	8000f68 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e38f      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029e2:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029ee:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d035      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d02e      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a0c:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	4a1d      	ldr	r2, [pc, #116]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a2e:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a34:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d114      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe fa92 	bl	8000f68 <HAL_GetTick>
 8002a44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7fe fa8e 	bl	8000f68 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e351      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0ee      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a76:	d111      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a86:	400b      	ands	r3, r1
 8002a88:	4901      	ldr	r1, [pc, #4]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40007000 	.word	0x40007000
 8002a98:	0ffffcff 	.word	0x0ffffcff
 8002a9c:	4bac      	ldr	r3, [pc, #688]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4aab      	ldr	r2, [pc, #684]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002aa6:	6093      	str	r3, [r2, #8]
 8002aa8:	4ba9      	ldr	r3, [pc, #676]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	49a6      	ldr	r1, [pc, #664]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d010      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ac6:	4ba2      	ldr	r3, [pc, #648]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002acc:	4aa0      	ldr	r2, [pc, #640]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ad6:	4b9e      	ldr	r3, [pc, #632]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	499b      	ldr	r1, [pc, #620]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002af4:	4b96      	ldr	r3, [pc, #600]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b02:	4993      	ldr	r1, [pc, #588]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b16:	4b8e      	ldr	r3, [pc, #568]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b24:	498a      	ldr	r1, [pc, #552]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b38:	4b85      	ldr	r3, [pc, #532]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b46:	4982      	ldr	r1, [pc, #520]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b5a:	4b7d      	ldr	r3, [pc, #500]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4979      	ldr	r1, [pc, #484]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b7c:	4b74      	ldr	r3, [pc, #464]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f023 0203 	bic.w	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	4971      	ldr	r1, [pc, #452]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b9e:	4b6c      	ldr	r3, [pc, #432]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f023 020c 	bic.w	r2, r3, #12
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bac:	4968      	ldr	r1, [pc, #416]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bc0:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	4960      	ldr	r1, [pc, #384]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002be2:	4b5b      	ldr	r3, [pc, #364]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf0:	4957      	ldr	r1, [pc, #348]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c04:	4b52      	ldr	r3, [pc, #328]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	494f      	ldr	r1, [pc, #316]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c26:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	4946      	ldr	r1, [pc, #280]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c48:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	493e      	ldr	r1, [pc, #248]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c6a:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c78:	4935      	ldr	r1, [pc, #212]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c8c:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c9a:	492d      	ldr	r1, [pc, #180]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d011      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cae:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cbc:	4924      	ldr	r1, [pc, #144]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cee:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfc:	4914      	ldr	r1, [pc, #80]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d20:	490b      	ldr	r1, [pc, #44]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00f      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d44:	4902      	ldr	r1, [pc, #8]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d4c:	e002      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00b      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d60:	4b8a      	ldr	r3, [pc, #552]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	4986      	ldr	r1, [pc, #536]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00b      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d84:	4b81      	ldr	r3, [pc, #516]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d94:	497d      	ldr	r1, [pc, #500]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d006      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80d6 	beq.w	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002db0:	4b76      	ldr	r3, [pc, #472]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a75      	ldr	r2, [pc, #468]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dbc:	f7fe f8d4 	bl	8000f68 <HAL_GetTick>
 8002dc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dc4:	f7fe f8d0 	bl	8000f68 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e195      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dd6:	4b6d      	ldr	r3, [pc, #436]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d021      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d11d      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002df6:	4b65      	ldr	r3, [pc, #404]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e04:	4b61      	ldr	r3, [pc, #388]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0a:	0e1b      	lsrs	r3, r3, #24
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	019a      	lsls	r2, r3, #6
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	071b      	lsls	r3, r3, #28
 8002e2a:	4958      	ldr	r1, [pc, #352]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d004      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d02e      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5c:	d129      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e5e:	4b4b      	ldr	r3, [pc, #300]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e6c:	4b47      	ldr	r3, [pc, #284]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e72:	0f1b      	lsrs	r3, r3, #28
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	019a      	lsls	r2, r3, #6
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	041b      	lsls	r3, r3, #16
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	061b      	lsls	r3, r3, #24
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	071b      	lsls	r3, r3, #28
 8002e92:	493e      	ldr	r1, [pc, #248]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e9a:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ea0:	f023 021f 	bic.w	r2, r3, #31
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	4938      	ldr	r1, [pc, #224]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d01d      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ebe:	4b33      	ldr	r3, [pc, #204]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec4:	0e1b      	lsrs	r3, r3, #24
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ecc:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed2:	0f1b      	lsrs	r3, r3, #28
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	019a      	lsls	r2, r3, #6
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	041b      	lsls	r3, r3, #16
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	061b      	lsls	r3, r3, #24
 8002eec:	431a      	orrs	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	071b      	lsls	r3, r3, #28
 8002ef2:	4926      	ldr	r1, [pc, #152]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d011      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	019a      	lsls	r2, r3, #6
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	071b      	lsls	r3, r3, #28
 8002f22:	491a      	ldr	r1, [pc, #104]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f2a:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f36:	f7fe f817 	bl	8000f68 <HAL_GetTick>
 8002f3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f3e:	f7fe f813 	bl	8000f68 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b64      	cmp	r3, #100	; 0x64
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e0d8      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f50:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	f040 80ce 	bne.w	8003100 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f64:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f70:	f7fd fffa 	bl	8000f68 <HAL_GetTick>
 8002f74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f76:	e00b      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f78:	f7fd fff6 	bl	8000f68 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d904      	bls.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e0bb      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f90:	4b5e      	ldr	r3, [pc, #376]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9c:	d0ec      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d02e      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d12a      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fc6:	4b51      	ldr	r3, [pc, #324]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fd4:	4b4d      	ldr	r3, [pc, #308]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	0f1b      	lsrs	r3, r3, #28
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	019a      	lsls	r2, r3, #6
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	041b      	lsls	r3, r3, #16
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	061b      	lsls	r3, r3, #24
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	071b      	lsls	r3, r3, #28
 8002ffa:	4944      	ldr	r1, [pc, #272]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003002:	4b42      	ldr	r3, [pc, #264]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003008:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	493d      	ldr	r1, [pc, #244]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d022      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800302c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003030:	d11d      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003032:	4b36      	ldr	r3, [pc, #216]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	0e1b      	lsrs	r3, r3, #24
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003040:	4b32      	ldr	r3, [pc, #200]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	0f1b      	lsrs	r3, r3, #28
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	019a      	lsls	r2, r3, #6
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	431a      	orrs	r2, r3
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	061b      	lsls	r3, r3, #24
 8003060:	431a      	orrs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	071b      	lsls	r3, r3, #28
 8003066:	4929      	ldr	r1, [pc, #164]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d028      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800307a:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003080:	0e1b      	lsrs	r3, r3, #24
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003088:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308e:	0c1b      	lsrs	r3, r3, #16
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	019a      	lsls	r2, r3, #6
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	041b      	lsls	r3, r3, #16
 80030a0:	431a      	orrs	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	061b      	lsls	r3, r3, #24
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	071b      	lsls	r3, r3, #28
 80030ae:	4917      	ldr	r1, [pc, #92]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	4911      	ldr	r1, [pc, #68]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030cc:	4b0f      	ldr	r3, [pc, #60]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0e      	ldr	r2, [pc, #56]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d8:	f7fd ff46 	bl	8000f68 <HAL_GetTick>
 80030dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030e0:	f7fd ff42 	bl	8000f68 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	; 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e007      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030fe:	d1ef      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800

08003110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e049      	b.n	80031b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f841 	bl	80031be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f000 fa00 	bl	8003554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d001      	beq.n	80031ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e054      	b.n	8003296 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a26      	ldr	r2, [pc, #152]	; (80032a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d022      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003216:	d01d      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a22      	ldr	r2, [pc, #136]	; (80032a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d018      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a21      	ldr	r2, [pc, #132]	; (80032ac <HAL_TIM_Base_Start_IT+0xd8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d013      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1f      	ldr	r2, [pc, #124]	; (80032b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00e      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1e      	ldr	r2, [pc, #120]	; (80032b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d009      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <HAL_TIM_Base_Start_IT+0xe8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d115      	bne.n	8003280 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_TIM_Base_Start_IT+0xec>)
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b06      	cmp	r3, #6
 8003264:	d015      	beq.n	8003292 <HAL_TIM_Base_Start_IT+0xbe>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326c:	d011      	beq.n	8003292 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	e008      	b.n	8003292 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e000      	b.n	8003294 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003292:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	40010400 	.word	0x40010400
 80032b8:	40014000 	.word	0x40014000
 80032bc:	40001800 	.word	0x40001800
 80032c0:	00010007 	.word	0x00010007

080032c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d122      	bne.n	8003320 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d11b      	bne.n	8003320 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0202 	mvn.w	r2, #2
 80032f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f905 	bl	8003516 <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f8f7 	bl	8003502 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f908 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b04      	cmp	r3, #4
 800332c:	d122      	bne.n	8003374 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b04      	cmp	r3, #4
 800333a:	d11b      	bne.n	8003374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0204 	mvn.w	r2, #4
 8003344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f8db 	bl	8003516 <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8cd 	bl	8003502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f8de 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b08      	cmp	r3, #8
 8003380:	d122      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b08      	cmp	r3, #8
 800338e:	d11b      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0208 	mvn.w	r2, #8
 8003398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2204      	movs	r2, #4
 800339e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f8b1 	bl	8003516 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f8a3 	bl	8003502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f8b4 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d122      	bne.n	800341c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d11b      	bne.n	800341c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0210 	mvn.w	r2, #16
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2208      	movs	r2, #8
 80033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f887 	bl	8003516 <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f879 	bl	8003502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f88a 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d10e      	bne.n	8003448 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d107      	bne.n	8003448 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0201 	mvn.w	r2, #1
 8003440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd fac8 	bl	80009d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	2b80      	cmp	r3, #128	; 0x80
 8003454:	d10e      	bne.n	8003474 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	2b80      	cmp	r3, #128	; 0x80
 8003462:	d107      	bne.n	8003474 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800346c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f91a 	bl	80036a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003482:	d10e      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d107      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800349a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f90d 	bl	80036bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ac:	2b40      	cmp	r3, #64	; 0x40
 80034ae:	d10e      	bne.n	80034ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d107      	bne.n	80034ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f838 	bl	800353e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d10e      	bne.n	80034fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d107      	bne.n	80034fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f06f 0220 	mvn.w	r2, #32
 80034f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f8cd 	bl	8003694 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a40      	ldr	r2, [pc, #256]	; (8003668 <TIM_Base_SetConfig+0x114>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d013      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003572:	d00f      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a3d      	ldr	r2, [pc, #244]	; (800366c <TIM_Base_SetConfig+0x118>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00b      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a3c      	ldr	r2, [pc, #240]	; (8003670 <TIM_Base_SetConfig+0x11c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d007      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a3b      	ldr	r2, [pc, #236]	; (8003674 <TIM_Base_SetConfig+0x120>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3a      	ldr	r2, [pc, #232]	; (8003678 <TIM_Base_SetConfig+0x124>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d108      	bne.n	80035a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2f      	ldr	r2, [pc, #188]	; (8003668 <TIM_Base_SetConfig+0x114>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d02b      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b4:	d027      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a2c      	ldr	r2, [pc, #176]	; (800366c <TIM_Base_SetConfig+0x118>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d023      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a2b      	ldr	r2, [pc, #172]	; (8003670 <TIM_Base_SetConfig+0x11c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01f      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2a      	ldr	r2, [pc, #168]	; (8003674 <TIM_Base_SetConfig+0x120>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01b      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a29      	ldr	r2, [pc, #164]	; (8003678 <TIM_Base_SetConfig+0x124>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d017      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a28      	ldr	r2, [pc, #160]	; (800367c <TIM_Base_SetConfig+0x128>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d013      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a27      	ldr	r2, [pc, #156]	; (8003680 <TIM_Base_SetConfig+0x12c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00f      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a26      	ldr	r2, [pc, #152]	; (8003684 <TIM_Base_SetConfig+0x130>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00b      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a25      	ldr	r2, [pc, #148]	; (8003688 <TIM_Base_SetConfig+0x134>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a24      	ldr	r2, [pc, #144]	; (800368c <TIM_Base_SetConfig+0x138>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a23      	ldr	r2, [pc, #140]	; (8003690 <TIM_Base_SetConfig+0x13c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d108      	bne.n	8003618 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <TIM_Base_SetConfig+0x114>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_Base_SetConfig+0xf8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <TIM_Base_SetConfig+0x124>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d103      	bne.n	8003654 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	615a      	str	r2, [r3, #20]
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40010000 	.word	0x40010000
 800366c:	40000400 	.word	0x40000400
 8003670:	40000800 	.word	0x40000800
 8003674:	40000c00 	.word	0x40000c00
 8003678:	40010400 	.word	0x40010400
 800367c:	40014000 	.word	0x40014000
 8003680:	40014400 	.word	0x40014400
 8003684:	40014800 	.word	0x40014800
 8003688:	40001800 	.word	0x40001800
 800368c:	40001c00 	.word	0x40001c00
 8003690:	40002000 	.word	0x40002000

08003694 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e040      	b.n	8003764 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fd fa68 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	; 0x24
 80036fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f82c 	bl	800376c <UART_SetConfig>
 8003714:	4603      	mov	r3, r0
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e022      	b.n	8003764 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa84 	bl	8003c34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800373a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800374a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fb0b 	bl	8003d78 <UART_CheckIdleState>
 8003762:	4603      	mov	r3, r0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4ba6      	ldr	r3, [pc, #664]	; (8003a30 <UART_SetConfig+0x2c4>)
 8003798:	4013      	ands	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a94      	ldr	r2, [pc, #592]	; (8003a34 <UART_SetConfig+0x2c8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d120      	bne.n	800382a <UART_SetConfig+0xbe>
 80037e8:	4b93      	ldr	r3, [pc, #588]	; (8003a38 <UART_SetConfig+0x2cc>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d816      	bhi.n	8003824 <UART_SetConfig+0xb8>
 80037f6:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <UART_SetConfig+0x90>)
 80037f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fc:	0800380d 	.word	0x0800380d
 8003800:	08003819 	.word	0x08003819
 8003804:	08003813 	.word	0x08003813
 8003808:	0800381f 	.word	0x0800381f
 800380c:	2301      	movs	r3, #1
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e150      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003812:	2302      	movs	r3, #2
 8003814:	77fb      	strb	r3, [r7, #31]
 8003816:	e14d      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003818:	2304      	movs	r3, #4
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	e14a      	b.n	8003ab4 <UART_SetConfig+0x348>
 800381e:	2308      	movs	r3, #8
 8003820:	77fb      	strb	r3, [r7, #31]
 8003822:	e147      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003824:	2310      	movs	r3, #16
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e144      	b.n	8003ab4 <UART_SetConfig+0x348>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a83      	ldr	r2, [pc, #524]	; (8003a3c <UART_SetConfig+0x2d0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d132      	bne.n	800389a <UART_SetConfig+0x12e>
 8003834:	4b80      	ldr	r3, [pc, #512]	; (8003a38 <UART_SetConfig+0x2cc>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d828      	bhi.n	8003894 <UART_SetConfig+0x128>
 8003842:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <UART_SetConfig+0xdc>)
 8003844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003848:	0800387d 	.word	0x0800387d
 800384c:	08003895 	.word	0x08003895
 8003850:	08003895 	.word	0x08003895
 8003854:	08003895 	.word	0x08003895
 8003858:	08003889 	.word	0x08003889
 800385c:	08003895 	.word	0x08003895
 8003860:	08003895 	.word	0x08003895
 8003864:	08003895 	.word	0x08003895
 8003868:	08003883 	.word	0x08003883
 800386c:	08003895 	.word	0x08003895
 8003870:	08003895 	.word	0x08003895
 8003874:	08003895 	.word	0x08003895
 8003878:	0800388f 	.word	0x0800388f
 800387c:	2300      	movs	r3, #0
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e118      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003882:	2302      	movs	r3, #2
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e115      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003888:	2304      	movs	r3, #4
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e112      	b.n	8003ab4 <UART_SetConfig+0x348>
 800388e:	2308      	movs	r3, #8
 8003890:	77fb      	strb	r3, [r7, #31]
 8003892:	e10f      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003894:	2310      	movs	r3, #16
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e10c      	b.n	8003ab4 <UART_SetConfig+0x348>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a68      	ldr	r2, [pc, #416]	; (8003a40 <UART_SetConfig+0x2d4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d120      	bne.n	80038e6 <UART_SetConfig+0x17a>
 80038a4:	4b64      	ldr	r3, [pc, #400]	; (8003a38 <UART_SetConfig+0x2cc>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038ae:	2b30      	cmp	r3, #48	; 0x30
 80038b0:	d013      	beq.n	80038da <UART_SetConfig+0x16e>
 80038b2:	2b30      	cmp	r3, #48	; 0x30
 80038b4:	d814      	bhi.n	80038e0 <UART_SetConfig+0x174>
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d009      	beq.n	80038ce <UART_SetConfig+0x162>
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d810      	bhi.n	80038e0 <UART_SetConfig+0x174>
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <UART_SetConfig+0x15c>
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d006      	beq.n	80038d4 <UART_SetConfig+0x168>
 80038c6:	e00b      	b.n	80038e0 <UART_SetConfig+0x174>
 80038c8:	2300      	movs	r3, #0
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e0f2      	b.n	8003ab4 <UART_SetConfig+0x348>
 80038ce:	2302      	movs	r3, #2
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e0ef      	b.n	8003ab4 <UART_SetConfig+0x348>
 80038d4:	2304      	movs	r3, #4
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e0ec      	b.n	8003ab4 <UART_SetConfig+0x348>
 80038da:	2308      	movs	r3, #8
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e0e9      	b.n	8003ab4 <UART_SetConfig+0x348>
 80038e0:	2310      	movs	r3, #16
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e0e6      	b.n	8003ab4 <UART_SetConfig+0x348>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a56      	ldr	r2, [pc, #344]	; (8003a44 <UART_SetConfig+0x2d8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d120      	bne.n	8003932 <UART_SetConfig+0x1c6>
 80038f0:	4b51      	ldr	r3, [pc, #324]	; (8003a38 <UART_SetConfig+0x2cc>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038fa:	2bc0      	cmp	r3, #192	; 0xc0
 80038fc:	d013      	beq.n	8003926 <UART_SetConfig+0x1ba>
 80038fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003900:	d814      	bhi.n	800392c <UART_SetConfig+0x1c0>
 8003902:	2b80      	cmp	r3, #128	; 0x80
 8003904:	d009      	beq.n	800391a <UART_SetConfig+0x1ae>
 8003906:	2b80      	cmp	r3, #128	; 0x80
 8003908:	d810      	bhi.n	800392c <UART_SetConfig+0x1c0>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <UART_SetConfig+0x1a8>
 800390e:	2b40      	cmp	r3, #64	; 0x40
 8003910:	d006      	beq.n	8003920 <UART_SetConfig+0x1b4>
 8003912:	e00b      	b.n	800392c <UART_SetConfig+0x1c0>
 8003914:	2300      	movs	r3, #0
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e0cc      	b.n	8003ab4 <UART_SetConfig+0x348>
 800391a:	2302      	movs	r3, #2
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e0c9      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003920:	2304      	movs	r3, #4
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e0c6      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003926:	2308      	movs	r3, #8
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e0c3      	b.n	8003ab4 <UART_SetConfig+0x348>
 800392c:	2310      	movs	r3, #16
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e0c0      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a44      	ldr	r2, [pc, #272]	; (8003a48 <UART_SetConfig+0x2dc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d125      	bne.n	8003988 <UART_SetConfig+0x21c>
 800393c:	4b3e      	ldr	r3, [pc, #248]	; (8003a38 <UART_SetConfig+0x2cc>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800394a:	d017      	beq.n	800397c <UART_SetConfig+0x210>
 800394c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003950:	d817      	bhi.n	8003982 <UART_SetConfig+0x216>
 8003952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003956:	d00b      	beq.n	8003970 <UART_SetConfig+0x204>
 8003958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800395c:	d811      	bhi.n	8003982 <UART_SetConfig+0x216>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <UART_SetConfig+0x1fe>
 8003962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003966:	d006      	beq.n	8003976 <UART_SetConfig+0x20a>
 8003968:	e00b      	b.n	8003982 <UART_SetConfig+0x216>
 800396a:	2300      	movs	r3, #0
 800396c:	77fb      	strb	r3, [r7, #31]
 800396e:	e0a1      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003970:	2302      	movs	r3, #2
 8003972:	77fb      	strb	r3, [r7, #31]
 8003974:	e09e      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003976:	2304      	movs	r3, #4
 8003978:	77fb      	strb	r3, [r7, #31]
 800397a:	e09b      	b.n	8003ab4 <UART_SetConfig+0x348>
 800397c:	2308      	movs	r3, #8
 800397e:	77fb      	strb	r3, [r7, #31]
 8003980:	e098      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003982:	2310      	movs	r3, #16
 8003984:	77fb      	strb	r3, [r7, #31]
 8003986:	e095      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <UART_SetConfig+0x2e0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d125      	bne.n	80039de <UART_SetConfig+0x272>
 8003992:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <UART_SetConfig+0x2cc>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800399c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039a0:	d017      	beq.n	80039d2 <UART_SetConfig+0x266>
 80039a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039a6:	d817      	bhi.n	80039d8 <UART_SetConfig+0x26c>
 80039a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ac:	d00b      	beq.n	80039c6 <UART_SetConfig+0x25a>
 80039ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b2:	d811      	bhi.n	80039d8 <UART_SetConfig+0x26c>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <UART_SetConfig+0x254>
 80039b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039bc:	d006      	beq.n	80039cc <UART_SetConfig+0x260>
 80039be:	e00b      	b.n	80039d8 <UART_SetConfig+0x26c>
 80039c0:	2301      	movs	r3, #1
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e076      	b.n	8003ab4 <UART_SetConfig+0x348>
 80039c6:	2302      	movs	r3, #2
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e073      	b.n	8003ab4 <UART_SetConfig+0x348>
 80039cc:	2304      	movs	r3, #4
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e070      	b.n	8003ab4 <UART_SetConfig+0x348>
 80039d2:	2308      	movs	r3, #8
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e06d      	b.n	8003ab4 <UART_SetConfig+0x348>
 80039d8:	2310      	movs	r3, #16
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e06a      	b.n	8003ab4 <UART_SetConfig+0x348>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <UART_SetConfig+0x2e4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d138      	bne.n	8003a5a <UART_SetConfig+0x2ee>
 80039e8:	4b13      	ldr	r3, [pc, #76]	; (8003a38 <UART_SetConfig+0x2cc>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80039f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039f6:	d017      	beq.n	8003a28 <UART_SetConfig+0x2bc>
 80039f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039fc:	d82a      	bhi.n	8003a54 <UART_SetConfig+0x2e8>
 80039fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a02:	d00b      	beq.n	8003a1c <UART_SetConfig+0x2b0>
 8003a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a08:	d824      	bhi.n	8003a54 <UART_SetConfig+0x2e8>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <UART_SetConfig+0x2aa>
 8003a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a12:	d006      	beq.n	8003a22 <UART_SetConfig+0x2b6>
 8003a14:	e01e      	b.n	8003a54 <UART_SetConfig+0x2e8>
 8003a16:	2300      	movs	r3, #0
 8003a18:	77fb      	strb	r3, [r7, #31]
 8003a1a:	e04b      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	77fb      	strb	r3, [r7, #31]
 8003a20:	e048      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003a22:	2304      	movs	r3, #4
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e045      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003a28:	2308      	movs	r3, #8
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e042      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003a2e:	bf00      	nop
 8003a30:	efff69f3 	.word	0xefff69f3
 8003a34:	40011000 	.word	0x40011000
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40004400 	.word	0x40004400
 8003a40:	40004800 	.word	0x40004800
 8003a44:	40004c00 	.word	0x40004c00
 8003a48:	40005000 	.word	0x40005000
 8003a4c:	40011400 	.word	0x40011400
 8003a50:	40007800 	.word	0x40007800
 8003a54:	2310      	movs	r3, #16
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	e02c      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a72      	ldr	r2, [pc, #456]	; (8003c28 <UART_SetConfig+0x4bc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d125      	bne.n	8003ab0 <UART_SetConfig+0x344>
 8003a64:	4b71      	ldr	r3, [pc, #452]	; (8003c2c <UART_SetConfig+0x4c0>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a72:	d017      	beq.n	8003aa4 <UART_SetConfig+0x338>
 8003a74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a78:	d817      	bhi.n	8003aaa <UART_SetConfig+0x33e>
 8003a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7e:	d00b      	beq.n	8003a98 <UART_SetConfig+0x32c>
 8003a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a84:	d811      	bhi.n	8003aaa <UART_SetConfig+0x33e>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <UART_SetConfig+0x326>
 8003a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a8e:	d006      	beq.n	8003a9e <UART_SetConfig+0x332>
 8003a90:	e00b      	b.n	8003aaa <UART_SetConfig+0x33e>
 8003a92:	2300      	movs	r3, #0
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e00d      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e00a      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	77fb      	strb	r3, [r7, #31]
 8003aa2:	e007      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003aa4:	2308      	movs	r3, #8
 8003aa6:	77fb      	strb	r3, [r7, #31]
 8003aa8:	e004      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003aaa:	2310      	movs	r3, #16
 8003aac:	77fb      	strb	r3, [r7, #31]
 8003aae:	e001      	b.n	8003ab4 <UART_SetConfig+0x348>
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003abc:	d15b      	bne.n	8003b76 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003abe:	7ffb      	ldrb	r3, [r7, #31]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d828      	bhi.n	8003b16 <UART_SetConfig+0x3aa>
 8003ac4:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <UART_SetConfig+0x360>)
 8003ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aca:	bf00      	nop
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003af9 	.word	0x08003af9
 8003ad4:	08003b01 	.word	0x08003b01
 8003ad8:	08003b17 	.word	0x08003b17
 8003adc:	08003b07 	.word	0x08003b07
 8003ae0:	08003b17 	.word	0x08003b17
 8003ae4:	08003b17 	.word	0x08003b17
 8003ae8:	08003b17 	.word	0x08003b17
 8003aec:	08003b0f 	.word	0x08003b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af0:	f7fe fe8c 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003af4:	61b8      	str	r0, [r7, #24]
        break;
 8003af6:	e013      	b.n	8003b20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003af8:	f7fe fe9c 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8003afc:	61b8      	str	r0, [r7, #24]
        break;
 8003afe:	e00f      	b.n	8003b20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b00:	4b4b      	ldr	r3, [pc, #300]	; (8003c30 <UART_SetConfig+0x4c4>)
 8003b02:	61bb      	str	r3, [r7, #24]
        break;
 8003b04:	e00c      	b.n	8003b20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b06:	f7fe fd6f 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8003b0a:	61b8      	str	r0, [r7, #24]
        break;
 8003b0c:	e008      	b.n	8003b20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b12:	61bb      	str	r3, [r7, #24]
        break;
 8003b14:	e004      	b.n	8003b20 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d074      	beq.n	8003c10 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	005a      	lsls	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	441a      	add	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b0f      	cmp	r3, #15
 8003b40:	d916      	bls.n	8003b70 <UART_SetConfig+0x404>
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d212      	bcs.n	8003b70 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	f023 030f 	bic.w	r3, r3, #15
 8003b52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	89fb      	ldrh	r3, [r7, #14]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	89fa      	ldrh	r2, [r7, #14]
 8003b6c:	60da      	str	r2, [r3, #12]
 8003b6e:	e04f      	b.n	8003c10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	77bb      	strb	r3, [r7, #30]
 8003b74:	e04c      	b.n	8003c10 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b76:	7ffb      	ldrb	r3, [r7, #31]
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d828      	bhi.n	8003bce <UART_SetConfig+0x462>
 8003b7c:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <UART_SetConfig+0x418>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003bb1 	.word	0x08003bb1
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003bcf 	.word	0x08003bcf
 8003b94:	08003bbf 	.word	0x08003bbf
 8003b98:	08003bcf 	.word	0x08003bcf
 8003b9c:	08003bcf 	.word	0x08003bcf
 8003ba0:	08003bcf 	.word	0x08003bcf
 8003ba4:	08003bc7 	.word	0x08003bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba8:	f7fe fe30 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003bac:	61b8      	str	r0, [r7, #24]
        break;
 8003bae:	e013      	b.n	8003bd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb0:	f7fe fe40 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8003bb4:	61b8      	str	r0, [r7, #24]
        break;
 8003bb6:	e00f      	b.n	8003bd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb8:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <UART_SetConfig+0x4c4>)
 8003bba:	61bb      	str	r3, [r7, #24]
        break;
 8003bbc:	e00c      	b.n	8003bd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbe:	f7fe fd13 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8003bc2:	61b8      	str	r0, [r7, #24]
        break;
 8003bc4:	e008      	b.n	8003bd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bca:	61bb      	str	r3, [r7, #24]
        break;
 8003bcc:	e004      	b.n	8003bd8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	77bb      	strb	r3, [r7, #30]
        break;
 8003bd6:	bf00      	nop
    }

    if (pclk != 0U)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d018      	beq.n	8003c10 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	085a      	lsrs	r2, r3, #1
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	441a      	add	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b0f      	cmp	r3, #15
 8003bf6:	d909      	bls.n	8003c0c <UART_SetConfig+0x4a0>
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfe:	d205      	bcs.n	8003c0c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	e001      	b.n	8003c10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40007c00 	.word	0x40007c00
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	00f42400 	.word	0x00f42400

08003c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01a      	beq.n	8003d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d32:	d10a      	bne.n	8003d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	605a      	str	r2, [r3, #4]
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d88:	f7fd f8ee 	bl	8000f68 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d10e      	bne.n	8003dba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f831 	bl	8003e12 <UART_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e027      	b.n	8003e0a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d10e      	bne.n	8003de6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f81b 	bl	8003e12 <UART_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e011      	b.n	8003e0a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b09c      	sub	sp, #112	; 0x70
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e22:	e0a7      	b.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	f000 80a3 	beq.w	8003f74 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2e:	f7fd f89b 	bl	8000f68 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d302      	bcc.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d13f      	bne.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e58:	667b      	str	r3, [r7, #100]	; 0x64
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e6      	bne.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3308      	adds	r3, #8
 8003e94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e96:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e5      	bne.n	8003e76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e068      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d050      	beq.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee0:	d148      	bne.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e6      	bne.n	8003eec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3308      	adds	r3, #8
 8003f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f3e:	623a      	str	r2, [r7, #32]
 8003f40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	69f9      	ldr	r1, [r7, #28]
 8003f44:	6a3a      	ldr	r2, [r7, #32]
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e5      	bne.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e010      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	f43f af48 	beq.w	8003e24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3770      	adds	r7, #112	; 0x70
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	f107 001c 	add.w	r0, r7, #28
 8003fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d120      	bne.n	8003ffa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	4b20      	ldr	r3, [pc, #128]	; (800404c <USB_CoreInit+0xac>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa96 	bl	8004520 <USB_CoreReset>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e010      	b.n	800401c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fa8a 	bl	8004520 <USB_CoreReset>
 800400c:	4603      	mov	r3, r0
 800400e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	2b01      	cmp	r3, #1
 8004020:	d10b      	bne.n	800403a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f043 0206 	orr.w	r2, r3, #6
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f043 0220 	orr.w	r2, r3, #32
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004046:	b004      	add	sp, #16
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	ffbdffbf 	.word	0xffbdffbf

08004050 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f023 0201 	bic.w	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d115      	bne.n	80040c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040a0:	2001      	movs	r0, #1
 80040a2:	f7fc ff6d 	bl	8000f80 <HAL_Delay>
      ms++;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3301      	adds	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fa29 	bl	8004504 <USB_GetMode>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d01e      	beq.n	80040f6 <USB_SetCurrentMode+0x84>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b31      	cmp	r3, #49	; 0x31
 80040bc:	d9f0      	bls.n	80040a0 <USB_SetCurrentMode+0x2e>
 80040be:	e01a      	b.n	80040f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d115      	bne.n	80040f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040d2:	2001      	movs	r0, #1
 80040d4:	f7fc ff54 	bl	8000f80 <HAL_Delay>
      ms++;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3301      	adds	r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fa10 	bl	8004504 <USB_GetMode>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <USB_SetCurrentMode+0x84>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b31      	cmp	r3, #49	; 0x31
 80040ee:	d9f0      	bls.n	80040d2 <USB_SetCurrentMode+0x60>
 80040f0:	e001      	b.n	80040f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e005      	b.n	8004102 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b32      	cmp	r3, #50	; 0x32
 80040fa:	d101      	bne.n	8004100 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800410c:	b084      	sub	sp, #16
 800410e:	b580      	push	{r7, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800411a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004126:	2300      	movs	r3, #0
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	e009      	b.n	8004140 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	3340      	adds	r3, #64	; 0x40
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	2200      	movs	r2, #0
 8004138:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3301      	adds	r3, #1
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b0e      	cmp	r3, #14
 8004144:	d9f2      	bls.n	800412c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d11c      	bne.n	8004186 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800415a:	f043 0302 	orr.w	r3, r3, #2
 800415e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e005      	b.n	8004192 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004198:	461a      	mov	r2, r3
 800419a:	2300      	movs	r3, #0
 800419c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a4:	4619      	mov	r1, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ac:	461a      	mov	r2, r3
 80041ae:	680b      	ldr	r3, [r1, #0]
 80041b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10c      	bne.n	80041d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d104      	bne.n	80041c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041be:	2100      	movs	r1, #0
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f965 	bl	8004490 <USB_SetDevSpeed>
 80041c6:	e008      	b.n	80041da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041c8:	2101      	movs	r1, #1
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f960 	bl	8004490 <USB_SetDevSpeed>
 80041d0:	e003      	b.n	80041da <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041d2:	2103      	movs	r1, #3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f95b 	bl	8004490 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041da:	2110      	movs	r1, #16
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8f3 	bl	80043c8 <USB_FlushTxFifo>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f91f 	bl	8004430 <USB_FlushRxFifo>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004202:	461a      	mov	r2, r3
 8004204:	2300      	movs	r3, #0
 8004206:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420e:	461a      	mov	r2, r3
 8004210:	2300      	movs	r3, #0
 8004212:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421a:	461a      	mov	r2, r3
 800421c:	2300      	movs	r3, #0
 800421e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	e043      	b.n	80042ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800423c:	d118      	bne.n	8004270 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	461a      	mov	r2, r3
 8004252:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	e013      	b.n	8004282 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004266:	461a      	mov	r2, r3
 8004268:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e008      	b.n	8004282 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	461a      	mov	r2, r3
 800427e:	2300      	movs	r3, #0
 8004280:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428e:	461a      	mov	r2, r3
 8004290:	2300      	movs	r3, #0
 8004292:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	461a      	mov	r2, r3
 80042a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	3301      	adds	r3, #1
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d3b7      	bcc.n	8004226 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	e043      	b.n	8004344 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042d2:	d118      	bne.n	8004306 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e6:	461a      	mov	r2, r3
 80042e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e013      	b.n	8004318 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	461a      	mov	r2, r3
 80042fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	e008      	b.n	8004318 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004324:	461a      	mov	r2, r3
 8004326:	2300      	movs	r3, #0
 8004328:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	461a      	mov	r2, r3
 8004338:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800433c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	3301      	adds	r3, #1
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	429a      	cmp	r2, r3
 800434a:	d3b7      	bcc.n	80042bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800435a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800435e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800436c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f043 0210 	orr.w	r2, r3, #16
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <USB_DevInit+0x2b4>)
 8004386:	4313      	orrs	r3, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800438c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f043 0208 	orr.w	r2, r3, #8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800439e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d105      	bne.n	80043b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699a      	ldr	r2, [r3, #24]
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <USB_DevInit+0x2b8>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043bc:	b004      	add	sp, #16
 80043be:	4770      	bx	lr
 80043c0:	803c3800 	.word	0x803c3800
 80043c4:	40000004 	.word	0x40000004

080043c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3301      	adds	r3, #1
 80043da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a13      	ldr	r2, [pc, #76]	; (800442c <USB_FlushTxFifo+0x64>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e01b      	b.n	8004420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	daf2      	bge.n	80043d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	019b      	lsls	r3, r3, #6
 80043f8:	f043 0220 	orr.w	r2, r3, #32
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3301      	adds	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4a08      	ldr	r2, [pc, #32]	; (800442c <USB_FlushTxFifo+0x64>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e006      	b.n	8004420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b20      	cmp	r3, #32
 800441c:	d0f0      	beq.n	8004400 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	00030d40 	.word	0x00030d40

08004430 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3301      	adds	r3, #1
 8004440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4a11      	ldr	r2, [pc, #68]	; (800448c <USB_FlushRxFifo+0x5c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e018      	b.n	8004480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	daf2      	bge.n	800443c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2210      	movs	r2, #16
 800445e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3301      	adds	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a08      	ldr	r2, [pc, #32]	; (800448c <USB_FlushRxFifo+0x5c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e006      	b.n	8004480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b10      	cmp	r3, #16
 800447c:	d0f0      	beq.n	8004460 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	00030d40 	.word	0x00030d40

08004490 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	68f9      	ldr	r1, [r7, #12]
 80044ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044dc:	f023 0303 	bic.w	r3, r3, #3
 80044e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f0:	f043 0302 	orr.w	r3, r3, #2
 80044f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f003 0301 	and.w	r3, r3, #1
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
 8004530:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4a13      	ldr	r2, [pc, #76]	; (8004584 <USB_CoreReset+0x64>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e01b      	b.n	8004576 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	daf2      	bge.n	800452c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f043 0201 	orr.w	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3301      	adds	r3, #1
 800455a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a09      	ldr	r2, [pc, #36]	; (8004584 <USB_CoreReset+0x64>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d901      	bls.n	8004568 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e006      	b.n	8004576 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	d0f0      	beq.n	8004556 <USB_CoreReset+0x36>

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	00030d40 	.word	0x00030d40

08004588 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800459a:	2b84      	cmp	r3, #132	; 0x84
 800459c:	d005      	beq.n	80045aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800459e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4413      	add	r3, r2
 80045a6:	3303      	adds	r3, #3
 80045a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045aa:	68fb      	ldr	r3, [r7, #12]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045be:	f3ef 8305 	mrs	r3, IPSR
 80045c2:	607b      	str	r3, [r7, #4]
  return(result);
 80045c4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80045e0:	f001 f896 	bl	8005710 <vTaskStartScheduler>
  
  return osOK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	bd80      	pop	{r7, pc}

080045ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80045ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ec:	b089      	sub	sp, #36	; 0x24
 80045ee:	af04      	add	r7, sp, #16
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <osThreadCreate+0x54>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01c      	beq.n	800463e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685c      	ldr	r4, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691e      	ldr	r6, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff ffb6 	bl	8004588 <makeFreeRtosPriority>
 800461c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004626:	9202      	str	r2, [sp, #8]
 8004628:	9301      	str	r3, [sp, #4]
 800462a:	9100      	str	r1, [sp, #0]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	4632      	mov	r2, r6
 8004630:	4629      	mov	r1, r5
 8004632:	4620      	mov	r0, r4
 8004634:	f000 fe84 	bl	8005340 <xTaskCreateStatic>
 8004638:	4603      	mov	r3, r0
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e01c      	b.n	8004678 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685c      	ldr	r4, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800464a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff ff98 	bl	8004588 <makeFreeRtosPriority>
 8004658:	4602      	mov	r2, r0
 800465a:	f107 030c 	add.w	r3, r7, #12
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	9200      	str	r2, [sp, #0]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	4632      	mov	r2, r6
 8004666:	4629      	mov	r1, r5
 8004668:	4620      	mov	r0, r4
 800466a:	f000 fecc 	bl	8005406 <xTaskCreate>
 800466e:	4603      	mov	r3, r0
 8004670:	2b01      	cmp	r3, #1
 8004672:	d001      	beq.n	8004678 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004678:	68fb      	ldr	r3, [r7, #12]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004682 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <osDelay+0x16>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	e000      	b.n	800469a <osDelay+0x18>
 8004698:	2301      	movs	r3, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f001 f802 	bl	80056a4 <vTaskDelay>
  
  return osOK;
 80046a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af02      	add	r7, sp, #8
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00f      	beq.n	80046dc <osSemaphoreCreate+0x32>
    if (count == 1) {
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d10a      	bne.n	80046d8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2203      	movs	r2, #3
 80046c8:	9200      	str	r2, [sp, #0]
 80046ca:	2200      	movs	r2, #0
 80046cc:	2100      	movs	r1, #0
 80046ce:	2001      	movs	r0, #1
 80046d0:	f000 f98a 	bl	80049e8 <xQueueGenericCreateStatic>
 80046d4:	4603      	mov	r3, r0
 80046d6:	e016      	b.n	8004706 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	e014      	b.n	8004706 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d110      	bne.n	8004704 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80046e2:	2203      	movs	r2, #3
 80046e4:	2100      	movs	r1, #0
 80046e6:	2001      	movs	r0, #1
 80046e8:	f000 fa00 	bl	8004aec <xQueueGenericCreate>
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <osSemaphoreCreate+0x56>
 80046f4:	2300      	movs	r3, #0
 80046f6:	2200      	movs	r2, #0
 80046f8:	2100      	movs	r1, #0
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fa58 	bl	8004bb0 <xQueueGenericSend>
      return sema;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	e000      	b.n	8004706 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004704:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	e03a      	b.n	800479e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d103      	bne.n	800473c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004734:	f04f 33ff 	mov.w	r3, #4294967295
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	e009      	b.n	8004750 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d006      	beq.n	8004750 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <osSemaphoreWait+0x40>
      ticks = 1;
 800474c:	2301      	movs	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004750:	f7ff ff32 	bl	80045b8 <inHandlerMode>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d017      	beq.n	800478a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800475a:	f107 0308 	add.w	r3, r7, #8
 800475e:	461a      	mov	r2, r3
 8004760:	2100      	movs	r1, #0
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fc3e 	bl	8004fe4 <xQueueReceiveFromISR>
 8004768:	4603      	mov	r3, r0
 800476a:	2b01      	cmp	r3, #1
 800476c:	d001      	beq.n	8004772 <osSemaphoreWait+0x62>
      return osErrorOS;
 800476e:	23ff      	movs	r3, #255	; 0xff
 8004770:	e015      	b.n	800479e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d011      	beq.n	800479c <osSemaphoreWait+0x8c>
 8004778:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <osSemaphoreWait+0x98>)
 800477a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	e008      	b.n	800479c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fb15 	bl	8004dbc <xQueueSemaphoreTake>
 8004792:	4603      	mov	r3, r0
 8004794:	2b01      	cmp	r3, #1
 8004796:	d001      	beq.n	800479c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004798:	23ff      	movs	r3, #255	; 0xff
 800479a:	e000      	b.n	800479e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	e000ed04 	.word	0xe000ed04

080047ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f103 0208 	add.w	r2, r3, #8
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f04f 32ff 	mov.w	r2, #4294967295
 80047c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f103 0208 	add.w	r2, r3, #8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f103 0208 	add.w	r2, r3, #8
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004806:	b480      	push	{r7}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	601a      	str	r2, [r3, #0]
}
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800484e:	b480      	push	{r7}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d103      	bne.n	800486e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	e00c      	b.n	8004888 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3308      	adds	r3, #8
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e002      	b.n	800487c <vListInsert+0x2e>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	429a      	cmp	r2, r3
 8004886:	d2f6      	bcs.n	8004876 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	601a      	str	r2, [r3, #0]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6892      	ldr	r2, [r2, #8]
 80048d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6852      	ldr	r2, [r2, #4]
 80048e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d103      	bne.n	80048f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	1e5a      	subs	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10c      	bne.n	8004942 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	b672      	cpsid	i
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	b662      	cpsie	i
 800493c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800493e:	bf00      	nop
 8004940:	e7fe      	b.n	8004940 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004942:	f001 fe5b 	bl	80065fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004952:	fb01 f303 	mul.w	r3, r1, r3
 8004956:	441a      	add	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	3b01      	subs	r3, #1
 8004974:	68f9      	ldr	r1, [r7, #12]
 8004976:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	441a      	add	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	22ff      	movs	r2, #255	; 0xff
 8004986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	22ff      	movs	r2, #255	; 0xff
 800498e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d114      	bne.n	80049c2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01a      	beq.n	80049d6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3310      	adds	r3, #16
 80049a4:	4618      	mov	r0, r3
 80049a6:	f001 f911 	bl	8005bcc <xTaskRemoveFromEventList>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d012      	beq.n	80049d6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <xQueueGenericReset+0xd0>)
 80049b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	e009      	b.n	80049d6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3310      	adds	r3, #16
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fef0 	bl	80047ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3324      	adds	r3, #36	; 0x24
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff feeb 	bl	80047ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049d6:	f001 fe45 	bl	8006664 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049da:	2301      	movs	r3, #1
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	e000ed04 	.word	0xe000ed04

080049e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08e      	sub	sp, #56	; 0x38
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10c      	bne.n	8004a16 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	b672      	cpsid	i
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	b662      	cpsie	i
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10c      	bne.n	8004a36 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	b672      	cpsid	i
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	b662      	cpsie	i
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a32:	bf00      	nop
 8004a34:	e7fe      	b.n	8004a34 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <xQueueGenericCreateStatic+0x5a>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <xQueueGenericCreateStatic+0x5e>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <xQueueGenericCreateStatic+0x60>
 8004a46:	2300      	movs	r3, #0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10c      	bne.n	8004a66 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	b672      	cpsid	i
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	b662      	cpsie	i
 8004a60:	623b      	str	r3, [r7, #32]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d102      	bne.n	8004a72 <xQueueGenericCreateStatic+0x8a>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <xQueueGenericCreateStatic+0x8e>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <xQueueGenericCreateStatic+0x90>
 8004a76:	2300      	movs	r3, #0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10c      	bne.n	8004a96 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	b672      	cpsid	i
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	b662      	cpsie	i
 8004a90:	61fb      	str	r3, [r7, #28]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a96:	2348      	movs	r3, #72	; 0x48
 8004a98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b48      	cmp	r3, #72	; 0x48
 8004a9e:	d00c      	beq.n	8004aba <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	b672      	cpsid	i
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	b662      	cpsie	i
 8004ab4:	61bb      	str	r3, [r7, #24]
}
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004aba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ace:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f847 	bl	8004b70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3730      	adds	r7, #48	; 0x30
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10c      	bne.n	8004b1a <xQueueGenericCreate+0x2e>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	b672      	cpsid	i
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	b662      	cpsie	i
 8004b14:	613b      	str	r3, [r7, #16]
}
 8004b16:	bf00      	nop
 8004b18:	e7fe      	b.n	8004b18 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	e004      	b.n	8004b30 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	3348      	adds	r3, #72	; 0x48
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 fe8d 	bl	8006854 <pvPortMalloc>
 8004b3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d011      	beq.n	8004b66 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	3348      	adds	r3, #72	; 0x48
 8004b4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b54:	79fa      	ldrb	r2, [r7, #7]
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f805 	bl	8004b70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b66:	69bb      	ldr	r3, [r7, #24]
	}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d103      	bne.n	8004b8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e002      	b.n	8004b92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	69b8      	ldr	r0, [r7, #24]
 8004ba2:	f7ff feb7 	bl	8004914 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ba6:	bf00      	nop
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08e      	sub	sp, #56	; 0x38
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10c      	bne.n	8004be6 <xQueueGenericSend+0x36>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	b672      	cpsid	i
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	b662      	cpsie	i
 8004be0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004be2:	bf00      	nop
 8004be4:	e7fe      	b.n	8004be4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d103      	bne.n	8004bf4 <xQueueGenericSend+0x44>
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <xQueueGenericSend+0x48>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <xQueueGenericSend+0x4a>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10c      	bne.n	8004c18 <xQueueGenericSend+0x68>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	b672      	cpsid	i
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	b662      	cpsie	i
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c14:	bf00      	nop
 8004c16:	e7fe      	b.n	8004c16 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d103      	bne.n	8004c26 <xQueueGenericSend+0x76>
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <xQueueGenericSend+0x7a>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <xQueueGenericSend+0x7c>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10c      	bne.n	8004c4a <xQueueGenericSend+0x9a>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	b672      	cpsid	i
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	b662      	cpsie	i
 8004c44:	623b      	str	r3, [r7, #32]
}
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c4a:	f001 f987 	bl	8005f5c <xTaskGetSchedulerState>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <xQueueGenericSend+0xaa>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <xQueueGenericSend+0xae>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <xQueueGenericSend+0xb0>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10c      	bne.n	8004c7e <xQueueGenericSend+0xce>
	__asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	b672      	cpsid	i
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	b662      	cpsie	i
 8004c78:	61fb      	str	r3, [r7, #28]
}
 8004c7a:	bf00      	nop
 8004c7c:	e7fe      	b.n	8004c7c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c7e:	f001 fcbd 	bl	80065fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d302      	bcc.n	8004c94 <xQueueGenericSend+0xe4>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d129      	bne.n	8004ce8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c9a:	f000 fa41 	bl	8005120 <prvCopyDataToQueue>
 8004c9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d010      	beq.n	8004cca <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	3324      	adds	r3, #36	; 0x24
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 ff8d 	bl	8005bcc <xTaskRemoveFromEventList>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d013      	beq.n	8004ce0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004cb8:	4b3f      	ldr	r3, [pc, #252]	; (8004db8 <xQueueGenericSend+0x208>)
 8004cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	e00a      	b.n	8004ce0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004cd0:	4b39      	ldr	r3, [pc, #228]	; (8004db8 <xQueueGenericSend+0x208>)
 8004cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ce0:	f001 fcc0 	bl	8006664 <vPortExitCritical>
				return pdPASS;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e063      	b.n	8004db0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d103      	bne.n	8004cf6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cee:	f001 fcb9 	bl	8006664 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e05c      	b.n	8004db0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cfc:	f107 0314 	add.w	r3, r7, #20
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 ffc7 	bl	8005c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d06:	2301      	movs	r3, #1
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d0a:	f001 fcab 	bl	8006664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d0e:	f000 fd6d 	bl	80057ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d12:	f001 fc73 	bl	80065fc <vPortEnterCritical>
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d1c:	b25b      	sxtb	r3, r3
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d22:	d103      	bne.n	8004d2c <xQueueGenericSend+0x17c>
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d32:	b25b      	sxtb	r3, r3
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d103      	bne.n	8004d42 <xQueueGenericSend+0x192>
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d42:	f001 fc8f 	bl	8006664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d46:	1d3a      	adds	r2, r7, #4
 8004d48:	f107 0314 	add.w	r3, r7, #20
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 ffb6 	bl	8005cc0 <xTaskCheckForTimeOut>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d124      	bne.n	8004da4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d5c:	f000 fad8 	bl	8005310 <prvIsQueueFull>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d018      	beq.n	8004d98 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	3310      	adds	r3, #16
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 ff06 	bl	8005b80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d76:	f000 fa63 	bl	8005240 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d7a:	f000 fd45 	bl	8005808 <xTaskResumeAll>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f47f af7c 	bne.w	8004c7e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004d86:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <xQueueGenericSend+0x208>)
 8004d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	e772      	b.n	8004c7e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d9a:	f000 fa51 	bl	8005240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d9e:	f000 fd33 	bl	8005808 <xTaskResumeAll>
 8004da2:	e76c      	b.n	8004c7e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004da6:	f000 fa4b 	bl	8005240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004daa:	f000 fd2d 	bl	8005808 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004dae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3738      	adds	r7, #56	; 0x38
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08e      	sub	sp, #56	; 0x38
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10c      	bne.n	8004df2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	b672      	cpsid	i
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	b662      	cpsie	i
 8004dec:	623b      	str	r3, [r7, #32]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00c      	beq.n	8004e14 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	b672      	cpsid	i
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	b662      	cpsie	i
 8004e0e:	61fb      	str	r3, [r7, #28]
}
 8004e10:	bf00      	nop
 8004e12:	e7fe      	b.n	8004e12 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e14:	f001 f8a2 	bl	8005f5c <xTaskGetSchedulerState>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d102      	bne.n	8004e24 <xQueueSemaphoreTake+0x68>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <xQueueSemaphoreTake+0x6c>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <xQueueSemaphoreTake+0x6e>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10c      	bne.n	8004e48 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	b672      	cpsid	i
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	b662      	cpsie	i
 8004e42:	61bb      	str	r3, [r7, #24]
}
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e48:	f001 fbd8 	bl	80065fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d024      	beq.n	8004ea2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	1e5a      	subs	r2, r3, #1
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d104      	bne.n	8004e72 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004e68:	f001 fa3e 	bl	80062e8 <pvTaskIncrementMutexHeldCount>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00f      	beq.n	8004e9a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7c:	3310      	adds	r3, #16
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fea4 	bl	8005bcc <xTaskRemoveFromEventList>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e8a:	4b55      	ldr	r3, [pc, #340]	; (8004fe0 <xQueueSemaphoreTake+0x224>)
 8004e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e9a:	f001 fbe3 	bl	8006664 <vPortExitCritical>
				return pdPASS;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e099      	b.n	8004fd6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d113      	bne.n	8004ed0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00c      	beq.n	8004ec8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	b672      	cpsid	i
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	b662      	cpsie	i
 8004ec2:	617b      	str	r3, [r7, #20]
}
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004ec8:	f001 fbcc 	bl	8006664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e082      	b.n	8004fd6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d106      	bne.n	8004ee4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ed6:	f107 030c 	add.w	r3, r7, #12
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 feda 	bl	8005c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ee4:	f001 fbbe 	bl	8006664 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ee8:	f000 fc80 	bl	80057ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004eec:	f001 fb86 	bl	80065fc <vPortEnterCritical>
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ef6:	b25b      	sxtb	r3, r3
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d103      	bne.n	8004f06 <xQueueSemaphoreTake+0x14a>
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f0c:	b25b      	sxtb	r3, r3
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d103      	bne.n	8004f1c <xQueueSemaphoreTake+0x160>
 8004f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f1c:	f001 fba2 	bl	8006664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f20:	463a      	mov	r2, r7
 8004f22:	f107 030c 	add.w	r3, r7, #12
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fec9 	bl	8005cc0 <xTaskCheckForTimeOut>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d132      	bne.n	8004f9a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f36:	f000 f9d5 	bl	80052e4 <prvIsQueueEmpty>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d026      	beq.n	8004f8e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8004f48:	f001 fb58 	bl	80065fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f001 f821 	bl	8005f98 <xTaskPriorityInherit>
 8004f56:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004f58:	f001 fb84 	bl	8006664 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	3324      	adds	r3, #36	; 0x24
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	4611      	mov	r1, r2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fe0b 	bl	8005b80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f6c:	f000 f968 	bl	8005240 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f70:	f000 fc4a 	bl	8005808 <xTaskResumeAll>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f47f af66 	bne.w	8004e48 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8004f7c:	4b18      	ldr	r3, [pc, #96]	; (8004fe0 <xQueueSemaphoreTake+0x224>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	e75c      	b.n	8004e48 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004f8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f90:	f000 f956 	bl	8005240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f94:	f000 fc38 	bl	8005808 <xTaskResumeAll>
 8004f98:	e756      	b.n	8004e48 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f9c:	f000 f950 	bl	8005240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fa0:	f000 fc32 	bl	8005808 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fa6:	f000 f99d 	bl	80052e4 <prvIsQueueEmpty>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f43f af4b 	beq.w	8004e48 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00d      	beq.n	8004fd4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8004fb8:	f001 fb20 	bl	80065fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004fbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fbe:	f000 f897 	bl	80050f0 <prvGetDisinheritPriorityAfterTimeout>
 8004fc2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f001 f8ee 	bl	80061ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004fd0:	f001 fb48 	bl	8006664 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3738      	adds	r7, #56	; 0x38
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	e000ed04 	.word	0xe000ed04

08004fe4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08e      	sub	sp, #56	; 0x38
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10c      	bne.n	8005014 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	b672      	cpsid	i
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	b662      	cpsie	i
 800500e:	623b      	str	r3, [r7, #32]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d103      	bne.n	8005022 <xQueueReceiveFromISR+0x3e>
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <xQueueReceiveFromISR+0x42>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <xQueueReceiveFromISR+0x44>
 8005026:	2300      	movs	r3, #0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10c      	bne.n	8005046 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	b672      	cpsid	i
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	b662      	cpsie	i
 8005040:	61fb      	str	r3, [r7, #28]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005046:	f001 fbc1 	bl	80067cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800504a:	f3ef 8211 	mrs	r2, BASEPRI
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	b672      	cpsid	i
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	b662      	cpsie	i
 8005062:	61ba      	str	r2, [r7, #24]
 8005064:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005066:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	2b00      	cmp	r3, #0
 8005074:	d02f      	beq.n	80050d6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800507c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005084:	f000 f8b6 	bl	80051f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	1e5a      	subs	r2, r3, #1
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005090:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005098:	d112      	bne.n	80050c0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d016      	beq.n	80050d0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	3310      	adds	r3, #16
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fd90 	bl	8005bcc <xTaskRemoveFromEventList>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00e      	beq.n	80050d0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00b      	beq.n	80050d0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e007      	b.n	80050d0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80050c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050c4:	3301      	adds	r3, #1
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	b25a      	sxtb	r2, r3
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80050d0:	2301      	movs	r3, #1
 80050d2:	637b      	str	r3, [r7, #52]	; 0x34
 80050d4:	e001      	b.n	80050da <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	637b      	str	r3, [r7, #52]	; 0x34
 80050da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3738      	adds	r7, #56	; 0x38
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d006      	beq.n	800510e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1c3 0307 	rsb	r3, r3, #7
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e001      	b.n	8005112 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005112:	68fb      	ldr	r3, [r7, #12]
	}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10d      	bne.n	800515a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d14d      	bne.n	80051e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	4618      	mov	r0, r3
 800514c:	f000 ffa4 	bl	8006098 <xTaskPriorityDisinherit>
 8005150:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	e043      	b.n	80051e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d119      	bne.n	8005194 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6858      	ldr	r0, [r3, #4]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	461a      	mov	r2, r3
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	f001 fdda 	bl	8006d24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	441a      	add	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	429a      	cmp	r2, r3
 8005188:	d32b      	bcc.n	80051e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	605a      	str	r2, [r3, #4]
 8005192:	e026      	b.n	80051e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	68d8      	ldr	r0, [r3, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	461a      	mov	r2, r3
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	f001 fdc0 	bl	8006d24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	425b      	negs	r3, r3
 80051ae:	441a      	add	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d207      	bcs.n	80051d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	425b      	negs	r3, r3
 80051ca:	441a      	add	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d105      	bne.n	80051e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	3b01      	subs	r3, #1
 80051e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051ea:	697b      	ldr	r3, [r7, #20]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	d018      	beq.n	8005238 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	441a      	add	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	429a      	cmp	r2, r3
 800521e:	d303      	bcc.n	8005228 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68d9      	ldr	r1, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	461a      	mov	r2, r3
 8005232:	6838      	ldr	r0, [r7, #0]
 8005234:	f001 fd76 	bl	8006d24 <memcpy>
	}
}
 8005238:	bf00      	nop
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005248:	f001 f9d8 	bl	80065fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005252:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005254:	e011      	b.n	800527a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d012      	beq.n	8005284 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3324      	adds	r3, #36	; 0x24
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fcb2 	bl	8005bcc <xTaskRemoveFromEventList>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800526e:	f000 fd8d 	bl	8005d8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	3b01      	subs	r3, #1
 8005276:	b2db      	uxtb	r3, r3
 8005278:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800527a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800527e:	2b00      	cmp	r3, #0
 8005280:	dce9      	bgt.n	8005256 <prvUnlockQueue+0x16>
 8005282:	e000      	b.n	8005286 <prvUnlockQueue+0x46>
					break;
 8005284:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	22ff      	movs	r2, #255	; 0xff
 800528a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800528e:	f001 f9e9 	bl	8006664 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005292:	f001 f9b3 	bl	80065fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800529c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800529e:	e011      	b.n	80052c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d012      	beq.n	80052ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3310      	adds	r3, #16
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fc8d 	bl	8005bcc <xTaskRemoveFromEventList>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052b8:	f000 fd68 	bl	8005d8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052bc:	7bbb      	ldrb	r3, [r7, #14]
 80052be:	3b01      	subs	r3, #1
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	dce9      	bgt.n	80052a0 <prvUnlockQueue+0x60>
 80052cc:	e000      	b.n	80052d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	22ff      	movs	r2, #255	; 0xff
 80052d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80052d8:	f001 f9c4 	bl	8006664 <vPortExitCritical>
}
 80052dc:	bf00      	nop
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052ec:	f001 f986 	bl	80065fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d102      	bne.n	80052fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	e001      	b.n	8005302 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005302:	f001 f9af 	bl	8006664 <vPortExitCritical>

	return xReturn;
 8005306:	68fb      	ldr	r3, [r7, #12]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005318:	f001 f970 	bl	80065fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005324:	429a      	cmp	r2, r3
 8005326:	d102      	bne.n	800532e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005328:	2301      	movs	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	e001      	b.n	8005332 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005332:	f001 f997 	bl	8006664 <vPortExitCritical>

	return xReturn;
 8005336:	68fb      	ldr	r3, [r7, #12]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08e      	sub	sp, #56	; 0x38
 8005344:	af04      	add	r7, sp, #16
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800534e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10c      	bne.n	800536e <xTaskCreateStatic+0x2e>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	b672      	cpsid	i
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	b662      	cpsie	i
 8005368:	623b      	str	r3, [r7, #32]
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10c      	bne.n	800538e <xTaskCreateStatic+0x4e>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	b672      	cpsid	i
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	b662      	cpsie	i
 8005388:	61fb      	str	r3, [r7, #28]
}
 800538a:	bf00      	nop
 800538c:	e7fe      	b.n	800538c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800538e:	23a0      	movs	r3, #160	; 0xa0
 8005390:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2ba0      	cmp	r3, #160	; 0xa0
 8005396:	d00c      	beq.n	80053b2 <xTaskCreateStatic+0x72>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	b672      	cpsid	i
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	b662      	cpsie	i
 80053ac:	61bb      	str	r3, [r7, #24]
}
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01e      	beq.n	80053f8 <xTaskCreateStatic+0xb8>
 80053ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01b      	beq.n	80053f8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053d2:	2300      	movs	r3, #0
 80053d4:	9303      	str	r3, [sp, #12]
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	9302      	str	r3, [sp, #8]
 80053da:	f107 0314 	add.w	r3, r7, #20
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f850 	bl	8005490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053f2:	f000 f8ed 	bl	80055d0 <prvAddNewTaskToReadyList>
 80053f6:	e001      	b.n	80053fc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053fc:	697b      	ldr	r3, [r7, #20]
	}
 80053fe:	4618      	mov	r0, r3
 8005400:	3728      	adds	r7, #40	; 0x28
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005406:	b580      	push	{r7, lr}
 8005408:	b08c      	sub	sp, #48	; 0x30
 800540a:	af04      	add	r7, sp, #16
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4618      	mov	r0, r3
 800541c:	f001 fa1a 	bl	8006854 <pvPortMalloc>
 8005420:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00e      	beq.n	8005446 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005428:	20a0      	movs	r0, #160	; 0xa0
 800542a:	f001 fa13 	bl	8006854 <pvPortMalloc>
 800542e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
 800543c:	e005      	b.n	800544a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800543e:	6978      	ldr	r0, [r7, #20]
 8005440:	f001 fad2 	bl	80069e8 <vPortFree>
 8005444:	e001      	b.n	800544a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d017      	beq.n	8005480 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005458:	88fa      	ldrh	r2, [r7, #6]
 800545a:	2300      	movs	r3, #0
 800545c:	9303      	str	r3, [sp, #12]
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	9302      	str	r3, [sp, #8]
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 f80e 	bl	8005490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005474:	69f8      	ldr	r0, [r7, #28]
 8005476:	f000 f8ab 	bl	80055d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800547a:	2301      	movs	r3, #1
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	e002      	b.n	8005486 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005480:	f04f 33ff 	mov.w	r3, #4294967295
 8005484:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005486:	69bb      	ldr	r3, [r7, #24]
	}
 8005488:	4618      	mov	r0, r3
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80054a8:	440b      	add	r3, r1
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	f023 0307 	bic.w	r3, r3, #7
 80054b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00c      	beq.n	80054dc <prvInitialiseNewTask+0x4c>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	b672      	cpsid	i
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	b662      	cpsie	i
 80054d6:	617b      	str	r3, [r7, #20]
}
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01f      	beq.n	8005522 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	e012      	b.n	800550e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	4413      	add	r3, r2
 80054ee:	7819      	ldrb	r1, [r3, #0]
 80054f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	4413      	add	r3, r2
 80054f6:	3334      	adds	r3, #52	; 0x34
 80054f8:	460a      	mov	r2, r1
 80054fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d006      	beq.n	8005516 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	3301      	adds	r3, #1
 800550c:	61fb      	str	r3, [r7, #28]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	2b0f      	cmp	r3, #15
 8005512:	d9e9      	bls.n	80054e8 <prvInitialiseNewTask+0x58>
 8005514:	e000      	b.n	8005518 <prvInitialiseNewTask+0x88>
			{
				break;
 8005516:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005520:	e003      	b.n	800552a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	2b06      	cmp	r3, #6
 800552e:	d901      	bls.n	8005534 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005530:	2306      	movs	r3, #6
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005538:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	2200      	movs	r2, #0
 8005544:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	3304      	adds	r3, #4
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff f94e 	bl	80047ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	3318      	adds	r3, #24
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff f949 	bl	80047ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	f1c3 0207 	rsb	r2, r3, #7
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	2200      	movs	r2, #0
 8005574:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	2200      	movs	r2, #0
 800557c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	334c      	adds	r3, #76	; 0x4c
 8005584:	224c      	movs	r2, #76	; 0x4c
 8005586:	2100      	movs	r1, #0
 8005588:	4618      	mov	r0, r3
 800558a:	f001 fb47 	bl	8006c1c <memset>
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	4a0c      	ldr	r2, [pc, #48]	; (80055c4 <prvInitialiseNewTask+0x134>)
 8005592:	651a      	str	r2, [r3, #80]	; 0x50
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	4a0c      	ldr	r2, [pc, #48]	; (80055c8 <prvInitialiseNewTask+0x138>)
 8005598:	655a      	str	r2, [r3, #84]	; 0x54
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	4a0b      	ldr	r2, [pc, #44]	; (80055cc <prvInitialiseNewTask+0x13c>)
 800559e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	69b8      	ldr	r0, [r7, #24]
 80055a6:	f000 ff19 	bl	80063dc <pxPortInitialiseStack>
 80055aa:	4602      	mov	r2, r0
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055bc:	bf00      	nop
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20004884 	.word	0x20004884
 80055c8:	200048ec 	.word	0x200048ec
 80055cc:	20004954 	.word	0x20004954

080055d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055d8:	f001 f810 	bl	80065fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055dc:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <prvAddNewTaskToReadyList+0xb8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3301      	adds	r3, #1
 80055e2:	4a29      	ldr	r2, [pc, #164]	; (8005688 <prvAddNewTaskToReadyList+0xb8>)
 80055e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055e6:	4b29      	ldr	r3, [pc, #164]	; (800568c <prvAddNewTaskToReadyList+0xbc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055ee:	4a27      	ldr	r2, [pc, #156]	; (800568c <prvAddNewTaskToReadyList+0xbc>)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055f4:	4b24      	ldr	r3, [pc, #144]	; (8005688 <prvAddNewTaskToReadyList+0xb8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d110      	bne.n	800561e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055fc:	f000 fbea 	bl	8005dd4 <prvInitialiseTaskLists>
 8005600:	e00d      	b.n	800561e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005602:	4b23      	ldr	r3, [pc, #140]	; (8005690 <prvAddNewTaskToReadyList+0xc0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800560a:	4b20      	ldr	r3, [pc, #128]	; (800568c <prvAddNewTaskToReadyList+0xbc>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	429a      	cmp	r2, r3
 8005616:	d802      	bhi.n	800561e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005618:	4a1c      	ldr	r2, [pc, #112]	; (800568c <prvAddNewTaskToReadyList+0xbc>)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800561e:	4b1d      	ldr	r3, [pc, #116]	; (8005694 <prvAddNewTaskToReadyList+0xc4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3301      	adds	r3, #1
 8005624:	4a1b      	ldr	r2, [pc, #108]	; (8005694 <prvAddNewTaskToReadyList+0xc4>)
 8005626:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	2201      	movs	r2, #1
 800562e:	409a      	lsls	r2, r3
 8005630:	4b19      	ldr	r3, [pc, #100]	; (8005698 <prvAddNewTaskToReadyList+0xc8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4313      	orrs	r3, r2
 8005636:	4a18      	ldr	r2, [pc, #96]	; (8005698 <prvAddNewTaskToReadyList+0xc8>)
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4a15      	ldr	r2, [pc, #84]	; (800569c <prvAddNewTaskToReadyList+0xcc>)
 8005648:	441a      	add	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3304      	adds	r3, #4
 800564e:	4619      	mov	r1, r3
 8005650:	4610      	mov	r0, r2
 8005652:	f7ff f8d8 	bl	8004806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005656:	f001 f805 	bl	8006664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800565a:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <prvAddNewTaskToReadyList+0xc0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00e      	beq.n	8005680 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <prvAddNewTaskToReadyList+0xbc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	429a      	cmp	r2, r3
 800566e:	d207      	bcs.n	8005680 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <prvAddNewTaskToReadyList+0xd0>)
 8005672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20000c38 	.word	0x20000c38
 800568c:	20000b38 	.word	0x20000b38
 8005690:	20000c44 	.word	0x20000c44
 8005694:	20000c54 	.word	0x20000c54
 8005698:	20000c40 	.word	0x20000c40
 800569c:	20000b3c 	.word	0x20000b3c
 80056a0:	e000ed04 	.word	0xe000ed04

080056a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d019      	beq.n	80056ea <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056b6:	4b14      	ldr	r3, [pc, #80]	; (8005708 <vTaskDelay+0x64>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00c      	beq.n	80056d8 <vTaskDelay+0x34>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	b672      	cpsid	i
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	b662      	cpsie	i
 80056d2:	60bb      	str	r3, [r7, #8]
}
 80056d4:	bf00      	nop
 80056d6:	e7fe      	b.n	80056d6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80056d8:	f000 f888 	bl	80057ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056dc:	2100      	movs	r1, #0
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fe16 	bl	8006310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056e4:	f000 f890 	bl	8005808 <xTaskResumeAll>
 80056e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d107      	bne.n	8005700 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <vTaskDelay+0x68>)
 80056f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20000c60 	.word	0x20000c60
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	; 0x28
 8005714:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005716:	2300      	movs	r3, #0
 8005718:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800571e:	463a      	mov	r2, r7
 8005720:	1d39      	adds	r1, r7, #4
 8005722:	f107 0308 	add.w	r3, r7, #8
 8005726:	4618      	mov	r0, r3
 8005728:	f7fa ff08 	bl	800053c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	9202      	str	r2, [sp, #8]
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	2300      	movs	r3, #0
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	2300      	movs	r3, #0
 800573c:	460a      	mov	r2, r1
 800573e:	4923      	ldr	r1, [pc, #140]	; (80057cc <vTaskStartScheduler+0xbc>)
 8005740:	4823      	ldr	r0, [pc, #140]	; (80057d0 <vTaskStartScheduler+0xc0>)
 8005742:	f7ff fdfd 	bl	8005340 <xTaskCreateStatic>
 8005746:	4603      	mov	r3, r0
 8005748:	4a22      	ldr	r2, [pc, #136]	; (80057d4 <vTaskStartScheduler+0xc4>)
 800574a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800574c:	4b21      	ldr	r3, [pc, #132]	; (80057d4 <vTaskStartScheduler+0xc4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005754:	2301      	movs	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e001      	b.n	800575e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d11d      	bne.n	80057a0 <vTaskStartScheduler+0x90>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	b672      	cpsid	i
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	b662      	cpsie	i
 8005778:	613b      	str	r3, [r7, #16]
}
 800577a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800577c:	4b16      	ldr	r3, [pc, #88]	; (80057d8 <vTaskStartScheduler+0xc8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	334c      	adds	r3, #76	; 0x4c
 8005782:	4a16      	ldr	r2, [pc, #88]	; (80057dc <vTaskStartScheduler+0xcc>)
 8005784:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005786:	4b16      	ldr	r3, [pc, #88]	; (80057e0 <vTaskStartScheduler+0xd0>)
 8005788:	f04f 32ff 	mov.w	r2, #4294967295
 800578c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800578e:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <vTaskStartScheduler+0xd4>)
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005794:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <vTaskStartScheduler+0xd8>)
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800579a:	f000 feb1 	bl	8006500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800579e:	e010      	b.n	80057c2 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a6:	d10c      	bne.n	80057c2 <vTaskStartScheduler+0xb2>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	b672      	cpsid	i
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	b662      	cpsie	i
 80057bc:	60fb      	str	r3, [r7, #12]
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <vTaskStartScheduler+0xb0>
}
 80057c2:	bf00      	nop
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	08006e50 	.word	0x08006e50
 80057d0:	08005da5 	.word	0x08005da5
 80057d4:	20000c5c 	.word	0x20000c5c
 80057d8:	20000b38 	.word	0x20000b38
 80057dc:	2000005c 	.word	0x2000005c
 80057e0:	20000c58 	.word	0x20000c58
 80057e4:	20000c44 	.word	0x20000c44
 80057e8:	20000c3c 	.word	0x20000c3c

080057ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057f0:	4b04      	ldr	r3, [pc, #16]	; (8005804 <vTaskSuspendAll+0x18>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3301      	adds	r3, #1
 80057f6:	4a03      	ldr	r2, [pc, #12]	; (8005804 <vTaskSuspendAll+0x18>)
 80057f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80057fa:	bf00      	nop
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	20000c60 	.word	0x20000c60

08005808 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005816:	4b42      	ldr	r3, [pc, #264]	; (8005920 <xTaskResumeAll+0x118>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10c      	bne.n	8005838 <xTaskResumeAll+0x30>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005822:	b672      	cpsid	i
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	b662      	cpsie	i
 8005832:	603b      	str	r3, [r7, #0]
}
 8005834:	bf00      	nop
 8005836:	e7fe      	b.n	8005836 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005838:	f000 fee0 	bl	80065fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800583c:	4b38      	ldr	r3, [pc, #224]	; (8005920 <xTaskResumeAll+0x118>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3b01      	subs	r3, #1
 8005842:	4a37      	ldr	r2, [pc, #220]	; (8005920 <xTaskResumeAll+0x118>)
 8005844:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005846:	4b36      	ldr	r3, [pc, #216]	; (8005920 <xTaskResumeAll+0x118>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d161      	bne.n	8005912 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800584e:	4b35      	ldr	r3, [pc, #212]	; (8005924 <xTaskResumeAll+0x11c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d05d      	beq.n	8005912 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005856:	e02e      	b.n	80058b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005858:	4b33      	ldr	r3, [pc, #204]	; (8005928 <xTaskResumeAll+0x120>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3318      	adds	r3, #24
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff f82b 	bl	80048c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3304      	adds	r3, #4
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff f826 	bl	80048c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	2201      	movs	r2, #1
 800587a:	409a      	lsls	r2, r3
 800587c:	4b2b      	ldr	r3, [pc, #172]	; (800592c <xTaskResumeAll+0x124>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4313      	orrs	r3, r2
 8005882:	4a2a      	ldr	r2, [pc, #168]	; (800592c <xTaskResumeAll+0x124>)
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4a27      	ldr	r2, [pc, #156]	; (8005930 <xTaskResumeAll+0x128>)
 8005894:	441a      	add	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3304      	adds	r3, #4
 800589a:	4619      	mov	r1, r3
 800589c:	4610      	mov	r0, r2
 800589e:	f7fe ffb2 	bl	8004806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a6:	4b23      	ldr	r3, [pc, #140]	; (8005934 <xTaskResumeAll+0x12c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d302      	bcc.n	80058b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80058b0:	4b21      	ldr	r3, [pc, #132]	; (8005938 <xTaskResumeAll+0x130>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058b6:	4b1c      	ldr	r3, [pc, #112]	; (8005928 <xTaskResumeAll+0x120>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1cc      	bne.n	8005858 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058c4:	f000 fb2a 	bl	8005f1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058c8:	4b1c      	ldr	r3, [pc, #112]	; (800593c <xTaskResumeAll+0x134>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d010      	beq.n	80058f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058d4:	f000 f836 	bl	8005944 <xTaskIncrementTick>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80058de:	4b16      	ldr	r3, [pc, #88]	; (8005938 <xTaskResumeAll+0x130>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1f1      	bne.n	80058d4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80058f0:	4b12      	ldr	r3, [pc, #72]	; (800593c <xTaskResumeAll+0x134>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <xTaskResumeAll+0x130>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058fe:	2301      	movs	r3, #1
 8005900:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005902:	4b0f      	ldr	r3, [pc, #60]	; (8005940 <xTaskResumeAll+0x138>)
 8005904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005912:	f000 fea7 	bl	8006664 <vPortExitCritical>

	return xAlreadyYielded;
 8005916:	68bb      	ldr	r3, [r7, #8]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20000c60 	.word	0x20000c60
 8005924:	20000c38 	.word	0x20000c38
 8005928:	20000bf8 	.word	0x20000bf8
 800592c:	20000c40 	.word	0x20000c40
 8005930:	20000b3c 	.word	0x20000b3c
 8005934:	20000b38 	.word	0x20000b38
 8005938:	20000c4c 	.word	0x20000c4c
 800593c:	20000c48 	.word	0x20000c48
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800594e:	4b4f      	ldr	r3, [pc, #316]	; (8005a8c <xTaskIncrementTick+0x148>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f040 808a 	bne.w	8005a6c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005958:	4b4d      	ldr	r3, [pc, #308]	; (8005a90 <xTaskIncrementTick+0x14c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3301      	adds	r3, #1
 800595e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005960:	4a4b      	ldr	r2, [pc, #300]	; (8005a90 <xTaskIncrementTick+0x14c>)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d122      	bne.n	80059b2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800596c:	4b49      	ldr	r3, [pc, #292]	; (8005a94 <xTaskIncrementTick+0x150>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00c      	beq.n	8005990 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597a:	b672      	cpsid	i
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	b662      	cpsie	i
 800598a:	603b      	str	r3, [r7, #0]
}
 800598c:	bf00      	nop
 800598e:	e7fe      	b.n	800598e <xTaskIncrementTick+0x4a>
 8005990:	4b40      	ldr	r3, [pc, #256]	; (8005a94 <xTaskIncrementTick+0x150>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	4b40      	ldr	r3, [pc, #256]	; (8005a98 <xTaskIncrementTick+0x154>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a3e      	ldr	r2, [pc, #248]	; (8005a94 <xTaskIncrementTick+0x150>)
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	4a3e      	ldr	r2, [pc, #248]	; (8005a98 <xTaskIncrementTick+0x154>)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	4b3d      	ldr	r3, [pc, #244]	; (8005a9c <xTaskIncrementTick+0x158>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3301      	adds	r3, #1
 80059aa:	4a3c      	ldr	r2, [pc, #240]	; (8005a9c <xTaskIncrementTick+0x158>)
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	f000 fab5 	bl	8005f1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059b2:	4b3b      	ldr	r3, [pc, #236]	; (8005aa0 <xTaskIncrementTick+0x15c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d348      	bcc.n	8005a4e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059bc:	4b35      	ldr	r3, [pc, #212]	; (8005a94 <xTaskIncrementTick+0x150>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d104      	bne.n	80059d0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c6:	4b36      	ldr	r3, [pc, #216]	; (8005aa0 <xTaskIncrementTick+0x15c>)
 80059c8:	f04f 32ff 	mov.w	r2, #4294967295
 80059cc:	601a      	str	r2, [r3, #0]
					break;
 80059ce:	e03e      	b.n	8005a4e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d0:	4b30      	ldr	r3, [pc, #192]	; (8005a94 <xTaskIncrementTick+0x150>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d203      	bcs.n	80059f0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059e8:	4a2d      	ldr	r2, [pc, #180]	; (8005aa0 <xTaskIncrementTick+0x15c>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059ee:	e02e      	b.n	8005a4e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe ff63 	bl	80048c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d004      	beq.n	8005a0c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	3318      	adds	r3, #24
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe ff5a 	bl	80048c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	2201      	movs	r2, #1
 8005a12:	409a      	lsls	r2, r3
 8005a14:	4b23      	ldr	r3, [pc, #140]	; (8005aa4 <xTaskIncrementTick+0x160>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	4a22      	ldr	r2, [pc, #136]	; (8005aa4 <xTaskIncrementTick+0x160>)
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4a1f      	ldr	r2, [pc, #124]	; (8005aa8 <xTaskIncrementTick+0x164>)
 8005a2c:	441a      	add	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	f7fe fee6 	bl	8004806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	4b1b      	ldr	r3, [pc, #108]	; (8005aac <xTaskIncrementTick+0x168>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d3b9      	bcc.n	80059bc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a4c:	e7b6      	b.n	80059bc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a4e:	4b17      	ldr	r3, [pc, #92]	; (8005aac <xTaskIncrementTick+0x168>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	4914      	ldr	r1, [pc, #80]	; (8005aa8 <xTaskIncrementTick+0x164>)
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d907      	bls.n	8005a76 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005a66:	2301      	movs	r3, #1
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	e004      	b.n	8005a76 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a6c:	4b10      	ldr	r3, [pc, #64]	; (8005ab0 <xTaskIncrementTick+0x16c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3301      	adds	r3, #1
 8005a72:	4a0f      	ldr	r2, [pc, #60]	; (8005ab0 <xTaskIncrementTick+0x16c>)
 8005a74:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a76:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <xTaskIncrementTick+0x170>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a82:	697b      	ldr	r3, [r7, #20]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000c60 	.word	0x20000c60
 8005a90:	20000c3c 	.word	0x20000c3c
 8005a94:	20000bf0 	.word	0x20000bf0
 8005a98:	20000bf4 	.word	0x20000bf4
 8005a9c:	20000c50 	.word	0x20000c50
 8005aa0:	20000c58 	.word	0x20000c58
 8005aa4:	20000c40 	.word	0x20000c40
 8005aa8:	20000b3c 	.word	0x20000b3c
 8005aac:	20000b38 	.word	0x20000b38
 8005ab0:	20000c48 	.word	0x20000c48
 8005ab4:	20000c4c 	.word	0x20000c4c

08005ab8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005abe:	4b2a      	ldr	r3, [pc, #168]	; (8005b68 <vTaskSwitchContext+0xb0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ac6:	4b29      	ldr	r3, [pc, #164]	; (8005b6c <vTaskSwitchContext+0xb4>)
 8005ac8:	2201      	movs	r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005acc:	e046      	b.n	8005b5c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005ace:	4b27      	ldr	r3, [pc, #156]	; (8005b6c <vTaskSwitchContext+0xb4>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad4:	4b26      	ldr	r3, [pc, #152]	; (8005b70 <vTaskSwitchContext+0xb8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	fab3 f383 	clz	r3, r3
 8005ae0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ae2:	7afb      	ldrb	r3, [r7, #11]
 8005ae4:	f1c3 031f 	rsb	r3, r3, #31
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	4922      	ldr	r1, [pc, #136]	; (8005b74 <vTaskSwitchContext+0xbc>)
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10c      	bne.n	8005b18 <vTaskSwitchContext+0x60>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	b672      	cpsid	i
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	b662      	cpsie	i
 8005b12:	607b      	str	r3, [r7, #4]
}
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <vTaskSwitchContext+0x5e>
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4a14      	ldr	r2, [pc, #80]	; (8005b74 <vTaskSwitchContext+0xbc>)
 8005b24:	4413      	add	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	605a      	str	r2, [r3, #4]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d104      	bne.n	8005b48 <vTaskSwitchContext+0x90>
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	605a      	str	r2, [r3, #4]
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	4a0a      	ldr	r2, [pc, #40]	; (8005b78 <vTaskSwitchContext+0xc0>)
 8005b50:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <vTaskSwitchContext+0xc0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	334c      	adds	r3, #76	; 0x4c
 8005b58:	4a08      	ldr	r2, [pc, #32]	; (8005b7c <vTaskSwitchContext+0xc4>)
 8005b5a:	6013      	str	r3, [r2, #0]
}
 8005b5c:	bf00      	nop
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	20000c60 	.word	0x20000c60
 8005b6c:	20000c4c 	.word	0x20000c4c
 8005b70:	20000c40 	.word	0x20000c40
 8005b74:	20000b3c 	.word	0x20000b3c
 8005b78:	20000b38 	.word	0x20000b38
 8005b7c:	2000005c 	.word	0x2000005c

08005b80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10c      	bne.n	8005baa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	b672      	cpsid	i
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	b662      	cpsie	i
 8005ba4:	60fb      	str	r3, [r7, #12]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005baa:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <vTaskPlaceOnEventList+0x48>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3318      	adds	r3, #24
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fe fe4b 	bl	800484e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bb8:	2101      	movs	r1, #1
 8005bba:	6838      	ldr	r0, [r7, #0]
 8005bbc:	f000 fba8 	bl	8006310 <prvAddCurrentTaskToDelayedList>
}
 8005bc0:	bf00      	nop
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20000b38 	.word	0x20000b38

08005bcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10c      	bne.n	8005bfc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	b672      	cpsid	i
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	b662      	cpsie	i
 8005bf6:	60fb      	str	r3, [r7, #12]
}
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	3318      	adds	r3, #24
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe fe5d 	bl	80048c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c06:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <xTaskRemoveFromEventList+0xb0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d11c      	bne.n	8005c48 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	3304      	adds	r3, #4
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fe fe54 	bl	80048c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <xTaskRemoveFromEventList+0xb4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	4a16      	ldr	r2, [pc, #88]	; (8005c80 <xTaskRemoveFromEventList+0xb4>)
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <xTaskRemoveFromEventList+0xb8>)
 8005c38:	441a      	add	r2, r3
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4610      	mov	r0, r2
 8005c42:	f7fe fde0 	bl	8004806 <vListInsertEnd>
 8005c46:	e005      	b.n	8005c54 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	3318      	adds	r3, #24
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	480e      	ldr	r0, [pc, #56]	; (8005c88 <xTaskRemoveFromEventList+0xbc>)
 8005c50:	f7fe fdd9 	bl	8004806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c58:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <xTaskRemoveFromEventList+0xc0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d905      	bls.n	8005c6e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c62:	2301      	movs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c66:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <xTaskRemoveFromEventList+0xc4>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	e001      	b.n	8005c72 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c72:	697b      	ldr	r3, [r7, #20]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000c60 	.word	0x20000c60
 8005c80:	20000c40 	.word	0x20000c40
 8005c84:	20000b3c 	.word	0x20000b3c
 8005c88:	20000bf8 	.word	0x20000bf8
 8005c8c:	20000b38 	.word	0x20000b38
 8005c90:	20000c4c 	.word	0x20000c4c

08005c94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <vTaskInternalSetTimeOutState+0x24>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ca4:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <vTaskInternalSetTimeOutState+0x28>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	605a      	str	r2, [r3, #4]
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	20000c50 	.word	0x20000c50
 8005cbc:	20000c3c 	.word	0x20000c3c

08005cc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10c      	bne.n	8005cea <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	b672      	cpsid	i
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	b662      	cpsie	i
 8005ce4:	613b      	str	r3, [r7, #16]
}
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10c      	bne.n	8005d0a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	b672      	cpsid	i
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	b662      	cpsie	i
 8005d04:	60fb      	str	r3, [r7, #12]
}
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005d0a:	f000 fc77 	bl	80065fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d0e:	4b1d      	ldr	r3, [pc, #116]	; (8005d84 <xTaskCheckForTimeOut+0xc4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d102      	bne.n	8005d2e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61fb      	str	r3, [r7, #28]
 8005d2c:	e023      	b.n	8005d76 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <xTaskCheckForTimeOut+0xc8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d007      	beq.n	8005d4a <xTaskCheckForTimeOut+0x8a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d302      	bcc.n	8005d4a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d44:	2301      	movs	r3, #1
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	e015      	b.n	8005d76 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d20b      	bcs.n	8005d6c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	1ad2      	subs	r2, r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff ff97 	bl	8005c94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61fb      	str	r3, [r7, #28]
 8005d6a:	e004      	b.n	8005d76 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d72:	2301      	movs	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d76:	f000 fc75 	bl	8006664 <vPortExitCritical>

	return xReturn;
 8005d7a:	69fb      	ldr	r3, [r7, #28]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3720      	adds	r7, #32
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20000c3c 	.word	0x20000c3c
 8005d88:	20000c50 	.word	0x20000c50

08005d8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d90:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <vTaskMissedYield+0x14>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
}
 8005d96:	bf00      	nop
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	20000c4c 	.word	0x20000c4c

08005da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005dac:	f000 f852 	bl	8005e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005db0:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <prvIdleTask+0x28>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d9f9      	bls.n	8005dac <prvIdleTask+0x8>
			{
				taskYIELD();
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <prvIdleTask+0x2c>)
 8005dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005dc8:	e7f0      	b.n	8005dac <prvIdleTask+0x8>
 8005dca:	bf00      	nop
 8005dcc:	20000b3c 	.word	0x20000b3c
 8005dd0:	e000ed04 	.word	0xe000ed04

08005dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dda:	2300      	movs	r3, #0
 8005ddc:	607b      	str	r3, [r7, #4]
 8005dde:	e00c      	b.n	8005dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4a12      	ldr	r2, [pc, #72]	; (8005e34 <prvInitialiseTaskLists+0x60>)
 8005dec:	4413      	add	r3, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fe fcdc 	bl	80047ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3301      	adds	r3, #1
 8005df8:	607b      	str	r3, [r7, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b06      	cmp	r3, #6
 8005dfe:	d9ef      	bls.n	8005de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e00:	480d      	ldr	r0, [pc, #52]	; (8005e38 <prvInitialiseTaskLists+0x64>)
 8005e02:	f7fe fcd3 	bl	80047ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e06:	480d      	ldr	r0, [pc, #52]	; (8005e3c <prvInitialiseTaskLists+0x68>)
 8005e08:	f7fe fcd0 	bl	80047ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e0c:	480c      	ldr	r0, [pc, #48]	; (8005e40 <prvInitialiseTaskLists+0x6c>)
 8005e0e:	f7fe fccd 	bl	80047ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e12:	480c      	ldr	r0, [pc, #48]	; (8005e44 <prvInitialiseTaskLists+0x70>)
 8005e14:	f7fe fcca 	bl	80047ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e18:	480b      	ldr	r0, [pc, #44]	; (8005e48 <prvInitialiseTaskLists+0x74>)
 8005e1a:	f7fe fcc7 	bl	80047ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <prvInitialiseTaskLists+0x78>)
 8005e20:	4a05      	ldr	r2, [pc, #20]	; (8005e38 <prvInitialiseTaskLists+0x64>)
 8005e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <prvInitialiseTaskLists+0x7c>)
 8005e26:	4a05      	ldr	r2, [pc, #20]	; (8005e3c <prvInitialiseTaskLists+0x68>)
 8005e28:	601a      	str	r2, [r3, #0]
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000b3c 	.word	0x20000b3c
 8005e38:	20000bc8 	.word	0x20000bc8
 8005e3c:	20000bdc 	.word	0x20000bdc
 8005e40:	20000bf8 	.word	0x20000bf8
 8005e44:	20000c0c 	.word	0x20000c0c
 8005e48:	20000c24 	.word	0x20000c24
 8005e4c:	20000bf0 	.word	0x20000bf0
 8005e50:	20000bf4 	.word	0x20000bf4

08005e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e5a:	e019      	b.n	8005e90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e5c:	f000 fbce 	bl	80065fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e60:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <prvCheckTasksWaitingTermination+0x50>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe fd27 	bl	80048c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e72:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <prvCheckTasksWaitingTermination+0x54>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	4a0b      	ldr	r2, [pc, #44]	; (8005ea8 <prvCheckTasksWaitingTermination+0x54>)
 8005e7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <prvCheckTasksWaitingTermination+0x58>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <prvCheckTasksWaitingTermination+0x58>)
 8005e84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e86:	f000 fbed 	bl	8006664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f810 	bl	8005eb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e90:	4b06      	ldr	r3, [pc, #24]	; (8005eac <prvCheckTasksWaitingTermination+0x58>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e1      	bne.n	8005e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000c0c 	.word	0x20000c0c
 8005ea8:	20000c38 	.word	0x20000c38
 8005eac:	20000c20 	.word	0x20000c20

08005eb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	334c      	adds	r3, #76	; 0x4c
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 feb5 	bl	8006c2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d108      	bne.n	8005ede <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fd89 	bl	80069e8 <vPortFree>
				vPortFree( pxTCB );
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fd86 	bl	80069e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005edc:	e01a      	b.n	8005f14 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d103      	bne.n	8005ef0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fd7d 	bl	80069e8 <vPortFree>
	}
 8005eee:	e011      	b.n	8005f14 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d00c      	beq.n	8005f14 <prvDeleteTCB+0x64>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	b672      	cpsid	i
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	b662      	cpsie	i
 8005f0e:	60fb      	str	r3, [r7, #12]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <prvDeleteTCB+0x62>
	}
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <prvResetNextTaskUnblockTime+0x38>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <prvResetNextTaskUnblockTime+0x3c>)
 8005f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f34:	e008      	b.n	8005f48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f36:	4b07      	ldr	r3, [pc, #28]	; (8005f54 <prvResetNextTaskUnblockTime+0x38>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4a04      	ldr	r2, [pc, #16]	; (8005f58 <prvResetNextTaskUnblockTime+0x3c>)
 8005f46:	6013      	str	r3, [r2, #0]
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	20000bf0 	.word	0x20000bf0
 8005f58:	20000c58 	.word	0x20000c58

08005f5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <xTaskGetSchedulerState+0x34>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d102      	bne.n	8005f70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	607b      	str	r3, [r7, #4]
 8005f6e:	e008      	b.n	8005f82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f70:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <xTaskGetSchedulerState+0x38>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	607b      	str	r3, [r7, #4]
 8005f7c:	e001      	b.n	8005f82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f82:	687b      	ldr	r3, [r7, #4]
	}
 8005f84:	4618      	mov	r0, r3
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	20000c44 	.word	0x20000c44
 8005f94:	20000c60 	.word	0x20000c60

08005f98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d069      	beq.n	8006082 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb2:	4b36      	ldr	r3, [pc, #216]	; (800608c <xTaskPriorityInherit+0xf4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d259      	bcs.n	8006070 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	db06      	blt.n	8005fd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc4:	4b31      	ldr	r3, [pc, #196]	; (800608c <xTaskPriorityInherit+0xf4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	f1c3 0207 	rsb	r2, r3, #7
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	6959      	ldr	r1, [r3, #20]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4a2b      	ldr	r2, [pc, #172]	; (8006090 <xTaskPriorityInherit+0xf8>)
 8005fe4:	4413      	add	r3, r2
 8005fe6:	4299      	cmp	r1, r3
 8005fe8:	d13a      	bne.n	8006060 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fc66 	bl	80048c0 <uxListRemove>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d115      	bne.n	8006026 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffe:	4924      	ldr	r1, [pc, #144]	; (8006090 <xTaskPriorityInherit+0xf8>)
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <xTaskPriorityInherit+0x8e>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	2201      	movs	r2, #1
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	43da      	mvns	r2, r3
 800601c:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <xTaskPriorityInherit+0xfc>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4013      	ands	r3, r2
 8006022:	4a1c      	ldr	r2, [pc, #112]	; (8006094 <xTaskPriorityInherit+0xfc>)
 8006024:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006026:	4b19      	ldr	r3, [pc, #100]	; (800608c <xTaskPriorityInherit+0xf4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	2201      	movs	r2, #1
 8006036:	409a      	lsls	r2, r3
 8006038:	4b16      	ldr	r3, [pc, #88]	; (8006094 <xTaskPriorityInherit+0xfc>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4313      	orrs	r3, r2
 800603e:	4a15      	ldr	r2, [pc, #84]	; (8006094 <xTaskPriorityInherit+0xfc>)
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006046:	4613      	mov	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4a10      	ldr	r2, [pc, #64]	; (8006090 <xTaskPriorityInherit+0xf8>)
 8006050:	441a      	add	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	3304      	adds	r3, #4
 8006056:	4619      	mov	r1, r3
 8006058:	4610      	mov	r0, r2
 800605a:	f7fe fbd4 	bl	8004806 <vListInsertEnd>
 800605e:	e004      	b.n	800606a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006060:	4b0a      	ldr	r3, [pc, #40]	; (800608c <xTaskPriorityInherit+0xf4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800606a:	2301      	movs	r3, #1
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	e008      	b.n	8006082 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006074:	4b05      	ldr	r3, [pc, #20]	; (800608c <xTaskPriorityInherit+0xf4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607a:	429a      	cmp	r2, r3
 800607c:	d201      	bcs.n	8006082 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800607e:	2301      	movs	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006082:	68fb      	ldr	r3, [r7, #12]
	}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000b38 	.word	0x20000b38
 8006090:	20000b3c 	.word	0x20000b3c
 8006094:	20000c40 	.word	0x20000c40

08006098 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d072      	beq.n	8006194 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060ae:	4b3c      	ldr	r3, [pc, #240]	; (80061a0 <xTaskPriorityDisinherit+0x108>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d00c      	beq.n	80060d2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060bc:	b672      	cpsid	i
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	b662      	cpsie	i
 80060cc:	60fb      	str	r3, [r7, #12]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10c      	bne.n	80060f4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	b672      	cpsid	i
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	b662      	cpsie	i
 80060ee:	60bb      	str	r3, [r7, #8]
}
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f8:	1e5a      	subs	r2, r3, #1
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006106:	429a      	cmp	r2, r3
 8006108:	d044      	beq.n	8006194 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800610e:	2b00      	cmp	r3, #0
 8006110:	d140      	bne.n	8006194 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	3304      	adds	r3, #4
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe fbd2 	bl	80048c0 <uxListRemove>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d115      	bne.n	800614e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006126:	491f      	ldr	r1, [pc, #124]	; (80061a4 <xTaskPriorityDisinherit+0x10c>)
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <xTaskPriorityDisinherit+0xb6>
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	2201      	movs	r2, #1
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	43da      	mvns	r2, r3
 8006144:	4b18      	ldr	r3, [pc, #96]	; (80061a8 <xTaskPriorityDisinherit+0x110>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4013      	ands	r3, r2
 800614a:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <xTaskPriorityDisinherit+0x110>)
 800614c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	f1c3 0207 	rsb	r2, r3, #7
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	2201      	movs	r2, #1
 8006168:	409a      	lsls	r2, r3
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <xTaskPriorityDisinherit+0x110>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4313      	orrs	r3, r2
 8006170:	4a0d      	ldr	r2, [pc, #52]	; (80061a8 <xTaskPriorityDisinherit+0x110>)
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4a08      	ldr	r2, [pc, #32]	; (80061a4 <xTaskPriorityDisinherit+0x10c>)
 8006182:	441a      	add	r2, r3
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	3304      	adds	r3, #4
 8006188:	4619      	mov	r1, r3
 800618a:	4610      	mov	r0, r2
 800618c:	f7fe fb3b 	bl	8004806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006190:	2301      	movs	r3, #1
 8006192:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006194:	697b      	ldr	r3, [r7, #20]
	}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000b38 	.word	0x20000b38
 80061a4:	20000b3c 	.word	0x20000b3c
 80061a8:	20000c40 	.word	0x20000c40

080061ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80061ba:	2301      	movs	r3, #1
 80061bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 8087 	beq.w	80062d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10c      	bne.n	80061e8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	b672      	cpsid	i
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	b662      	cpsie	i
 80061e2:	60fb      	str	r3, [r7, #12]
}
 80061e4:	bf00      	nop
 80061e6:	e7fe      	b.n	80061e6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d902      	bls.n	80061f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	61fb      	str	r3, [r7, #28]
 80061f6:	e002      	b.n	80061fe <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	429a      	cmp	r2, r3
 8006206:	d065      	beq.n	80062d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	429a      	cmp	r2, r3
 8006210:	d160      	bne.n	80062d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006212:	4b32      	ldr	r3, [pc, #200]	; (80062dc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	429a      	cmp	r2, r3
 800621a:	d10c      	bne.n	8006236 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	b672      	cpsid	i
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	b662      	cpsie	i
 8006230:	60bb      	str	r3, [r7, #8]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	db04      	blt.n	8006254 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	f1c3 0207 	rsb	r2, r3, #7
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	6959      	ldr	r1, [r3, #20]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4a1f      	ldr	r2, [pc, #124]	; (80062e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006264:	4413      	add	r3, r2
 8006266:	4299      	cmp	r1, r3
 8006268:	d134      	bne.n	80062d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	3304      	adds	r3, #4
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fb26 	bl	80048c0 <uxListRemove>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d115      	bne.n	80062a6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627e:	4918      	ldr	r1, [pc, #96]	; (80062e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006280:	4613      	mov	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	440b      	add	r3, r1
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	2201      	movs	r2, #1
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	43da      	mvns	r2, r3
 800629c:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4013      	ands	r3, r2
 80062a2:	4a10      	ldr	r2, [pc, #64]	; (80062e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80062a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062aa:	2201      	movs	r2, #1
 80062ac:	409a      	lsls	r2, r3
 80062ae:	4b0d      	ldr	r3, [pc, #52]	; (80062e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	4a0b      	ldr	r2, [pc, #44]	; (80062e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4a06      	ldr	r2, [pc, #24]	; (80062e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80062c6:	441a      	add	r2, r3
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f7fe fa99 	bl	8004806 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062d4:	bf00      	nop
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20000b38 	.word	0x20000b38
 80062e0:	20000b3c 	.word	0x20000b3c
 80062e4:	20000c40 	.word	0x20000c40

080062e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80062ec:	4b07      	ldr	r3, [pc, #28]	; (800630c <pvTaskIncrementMutexHeldCount+0x24>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <pvTaskIncrementMutexHeldCount+0x24>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062fa:	3201      	adds	r2, #1
 80062fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80062fe:	4b03      	ldr	r3, [pc, #12]	; (800630c <pvTaskIncrementMutexHeldCount+0x24>)
 8006300:	681b      	ldr	r3, [r3, #0]
	}
 8006302:	4618      	mov	r0, r3
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	20000b38 	.word	0x20000b38

08006310 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800631a:	4b29      	ldr	r3, [pc, #164]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006320:	4b28      	ldr	r3, [pc, #160]	; (80063c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3304      	adds	r3, #4
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe faca 	bl	80048c0 <uxListRemove>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006332:	4b24      	ldr	r3, [pc, #144]	; (80063c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	2201      	movs	r2, #1
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	43da      	mvns	r2, r3
 8006340:	4b21      	ldr	r3, [pc, #132]	; (80063c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4013      	ands	r3, r2
 8006346:	4a20      	ldr	r2, [pc, #128]	; (80063c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006348:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006350:	d10a      	bne.n	8006368 <prvAddCurrentTaskToDelayedList+0x58>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d007      	beq.n	8006368 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006358:	4b1a      	ldr	r3, [pc, #104]	; (80063c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3304      	adds	r3, #4
 800635e:	4619      	mov	r1, r3
 8006360:	481a      	ldr	r0, [pc, #104]	; (80063cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006362:	f7fe fa50 	bl	8004806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006366:	e026      	b.n	80063b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006370:	4b14      	ldr	r3, [pc, #80]	; (80063c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	429a      	cmp	r2, r3
 800637e:	d209      	bcs.n	8006394 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006380:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	4b0f      	ldr	r3, [pc, #60]	; (80063c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3304      	adds	r3, #4
 800638a:	4619      	mov	r1, r3
 800638c:	4610      	mov	r0, r2
 800638e:	f7fe fa5e 	bl	800484e <vListInsert>
}
 8006392:	e010      	b.n	80063b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006394:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f7fe fa54 	bl	800484e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063a6:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d202      	bcs.n	80063b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80063b0:	4a09      	ldr	r2, [pc, #36]	; (80063d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6013      	str	r3, [r2, #0]
}
 80063b6:	bf00      	nop
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000c3c 	.word	0x20000c3c
 80063c4:	20000b38 	.word	0x20000b38
 80063c8:	20000c40 	.word	0x20000c40
 80063cc:	20000c24 	.word	0x20000c24
 80063d0:	20000bf4 	.word	0x20000bf4
 80063d4:	20000bf0 	.word	0x20000bf0
 80063d8:	20000c58 	.word	0x20000c58

080063dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3b04      	subs	r3, #4
 80063ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3b04      	subs	r3, #4
 80063fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f023 0201 	bic.w	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3b04      	subs	r3, #4
 800640a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800640c:	4a0c      	ldr	r2, [pc, #48]	; (8006440 <pxPortInitialiseStack+0x64>)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3b14      	subs	r3, #20
 8006416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3b04      	subs	r3, #4
 8006422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f06f 0202 	mvn.w	r2, #2
 800642a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3b20      	subs	r3, #32
 8006430:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006432:	68fb      	ldr	r3, [r7, #12]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	08006445 	.word	0x08006445

08006444 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800644e:	4b14      	ldr	r3, [pc, #80]	; (80064a0 <prvTaskExitError+0x5c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d00c      	beq.n	8006472 <prvTaskExitError+0x2e>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	b672      	cpsid	i
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	b662      	cpsie	i
 800646c:	60fb      	str	r3, [r7, #12]
}
 800646e:	bf00      	nop
 8006470:	e7fe      	b.n	8006470 <prvTaskExitError+0x2c>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	b672      	cpsid	i
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	b662      	cpsie	i
 8006486:	60bb      	str	r3, [r7, #8]
}
 8006488:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800648a:	bf00      	nop
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0fc      	beq.n	800648c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006492:	bf00      	nop
 8006494:	bf00      	nop
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	2000000c 	.word	0x2000000c
	...

080064b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064b0:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <pxCurrentTCBConst2>)
 80064b2:	6819      	ldr	r1, [r3, #0]
 80064b4:	6808      	ldr	r0, [r1, #0]
 80064b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ba:	f380 8809 	msr	PSP, r0
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	f380 8811 	msr	BASEPRI, r0
 80064ca:	4770      	bx	lr
 80064cc:	f3af 8000 	nop.w

080064d0 <pxCurrentTCBConst2>:
 80064d0:	20000b38 	.word	0x20000b38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop

080064d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064d8:	4808      	ldr	r0, [pc, #32]	; (80064fc <prvPortStartFirstTask+0x24>)
 80064da:	6800      	ldr	r0, [r0, #0]
 80064dc:	6800      	ldr	r0, [r0, #0]
 80064de:	f380 8808 	msr	MSP, r0
 80064e2:	f04f 0000 	mov.w	r0, #0
 80064e6:	f380 8814 	msr	CONTROL, r0
 80064ea:	b662      	cpsie	i
 80064ec:	b661      	cpsie	f
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	df00      	svc	0
 80064f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064fa:	bf00      	nop
 80064fc:	e000ed08 	.word	0xe000ed08

08006500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006506:	4b37      	ldr	r3, [pc, #220]	; (80065e4 <xPortStartScheduler+0xe4>)
 8006508:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	22ff      	movs	r2, #255	; 0xff
 8006516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006528:	b2da      	uxtb	r2, r3
 800652a:	4b2f      	ldr	r3, [pc, #188]	; (80065e8 <xPortStartScheduler+0xe8>)
 800652c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800652e:	4b2f      	ldr	r3, [pc, #188]	; (80065ec <xPortStartScheduler+0xec>)
 8006530:	2207      	movs	r2, #7
 8006532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006534:	e009      	b.n	800654a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006536:	4b2d      	ldr	r3, [pc, #180]	; (80065ec <xPortStartScheduler+0xec>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3b01      	subs	r3, #1
 800653c:	4a2b      	ldr	r2, [pc, #172]	; (80065ec <xPortStartScheduler+0xec>)
 800653e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	b2db      	uxtb	r3, r3
 8006548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d0ef      	beq.n	8006536 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006556:	4b25      	ldr	r3, [pc, #148]	; (80065ec <xPortStartScheduler+0xec>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f1c3 0307 	rsb	r3, r3, #7
 800655e:	2b04      	cmp	r3, #4
 8006560:	d00c      	beq.n	800657c <xPortStartScheduler+0x7c>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	b672      	cpsid	i
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	b662      	cpsie	i
 8006576:	60bb      	str	r3, [r7, #8]
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800657c:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <xPortStartScheduler+0xec>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	4a1a      	ldr	r2, [pc, #104]	; (80065ec <xPortStartScheduler+0xec>)
 8006584:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006586:	4b19      	ldr	r3, [pc, #100]	; (80065ec <xPortStartScheduler+0xec>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800658e:	4a17      	ldr	r2, [pc, #92]	; (80065ec <xPortStartScheduler+0xec>)
 8006590:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	b2da      	uxtb	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800659a:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <xPortStartScheduler+0xf0>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a14      	ldr	r2, [pc, #80]	; (80065f0 <xPortStartScheduler+0xf0>)
 80065a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065a6:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <xPortStartScheduler+0xf0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a11      	ldr	r2, [pc, #68]	; (80065f0 <xPortStartScheduler+0xf0>)
 80065ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065b2:	f000 f8dd 	bl	8006770 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065b6:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <xPortStartScheduler+0xf4>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065bc:	f000 f8fc 	bl	80067b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065c0:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <xPortStartScheduler+0xf8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a0c      	ldr	r2, [pc, #48]	; (80065f8 <xPortStartScheduler+0xf8>)
 80065c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065cc:	f7ff ff84 	bl	80064d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065d0:	f7ff fa72 	bl	8005ab8 <vTaskSwitchContext>
	prvTaskExitError();
 80065d4:	f7ff ff36 	bl	8006444 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	e000e400 	.word	0xe000e400
 80065e8:	20000c64 	.word	0x20000c64
 80065ec:	20000c68 	.word	0x20000c68
 80065f0:	e000ed20 	.word	0xe000ed20
 80065f4:	2000000c 	.word	0x2000000c
 80065f8:	e000ef34 	.word	0xe000ef34

080065fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	b672      	cpsid	i
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	b662      	cpsie	i
 8006616:	607b      	str	r3, [r7, #4]
}
 8006618:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800661a:	4b10      	ldr	r3, [pc, #64]	; (800665c <vPortEnterCritical+0x60>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3301      	adds	r3, #1
 8006620:	4a0e      	ldr	r2, [pc, #56]	; (800665c <vPortEnterCritical+0x60>)
 8006622:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006624:	4b0d      	ldr	r3, [pc, #52]	; (800665c <vPortEnterCritical+0x60>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d111      	bne.n	8006650 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800662c:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <vPortEnterCritical+0x64>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00c      	beq.n	8006650 <vPortEnterCritical+0x54>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	b672      	cpsid	i
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	b662      	cpsie	i
 800664a:	603b      	str	r3, [r7, #0]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <vPortEnterCritical+0x52>
	}
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	2000000c 	.word	0x2000000c
 8006660:	e000ed04 	.word	0xe000ed04

08006664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800666a:	4b13      	ldr	r3, [pc, #76]	; (80066b8 <vPortExitCritical+0x54>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10c      	bne.n	800668c <vPortExitCritical+0x28>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	b672      	cpsid	i
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	b662      	cpsie	i
 8006686:	607b      	str	r3, [r7, #4]
}
 8006688:	bf00      	nop
 800668a:	e7fe      	b.n	800668a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <vPortExitCritical+0x54>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3b01      	subs	r3, #1
 8006692:	4a09      	ldr	r2, [pc, #36]	; (80066b8 <vPortExitCritical+0x54>)
 8006694:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006696:	4b08      	ldr	r3, [pc, #32]	; (80066b8 <vPortExitCritical+0x54>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d105      	bne.n	80066aa <vPortExitCritical+0x46>
 800669e:	2300      	movs	r3, #0
 80066a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	f383 8811 	msr	BASEPRI, r3
}
 80066a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	2000000c 	.word	0x2000000c
 80066bc:	00000000 	.word	0x00000000

080066c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066c0:	f3ef 8009 	mrs	r0, PSP
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4b15      	ldr	r3, [pc, #84]	; (8006720 <pxCurrentTCBConst>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	f01e 0f10 	tst.w	lr, #16
 80066d0:	bf08      	it	eq
 80066d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066da:	6010      	str	r0, [r2, #0]
 80066dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066e4:	b672      	cpsid	i
 80066e6:	f380 8811 	msr	BASEPRI, r0
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	b662      	cpsie	i
 80066f4:	f7ff f9e0 	bl	8005ab8 <vTaskSwitchContext>
 80066f8:	f04f 0000 	mov.w	r0, #0
 80066fc:	f380 8811 	msr	BASEPRI, r0
 8006700:	bc09      	pop	{r0, r3}
 8006702:	6819      	ldr	r1, [r3, #0]
 8006704:	6808      	ldr	r0, [r1, #0]
 8006706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670a:	f01e 0f10 	tst.w	lr, #16
 800670e:	bf08      	it	eq
 8006710:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006714:	f380 8809 	msr	PSP, r0
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop

08006720 <pxCurrentTCBConst>:
 8006720:	20000b38 	.word	0x20000b38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop

08006728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	b672      	cpsid	i
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	b662      	cpsie	i
 8006742:	607b      	str	r3, [r7, #4]
}
 8006744:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006746:	f7ff f8fd 	bl	8005944 <xTaskIncrementTick>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006750:	4b06      	ldr	r3, [pc, #24]	; (800676c <SysTick_Handler+0x44>)
 8006752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	2300      	movs	r3, #0
 800675a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	f383 8811 	msr	BASEPRI, r3
}
 8006762:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006764:	bf00      	nop
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006774:	4b0b      	ldr	r3, [pc, #44]	; (80067a4 <vPortSetupTimerInterrupt+0x34>)
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800677a:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <vPortSetupTimerInterrupt+0x38>)
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006780:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <vPortSetupTimerInterrupt+0x3c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a0a      	ldr	r2, [pc, #40]	; (80067b0 <vPortSetupTimerInterrupt+0x40>)
 8006786:	fba2 2303 	umull	r2, r3, r2, r3
 800678a:	099b      	lsrs	r3, r3, #6
 800678c:	4a09      	ldr	r2, [pc, #36]	; (80067b4 <vPortSetupTimerInterrupt+0x44>)
 800678e:	3b01      	subs	r3, #1
 8006790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006792:	4b04      	ldr	r3, [pc, #16]	; (80067a4 <vPortSetupTimerInterrupt+0x34>)
 8006794:	2207      	movs	r2, #7
 8006796:	601a      	str	r2, [r3, #0]
}
 8006798:	bf00      	nop
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	e000e010 	.word	0xe000e010
 80067a8:	e000e018 	.word	0xe000e018
 80067ac:	20000000 	.word	0x20000000
 80067b0:	10624dd3 	.word	0x10624dd3
 80067b4:	e000e014 	.word	0xe000e014

080067b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067c8 <vPortEnableVFP+0x10>
 80067bc:	6801      	ldr	r1, [r0, #0]
 80067be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067c2:	6001      	str	r1, [r0, #0]
 80067c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067c6:	bf00      	nop
 80067c8:	e000ed88 	.word	0xe000ed88

080067cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067d2:	f3ef 8305 	mrs	r3, IPSR
 80067d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b0f      	cmp	r3, #15
 80067dc:	d916      	bls.n	800680c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067de:	4a19      	ldr	r2, [pc, #100]	; (8006844 <vPortValidateInterruptPriority+0x78>)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067e8:	4b17      	ldr	r3, [pc, #92]	; (8006848 <vPortValidateInterruptPriority+0x7c>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	7afa      	ldrb	r2, [r7, #11]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d20c      	bcs.n	800680c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	b672      	cpsid	i
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	b662      	cpsie	i
 8006806:	607b      	str	r3, [r7, #4]
}
 8006808:	bf00      	nop
 800680a:	e7fe      	b.n	800680a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800680c:	4b0f      	ldr	r3, [pc, #60]	; (800684c <vPortValidateInterruptPriority+0x80>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006814:	4b0e      	ldr	r3, [pc, #56]	; (8006850 <vPortValidateInterruptPriority+0x84>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d90c      	bls.n	8006836 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	b672      	cpsid	i
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	b662      	cpsie	i
 8006830:	603b      	str	r3, [r7, #0]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <vPortValidateInterruptPriority+0x68>
	}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	e000e3f0 	.word	0xe000e3f0
 8006848:	20000c64 	.word	0x20000c64
 800684c:	e000ed0c 	.word	0xe000ed0c
 8006850:	20000c68 	.word	0x20000c68

08006854 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08a      	sub	sp, #40	; 0x28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800685c:	2300      	movs	r3, #0
 800685e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006860:	f7fe ffc4 	bl	80057ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006864:	4b5b      	ldr	r3, [pc, #364]	; (80069d4 <pvPortMalloc+0x180>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800686c:	f000 f91a 	bl	8006aa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006870:	4b59      	ldr	r3, [pc, #356]	; (80069d8 <pvPortMalloc+0x184>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4013      	ands	r3, r2
 8006878:	2b00      	cmp	r3, #0
 800687a:	f040 8092 	bne.w	80069a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01f      	beq.n	80068c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006884:	2208      	movs	r2, #8
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4413      	add	r3, r2
 800688a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	2b00      	cmp	r3, #0
 8006894:	d016      	beq.n	80068c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f023 0307 	bic.w	r3, r3, #7
 800689c:	3308      	adds	r3, #8
 800689e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00c      	beq.n	80068c4 <pvPortMalloc+0x70>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	b672      	cpsid	i
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	b662      	cpsie	i
 80068be:	617b      	str	r3, [r7, #20]
}
 80068c0:	bf00      	nop
 80068c2:	e7fe      	b.n	80068c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d06b      	beq.n	80069a2 <pvPortMalloc+0x14e>
 80068ca:	4b44      	ldr	r3, [pc, #272]	; (80069dc <pvPortMalloc+0x188>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d866      	bhi.n	80069a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068d4:	4b42      	ldr	r3, [pc, #264]	; (80069e0 <pvPortMalloc+0x18c>)
 80068d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068d8:	4b41      	ldr	r3, [pc, #260]	; (80069e0 <pvPortMalloc+0x18c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068de:	e004      	b.n	80068ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d903      	bls.n	80068fc <pvPortMalloc+0xa8>
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1f1      	bne.n	80068e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068fc:	4b35      	ldr	r3, [pc, #212]	; (80069d4 <pvPortMalloc+0x180>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006902:	429a      	cmp	r2, r3
 8006904:	d04d      	beq.n	80069a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2208      	movs	r2, #8
 800690c:	4413      	add	r3, r2
 800690e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	2308      	movs	r3, #8
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	429a      	cmp	r2, r3
 8006926:	d921      	bls.n	800696c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00c      	beq.n	8006954 <pvPortMalloc+0x100>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	b672      	cpsid	i
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	b662      	cpsie	i
 800694e:	613b      	str	r3, [r7, #16]
}
 8006950:	bf00      	nop
 8006952:	e7fe      	b.n	8006952 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006966:	69b8      	ldr	r0, [r7, #24]
 8006968:	f000 f8fe 	bl	8006b68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800696c:	4b1b      	ldr	r3, [pc, #108]	; (80069dc <pvPortMalloc+0x188>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	4a19      	ldr	r2, [pc, #100]	; (80069dc <pvPortMalloc+0x188>)
 8006978:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800697a:	4b18      	ldr	r3, [pc, #96]	; (80069dc <pvPortMalloc+0x188>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4b19      	ldr	r3, [pc, #100]	; (80069e4 <pvPortMalloc+0x190>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d203      	bcs.n	800698e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006986:	4b15      	ldr	r3, [pc, #84]	; (80069dc <pvPortMalloc+0x188>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a16      	ldr	r2, [pc, #88]	; (80069e4 <pvPortMalloc+0x190>)
 800698c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	4b11      	ldr	r3, [pc, #68]	; (80069d8 <pvPortMalloc+0x184>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	431a      	orrs	r2, r3
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069a2:	f7fe ff31 	bl	8005808 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <pvPortMalloc+0x176>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	b672      	cpsid	i
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	b662      	cpsie	i
 80069c4:	60fb      	str	r3, [r7, #12]
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <pvPortMalloc+0x174>
	return pvReturn;
 80069ca:	69fb      	ldr	r3, [r7, #28]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3728      	adds	r7, #40	; 0x28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20004874 	.word	0x20004874
 80069d8:	20004880 	.word	0x20004880
 80069dc:	20004878 	.word	0x20004878
 80069e0:	2000486c 	.word	0x2000486c
 80069e4:	2000487c 	.word	0x2000487c

080069e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d04c      	beq.n	8006a94 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069fa:	2308      	movs	r3, #8
 80069fc:	425b      	negs	r3, r3
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4413      	add	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	4b23      	ldr	r3, [pc, #140]	; (8006a9c <vPortFree+0xb4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4013      	ands	r3, r2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10c      	bne.n	8006a30 <vPortFree+0x48>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	b672      	cpsid	i
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	b662      	cpsie	i
 8006a2a:	60fb      	str	r3, [r7, #12]
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00c      	beq.n	8006a52 <vPortFree+0x6a>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3c:	b672      	cpsid	i
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	b662      	cpsie	i
 8006a4c:	60bb      	str	r3, [r7, #8]
}
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	4b11      	ldr	r3, [pc, #68]	; (8006a9c <vPortFree+0xb4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d019      	beq.n	8006a94 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d115      	bne.n	8006a94 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <vPortFree+0xb4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	43db      	mvns	r3, r3
 8006a72:	401a      	ands	r2, r3
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a78:	f7fe feb8 	bl	80057ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <vPortFree+0xb8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4413      	add	r3, r2
 8006a86:	4a06      	ldr	r2, [pc, #24]	; (8006aa0 <vPortFree+0xb8>)
 8006a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a8a:	6938      	ldr	r0, [r7, #16]
 8006a8c:	f000 f86c 	bl	8006b68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a90:	f7fe feba 	bl	8005808 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a94:	bf00      	nop
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	20004880 	.word	0x20004880
 8006aa0:	20004878 	.word	0x20004878

08006aa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006aaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006aae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ab0:	4b27      	ldr	r3, [pc, #156]	; (8006b50 <prvHeapInit+0xac>)
 8006ab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00c      	beq.n	8006ad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3307      	adds	r3, #7
 8006ac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 0307 	bic.w	r3, r3, #7
 8006aca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	4a1f      	ldr	r2, [pc, #124]	; (8006b50 <prvHeapInit+0xac>)
 8006ad4:	4413      	add	r3, r2
 8006ad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006adc:	4a1d      	ldr	r2, [pc, #116]	; (8006b54 <prvHeapInit+0xb0>)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ae2:	4b1c      	ldr	r3, [pc, #112]	; (8006b54 <prvHeapInit+0xb0>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	4413      	add	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006af0:	2208      	movs	r2, #8
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	1a9b      	subs	r3, r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 0307 	bic.w	r3, r3, #7
 8006afe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4a15      	ldr	r2, [pc, #84]	; (8006b58 <prvHeapInit+0xb4>)
 8006b04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b06:	4b14      	ldr	r3, [pc, #80]	; (8006b58 <prvHeapInit+0xb4>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b0e:	4b12      	ldr	r3, [pc, #72]	; (8006b58 <prvHeapInit+0xb4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	1ad2      	subs	r2, r2, r3
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b24:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <prvHeapInit+0xb4>)
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	4a0a      	ldr	r2, [pc, #40]	; (8006b5c <prvHeapInit+0xb8>)
 8006b32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <prvHeapInit+0xbc>)
 8006b3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b3c:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <prvHeapInit+0xc0>)
 8006b3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b42:	601a      	str	r2, [r3, #0]
}
 8006b44:	bf00      	nop
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	20000c6c 	.word	0x20000c6c
 8006b54:	2000486c 	.word	0x2000486c
 8006b58:	20004874 	.word	0x20004874
 8006b5c:	2000487c 	.word	0x2000487c
 8006b60:	20004878 	.word	0x20004878
 8006b64:	20004880 	.word	0x20004880

08006b68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b70:	4b28      	ldr	r3, [pc, #160]	; (8006c14 <prvInsertBlockIntoFreeList+0xac>)
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	e002      	b.n	8006b7c <prvInsertBlockIntoFreeList+0x14>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d8f7      	bhi.n	8006b76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	4413      	add	r3, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d108      	bne.n	8006baa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	441a      	add	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	441a      	add	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d118      	bne.n	8006bf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4b15      	ldr	r3, [pc, #84]	; (8006c18 <prvInsertBlockIntoFreeList+0xb0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d00d      	beq.n	8006be6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	441a      	add	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	e008      	b.n	8006bf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006be6:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <prvInsertBlockIntoFreeList+0xb0>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	e003      	b.n	8006bf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d002      	beq.n	8006c06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c06:	bf00      	nop
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	2000486c 	.word	0x2000486c
 8006c18:	20004874 	.word	0x20004874

08006c1c <memset>:
 8006c1c:	4402      	add	r2, r0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d100      	bne.n	8006c26 <memset+0xa>
 8006c24:	4770      	bx	lr
 8006c26:	f803 1b01 	strb.w	r1, [r3], #1
 8006c2a:	e7f9      	b.n	8006c20 <memset+0x4>

08006c2c <_reclaim_reent>:
 8006c2c:	4b29      	ldr	r3, [pc, #164]	; (8006cd4 <_reclaim_reent+0xa8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4283      	cmp	r3, r0
 8006c32:	b570      	push	{r4, r5, r6, lr}
 8006c34:	4604      	mov	r4, r0
 8006c36:	d04b      	beq.n	8006cd0 <_reclaim_reent+0xa4>
 8006c38:	69c3      	ldr	r3, [r0, #28]
 8006c3a:	b143      	cbz	r3, 8006c4e <_reclaim_reent+0x22>
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d144      	bne.n	8006ccc <_reclaim_reent+0xa0>
 8006c42:	69e3      	ldr	r3, [r4, #28]
 8006c44:	6819      	ldr	r1, [r3, #0]
 8006c46:	b111      	cbz	r1, 8006c4e <_reclaim_reent+0x22>
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f000 f879 	bl	8006d40 <_free_r>
 8006c4e:	6961      	ldr	r1, [r4, #20]
 8006c50:	b111      	cbz	r1, 8006c58 <_reclaim_reent+0x2c>
 8006c52:	4620      	mov	r0, r4
 8006c54:	f000 f874 	bl	8006d40 <_free_r>
 8006c58:	69e1      	ldr	r1, [r4, #28]
 8006c5a:	b111      	cbz	r1, 8006c62 <_reclaim_reent+0x36>
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f000 f86f 	bl	8006d40 <_free_r>
 8006c62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006c64:	b111      	cbz	r1, 8006c6c <_reclaim_reent+0x40>
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 f86a 	bl	8006d40 <_free_r>
 8006c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c6e:	b111      	cbz	r1, 8006c76 <_reclaim_reent+0x4a>
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 f865 	bl	8006d40 <_free_r>
 8006c76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c78:	b111      	cbz	r1, 8006c80 <_reclaim_reent+0x54>
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 f860 	bl	8006d40 <_free_r>
 8006c80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c82:	b111      	cbz	r1, 8006c8a <_reclaim_reent+0x5e>
 8006c84:	4620      	mov	r0, r4
 8006c86:	f000 f85b 	bl	8006d40 <_free_r>
 8006c8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006c8c:	b111      	cbz	r1, 8006c94 <_reclaim_reent+0x68>
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f000 f856 	bl	8006d40 <_free_r>
 8006c94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c96:	b111      	cbz	r1, 8006c9e <_reclaim_reent+0x72>
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 f851 	bl	8006d40 <_free_r>
 8006c9e:	6a23      	ldr	r3, [r4, #32]
 8006ca0:	b1b3      	cbz	r3, 8006cd0 <_reclaim_reent+0xa4>
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ca8:	4718      	bx	r3
 8006caa:	5949      	ldr	r1, [r1, r5]
 8006cac:	b941      	cbnz	r1, 8006cc0 <_reclaim_reent+0x94>
 8006cae:	3504      	adds	r5, #4
 8006cb0:	69e3      	ldr	r3, [r4, #28]
 8006cb2:	2d80      	cmp	r5, #128	; 0x80
 8006cb4:	68d9      	ldr	r1, [r3, #12]
 8006cb6:	d1f8      	bne.n	8006caa <_reclaim_reent+0x7e>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 f841 	bl	8006d40 <_free_r>
 8006cbe:	e7c0      	b.n	8006c42 <_reclaim_reent+0x16>
 8006cc0:	680e      	ldr	r6, [r1, #0]
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 f83c 	bl	8006d40 <_free_r>
 8006cc8:	4631      	mov	r1, r6
 8006cca:	e7ef      	b.n	8006cac <_reclaim_reent+0x80>
 8006ccc:	2500      	movs	r5, #0
 8006cce:	e7ef      	b.n	8006cb0 <_reclaim_reent+0x84>
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
 8006cd2:	bf00      	nop
 8006cd4:	2000005c 	.word	0x2000005c

08006cd8 <__libc_init_array>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	4d0d      	ldr	r5, [pc, #52]	; (8006d10 <__libc_init_array+0x38>)
 8006cdc:	4c0d      	ldr	r4, [pc, #52]	; (8006d14 <__libc_init_array+0x3c>)
 8006cde:	1b64      	subs	r4, r4, r5
 8006ce0:	10a4      	asrs	r4, r4, #2
 8006ce2:	2600      	movs	r6, #0
 8006ce4:	42a6      	cmp	r6, r4
 8006ce6:	d109      	bne.n	8006cfc <__libc_init_array+0x24>
 8006ce8:	4d0b      	ldr	r5, [pc, #44]	; (8006d18 <__libc_init_array+0x40>)
 8006cea:	4c0c      	ldr	r4, [pc, #48]	; (8006d1c <__libc_init_array+0x44>)
 8006cec:	f000 f880 	bl	8006df0 <_init>
 8006cf0:	1b64      	subs	r4, r4, r5
 8006cf2:	10a4      	asrs	r4, r4, #2
 8006cf4:	2600      	movs	r6, #0
 8006cf6:	42a6      	cmp	r6, r4
 8006cf8:	d105      	bne.n	8006d06 <__libc_init_array+0x2e>
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d00:	4798      	blx	r3
 8006d02:	3601      	adds	r6, #1
 8006d04:	e7ee      	b.n	8006ce4 <__libc_init_array+0xc>
 8006d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d0a:	4798      	blx	r3
 8006d0c:	3601      	adds	r6, #1
 8006d0e:	e7f2      	b.n	8006cf6 <__libc_init_array+0x1e>
 8006d10:	08006e78 	.word	0x08006e78
 8006d14:	08006e78 	.word	0x08006e78
 8006d18:	08006e78 	.word	0x08006e78
 8006d1c:	08006e7c 	.word	0x08006e7c

08006d20 <__retarget_lock_acquire_recursive>:
 8006d20:	4770      	bx	lr

08006d22 <__retarget_lock_release_recursive>:
 8006d22:	4770      	bx	lr

08006d24 <memcpy>:
 8006d24:	440a      	add	r2, r1
 8006d26:	4291      	cmp	r1, r2
 8006d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d2c:	d100      	bne.n	8006d30 <memcpy+0xc>
 8006d2e:	4770      	bx	lr
 8006d30:	b510      	push	{r4, lr}
 8006d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d3a:	4291      	cmp	r1, r2
 8006d3c:	d1f9      	bne.n	8006d32 <memcpy+0xe>
 8006d3e:	bd10      	pop	{r4, pc}

08006d40 <_free_r>:
 8006d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d42:	2900      	cmp	r1, #0
 8006d44:	d044      	beq.n	8006dd0 <_free_r+0x90>
 8006d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4a:	9001      	str	r0, [sp, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d52:	bfb8      	it	lt
 8006d54:	18e4      	addlt	r4, r4, r3
 8006d56:	f000 f83f 	bl	8006dd8 <__malloc_lock>
 8006d5a:	4a1e      	ldr	r2, [pc, #120]	; (8006dd4 <_free_r+0x94>)
 8006d5c:	9801      	ldr	r0, [sp, #4]
 8006d5e:	6813      	ldr	r3, [r2, #0]
 8006d60:	b933      	cbnz	r3, 8006d70 <_free_r+0x30>
 8006d62:	6063      	str	r3, [r4, #4]
 8006d64:	6014      	str	r4, [r2, #0]
 8006d66:	b003      	add	sp, #12
 8006d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d6c:	f000 b83a 	b.w	8006de4 <__malloc_unlock>
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	d908      	bls.n	8006d86 <_free_r+0x46>
 8006d74:	6825      	ldr	r5, [r4, #0]
 8006d76:	1961      	adds	r1, r4, r5
 8006d78:	428b      	cmp	r3, r1
 8006d7a:	bf01      	itttt	eq
 8006d7c:	6819      	ldreq	r1, [r3, #0]
 8006d7e:	685b      	ldreq	r3, [r3, #4]
 8006d80:	1949      	addeq	r1, r1, r5
 8006d82:	6021      	streq	r1, [r4, #0]
 8006d84:	e7ed      	b.n	8006d62 <_free_r+0x22>
 8006d86:	461a      	mov	r2, r3
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	b10b      	cbz	r3, 8006d90 <_free_r+0x50>
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	d9fa      	bls.n	8006d86 <_free_r+0x46>
 8006d90:	6811      	ldr	r1, [r2, #0]
 8006d92:	1855      	adds	r5, r2, r1
 8006d94:	42a5      	cmp	r5, r4
 8006d96:	d10b      	bne.n	8006db0 <_free_r+0x70>
 8006d98:	6824      	ldr	r4, [r4, #0]
 8006d9a:	4421      	add	r1, r4
 8006d9c:	1854      	adds	r4, r2, r1
 8006d9e:	42a3      	cmp	r3, r4
 8006da0:	6011      	str	r1, [r2, #0]
 8006da2:	d1e0      	bne.n	8006d66 <_free_r+0x26>
 8006da4:	681c      	ldr	r4, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	6053      	str	r3, [r2, #4]
 8006daa:	440c      	add	r4, r1
 8006dac:	6014      	str	r4, [r2, #0]
 8006dae:	e7da      	b.n	8006d66 <_free_r+0x26>
 8006db0:	d902      	bls.n	8006db8 <_free_r+0x78>
 8006db2:	230c      	movs	r3, #12
 8006db4:	6003      	str	r3, [r0, #0]
 8006db6:	e7d6      	b.n	8006d66 <_free_r+0x26>
 8006db8:	6825      	ldr	r5, [r4, #0]
 8006dba:	1961      	adds	r1, r4, r5
 8006dbc:	428b      	cmp	r3, r1
 8006dbe:	bf04      	itt	eq
 8006dc0:	6819      	ldreq	r1, [r3, #0]
 8006dc2:	685b      	ldreq	r3, [r3, #4]
 8006dc4:	6063      	str	r3, [r4, #4]
 8006dc6:	bf04      	itt	eq
 8006dc8:	1949      	addeq	r1, r1, r5
 8006dca:	6021      	streq	r1, [r4, #0]
 8006dcc:	6054      	str	r4, [r2, #4]
 8006dce:	e7ca      	b.n	8006d66 <_free_r+0x26>
 8006dd0:	b003      	add	sp, #12
 8006dd2:	bd30      	pop	{r4, r5, pc}
 8006dd4:	200049c0 	.word	0x200049c0

08006dd8 <__malloc_lock>:
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <__malloc_lock+0x8>)
 8006dda:	f7ff bfa1 	b.w	8006d20 <__retarget_lock_acquire_recursive>
 8006dde:	bf00      	nop
 8006de0:	200049bc 	.word	0x200049bc

08006de4 <__malloc_unlock>:
 8006de4:	4801      	ldr	r0, [pc, #4]	; (8006dec <__malloc_unlock+0x8>)
 8006de6:	f7ff bf9c 	b.w	8006d22 <__retarget_lock_release_recursive>
 8006dea:	bf00      	nop
 8006dec:	200049bc 	.word	0x200049bc

08006df0 <_init>:
 8006df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df2:	bf00      	nop
 8006df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df6:	bc08      	pop	{r3}
 8006df8:	469e      	mov	lr, r3
 8006dfa:	4770      	bx	lr

08006dfc <_fini>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	bf00      	nop
 8006e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e02:	bc08      	pop	{r3}
 8006e04:	469e      	mov	lr, r3
 8006e06:	4770      	bx	lr

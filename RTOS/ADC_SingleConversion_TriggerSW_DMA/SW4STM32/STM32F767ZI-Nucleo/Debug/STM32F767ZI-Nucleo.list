
STM32F767ZI-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000734  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800092c  0800092c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800092c  0800092c  0001092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000930  08000930  00010930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08000934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000008  0800093c  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000034  0800093c  00020034  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004331  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000b50  00000000  00000000  000243aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00000d74  00000000  00000000  00024efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000001a0  00000000  00000000  00025c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000002fa  00000000  00000000  00025e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001f90d  00000000  00000000  0002610a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00002e73  00000000  00000000  00045a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000bb904  00000000  00000000  0004888a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000003cc  00000000  00000000  00104190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000e7  00000000  00000000  0010455c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000008 	.word	0x20000008
 8000214:	00000000 	.word	0x00000000
 8000218:	08000914 	.word	0x08000914

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000000c 	.word	0x2000000c
 8000234:	08000914 	.word	0x08000914

08000238 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000238:	490f      	ldr	r1, [pc, #60]	; (8000278 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800023a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800023c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <SystemInit+0x44>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	f042 0201 	orr.w	r2, r2, #1
 8000250:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000252:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800025a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800025e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000260:	4a07      	ldr	r2, [pc, #28]	; (8000280 <SystemInit+0x48>)
 8000262:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800026a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800026c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800026e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000272:	608b      	str	r3, [r1, #8]
#endif
}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	e000ed00 	.word	0xe000ed00
 800027c:	40023800 	.word	0x40023800
 8000280:	24003010 	.word	0x24003010

08000284 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000284:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8000288:	b082      	sub	sp, #8
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 800028a:	1c41      	adds	r1, r0, #1
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800028c:	691b      	ldr	r3, [r3, #16]
  {
    Delay++;
 800028e:	bf18      	it	ne
 8000290:	3001      	addne	r0, #1
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000292:	9301      	str	r3, [sp, #4]
  ((void)tmp);
 8000294:	9b01      	ldr	r3, [sp, #4]
  }

  while (Delay)
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000296:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  while (Delay)
 800029a:	b908      	cbnz	r0, 80002a0 <LL_mDelay+0x1c>
    {
      Delay--;
    }
  }
}
 800029c:	b002      	add	sp, #8
 800029e:	4770      	bx	lr
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80002a0:	691a      	ldr	r2, [r3, #16]
 80002a2:	03d2      	lsls	r2, r2, #15
      Delay--;
 80002a4:	bf48      	it	mi
 80002a6:	f100 30ff 	addmi.w	r0, r0, #4294967295
 80002aa:	e7f6      	b.n	800029a <LL_mDelay+0x16>

080002ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002b2:	e003      	b.n	80002bc <LoopCopyDataInit>

080002b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002ba:	3104      	adds	r1, #4

080002bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002bc:	480b      	ldr	r0, [pc, #44]	; (80002ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002c4:	d3f6      	bcc.n	80002b4 <CopyDataInit>
  ldr  r2, =_sbss
 80002c6:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002c8:	e002      	b.n	80002d0 <LoopFillZerobss>

080002ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002cc:	f842 3b04 	str.w	r3, [r2], #4

080002d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002d0:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002d4:	d3f9      	bcc.n	80002ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80002d6:	f7ff ffaf 	bl	8000238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002da:	f000 faf7 	bl	80008cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002de:	f000 f9f5 	bl	80006cc <main>
  bx  lr    
 80002e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80002e4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80002e8:	08000934 	.word	0x08000934
  ldr  r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002f0:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 80002f4:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 80002f8:	20000034 	.word	0x20000034

080002fc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <CAN1_RX0_IRQHandler>
	...

08000300 <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <LL_AHB1_GRP1_EnableClock+0x18>)
{
 8000302:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000306:	4302      	orrs	r2, r0
 8000308:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800030a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030c:	4003      	ands	r3, r0
 800030e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000310:	9b01      	ldr	r3, [sp, #4]
}
 8000312:	b002      	add	sp, #8
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40023800 	.word	0x40023800

0800031c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800031c:	6803      	ldr	r3, [r0, #0]
{
 800031e:	b530      	push	{r4, r5, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000320:	fa91 f4a1 	rbit	r4, r1
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000324:	fab4 f484 	clz	r4, r4
 8000328:	fa91 f1a1 	rbit	r1, r1
 800032c:	2503      	movs	r5, #3
 800032e:	fab1 f181 	clz	r1, r1
 8000332:	0064      	lsls	r4, r4, #1
 8000334:	0049      	lsls	r1, r1, #1
 8000336:	fa05 f404 	lsl.w	r4, r5, r4
 800033a:	408a      	lsls	r2, r1
 800033c:	ea23 0304 	bic.w	r3, r3, r4
 8000340:	4313      	orrs	r3, r2
 8000342:	6003      	str	r3, [r0, #0]
}
 8000344:	bd30      	pop	{r4, r5, pc}
	...

08000348 <Configure_DMA>:
  * @brief  This function configures DMA for transfer of data from ADC
  * @param  None
  * @retval None
  */
void Configure_DMA(void)
{
 8000348:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034a:	2210      	movs	r2, #16
 800034c:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <Configure_DMA+0x6c>)
  NVIC_SetPriority(DMA2_Stream0_IRQn, 1); /* DMA IRQ lower priority than ADC IRQ */
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
  
  /*## Configuration of DMA ##################################################*/
  /* Enable the peripheral clock of DMA */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800034e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000352:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000356:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	f7ff ffd0 	bl	8000300 <LL_AHB1_GRP1_EnableClock>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <Configure_DMA+0x70>)
 8000362:	691a      	ldr	r2, [r3, #16]
 8000364:	f022 52f0 	bic.w	r2, r2, #503316480	; 0x1e000000
 8000368:	611a      	str	r2, [r3, #16]
  MODIFY_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR,
 800036a:	691a      	ldr	r2, [r3, #16]
 800036c:	f422 325f 	bic.w	r2, r2, #228352	; 0x37c00
 8000370:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 8000374:	f442 320b 	orr.w	r2, r2, #142336	; 0x22c00
 8000378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800037c:	611a      	str	r2, [r3, #16]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 800037e:	4a0f      	ldr	r2, [pc, #60]	; (80003bc <Configure_DMA+0x74>)
 8000380:	619a      	str	r2, [r3, #24]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 8000382:	4a0f      	ldr	r2, [pc, #60]	; (80003c0 <Configure_DMA+0x78>)
 8000384:	61da      	str	r2, [r3, #28]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000386:	695a      	ldr	r2, [r3, #20]
 8000388:	0c12      	lsrs	r2, r2, #16
 800038a:	0412      	lsls	r2, r2, #16
 800038c:	f042 0204 	orr.w	r2, r2, #4
 8000390:	615a      	str	r2, [r3, #20]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000392:	691a      	ldr	r2, [r3, #16]
 8000394:	f042 0210 	orr.w	r2, r2, #16
 8000398:	611a      	str	r2, [r3, #16]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 800039a:	691a      	ldr	r2, [r3, #16]
 800039c:	f042 0208 	orr.w	r2, r2, #8
 80003a0:	611a      	str	r2, [r3, #16]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 80003a2:	691a      	ldr	r2, [r3, #16]
 80003a4:	f042 0204 	orr.w	r2, r2, #4
 80003a8:	611a      	str	r2, [r3, #16]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80003aa:	691a      	ldr	r2, [r3, #16]
 80003ac:	f042 0201 	orr.w	r2, r2, #1
 80003b0:	611a      	str	r2, [r3, #16]
                        LL_DMA_STREAM_0);

  /*## Activation of DMA #####################################################*/
  /* Enable the DMA transfer */
    LL_DMA_EnableStream(DMA2,LL_DMA_STREAM_0);
}
 80003b2:	bd08      	pop	{r3, pc}
 80003b4:	e000e100 	.word	0xe000e100
 80003b8:	40026400 	.word	0x40026400
 80003bc:	4001204c 	.word	0x4001204c
 80003c0:	20000024 	.word	0x20000024

080003c4 <Configure_ADC>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void Configure_ADC(void)
{
 80003c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*## Configuration of GPIO used by ADC channels ############################*/
  
  /* Note: On this STM32 device, ADC1 channel 4 is mapped on GPIO pin PA.04 */ 
  
  /* Enable GPIO Clock */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003c6:	2001      	movs	r0, #1
  
  /* Configure GPIO in analog mode to be used as ADC input */
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG);
 80003c8:	2110      	movs	r1, #16
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003ca:	f7ff ff99 	bl	8000300 <LL_AHB1_GRP1_EnableClock>
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG);
 80003ce:	2203      	movs	r2, #3
 80003d0:	483a      	ldr	r0, [pc, #232]	; (80004bc <Configure_ADC+0xf8>)
 80003d2:	f7ff ffa3 	bl	800031c <LL_GPIO_SetPinMode>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d6:	4b3a      	ldr	r3, [pc, #232]	; (80004c0 <Configure_ADC+0xfc>)
 80003d8:	2200      	movs	r2, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80003da:	493a      	ldr	r1, [pc, #232]	; (80004c4 <Configure_ADC+0x100>)
 80003dc:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003e4:	601a      	str	r2, [r3, #0]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80003e6:	4b38      	ldr	r3, [pc, #224]	; (80004c8 <Configure_ADC+0x104>)
 80003e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80003ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80003ee:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80003f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003f2:	4a36      	ldr	r2, [pc, #216]	; (80004cc <Configure_ADC+0x108>)
 80003f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003f8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80003fa:	9b01      	ldr	r3, [sp, #4]
 80003fc:	4b34      	ldr	r3, [pc, #208]	; (80004d0 <Configure_ADC+0x10c>)
 80003fe:	6898      	ldr	r0, [r3, #8]
 8000400:	6892      	ldr	r2, [r2, #8]
 8000402:	6889      	ldr	r1, [r1, #8]
  /*       However, in order to be compliant with other STM32 series          */
  /*       and to show the best practice usages, ADC state is checked.        */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE() == 0)
 8000404:	4302      	orrs	r2, r0
 8000406:	430a      	orrs	r2, r1
 8000408:	07d0      	lsls	r0, r2, #31
 800040a:	d404      	bmi.n	8000416 <Configure_ADC+0x52>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 800040c:	4931      	ldr	r1, [pc, #196]	; (80004d4 <Configure_ADC+0x110>)
 800040e:	684a      	ldr	r2, [r1, #4]
 8000410:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000414:	604a      	str	r2, [r1, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8000416:	689a      	ldr	r2, [r3, #8]
 8000418:	689a      	ldr	r2, [r3, #8]
  /*       below):                                                            */
  /*       On this STM32 serie, setting of these features are not             */
  /*       conditioned to ADC state.                                          */
  /*       However, ADC state is checked anyway with standard requirements    */
  /*       (refer to description of this function).                           */
  if (LL_ADC_IsEnabled(ADC1) == 0)
 800041a:	07d1      	lsls	r1, r2, #31
 800041c:	d421      	bmi.n	8000462 <Configure_ADC+0x9e>
  MODIFY_REG(ADCx->CR2, ADC_CR2_EXTSEL, (TriggerSource & ADC_CR2_EXTSEL));
 800041e:	689a      	ldr	r2, [r3, #8]
 8000420:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000424:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR2, ADC_CR2_CONT, Continuous);
 8000426:	689a      	ldr	r2, [r3, #8]
 8000428:	f022 0202 	bic.w	r2, r2, #2
 800042c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA | ADC_CR2_DDS, DMATransfer);
 800042e:	689a      	ldr	r2, [r3, #8]
 8000430:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000434:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8000436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000438:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800043c:	62da      	str	r2, [r3, #44]	; 0x2c
 800043e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000442:	fa92 f2a2 	rbit	r2, r2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800044a:	fab2 f282 	clz	r2, r2
 800044e:	4822      	ldr	r0, [pc, #136]	; (80004d8 <Configure_ADC+0x114>)
 8000450:	40d1      	lsrs	r1, r2
  MODIFY_REG(*preg,
 8000452:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8000456:	f022 021f 	bic.w	r2, r2, #31
 800045a:	f042 0204 	orr.w	r2, r2, #4
 800045e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8000462:	689a      	ldr	r2, [r3, #8]
 8000464:	689a      	ldr	r2, [r3, #8]
  /*       However, in order to be compliant with other STM32 series          */
  /*       and to show the best practice usages, ADC state is checked.        */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if (LL_ADC_IsEnabled(ADC1) == 0)
 8000466:	07d2      	lsls	r2, r2, #31
 8000468:	d422      	bmi.n	80004b0 <Configure_ADC+0xec>
 800046a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800046e:	fa91 f2a1 	rbit	r2, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000472:	fab2 f282 	clz	r2, r2
 8000476:	4e19      	ldr	r6, [pc, #100]	; (80004dc <Configure_ADC+0x118>)
 8000478:	40d1      	lsrs	r1, r2
 800047a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
  MODIFY_REG(*preg,
 800047e:	f856 0021 	ldr.w	r0, [r6, r1, lsl #2]
 8000482:	fa92 f4a2 	rbit	r4, r2
 8000486:	fab4 f484 	clz	r4, r4
 800048a:	fa92 f2a2 	rbit	r2, r2
 800048e:	f44f 0540 	mov.w	r5, #12582912	; 0xc00000
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	2707      	movs	r7, #7
 8000498:	fa25 f404 	lsr.w	r4, r5, r4
 800049c:	40d5      	lsrs	r5, r2
 800049e:	2203      	movs	r2, #3
 80004a0:	fa07 f404 	lsl.w	r4, r7, r4
 80004a4:	40aa      	lsls	r2, r5
 80004a6:	ea20 0004 	bic.w	r0, r0, r4
 80004aa:	4302      	orrs	r2, r0
 80004ac:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR1, LL_ADC_IT_OVR);
 80004b0:	685a      	ldr	r2, [r3, #4]
 80004b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80004b6:	605a      	str	r2, [r3, #4]
  
  /* Note: in this example, ADC group regular end of conversions              */
  /*       (number of ADC conversions defined by DMA buffer size)             */
  /*       are notified by DMA transfer interruptions).                       */
  
}
 80004b8:	b003      	add	sp, #12
 80004ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004bc:	40020000 	.word	0x40020000
 80004c0:	e000e100 	.word	0xe000e100
 80004c4:	40012200 	.word	0x40012200
 80004c8:	40023800 	.word	0x40023800
 80004cc:	40012100 	.word	0x40012100
 80004d0:	40012000 	.word	0x40012000
 80004d4:	40012300 	.word	0x40012300
 80004d8:	4001202c 	.word	0x4001202c
 80004dc:	4001200c 	.word	0x4001200c

080004e0 <Activate_ADC>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <Activate_ADC+0x14>)
 80004e2:	689a      	ldr	r2, [r3, #8]
  /*       However, in order to be compliant with other STM32 series          */
  /*       and to show the best practice usages, ADC state is checked.        */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if (LL_ADC_IsEnabled(ADC1) == 0)
 80004e4:	07d2      	lsls	r2, r2, #31
 80004e6:	d403      	bmi.n	80004f0 <Activate_ADC+0x10>
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80004e8:	689a      	ldr	r2, [r3, #8]
 80004ea:	f042 0201 	orr.w	r2, r2, #1
 80004ee:	609a      	str	r2, [r3, #8]
  /* Note: No operation on ADC group injected performed here.                 */
  /*       ADC group injected conversions to be performed after this function */
  /*       using function:                                                    */
  /*       "LL_ADC_INJ_StartConversion();"                                    */
  
}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40012000 	.word	0x40012000

080004f8 <LED_Init>:
  * @retval None
  */
void LED_Init(void)
{
  /* Enable the LED1 Clock */
  LED1_GPIO_CLK_ENABLE();
 80004f8:	2002      	movs	r0, #2
{
 80004fa:	b508      	push	{r3, lr}
  LED1_GPIO_CLK_ENABLE();
 80004fc:	f7ff ff00 	bl	8000300 <LL_AHB1_GRP1_EnableClock>

  /* Configure IO in output push-pull mode to drive external LED1 */
  LL_GPIO_SetPinMode(LED1_GPIO_PORT, LED1_PIN, LL_GPIO_MODE_OUTPUT);
 8000500:	2201      	movs	r2, #1
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <LED_Init+0x18>)
 8000504:	4611      	mov	r1, r2
  //LL_GPIO_SetPinOutputType(LED1_GPIO_PORT, LED1_PIN, LL_GPIO_OUTPUT_PUSHPULL);
  /* Reset value is LL_GPIO_SPEED_FREQ_LOW */
  //LL_GPIO_SetPinSpeed(LED1_GPIO_PORT, LED1_PIN, LL_GPIO_SPEED_FREQ_LOW);
  /* Reset value is LL_GPIO_PULL_NO */
  //LL_GPIO_SetPinPull(LED1_GPIO_PORT, LED1_PIN, LL_GPIO_PULL_NO);
}
 8000506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_GPIO_SetPinMode(LED1_GPIO_PORT, LED1_PIN, LL_GPIO_MODE_OUTPUT);
 800050a:	f7ff bf07 	b.w	800031c <LL_GPIO_SetPinMode>
 800050e:	bf00      	nop
 8000510:	40020400 	.word	0x40020400

08000514 <LED_Blinking>:
  *     @arg LED_BLINK_SLOW : Slow Blinking
  *     @arg LED_BLINK_ERROR : Error specific Blinking
  * @retval None
  */
void LED_Blinking(uint32_t Period)
{
 8000514:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000516:	4c08      	ldr	r4, [pc, #32]	; (8000538 <LED_Blinking+0x24>)
 8000518:	2301      	movs	r3, #1
 800051a:	4605      	mov	r5, r0
 800051c:	61a3      	str	r3, [r4, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 800051e:	6963      	ldr	r3, [r4, #20]
  
  /* Toggle IO in an infinite loop */
  while (1)
  {
    LL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);  
    LL_mDelay(Period);
 8000520:	4628      	mov	r0, r5
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000522:	041a      	lsls	r2, r3, #16
 8000524:	43db      	mvns	r3, r3
 8000526:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	4313      	orrs	r3, r2
 8000530:	61a3      	str	r3, [r4, #24]
 8000532:	f7ff fea7 	bl	8000284 <LL_mDelay>
  while (1)
 8000536:	e7f2      	b.n	800051e <LED_Blinking+0xa>
 8000538:	40020400 	.word	0x40020400

0800053c <UserButton_Init>:
  * @brief  Configures User push-button in EXTI Line Mode.
  * @param  None
  * @retval None
  */
void UserButton_Init(void)
{
 800053c:	b513      	push	{r0, r1, r4, lr}
  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 800053e:	2004      	movs	r0, #4
  
  /* Configure GPIO for BUTTON */
  LL_GPIO_SetPinMode(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_MODE_INPUT);
 8000540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000544:	f7ff fedc 	bl	8000300 <LL_AHB1_GRP1_EnableClock>
  LL_GPIO_SetPinMode(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_MODE_INPUT);
 8000548:	481f      	ldr	r0, [pc, #124]	; (80005c8 <UserButton_Init+0x8c>)
 800054a:	2200      	movs	r2, #0
 800054c:	f7ff fee6 	bl	800031c <LL_GPIO_SetPinMode>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000550:	68c2      	ldr	r2, [r0, #12]
 8000552:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000556:	fa91 f3a1 	rbit	r3, r1
 800055a:	fab3 f383 	clz	r3, r3
 800055e:	2403      	movs	r4, #3
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	fa04 f303 	lsl.w	r3, r4, r3
 8000566:	ea22 0303 	bic.w	r3, r2, r3
 800056a:	fa91 f1a1 	rbit	r1, r1
 800056e:	60c3      	str	r3, [r0, #12]
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000570:	f5a0 4050 	sub.w	r0, r0, #53248	; 0xd000
  SET_BIT(RCC->APB2ENR, Periphs);
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <UserButton_Init+0x90>)
 8000576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000578:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800057c:	645a      	str	r2, [r3, #68]	; 0x44
 800057e:	22f0      	movs	r2, #240	; 0xf0
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000586:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000588:	9b01      	ldr	r3, [sp, #4]
 800058a:	6943      	ldr	r3, [r0, #20]
 800058c:	fa92 f2a2 	rbit	r2, r2
 8000590:	2102      	movs	r1, #2
 8000592:	fab2 f282 	clz	r2, r2
 8000596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800059a:	fa01 f202 	lsl.w	r2, r1, r2
 800059e:	4313      	orrs	r3, r2
 80005a0:	6143      	str	r3, [r0, #20]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR, ExtiLine);
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <UserButton_Init+0x94>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80005aa:	601a      	str	r2, [r3, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR, ExtiLine);
 80005ac:	68da      	ldr	r2, [r3, #12]
 80005ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <UserButton_Init+0x98>)
 80005ba:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	2230      	movs	r2, #48	; 0x30
 80005be:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
    
    /* Configure NVIC for USER_BUTTON_EXTI_IRQn */
    NVIC_EnableIRQ(USER_BUTTON_EXTI_IRQn); 
    NVIC_SetPriority(USER_BUTTON_EXTI_IRQn,0x03);  
  }
}
 80005c2:	b002      	add	sp, #8
 80005c4:	bd10      	pop	{r4, pc}
 80005c6:	bf00      	nop
 80005c8:	40020800 	.word	0x40020800
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40013c00 	.word	0x40013c00
 80005d4:	e000e100 	.word	0xe000e100

080005d8 <SystemClock_Config>:
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80005d8:	4b33      	ldr	r3, [pc, #204]	; (80006a8 <SystemClock_Config+0xd0>)
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80005da:	b082      	sub	sp, #8
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005e2:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005ea:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80005ec:	681a      	ldr	r2, [r3, #0]
  /* Enable HSE clock */
  LL_RCC_HSE_EnableBypass();
  LL_RCC_HSE_Enable();
  while(LL_RCC_HSE_IsReady() != 1)
 80005ee:	0392      	lsls	r2, r2, #14
 80005f0:	d5fc      	bpl.n	80005ec <SystemClock_Config+0x14>
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005f2:	492e      	ldr	r1, [pc, #184]	; (80006ac <SystemClock_Config+0xd4>)
 80005f4:	680a      	ldr	r2, [r1, #0]
 80005f6:	f022 020f 	bic.w	r2, r2, #15
 80005fa:	f042 0207 	orr.w	r2, r2, #7
 80005fe:	600a      	str	r2, [r1, #0]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000602:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000606:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000610:	9b01      	ldr	r3, [sp, #4]
  * @rmtoll CR1    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_ODEN);
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <SystemClock_Config+0xd8>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800061a:	601a      	str	r2, [r3, #0]
  * @rmtoll CSR1   ODRDY       LL_PWR_IsActiveFlag_OD
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_OD(void)
{
  return (READ_BIT(PWR->CSR1, PWR_CSR1_ODRDY) == (PWR_CSR1_ODRDY));
 800061c:	685a      	ldr	r2, [r3, #4]
  /* Enable PWR clock */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);

  /* Activation OverDrive Mode */
  LL_PWR_EnableOverDriveMode();
  while(LL_PWR_IsActiveFlag_OD() != 1)
 800061e:	03d0      	lsls	r0, r2, #15
 8000620:	d5fc      	bpl.n	800061c <SystemClock_Config+0x44>
  SET_BIT(PWR->CR1, PWR_CR1_ODSWEN);
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000628:	601a      	str	r2, [r3, #0]
  * @rmtoll CSR1   ODSWRDY       LL_PWR_IsActiveFlag_ODSW
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_ODSW(void)
{
  return (READ_BIT(PWR->CSR1, PWR_CSR1_ODSWRDY) == (PWR_CSR1_ODSWRDY));
 800062a:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <SystemClock_Config+0xd8>)
 800062c:	6853      	ldr	r3, [r2, #4]
  {
  };

  /* Activation OverDrive Switching */
  LL_PWR_EnableOverDriveSwitching();
  while(LL_PWR_IsActiveFlag_ODSW() != 1)
 800062e:	0399      	lsls	r1, r3, #14
 8000630:	d5fc      	bpl.n	800062c <SystemClock_Config+0x54>
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <SystemClock_Config+0xd0>)
 8000634:	491f      	ldr	r1, [pc, #124]	; (80006b4 <SystemClock_Config+0xdc>)
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	4011      	ands	r1, r2
 800063a:	4a1f      	ldr	r2, [pc, #124]	; (80006b8 <SystemClock_Config+0xe0>)
 800063c:	430a      	orrs	r2, r1
 800063e:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000646:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000648:	681a      	ldr	r2, [r3, #0]
  };

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 432, LL_RCC_PLLP_DIV_2);
  LL_RCC_PLL_Enable();
  while(LL_RCC_PLL_IsReady() != 1)
 800064a:	0192      	lsls	r2, r2, #6
 800064c:	d5fc      	bpl.n	8000648 <SystemClock_Config+0x70>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800064e:	689a      	ldr	r2, [r3, #8]
 8000650:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000654:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	f022 0203 	bic.w	r2, r2, #3
 800065c:	f042 0202 	orr.w	r2, r2, #2
 8000660:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <SystemClock_Config+0xd0>)
 8000664:	689a      	ldr	r2, [r3, #8]
 8000666:	f002 020c 	and.w	r2, r2, #12
  };

  /* Sysclk activation on the main PLL */
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800066a:	2a08      	cmp	r2, #8
 800066c:	d1fa      	bne.n	8000664 <SystemClock_Config+0x8c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800066e:	689a      	ldr	r2, [r3, #8]
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	21f0      	movs	r1, #240	; 0xf0
 8000672:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000676:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800067a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800067c:	689a      	ldr	r2, [r3, #8]
 800067e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000686:	609a      	str	r2, [r3, #8]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000688:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <SystemClock_Config+0xe4>)
 800068e:	615a      	str	r2, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <SystemClock_Config+0xe8>)
 8000692:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	2207      	movs	r2, #7
 800069c:	611a      	str	r2, [r3, #16]

  /* Set systick to 1ms */
  SysTick_Config(216000000 / 1000);

  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  SystemCoreClock = 216000000;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <SystemClock_Config+0xec>)
 80006a0:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <SystemClock_Config+0xf0>)
 80006a2:	601a      	str	r2, [r3, #0]
}
 80006a4:	b002      	add	sp, #8
 80006a6:	4770      	bx	lr
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40023c00 	.word	0x40023c00
 80006b0:	40007000 	.word	0x40007000
 80006b4:	ffbc8000 	.word	0xffbc8000
 80006b8:	00406c08 	.word	0x00406c08
 80006bc:	00034bbf 	.word	0x00034bbf
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	20000000 	.word	0x20000000
 80006c8:	0cdfe600 	.word	0x0cdfe600

080006cc <main>:
{
 80006cc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("dsb 0xF":::"memory");
 80006ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006d2:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006d6:	4a24      	ldr	r2, [pc, #144]	; (8000768 <main+0x9c>)
 80006d8:	2100      	movs	r1, #0
 80006da:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006e2:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006e6:	6953      	ldr	r3, [r2, #20]
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006f2:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80006f6:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006fa:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80006fe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000702:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000706:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800070a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800070e:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000710:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000714:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000716:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 800071a:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800071c:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000720:	d2f9      	bcs.n	8000716 <main+0x4a>
    } while(sets-- != 0U);
 8000722:	3b20      	subs	r3, #32
 8000724:	f113 0f20 	cmn.w	r3, #32
 8000728:	d1f2      	bne.n	8000710 <main+0x44>
 800072a:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800072e:	6953      	ldr	r3, [r2, #20]
 8000730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800073a:	f3bf 8f6f 	isb	sy
  SystemClock_Config();
 800073e:	f7ff ff4b 	bl	80005d8 <SystemClock_Config>
    aADCxConvertedData[tmp_index_adc_converted_data] = VAR_CONVERTED_DATA_INIT_VALUE;
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <main+0xa0>)
 8000744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000748:	801a      	strh	r2, [r3, #0]
 800074a:	805a      	strh	r2, [r3, #2]
 800074c:	809a      	strh	r2, [r3, #4]
 800074e:	80da      	strh	r2, [r3, #6]
  LED_Init();
 8000750:	f7ff fed2 	bl	80004f8 <LED_Init>
  UserButton_Init();
 8000754:	f7ff fef2 	bl	800053c <UserButton_Init>
  Configure_DMA();
 8000758:	f7ff fdf6 	bl	8000348 <Configure_DMA>
  Configure_ADC();
 800075c:	f7ff fe32 	bl	80003c4 <Configure_ADC>
  Activate_ADC();
 8000760:	f7ff febe 	bl	80004e0 <Activate_ADC>
  while (1)
 8000764:	e7fe      	b.n	8000764 <main+0x98>
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00
 800076c:	20000024 	.word	0x20000024

08000770 <UserButton_Callback>:
  * @brief  Function to manage IRQ Handler
  * @param  None
  * @retval None
  */
void UserButton_Callback(void)
{
 8000770:	b508      	push	{r3, lr}
  
  /* Update status variable of DMA transfer before performing the first       */
  /* ADC conversion start.                                                    */
  if (ubDmaTransferStatus == 2)
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <UserButton_Callback+0x28>)
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	2a02      	cmp	r2, #2
 8000778:	d101      	bne.n	800077e <UserButton_Callback+0xe>
  {
    /* Update status variable of DMA transfer */
    ubDmaTransferStatus = 0;
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <UserButton_Callback+0x2c>)
 8000780:	689a      	ldr	r2, [r3, #8]
  /*       However, in order to be compliant with other STM32 series          */
  /*       and to show the best practice usages, ADC state is checked.        */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if (LL_ADC_IsEnabled(ADC1) == 1)
 8000782:	07d2      	lsls	r2, r2, #31
 8000784:	d504      	bpl.n	8000790 <UserButton_Callback+0x20>
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8000786:	689a      	ldr	r2, [r3, #8]
 8000788:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800078c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Error: ADC conversion start could not be performed */
    LED_Blinking(LED_BLINK_ERROR);
  }
}
 800078e:	bd08      	pop	{r3, pc}
    LED_Blinking(LED_BLINK_ERROR);
 8000790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000794:	f7ff febe 	bl	8000514 <LED_Blinking>
 8000798:	20000004 	.word	0x20000004
 800079c:	40012000 	.word	0x40012000

080007a0 <AdcDmaTransferComplete_Callback>:
  /* Computation of ADC conversions raw data to physical values               */
  /* using LL ADC driver helper macro.                                        */
  /* Management of the 2nd half of the buffer */
  for (tmp_index = (ADC_CONVERTED_DATA_BUFFER_SIZE/2); tmp_index < ADC_CONVERTED_DATA_BUFFER_SIZE; tmp_index++)
  {
    aADCxConvertedData_Voltage_mVolt[tmp_index] = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, aADCxConvertedData[tmp_index], LL_ADC_RESOLUTION_12B);
 80007a0:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <AdcDmaTransferComplete_Callback+0x34>)
 80007a2:	f640 40e4 	movw	r0, #3300	; 0xce4
 80007a6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80007aa:	8893      	ldrh	r3, [r2, #4]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	4343      	muls	r3, r0
 80007b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	8193      	strh	r3, [r2, #12]
 80007b8:	88d3      	ldrh	r3, [r2, #6]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4343      	muls	r3, r0
 80007be:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	81d3      	strh	r3, [r2, #14]
  }
  
  /* Update status variable of DMA transfer */
  ubDmaTransferStatus = 1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	4a03      	ldr	r2, [pc, #12]	; (80007d8 <AdcDmaTransferComplete_Callback+0x38>)
 80007ca:	7013      	strb	r3, [r2, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80007cc:	4a03      	ldr	r2, [pc, #12]	; (80007dc <AdcDmaTransferComplete_Callback+0x3c>)
 80007ce:	6193      	str	r3, [r2, #24]
  /* Set LED depending on DMA transfer status */
  /* - Turn-on if DMA transfer is completed */
  /* - Turn-off if DMA transfer is not completed */
  LED_On();

}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000024 	.word	0x20000024
 80007d8:	20000004 	.word	0x20000004
 80007dc:	40020400 	.word	0x40020400

080007e0 <AdcDmaTransferHalf_Callback>:
  /* Computation of ADC conversions raw data to physical values               */
  /* using LL ADC driver helper macro.                                        */
  /* Management of the 1st half of the buffer */
  for (tmp_index = 0; tmp_index < (ADC_CONVERTED_DATA_BUFFER_SIZE/2); tmp_index++)
  {
    aADCxConvertedData_Voltage_mVolt[tmp_index] = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, aADCxConvertedData[tmp_index], LL_ADC_RESOLUTION_12B);
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <AdcDmaTransferHalf_Callback+0x38>)
 80007e2:	f640 40e4 	movw	r0, #3300	; 0xce4
 80007e6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80007ea:	8813      	ldrh	r3, [r2, #0]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	4343      	muls	r3, r0
 80007f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	8113      	strh	r3, [r2, #8]
 80007f8:	8853      	ldrh	r3, [r2, #2]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	4343      	muls	r3, r0
 80007fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000802:	b29b      	uxth	r3, r3
 8000804:	8153      	strh	r3, [r2, #10]
  }
  
  /* Update status variable of DMA transfer */
  ubDmaTransferStatus = 0;
 8000806:	2200      	movs	r2, #0
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <AdcDmaTransferHalf_Callback+0x3c>)
 800080a:	701a      	strb	r2, [r3, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800080c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <AdcDmaTransferHalf_Callback+0x40>)
 8000812:	619a      	str	r2, [r3, #24]
  /* Set LED depending on DMA transfer status */
  /* - Turn-on if DMA transfer is completed */
  /* - Turn-off if DMA transfer is not completed */
  LED_Off();

}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000024 	.word	0x20000024
 800081c:	20000004 	.word	0x20000004
 8000820:	40020400 	.word	0x40020400

08000824 <AdcDmaTransferError_Callback>:
  * @retval None
  */
void AdcDmaTransferError_Callback()
{
  /* Error detected during DMA transfer */
  LED_Blinking(LED_BLINK_ERROR);
 8000824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
{
 8000828:	b508      	push	{r3, lr}
  LED_Blinking(LED_BLINK_ERROR);
 800082a:	f7ff fe73 	bl	8000514 <LED_Blinking>
	...

08000830 <AdcGrpRegularOverrunError_Callback>:
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_OVR(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_OVR);
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <AdcGrpRegularOverrunError_Callback+0x14>)
  
  /* Disable ADC group regular overrun interruption */
  LL_ADC_DisableIT_OVR(ADC1);
  
  /* Error from ADC */
  LED_Blinking(LED_BLINK_ERROR);
 8000832:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
{
 8000836:	b508      	push	{r3, lr}
 8000838:	6853      	ldr	r3, [r2, #4]
 800083a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800083e:	6053      	str	r3, [r2, #4]
  LED_Blinking(LED_BLINK_ERROR);
 8000840:	f7ff fe68 	bl	8000514 <LED_Blinking>
 8000844:	40012000 	.word	0x40012000

08000848 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000848:	4770      	bx	lr

0800084a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800084a:	e7fe      	b.n	800084a <HardFault_Handler>

0800084c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler>

0800084e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler>

08000850 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler>

08000852 <SVC_Handler>:
 8000852:	4770      	bx	lr

08000854 <DebugMon_Handler>:
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:
 8000856:	4770      	bx	lr

08000858 <SysTick_Handler>:
 8000858:	4770      	bx	lr
	...

0800085c <EXTI15_10_IRQHandler>:
  * @brief  This function handles external line 15_10 interrupt request.
  * @param  None
  * @retval None
  */
void USER_BUTTON_IRQHANDLER(void)
{
 800085c:	b510      	push	{r4, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800085e:	4c05      	ldr	r4, [pc, #20]	; (8000874 <EXTI15_10_IRQHandler+0x18>)
 8000860:	6963      	ldr	r3, [r4, #20]
  /* Manage Flags */
  if(LL_EXTI_IsActiveFlag_0_31(USER_BUTTON_EXTI_LINE) != RESET)
 8000862:	049b      	lsls	r3, r3, #18
 8000864:	d504      	bpl.n	8000870 <EXTI15_10_IRQHandler+0x14>
  {
    /* Call interruption treatment function */
    UserButton_Callback();
 8000866:	f7ff ff83 	bl	8000770 <UserButton_Callback>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800086a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086e:	6163      	str	r3, [r4, #20]
    /* Clear EXTI line flag */
    /* Note: Clear flag after callback function to minimize user button       */
    /*       switch debounce parasitics.                                      */
    LL_EXTI_ClearFlag_0_31(USER_BUTTON_EXTI_LINE);
  }
}
 8000870:	bd10      	pop	{r4, pc}
 8000872:	bf00      	nop
 8000874:	40013c00 	.word	0x40013c00

08000878 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR));
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <ADC_IRQHandler+0x14>)
 800087a:	681a      	ldr	r2, [r3, #0]
  * @retval None
  */
void ADC_IRQHandler(void)
{
  /* Check whether ADC group regular overrun caused the ADC interruption */
  if(LL_ADC_IsActiveFlag_OVR(ADC1) != 0)
 800087c:	0692      	lsls	r2, r2, #26
 800087e:	d504      	bpl.n	800088a <ADC_IRQHandler+0x12>
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_OVR);
 8000880:	f06f 0220 	mvn.w	r2, #32
 8000884:	601a      	str	r2, [r3, #0]
  {
    /* Clear flag ADC group regular overrun */
    LL_ADC_ClearFlag_OVR(ADC1);
    
    /* Call interruption treatment function */
    AdcGrpRegularOverrunError_Callback();
 8000886:	f7ff bfd3 	b.w	8000830 <AdcGrpRegularOverrunError_Callback>
  }
}
 800088a:	4770      	bx	lr
 800088c:	40012000 	.word	0x40012000

08000890 <DMA2_Stream0_IRQHandler>:
  * @brief  This function handles DMA2 interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000890:	b510      	push	{r4, lr}
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF0)==(DMA_LISR_TCIF0));
 8000892:	4c0d      	ldr	r4, [pc, #52]	; (80008c8 <DMA2_Stream0_IRQHandler+0x38>)
 8000894:	6823      	ldr	r3, [r4, #0]
  /* Check whether DMA transfer complete caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TC0(DMA2) == 1)
 8000896:	0698      	lsls	r0, r3, #26
 8000898:	d503      	bpl.n	80008a2 <DMA2_Stream0_IRQHandler+0x12>
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF0);
 800089a:	2320      	movs	r3, #32
 800089c:	60a3      	str	r3, [r4, #8]
  {
    /* Clear flag DMA transfer complete */
    LL_DMA_ClearFlag_TC0(DMA2);
    
    /* Call interruption treatment function */
    AdcDmaTransferComplete_Callback();
 800089e:	f7ff ff7f 	bl	80007a0 <AdcDmaTransferComplete_Callback>
  return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF0)==(DMA_LISR_HTIF0));
 80008a2:	6823      	ldr	r3, [r4, #0]
  }
  
  /* Check whether DMA half transfer caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_HT0(DMA2) == 1)
 80008a4:	06d9      	lsls	r1, r3, #27
 80008a6:	d503      	bpl.n	80008b0 <DMA2_Stream0_IRQHandler+0x20>
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF0);
 80008a8:	2310      	movs	r3, #16
 80008aa:	60a3      	str	r3, [r4, #8]
  {
    /* Clear flag DMA half transfer */
    LL_DMA_ClearFlag_HT0(DMA2);
    
    /* Call interruption treatment function */
    AdcDmaTransferHalf_Callback();
 80008ac:	f7ff ff98 	bl	80007e0 <AdcDmaTransferHalf_Callback>
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF0)==(DMA_LISR_TEIF0));
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <DMA2_Stream0_IRQHandler+0x38>)
 80008b2:	681a      	ldr	r2, [r3, #0]
  /* Clear flag DMA global interrupt */
  /* (global interrupt flag: half transfer and transfer complete flags) */
  // LL_DMA_ClearFlag_GI0(DMA2);
  
  /* Check whether DMA transfer error caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TE0(DMA2) == 1)
 80008b4:	0712      	lsls	r2, r2, #28
 80008b6:	d505      	bpl.n	80008c4 <DMA2_Stream0_IRQHandler+0x34>
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF0);
 80008b8:	2208      	movs	r2, #8
    LL_DMA_ClearFlag_TE0(DMA2);
    
    /* Call interruption treatment function */
    AdcDmaTransferError_Callback();
  }
}
 80008ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008be:	609a      	str	r2, [r3, #8]
    AdcDmaTransferError_Callback();
 80008c0:	f7ff bfb0 	b.w	8000824 <AdcDmaTransferError_Callback>
}
 80008c4:	bd10      	pop	{r4, pc}
 80008c6:	bf00      	nop
 80008c8:	40026400 	.word	0x40026400

080008cc <__libc_init_array>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	4d0d      	ldr	r5, [pc, #52]	; (8000904 <__libc_init_array+0x38>)
 80008d0:	4c0d      	ldr	r4, [pc, #52]	; (8000908 <__libc_init_array+0x3c>)
 80008d2:	1b64      	subs	r4, r4, r5
 80008d4:	10a4      	asrs	r4, r4, #2
 80008d6:	2600      	movs	r6, #0
 80008d8:	42a6      	cmp	r6, r4
 80008da:	d109      	bne.n	80008f0 <__libc_init_array+0x24>
 80008dc:	4d0b      	ldr	r5, [pc, #44]	; (800090c <__libc_init_array+0x40>)
 80008de:	4c0c      	ldr	r4, [pc, #48]	; (8000910 <__libc_init_array+0x44>)
 80008e0:	f000 f818 	bl	8000914 <_init>
 80008e4:	1b64      	subs	r4, r4, r5
 80008e6:	10a4      	asrs	r4, r4, #2
 80008e8:	2600      	movs	r6, #0
 80008ea:	42a6      	cmp	r6, r4
 80008ec:	d105      	bne.n	80008fa <__libc_init_array+0x2e>
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f4:	4798      	blx	r3
 80008f6:	3601      	adds	r6, #1
 80008f8:	e7ee      	b.n	80008d8 <__libc_init_array+0xc>
 80008fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fe:	4798      	blx	r3
 8000900:	3601      	adds	r6, #1
 8000902:	e7f2      	b.n	80008ea <__libc_init_array+0x1e>
 8000904:	0800092c 	.word	0x0800092c
 8000908:	0800092c 	.word	0x0800092c
 800090c:	0800092c 	.word	0x0800092c
 8000910:	08000930 	.word	0x08000930

08000914 <_init>:
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000916:	bf00      	nop
 8000918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091a:	bc08      	pop	{r3}
 800091c:	469e      	mov	lr, r3
 800091e:	4770      	bx	lr

08000920 <_fini>:
 8000920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000922:	bf00      	nop
 8000924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000926:	bc08      	pop	{r3}
 8000928:	469e      	mov	lr, r3
 800092a:	4770      	bx	lr

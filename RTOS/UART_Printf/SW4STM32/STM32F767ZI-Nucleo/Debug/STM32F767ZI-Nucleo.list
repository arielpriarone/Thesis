
STM32F767ZI-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a48  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002c48  08002c48  00012c48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  08002d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001fc  20000078  08002da8  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000274  08002da8  00020274  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000ca28  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001efe  00000000  00000000  0002cb11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00003fa3  00000000  00000000  0002ea0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  000329b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b5  00000000  00000000  000330f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027930  00000000  00000000  000337a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e048  00000000  00000000  0005b0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2d3d  00000000  00000000  0006911d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00001a08  00000000  00000000  0015be5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000b9  00000000  00000000  0015d864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08002c30 	.word	0x08002c30

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08002c30 	.word	0x08002c30

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <BSP_LED_Init>:
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <BSP_LED_Init+0x54>)
 80005de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e0:	f042 0202 	orr.w	r2, r2, #2
{
 80005e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 80005e6:	631a      	str	r2, [r3, #48]	; 0x30
{
 80005e8:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE(Led);
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	4604      	mov	r4, r0
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	b9c8      	cbnz	r0, 8000628 <BSP_LED_Init+0x4c>
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <BSP_LED_Init+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2700      	movs	r7, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005fc:	4d0e      	ldr	r5, [pc, #56]	; (8000638 <BSP_LED_Init+0x5c>)
 80005fe:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000600:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000606:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800060a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000614:	f000 f934 	bl	8000880 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000618:	463a      	mov	r2, r7
 800061a:	4631      	mov	r1, r6
 800061c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000620:	f000 fa10 	bl	8000a44 <HAL_GPIO_WritePin>
}
 8000624:	b009      	add	sp, #36	; 0x24
 8000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000628:	9302      	str	r3, [sp, #8]
 800062a:	9b02      	ldr	r3, [sp, #8]
 800062c:	e7e4      	b.n	80005f8 <BSP_LED_Init+0x1c>
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	08002c48 	.word	0x08002c48
 8000638:	20000000 	.word	0x20000000

0800063c <BSP_LED_On>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <BSP_LED_On+0x14>)
 800063e:	2201      	movs	r2, #1
 8000640:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <BSP_LED_On+0x18>)
 8000646:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800064a:	f000 b9fb 	b.w	8000a44 <HAL_GPIO_WritePin>
 800064e:	bf00      	nop
 8000650:	08002c48 	.word	0x08002c48
 8000654:	20000000 	.word	0x20000000

08000658 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000658:	490f      	ldr	r1, [pc, #60]	; (8000698 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800065a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800065c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <SystemInit+0x44>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	f042 0201 	orr.w	r2, r2, #1
 8000670:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000672:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800067a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800067e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <SystemInit+0x48>)
 8000682:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800068a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800068c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800068e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000692:	608b      	str	r3, [r1, #8]
#endif
}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00
 800069c:	40023800 	.word	0x40023800
 80006a0:	24003010 	.word	0x24003010

080006a4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80006a4:	4770      	bx	lr
	...

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006aa:	4e0e      	ldr	r6, [pc, #56]	; (80006e4 <HAL_InitTick+0x3c>)
 80006ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 80006b0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b2:	7832      	ldrb	r2, [r6, #0]
 80006b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80006b8:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_InitTick+0x40>)
 80006ba:	6810      	ldr	r0, [r2, #0]
 80006bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80006c0:	f000 f880 	bl	80007c4 <HAL_SYSTICK_Config>
 80006c4:	4604      	mov	r4, r0
 80006c6:	b950      	cbnz	r0, 80006de <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c8:	2d0f      	cmp	r5, #15
 80006ca:	d808      	bhi.n	80006de <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006cc:	4602      	mov	r2, r0
 80006ce:	4629      	mov	r1, r5
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295
 80006d4:	f000 f844 	bl	8000760 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d8:	4620      	mov	r0, r4
 80006da:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80006de:	2001      	movs	r0, #1
 80006e0:	e7fc      	b.n	80006dc <HAL_InitTick+0x34>
 80006e2:	bf00      	nop
 80006e4:	20000014 	.word	0x20000014
 80006e8:	20000010 	.word	0x20000010

080006ec <HAL_Init>:
{
 80006ec:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f0:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006f8:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000700:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000702:	f000 f81b 	bl	800073c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	200f      	movs	r0, #15
 8000708:	f7ff ffce 	bl	80006a8 <HAL_InitTick>
  HAL_MspInit();
 800070c:	f7ff ffca 	bl	80006a4 <HAL_MspInit>
}
 8000710:	2000      	movs	r0, #0
 8000712:	bd08      	pop	{r3, pc}
 8000714:	40023c00 	.word	0x40023c00

08000718 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <HAL_IncTick+0x10>)
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <HAL_IncTick+0x14>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	440b      	add	r3, r1
 8000722:	6013      	str	r3, [r2, #0]
}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000094 	.word	0x20000094
 800072c:	20000014 	.word	0x20000014

08000730 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000730:	4b01      	ldr	r3, [pc, #4]	; (8000738 <HAL_GetTick+0x8>)
 8000732:	6818      	ldr	r0, [r3, #0]
}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000094 	.word	0x20000094

0800073c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800073c:	4907      	ldr	r1, [pc, #28]	; (800075c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800073e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000740:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000742:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000746:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800074a:	0412      	lsls	r2, r2, #16
 800074c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800074e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000758:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	68dc      	ldr	r4, [r3, #12]
 8000766:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	2b04      	cmp	r3, #4
 8000772:	bf28      	it	cs
 8000774:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000776:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077c:	bf8c      	ite	hi
 800077e:	3c03      	subhi	r4, #3
 8000780:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000782:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8000786:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000788:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000790:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	fa03 f304 	lsl.w	r3, r3, r4
 8000798:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80007a0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80007a2:	db06      	blt.n	80007b2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80007a8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80007ac:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80007b0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	f000 000f 	and.w	r0, r0, #15
 80007b6:	4a02      	ldr	r2, [pc, #8]	; (80007c0 <HAL_NVIC_SetPriority+0x60>)
 80007b8:	5413      	strb	r3, [r2, r0]
 80007ba:	e7f9      	b.n	80007b0 <HAL_NVIC_SetPriority+0x50>
 80007bc:	e000ed00 	.word	0xe000ed00
 80007c0:	e000ed14 	.word	0xe000ed14

080007c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c4:	3801      	subs	r0, #1
 80007c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007ca:	d20b      	bcs.n	80007e4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d0:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <HAL_SYSTICK_Config+0x24>)
 80007d2:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d4:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d6:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007dc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007de:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007e4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007e6:	4770      	bx	lr
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80007ec:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <HAL_MPU_Disable+0x18>)
 80007f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80007fa:	2200      	movs	r2, #0
 80007fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MPU_Enable+0x1c>)
 800080a:	f040 0001 	orr.w	r0, r0, #1
 800080e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000814:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800081a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800081e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000828:	7843      	ldrb	r3, [r0, #1]
 800082a:	4a14      	ldr	r2, [pc, #80]	; (800087c <HAL_MPU_ConfigRegion+0x54>)
{
 800082c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800082e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8000832:	7801      	ldrb	r1, [r0, #0]
 8000834:	b1e9      	cbz	r1, 8000872 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000836:	6843      	ldr	r3, [r0, #4]
 8000838:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800083c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800083e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000840:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000842:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000846:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000848:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800084a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800084e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000850:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000854:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000856:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800085a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800085c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000860:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000862:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000866:	7a01      	ldrb	r1, [r0, #8]
 8000868:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800086c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000870:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8000872:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8000876:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 800087a:	e7f9      	b.n	8000870 <HAL_MPU_ConfigRegion+0x48>
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000884:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8000a40 <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800088a:	4a6b      	ldr	r2, [pc, #428]	; (8000a38 <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 800088c:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800088e:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000890:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000892:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000896:	43ac      	bics	r4, r5
 8000898:	f040 80b4 	bne.w	8000a04 <HAL_GPIO_Init+0x184>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800089c:	684d      	ldr	r5, [r1, #4]
 800089e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008a2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008a4:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008a8:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008ac:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008ae:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008b0:	2f01      	cmp	r7, #1
 80008b2:	d834      	bhi.n	800091e <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 80008b4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008b6:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80008ba:	68cf      	ldr	r7, [r1, #12]
 80008bc:	fa07 f708 	lsl.w	r7, r7, r8
 80008c0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80008c4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80008c6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c8:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008cc:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80008d0:	409f      	lsls	r7, r3
 80008d2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80008d6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80008d8:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008da:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008dc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80008e0:	688f      	ldr	r7, [r1, #8]
 80008e2:	fa07 f708 	lsl.w	r7, r7, r8
 80008e6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80008ea:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ec:	d119      	bne.n	8000922 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 80008ee:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008f2:	f003 0b07 	and.w	fp, r3, #7
 80008f6:	f04f 0e0f 	mov.w	lr, #15
 80008fa:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80008fe:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000902:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000906:	fa0e fe0b 	lsl.w	lr, lr, fp
 800090a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800090e:	690f      	ldr	r7, [r1, #16]
 8000910:	fa07 f70b 	lsl.w	r7, r7, fp
 8000914:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8000918:	f8ca 7020 	str.w	r7, [sl, #32]
 800091c:	e001      	b.n	8000922 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800091e:	2c03      	cmp	r4, #3
 8000920:	d1da      	bne.n	80008d8 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8000922:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000924:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000928:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800092c:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000930:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8000934:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000936:	d065      	beq.n	8000a04 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000938:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800093c:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000940:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000944:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000948:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800094c:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8000952:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8000956:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800095a:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800095e:	9401      	str	r4, [sp, #4]
 8000960:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000962:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 8000964:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000968:	40bc      	lsls	r4, r7
 800096a:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800096e:	4c33      	ldr	r4, [pc, #204]	; (8000a3c <HAL_GPIO_Init+0x1bc>)
 8000970:	42a0      	cmp	r0, r4
 8000972:	d04e      	beq.n	8000a12 <HAL_GPIO_Init+0x192>
 8000974:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000978:	42a0      	cmp	r0, r4
 800097a:	d04c      	beq.n	8000a16 <HAL_GPIO_Init+0x196>
 800097c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000980:	42a0      	cmp	r0, r4
 8000982:	d04a      	beq.n	8000a1a <HAL_GPIO_Init+0x19a>
 8000984:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000988:	42a0      	cmp	r0, r4
 800098a:	d048      	beq.n	8000a1e <HAL_GPIO_Init+0x19e>
 800098c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000990:	42a0      	cmp	r0, r4
 8000992:	d046      	beq.n	8000a22 <HAL_GPIO_Init+0x1a2>
 8000994:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000998:	42a0      	cmp	r0, r4
 800099a:	d044      	beq.n	8000a26 <HAL_GPIO_Init+0x1a6>
 800099c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009a0:	42a0      	cmp	r0, r4
 80009a2:	d042      	beq.n	8000a2a <HAL_GPIO_Init+0x1aa>
 80009a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009a8:	42a0      	cmp	r0, r4
 80009aa:	d040      	beq.n	8000a2e <HAL_GPIO_Init+0x1ae>
 80009ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009b0:	42a0      	cmp	r0, r4
 80009b2:	d03e      	beq.n	8000a32 <HAL_GPIO_Init+0x1b2>
 80009b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009b8:	42a0      	cmp	r0, r4
 80009ba:	bf0c      	ite	eq
 80009bc:	2409      	moveq	r4, #9
 80009be:	240a      	movne	r4, #10
 80009c0:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009c2:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009c4:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80009c8:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80009ca:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 80009ce:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80009d0:	bf54      	ite	pl
 80009d2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80009d4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009d8:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 80009da:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80009dc:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80009de:	bf54      	ite	pl
 80009e0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80009e2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009e6:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 80009e8:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 80009ea:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80009ec:	bf54      	ite	pl
 80009ee:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80009f0:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009f4:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80009f6:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80009f8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80009fa:	bf54      	ite	pl
 80009fc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80009fe:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000a02:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a04:	3301      	adds	r3, #1
 8000a06:	2b10      	cmp	r3, #16
 8000a08:	f47f af40 	bne.w	800088c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000a0c:	b003      	add	sp, #12
 8000a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a12:	2400      	movs	r4, #0
 8000a14:	e7d4      	b.n	80009c0 <HAL_GPIO_Init+0x140>
 8000a16:	2401      	movs	r4, #1
 8000a18:	e7d2      	b.n	80009c0 <HAL_GPIO_Init+0x140>
 8000a1a:	2402      	movs	r4, #2
 8000a1c:	e7d0      	b.n	80009c0 <HAL_GPIO_Init+0x140>
 8000a1e:	2403      	movs	r4, #3
 8000a20:	e7ce      	b.n	80009c0 <HAL_GPIO_Init+0x140>
 8000a22:	2404      	movs	r4, #4
 8000a24:	e7cc      	b.n	80009c0 <HAL_GPIO_Init+0x140>
 8000a26:	2405      	movs	r4, #5
 8000a28:	e7ca      	b.n	80009c0 <HAL_GPIO_Init+0x140>
 8000a2a:	2406      	movs	r4, #6
 8000a2c:	e7c8      	b.n	80009c0 <HAL_GPIO_Init+0x140>
 8000a2e:	2407      	movs	r4, #7
 8000a30:	e7c6      	b.n	80009c0 <HAL_GPIO_Init+0x140>
 8000a32:	2408      	movs	r4, #8
 8000a34:	e7c4      	b.n	80009c0 <HAL_GPIO_Init+0x140>
 8000a36:	bf00      	nop
 8000a38:	40013c00 	.word	0x40013c00
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a44:	b10a      	cbz	r2, 8000a4a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000a46:	6181      	str	r1, [r0, #24]
  }
}
 8000a48:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000a4a:	0409      	lsls	r1, r1, #16
 8000a4c:	e7fb      	b.n	8000a46 <HAL_GPIO_WritePin+0x2>
	...

08000a50 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000a52:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000a56:	4c19      	ldr	r4, [pc, #100]	; (8000abc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a5c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000a68:	6823      	ldr	r3, [r4, #0]
 8000a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a6e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a70:	f7ff fe5e 	bl	8000730 <HAL_GetTick>
 8000a74:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000a76:	6863      	ldr	r3, [r4, #4]
 8000a78:	03da      	lsls	r2, r3, #15
 8000a7a:	d50c      	bpl.n	8000a96 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000a7c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000a7e:	4d0f      	ldr	r5, [pc, #60]	; (8000abc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000a86:	f7ff fe53 	bl	8000730 <HAL_GetTick>
 8000a8a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000a8c:	686b      	ldr	r3, [r5, #4]
 8000a8e:	039b      	lsls	r3, r3, #14
 8000a90:	d50a      	bpl.n	8000aa8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000a92:	2000      	movs	r0, #0
 8000a94:	e006      	b.n	8000aa4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000a96:	f7ff fe4b 	bl	8000730 <HAL_GetTick>
 8000a9a:	1b40      	subs	r0, r0, r5
 8000a9c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000aa0:	d9e9      	bls.n	8000a76 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000aa2:	2003      	movs	r0, #3
}
 8000aa4:	b003      	add	sp, #12
 8000aa6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000aa8:	f7ff fe42 	bl	8000730 <HAL_GetTick>
 8000aac:	1b00      	subs	r0, r0, r4
 8000aae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ab2:	d9eb      	bls.n	8000a8c <HAL_PWREx_EnableOverDrive+0x3c>
 8000ab4:	e7f5      	b.n	8000aa2 <HAL_PWREx_EnableOverDrive+0x52>
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000

08000ac0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	b340      	cbz	r0, 8000b1a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ac8:	6803      	ldr	r3, [r0, #0]
 8000aca:	07db      	lsls	r3, r3, #31
 8000acc:	d410      	bmi.n	8000af0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	079f      	lsls	r7, r3, #30
 8000ad2:	d461      	bmi.n	8000b98 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ad4:	6823      	ldr	r3, [r4, #0]
 8000ad6:	0719      	lsls	r1, r3, #28
 8000ad8:	f100 80a6 	bmi.w	8000c28 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	075a      	lsls	r2, r3, #29
 8000ae0:	f100 80c7 	bmi.w	8000c72 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ae4:	69a2      	ldr	r2, [r4, #24]
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	f040 8130 	bne.w	8000d4c <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000aec:	2000      	movs	r0, #0
 8000aee:	e02c      	b.n	8000b4a <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000af0:	4b94      	ldr	r3, [pc, #592]	; (8000d44 <HAL_RCC_OscConfig+0x284>)
 8000af2:	689a      	ldr	r2, [r3, #8]
 8000af4:	f002 020c 	and.w	r2, r2, #12
 8000af8:	2a04      	cmp	r2, #4
 8000afa:	d007      	beq.n	8000b0c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	f002 020c 	and.w	r2, r2, #12
 8000b02:	2a08      	cmp	r2, #8
 8000b04:	d10b      	bne.n	8000b1e <HAL_RCC_OscConfig+0x5e>
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	025e      	lsls	r6, r3, #9
 8000b0a:	d508      	bpl.n	8000b1e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b0c:	4b8d      	ldr	r3, [pc, #564]	; (8000d44 <HAL_RCC_OscConfig+0x284>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	039d      	lsls	r5, r3, #14
 8000b12:	d5dc      	bpl.n	8000ace <HAL_RCC_OscConfig+0xe>
 8000b14:	6863      	ldr	r3, [r4, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1d9      	bne.n	8000ace <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	e015      	b.n	8000b4a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b1e:	6863      	ldr	r3, [r4, #4]
 8000b20:	4d88      	ldr	r5, [pc, #544]	; (8000d44 <HAL_RCC_OscConfig+0x284>)
 8000b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b26:	d113      	bne.n	8000b50 <HAL_RCC_OscConfig+0x90>
 8000b28:	682b      	ldr	r3, [r5, #0]
 8000b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b30:	f7ff fdfe 	bl	8000730 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b34:	4e83      	ldr	r6, [pc, #524]	; (8000d44 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8000b36:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b38:	6833      	ldr	r3, [r6, #0]
 8000b3a:	0398      	lsls	r0, r3, #14
 8000b3c:	d4c7      	bmi.n	8000ace <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fdf7 	bl	8000730 <HAL_GetTick>
 8000b42:	1b40      	subs	r0, r0, r5
 8000b44:	2864      	cmp	r0, #100	; 0x64
 8000b46:	d9f7      	bls.n	8000b38 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8000b48:	2003      	movs	r0, #3
}
 8000b4a:	b002      	add	sp, #8
 8000b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b50:	b99b      	cbnz	r3, 8000b7a <HAL_RCC_OscConfig+0xba>
 8000b52:	682b      	ldr	r3, [r5, #0]
 8000b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b58:	602b      	str	r3, [r5, #0]
 8000b5a:	682b      	ldr	r3, [r5, #0]
 8000b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b62:	f7ff fde5 	bl	8000730 <HAL_GetTick>
 8000b66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b68:	682b      	ldr	r3, [r5, #0]
 8000b6a:	0399      	lsls	r1, r3, #14
 8000b6c:	d5af      	bpl.n	8000ace <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b6e:	f7ff fddf 	bl	8000730 <HAL_GetTick>
 8000b72:	1b80      	subs	r0, r0, r6
 8000b74:	2864      	cmp	r0, #100	; 0x64
 8000b76:	d9f7      	bls.n	8000b68 <HAL_RCC_OscConfig+0xa8>
 8000b78:	e7e6      	b.n	8000b48 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b7e:	682b      	ldr	r3, [r5, #0]
 8000b80:	d103      	bne.n	8000b8a <HAL_RCC_OscConfig+0xca>
 8000b82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b86:	602b      	str	r3, [r5, #0]
 8000b88:	e7ce      	b.n	8000b28 <HAL_RCC_OscConfig+0x68>
 8000b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b8e:	602b      	str	r3, [r5, #0]
 8000b90:	682b      	ldr	r3, [r5, #0]
 8000b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b96:	e7ca      	b.n	8000b2e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b98:	4b6a      	ldr	r3, [pc, #424]	; (8000d44 <HAL_RCC_OscConfig+0x284>)
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	f012 0f0c 	tst.w	r2, #12
 8000ba0:	d007      	beq.n	8000bb2 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	f002 020c 	and.w	r2, r2, #12
 8000ba8:	2a08      	cmp	r2, #8
 8000baa:	d111      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x110>
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	025a      	lsls	r2, r3, #9
 8000bb0:	d40e      	bmi.n	8000bd0 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bb2:	4a64      	ldr	r2, [pc, #400]	; (8000d44 <HAL_RCC_OscConfig+0x284>)
 8000bb4:	6813      	ldr	r3, [r2, #0]
 8000bb6:	079b      	lsls	r3, r3, #30
 8000bb8:	d502      	bpl.n	8000bc0 <HAL_RCC_OscConfig+0x100>
 8000bba:	68e3      	ldr	r3, [r4, #12]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d1ac      	bne.n	8000b1a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc0:	6813      	ldr	r3, [r2, #0]
 8000bc2:	6921      	ldr	r1, [r4, #16]
 8000bc4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bc8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bcc:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bce:	e781      	b.n	8000ad4 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000bd0:	68e3      	ldr	r3, [r4, #12]
 8000bd2:	4d5c      	ldr	r5, [pc, #368]	; (8000d44 <HAL_RCC_OscConfig+0x284>)
 8000bd4:	b1bb      	cbz	r3, 8000c06 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8000bd6:	682b      	ldr	r3, [r5, #0]
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bde:	f7ff fda7 	bl	8000730 <HAL_GetTick>
 8000be2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be4:	682b      	ldr	r3, [r5, #0]
 8000be6:	079f      	lsls	r7, r3, #30
 8000be8:	d507      	bpl.n	8000bfa <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bea:	682b      	ldr	r3, [r5, #0]
 8000bec:	6922      	ldr	r2, [r4, #16]
 8000bee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bf2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bf6:	602b      	str	r3, [r5, #0]
 8000bf8:	e76c      	b.n	8000ad4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bfa:	f7ff fd99 	bl	8000730 <HAL_GetTick>
 8000bfe:	1b80      	subs	r0, r0, r6
 8000c00:	2802      	cmp	r0, #2
 8000c02:	d9ef      	bls.n	8000be4 <HAL_RCC_OscConfig+0x124>
 8000c04:	e7a0      	b.n	8000b48 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8000c06:	682b      	ldr	r3, [r5, #0]
 8000c08:	f023 0301 	bic.w	r3, r3, #1
 8000c0c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c0e:	f7ff fd8f 	bl	8000730 <HAL_GetTick>
 8000c12:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c14:	682b      	ldr	r3, [r5, #0]
 8000c16:	0798      	lsls	r0, r3, #30
 8000c18:	f57f af5c 	bpl.w	8000ad4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c1c:	f7ff fd88 	bl	8000730 <HAL_GetTick>
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9f6      	bls.n	8000c14 <HAL_RCC_OscConfig+0x154>
 8000c26:	e78f      	b.n	8000b48 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000c28:	6963      	ldr	r3, [r4, #20]
 8000c2a:	4d46      	ldr	r5, [pc, #280]	; (8000d44 <HAL_RCC_OscConfig+0x284>)
 8000c2c:	b183      	cbz	r3, 8000c50 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8000c2e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000c36:	f7ff fd7b 	bl	8000730 <HAL_GetTick>
 8000c3a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c3c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c3e:	079b      	lsls	r3, r3, #30
 8000c40:	f53f af4c 	bmi.w	8000adc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c44:	f7ff fd74 	bl	8000730 <HAL_GetTick>
 8000c48:	1b80      	subs	r0, r0, r6
 8000c4a:	2802      	cmp	r0, #2
 8000c4c:	d9f6      	bls.n	8000c3c <HAL_RCC_OscConfig+0x17c>
 8000c4e:	e77b      	b.n	8000b48 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8000c50:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c52:	f023 0301 	bic.w	r3, r3, #1
 8000c56:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000c58:	f7ff fd6a 	bl	8000730 <HAL_GetTick>
 8000c5c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c5e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c60:	079f      	lsls	r7, r3, #30
 8000c62:	f57f af3b 	bpl.w	8000adc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c66:	f7ff fd63 	bl	8000730 <HAL_GetTick>
 8000c6a:	1b80      	subs	r0, r0, r6
 8000c6c:	2802      	cmp	r0, #2
 8000c6e:	d9f6      	bls.n	8000c5e <HAL_RCC_OscConfig+0x19e>
 8000c70:	e76a      	b.n	8000b48 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c72:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <HAL_RCC_OscConfig+0x284>)
 8000c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c76:	00d0      	lsls	r0, r2, #3
 8000c78:	d427      	bmi.n	8000cca <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000c7c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c82:	641a      	str	r2, [r3, #64]	; 0x40
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	9301      	str	r3, [sp, #4]
 8000c8c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c8e:	4d2e      	ldr	r5, [pc, #184]	; (8000d48 <HAL_RCC_OscConfig+0x288>)
 8000c90:	682b      	ldr	r3, [r5, #0]
 8000c92:	05d9      	lsls	r1, r3, #23
 8000c94:	d51b      	bpl.n	8000cce <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c96:	68a3      	ldr	r3, [r4, #8]
 8000c98:	4d2a      	ldr	r5, [pc, #168]	; (8000d44 <HAL_RCC_OscConfig+0x284>)
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d127      	bne.n	8000cee <HAL_RCC_OscConfig+0x22e>
 8000c9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ca6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000caa:	f7ff fd41 	bl	8000730 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cae:	4e25      	ldr	r6, [pc, #148]	; (8000d44 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8000cb0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cb2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000cb4:	079b      	lsls	r3, r3, #30
 8000cb6:	d53f      	bpl.n	8000d38 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8000cb8:	2f00      	cmp	r7, #0
 8000cba:	f43f af13 	beq.w	8000ae4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cbe:	4a21      	ldr	r2, [pc, #132]	; (8000d44 <HAL_RCC_OscConfig+0x284>)
 8000cc0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	e70c      	b.n	8000ae4 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8000cca:	2700      	movs	r7, #0
 8000ccc:	e7df      	b.n	8000c8e <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 8000cce:	682b      	ldr	r3, [r5, #0]
 8000cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fd2b 	bl	8000730 <HAL_GetTick>
 8000cda:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cdc:	682b      	ldr	r3, [r5, #0]
 8000cde:	05da      	lsls	r2, r3, #23
 8000ce0:	d4d9      	bmi.n	8000c96 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ce2:	f7ff fd25 	bl	8000730 <HAL_GetTick>
 8000ce6:	1b80      	subs	r0, r0, r6
 8000ce8:	2864      	cmp	r0, #100	; 0x64
 8000cea:	d9f7      	bls.n	8000cdc <HAL_RCC_OscConfig+0x21c>
 8000cec:	e72c      	b.n	8000b48 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cee:	b9ab      	cbnz	r3, 8000d1c <HAL_RCC_OscConfig+0x25c>
 8000cf0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cf2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cf6:	f023 0301 	bic.w	r3, r3, #1
 8000cfa:	672b      	str	r3, [r5, #112]	; 0x70
 8000cfc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cfe:	f023 0304 	bic.w	r3, r3, #4
 8000d02:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000d04:	f7ff fd14 	bl	8000730 <HAL_GetTick>
 8000d08:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d0a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d0c:	0798      	lsls	r0, r3, #30
 8000d0e:	d5d3      	bpl.n	8000cb8 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d10:	f7ff fd0e 	bl	8000730 <HAL_GetTick>
 8000d14:	1b80      	subs	r0, r0, r6
 8000d16:	4540      	cmp	r0, r8
 8000d18:	d9f7      	bls.n	8000d0a <HAL_RCC_OscConfig+0x24a>
 8000d1a:	e715      	b.n	8000b48 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d1c:	2b05      	cmp	r3, #5
 8000d1e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d20:	d103      	bne.n	8000d2a <HAL_RCC_OscConfig+0x26a>
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	672b      	str	r3, [r5, #112]	; 0x70
 8000d28:	e7b9      	b.n	8000c9e <HAL_RCC_OscConfig+0x1de>
 8000d2a:	f023 0301 	bic.w	r3, r3, #1
 8000d2e:	672b      	str	r3, [r5, #112]	; 0x70
 8000d30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d32:	f023 0304 	bic.w	r3, r3, #4
 8000d36:	e7b5      	b.n	8000ca4 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d38:	f7ff fcfa 	bl	8000730 <HAL_GetTick>
 8000d3c:	1b40      	subs	r0, r0, r5
 8000d3e:	4540      	cmp	r0, r8
 8000d40:	d9b7      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x1f2>
 8000d42:	e701      	b.n	8000b48 <HAL_RCC_OscConfig+0x88>
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d4c:	4d3c      	ldr	r5, [pc, #240]	; (8000e40 <HAL_RCC_OscConfig+0x380>)
 8000d4e:	68ab      	ldr	r3, [r5, #8]
 8000d50:	f003 030c 	and.w	r3, r3, #12
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d042      	beq.n	8000dde <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_PLL_DISABLE();
 8000d58:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d5a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000d5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d60:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d62:	d12f      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x304>
        tickstart = HAL_GetTick();
 8000d64:	f7ff fce4 	bl	8000730 <HAL_GetTick>
 8000d68:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	0199      	lsls	r1, r3, #6
 8000d6e:	d423      	bmi.n	8000db8 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d70:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d78:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d82:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000d84:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000d88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d8a:	0852      	lsrs	r2, r2, #1
 8000d8c:	3a01      	subs	r2, #1
 8000d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d92:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d9a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fcc8 	bl	8000730 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da0:	4d27      	ldr	r5, [pc, #156]	; (8000e40 <HAL_RCC_OscConfig+0x380>)
        tickstart = HAL_GetTick();
 8000da2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da4:	682b      	ldr	r3, [r5, #0]
 8000da6:	019a      	lsls	r2, r3, #6
 8000da8:	f53f aea0 	bmi.w	8000aec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dac:	f7ff fcc0 	bl	8000730 <HAL_GetTick>
 8000db0:	1b00      	subs	r0, r0, r4
 8000db2:	2802      	cmp	r0, #2
 8000db4:	d9f6      	bls.n	8000da4 <HAL_RCC_OscConfig+0x2e4>
 8000db6:	e6c7      	b.n	8000b48 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000db8:	f7ff fcba 	bl	8000730 <HAL_GetTick>
 8000dbc:	1b80      	subs	r0, r0, r6
 8000dbe:	2802      	cmp	r0, #2
 8000dc0:	d9d3      	bls.n	8000d6a <HAL_RCC_OscConfig+0x2aa>
 8000dc2:	e6c1      	b.n	8000b48 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fcb4 	bl	8000730 <HAL_GetTick>
 8000dc8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dca:	682b      	ldr	r3, [r5, #0]
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	f57f ae8d 	bpl.w	8000aec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dd2:	f7ff fcad 	bl	8000730 <HAL_GetTick>
 8000dd6:	1b00      	subs	r0, r0, r4
 8000dd8:	2802      	cmp	r0, #2
 8000dda:	d9f6      	bls.n	8000dca <HAL_RCC_OscConfig+0x30a>
 8000ddc:	e6b4      	b.n	8000b48 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000dde:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8000de0:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000de2:	f43f ae9a 	beq.w	8000b1a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000de6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000dea:	69e1      	ldr	r1, [r4, #28]
 8000dec:	428a      	cmp	r2, r1
 8000dee:	f47f ae94 	bne.w	8000b1a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000df2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000df6:	6a21      	ldr	r1, [r4, #32]
 8000df8:	428a      	cmp	r2, r1
 8000dfa:	f47f ae8e 	bne.w	8000b1a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000dfe:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e02:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e04:	401a      	ands	r2, r3
 8000e06:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000e0a:	f47f ae86 	bne.w	8000b1a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000e0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e10:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000e14:	0852      	lsrs	r2, r2, #1
 8000e16:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e18:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000e1c:	f47f ae7d 	bne.w	8000b1a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000e20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000e24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000e26:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8000e2a:	f47f ae76 	bne.w	8000b1a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8000e2e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8000e32:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000e34:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8000e38:	f43f ae58 	beq.w	8000aec <HAL_RCC_OscConfig+0x2c>
 8000e3c:	e66d      	b.n	8000b1a <HAL_RCC_OscConfig+0x5a>
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e44:	4913      	ldr	r1, [pc, #76]	; (8000e94 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000e46:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e48:	688b      	ldr	r3, [r1, #8]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d01b      	beq.n	8000e8a <HAL_RCC_GetSysClockFreq+0x46>
 8000e52:	2b08      	cmp	r3, #8
 8000e54:	d11b      	bne.n	8000e8e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e56:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000e58:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e5a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e5c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000e60:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e64:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e68:	bf1a      	itte	ne
 8000e6a:	480b      	ldrne	r0, [pc, #44]	; (8000e98 <HAL_RCC_GetSysClockFreq+0x54>)
 8000e6c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e6e:	480b      	ldreq	r0, [pc, #44]	; (8000e9c <HAL_RCC_GetSysClockFreq+0x58>)
 8000e70:	fba1 0100 	umull	r0, r1, r1, r0
 8000e74:	f7ff fa34 	bl	80002e0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_RCC_GetSysClockFreq+0x50>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e80:	3301      	adds	r3, #1
 8000e82:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8000e84:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e88:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e8a:	4803      	ldr	r0, [pc, #12]	; (8000e98 <HAL_RCC_GetSysClockFreq+0x54>)
 8000e8c:	e7fc      	b.n	8000e88 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8000e8e:	4803      	ldr	r0, [pc, #12]	; (8000e9c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000e90:	e7fa      	b.n	8000e88 <HAL_RCC_GetSysClockFreq+0x44>
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	007a1200 	.word	0x007a1200
 8000e9c:	00f42400 	.word	0x00f42400

08000ea0 <HAL_RCC_ClockConfig>:
{
 8000ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ea4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	b910      	cbnz	r0, 8000eb0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000eaa:	2001      	movs	r0, #1
}
 8000eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000eb0:	4a45      	ldr	r2, [pc, #276]	; (8000fc8 <HAL_RCC_ClockConfig+0x128>)
 8000eb2:	6813      	ldr	r3, [r2, #0]
 8000eb4:	f003 030f 	and.w	r3, r3, #15
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d328      	bcc.n	8000f0e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ebc:	6821      	ldr	r1, [r4, #0]
 8000ebe:	078f      	lsls	r7, r1, #30
 8000ec0:	d430      	bmi.n	8000f24 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ec2:	07c8      	lsls	r0, r1, #31
 8000ec4:	d443      	bmi.n	8000f4e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000ec6:	4a40      	ldr	r2, [pc, #256]	; (8000fc8 <HAL_RCC_ClockConfig+0x128>)
 8000ec8:	6813      	ldr	r3, [r2, #0]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	42ab      	cmp	r3, r5
 8000ed0:	d866      	bhi.n	8000fa0 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ed2:	6822      	ldr	r2, [r4, #0]
 8000ed4:	0751      	lsls	r1, r2, #29
 8000ed6:	d46f      	bmi.n	8000fb8 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ed8:	0713      	lsls	r3, r2, #28
 8000eda:	d507      	bpl.n	8000eec <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000edc:	4a3b      	ldr	r2, [pc, #236]	; (8000fcc <HAL_RCC_ClockConfig+0x12c>)
 8000ede:	6921      	ldr	r1, [r4, #16]
 8000ee0:	6893      	ldr	r3, [r2, #8]
 8000ee2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ee6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000eea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000eec:	f7ff ffaa 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
 8000ef0:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <HAL_RCC_ClockConfig+0x12c>)
 8000ef2:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <HAL_RCC_ClockConfig+0x130>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000efa:	5cd3      	ldrb	r3, [r2, r3]
 8000efc:	40d8      	lsrs	r0, r3
 8000efe:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <HAL_RCC_ClockConfig+0x134>)
 8000f00:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000f02:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <HAL_RCC_ClockConfig+0x138>)
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	f7ff fbcf 	bl	80006a8 <HAL_InitTick>
  return HAL_OK;
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	e7ce      	b.n	8000eac <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	f023 030f 	bic.w	r3, r3, #15
 8000f14:	430b      	orrs	r3, r1
 8000f16:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f18:	6813      	ldr	r3, [r2, #0]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d1c3      	bne.n	8000eaa <HAL_RCC_ClockConfig+0xa>
 8000f22:	e7cb      	b.n	8000ebc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f24:	f011 0f04 	tst.w	r1, #4
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <HAL_RCC_ClockConfig+0x12c>)
 8000f2a:	d003      	beq.n	8000f34 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000f32:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f34:	070e      	lsls	r6, r1, #28
 8000f36:	d503      	bpl.n	8000f40 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000f3e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	68a0      	ldr	r0, [r4, #8]
 8000f44:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f48:	4302      	orrs	r2, r0
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	e7b9      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f4e:	6861      	ldr	r1, [r4, #4]
 8000f50:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <HAL_RCC_ClockConfig+0x12c>)
 8000f52:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f54:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f56:	d11b      	bne.n	8000f90 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f58:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5c:	d0a5      	beq.n	8000eaa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f5e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f60:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f64:	4f19      	ldr	r7, [pc, #100]	; (8000fcc <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f66:	f022 0203 	bic.w	r2, r2, #3
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000f6e:	f7ff fbdf 	bl	8000730 <HAL_GetTick>
 8000f72:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	6862      	ldr	r2, [r4, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f80:	d0a1      	beq.n	8000ec6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f82:	f7ff fbd5 	bl	8000730 <HAL_GetTick>
 8000f86:	1b80      	subs	r0, r0, r6
 8000f88:	4540      	cmp	r0, r8
 8000f8a:	d9f3      	bls.n	8000f74 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	e78d      	b.n	8000eac <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f90:	2902      	cmp	r1, #2
 8000f92:	d102      	bne.n	8000f9a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f94:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000f98:	e7e0      	b.n	8000f5c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f9a:	f012 0f02 	tst.w	r2, #2
 8000f9e:	e7dd      	b.n	8000f5c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fa0:	6813      	ldr	r3, [r2, #0]
 8000fa2:	f023 030f 	bic.w	r3, r3, #15
 8000fa6:	432b      	orrs	r3, r5
 8000fa8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000faa:	6813      	ldr	r3, [r2, #0]
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	42ab      	cmp	r3, r5
 8000fb2:	f47f af7a 	bne.w	8000eaa <HAL_RCC_ClockConfig+0xa>
 8000fb6:	e78c      	b.n	8000ed2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fb8:	4904      	ldr	r1, [pc, #16]	; (8000fcc <HAL_RCC_ClockConfig+0x12c>)
 8000fba:	68e0      	ldr	r0, [r4, #12]
 8000fbc:	688b      	ldr	r3, [r1, #8]
 8000fbe:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000fc2:	4303      	orrs	r3, r0
 8000fc4:	608b      	str	r3, [r1, #8]
 8000fc6:	e787      	b.n	8000ed8 <HAL_RCC_ClockConfig+0x38>
 8000fc8:	40023c00 	.word	0x40023c00
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	08002c52 	.word	0x08002c52
 8000fd4:	20000010 	.word	0x20000010
 8000fd8:	20000018 	.word	0x20000018

08000fdc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000fe6:	5cd3      	ldrb	r3, [r2, r3]
 8000fe8:	4a03      	ldr	r2, [pc, #12]	; (8000ff8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fea:	6810      	ldr	r0, [r2, #0]
}
 8000fec:	40d8      	lsrs	r0, r3
 8000fee:	4770      	bx	lr
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	08002c62 	.word	0x08002c62
 8000ff8:	20000010 	.word	0x20000010

08000ffc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001006:	5cd3      	ldrb	r3, [r2, r3]
 8001008:	4a03      	ldr	r2, [pc, #12]	; (8001018 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800100a:	6810      	ldr	r0, [r2, #0]
}
 800100c:	40d8      	lsrs	r0, r3
 800100e:	4770      	bx	lr
 8001010:	40023800 	.word	0x40023800
 8001014:	08002c62 	.word	0x08002c62
 8001018:	20000010 	.word	0x20000010

0800101c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800101c:	6803      	ldr	r3, [r0, #0]
{
 800101e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001022:	f013 0601 	ands.w	r6, r3, #1
{
 8001026:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001028:	d00b      	beq.n	8001042 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800102a:	4ab1      	ldr	r2, [pc, #708]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800102c:	6891      	ldr	r1, [r2, #8]
 800102e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001032:	6091      	str	r1, [r2, #8]
 8001034:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001036:	6891      	ldr	r1, [r2, #8]
 8001038:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800103a:	fab6 f686 	clz	r6, r6
 800103e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001040:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001042:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001046:	d012      	beq.n	800106e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001048:	49a9      	ldr	r1, [pc, #676]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800104a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800104c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001050:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001054:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001058:	bf08      	it	eq
 800105a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800105c:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001060:	bf16      	itet	ne
 8001062:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001066:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001068:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800106a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800106e:	02d9      	lsls	r1, r3, #11
 8001070:	d510      	bpl.n	8001094 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001072:	489f      	ldr	r0, [pc, #636]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001074:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001076:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800107a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800107e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001082:	ea42 0201 	orr.w	r2, r2, r1
 8001086:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800108a:	f000 81aa 	beq.w	80013e2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800108e:	2900      	cmp	r1, #0
 8001090:	bf08      	it	eq
 8001092:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001094:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001098:	bf18      	it	ne
 800109a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800109c:	069a      	lsls	r2, r3, #26
 800109e:	d532      	bpl.n	8001106 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	4b93      	ldr	r3, [pc, #588]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80010a2:	4f94      	ldr	r7, [pc, #592]	; (80012f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010be:	f7ff fb37 	bl	8000730 <HAL_GetTick>
 80010c2:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	05db      	lsls	r3, r3, #23
 80010c8:	f140 818d 	bpl.w	80013e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010cc:	4f88      	ldr	r7, [pc, #544]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010d2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80010d6:	f040 8191 	bne.w	80013fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80010da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010dc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80010e0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80010e4:	4a82      	ldr	r2, [pc, #520]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80010e6:	f040 81ae 	bne.w	8001446 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80010ea:	6891      	ldr	r1, [r2, #8]
 80010ec:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80010f0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80010f4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80010f8:	4301      	orrs	r1, r0
 80010fa:	6091      	str	r1, [r2, #8]
 80010fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001100:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001102:	430b      	orrs	r3, r1
 8001104:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	06da      	lsls	r2, r3, #27
 800110a:	d50c      	bpl.n	8001126 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800110c:	4a78      	ldr	r2, [pc, #480]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800110e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001112:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001116:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800111a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800111e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001120:	4301      	orrs	r1, r0
 8001122:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001126:	045f      	lsls	r7, r3, #17
 8001128:	d508      	bpl.n	800113c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800112a:	4971      	ldr	r1, [pc, #452]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800112c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800112e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001132:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001136:	4302      	orrs	r2, r0
 8001138:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800113c:	0418      	lsls	r0, r3, #16
 800113e:	d508      	bpl.n	8001152 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001140:	496b      	ldr	r1, [pc, #428]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001142:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001144:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001148:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800114c:	4302      	orrs	r2, r0
 800114e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001152:	03d9      	lsls	r1, r3, #15
 8001154:	d508      	bpl.n	8001168 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001156:	4966      	ldr	r1, [pc, #408]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001158:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800115a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800115e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001162:	4302      	orrs	r2, r0
 8001164:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001168:	039a      	lsls	r2, r3, #14
 800116a:	d508      	bpl.n	800117e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800116c:	4960      	ldr	r1, [pc, #384]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800116e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001170:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001174:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001178:	4302      	orrs	r2, r0
 800117a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800117e:	065f      	lsls	r7, r3, #25
 8001180:	d508      	bpl.n	8001194 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001182:	495b      	ldr	r1, [pc, #364]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001184:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001186:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800118a:	f022 0203 	bic.w	r2, r2, #3
 800118e:	4302      	orrs	r2, r0
 8001190:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001194:	0618      	lsls	r0, r3, #24
 8001196:	d508      	bpl.n	80011aa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001198:	4955      	ldr	r1, [pc, #340]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800119a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800119c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011a0:	f022 020c 	bic.w	r2, r2, #12
 80011a4:	4302      	orrs	r2, r0
 80011a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80011aa:	05d9      	lsls	r1, r3, #23
 80011ac:	d508      	bpl.n	80011c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80011ae:	4950      	ldr	r1, [pc, #320]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80011b0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80011b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011b6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80011ba:	4302      	orrs	r2, r0
 80011bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80011c0:	059a      	lsls	r2, r3, #22
 80011c2:	d508      	bpl.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80011c4:	494a      	ldr	r1, [pc, #296]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80011c6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80011c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80011d0:	4302      	orrs	r2, r0
 80011d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80011d6:	055f      	lsls	r7, r3, #21
 80011d8:	d508      	bpl.n	80011ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80011da:	4945      	ldr	r1, [pc, #276]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80011dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80011e6:	4302      	orrs	r2, r0
 80011e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80011ec:	0518      	lsls	r0, r3, #20
 80011ee:	d508      	bpl.n	8001202 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80011f0:	493f      	ldr	r1, [pc, #252]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80011f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80011fc:	4302      	orrs	r2, r0
 80011fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001202:	04d9      	lsls	r1, r3, #19
 8001204:	d508      	bpl.n	8001218 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001206:	493a      	ldr	r1, [pc, #232]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001208:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800120a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800120e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001212:	4302      	orrs	r2, r0
 8001214:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001218:	049a      	lsls	r2, r3, #18
 800121a:	d508      	bpl.n	800122e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800121c:	4934      	ldr	r1, [pc, #208]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800121e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001220:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001224:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001228:	4302      	orrs	r2, r0
 800122a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800122e:	025f      	lsls	r7, r3, #9
 8001230:	d508      	bpl.n	8001244 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001232:	492f      	ldr	r1, [pc, #188]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001234:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001236:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800123a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800123e:	4302      	orrs	r2, r0
 8001240:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001244:	0298      	lsls	r0, r3, #10
 8001246:	d50c      	bpl.n	8001262 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001248:	4829      	ldr	r0, [pc, #164]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800124a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800124c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001250:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001254:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001258:	bf08      	it	eq
 800125a:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800125c:	430a      	orrs	r2, r1
 800125e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001262:	f013 0f08 	tst.w	r3, #8
 8001266:	bf18      	it	ne
 8001268:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800126a:	0359      	lsls	r1, r3, #13
 800126c:	d508      	bpl.n	8001280 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800126e:	4920      	ldr	r1, [pc, #128]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001270:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001272:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001276:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800127a:	4302      	orrs	r2, r0
 800127c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001280:	021a      	lsls	r2, r3, #8
 8001282:	d509      	bpl.n	8001298 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001284:	491a      	ldr	r1, [pc, #104]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001286:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800128a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800128e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001292:	4302      	orrs	r2, r0
 8001294:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001298:	015f      	lsls	r7, r3, #5
 800129a:	d509      	bpl.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800129c:	4914      	ldr	r1, [pc, #80]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800129e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80012a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012a6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80012aa:	4302      	orrs	r2, r0
 80012ac:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80012b0:	0118      	lsls	r0, r3, #4
 80012b2:	d509      	bpl.n	80012c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80012b4:	490e      	ldr	r1, [pc, #56]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80012b6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80012ba:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80012be:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80012c2:	4302      	orrs	r2, r0
 80012c4:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80012c8:	00d9      	lsls	r1, r3, #3
 80012ca:	d509      	bpl.n	80012e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80012cc:	4908      	ldr	r1, [pc, #32]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80012ce:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80012d2:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80012d6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80012da:	4302      	orrs	r2, r0
 80012dc:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80012e0:	2e01      	cmp	r6, #1
 80012e2:	f000 80b4 	beq.w	800144e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80012e6:	019a      	lsls	r2, r3, #6
 80012e8:	f100 80b1 	bmi.w	800144e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80012ec:	e004      	b.n	80012f8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80012f8:	2d01      	cmp	r5, #1
 80012fa:	d170      	bne.n	80013de <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80012fc:	4d9d      	ldr	r5, [pc, #628]	; (8001574 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80012fe:	682b      	ldr	r3, [r5, #0]
 8001300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001304:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001306:	f7ff fa13 	bl	8000730 <HAL_GetTick>
 800130a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	009f      	lsls	r7, r3, #2
 8001310:	f100 8121 	bmi.w	8001556 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001314:	6821      	ldr	r1, [r4, #0]
 8001316:	030e      	lsls	r6, r1, #12
 8001318:	d501      	bpl.n	800131e <HAL_RCCEx_PeriphCLKConfig+0x302>
 800131a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800131c:	b11b      	cbz	r3, 8001326 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800131e:	02cd      	lsls	r5, r1, #11
 8001320:	d51d      	bpl.n	800135e <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001324:	b9db      	cbnz	r3, 800135e <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001326:	4a93      	ldr	r2, [pc, #588]	; (8001574 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001328:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800132c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001334:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001338:	4303      	orrs	r3, r0
 800133a:	6960      	ldr	r0, [r4, #20]
 800133c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001340:	69a0      	ldr	r0, [r4, #24]
 8001342:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001346:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800134a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800134e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001350:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001354:	3801      	subs	r0, #1
 8001356:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800135a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800135e:	0288      	lsls	r0, r1, #10
 8001360:	d515      	bpl.n	800138e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8001362:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001368:	d111      	bne.n	800138e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800136a:	4a82      	ldr	r2, [pc, #520]	; (8001574 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800136c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001370:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001374:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001378:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800137c:	4303      	orrs	r3, r0
 800137e:	6960      	ldr	r0, [r4, #20]
 8001380:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001384:	6a20      	ldr	r0, [r4, #32]
 8001386:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800138a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800138e:	070a      	lsls	r2, r1, #28
 8001390:	d519      	bpl.n	80013c6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001392:	4a78      	ldr	r2, [pc, #480]	; (8001574 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001394:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001398:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800139c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80013a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a4:	430b      	orrs	r3, r1
 80013a6:	6961      	ldr	r1, [r4, #20]
 80013a8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80013ac:	69e1      	ldr	r1, [r4, #28]
 80013ae:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80013b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80013b6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80013ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80013bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80013c0:	430b      	orrs	r3, r1
 80013c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80013c6:	4c6b      	ldr	r4, [pc, #428]	; (8001574 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ce:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013d0:	f7ff f9ae 	bl	8000730 <HAL_GetTick>
 80013d4:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	f140 80c3 	bpl.w	8001564 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80013de:	2000      	movs	r0, #0
 80013e0:	e009      	b.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 80013e2:	2601      	movs	r6, #1
 80013e4:	e656      	b.n	8001094 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e6:	f7ff f9a3 	bl	8000730 <HAL_GetTick>
 80013ea:	eba0 0008 	sub.w	r0, r0, r8
 80013ee:	2864      	cmp	r0, #100	; 0x64
 80013f0:	f67f ae68 	bls.w	80010c4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80013f4:	2003      	movs	r0, #3
}
 80013f6:	b003      	add	sp, #12
 80013f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013fc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001400:	429a      	cmp	r2, r3
 8001402:	f43f ae6a 	beq.w	80010da <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001408:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800140a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800140e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001412:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001414:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001416:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800141a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800141c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800141e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001420:	07d8      	lsls	r0, r3, #31
 8001422:	f57f ae5a 	bpl.w	80010da <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8001426:	f7ff f983 	bl	8000730 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800142e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001432:	0799      	lsls	r1, r3, #30
 8001434:	f53f ae51 	bmi.w	80010da <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001438:	f7ff f97a 	bl	8000730 <HAL_GetTick>
 800143c:	eba0 0008 	sub.w	r0, r0, r8
 8001440:	4548      	cmp	r0, r9
 8001442:	d9f5      	bls.n	8001430 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001444:	e7d6      	b.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001446:	6891      	ldr	r1, [r2, #8]
 8001448:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800144c:	e655      	b.n	80010fa <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 800144e:	4e49      	ldr	r6, [pc, #292]	; (8001574 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001450:	6833      	ldr	r3, [r6, #0]
 8001452:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001456:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001458:	f7ff f96a 	bl	8000730 <HAL_GetTick>
 800145c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800145e:	6833      	ldr	r3, [r6, #0]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	d472      	bmi.n	800154a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001464:	6822      	ldr	r2, [r4, #0]
 8001466:	07d7      	lsls	r7, r2, #31
 8001468:	d512      	bpl.n	8001490 <HAL_RCCEx_PeriphCLKConfig+0x474>
 800146a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800146c:	b983      	cbnz	r3, 8001490 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800146e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001472:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001476:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800147a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800147e:	430b      	orrs	r3, r1
 8001480:	6861      	ldr	r1, [r4, #4]
 8001482:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001486:	68a1      	ldr	r1, [r4, #8]
 8001488:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800148c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001490:	0316      	lsls	r6, r2, #12
 8001492:	d503      	bpl.n	800149c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001494:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800149a:	d005      	beq.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800149c:	02d0      	lsls	r0, r2, #11
 800149e:	d51e      	bpl.n	80014de <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80014a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014a6:	d11a      	bne.n	80014de <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80014a8:	4932      	ldr	r1, [pc, #200]	; (8001574 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80014aa:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80014ae:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80014b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80014ba:	4303      	orrs	r3, r0
 80014bc:	6860      	ldr	r0, [r4, #4]
 80014be:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80014c2:	68e0      	ldr	r0, [r4, #12]
 80014c4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80014c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80014cc:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80014d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014d2:	f020 001f 	bic.w	r0, r0, #31
 80014d6:	3b01      	subs	r3, #1
 80014d8:	4303      	orrs	r3, r0
 80014da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80014de:	01d1      	lsls	r1, r2, #7
 80014e0:	d511      	bpl.n	8001506 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80014e2:	4924      	ldr	r1, [pc, #144]	; (8001574 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80014e4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80014e8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80014ec:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80014f0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80014f4:	4303      	orrs	r3, r0
 80014f6:	6860      	ldr	r0, [r4, #4]
 80014f8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80014fc:	6920      	ldr	r0, [r4, #16]
 80014fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001502:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001506:	0192      	lsls	r2, r2, #6
 8001508:	d50d      	bpl.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800150a:	6923      	ldr	r3, [r4, #16]
 800150c:	6862      	ldr	r2, [r4, #4]
 800150e:	041b      	lsls	r3, r3, #16
 8001510:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001514:	68e2      	ldr	r2, [r4, #12]
 8001516:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800151a:	68a2      	ldr	r2, [r4, #8]
 800151c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001522:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001526:	4e13      	ldr	r6, [pc, #76]	; (8001574 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001528:	6833      	ldr	r3, [r6, #0]
 800152a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800152e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001530:	f7ff f8fe 	bl	8000730 <HAL_GetTick>
 8001534:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001536:	6833      	ldr	r3, [r6, #0]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	f53f aedd 	bmi.w	80012f8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800153e:	f7ff f8f7 	bl	8000730 <HAL_GetTick>
 8001542:	1bc0      	subs	r0, r0, r7
 8001544:	2864      	cmp	r0, #100	; 0x64
 8001546:	d9f6      	bls.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001548:	e754      	b.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800154a:	f7ff f8f1 	bl	8000730 <HAL_GetTick>
 800154e:	1bc0      	subs	r0, r0, r7
 8001550:	2864      	cmp	r0, #100	; 0x64
 8001552:	d984      	bls.n	800145e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001554:	e74e      	b.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001556:	f7ff f8eb 	bl	8000730 <HAL_GetTick>
 800155a:	1b80      	subs	r0, r0, r6
 800155c:	2864      	cmp	r0, #100	; 0x64
 800155e:	f67f aed5 	bls.w	800130c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8001562:	e747      	b.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001564:	f7ff f8e4 	bl	8000730 <HAL_GetTick>
 8001568:	1b40      	subs	r0, r0, r5
 800156a:	2864      	cmp	r0, #100	; 0x64
 800156c:	f67f af33 	bls.w	80013d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8001570:	e740      	b.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001578:	b538      	push	{r3, r4, r5, lr}
 800157a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800157c:	69c0      	ldr	r0, [r0, #28]
 800157e:	6921      	ldr	r1, [r4, #16]
 8001580:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001582:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001584:	430a      	orrs	r2, r1
 8001586:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001588:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800158a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800158c:	4991      	ldr	r1, [pc, #580]	; (80017d4 <UART_SetConfig+0x25c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800158e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001590:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001592:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001594:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001596:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001598:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80015a4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80015a6:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80015a8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80015aa:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015b2:	4a89      	ldr	r2, [pc, #548]	; (80017d8 <UART_SetConfig+0x260>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d11b      	bne.n	80015f0 <UART_SetConfig+0x78>
 80015b8:	4b88      	ldr	r3, [pc, #544]	; (80017dc <UART_SetConfig+0x264>)
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	3b01      	subs	r3, #1
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	f200 80e8 	bhi.w	800179a <UART_SetConfig+0x222>
 80015ca:	4a85      	ldr	r2, [pc, #532]	; (80017e0 <UART_SetConfig+0x268>)
 80015cc:	5cd3      	ldrb	r3, [r2, r3]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015ce:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80015d2:	f040 80b9 	bne.w	8001748 <UART_SetConfig+0x1d0>
  {
    switch (clocksource)
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d828      	bhi.n	800162c <UART_SetConfig+0xb4>
 80015da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80015de:	0096      	.short	0x0096
 80015e0:	009e00e1 	.word	0x009e00e1
 80015e4:	00db0027 	.word	0x00db0027
 80015e8:	00270027 	.word	0x00270027
 80015ec:	009f0027 	.word	0x009f0027
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015f0:	4a7c      	ldr	r2, [pc, #496]	; (80017e4 <UART_SetConfig+0x26c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d108      	bne.n	8001608 <UART_SetConfig+0x90>
 80015f6:	4b79      	ldr	r3, [pc, #484]	; (80017dc <UART_SetConfig+0x264>)
 80015f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80015fc:	4b78      	ldr	r3, [pc, #480]	; (80017e0 <UART_SetConfig+0x268>)
 80015fe:	f002 020c 	and.w	r2, r2, #12
 8001602:	4413      	add	r3, r2
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	e7e2      	b.n	80015ce <UART_SetConfig+0x56>
 8001608:	4a77      	ldr	r2, [pc, #476]	; (80017e8 <UART_SetConfig+0x270>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d118      	bne.n	8001640 <UART_SetConfig+0xc8>
 800160e:	4b73      	ldr	r3, [pc, #460]	; (80017dc <UART_SetConfig+0x264>)
 8001610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001614:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001618:	2b20      	cmp	r3, #32
 800161a:	f000 80b3 	beq.w	8001784 <UART_SetConfig+0x20c>
 800161e:	d807      	bhi.n	8001630 <UART_SetConfig+0xb8>
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80c0 	beq.w	80017a6 <UART_SetConfig+0x22e>
 8001626:	2b10      	cmp	r3, #16
 8001628:	f000 80b1 	beq.w	800178e <UART_SetConfig+0x216>
      }
    }
  }
  else
  {
    switch (clocksource)
 800162c:	2001      	movs	r0, #1
 800162e:	e070      	b.n	8001712 <UART_SetConfig+0x19a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001630:	2b30      	cmp	r3, #48	; 0x30
 8001632:	d1fb      	bne.n	800162c <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001634:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001638:	d070      	beq.n	800171c <UART_SetConfig+0x1a4>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800163a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800163e:	e0b9      	b.n	80017b4 <UART_SetConfig+0x23c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001640:	4a6a      	ldr	r2, [pc, #424]	; (80017ec <UART_SetConfig+0x274>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d10f      	bne.n	8001666 <UART_SetConfig+0xee>
 8001646:	4b65      	ldr	r3, [pc, #404]	; (80017dc <UART_SetConfig+0x264>)
 8001648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001650:	2b80      	cmp	r3, #128	; 0x80
 8001652:	f000 8097 	beq.w	8001784 <UART_SetConfig+0x20c>
 8001656:	d804      	bhi.n	8001662 <UART_SetConfig+0xea>
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80a4 	beq.w	80017a6 <UART_SetConfig+0x22e>
 800165e:	2b40      	cmp	r3, #64	; 0x40
 8001660:	e7e2      	b.n	8001628 <UART_SetConfig+0xb0>
 8001662:	2bc0      	cmp	r3, #192	; 0xc0
 8001664:	e7e5      	b.n	8001632 <UART_SetConfig+0xba>
 8001666:	4a62      	ldr	r2, [pc, #392]	; (80017f0 <UART_SetConfig+0x278>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d112      	bne.n	8001692 <UART_SetConfig+0x11a>
 800166c:	4b5b      	ldr	r3, [pc, #364]	; (80017dc <UART_SetConfig+0x264>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800167a:	f000 8083 	beq.w	8001784 <UART_SetConfig+0x20c>
 800167e:	d805      	bhi.n	800168c <UART_SetConfig+0x114>
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 8090 	beq.w	80017a6 <UART_SetConfig+0x22e>
 8001686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800168a:	e7cd      	b.n	8001628 <UART_SetConfig+0xb0>
 800168c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001690:	e7cf      	b.n	8001632 <UART_SetConfig+0xba>
 8001692:	4a58      	ldr	r2, [pc, #352]	; (80017f4 <UART_SetConfig+0x27c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d110      	bne.n	80016ba <UART_SetConfig+0x142>
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <UART_SetConfig+0x264>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016a6:	d06d      	beq.n	8001784 <UART_SetConfig+0x20c>
 80016a8:	d804      	bhi.n	80016b4 <UART_SetConfig+0x13c>
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d075      	beq.n	800179a <UART_SetConfig+0x222>
 80016ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b2:	e7b9      	b.n	8001628 <UART_SetConfig+0xb0>
 80016b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80016b8:	e7bb      	b.n	8001632 <UART_SetConfig+0xba>
 80016ba:	4a4f      	ldr	r2, [pc, #316]	; (80017f8 <UART_SetConfig+0x280>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d110      	bne.n	80016e2 <UART_SetConfig+0x16a>
 80016c0:	4b46      	ldr	r3, [pc, #280]	; (80017dc <UART_SetConfig+0x264>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80016ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ce:	d059      	beq.n	8001784 <UART_SetConfig+0x20c>
 80016d0:	d804      	bhi.n	80016dc <UART_SetConfig+0x164>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d067      	beq.n	80017a6 <UART_SetConfig+0x22e>
 80016d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016da:	e7a5      	b.n	8001628 <UART_SetConfig+0xb0>
 80016dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80016e0:	e7a7      	b.n	8001632 <UART_SetConfig+0xba>
 80016e2:	4a46      	ldr	r2, [pc, #280]	; (80017fc <UART_SetConfig+0x284>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d1a1      	bne.n	800162c <UART_SetConfig+0xb4>
 80016e8:	4b3c      	ldr	r3, [pc, #240]	; (80017dc <UART_SetConfig+0x264>)
 80016ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016f6:	d045      	beq.n	8001784 <UART_SetConfig+0x20c>
 80016f8:	d804      	bhi.n	8001704 <UART_SetConfig+0x18c>
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d053      	beq.n	80017a6 <UART_SetConfig+0x22e>
 80016fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001702:	e791      	b.n	8001628 <UART_SetConfig+0xb0>
 8001704:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001708:	e793      	b.n	8001632 <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetPCLK1Freq();
 800170a:	f7ff fc67 	bl	8000fdc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800170e:	b928      	cbnz	r0, 800171c <UART_SetConfig+0x1a4>
 8001710:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001712:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8001714:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68

  return ret;
}
 8001718:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 800171a:	4839      	ldr	r0, [pc, #228]	; (8001800 <UART_SetConfig+0x288>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800171c:	6862      	ldr	r2, [r4, #4]
 800171e:	0853      	lsrs	r3, r2, #1
 8001720:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001724:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001728:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800172c:	f1a3 0110 	sub.w	r1, r3, #16
 8001730:	4291      	cmp	r1, r2
 8001732:	f63f af7b 	bhi.w	800162c <UART_SetConfig+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001736:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800173a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800173e:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001740:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8001742:	4313      	orrs	r3, r2
 8001744:	60cb      	str	r3, [r1, #12]
 8001746:	e7e3      	b.n	8001710 <UART_SetConfig+0x198>
    switch (clocksource)
 8001748:	2b08      	cmp	r3, #8
 800174a:	f63f af6f 	bhi.w	800162c <UART_SetConfig+0xb4>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <UART_SetConfig+0x1dc>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	080017ad 	.word	0x080017ad
 8001758:	08001779 	.word	0x08001779
 800175c:	0800178b 	.word	0x0800178b
 8001760:	0800162d 	.word	0x0800162d
 8001764:	0800177f 	.word	0x0800177f
 8001768:	0800162d 	.word	0x0800162d
 800176c:	0800162d 	.word	0x0800162d
 8001770:	0800162d 	.word	0x0800162d
 8001774:	0800163b 	.word	0x0800163b
        pclk = HAL_RCC_GetPCLK2Freq();
 8001778:	f7ff fc40 	bl	8000ffc <HAL_RCC_GetPCLK2Freq>
        break;
 800177c:	e018      	b.n	80017b0 <UART_SetConfig+0x238>
        pclk = HAL_RCC_GetSysClockFreq();
 800177e:	f7ff fb61 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
        break;
 8001782:	e015      	b.n	80017b0 <UART_SetConfig+0x238>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001784:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001788:	d0c7      	beq.n	800171a <UART_SetConfig+0x1a2>
        pclk = (uint32_t) HSI_VALUE;
 800178a:	481d      	ldr	r0, [pc, #116]	; (8001800 <UART_SetConfig+0x288>)
 800178c:	e012      	b.n	80017b4 <UART_SetConfig+0x23c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800178e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001792:	d1f4      	bne.n	800177e <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetSysClockFreq();
 8001794:	f7ff fb56 	bl	8000e44 <HAL_RCC_GetSysClockFreq>
        break;
 8001798:	e7b9      	b.n	800170e <UART_SetConfig+0x196>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800179a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800179e:	d1eb      	bne.n	8001778 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 80017a0:	f7ff fc2c 	bl	8000ffc <HAL_RCC_GetPCLK2Freq>
        break;
 80017a4:	e7b3      	b.n	800170e <UART_SetConfig+0x196>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017a6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80017aa:	d0ae      	beq.n	800170a <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetPCLK1Freq();
 80017ac:	f7ff fc16 	bl	8000fdc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80017b0:	2800      	cmp	r0, #0
 80017b2:	d0ad      	beq.n	8001710 <UART_SetConfig+0x198>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80017b4:	6862      	ldr	r2, [r4, #4]
 80017b6:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80017ba:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017be:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80017c2:	f1a3 0110 	sub.w	r1, r3, #16
 80017c6:	4291      	cmp	r1, r2
 80017c8:	f63f af30 	bhi.w	800162c <UART_SetConfig+0xb4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80017cc:	6822      	ldr	r2, [r4, #0]
 80017ce:	60d3      	str	r3, [r2, #12]
 80017d0:	e79e      	b.n	8001710 <UART_SetConfig+0x198>
 80017d2:	bf00      	nop
 80017d4:	efff69f3 	.word	0xefff69f3
 80017d8:	40011000 	.word	0x40011000
 80017dc:	40023800 	.word	0x40023800
 80017e0:	08002c6a 	.word	0x08002c6a
 80017e4:	40004400 	.word	0x40004400
 80017e8:	40004800 	.word	0x40004800
 80017ec:	40004c00 	.word	0x40004c00
 80017f0:	40005000 	.word	0x40005000
 80017f4:	40011400 	.word	0x40011400
 80017f8:	40007800 	.word	0x40007800
 80017fc:	40007c00 	.word	0x40007c00
 8001800:	00f42400 	.word	0x00f42400

08001804 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001804:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001806:	07da      	lsls	r2, r3, #31
{
 8001808:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800180a:	d506      	bpl.n	800181a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800180c:	6801      	ldr	r1, [r0, #0]
 800180e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001810:	684a      	ldr	r2, [r1, #4]
 8001812:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001816:	4322      	orrs	r2, r4
 8001818:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800181a:	079c      	lsls	r4, r3, #30
 800181c:	d506      	bpl.n	800182c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800181e:	6801      	ldr	r1, [r0, #0]
 8001820:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001822:	684a      	ldr	r2, [r1, #4]
 8001824:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001828:	4322      	orrs	r2, r4
 800182a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800182c:	0759      	lsls	r1, r3, #29
 800182e:	d506      	bpl.n	800183e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001830:	6801      	ldr	r1, [r0, #0]
 8001832:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001834:	684a      	ldr	r2, [r1, #4]
 8001836:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800183a:	4322      	orrs	r2, r4
 800183c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800183e:	071a      	lsls	r2, r3, #28
 8001840:	d506      	bpl.n	8001850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001842:	6801      	ldr	r1, [r0, #0]
 8001844:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001846:	684a      	ldr	r2, [r1, #4]
 8001848:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800184c:	4322      	orrs	r2, r4
 800184e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001850:	06dc      	lsls	r4, r3, #27
 8001852:	d506      	bpl.n	8001862 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001854:	6801      	ldr	r1, [r0, #0]
 8001856:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001858:	688a      	ldr	r2, [r1, #8]
 800185a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800185e:	4322      	orrs	r2, r4
 8001860:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001862:	0699      	lsls	r1, r3, #26
 8001864:	d506      	bpl.n	8001874 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001866:	6801      	ldr	r1, [r0, #0]
 8001868:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800186a:	688a      	ldr	r2, [r1, #8]
 800186c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001870:	4322      	orrs	r2, r4
 8001872:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001874:	065a      	lsls	r2, r3, #25
 8001876:	d510      	bpl.n	800189a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001878:	6801      	ldr	r1, [r0, #0]
 800187a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800187c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800187e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001882:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001886:	ea42 0204 	orr.w	r2, r2, r4
 800188a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800188c:	d105      	bne.n	800189a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800188e:	684a      	ldr	r2, [r1, #4]
 8001890:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001892:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001896:	4322      	orrs	r2, r4
 8001898:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800189a:	061b      	lsls	r3, r3, #24
 800189c:	d506      	bpl.n	80018ac <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800189e:	6802      	ldr	r2, [r0, #0]
 80018a0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80018a2:	6853      	ldr	r3, [r2, #4]
 80018a4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6053      	str	r3, [r2, #4]
  }
}
 80018ac:	bd10      	pop	{r4, pc}

080018ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80018ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80018b6:	4604      	mov	r4, r0
 80018b8:	460e      	mov	r6, r1
 80018ba:	4615      	mov	r5, r2
 80018bc:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018be:	6822      	ldr	r2, [r4, #0]
 80018c0:	69d3      	ldr	r3, [r2, #28]
 80018c2:	ea36 0303 	bics.w	r3, r6, r3
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	42ab      	cmp	r3, r5
 80018ce:	d001      	beq.n	80018d4 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80018d0:	2000      	movs	r0, #0
 80018d2:	e026      	b.n	8001922 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80018d4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80018d8:	d0f2      	beq.n	80018c0 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018da:	f7fe ff29 	bl	8000730 <HAL_GetTick>
 80018de:	1bc0      	subs	r0, r0, r7
 80018e0:	4540      	cmp	r0, r8
 80018e2:	6820      	ldr	r0, [r4, #0]
 80018e4:	d802      	bhi.n	80018ec <UART_WaitOnFlagUntilTimeout+0x3e>
 80018e6:	f1b8 0f00 	cmp.w	r8, #0
 80018ea:	d11c      	bne.n	8001926 <UART_WaitOnFlagUntilTimeout+0x78>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018ec:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018f4:	e840 3200 	strex	r2, r3, [r0]
 80018f8:	2a00      	cmp	r2, #0
 80018fa:	d1f7      	bne.n	80018ec <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018fc:	f100 0308 	add.w	r3, r0, #8
 8001900:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001904:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001908:	f100 0108 	add.w	r1, r0, #8
 800190c:	e841 3200 	strex	r2, r3, [r1]
 8001910:	2a00      	cmp	r2, #0
 8001912:	d1f3      	bne.n	80018fc <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8001914:	2320      	movs	r3, #32
 8001916:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8001918:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 800191c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800191e:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
}
 8001922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001926:	6803      	ldr	r3, [r0, #0]
 8001928:	075a      	lsls	r2, r3, #29
 800192a:	d5c8      	bpl.n	80018be <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800192c:	69c3      	ldr	r3, [r0, #28]
 800192e:	051b      	lsls	r3, r3, #20
 8001930:	d5c5      	bpl.n	80018be <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001932:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001936:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001938:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800193c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001940:	e840 3200 	strex	r2, r3, [r0]
 8001944:	2a00      	cmp	r2, #0
 8001946:	d1f7      	bne.n	8001938 <UART_WaitOnFlagUntilTimeout+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001948:	f100 0308 	add.w	r3, r0, #8
 800194c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001950:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001954:	f100 0108 	add.w	r1, r0, #8
 8001958:	e841 3200 	strex	r2, r3, [r1]
 800195c:	2a00      	cmp	r2, #0
 800195e:	d1f3      	bne.n	8001948 <UART_WaitOnFlagUntilTimeout+0x9a>
          huart->gState = HAL_UART_STATE_READY;
 8001960:	2320      	movs	r3, #32
 8001962:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8001964:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001968:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800196c:	e7d6      	b.n	800191c <UART_WaitOnFlagUntilTimeout+0x6e>

0800196e <HAL_UART_Transmit>:
{
 800196e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001972:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001974:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8001976:	4604      	mov	r4, r0
 8001978:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800197a:	2b20      	cmp	r3, #32
{
 800197c:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800197e:	d142      	bne.n	8001a06 <HAL_UART_Transmit+0x98>
    if ((pData == NULL) || (Size == 0U))
 8001980:	2900      	cmp	r1, #0
 8001982:	d042      	beq.n	8001a0a <HAL_UART_Transmit+0x9c>
 8001984:	2a00      	cmp	r2, #0
 8001986:	d040      	beq.n	8001a0a <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001988:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800198a:	2500      	movs	r5, #0
 800198c:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001990:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8001992:	f7fe fecd 	bl	8000730 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001996:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001998:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 800199a:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800199e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 80019a2:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019a6:	d103      	bne.n	80019b0 <HAL_UART_Transmit+0x42>
 80019a8:	6922      	ldr	r2, [r4, #16]
 80019aa:	b90a      	cbnz	r2, 80019b0 <HAL_UART_Transmit+0x42>
 80019ac:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80019ae:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 80019b0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019b4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80019b8:	b292      	uxth	r2, r2
 80019ba:	b93a      	cbnz	r2, 80019cc <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019bc:	2140      	movs	r1, #64	; 0x40
 80019be:	4620      	mov	r0, r4
 80019c0:	f7ff ff75 	bl	80018ae <UART_WaitOnFlagUntilTimeout>
 80019c4:	b950      	cbnz	r0, 80019dc <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 80019c6:	2320      	movs	r3, #32
 80019c8:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 80019ca:	e008      	b.n	80019de <HAL_UART_Transmit+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019cc:	2200      	movs	r2, #0
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	4620      	mov	r0, r4
 80019d2:	9303      	str	r3, [sp, #12]
 80019d4:	f7ff ff6b 	bl	80018ae <UART_WaitOnFlagUntilTimeout>
 80019d8:	9b03      	ldr	r3, [sp, #12]
 80019da:	b118      	cbz	r0, 80019e4 <HAL_UART_Transmit+0x76>
        return HAL_TIMEOUT;
 80019dc:	2003      	movs	r0, #3
}
 80019de:	b004      	add	sp, #16
 80019e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019e4:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80019e6:	b95e      	cbnz	r6, 8001a00 <HAL_UART_Transmit+0x92>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019e8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80019ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80019f0:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80019f2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80019f6:	3a01      	subs	r2, #1
 80019f8:	b292      	uxth	r2, r2
 80019fa:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80019fe:	e7d7      	b.n	80019b0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a00:	f816 2b01 	ldrb.w	r2, [r6], #1
 8001a04:	e7f4      	b.n	80019f0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001a06:	2002      	movs	r0, #2
 8001a08:	e7e9      	b.n	80019de <HAL_UART_Transmit+0x70>
      return  HAL_ERROR;
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	e7e7      	b.n	80019de <HAL_UART_Transmit+0x70>

08001a0e <UART_CheckIdleState>:
{
 8001a0e:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a10:	2500      	movs	r5, #0
{
 8001a12:	4604      	mov	r4, r0
 8001a14:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a16:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8001a1a:	f7fe fe89 	bl	8000730 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a1e:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8001a20:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	0711      	lsls	r1, r2, #28
 8001a26:	d417      	bmi.n	8001a58 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a28:	6822      	ldr	r2, [r4, #0]
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	0752      	lsls	r2, r2, #29
 8001a2e:	d509      	bpl.n	8001a44 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a30:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001a34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001a38:	4620      	mov	r0, r4
 8001a3a:	9200      	str	r2, [sp, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f7ff ff36 	bl	80018ae <UART_WaitOnFlagUntilTimeout>
 8001a42:	b9b0      	cbnz	r0, 8001a72 <UART_CheckIdleState+0x64>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a44:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001a46:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001a48:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 8001a4c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001a4e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a52:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a54:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8001a56:	e00d      	b.n	8001a74 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a58:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001a5c:	9003      	str	r0, [sp, #12]
 8001a5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001a62:	4620      	mov	r0, r4
 8001a64:	9200      	str	r2, [sp, #0]
 8001a66:	462a      	mov	r2, r5
 8001a68:	f7ff ff21 	bl	80018ae <UART_WaitOnFlagUntilTimeout>
 8001a6c:	9b03      	ldr	r3, [sp, #12]
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d0da      	beq.n	8001a28 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001a72:	2003      	movs	r0, #3
}
 8001a74:	b005      	add	sp, #20
 8001a76:	bd30      	pop	{r4, r5, pc}

08001a78 <HAL_UART_Init>:
{
 8001a78:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	b340      	cbz	r0, 8001ad0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001a7e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8001a80:	b91b      	cbnz	r3, 8001a8a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001a82:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8001a86:	f000 f94f 	bl	8001d28 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001a8a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a8c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a8e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8001a90:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8001a92:	6813      	ldr	r3, [r2, #0]
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a9a:	f7ff fd6d 	bl	8001578 <UART_SetConfig>
 8001a9e:	2801      	cmp	r0, #1
 8001aa0:	d016      	beq.n	8001ad0 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aa4:	b113      	cbz	r3, 8001aac <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff feac 	bl	8001804 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aac:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001aae:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001abe:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
}
 8001ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001aca:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001acc:	f7ff bf9f 	b.w	8001a0e <UART_CheckIdleState>
}
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	bd10      	pop	{r4, pc}

08001ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ad8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ada:	e003      	b.n	8001ae4 <LoopCopyDataInit>

08001adc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ade:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ae0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ae2:	3104      	adds	r1, #4

08001ae4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ae4:	480b      	ldr	r0, [pc, #44]	; (8001b14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ae8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001aec:	d3f6      	bcc.n	8001adc <CopyDataInit>
  ldr  r2, =_sbss
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001af0:	e002      	b.n	8001af8 <LoopFillZerobss>

08001af2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001af2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001af4:	f842 3b04 	str.w	r3, [r2], #4

08001af8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001afa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001afc:	d3f9      	bcc.n	8001af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001afe:	f7fe fdab 	bl	8000658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b02:	f000 fac9 	bl	8002098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b06:	f000 f895 	bl	8001c34 <main>
  bx  lr    
 8001b0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b0c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001b10:	08002d30 	.word	0x08002d30
  ldr  r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b18:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001b1c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001b20:	20000274 	.word	0x20000274

08001b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b24:	e7fe      	b.n	8001b24 <ADC_IRQHandler>

08001b26 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001b26:	b570      	push	{r4, r5, r6, lr}
 8001b28:	460d      	mov	r5, r1
 8001b2a:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2c:	460e      	mov	r6, r1
 8001b2e:	1b73      	subs	r3, r6, r5
 8001b30:	429c      	cmp	r4, r3
 8001b32:	dc01      	bgt.n	8001b38 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001b34:	4620      	mov	r0, r4
 8001b36:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001b38:	f3af 8000 	nop.w
 8001b3c:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b40:	e7f5      	b.n	8001b2e <_read+0x8>

08001b42 <_write>:

int _write(int file, char *ptr, int len)
{
 8001b42:	b570      	push	{r4, r5, r6, lr}
 8001b44:	460d      	mov	r5, r1
 8001b46:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b48:	460e      	mov	r6, r1
 8001b4a:	1b73      	subs	r3, r6, r5
 8001b4c:	429c      	cmp	r4, r3
 8001b4e:	dc01      	bgt.n	8001b54 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001b50:	4620      	mov	r0, r4
 8001b52:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001b54:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001b58:	f000 f828 	bl	8001bac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5c:	e7f5      	b.n	8001b4a <_write+0x8>
	...

08001b60 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <_sbrk+0x2c>)
 8001b62:	6811      	ldr	r1, [r2, #0]
{
 8001b64:	b508      	push	{r3, lr}
 8001b66:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001b68:	b909      	cbnz	r1, 8001b6e <_sbrk+0xe>
		heap_end = &end;
 8001b6a:	4909      	ldr	r1, [pc, #36]	; (8001b90 <_sbrk+0x30>)
 8001b6c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8001b6e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001b70:	4669      	mov	r1, sp
 8001b72:	4403      	add	r3, r0
 8001b74:	428b      	cmp	r3, r1
 8001b76:	d906      	bls.n	8001b86 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001b78:	f000 fa88 	bl	800208c <__errno>
 8001b7c:	230c      	movs	r3, #12
 8001b7e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001b84:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001b86:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8001b88:	e7fc      	b.n	8001b84 <_sbrk+0x24>
 8001b8a:	bf00      	nop
 8001b8c:	20000098 	.word	0x20000098
 8001b90:	20000278 	.word	0x20000278

08001b94 <_close>:

int _close(int file)
{
	return -1;
}
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	4770      	bx	lr

08001b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001b9e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001ba0:	604b      	str	r3, [r1, #4]
}
 8001ba2:	4770      	bx	lr

08001ba4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	4770      	bx	lr

08001ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001ba8:	2000      	movs	r0, #0
 8001baa:	4770      	bx	lr

08001bac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001bac:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8001bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8001bb2:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	a901      	add	r1, sp, #4
 8001bb8:	4803      	ldr	r0, [pc, #12]	; (8001bc8 <__io_putchar+0x1c>)
 8001bba:	f7ff fed8 	bl	800196e <HAL_UART_Transmit>

  return ch;
}
 8001bbe:	9801      	ldr	r0, [sp, #4]
 8001bc0:	b003      	add	sp, #12
 8001bc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bc6:	bf00      	nop
 8001bc8:	200000a0 	.word	0x200000a0

08001bcc <SystemClock_Config>:
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bcc:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bce:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
{
 8001bd2:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bd4:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bd6:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8001bd8:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  RCC_OscInitStruct.PLL.PLLR = 7;
 8001bda:	2507      	movs	r5, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bdc:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bde:	e9cd 1305 	strd	r1, r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001be2:	2300      	movs	r3, #0
 8001be4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bea:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8001bee:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001bf2:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 7;
 8001bf6:	2309      	movs	r3, #9
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = 7;
 8001bfa:	e9cd 3510 	strd	r3, r5, [sp, #64]	; 0x40
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfe:	f7fe ff5f 	bl	8000ac0 <HAL_RCC_OscConfig>
 8001c02:	b100      	cbz	r0, 8001c06 <SystemClock_Config+0x3a>
  {
    while(1) {};
 8001c04:	e7fe      	b.n	8001c04 <SystemClock_Config+0x38>
  }
  
  /* Activate the OverDrive to reach the 216 Mhz Frequency */
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c06:	f7fe ff23 	bl	8000a50 <HAL_PWREx_EnableOverDrive>
 8001c0a:	b100      	cbz	r0, 8001c0e <SystemClock_Config+0x42>
  {
    while(1) {};
 8001c0c:	e7fe      	b.n	8001c0c <SystemClock_Config+0x40>
  }
  
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001c0e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001c10:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c14:	9002      	str	r0, [sp, #8]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c16:	4629      	mov	r1, r5
 8001c18:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1a:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c22:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c26:	f7ff f93b 	bl	8000ea0 <HAL_RCC_ClockConfig>
 8001c2a:	b100      	cbz	r0, 8001c2e <SystemClock_Config+0x62>
  {
    while(1) {};
 8001c2c:	e7fe      	b.n	8001c2c <SystemClock_Config+0x60>
  }
}
 8001c2e:	b013      	add	sp, #76	; 0x4c
 8001c30:	bd30      	pop	{r4, r5, pc}
	...

08001c34 <main>:
{
 8001c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
static void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8001c36:	f7fe fdd9 	bl	80007ec <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c3a:	2301      	movs	r3, #1
  MPU_InitStruct.BaseAddress = 0x00;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001c3c:	2400      	movs	r4, #0
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c3e:	4668      	mov	r0, sp
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c40:	f8ad 3000 	strh.w	r3, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001c44:	f248 731f 	movw	r3, #34591	; 0x871f
 8001c48:	e9cd 4301 	strd	r4, r3, [sp, #4]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001c4c:	f240 1301 	movw	r3, #257	; 0x101
 8001c50:	9303      	str	r3, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c52:	f7fe fde9 	bl	8000828 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001c56:	2004      	movs	r0, #4
 8001c58:	f7fe fdd6 	bl	8000808 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c60:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001c64:	4a2b      	ldr	r2, [pc, #172]	; (8001d14 <main+0xe0>)
 8001c66:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001c6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c6e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001c72:	6953      	ldr	r3, [r2, #20]
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c7e:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001c82:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c86:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001c8a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c8e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c92:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c96:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001c9a:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c9c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ca0:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ca2:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8001ca6:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ca8:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001cac:	d2f9      	bcs.n	8001ca2 <main+0x6e>
    } while(sets-- != 0U);
 8001cae:	3b20      	subs	r3, #32
 8001cb0:	f113 0f20 	cmn.w	r3, #32
 8001cb4:	d1f2      	bne.n	8001c9c <main+0x68>
 8001cb6:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001cba:	6953      	ldr	r3, [r2, #20]
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6153      	str	r3, [r2, #20]
 8001cc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cc6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001cca:	f7fe fd0f 	bl	80006ec <HAL_Init>
  SystemClock_Config();
 8001cce:	f7ff ff7d 	bl	8001bcc <SystemClock_Config>
  BSP_LED_Init(LED3);
 8001cd2:	2002      	movs	r0, #2
 8001cd4:	f7fe fc82 	bl	80005dc <BSP_LED_Init>
  UartHandle.Instance        = USARTx;
 8001cd8:	480f      	ldr	r0, [pc, #60]	; (8001d18 <main+0xe4>)
  UartHandle.Init.BaudRate   = 9600;
 8001cda:	4a10      	ldr	r2, [pc, #64]	; (8001d1c <main+0xe8>)
 8001cdc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001ce0:	e9c0 2300 	strd	r2, r3, [r0]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8001ce4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce8:	2300      	movs	r3, #0
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8001cea:	6102      	str	r2, [r0, #16]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001cec:	220c      	movs	r2, #12
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001cee:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001cf0:	6142      	str	r2, [r0, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf2:	61c3      	str	r3, [r0, #28]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8001cf4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8001cf8:	f7ff febe 	bl	8001a78 <HAL_UART_Init>
 8001cfc:	b118      	cbz	r0, 8001d06 <main+0xd2>
  BSP_LED_On(LED3);
 8001cfe:	2002      	movs	r0, #2
 8001d00:	f7fe fc9c 	bl	800063c <BSP_LED_On>
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <main+0xd0>
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 8001d06:	4806      	ldr	r0, [pc, #24]	; (8001d20 <main+0xec>)
 8001d08:	f000 f91c 	bl	8001f44 <iprintf>
  printf("** Test finished successfully. ** \n\r");
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <main+0xf0>)
 8001d0e:	f000 f919 	bl	8001f44 <iprintf>
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <main+0xde>
 8001d14:	e000ed00 	.word	0xe000ed00
 8001d18:	200000a0 	.word	0x200000a0
 8001d1c:	40004800 	.word	0x40004800
 8001d20:	08002c7a 	.word	0x08002c7a
 8001d24:	08002cc7 	.word	0x08002cc7

08001d28 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001d28:	b530      	push	{r4, r5, lr}

  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001d2a:	4c1e      	ldr	r4, [pc, #120]	; (8001da4 <HAL_UART_MspInit+0x7c>)
{
 8001d2c:	b0ad      	sub	sp, #180	; 0xb4
  USARTx_RX_GPIO_CLK_ENABLE();

  /* Select SysClk as source of USART1 clocks */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  RCC_PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001d2e:	2501      	movs	r5, #1
  USARTx_TX_GPIO_CLK_ENABLE();
 8001d30:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8001d32:	a808      	add	r0, sp, #32
  USARTx_TX_GPIO_CLK_ENABLE();
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	6323      	str	r3, [r4, #48]	; 0x30
 8001d3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	9b00      	ldr	r3, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001d44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d46:	f043 0308 	orr.w	r3, r3, #8
 8001d4a:	6323      	str	r3, [r4, #48]	; 0x30
 8001d4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  RCC_PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001d4e:	9519      	str	r5, [sp, #100]	; 0x64
  USARTx_RX_GPIO_CLK_ENABLE();
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	9b01      	ldr	r3, [sp, #4]
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d58:	2340      	movs	r3, #64	; 0x40
 8001d5a:	9308      	str	r3, [sp, #32]
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8001d5c:	f7ff f95e 	bl	800101c <HAL_RCCEx_PeriphCLKConfig>

  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001d60:	6c23      	ldr	r3, [r4, #64]	; 0x40

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001d62:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001d66:	a903      	add	r1, sp, #12
 8001d68:	480f      	ldr	r0, [pc, #60]	; (8001da8 <HAL_UART_MspInit+0x80>)
  USARTx_CLK_ENABLE();
 8001d6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d6e:	6423      	str	r3, [r4, #64]	; 0x40
 8001d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001d72:	2407      	movs	r4, #7
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001d74:	9505      	str	r5, [sp, #20]
  USARTx_CLK_ENABLE();
 8001d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7a:	9302      	str	r3, [sp, #8]
 8001d7c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e9cd 3406 	strd	r3, r4, [sp, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001d8a:	f7fe fd79 	bl	8000880 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001d92:	a903      	add	r1, sp, #12
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <HAL_UART_MspInit+0x80>)
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001d96:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001d98:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001d9a:	f7fe fd71 	bl	8000880 <HAL_GPIO_Init>
}
 8001d9e:	b02d      	add	sp, #180	; 0xb4
 8001da0:	bd30      	pop	{r4, r5, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020c00 	.word	0x40020c00

08001dac <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001dac:	4770      	bx	lr

08001dae <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <HardFault_Handler>

08001db0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler>

08001db2 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <BusFault_Handler>

08001db4 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <UsageFault_Handler>

08001db6 <SVC_Handler>:
 8001db6:	4770      	bx	lr

08001db8 <DebugMon_Handler>:
 8001db8:	4770      	bx	lr

08001dba <PendSV_Handler>:
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
    HAL_IncTick();
 8001dbc:	f7fe bcac 	b.w	8000718 <HAL_IncTick>

08001dc0 <std>:
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	b510      	push	{r4, lr}
 8001dc4:	4604      	mov	r4, r0
 8001dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8001dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001dce:	6083      	str	r3, [r0, #8]
 8001dd0:	8181      	strh	r1, [r0, #12]
 8001dd2:	6643      	str	r3, [r0, #100]	; 0x64
 8001dd4:	81c2      	strh	r2, [r0, #14]
 8001dd6:	6183      	str	r3, [r0, #24]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	2208      	movs	r2, #8
 8001ddc:	305c      	adds	r0, #92	; 0x5c
 8001dde:	f000 f906 	bl	8001fee <memset>
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <std+0x58>)
 8001de4:	6263      	str	r3, [r4, #36]	; 0x24
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <std+0x5c>)
 8001de8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <std+0x60>)
 8001dec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <std+0x64>)
 8001df0:	6323      	str	r3, [r4, #48]	; 0x30
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <std+0x68>)
 8001df4:	6224      	str	r4, [r4, #32]
 8001df6:	429c      	cmp	r4, r3
 8001df8:	d006      	beq.n	8001e08 <std+0x48>
 8001dfa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001dfe:	4294      	cmp	r4, r2
 8001e00:	d002      	beq.n	8001e08 <std+0x48>
 8001e02:	33d0      	adds	r3, #208	; 0xd0
 8001e04:	429c      	cmp	r4, r3
 8001e06:	d105      	bne.n	8001e14 <std+0x54>
 8001e08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e10:	f000 b966 	b.w	80020e0 <__retarget_lock_init_recursive>
 8001e14:	bd10      	pop	{r4, pc}
 8001e16:	bf00      	nop
 8001e18:	08001f69 	.word	0x08001f69
 8001e1c:	08001f8b 	.word	0x08001f8b
 8001e20:	08001fc3 	.word	0x08001fc3
 8001e24:	08001fe7 	.word	0x08001fe7
 8001e28:	20000128 	.word	0x20000128

08001e2c <stdio_exit_handler>:
 8001e2c:	4a02      	ldr	r2, [pc, #8]	; (8001e38 <stdio_exit_handler+0xc>)
 8001e2e:	4903      	ldr	r1, [pc, #12]	; (8001e3c <stdio_exit_handler+0x10>)
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <stdio_exit_handler+0x14>)
 8001e32:	f000 b869 	b.w	8001f08 <_fwalk_sglue>
 8001e36:	bf00      	nop
 8001e38:	2000001c 	.word	0x2000001c
 8001e3c:	0800298d 	.word	0x0800298d
 8001e40:	20000028 	.word	0x20000028

08001e44 <cleanup_stdio>:
 8001e44:	6841      	ldr	r1, [r0, #4]
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <cleanup_stdio+0x34>)
 8001e48:	4299      	cmp	r1, r3
 8001e4a:	b510      	push	{r4, lr}
 8001e4c:	4604      	mov	r4, r0
 8001e4e:	d001      	beq.n	8001e54 <cleanup_stdio+0x10>
 8001e50:	f000 fd9c 	bl	800298c <_fflush_r>
 8001e54:	68a1      	ldr	r1, [r4, #8]
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <cleanup_stdio+0x38>)
 8001e58:	4299      	cmp	r1, r3
 8001e5a:	d002      	beq.n	8001e62 <cleanup_stdio+0x1e>
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f000 fd95 	bl	800298c <_fflush_r>
 8001e62:	68e1      	ldr	r1, [r4, #12]
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <cleanup_stdio+0x3c>)
 8001e66:	4299      	cmp	r1, r3
 8001e68:	d004      	beq.n	8001e74 <cleanup_stdio+0x30>
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e70:	f000 bd8c 	b.w	800298c <_fflush_r>
 8001e74:	bd10      	pop	{r4, pc}
 8001e76:	bf00      	nop
 8001e78:	20000128 	.word	0x20000128
 8001e7c:	20000190 	.word	0x20000190
 8001e80:	200001f8 	.word	0x200001f8

08001e84 <global_stdio_init.part.0>:
 8001e84:	b510      	push	{r4, lr}
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <global_stdio_init.part.0+0x30>)
 8001e88:	4c0b      	ldr	r4, [pc, #44]	; (8001eb8 <global_stdio_init.part.0+0x34>)
 8001e8a:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <global_stdio_init.part.0+0x38>)
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	4620      	mov	r0, r4
 8001e90:	2200      	movs	r2, #0
 8001e92:	2104      	movs	r1, #4
 8001e94:	f7ff ff94 	bl	8001dc0 <std>
 8001e98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2109      	movs	r1, #9
 8001ea0:	f7ff ff8e 	bl	8001dc0 <std>
 8001ea4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eae:	2112      	movs	r1, #18
 8001eb0:	f7ff bf86 	b.w	8001dc0 <std>
 8001eb4:	20000260 	.word	0x20000260
 8001eb8:	20000128 	.word	0x20000128
 8001ebc:	08001e2d 	.word	0x08001e2d

08001ec0 <__sfp_lock_acquire>:
 8001ec0:	4801      	ldr	r0, [pc, #4]	; (8001ec8 <__sfp_lock_acquire+0x8>)
 8001ec2:	f000 b90e 	b.w	80020e2 <__retarget_lock_acquire_recursive>
 8001ec6:	bf00      	nop
 8001ec8:	20000269 	.word	0x20000269

08001ecc <__sfp_lock_release>:
 8001ecc:	4801      	ldr	r0, [pc, #4]	; (8001ed4 <__sfp_lock_release+0x8>)
 8001ece:	f000 b909 	b.w	80020e4 <__retarget_lock_release_recursive>
 8001ed2:	bf00      	nop
 8001ed4:	20000269 	.word	0x20000269

08001ed8 <__sinit>:
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	4604      	mov	r4, r0
 8001edc:	f7ff fff0 	bl	8001ec0 <__sfp_lock_acquire>
 8001ee0:	6a23      	ldr	r3, [r4, #32]
 8001ee2:	b11b      	cbz	r3, 8001eec <__sinit+0x14>
 8001ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ee8:	f7ff bff0 	b.w	8001ecc <__sfp_lock_release>
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <__sinit+0x28>)
 8001eee:	6223      	str	r3, [r4, #32]
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <__sinit+0x2c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f5      	bne.n	8001ee4 <__sinit+0xc>
 8001ef8:	f7ff ffc4 	bl	8001e84 <global_stdio_init.part.0>
 8001efc:	e7f2      	b.n	8001ee4 <__sinit+0xc>
 8001efe:	bf00      	nop
 8001f00:	08001e45 	.word	0x08001e45
 8001f04:	20000260 	.word	0x20000260

08001f08 <_fwalk_sglue>:
 8001f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f0c:	4607      	mov	r7, r0
 8001f0e:	4688      	mov	r8, r1
 8001f10:	4614      	mov	r4, r2
 8001f12:	2600      	movs	r6, #0
 8001f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f18:	f1b9 0901 	subs.w	r9, r9, #1
 8001f1c:	d505      	bpl.n	8001f2a <_fwalk_sglue+0x22>
 8001f1e:	6824      	ldr	r4, [r4, #0]
 8001f20:	2c00      	cmp	r4, #0
 8001f22:	d1f7      	bne.n	8001f14 <_fwalk_sglue+0xc>
 8001f24:	4630      	mov	r0, r6
 8001f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f2a:	89ab      	ldrh	r3, [r5, #12]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d907      	bls.n	8001f40 <_fwalk_sglue+0x38>
 8001f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f34:	3301      	adds	r3, #1
 8001f36:	d003      	beq.n	8001f40 <_fwalk_sglue+0x38>
 8001f38:	4629      	mov	r1, r5
 8001f3a:	4638      	mov	r0, r7
 8001f3c:	47c0      	blx	r8
 8001f3e:	4306      	orrs	r6, r0
 8001f40:	3568      	adds	r5, #104	; 0x68
 8001f42:	e7e9      	b.n	8001f18 <_fwalk_sglue+0x10>

08001f44 <iprintf>:
 8001f44:	b40f      	push	{r0, r1, r2, r3}
 8001f46:	b507      	push	{r0, r1, r2, lr}
 8001f48:	4906      	ldr	r1, [pc, #24]	; (8001f64 <iprintf+0x20>)
 8001f4a:	ab04      	add	r3, sp, #16
 8001f4c:	6808      	ldr	r0, [r1, #0]
 8001f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f52:	6881      	ldr	r1, [r0, #8]
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	f000 f9e9 	bl	800232c <_vfiprintf_r>
 8001f5a:	b003      	add	sp, #12
 8001f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f60:	b004      	add	sp, #16
 8001f62:	4770      	bx	lr
 8001f64:	20000074 	.word	0x20000074

08001f68 <__sread>:
 8001f68:	b510      	push	{r4, lr}
 8001f6a:	460c      	mov	r4, r1
 8001f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f70:	f000 f868 	bl	8002044 <_read_r>
 8001f74:	2800      	cmp	r0, #0
 8001f76:	bfab      	itete	ge
 8001f78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8001f7c:	181b      	addge	r3, r3, r0
 8001f7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f82:	bfac      	ite	ge
 8001f84:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f86:	81a3      	strhlt	r3, [r4, #12]
 8001f88:	bd10      	pop	{r4, pc}

08001f8a <__swrite>:
 8001f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f8e:	461f      	mov	r7, r3
 8001f90:	898b      	ldrh	r3, [r1, #12]
 8001f92:	05db      	lsls	r3, r3, #23
 8001f94:	4605      	mov	r5, r0
 8001f96:	460c      	mov	r4, r1
 8001f98:	4616      	mov	r6, r2
 8001f9a:	d505      	bpl.n	8001fa8 <__swrite+0x1e>
 8001f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f000 f83c 	bl	8002020 <_lseek_r>
 8001fa8:	89a3      	ldrh	r3, [r4, #12]
 8001faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fb2:	81a3      	strh	r3, [r4, #12]
 8001fb4:	4632      	mov	r2, r6
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	4628      	mov	r0, r5
 8001fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fbe:	f000 b853 	b.w	8002068 <_write_r>

08001fc2 <__sseek>:
 8001fc2:	b510      	push	{r4, lr}
 8001fc4:	460c      	mov	r4, r1
 8001fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fca:	f000 f829 	bl	8002020 <_lseek_r>
 8001fce:	1c43      	adds	r3, r0, #1
 8001fd0:	89a3      	ldrh	r3, [r4, #12]
 8001fd2:	bf15      	itete	ne
 8001fd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001fde:	81a3      	strheq	r3, [r4, #12]
 8001fe0:	bf18      	it	ne
 8001fe2:	81a3      	strhne	r3, [r4, #12]
 8001fe4:	bd10      	pop	{r4, pc}

08001fe6 <__sclose>:
 8001fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fea:	f000 b809 	b.w	8002000 <_close_r>

08001fee <memset>:
 8001fee:	4402      	add	r2, r0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d100      	bne.n	8001ff8 <memset+0xa>
 8001ff6:	4770      	bx	lr
 8001ff8:	f803 1b01 	strb.w	r1, [r3], #1
 8001ffc:	e7f9      	b.n	8001ff2 <memset+0x4>
	...

08002000 <_close_r>:
 8002000:	b538      	push	{r3, r4, r5, lr}
 8002002:	4d06      	ldr	r5, [pc, #24]	; (800201c <_close_r+0x1c>)
 8002004:	2300      	movs	r3, #0
 8002006:	4604      	mov	r4, r0
 8002008:	4608      	mov	r0, r1
 800200a:	602b      	str	r3, [r5, #0]
 800200c:	f7ff fdc2 	bl	8001b94 <_close>
 8002010:	1c43      	adds	r3, r0, #1
 8002012:	d102      	bne.n	800201a <_close_r+0x1a>
 8002014:	682b      	ldr	r3, [r5, #0]
 8002016:	b103      	cbz	r3, 800201a <_close_r+0x1a>
 8002018:	6023      	str	r3, [r4, #0]
 800201a:	bd38      	pop	{r3, r4, r5, pc}
 800201c:	20000264 	.word	0x20000264

08002020 <_lseek_r>:
 8002020:	b538      	push	{r3, r4, r5, lr}
 8002022:	4d07      	ldr	r5, [pc, #28]	; (8002040 <_lseek_r+0x20>)
 8002024:	4604      	mov	r4, r0
 8002026:	4608      	mov	r0, r1
 8002028:	4611      	mov	r1, r2
 800202a:	2200      	movs	r2, #0
 800202c:	602a      	str	r2, [r5, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	f7ff fdba 	bl	8001ba8 <_lseek>
 8002034:	1c43      	adds	r3, r0, #1
 8002036:	d102      	bne.n	800203e <_lseek_r+0x1e>
 8002038:	682b      	ldr	r3, [r5, #0]
 800203a:	b103      	cbz	r3, 800203e <_lseek_r+0x1e>
 800203c:	6023      	str	r3, [r4, #0]
 800203e:	bd38      	pop	{r3, r4, r5, pc}
 8002040:	20000264 	.word	0x20000264

08002044 <_read_r>:
 8002044:	b538      	push	{r3, r4, r5, lr}
 8002046:	4d07      	ldr	r5, [pc, #28]	; (8002064 <_read_r+0x20>)
 8002048:	4604      	mov	r4, r0
 800204a:	4608      	mov	r0, r1
 800204c:	4611      	mov	r1, r2
 800204e:	2200      	movs	r2, #0
 8002050:	602a      	str	r2, [r5, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	f7ff fd67 	bl	8001b26 <_read>
 8002058:	1c43      	adds	r3, r0, #1
 800205a:	d102      	bne.n	8002062 <_read_r+0x1e>
 800205c:	682b      	ldr	r3, [r5, #0]
 800205e:	b103      	cbz	r3, 8002062 <_read_r+0x1e>
 8002060:	6023      	str	r3, [r4, #0]
 8002062:	bd38      	pop	{r3, r4, r5, pc}
 8002064:	20000264 	.word	0x20000264

08002068 <_write_r>:
 8002068:	b538      	push	{r3, r4, r5, lr}
 800206a:	4d07      	ldr	r5, [pc, #28]	; (8002088 <_write_r+0x20>)
 800206c:	4604      	mov	r4, r0
 800206e:	4608      	mov	r0, r1
 8002070:	4611      	mov	r1, r2
 8002072:	2200      	movs	r2, #0
 8002074:	602a      	str	r2, [r5, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	f7ff fd63 	bl	8001b42 <_write>
 800207c:	1c43      	adds	r3, r0, #1
 800207e:	d102      	bne.n	8002086 <_write_r+0x1e>
 8002080:	682b      	ldr	r3, [r5, #0]
 8002082:	b103      	cbz	r3, 8002086 <_write_r+0x1e>
 8002084:	6023      	str	r3, [r4, #0]
 8002086:	bd38      	pop	{r3, r4, r5, pc}
 8002088:	20000264 	.word	0x20000264

0800208c <__errno>:
 800208c:	4b01      	ldr	r3, [pc, #4]	; (8002094 <__errno+0x8>)
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000074 	.word	0x20000074

08002098 <__libc_init_array>:
 8002098:	b570      	push	{r4, r5, r6, lr}
 800209a:	4d0d      	ldr	r5, [pc, #52]	; (80020d0 <__libc_init_array+0x38>)
 800209c:	4c0d      	ldr	r4, [pc, #52]	; (80020d4 <__libc_init_array+0x3c>)
 800209e:	1b64      	subs	r4, r4, r5
 80020a0:	10a4      	asrs	r4, r4, #2
 80020a2:	2600      	movs	r6, #0
 80020a4:	42a6      	cmp	r6, r4
 80020a6:	d109      	bne.n	80020bc <__libc_init_array+0x24>
 80020a8:	4d0b      	ldr	r5, [pc, #44]	; (80020d8 <__libc_init_array+0x40>)
 80020aa:	4c0c      	ldr	r4, [pc, #48]	; (80020dc <__libc_init_array+0x44>)
 80020ac:	f000 fdc0 	bl	8002c30 <_init>
 80020b0:	1b64      	subs	r4, r4, r5
 80020b2:	10a4      	asrs	r4, r4, #2
 80020b4:	2600      	movs	r6, #0
 80020b6:	42a6      	cmp	r6, r4
 80020b8:	d105      	bne.n	80020c6 <__libc_init_array+0x2e>
 80020ba:	bd70      	pop	{r4, r5, r6, pc}
 80020bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c0:	4798      	blx	r3
 80020c2:	3601      	adds	r6, #1
 80020c4:	e7ee      	b.n	80020a4 <__libc_init_array+0xc>
 80020c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ca:	4798      	blx	r3
 80020cc:	3601      	adds	r6, #1
 80020ce:	e7f2      	b.n	80020b6 <__libc_init_array+0x1e>
 80020d0:	08002d28 	.word	0x08002d28
 80020d4:	08002d28 	.word	0x08002d28
 80020d8:	08002d28 	.word	0x08002d28
 80020dc:	08002d2c 	.word	0x08002d2c

080020e0 <__retarget_lock_init_recursive>:
 80020e0:	4770      	bx	lr

080020e2 <__retarget_lock_acquire_recursive>:
 80020e2:	4770      	bx	lr

080020e4 <__retarget_lock_release_recursive>:
 80020e4:	4770      	bx	lr
	...

080020e8 <_free_r>:
 80020e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020ea:	2900      	cmp	r1, #0
 80020ec:	d044      	beq.n	8002178 <_free_r+0x90>
 80020ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020f2:	9001      	str	r0, [sp, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f1a1 0404 	sub.w	r4, r1, #4
 80020fa:	bfb8      	it	lt
 80020fc:	18e4      	addlt	r4, r4, r3
 80020fe:	f000 f8df 	bl	80022c0 <__malloc_lock>
 8002102:	4a1e      	ldr	r2, [pc, #120]	; (800217c <_free_r+0x94>)
 8002104:	9801      	ldr	r0, [sp, #4]
 8002106:	6813      	ldr	r3, [r2, #0]
 8002108:	b933      	cbnz	r3, 8002118 <_free_r+0x30>
 800210a:	6063      	str	r3, [r4, #4]
 800210c:	6014      	str	r4, [r2, #0]
 800210e:	b003      	add	sp, #12
 8002110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002114:	f000 b8da 	b.w	80022cc <__malloc_unlock>
 8002118:	42a3      	cmp	r3, r4
 800211a:	d908      	bls.n	800212e <_free_r+0x46>
 800211c:	6825      	ldr	r5, [r4, #0]
 800211e:	1961      	adds	r1, r4, r5
 8002120:	428b      	cmp	r3, r1
 8002122:	bf01      	itttt	eq
 8002124:	6819      	ldreq	r1, [r3, #0]
 8002126:	685b      	ldreq	r3, [r3, #4]
 8002128:	1949      	addeq	r1, r1, r5
 800212a:	6021      	streq	r1, [r4, #0]
 800212c:	e7ed      	b.n	800210a <_free_r+0x22>
 800212e:	461a      	mov	r2, r3
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	b10b      	cbz	r3, 8002138 <_free_r+0x50>
 8002134:	42a3      	cmp	r3, r4
 8002136:	d9fa      	bls.n	800212e <_free_r+0x46>
 8002138:	6811      	ldr	r1, [r2, #0]
 800213a:	1855      	adds	r5, r2, r1
 800213c:	42a5      	cmp	r5, r4
 800213e:	d10b      	bne.n	8002158 <_free_r+0x70>
 8002140:	6824      	ldr	r4, [r4, #0]
 8002142:	4421      	add	r1, r4
 8002144:	1854      	adds	r4, r2, r1
 8002146:	42a3      	cmp	r3, r4
 8002148:	6011      	str	r1, [r2, #0]
 800214a:	d1e0      	bne.n	800210e <_free_r+0x26>
 800214c:	681c      	ldr	r4, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	6053      	str	r3, [r2, #4]
 8002152:	440c      	add	r4, r1
 8002154:	6014      	str	r4, [r2, #0]
 8002156:	e7da      	b.n	800210e <_free_r+0x26>
 8002158:	d902      	bls.n	8002160 <_free_r+0x78>
 800215a:	230c      	movs	r3, #12
 800215c:	6003      	str	r3, [r0, #0]
 800215e:	e7d6      	b.n	800210e <_free_r+0x26>
 8002160:	6825      	ldr	r5, [r4, #0]
 8002162:	1961      	adds	r1, r4, r5
 8002164:	428b      	cmp	r3, r1
 8002166:	bf04      	itt	eq
 8002168:	6819      	ldreq	r1, [r3, #0]
 800216a:	685b      	ldreq	r3, [r3, #4]
 800216c:	6063      	str	r3, [r4, #4]
 800216e:	bf04      	itt	eq
 8002170:	1949      	addeq	r1, r1, r5
 8002172:	6021      	streq	r1, [r4, #0]
 8002174:	6054      	str	r4, [r2, #4]
 8002176:	e7ca      	b.n	800210e <_free_r+0x26>
 8002178:	b003      	add	sp, #12
 800217a:	bd30      	pop	{r4, r5, pc}
 800217c:	2000026c 	.word	0x2000026c

08002180 <sbrk_aligned>:
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	4e0e      	ldr	r6, [pc, #56]	; (80021bc <sbrk_aligned+0x3c>)
 8002184:	460c      	mov	r4, r1
 8002186:	6831      	ldr	r1, [r6, #0]
 8002188:	4605      	mov	r5, r0
 800218a:	b911      	cbnz	r1, 8002192 <sbrk_aligned+0x12>
 800218c:	f000 fcbc 	bl	8002b08 <_sbrk_r>
 8002190:	6030      	str	r0, [r6, #0]
 8002192:	4621      	mov	r1, r4
 8002194:	4628      	mov	r0, r5
 8002196:	f000 fcb7 	bl	8002b08 <_sbrk_r>
 800219a:	1c43      	adds	r3, r0, #1
 800219c:	d00a      	beq.n	80021b4 <sbrk_aligned+0x34>
 800219e:	1cc4      	adds	r4, r0, #3
 80021a0:	f024 0403 	bic.w	r4, r4, #3
 80021a4:	42a0      	cmp	r0, r4
 80021a6:	d007      	beq.n	80021b8 <sbrk_aligned+0x38>
 80021a8:	1a21      	subs	r1, r4, r0
 80021aa:	4628      	mov	r0, r5
 80021ac:	f000 fcac 	bl	8002b08 <_sbrk_r>
 80021b0:	3001      	adds	r0, #1
 80021b2:	d101      	bne.n	80021b8 <sbrk_aligned+0x38>
 80021b4:	f04f 34ff 	mov.w	r4, #4294967295
 80021b8:	4620      	mov	r0, r4
 80021ba:	bd70      	pop	{r4, r5, r6, pc}
 80021bc:	20000270 	.word	0x20000270

080021c0 <_malloc_r>:
 80021c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021c4:	1ccd      	adds	r5, r1, #3
 80021c6:	f025 0503 	bic.w	r5, r5, #3
 80021ca:	3508      	adds	r5, #8
 80021cc:	2d0c      	cmp	r5, #12
 80021ce:	bf38      	it	cc
 80021d0:	250c      	movcc	r5, #12
 80021d2:	2d00      	cmp	r5, #0
 80021d4:	4607      	mov	r7, r0
 80021d6:	db01      	blt.n	80021dc <_malloc_r+0x1c>
 80021d8:	42a9      	cmp	r1, r5
 80021da:	d905      	bls.n	80021e8 <_malloc_r+0x28>
 80021dc:	230c      	movs	r3, #12
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	2600      	movs	r6, #0
 80021e2:	4630      	mov	r0, r6
 80021e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80022bc <_malloc_r+0xfc>
 80021ec:	f000 f868 	bl	80022c0 <__malloc_lock>
 80021f0:	f8d8 3000 	ldr.w	r3, [r8]
 80021f4:	461c      	mov	r4, r3
 80021f6:	bb5c      	cbnz	r4, 8002250 <_malloc_r+0x90>
 80021f8:	4629      	mov	r1, r5
 80021fa:	4638      	mov	r0, r7
 80021fc:	f7ff ffc0 	bl	8002180 <sbrk_aligned>
 8002200:	1c43      	adds	r3, r0, #1
 8002202:	4604      	mov	r4, r0
 8002204:	d155      	bne.n	80022b2 <_malloc_r+0xf2>
 8002206:	f8d8 4000 	ldr.w	r4, [r8]
 800220a:	4626      	mov	r6, r4
 800220c:	2e00      	cmp	r6, #0
 800220e:	d145      	bne.n	800229c <_malloc_r+0xdc>
 8002210:	2c00      	cmp	r4, #0
 8002212:	d048      	beq.n	80022a6 <_malloc_r+0xe6>
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	4631      	mov	r1, r6
 8002218:	4638      	mov	r0, r7
 800221a:	eb04 0903 	add.w	r9, r4, r3
 800221e:	f000 fc73 	bl	8002b08 <_sbrk_r>
 8002222:	4581      	cmp	r9, r0
 8002224:	d13f      	bne.n	80022a6 <_malloc_r+0xe6>
 8002226:	6821      	ldr	r1, [r4, #0]
 8002228:	1a6d      	subs	r5, r5, r1
 800222a:	4629      	mov	r1, r5
 800222c:	4638      	mov	r0, r7
 800222e:	f7ff ffa7 	bl	8002180 <sbrk_aligned>
 8002232:	3001      	adds	r0, #1
 8002234:	d037      	beq.n	80022a6 <_malloc_r+0xe6>
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	442b      	add	r3, r5
 800223a:	6023      	str	r3, [r4, #0]
 800223c:	f8d8 3000 	ldr.w	r3, [r8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d038      	beq.n	80022b6 <_malloc_r+0xf6>
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	42a2      	cmp	r2, r4
 8002248:	d12b      	bne.n	80022a2 <_malloc_r+0xe2>
 800224a:	2200      	movs	r2, #0
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	e00f      	b.n	8002270 <_malloc_r+0xb0>
 8002250:	6822      	ldr	r2, [r4, #0]
 8002252:	1b52      	subs	r2, r2, r5
 8002254:	d41f      	bmi.n	8002296 <_malloc_r+0xd6>
 8002256:	2a0b      	cmp	r2, #11
 8002258:	d917      	bls.n	800228a <_malloc_r+0xca>
 800225a:	1961      	adds	r1, r4, r5
 800225c:	42a3      	cmp	r3, r4
 800225e:	6025      	str	r5, [r4, #0]
 8002260:	bf18      	it	ne
 8002262:	6059      	strne	r1, [r3, #4]
 8002264:	6863      	ldr	r3, [r4, #4]
 8002266:	bf08      	it	eq
 8002268:	f8c8 1000 	streq.w	r1, [r8]
 800226c:	5162      	str	r2, [r4, r5]
 800226e:	604b      	str	r3, [r1, #4]
 8002270:	4638      	mov	r0, r7
 8002272:	f104 060b 	add.w	r6, r4, #11
 8002276:	f000 f829 	bl	80022cc <__malloc_unlock>
 800227a:	f026 0607 	bic.w	r6, r6, #7
 800227e:	1d23      	adds	r3, r4, #4
 8002280:	1af2      	subs	r2, r6, r3
 8002282:	d0ae      	beq.n	80021e2 <_malloc_r+0x22>
 8002284:	1b9b      	subs	r3, r3, r6
 8002286:	50a3      	str	r3, [r4, r2]
 8002288:	e7ab      	b.n	80021e2 <_malloc_r+0x22>
 800228a:	42a3      	cmp	r3, r4
 800228c:	6862      	ldr	r2, [r4, #4]
 800228e:	d1dd      	bne.n	800224c <_malloc_r+0x8c>
 8002290:	f8c8 2000 	str.w	r2, [r8]
 8002294:	e7ec      	b.n	8002270 <_malloc_r+0xb0>
 8002296:	4623      	mov	r3, r4
 8002298:	6864      	ldr	r4, [r4, #4]
 800229a:	e7ac      	b.n	80021f6 <_malloc_r+0x36>
 800229c:	4634      	mov	r4, r6
 800229e:	6876      	ldr	r6, [r6, #4]
 80022a0:	e7b4      	b.n	800220c <_malloc_r+0x4c>
 80022a2:	4613      	mov	r3, r2
 80022a4:	e7cc      	b.n	8002240 <_malloc_r+0x80>
 80022a6:	230c      	movs	r3, #12
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	4638      	mov	r0, r7
 80022ac:	f000 f80e 	bl	80022cc <__malloc_unlock>
 80022b0:	e797      	b.n	80021e2 <_malloc_r+0x22>
 80022b2:	6025      	str	r5, [r4, #0]
 80022b4:	e7dc      	b.n	8002270 <_malloc_r+0xb0>
 80022b6:	605b      	str	r3, [r3, #4]
 80022b8:	deff      	udf	#255	; 0xff
 80022ba:	bf00      	nop
 80022bc:	2000026c 	.word	0x2000026c

080022c0 <__malloc_lock>:
 80022c0:	4801      	ldr	r0, [pc, #4]	; (80022c8 <__malloc_lock+0x8>)
 80022c2:	f7ff bf0e 	b.w	80020e2 <__retarget_lock_acquire_recursive>
 80022c6:	bf00      	nop
 80022c8:	20000268 	.word	0x20000268

080022cc <__malloc_unlock>:
 80022cc:	4801      	ldr	r0, [pc, #4]	; (80022d4 <__malloc_unlock+0x8>)
 80022ce:	f7ff bf09 	b.w	80020e4 <__retarget_lock_release_recursive>
 80022d2:	bf00      	nop
 80022d4:	20000268 	.word	0x20000268

080022d8 <__sfputc_r>:
 80022d8:	6893      	ldr	r3, [r2, #8]
 80022da:	3b01      	subs	r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	b410      	push	{r4}
 80022e0:	6093      	str	r3, [r2, #8]
 80022e2:	da08      	bge.n	80022f6 <__sfputc_r+0x1e>
 80022e4:	6994      	ldr	r4, [r2, #24]
 80022e6:	42a3      	cmp	r3, r4
 80022e8:	db01      	blt.n	80022ee <__sfputc_r+0x16>
 80022ea:	290a      	cmp	r1, #10
 80022ec:	d103      	bne.n	80022f6 <__sfputc_r+0x1e>
 80022ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022f2:	f000 bb73 	b.w	80029dc <__swbuf_r>
 80022f6:	6813      	ldr	r3, [r2, #0]
 80022f8:	1c58      	adds	r0, r3, #1
 80022fa:	6010      	str	r0, [r2, #0]
 80022fc:	7019      	strb	r1, [r3, #0]
 80022fe:	4608      	mov	r0, r1
 8002300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002304:	4770      	bx	lr

08002306 <__sfputs_r>:
 8002306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002308:	4606      	mov	r6, r0
 800230a:	460f      	mov	r7, r1
 800230c:	4614      	mov	r4, r2
 800230e:	18d5      	adds	r5, r2, r3
 8002310:	42ac      	cmp	r4, r5
 8002312:	d101      	bne.n	8002318 <__sfputs_r+0x12>
 8002314:	2000      	movs	r0, #0
 8002316:	e007      	b.n	8002328 <__sfputs_r+0x22>
 8002318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800231c:	463a      	mov	r2, r7
 800231e:	4630      	mov	r0, r6
 8002320:	f7ff ffda 	bl	80022d8 <__sfputc_r>
 8002324:	1c43      	adds	r3, r0, #1
 8002326:	d1f3      	bne.n	8002310 <__sfputs_r+0xa>
 8002328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800232c <_vfiprintf_r>:
 800232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002330:	460d      	mov	r5, r1
 8002332:	b09d      	sub	sp, #116	; 0x74
 8002334:	4614      	mov	r4, r2
 8002336:	4698      	mov	r8, r3
 8002338:	4606      	mov	r6, r0
 800233a:	b118      	cbz	r0, 8002344 <_vfiprintf_r+0x18>
 800233c:	6a03      	ldr	r3, [r0, #32]
 800233e:	b90b      	cbnz	r3, 8002344 <_vfiprintf_r+0x18>
 8002340:	f7ff fdca 	bl	8001ed8 <__sinit>
 8002344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002346:	07d9      	lsls	r1, r3, #31
 8002348:	d405      	bmi.n	8002356 <_vfiprintf_r+0x2a>
 800234a:	89ab      	ldrh	r3, [r5, #12]
 800234c:	059a      	lsls	r2, r3, #22
 800234e:	d402      	bmi.n	8002356 <_vfiprintf_r+0x2a>
 8002350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002352:	f7ff fec6 	bl	80020e2 <__retarget_lock_acquire_recursive>
 8002356:	89ab      	ldrh	r3, [r5, #12]
 8002358:	071b      	lsls	r3, r3, #28
 800235a:	d501      	bpl.n	8002360 <_vfiprintf_r+0x34>
 800235c:	692b      	ldr	r3, [r5, #16]
 800235e:	b99b      	cbnz	r3, 8002388 <_vfiprintf_r+0x5c>
 8002360:	4629      	mov	r1, r5
 8002362:	4630      	mov	r0, r6
 8002364:	f000 fb78 	bl	8002a58 <__swsetup_r>
 8002368:	b170      	cbz	r0, 8002388 <_vfiprintf_r+0x5c>
 800236a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800236c:	07dc      	lsls	r4, r3, #31
 800236e:	d504      	bpl.n	800237a <_vfiprintf_r+0x4e>
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	b01d      	add	sp, #116	; 0x74
 8002376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800237a:	89ab      	ldrh	r3, [r5, #12]
 800237c:	0598      	lsls	r0, r3, #22
 800237e:	d4f7      	bmi.n	8002370 <_vfiprintf_r+0x44>
 8002380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002382:	f7ff feaf 	bl	80020e4 <__retarget_lock_release_recursive>
 8002386:	e7f3      	b.n	8002370 <_vfiprintf_r+0x44>
 8002388:	2300      	movs	r3, #0
 800238a:	9309      	str	r3, [sp, #36]	; 0x24
 800238c:	2320      	movs	r3, #32
 800238e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002392:	f8cd 800c 	str.w	r8, [sp, #12]
 8002396:	2330      	movs	r3, #48	; 0x30
 8002398:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800254c <_vfiprintf_r+0x220>
 800239c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023a0:	f04f 0901 	mov.w	r9, #1
 80023a4:	4623      	mov	r3, r4
 80023a6:	469a      	mov	sl, r3
 80023a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023ac:	b10a      	cbz	r2, 80023b2 <_vfiprintf_r+0x86>
 80023ae:	2a25      	cmp	r2, #37	; 0x25
 80023b0:	d1f9      	bne.n	80023a6 <_vfiprintf_r+0x7a>
 80023b2:	ebba 0b04 	subs.w	fp, sl, r4
 80023b6:	d00b      	beq.n	80023d0 <_vfiprintf_r+0xa4>
 80023b8:	465b      	mov	r3, fp
 80023ba:	4622      	mov	r2, r4
 80023bc:	4629      	mov	r1, r5
 80023be:	4630      	mov	r0, r6
 80023c0:	f7ff ffa1 	bl	8002306 <__sfputs_r>
 80023c4:	3001      	adds	r0, #1
 80023c6:	f000 80a9 	beq.w	800251c <_vfiprintf_r+0x1f0>
 80023ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023cc:	445a      	add	r2, fp
 80023ce:	9209      	str	r2, [sp, #36]	; 0x24
 80023d0:	f89a 3000 	ldrb.w	r3, [sl]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a1 	beq.w	800251c <_vfiprintf_r+0x1f0>
 80023da:	2300      	movs	r3, #0
 80023dc:	f04f 32ff 	mov.w	r2, #4294967295
 80023e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023e4:	f10a 0a01 	add.w	sl, sl, #1
 80023e8:	9304      	str	r3, [sp, #16]
 80023ea:	9307      	str	r3, [sp, #28]
 80023ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023f0:	931a      	str	r3, [sp, #104]	; 0x68
 80023f2:	4654      	mov	r4, sl
 80023f4:	2205      	movs	r2, #5
 80023f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023fa:	4854      	ldr	r0, [pc, #336]	; (800254c <_vfiprintf_r+0x220>)
 80023fc:	f7fd ff20 	bl	8000240 <memchr>
 8002400:	9a04      	ldr	r2, [sp, #16]
 8002402:	b9d8      	cbnz	r0, 800243c <_vfiprintf_r+0x110>
 8002404:	06d1      	lsls	r1, r2, #27
 8002406:	bf44      	itt	mi
 8002408:	2320      	movmi	r3, #32
 800240a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800240e:	0713      	lsls	r3, r2, #28
 8002410:	bf44      	itt	mi
 8002412:	232b      	movmi	r3, #43	; 0x2b
 8002414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002418:	f89a 3000 	ldrb.w	r3, [sl]
 800241c:	2b2a      	cmp	r3, #42	; 0x2a
 800241e:	d015      	beq.n	800244c <_vfiprintf_r+0x120>
 8002420:	9a07      	ldr	r2, [sp, #28]
 8002422:	4654      	mov	r4, sl
 8002424:	2000      	movs	r0, #0
 8002426:	f04f 0c0a 	mov.w	ip, #10
 800242a:	4621      	mov	r1, r4
 800242c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002430:	3b30      	subs	r3, #48	; 0x30
 8002432:	2b09      	cmp	r3, #9
 8002434:	d94d      	bls.n	80024d2 <_vfiprintf_r+0x1a6>
 8002436:	b1b0      	cbz	r0, 8002466 <_vfiprintf_r+0x13a>
 8002438:	9207      	str	r2, [sp, #28]
 800243a:	e014      	b.n	8002466 <_vfiprintf_r+0x13a>
 800243c:	eba0 0308 	sub.w	r3, r0, r8
 8002440:	fa09 f303 	lsl.w	r3, r9, r3
 8002444:	4313      	orrs	r3, r2
 8002446:	9304      	str	r3, [sp, #16]
 8002448:	46a2      	mov	sl, r4
 800244a:	e7d2      	b.n	80023f2 <_vfiprintf_r+0xc6>
 800244c:	9b03      	ldr	r3, [sp, #12]
 800244e:	1d19      	adds	r1, r3, #4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	9103      	str	r1, [sp, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	bfbb      	ittet	lt
 8002458:	425b      	neglt	r3, r3
 800245a:	f042 0202 	orrlt.w	r2, r2, #2
 800245e:	9307      	strge	r3, [sp, #28]
 8002460:	9307      	strlt	r3, [sp, #28]
 8002462:	bfb8      	it	lt
 8002464:	9204      	strlt	r2, [sp, #16]
 8002466:	7823      	ldrb	r3, [r4, #0]
 8002468:	2b2e      	cmp	r3, #46	; 0x2e
 800246a:	d10c      	bne.n	8002486 <_vfiprintf_r+0x15a>
 800246c:	7863      	ldrb	r3, [r4, #1]
 800246e:	2b2a      	cmp	r3, #42	; 0x2a
 8002470:	d134      	bne.n	80024dc <_vfiprintf_r+0x1b0>
 8002472:	9b03      	ldr	r3, [sp, #12]
 8002474:	1d1a      	adds	r2, r3, #4
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	9203      	str	r2, [sp, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	bfb8      	it	lt
 800247e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002482:	3402      	adds	r4, #2
 8002484:	9305      	str	r3, [sp, #20]
 8002486:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800255c <_vfiprintf_r+0x230>
 800248a:	7821      	ldrb	r1, [r4, #0]
 800248c:	2203      	movs	r2, #3
 800248e:	4650      	mov	r0, sl
 8002490:	f7fd fed6 	bl	8000240 <memchr>
 8002494:	b138      	cbz	r0, 80024a6 <_vfiprintf_r+0x17a>
 8002496:	9b04      	ldr	r3, [sp, #16]
 8002498:	eba0 000a 	sub.w	r0, r0, sl
 800249c:	2240      	movs	r2, #64	; 0x40
 800249e:	4082      	lsls	r2, r0
 80024a0:	4313      	orrs	r3, r2
 80024a2:	3401      	adds	r4, #1
 80024a4:	9304      	str	r3, [sp, #16]
 80024a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024aa:	4829      	ldr	r0, [pc, #164]	; (8002550 <_vfiprintf_r+0x224>)
 80024ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024b0:	2206      	movs	r2, #6
 80024b2:	f7fd fec5 	bl	8000240 <memchr>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d03f      	beq.n	800253a <_vfiprintf_r+0x20e>
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <_vfiprintf_r+0x228>)
 80024bc:	bb1b      	cbnz	r3, 8002506 <_vfiprintf_r+0x1da>
 80024be:	9b03      	ldr	r3, [sp, #12]
 80024c0:	3307      	adds	r3, #7
 80024c2:	f023 0307 	bic.w	r3, r3, #7
 80024c6:	3308      	adds	r3, #8
 80024c8:	9303      	str	r3, [sp, #12]
 80024ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024cc:	443b      	add	r3, r7
 80024ce:	9309      	str	r3, [sp, #36]	; 0x24
 80024d0:	e768      	b.n	80023a4 <_vfiprintf_r+0x78>
 80024d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80024d6:	460c      	mov	r4, r1
 80024d8:	2001      	movs	r0, #1
 80024da:	e7a6      	b.n	800242a <_vfiprintf_r+0xfe>
 80024dc:	2300      	movs	r3, #0
 80024de:	3401      	adds	r4, #1
 80024e0:	9305      	str	r3, [sp, #20]
 80024e2:	4619      	mov	r1, r3
 80024e4:	f04f 0c0a 	mov.w	ip, #10
 80024e8:	4620      	mov	r0, r4
 80024ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024ee:	3a30      	subs	r2, #48	; 0x30
 80024f0:	2a09      	cmp	r2, #9
 80024f2:	d903      	bls.n	80024fc <_vfiprintf_r+0x1d0>
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0c6      	beq.n	8002486 <_vfiprintf_r+0x15a>
 80024f8:	9105      	str	r1, [sp, #20]
 80024fa:	e7c4      	b.n	8002486 <_vfiprintf_r+0x15a>
 80024fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002500:	4604      	mov	r4, r0
 8002502:	2301      	movs	r3, #1
 8002504:	e7f0      	b.n	80024e8 <_vfiprintf_r+0x1bc>
 8002506:	ab03      	add	r3, sp, #12
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	462a      	mov	r2, r5
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <_vfiprintf_r+0x22c>)
 800250e:	a904      	add	r1, sp, #16
 8002510:	4630      	mov	r0, r6
 8002512:	f3af 8000 	nop.w
 8002516:	4607      	mov	r7, r0
 8002518:	1c78      	adds	r0, r7, #1
 800251a:	d1d6      	bne.n	80024ca <_vfiprintf_r+0x19e>
 800251c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800251e:	07d9      	lsls	r1, r3, #31
 8002520:	d405      	bmi.n	800252e <_vfiprintf_r+0x202>
 8002522:	89ab      	ldrh	r3, [r5, #12]
 8002524:	059a      	lsls	r2, r3, #22
 8002526:	d402      	bmi.n	800252e <_vfiprintf_r+0x202>
 8002528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800252a:	f7ff fddb 	bl	80020e4 <__retarget_lock_release_recursive>
 800252e:	89ab      	ldrh	r3, [r5, #12]
 8002530:	065b      	lsls	r3, r3, #25
 8002532:	f53f af1d 	bmi.w	8002370 <_vfiprintf_r+0x44>
 8002536:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002538:	e71c      	b.n	8002374 <_vfiprintf_r+0x48>
 800253a:	ab03      	add	r3, sp, #12
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	462a      	mov	r2, r5
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <_vfiprintf_r+0x22c>)
 8002542:	a904      	add	r1, sp, #16
 8002544:	4630      	mov	r0, r6
 8002546:	f000 f879 	bl	800263c <_printf_i>
 800254a:	e7e4      	b.n	8002516 <_vfiprintf_r+0x1ea>
 800254c:	08002cec 	.word	0x08002cec
 8002550:	08002cf6 	.word	0x08002cf6
 8002554:	00000000 	.word	0x00000000
 8002558:	08002307 	.word	0x08002307
 800255c:	08002cf2 	.word	0x08002cf2

08002560 <_printf_common>:
 8002560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002564:	4616      	mov	r6, r2
 8002566:	4699      	mov	r9, r3
 8002568:	688a      	ldr	r2, [r1, #8]
 800256a:	690b      	ldr	r3, [r1, #16]
 800256c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002570:	4293      	cmp	r3, r2
 8002572:	bfb8      	it	lt
 8002574:	4613      	movlt	r3, r2
 8002576:	6033      	str	r3, [r6, #0]
 8002578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800257c:	4607      	mov	r7, r0
 800257e:	460c      	mov	r4, r1
 8002580:	b10a      	cbz	r2, 8002586 <_printf_common+0x26>
 8002582:	3301      	adds	r3, #1
 8002584:	6033      	str	r3, [r6, #0]
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	0699      	lsls	r1, r3, #26
 800258a:	bf42      	ittt	mi
 800258c:	6833      	ldrmi	r3, [r6, #0]
 800258e:	3302      	addmi	r3, #2
 8002590:	6033      	strmi	r3, [r6, #0]
 8002592:	6825      	ldr	r5, [r4, #0]
 8002594:	f015 0506 	ands.w	r5, r5, #6
 8002598:	d106      	bne.n	80025a8 <_printf_common+0x48>
 800259a:	f104 0a19 	add.w	sl, r4, #25
 800259e:	68e3      	ldr	r3, [r4, #12]
 80025a0:	6832      	ldr	r2, [r6, #0]
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	42ab      	cmp	r3, r5
 80025a6:	dc26      	bgt.n	80025f6 <_printf_common+0x96>
 80025a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80025ac:	1e13      	subs	r3, r2, #0
 80025ae:	6822      	ldr	r2, [r4, #0]
 80025b0:	bf18      	it	ne
 80025b2:	2301      	movne	r3, #1
 80025b4:	0692      	lsls	r2, r2, #26
 80025b6:	d42b      	bmi.n	8002610 <_printf_common+0xb0>
 80025b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025bc:	4649      	mov	r1, r9
 80025be:	4638      	mov	r0, r7
 80025c0:	47c0      	blx	r8
 80025c2:	3001      	adds	r0, #1
 80025c4:	d01e      	beq.n	8002604 <_printf_common+0xa4>
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	6922      	ldr	r2, [r4, #16]
 80025ca:	f003 0306 	and.w	r3, r3, #6
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf02      	ittt	eq
 80025d2:	68e5      	ldreq	r5, [r4, #12]
 80025d4:	6833      	ldreq	r3, [r6, #0]
 80025d6:	1aed      	subeq	r5, r5, r3
 80025d8:	68a3      	ldr	r3, [r4, #8]
 80025da:	bf0c      	ite	eq
 80025dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025e0:	2500      	movne	r5, #0
 80025e2:	4293      	cmp	r3, r2
 80025e4:	bfc4      	itt	gt
 80025e6:	1a9b      	subgt	r3, r3, r2
 80025e8:	18ed      	addgt	r5, r5, r3
 80025ea:	2600      	movs	r6, #0
 80025ec:	341a      	adds	r4, #26
 80025ee:	42b5      	cmp	r5, r6
 80025f0:	d11a      	bne.n	8002628 <_printf_common+0xc8>
 80025f2:	2000      	movs	r0, #0
 80025f4:	e008      	b.n	8002608 <_printf_common+0xa8>
 80025f6:	2301      	movs	r3, #1
 80025f8:	4652      	mov	r2, sl
 80025fa:	4649      	mov	r1, r9
 80025fc:	4638      	mov	r0, r7
 80025fe:	47c0      	blx	r8
 8002600:	3001      	adds	r0, #1
 8002602:	d103      	bne.n	800260c <_printf_common+0xac>
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800260c:	3501      	adds	r5, #1
 800260e:	e7c6      	b.n	800259e <_printf_common+0x3e>
 8002610:	18e1      	adds	r1, r4, r3
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	2030      	movs	r0, #48	; 0x30
 8002616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800261a:	4422      	add	r2, r4
 800261c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002624:	3302      	adds	r3, #2
 8002626:	e7c7      	b.n	80025b8 <_printf_common+0x58>
 8002628:	2301      	movs	r3, #1
 800262a:	4622      	mov	r2, r4
 800262c:	4649      	mov	r1, r9
 800262e:	4638      	mov	r0, r7
 8002630:	47c0      	blx	r8
 8002632:	3001      	adds	r0, #1
 8002634:	d0e6      	beq.n	8002604 <_printf_common+0xa4>
 8002636:	3601      	adds	r6, #1
 8002638:	e7d9      	b.n	80025ee <_printf_common+0x8e>
	...

0800263c <_printf_i>:
 800263c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002640:	7e0f      	ldrb	r7, [r1, #24]
 8002642:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002644:	2f78      	cmp	r7, #120	; 0x78
 8002646:	4691      	mov	r9, r2
 8002648:	4680      	mov	r8, r0
 800264a:	460c      	mov	r4, r1
 800264c:	469a      	mov	sl, r3
 800264e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002652:	d807      	bhi.n	8002664 <_printf_i+0x28>
 8002654:	2f62      	cmp	r7, #98	; 0x62
 8002656:	d80a      	bhi.n	800266e <_printf_i+0x32>
 8002658:	2f00      	cmp	r7, #0
 800265a:	f000 80d4 	beq.w	8002806 <_printf_i+0x1ca>
 800265e:	2f58      	cmp	r7, #88	; 0x58
 8002660:	f000 80c0 	beq.w	80027e4 <_printf_i+0x1a8>
 8002664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800266c:	e03a      	b.n	80026e4 <_printf_i+0xa8>
 800266e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002672:	2b15      	cmp	r3, #21
 8002674:	d8f6      	bhi.n	8002664 <_printf_i+0x28>
 8002676:	a101      	add	r1, pc, #4	; (adr r1, 800267c <_printf_i+0x40>)
 8002678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800267c:	080026d5 	.word	0x080026d5
 8002680:	080026e9 	.word	0x080026e9
 8002684:	08002665 	.word	0x08002665
 8002688:	08002665 	.word	0x08002665
 800268c:	08002665 	.word	0x08002665
 8002690:	08002665 	.word	0x08002665
 8002694:	080026e9 	.word	0x080026e9
 8002698:	08002665 	.word	0x08002665
 800269c:	08002665 	.word	0x08002665
 80026a0:	08002665 	.word	0x08002665
 80026a4:	08002665 	.word	0x08002665
 80026a8:	080027ed 	.word	0x080027ed
 80026ac:	08002715 	.word	0x08002715
 80026b0:	080027a7 	.word	0x080027a7
 80026b4:	08002665 	.word	0x08002665
 80026b8:	08002665 	.word	0x08002665
 80026bc:	0800280f 	.word	0x0800280f
 80026c0:	08002665 	.word	0x08002665
 80026c4:	08002715 	.word	0x08002715
 80026c8:	08002665 	.word	0x08002665
 80026cc:	08002665 	.word	0x08002665
 80026d0:	080027af 	.word	0x080027af
 80026d4:	682b      	ldr	r3, [r5, #0]
 80026d6:	1d1a      	adds	r2, r3, #4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	602a      	str	r2, [r5, #0]
 80026dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026e4:	2301      	movs	r3, #1
 80026e6:	e09f      	b.n	8002828 <_printf_i+0x1ec>
 80026e8:	6820      	ldr	r0, [r4, #0]
 80026ea:	682b      	ldr	r3, [r5, #0]
 80026ec:	0607      	lsls	r7, r0, #24
 80026ee:	f103 0104 	add.w	r1, r3, #4
 80026f2:	6029      	str	r1, [r5, #0]
 80026f4:	d501      	bpl.n	80026fa <_printf_i+0xbe>
 80026f6:	681e      	ldr	r6, [r3, #0]
 80026f8:	e003      	b.n	8002702 <_printf_i+0xc6>
 80026fa:	0646      	lsls	r6, r0, #25
 80026fc:	d5fb      	bpl.n	80026f6 <_printf_i+0xba>
 80026fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002702:	2e00      	cmp	r6, #0
 8002704:	da03      	bge.n	800270e <_printf_i+0xd2>
 8002706:	232d      	movs	r3, #45	; 0x2d
 8002708:	4276      	negs	r6, r6
 800270a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800270e:	485a      	ldr	r0, [pc, #360]	; (8002878 <_printf_i+0x23c>)
 8002710:	230a      	movs	r3, #10
 8002712:	e012      	b.n	800273a <_printf_i+0xfe>
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	6820      	ldr	r0, [r4, #0]
 8002718:	1d19      	adds	r1, r3, #4
 800271a:	6029      	str	r1, [r5, #0]
 800271c:	0605      	lsls	r5, r0, #24
 800271e:	d501      	bpl.n	8002724 <_printf_i+0xe8>
 8002720:	681e      	ldr	r6, [r3, #0]
 8002722:	e002      	b.n	800272a <_printf_i+0xee>
 8002724:	0641      	lsls	r1, r0, #25
 8002726:	d5fb      	bpl.n	8002720 <_printf_i+0xe4>
 8002728:	881e      	ldrh	r6, [r3, #0]
 800272a:	4853      	ldr	r0, [pc, #332]	; (8002878 <_printf_i+0x23c>)
 800272c:	2f6f      	cmp	r7, #111	; 0x6f
 800272e:	bf0c      	ite	eq
 8002730:	2308      	moveq	r3, #8
 8002732:	230a      	movne	r3, #10
 8002734:	2100      	movs	r1, #0
 8002736:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800273a:	6865      	ldr	r5, [r4, #4]
 800273c:	60a5      	str	r5, [r4, #8]
 800273e:	2d00      	cmp	r5, #0
 8002740:	bfa2      	ittt	ge
 8002742:	6821      	ldrge	r1, [r4, #0]
 8002744:	f021 0104 	bicge.w	r1, r1, #4
 8002748:	6021      	strge	r1, [r4, #0]
 800274a:	b90e      	cbnz	r6, 8002750 <_printf_i+0x114>
 800274c:	2d00      	cmp	r5, #0
 800274e:	d04b      	beq.n	80027e8 <_printf_i+0x1ac>
 8002750:	4615      	mov	r5, r2
 8002752:	fbb6 f1f3 	udiv	r1, r6, r3
 8002756:	fb03 6711 	mls	r7, r3, r1, r6
 800275a:	5dc7      	ldrb	r7, [r0, r7]
 800275c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002760:	4637      	mov	r7, r6
 8002762:	42bb      	cmp	r3, r7
 8002764:	460e      	mov	r6, r1
 8002766:	d9f4      	bls.n	8002752 <_printf_i+0x116>
 8002768:	2b08      	cmp	r3, #8
 800276a:	d10b      	bne.n	8002784 <_printf_i+0x148>
 800276c:	6823      	ldr	r3, [r4, #0]
 800276e:	07de      	lsls	r6, r3, #31
 8002770:	d508      	bpl.n	8002784 <_printf_i+0x148>
 8002772:	6923      	ldr	r3, [r4, #16]
 8002774:	6861      	ldr	r1, [r4, #4]
 8002776:	4299      	cmp	r1, r3
 8002778:	bfde      	ittt	le
 800277a:	2330      	movle	r3, #48	; 0x30
 800277c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002780:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002784:	1b52      	subs	r2, r2, r5
 8002786:	6122      	str	r2, [r4, #16]
 8002788:	f8cd a000 	str.w	sl, [sp]
 800278c:	464b      	mov	r3, r9
 800278e:	aa03      	add	r2, sp, #12
 8002790:	4621      	mov	r1, r4
 8002792:	4640      	mov	r0, r8
 8002794:	f7ff fee4 	bl	8002560 <_printf_common>
 8002798:	3001      	adds	r0, #1
 800279a:	d14a      	bne.n	8002832 <_printf_i+0x1f6>
 800279c:	f04f 30ff 	mov.w	r0, #4294967295
 80027a0:	b004      	add	sp, #16
 80027a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	f043 0320 	orr.w	r3, r3, #32
 80027ac:	6023      	str	r3, [r4, #0]
 80027ae:	4833      	ldr	r0, [pc, #204]	; (800287c <_printf_i+0x240>)
 80027b0:	2778      	movs	r7, #120	; 0x78
 80027b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	6829      	ldr	r1, [r5, #0]
 80027ba:	061f      	lsls	r7, r3, #24
 80027bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80027c0:	d402      	bmi.n	80027c8 <_printf_i+0x18c>
 80027c2:	065f      	lsls	r7, r3, #25
 80027c4:	bf48      	it	mi
 80027c6:	b2b6      	uxthmi	r6, r6
 80027c8:	07df      	lsls	r7, r3, #31
 80027ca:	bf48      	it	mi
 80027cc:	f043 0320 	orrmi.w	r3, r3, #32
 80027d0:	6029      	str	r1, [r5, #0]
 80027d2:	bf48      	it	mi
 80027d4:	6023      	strmi	r3, [r4, #0]
 80027d6:	b91e      	cbnz	r6, 80027e0 <_printf_i+0x1a4>
 80027d8:	6823      	ldr	r3, [r4, #0]
 80027da:	f023 0320 	bic.w	r3, r3, #32
 80027de:	6023      	str	r3, [r4, #0]
 80027e0:	2310      	movs	r3, #16
 80027e2:	e7a7      	b.n	8002734 <_printf_i+0xf8>
 80027e4:	4824      	ldr	r0, [pc, #144]	; (8002878 <_printf_i+0x23c>)
 80027e6:	e7e4      	b.n	80027b2 <_printf_i+0x176>
 80027e8:	4615      	mov	r5, r2
 80027ea:	e7bd      	b.n	8002768 <_printf_i+0x12c>
 80027ec:	682b      	ldr	r3, [r5, #0]
 80027ee:	6826      	ldr	r6, [r4, #0]
 80027f0:	6961      	ldr	r1, [r4, #20]
 80027f2:	1d18      	adds	r0, r3, #4
 80027f4:	6028      	str	r0, [r5, #0]
 80027f6:	0635      	lsls	r5, r6, #24
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	d501      	bpl.n	8002800 <_printf_i+0x1c4>
 80027fc:	6019      	str	r1, [r3, #0]
 80027fe:	e002      	b.n	8002806 <_printf_i+0x1ca>
 8002800:	0670      	lsls	r0, r6, #25
 8002802:	d5fb      	bpl.n	80027fc <_printf_i+0x1c0>
 8002804:	8019      	strh	r1, [r3, #0]
 8002806:	2300      	movs	r3, #0
 8002808:	6123      	str	r3, [r4, #16]
 800280a:	4615      	mov	r5, r2
 800280c:	e7bc      	b.n	8002788 <_printf_i+0x14c>
 800280e:	682b      	ldr	r3, [r5, #0]
 8002810:	1d1a      	adds	r2, r3, #4
 8002812:	602a      	str	r2, [r5, #0]
 8002814:	681d      	ldr	r5, [r3, #0]
 8002816:	6862      	ldr	r2, [r4, #4]
 8002818:	2100      	movs	r1, #0
 800281a:	4628      	mov	r0, r5
 800281c:	f7fd fd10 	bl	8000240 <memchr>
 8002820:	b108      	cbz	r0, 8002826 <_printf_i+0x1ea>
 8002822:	1b40      	subs	r0, r0, r5
 8002824:	6060      	str	r0, [r4, #4]
 8002826:	6863      	ldr	r3, [r4, #4]
 8002828:	6123      	str	r3, [r4, #16]
 800282a:	2300      	movs	r3, #0
 800282c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002830:	e7aa      	b.n	8002788 <_printf_i+0x14c>
 8002832:	6923      	ldr	r3, [r4, #16]
 8002834:	462a      	mov	r2, r5
 8002836:	4649      	mov	r1, r9
 8002838:	4640      	mov	r0, r8
 800283a:	47d0      	blx	sl
 800283c:	3001      	adds	r0, #1
 800283e:	d0ad      	beq.n	800279c <_printf_i+0x160>
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	079b      	lsls	r3, r3, #30
 8002844:	d413      	bmi.n	800286e <_printf_i+0x232>
 8002846:	68e0      	ldr	r0, [r4, #12]
 8002848:	9b03      	ldr	r3, [sp, #12]
 800284a:	4298      	cmp	r0, r3
 800284c:	bfb8      	it	lt
 800284e:	4618      	movlt	r0, r3
 8002850:	e7a6      	b.n	80027a0 <_printf_i+0x164>
 8002852:	2301      	movs	r3, #1
 8002854:	4632      	mov	r2, r6
 8002856:	4649      	mov	r1, r9
 8002858:	4640      	mov	r0, r8
 800285a:	47d0      	blx	sl
 800285c:	3001      	adds	r0, #1
 800285e:	d09d      	beq.n	800279c <_printf_i+0x160>
 8002860:	3501      	adds	r5, #1
 8002862:	68e3      	ldr	r3, [r4, #12]
 8002864:	9903      	ldr	r1, [sp, #12]
 8002866:	1a5b      	subs	r3, r3, r1
 8002868:	42ab      	cmp	r3, r5
 800286a:	dcf2      	bgt.n	8002852 <_printf_i+0x216>
 800286c:	e7eb      	b.n	8002846 <_printf_i+0x20a>
 800286e:	2500      	movs	r5, #0
 8002870:	f104 0619 	add.w	r6, r4, #25
 8002874:	e7f5      	b.n	8002862 <_printf_i+0x226>
 8002876:	bf00      	nop
 8002878:	08002cfd 	.word	0x08002cfd
 800287c:	08002d0e 	.word	0x08002d0e

08002880 <__sflush_r>:
 8002880:	898a      	ldrh	r2, [r1, #12]
 8002882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002886:	4605      	mov	r5, r0
 8002888:	0710      	lsls	r0, r2, #28
 800288a:	460c      	mov	r4, r1
 800288c:	d458      	bmi.n	8002940 <__sflush_r+0xc0>
 800288e:	684b      	ldr	r3, [r1, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	dc05      	bgt.n	80028a0 <__sflush_r+0x20>
 8002894:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	dc02      	bgt.n	80028a0 <__sflush_r+0x20>
 800289a:	2000      	movs	r0, #0
 800289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028a2:	2e00      	cmp	r6, #0
 80028a4:	d0f9      	beq.n	800289a <__sflush_r+0x1a>
 80028a6:	2300      	movs	r3, #0
 80028a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028ac:	682f      	ldr	r7, [r5, #0]
 80028ae:	6a21      	ldr	r1, [r4, #32]
 80028b0:	602b      	str	r3, [r5, #0]
 80028b2:	d032      	beq.n	800291a <__sflush_r+0x9a>
 80028b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028b6:	89a3      	ldrh	r3, [r4, #12]
 80028b8:	075a      	lsls	r2, r3, #29
 80028ba:	d505      	bpl.n	80028c8 <__sflush_r+0x48>
 80028bc:	6863      	ldr	r3, [r4, #4]
 80028be:	1ac0      	subs	r0, r0, r3
 80028c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028c2:	b10b      	cbz	r3, 80028c8 <__sflush_r+0x48>
 80028c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028c6:	1ac0      	subs	r0, r0, r3
 80028c8:	2300      	movs	r3, #0
 80028ca:	4602      	mov	r2, r0
 80028cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028ce:	6a21      	ldr	r1, [r4, #32]
 80028d0:	4628      	mov	r0, r5
 80028d2:	47b0      	blx	r6
 80028d4:	1c43      	adds	r3, r0, #1
 80028d6:	89a3      	ldrh	r3, [r4, #12]
 80028d8:	d106      	bne.n	80028e8 <__sflush_r+0x68>
 80028da:	6829      	ldr	r1, [r5, #0]
 80028dc:	291d      	cmp	r1, #29
 80028de:	d82b      	bhi.n	8002938 <__sflush_r+0xb8>
 80028e0:	4a29      	ldr	r2, [pc, #164]	; (8002988 <__sflush_r+0x108>)
 80028e2:	410a      	asrs	r2, r1
 80028e4:	07d6      	lsls	r6, r2, #31
 80028e6:	d427      	bmi.n	8002938 <__sflush_r+0xb8>
 80028e8:	2200      	movs	r2, #0
 80028ea:	6062      	str	r2, [r4, #4]
 80028ec:	04d9      	lsls	r1, r3, #19
 80028ee:	6922      	ldr	r2, [r4, #16]
 80028f0:	6022      	str	r2, [r4, #0]
 80028f2:	d504      	bpl.n	80028fe <__sflush_r+0x7e>
 80028f4:	1c42      	adds	r2, r0, #1
 80028f6:	d101      	bne.n	80028fc <__sflush_r+0x7c>
 80028f8:	682b      	ldr	r3, [r5, #0]
 80028fa:	b903      	cbnz	r3, 80028fe <__sflush_r+0x7e>
 80028fc:	6560      	str	r0, [r4, #84]	; 0x54
 80028fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002900:	602f      	str	r7, [r5, #0]
 8002902:	2900      	cmp	r1, #0
 8002904:	d0c9      	beq.n	800289a <__sflush_r+0x1a>
 8002906:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800290a:	4299      	cmp	r1, r3
 800290c:	d002      	beq.n	8002914 <__sflush_r+0x94>
 800290e:	4628      	mov	r0, r5
 8002910:	f7ff fbea 	bl	80020e8 <_free_r>
 8002914:	2000      	movs	r0, #0
 8002916:	6360      	str	r0, [r4, #52]	; 0x34
 8002918:	e7c0      	b.n	800289c <__sflush_r+0x1c>
 800291a:	2301      	movs	r3, #1
 800291c:	4628      	mov	r0, r5
 800291e:	47b0      	blx	r6
 8002920:	1c41      	adds	r1, r0, #1
 8002922:	d1c8      	bne.n	80028b6 <__sflush_r+0x36>
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0c5      	beq.n	80028b6 <__sflush_r+0x36>
 800292a:	2b1d      	cmp	r3, #29
 800292c:	d001      	beq.n	8002932 <__sflush_r+0xb2>
 800292e:	2b16      	cmp	r3, #22
 8002930:	d101      	bne.n	8002936 <__sflush_r+0xb6>
 8002932:	602f      	str	r7, [r5, #0]
 8002934:	e7b1      	b.n	800289a <__sflush_r+0x1a>
 8002936:	89a3      	ldrh	r3, [r4, #12]
 8002938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800293c:	81a3      	strh	r3, [r4, #12]
 800293e:	e7ad      	b.n	800289c <__sflush_r+0x1c>
 8002940:	690f      	ldr	r7, [r1, #16]
 8002942:	2f00      	cmp	r7, #0
 8002944:	d0a9      	beq.n	800289a <__sflush_r+0x1a>
 8002946:	0793      	lsls	r3, r2, #30
 8002948:	680e      	ldr	r6, [r1, #0]
 800294a:	bf08      	it	eq
 800294c:	694b      	ldreq	r3, [r1, #20]
 800294e:	600f      	str	r7, [r1, #0]
 8002950:	bf18      	it	ne
 8002952:	2300      	movne	r3, #0
 8002954:	eba6 0807 	sub.w	r8, r6, r7
 8002958:	608b      	str	r3, [r1, #8]
 800295a:	f1b8 0f00 	cmp.w	r8, #0
 800295e:	dd9c      	ble.n	800289a <__sflush_r+0x1a>
 8002960:	6a21      	ldr	r1, [r4, #32]
 8002962:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002964:	4643      	mov	r3, r8
 8002966:	463a      	mov	r2, r7
 8002968:	4628      	mov	r0, r5
 800296a:	47b0      	blx	r6
 800296c:	2800      	cmp	r0, #0
 800296e:	dc06      	bgt.n	800297e <__sflush_r+0xfe>
 8002970:	89a3      	ldrh	r3, [r4, #12]
 8002972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002976:	81a3      	strh	r3, [r4, #12]
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	e78e      	b.n	800289c <__sflush_r+0x1c>
 800297e:	4407      	add	r7, r0
 8002980:	eba8 0800 	sub.w	r8, r8, r0
 8002984:	e7e9      	b.n	800295a <__sflush_r+0xda>
 8002986:	bf00      	nop
 8002988:	dfbffffe 	.word	0xdfbffffe

0800298c <_fflush_r>:
 800298c:	b538      	push	{r3, r4, r5, lr}
 800298e:	690b      	ldr	r3, [r1, #16]
 8002990:	4605      	mov	r5, r0
 8002992:	460c      	mov	r4, r1
 8002994:	b913      	cbnz	r3, 800299c <_fflush_r+0x10>
 8002996:	2500      	movs	r5, #0
 8002998:	4628      	mov	r0, r5
 800299a:	bd38      	pop	{r3, r4, r5, pc}
 800299c:	b118      	cbz	r0, 80029a6 <_fflush_r+0x1a>
 800299e:	6a03      	ldr	r3, [r0, #32]
 80029a0:	b90b      	cbnz	r3, 80029a6 <_fflush_r+0x1a>
 80029a2:	f7ff fa99 	bl	8001ed8 <__sinit>
 80029a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f3      	beq.n	8002996 <_fflush_r+0xa>
 80029ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029b0:	07d0      	lsls	r0, r2, #31
 80029b2:	d404      	bmi.n	80029be <_fflush_r+0x32>
 80029b4:	0599      	lsls	r1, r3, #22
 80029b6:	d402      	bmi.n	80029be <_fflush_r+0x32>
 80029b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ba:	f7ff fb92 	bl	80020e2 <__retarget_lock_acquire_recursive>
 80029be:	4628      	mov	r0, r5
 80029c0:	4621      	mov	r1, r4
 80029c2:	f7ff ff5d 	bl	8002880 <__sflush_r>
 80029c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029c8:	07da      	lsls	r2, r3, #31
 80029ca:	4605      	mov	r5, r0
 80029cc:	d4e4      	bmi.n	8002998 <_fflush_r+0xc>
 80029ce:	89a3      	ldrh	r3, [r4, #12]
 80029d0:	059b      	lsls	r3, r3, #22
 80029d2:	d4e1      	bmi.n	8002998 <_fflush_r+0xc>
 80029d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029d6:	f7ff fb85 	bl	80020e4 <__retarget_lock_release_recursive>
 80029da:	e7dd      	b.n	8002998 <_fflush_r+0xc>

080029dc <__swbuf_r>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	460e      	mov	r6, r1
 80029e0:	4614      	mov	r4, r2
 80029e2:	4605      	mov	r5, r0
 80029e4:	b118      	cbz	r0, 80029ee <__swbuf_r+0x12>
 80029e6:	6a03      	ldr	r3, [r0, #32]
 80029e8:	b90b      	cbnz	r3, 80029ee <__swbuf_r+0x12>
 80029ea:	f7ff fa75 	bl	8001ed8 <__sinit>
 80029ee:	69a3      	ldr	r3, [r4, #24]
 80029f0:	60a3      	str	r3, [r4, #8]
 80029f2:	89a3      	ldrh	r3, [r4, #12]
 80029f4:	071a      	lsls	r2, r3, #28
 80029f6:	d525      	bpl.n	8002a44 <__swbuf_r+0x68>
 80029f8:	6923      	ldr	r3, [r4, #16]
 80029fa:	b31b      	cbz	r3, 8002a44 <__swbuf_r+0x68>
 80029fc:	6823      	ldr	r3, [r4, #0]
 80029fe:	6922      	ldr	r2, [r4, #16]
 8002a00:	1a98      	subs	r0, r3, r2
 8002a02:	6963      	ldr	r3, [r4, #20]
 8002a04:	b2f6      	uxtb	r6, r6
 8002a06:	4283      	cmp	r3, r0
 8002a08:	4637      	mov	r7, r6
 8002a0a:	dc04      	bgt.n	8002a16 <__swbuf_r+0x3a>
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	4628      	mov	r0, r5
 8002a10:	f7ff ffbc 	bl	800298c <_fflush_r>
 8002a14:	b9e0      	cbnz	r0, 8002a50 <__swbuf_r+0x74>
 8002a16:	68a3      	ldr	r3, [r4, #8]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	60a3      	str	r3, [r4, #8]
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	6022      	str	r2, [r4, #0]
 8002a22:	701e      	strb	r6, [r3, #0]
 8002a24:	6962      	ldr	r2, [r4, #20]
 8002a26:	1c43      	adds	r3, r0, #1
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d004      	beq.n	8002a36 <__swbuf_r+0x5a>
 8002a2c:	89a3      	ldrh	r3, [r4, #12]
 8002a2e:	07db      	lsls	r3, r3, #31
 8002a30:	d506      	bpl.n	8002a40 <__swbuf_r+0x64>
 8002a32:	2e0a      	cmp	r6, #10
 8002a34:	d104      	bne.n	8002a40 <__swbuf_r+0x64>
 8002a36:	4621      	mov	r1, r4
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f7ff ffa7 	bl	800298c <_fflush_r>
 8002a3e:	b938      	cbnz	r0, 8002a50 <__swbuf_r+0x74>
 8002a40:	4638      	mov	r0, r7
 8002a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a44:	4621      	mov	r1, r4
 8002a46:	4628      	mov	r0, r5
 8002a48:	f000 f806 	bl	8002a58 <__swsetup_r>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d0d5      	beq.n	80029fc <__swbuf_r+0x20>
 8002a50:	f04f 37ff 	mov.w	r7, #4294967295
 8002a54:	e7f4      	b.n	8002a40 <__swbuf_r+0x64>
	...

08002a58 <__swsetup_r>:
 8002a58:	b538      	push	{r3, r4, r5, lr}
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <__swsetup_r+0xac>)
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	460c      	mov	r4, r1
 8002a62:	b118      	cbz	r0, 8002a6c <__swsetup_r+0x14>
 8002a64:	6a03      	ldr	r3, [r0, #32]
 8002a66:	b90b      	cbnz	r3, 8002a6c <__swsetup_r+0x14>
 8002a68:	f7ff fa36 	bl	8001ed8 <__sinit>
 8002a6c:	89a3      	ldrh	r3, [r4, #12]
 8002a6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a72:	0718      	lsls	r0, r3, #28
 8002a74:	d422      	bmi.n	8002abc <__swsetup_r+0x64>
 8002a76:	06d9      	lsls	r1, r3, #27
 8002a78:	d407      	bmi.n	8002a8a <__swsetup_r+0x32>
 8002a7a:	2309      	movs	r3, #9
 8002a7c:	602b      	str	r3, [r5, #0]
 8002a7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002a82:	81a3      	strh	r3, [r4, #12]
 8002a84:	f04f 30ff 	mov.w	r0, #4294967295
 8002a88:	e034      	b.n	8002af4 <__swsetup_r+0x9c>
 8002a8a:	0758      	lsls	r0, r3, #29
 8002a8c:	d512      	bpl.n	8002ab4 <__swsetup_r+0x5c>
 8002a8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a90:	b141      	cbz	r1, 8002aa4 <__swsetup_r+0x4c>
 8002a92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a96:	4299      	cmp	r1, r3
 8002a98:	d002      	beq.n	8002aa0 <__swsetup_r+0x48>
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	f7ff fb24 	bl	80020e8 <_free_r>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	6363      	str	r3, [r4, #52]	; 0x34
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002aaa:	81a3      	strh	r3, [r4, #12]
 8002aac:	2300      	movs	r3, #0
 8002aae:	6063      	str	r3, [r4, #4]
 8002ab0:	6923      	ldr	r3, [r4, #16]
 8002ab2:	6023      	str	r3, [r4, #0]
 8002ab4:	89a3      	ldrh	r3, [r4, #12]
 8002ab6:	f043 0308 	orr.w	r3, r3, #8
 8002aba:	81a3      	strh	r3, [r4, #12]
 8002abc:	6923      	ldr	r3, [r4, #16]
 8002abe:	b94b      	cbnz	r3, 8002ad4 <__swsetup_r+0x7c>
 8002ac0:	89a3      	ldrh	r3, [r4, #12]
 8002ac2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aca:	d003      	beq.n	8002ad4 <__swsetup_r+0x7c>
 8002acc:	4621      	mov	r1, r4
 8002ace:	4628      	mov	r0, r5
 8002ad0:	f000 f850 	bl	8002b74 <__smakebuf_r>
 8002ad4:	89a0      	ldrh	r0, [r4, #12]
 8002ad6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ada:	f010 0301 	ands.w	r3, r0, #1
 8002ade:	d00a      	beq.n	8002af6 <__swsetup_r+0x9e>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60a3      	str	r3, [r4, #8]
 8002ae4:	6963      	ldr	r3, [r4, #20]
 8002ae6:	425b      	negs	r3, r3
 8002ae8:	61a3      	str	r3, [r4, #24]
 8002aea:	6923      	ldr	r3, [r4, #16]
 8002aec:	b943      	cbnz	r3, 8002b00 <__swsetup_r+0xa8>
 8002aee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002af2:	d1c4      	bne.n	8002a7e <__swsetup_r+0x26>
 8002af4:	bd38      	pop	{r3, r4, r5, pc}
 8002af6:	0781      	lsls	r1, r0, #30
 8002af8:	bf58      	it	pl
 8002afa:	6963      	ldrpl	r3, [r4, #20]
 8002afc:	60a3      	str	r3, [r4, #8]
 8002afe:	e7f4      	b.n	8002aea <__swsetup_r+0x92>
 8002b00:	2000      	movs	r0, #0
 8002b02:	e7f7      	b.n	8002af4 <__swsetup_r+0x9c>
 8002b04:	20000074 	.word	0x20000074

08002b08 <_sbrk_r>:
 8002b08:	b538      	push	{r3, r4, r5, lr}
 8002b0a:	4d06      	ldr	r5, [pc, #24]	; (8002b24 <_sbrk_r+0x1c>)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	4604      	mov	r4, r0
 8002b10:	4608      	mov	r0, r1
 8002b12:	602b      	str	r3, [r5, #0]
 8002b14:	f7ff f824 	bl	8001b60 <_sbrk>
 8002b18:	1c43      	adds	r3, r0, #1
 8002b1a:	d102      	bne.n	8002b22 <_sbrk_r+0x1a>
 8002b1c:	682b      	ldr	r3, [r5, #0]
 8002b1e:	b103      	cbz	r3, 8002b22 <_sbrk_r+0x1a>
 8002b20:	6023      	str	r3, [r4, #0]
 8002b22:	bd38      	pop	{r3, r4, r5, pc}
 8002b24:	20000264 	.word	0x20000264

08002b28 <__swhatbuf_r>:
 8002b28:	b570      	push	{r4, r5, r6, lr}
 8002b2a:	460c      	mov	r4, r1
 8002b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b30:	2900      	cmp	r1, #0
 8002b32:	b096      	sub	sp, #88	; 0x58
 8002b34:	4615      	mov	r5, r2
 8002b36:	461e      	mov	r6, r3
 8002b38:	da0d      	bge.n	8002b56 <__swhatbuf_r+0x2e>
 8002b3a:	89a3      	ldrh	r3, [r4, #12]
 8002b3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b40:	f04f 0100 	mov.w	r1, #0
 8002b44:	bf0c      	ite	eq
 8002b46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002b4a:	2340      	movne	r3, #64	; 0x40
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	6031      	str	r1, [r6, #0]
 8002b50:	602b      	str	r3, [r5, #0]
 8002b52:	b016      	add	sp, #88	; 0x58
 8002b54:	bd70      	pop	{r4, r5, r6, pc}
 8002b56:	466a      	mov	r2, sp
 8002b58:	f000 f848 	bl	8002bec <_fstat_r>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	dbec      	blt.n	8002b3a <__swhatbuf_r+0x12>
 8002b60:	9901      	ldr	r1, [sp, #4]
 8002b62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002b66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002b6a:	4259      	negs	r1, r3
 8002b6c:	4159      	adcs	r1, r3
 8002b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b72:	e7eb      	b.n	8002b4c <__swhatbuf_r+0x24>

08002b74 <__smakebuf_r>:
 8002b74:	898b      	ldrh	r3, [r1, #12]
 8002b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b78:	079d      	lsls	r5, r3, #30
 8002b7a:	4606      	mov	r6, r0
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	d507      	bpl.n	8002b90 <__smakebuf_r+0x1c>
 8002b80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	6123      	str	r3, [r4, #16]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	6163      	str	r3, [r4, #20]
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
 8002b90:	ab01      	add	r3, sp, #4
 8002b92:	466a      	mov	r2, sp
 8002b94:	f7ff ffc8 	bl	8002b28 <__swhatbuf_r>
 8002b98:	9900      	ldr	r1, [sp, #0]
 8002b9a:	4605      	mov	r5, r0
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	f7ff fb0f 	bl	80021c0 <_malloc_r>
 8002ba2:	b948      	cbnz	r0, 8002bb8 <__smakebuf_r+0x44>
 8002ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ba8:	059a      	lsls	r2, r3, #22
 8002baa:	d4ef      	bmi.n	8002b8c <__smakebuf_r+0x18>
 8002bac:	f023 0303 	bic.w	r3, r3, #3
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	81a3      	strh	r3, [r4, #12]
 8002bb6:	e7e3      	b.n	8002b80 <__smakebuf_r+0xc>
 8002bb8:	89a3      	ldrh	r3, [r4, #12]
 8002bba:	6020      	str	r0, [r4, #0]
 8002bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc0:	81a3      	strh	r3, [r4, #12]
 8002bc2:	9b00      	ldr	r3, [sp, #0]
 8002bc4:	6163      	str	r3, [r4, #20]
 8002bc6:	9b01      	ldr	r3, [sp, #4]
 8002bc8:	6120      	str	r0, [r4, #16]
 8002bca:	b15b      	cbz	r3, 8002be4 <__smakebuf_r+0x70>
 8002bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	f000 f81d 	bl	8002c10 <_isatty_r>
 8002bd6:	b128      	cbz	r0, 8002be4 <__smakebuf_r+0x70>
 8002bd8:	89a3      	ldrh	r3, [r4, #12]
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	81a3      	strh	r3, [r4, #12]
 8002be4:	89a3      	ldrh	r3, [r4, #12]
 8002be6:	431d      	orrs	r5, r3
 8002be8:	81a5      	strh	r5, [r4, #12]
 8002bea:	e7cf      	b.n	8002b8c <__smakebuf_r+0x18>

08002bec <_fstat_r>:
 8002bec:	b538      	push	{r3, r4, r5, lr}
 8002bee:	4d07      	ldr	r5, [pc, #28]	; (8002c0c <_fstat_r+0x20>)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	602b      	str	r3, [r5, #0]
 8002bfa:	f7fe ffce 	bl	8001b9a <_fstat>
 8002bfe:	1c43      	adds	r3, r0, #1
 8002c00:	d102      	bne.n	8002c08 <_fstat_r+0x1c>
 8002c02:	682b      	ldr	r3, [r5, #0]
 8002c04:	b103      	cbz	r3, 8002c08 <_fstat_r+0x1c>
 8002c06:	6023      	str	r3, [r4, #0]
 8002c08:	bd38      	pop	{r3, r4, r5, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000264 	.word	0x20000264

08002c10 <_isatty_r>:
 8002c10:	b538      	push	{r3, r4, r5, lr}
 8002c12:	4d06      	ldr	r5, [pc, #24]	; (8002c2c <_isatty_r+0x1c>)
 8002c14:	2300      	movs	r3, #0
 8002c16:	4604      	mov	r4, r0
 8002c18:	4608      	mov	r0, r1
 8002c1a:	602b      	str	r3, [r5, #0]
 8002c1c:	f7fe ffc2 	bl	8001ba4 <_isatty>
 8002c20:	1c43      	adds	r3, r0, #1
 8002c22:	d102      	bne.n	8002c2a <_isatty_r+0x1a>
 8002c24:	682b      	ldr	r3, [r5, #0]
 8002c26:	b103      	cbz	r3, 8002c2a <_isatty_r+0x1a>
 8002c28:	6023      	str	r3, [r4, #0]
 8002c2a:	bd38      	pop	{r3, r4, r5, pc}
 8002c2c:	20000264 	.word	0x20000264

08002c30 <_init>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	bf00      	nop
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr

08002c3c <_fini>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	bf00      	nop
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr

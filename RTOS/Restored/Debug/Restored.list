
Restored.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4d4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009988  0800d6d8  0800d6d8  0001d6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017060  08017060  00030a24  2**0
                  CONTENTS
  4 .ARM          00000008  08017060  08017060  00027060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017068  08017068  00030a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017068  08017068  00027068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801706c  0801706c  0002706c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008e4  20000000  08017070  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200008e4  08017954  000308e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000984  080179f4  00030984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002fe8  20000a24  08017a94  00030a24  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20003a0c  08017a94  00033a0c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030a24  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030a52  2**0
                  CONTENTS, READONLY
 15 .debug_info   00022551  00000000  00000000  00030a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003dc8  00000000  00000000  00052fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000019f8  00000000  00000000  00056db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001461  00000000  00000000  000587a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d561  00000000  00000000  00059c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00026ed6  00000000  00000000  0008716a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00114341  00000000  00000000  000ae040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000080f0  00000000  00000000  001c2384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  001ca474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000a24 	.word	0x20000a24
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d6bc 	.word	0x0800d6bc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000a28 	.word	0x20000a28
 800023c:	0800d6bc 	.word	0x0800d6bc

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN 1 */
		int feat_len = TD_FEAT + pow(2,TREE_DEPTH); 			// features array length
 8000612:	2343      	movs	r3, #67	; 0x43
 8000614:	607b      	str	r3, [r7, #4]
		feat_array = (double *)malloc(sizeof(double) * feat_len);	/* features array {0, ... ,TD_FEAT-1, TDFEAT, feat_len-1}
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4618      	mov	r0, r3
 800061c:	f00a fba2 	bl	800ad64 <malloc>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <main+0x74>)
 8000626:	601a      	str	r2, [r3, #0]
																		time-domain		...		freq-domain		*/
		feat_stdsd = (double *)malloc(sizeof(double) * feat_len); // standardised features
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	4618      	mov	r0, r3
 800062e:	f00a fb99 	bl	800ad64 <malloc>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <main+0x78>)
 8000638:	601a      	str	r2, [r3, #0]
	  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063a:	f001 fb82 	bl	8001d42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063e:	f000 f82b 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 fa2b 	bl	8000a9c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000646:	f000 f9cb 	bl	80009e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800064a:	f000 f9f9 	bl	8000a40 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800064e:	f000 f897 	bl	8000780 <MX_ADC1_Init>
  MX_ETH_Init();
 8000652:	f000 f8e7 	bl	8000824 <MX_ETH_Init>
  MX_TIM6_Init();
 8000656:	f000 f98d 	bl	8000974 <MX_TIM6_Init>
  MX_RTC_Init();
 800065a:	f000 f931 	bl	80008c0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3); 						// redirect printf and scanf to huart
 800065e:	480a      	ldr	r0, [pc, #40]	; (8000688 <main+0x7c>)
 8000660:	f000 ffa0 	bl	80015a4 <RetargetInit>
  HAL_TIM_Base_Start_IT(&htim6);  			// start the timer 5 kHz
 8000664:	4809      	ldr	r0, [pc, #36]	; (800068c <main+0x80>)
 8000666:	f004 fcb5 	bl	8004fd4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, Rx_data, 4); 	// start new data read from huart
 800066a:	2204      	movs	r2, #4
 800066c:	4908      	ldr	r1, [pc, #32]	; (8000690 <main+0x84>)
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <main+0x7c>)
 8000670:	f005 f951 	bl	8005916 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf(" \r\n Entering the superloop... \r\n");
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <main+0x88>)
 8000676:	f00a fde7 	bl	800b248 <puts>
  while (1)
  {
	  snapReadyHandler();
 800067a:	f000 fbeb 	bl	8000e54 <snapReadyHandler>
  {
 800067e:	e7fc      	b.n	800067a <main+0x6e>
 8000680:	20003884 	.word	0x20003884
 8000684:	20003888 	.word	0x20003888
 8000688:	20000bdc 	.word	0x20000bdc
 800068c:	20000b90 	.word	0x20000b90
 8000690:	200038a0 	.word	0x200038a0
 8000694:	0800d6d8 	.word	0x0800d6d8

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2234      	movs	r2, #52	; 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f00a ff8e 	bl	800b5c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006bc:	f002 ffc6 	bl	800364c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <SystemClock_Config+0xe0>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a2c      	ldr	r2, [pc, #176]	; (8000778 <SystemClock_Config+0xe0>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <SystemClock_Config+0xe0>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <SystemClock_Config+0xe4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e0:	4a26      	ldr	r2, [pc, #152]	; (800077c <SystemClock_Config+0xe4>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <SystemClock_Config+0xe4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006f4:	2309      	movs	r3, #9
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006fe:	2301      	movs	r3, #1
 8000700:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000710:	2360      	movs	r3, #96	; 0x60
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000718:	2304      	movs	r3, #4
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4618      	mov	r0, r3
 8000726:	f002 fff1 	bl	800370c <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000730:	f000 fcc6 	bl	80010c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000734:	f002 ff9a 	bl	800366c <HAL_PWREx_EnableOverDrive>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800073e:	f000 fcbf 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2103      	movs	r1, #3
 800075e:	4618      	mov	r0, r3
 8000760:	f003 fa82 	bl	8003c68 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800076a:	f000 fca9 	bl	80010c0 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	; 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_ADC1_Init+0x98>)
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <MX_ADC1_Init+0x9c>)
 8000796:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_ADC1_Init+0x98>)
 800079a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800079e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_ADC1_Init+0x98>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_ADC1_Init+0x98>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_ADC1_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_ADC1_Init+0x98>)
 80007c2:	4a17      	ldr	r2, [pc, #92]	; (8000820 <MX_ADC1_Init+0xa0>)
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_ADC1_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_ADC1_Init+0x98>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_ADC1_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC1_Init+0x98>)
 80007dc:	2201      	movs	r2, #1
 80007de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_ADC1_Init+0x98>)
 80007e2:	f001 fb2f 	bl	8001e44 <HAL_ADC_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007ec:	f000 fc68 	bl	80010c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007f0:	2303      	movs	r3, #3
 80007f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	463b      	mov	r3, r7
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_ADC1_Init+0x98>)
 8000802:	f001 fcc9 	bl	8002198 <HAL_ADC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800080c:	f000 fc58 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000a78 	.word	0x20000a78
 800081c:	40012000 	.word	0x40012000
 8000820:	0f000001 	.word	0x0f000001

08000824 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_ETH_Init+0x84>)
 800082a:	4a20      	ldr	r2, [pc, #128]	; (80008ac <MX_ETH_Init+0x88>)
 800082c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_ETH_Init+0x8c>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_ETH_Init+0x8c>)
 8000836:	2280      	movs	r2, #128	; 0x80
 8000838:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_ETH_Init+0x8c>)
 800083c:	22e1      	movs	r2, #225	; 0xe1
 800083e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_ETH_Init+0x8c>)
 8000842:	2200      	movs	r2, #0
 8000844:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_ETH_Init+0x8c>)
 8000848:	2200      	movs	r2, #0
 800084a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_ETH_Init+0x8c>)
 800084e:	2200      	movs	r2, #0
 8000850:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_ETH_Init+0x84>)
 8000854:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <MX_ETH_Init+0x8c>)
 8000856:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_ETH_Init+0x84>)
 800085a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800085e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_ETH_Init+0x84>)
 8000862:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <MX_ETH_Init+0x90>)
 8000864:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_ETH_Init+0x84>)
 8000868:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <MX_ETH_Init+0x94>)
 800086a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_ETH_Init+0x84>)
 800086e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000872:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_ETH_Init+0x84>)
 8000876:	f002 f883 	bl	8002980 <HAL_ETH_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 fc1e 	bl	80010c0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000884:	2238      	movs	r2, #56	; 0x38
 8000886:	2100      	movs	r1, #0
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_ETH_Init+0x98>)
 800088a:	f00a fe9d 	bl	800b5c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_ETH_Init+0x98>)
 8000890:	2221      	movs	r2, #33	; 0x21
 8000892:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_ETH_Init+0x98>)
 8000896:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800089a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_ETH_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000ac0 	.word	0x20000ac0
 80008ac:	40028000 	.word	0x40028000
 80008b0:	200038ac 	.word	0x200038ac
 80008b4:	20000984 	.word	0x20000984
 80008b8:	200008e4 	.word	0x200008e4
 80008bc:	20000a40 	.word	0x20000a40

080008c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008d4:	2300      	movs	r3, #0
 80008d6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008d8:	4b24      	ldr	r3, [pc, #144]	; (800096c <MX_RTC_Init+0xac>)
 80008da:	4a25      	ldr	r2, [pc, #148]	; (8000970 <MX_RTC_Init+0xb0>)
 80008dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008de:	4b23      	ldr	r3, [pc, #140]	; (800096c <MX_RTC_Init+0xac>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008e4:	4b21      	ldr	r3, [pc, #132]	; (800096c <MX_RTC_Init+0xac>)
 80008e6:	227f      	movs	r2, #127	; 0x7f
 80008e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <MX_RTC_Init+0xac>)
 80008ec:	22ff      	movs	r2, #255	; 0xff
 80008ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_RTC_Init+0xac>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_RTC_Init+0xac>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_RTC_Init+0xac>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000902:	481a      	ldr	r0, [pc, #104]	; (800096c <MX_RTC_Init+0xac>)
 8000904:	f003 fffe 	bl	8004904 <HAL_RTC_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800090e:	f000 fbd7 	bl	80010c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000912:	2300      	movs	r3, #0
 8000914:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000916:	2300      	movs	r3, #0
 8000918:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800091a:	2300      	movs	r3, #0
 800091c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2201      	movs	r2, #1
 800092a:	4619      	mov	r1, r3
 800092c:	480f      	ldr	r0, [pc, #60]	; (800096c <MX_RTC_Init+0xac>)
 800092e:	f004 f86d 	bl	8004a0c <HAL_RTC_SetTime>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000938:	f000 fbc2 	bl	80010c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800093c:	2301      	movs	r3, #1
 800093e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000940:	2301      	movs	r3, #1
 8000942:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000944:	2301      	movs	r3, #1
 8000946:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000948:	2300      	movs	r3, #0
 800094a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	2201      	movs	r2, #1
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_RTC_Init+0xac>)
 8000954:	f004 f952 	bl	8004bfc <HAL_RTC_SetDate>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800095e:	f000 fbaf 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000b70 	.word	0x20000b70
 8000970:	40002800 	.word	0x40002800

08000974 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_TIM6_Init+0x64>)
 8000986:	4a15      	ldr	r2, [pc, #84]	; (80009dc <MX_TIM6_Init+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_TIM6_Init+0x64>)
 800098c:	2217      	movs	r2, #23
 800098e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_TIM6_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 800-1;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_TIM6_Init+0x64>)
 8000998:	f240 321f 	movw	r2, #799	; 0x31f
 800099c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_TIM6_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_TIM6_Init+0x64>)
 80009a6:	f004 fabd 	bl	8004f24 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009b0:	f000 fb86 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_TIM6_Init+0x64>)
 80009c2:	f004 fd67 	bl	8005494 <HAL_TIMEx_MasterConfigSynchronization>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009cc:	f000 fb78 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000b90 	.word	0x20000b90
 80009dc:	40001000 	.word	0x40001000

080009e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 80009e6:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <MX_USART3_UART_Init+0x5c>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART3_UART_Init+0x58>)
 8000a24:	f004 fde2 	bl	80055ec <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a2e:	f000 fb47 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000bdc 	.word	0x20000bdc
 8000a3c:	40004800 	.word	0x40004800

08000a40 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2206      	movs	r2, #6
 8000a50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a60:	2202      	movs	r2, #2
 8000a62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a84:	f002 fc9a 	bl	80033bc <HAL_PCD_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a8e:	f000 fb17 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000c64 	.word	0x20000c64

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a4a      	ldr	r2, [pc, #296]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	61bb      	str	r3, [r7, #24]
 8000ac8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a44      	ldr	r2, [pc, #272]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b3f      	ldr	r3, [pc, #252]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a3e      	ldr	r2, [pc, #248]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a38      	ldr	r2, [pc, #224]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a32      	ldr	r2, [pc, #200]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a2c      	ldr	r2, [pc, #176]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b48:	4826      	ldr	r0, [pc, #152]	; (8000be4 <MX_GPIO_Init+0x148>)
 8000b4a:	f002 fbeb 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4825      	ldr	r0, [pc, #148]	; (8000be8 <MX_GPIO_Init+0x14c>)
 8000b54:	f002 fbe6 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b64:	2302      	movs	r3, #2
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481f      	ldr	r0, [pc, #124]	; (8000bec <MX_GPIO_Init+0x150>)
 8000b70:	f002 fa2c 	bl	8002fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b74:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4815      	ldr	r0, [pc, #84]	; (8000be4 <MX_GPIO_Init+0x148>)
 8000b8e:	f002 fa1d 	bl	8002fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b92:	2340      	movs	r3, #64	; 0x40
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480f      	ldr	r0, [pc, #60]	; (8000be8 <MX_GPIO_Init+0x14c>)
 8000baa:	f002 fa0f 	bl	8002fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <MX_GPIO_Init+0x14c>)
 8000bc2:	f002 fa03 	bl	8002fcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2028      	movs	r0, #40	; 0x28
 8000bcc:	f001 fe0f 	bl	80027ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd0:	2028      	movs	r0, #40	; 0x28
 8000bd2:	f001 fe28 	bl	8002826 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3730      	adds	r7, #48	; 0x30
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020400 	.word	0x40020400
 8000be8:	40021800 	.word	0x40021800
 8000bec:	40020800 	.word	0x40020800

08000bf0 <setRTCclock>:

/* USER CODE BEGIN 4 */
void setRTCclock() {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b090      	sub	sp, #64	; 0x40
 8000bf4:	af04      	add	r7, sp, #16
	RTC_DateTypeDef sDate;

	int year, month, day, hour, minute, second;

	// Get date and time from the user
	printf("Enter the date and time (YYYY MM DD hh mm ss): ");
 8000bf6:	4826      	ldr	r0, [pc, #152]	; (8000c90 <setRTCclock+0xa0>)
 8000bf8:	f00a fac0 	bl	800b17c <iprintf>
	scanf("%d %d %d %d %d %d", &year, &month, &day, &hour, &minute, &second);
 8000bfc:	f107 000c 	add.w	r0, r7, #12
 8000c00:	f107 0210 	add.w	r2, r7, #16
 8000c04:	f107 0114 	add.w	r1, r7, #20
 8000c08:	463b      	mov	r3, r7
 8000c0a:	9302      	str	r3, [sp, #8]
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	4603      	mov	r3, r0
 8000c18:	481e      	ldr	r0, [pc, #120]	; (8000c94 <setRTCclock+0xa4>)
 8000c1a:	f00a fb1d 	bl	800b258 <iscanf>

	// Set the Date
	sDate.Year = year - 2000;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	3330      	adds	r3, #48	; 0x30
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	76fb      	strb	r3, [r7, #27]
	sDate.Month = month;
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	767b      	strb	r3, [r7, #25]
	sDate.Date = day;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	76bb      	strb	r3, [r7, #26]
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c34:	2301      	movs	r3, #1
 8000c36:	763b      	strb	r3, [r7, #24]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8000c38:	f107 0318 	add.w	r3, r7, #24
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4815      	ldr	r0, [pc, #84]	; (8000c98 <setRTCclock+0xa8>)
 8000c42:	f003 ffdb 	bl	8004bfc <HAL_RTC_SetDate>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <setRTCclock+0x60>
		/* Initialization Error */
		Error_Handler();
 8000c4c:	f000 fa38 	bl	80010c0 <Error_Handler>
	}

	// Set the Time
	sTime.Hours = hour;
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	773b      	strb	r3, [r7, #28]
	sTime.Minutes = minute;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	777b      	strb	r3, [r7, #29]
	sTime.Seconds = second;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	77bb      	strb	r3, [r7, #30]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	4809      	ldr	r0, [pc, #36]	; (8000c98 <setRTCclock+0xa8>)
 8000c74:	f003 feca 	bl	8004a0c <HAL_RTC_SetTime>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <setRTCclock+0x92>
		/* Initialization Error */
		Error_Handler();
 8000c7e:	f000 fa1f 	bl	80010c0 <Error_Handler>
	}

	printf("RTC clock set successfully.\n");
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <setRTCclock+0xac>)
 8000c84:	f00a fae0 	bl	800b248 <puts>
	return;
 8000c88:	bf00      	nop
}
 8000c8a:	3730      	adds	r7, #48	; 0x30
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	0800d6f8 	.word	0x0800d6f8
 8000c94:	0800d728 	.word	0x0800d728
 8000c98:	20000b70 	.word	0x20000b70
 8000c9c:	0800d73c 	.word	0x0800d73c

08000ca0 <get_time>:

void get_time()
{
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af04      	add	r7, sp, #16
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	4619      	mov	r1, r3
 8000cac:	480f      	ldr	r0, [pc, #60]	; (8000cec <get_time+0x4c>)
 8000cae:	f003 ff47 	bl	8004b40 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480c      	ldr	r0, [pc, #48]	; (8000cec <get_time+0x4c>)
 8000cbc:	f004 f822 	bl	8004d04 <HAL_RTC_GetDate>
	/* Display time Format: YYYYMMDDhhmmss */
	sprintf(timestamp,"%04d%02d%02d%02d%02d%02d",2000 + gDate.Year,gDate.Month, gDate.Date,gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
 8000cc2:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000cc6:	7d7b      	ldrb	r3, [r7, #21]
 8000cc8:	461d      	mov	r5, r3
 8000cca:	7dbb      	ldrb	r3, [r7, #22]
 8000ccc:	7839      	ldrb	r1, [r7, #0]
 8000cce:	7878      	ldrb	r0, [r7, #1]
 8000cd0:	78bc      	ldrb	r4, [r7, #2]
 8000cd2:	9403      	str	r4, [sp, #12]
 8000cd4:	9002      	str	r0, [sp, #8]
 8000cd6:	9101      	str	r1, [sp, #4]
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	462b      	mov	r3, r5
 8000cdc:	4904      	ldr	r1, [pc, #16]	; (8000cf0 <get_time+0x50>)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <get_time+0x54>)
 8000ce0:	f00a fb7a 	bl	800b3d8 <siprintf>
	return ;
 8000ce4:	bf00      	nop
}
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bdb0      	pop	{r4, r5, r7, pc}
 8000cec:	20000b70 	.word	0x20000b70
 8000cf0:	0800d758 	.word	0x0800d758
 8000cf4:	2000388c 	.word	0x2000388c

08000cf8 <acquireSnapshot>:

void acquireSnapshot(){
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
	snap_recorded = FALSE;						// clear ouput flag
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <acquireSnapshot+0x1c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
	snap_request = TRUE;						// request a snapshot
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <acquireSnapshot+0x20>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
	return;
 8000d08:	bf00      	nop
}
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	2000116d 	.word	0x2000116d
 8000d18:	2000116c 	.word	0x2000116c

08000d1c <calcSnapDistanceError>:

double calcSnapDistanceError(){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
	double distance_assgined_cluster = DBL_MAX; // initialise the minimum distance to MAX double possible, update it
 8000d22:	f04f 32ff 	mov.w	r2, #4294967295
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <calcSnapDistanceError+0xa4>)
 8000d28:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// and than it is the distance to the assigned cluster
	double distance, error;
	int assigned_cluster = -1;	// initialise to impossible value
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d30:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n_clusters; ++i) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	e021      	b.n	8000d7c <calcSnapDistanceError+0x60>
		distance = eucDist(feat_stdsd, centers[i], feat_len); // compute the distance to all the centers (WARNING!!! - not sure if centers[i] works)
 8000d38:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <calcSnapDistanceError+0xa8>)
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8000d42:	fb02 f303 	mul.w	r3, r2, r3
 8000d46:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <calcSnapDistanceError+0xac>)
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <calcSnapDistanceError+0xb0>)
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f000 fbca 	bl	80014e8 <eucDist>
 8000d54:	ed87 0b00 	vstr	d0, [r7]
		if(distance < distance_assgined_cluster){			// if found a new minimum, save it
 8000d58:	ed97 6b00 	vldr	d6, [r7]
 8000d5c:	ed97 7b06 	vldr	d7, [r7, #24]
 8000d60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d68:	d505      	bpl.n	8000d76 <calcSnapDistanceError+0x5a>
			assigned_cluster = i;	// assign a new cluster
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	617b      	str	r3, [r7, #20]
			distance_assgined_cluster = distance;			// assign the distance to current cluster
 8000d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d72:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (int i = 0; i < n_clusters; ++i) {
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <calcSnapDistanceError+0xb4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	dbd8      	blt.n	8000d38 <calcSnapDistanceError+0x1c>
		}
	}
	error = (distance_assgined_cluster-radiuses[assigned_cluster])/radiuses[assigned_cluster]; // removed because division by 0 problem - redone because now min cluster size = 2
 8000d86:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <calcSnapDistanceError+0xb8>)
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	ed93 7b00 	vldr	d7, [r3]
 8000d92:	ed97 6b06 	vldr	d6, [r7, #24]
 8000d96:	ee36 5b47 	vsub.f64	d5, d6, d7
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <calcSnapDistanceError+0xb8>)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	4413      	add	r3, r2
 8000da2:	ed93 6b00 	vldr	d6, [r3]
 8000da6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000daa:	ed87 7b02 	vstr	d7, [r7, #8]
	return error;
 8000dae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000db2:	ec43 2b17 	vmov	d7, r2, r3
}
 8000db6:	eeb0 0b47 	vmov.f64	d0, d7
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	7fefffff 	.word	0x7fefffff
 8000dc4:	20003888 	.word	0x20003888
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000878 	.word	0x20000878
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000868 	.word	0x20000868

08000dd8 <std_sclr>:

void std_sclr(){
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
	for(int i=0; i<feat_len; i++){
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	e020      	b.n	8000e26 <std_sclr+0x4e>
		feat_stdsd[i]=(feat_array[i]-means[i])/stds[i];
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <std_sclr+0x68>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	4413      	add	r3, r2
 8000dee:	ed93 6b00 	vldr	d6, [r3]
 8000df2:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <std_sclr+0x6c>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4413      	add	r3, r2
 8000dfa:	ed93 7b00 	vldr	d7, [r3]
 8000dfe:	ee36 5b47 	vsub.f64	d5, d6, d7
 8000e02:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <std_sclr+0x70>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	4413      	add	r3, r2
 8000e0a:	ed93 6b00 	vldr	d6, [r3]
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <std_sclr+0x74>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4413      	add	r3, r2
 8000e18:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e1c:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0; i<feat_len; i++){
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3301      	adds	r3, #1
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <std_sclr+0x78>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dbd9      	blt.n	8000de4 <std_sclr+0xc>
	}
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20003884 	.word	0x20003884
 8000e44:	20000650 	.word	0x20000650
 8000e48:	20000438 	.word	0x20000438
 8000e4c:	20003888 	.word	0x20003888
 8000e50:	20000878 	.word	0x20000878

08000e54 <snapReadyHandler>:



void snapReadyHandler(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	if(!snap_recorded){
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <snapReadyHandler+0xa0>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	f083 0301 	eor.w	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d141      	bne.n	8000eec <snapReadyHandler+0x98>
		return;
	}
	else
	{
		snap_recorded = FALSE;						// reset the recorded flag, because the sample has been consumed
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <snapReadyHandler+0xa0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]

		/* ACTIONS TO PERFORM WHEN A NEW TIME-DOMAIN SNAP IS READY */
		feat_array = featureExtractor(adc_buf, ADC_BUF_LEN, TREE_DEPTH, feat_array); // extract the features
 8000e6e:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <snapReadyHandler+0xa4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2206      	movs	r2, #6
 8000e74:	f241 3188 	movw	r1, #5000	; 0x1388
 8000e78:	4820      	ldr	r0, [pc, #128]	; (8000efc <snapReadyHandler+0xa8>)
 8000e7a:	f000 fa0b 	bl	8001294 <featureExtractor>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <snapReadyHandler+0xa4>)
 8000e82:	6013      	str	r3, [r2, #0]
		if (transmit_flag){
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <snapReadyHandler+0xac>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d017      	beq.n	8000ebc <snapReadyHandler+0x68>
			myprintf("the time-domain sampled signal is: \r\n\n");
 8000e8c:	481d      	ldr	r0, [pc, #116]	; (8000f04 <snapReadyHandler+0xb0>)
 8000e8e:	f000 f93b 	bl	8001108 <myprintf>
			if(VERBOSE){printUint16_tArray(adc_buf, ADC_BUF_LEN);}
			get_time(timestamp);
 8000e92:	481d      	ldr	r0, [pc, #116]	; (8000f08 <snapReadyHandler+0xb4>)
 8000e94:	f7ff ff04 	bl	8000ca0 <get_time>
			printf(" \r\nSnapshot recorded. \r\nTimestamp: %s \r\nFeatures: \r\n",timestamp);
 8000e98:	491b      	ldr	r1, [pc, #108]	; (8000f08 <snapReadyHandler+0xb4>)
 8000e9a:	481c      	ldr	r0, [pc, #112]	; (8000f0c <snapReadyHandler+0xb8>)
 8000e9c:	f00a f96e 	bl	800b17c <iprintf>
			printDoubleArray(feat_array, feat_len);
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <snapReadyHandler+0xa4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a1a      	ldr	r2, [pc, #104]	; (8000f10 <snapReadyHandler+0xbc>)
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f90e 	bl	80010cc <printDoubleArray>
			printf(" \r\nEnd of features. \r\n");
 8000eb0:	4818      	ldr	r0, [pc, #96]	; (8000f14 <snapReadyHandler+0xc0>)
 8000eb2:	f00a f9c9 	bl	800b248 <puts>
			transmit_flag = FALSE;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <snapReadyHandler+0xac>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
		}
		if(evaluate_flag){ // evaluate the snaposhot
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <snapReadyHandler+0xc4>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00d      	beq.n	8000ee0 <snapReadyHandler+0x8c>
			std_sclr();  	// standardise the snapshot
 8000ec4:	f7ff ff88 	bl	8000dd8 <std_sclr>
			double indicator;
			indicator = calcSnapDistanceError();
 8000ec8:	f7ff ff28 	bl	8000d1c <calcSnapDistanceError>
 8000ecc:	ed87 0b00 	vstr	d0, [r7]
			printf("%e",indicator);
 8000ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ed4:	4811      	ldr	r0, [pc, #68]	; (8000f1c <snapReadyHandler+0xc8>)
 8000ed6:	f00a f951 	bl	800b17c <iprintf>
			evaluate_flag = FALSE;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <snapReadyHandler+0xc4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart3, Rx_data, 4); // start new data read from huart
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	490f      	ldr	r1, [pc, #60]	; (8000f20 <snapReadyHandler+0xcc>)
 8000ee4:	480f      	ldr	r0, [pc, #60]	; (8000f24 <snapReadyHandler+0xd0>)
 8000ee6:	f004 fd16 	bl	8005916 <HAL_UART_Receive_IT>
		return;
 8000eea:	e000      	b.n	8000eee <snapReadyHandler+0x9a>
		return;
 8000eec:	bf00      	nop
	}
}
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000116d 	.word	0x2000116d
 8000ef8:	20003884 	.word	0x20003884
 8000efc:	20001170 	.word	0x20001170
 8000f00:	2000116f 	.word	0x2000116f
 8000f04:	0800d774 	.word	0x0800d774
 8000f08:	2000388c 	.word	0x2000388c
 8000f0c:	0800d79c 	.word	0x0800d79c
 8000f10:	20000878 	.word	0x20000878
 8000f14:	0800d7d4 	.word	0x0800d7d4
 8000f18:	2000116e 	.word	0x2000116e
 8000f1c:	0800d7ec 	.word	0x0800d7ec
 8000f20:	200038a0 	.word	0x200038a0
 8000f24:	20000bdc 	.word	0x20000bdc

08000f28 <USR_BTN_handler>:

void USR_BTN_handler(){							// handle the press of user button
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	/* debounce the button */
	uint16_t current_time = HAL_GetTick();
 8000f2e:	f000 ff59 	bl	8001de4 <HAL_GetTick>
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
	if ((tickmem + 100) > current_time){
 8000f36:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <USR_BTN_handler+0x98>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d838      	bhi.n	8000fb6 <USR_BTN_handler+0x8e>
		return;
	}
	else{
		tickmem = HAL_GetTick();
 8000f44:	f000 ff4e 	bl	8001de4 <HAL_GetTick>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a1d      	ldr	r2, [pc, #116]	; (8000fc0 <USR_BTN_handler+0x98>)
 8000f4c:	6013      	str	r3, [r2, #0]
	}

	printf(" \r\nPlease enter a command: \r\n-1 = acquire and transmit a snapshot (time-domain) \r\n-2 = set the clock \r\n");
 8000f4e:	481d      	ldr	r0, [pc, #116]	; (8000fc4 <USR_BTN_handler+0x9c>)
 8000f50:	f00a f97a 	bl	800b248 <puts>
	printf("-3 = acquire and evaluate a snapshot \r\n");
 8000f54:	481c      	ldr	r0, [pc, #112]	; (8000fc8 <USR_BTN_handler+0xa0>)
 8000f56:	f00a f977 	bl	800b248 <puts>
	printf("-4 = acquire, evaluate and transmit a snapshot \r\n");
 8000f5a:	481c      	ldr	r0, [pc, #112]	; (8000fcc <USR_BTN_handler+0xa4>)
 8000f5c:	f00a f974 	bl	800b248 <puts>
	int command;
	//scanf("%u", &command);
	command = 4; // for testing
 8000f60:	2304      	movs	r3, #4
 8000f62:	603b      	str	r3, [r7, #0]
	switch(command){
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d821      	bhi.n	8000fb0 <USR_BTN_handler+0x88>
 8000f6c:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <USR_BTN_handler+0x4c>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08000f85 	.word	0x08000f85
 8000f78:	08000f91 	.word	0x08000f91
 8000f7c:	08000f97 	.word	0x08000f97
 8000f80:	08000fa1 	.word	0x08000fa1
	case 1:
		acquireSnapshot();
 8000f84:	f7ff feb8 	bl	8000cf8 <acquireSnapshot>
		transmit_flag = TRUE;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <USR_BTN_handler+0xa8>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
		break;
 8000f8e:	e00f      	b.n	8000fb0 <USR_BTN_handler+0x88>
	case 2:
		setRTCclock();
 8000f90:	f7ff fe2e 	bl	8000bf0 <setRTCclock>
		break;
 8000f94:	e00c      	b.n	8000fb0 <USR_BTN_handler+0x88>
	case 3:
		acquireSnapshot();
 8000f96:	f7ff feaf 	bl	8000cf8 <acquireSnapshot>
		evaluate_flag = TRUE;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <USR_BTN_handler+0xac>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
	case 4:
		acquireSnapshot();
 8000fa0:	f7ff feaa 	bl	8000cf8 <acquireSnapshot>
		transmit_flag = TRUE;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <USR_BTN_handler+0xa8>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
		evaluate_flag = TRUE;
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <USR_BTN_handler+0xac>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
	}
	command = 0;								//	reset command
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	603b      	str	r3, [r7, #0]
	return;
 8000fb4:	e000      	b.n	8000fb8 <USR_BTN_handler+0x90>
		return;
 8000fb6:	bf00      	nop
}
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000389c 	.word	0x2000389c
 8000fc4:	0800d7f0 	.word	0x0800d7f0
 8000fc8:	0800d858 	.word	0x0800d858
 8000fcc:	0800d880 	.word	0x0800d880
 8000fd0:	2000116f 	.word	0x2000116f
 8000fd4:	2000116e 	.word	0x2000116e

08000fd8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // GPIO interrupt handler
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == 0x2000){ // if user btn is pressed
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fe8:	d102      	bne.n	8000ff0 <HAL_GPIO_EXTI_Callback+0x18>
		USR_BTN_handler();
 8000fea:	f7ff ff9d 	bl	8000f28 <USR_BTN_handler>
	}
	else{
		printf("Unknown GPIO interrupt happened");
	}
}
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_EXTI_Callback+0x1e>
		printf("Unknown GPIO interrupt happened");
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <HAL_GPIO_EXTI_Callback+0x28>)
 8000ff2:	f00a f8c3 	bl	800b17c <iprintf>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	0800d8b4 	.word	0x0800d8b4

08001004 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  // this is executed when the data is received from HUART
	printf(Rx_data);
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_RxCpltCallback+0x20>)
 800100e:	f00a f8b5 	bl	800b17c <iprintf>
	HAL_UART_Receive_IT(&huart3, Rx_data, 4); 	// start new data read from huart
 8001012:	2204      	movs	r2, #4
 8001014:	4903      	ldr	r1, [pc, #12]	; (8001024 <HAL_UART_RxCpltCallback+0x20>)
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <HAL_UART_RxCpltCallback+0x24>)
 8001018:	f004 fc7d 	bl	8005916 <HAL_UART_Receive_IT>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200038a0 	.word	0x200038a0
 8001028:	20000bdc 	.word	0x20000bdc

0800102c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	if(htim == &htim6 && snap_request == TRUE){ // if the timer is the analog management and the conversion is REQUESTED
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d12f      	bne.n	800109c <HAL_TIM_PeriodElapsedCallback+0x70>
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d02b      	beq.n	800109c <HAL_TIM_PeriodElapsedCallback+0x70>
		// Get ADC value
		HAL_ADC_Start(&hadc1);
 8001044:	4819      	ldr	r0, [pc, #100]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001046:	f000 ff41 	bl	8001ecc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800104a:	f04f 31ff 	mov.w	r1, #4294967295
 800104e:	4817      	ldr	r0, [pc, #92]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001050:	f001 f80a 	bl	8002068 <HAL_ADC_PollForConversion>
		adc_buf[timer_index]= HAL_ADC_GetValue(&hadc1); // save the value in the array
 8001054:	4815      	ldr	r0, [pc, #84]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001056:	f001 f892 	bl	800217e <HAL_ADC_GetValue>
 800105a:	4601      	mov	r1, r0
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	b289      	uxth	r1, r1
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001066:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		HAL_GPIO_TogglePin(GPIOB, LED_GRE);			// for debug purposes
 800106a:	2101      	movs	r1, #1
 800106c:	4812      	ldr	r0, [pc, #72]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800106e:	f002 f972 	bl	8003356 <HAL_GPIO_TogglePin>
		timer_index ++;
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800107c:	801a      	strh	r2, [r3, #0]
		if(timer_index>=ADC_BUF_LEN){					// if acquisition completed
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	f241 3287 	movw	r2, #4999	; 0x1387
 8001086:	4293      	cmp	r3, r2
 8001088:	d908      	bls.n	800109c <HAL_TIM_PeriodElapsedCallback+0x70>
			timer_index=0;								// reset index for next time
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800108c:	2200      	movs	r2, #0
 800108e:	801a      	strh	r2, [r3, #0]
			snap_recorded = TRUE; 						// conversion complete flag
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
			snap_request = 	FALSE;						// conversion completed, reset request
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000b90 	.word	0x20000b90
 80010a8:	2000116c 	.word	0x2000116c
 80010ac:	20000a78 	.word	0x20000a78
 80010b0:	20003880 	.word	0x20003880
 80010b4:	20001170 	.word	0x20001170
 80010b8:	40020400 	.word	0x40020400
 80010bc:	2000116d 	.word	0x2000116d

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <Error_Handler+0x8>
	...

080010cc <printDoubleArray>:
#include <string.h>
#include <math.h>
#include "wavelib.h"
#include "defines.h"

void printDoubleArray(double *array, int len){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < len; ++i) {
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e00b      	b.n	80010f4 <printDoubleArray+0x28>
		printf("%e\t",array[i]);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <printDoubleArray+0x38>)
 80010ea:	f00a f847 	bl	800b17c <iprintf>
	for (int i = 0; i < len; ++i) {
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3301      	adds	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbef      	blt.n	80010dc <printDoubleArray+0x10>
	}
	return;
 80010fc:	bf00      	nop
}
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	0800d8d4 	.word	0x0800d8d4

08001108 <myprintf>:
		printf("%u\t",array[i]);
	}
	return;
}

void myprintf(const char* format, ...) {
 8001108:	b40f      	push	{r0, r1, r2, r3}
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
        va_list args;
        va_start(args, format);
        vprintf(format, args);
        va_end(args);
    }
    return;
 8001110:	bf00      	nop
}
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	b004      	add	sp, #16
 800111c:	4770      	bx	lr

0800111e <norm2>:
 *
 * @param array The array for which to calculate the squared norm.
 * @param length The number of elements in the array.
 * @return The squared norm of the array.
 */
double norm2(double *array, int length) {
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
	double sum = 0.0;
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	f04f 0300 	mov.w	r3, #0
 8001130:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < length; ++i) {
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	e016      	b.n	8001168 <norm2+0x4a>
		sum += array[i] * array[i];
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	ed93 6b00 	vldr	d6, [r3]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	ed93 7b00 	vldr	d7, [r3]
 8001152:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001156:	ed97 6b04 	vldr	d6, [r7, #16]
 800115a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800115e:	ed87 7b04 	vstr	d7, [r7, #16]
	for (int i = 0; i < length; ++i) {
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3301      	adds	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	dbe4      	blt.n	800113a <norm2+0x1c>
	}
	return sqrt(sum);
 8001170:	ed97 0b04 	vldr	d0, [r7, #16]
 8001174:	f00b fdd4 	bl	800cd20 <sqrt>
 8001178:	eeb0 7b40 	vmov.f64	d7, d0
}
 800117c:	eeb0 0b47 	vmov.f64	d0, d7
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <packetCoeff>:
 * @param length The length of the input array.
 * @param tree_depth The depth of the packet tree.
 * @param coefs The output array to store the computed powers.
 * @return A pointer to the array of computed powers.
 */
double *packetCoeff(double *inp, int length, int tree_depth, double *coefs) { // compute the power of each packet coefficient in the lowest level
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b08f      	sub	sp, #60	; 0x3c
 800118c:	af02      	add	r7, sp, #8
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
	int N, len;
	int coef_len;
	coef_len = round(pow(2,tree_depth)); // the nodes in the lowest level are 2^depth
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011a0:	eeb0 1b47 	vmov.f64	d1, d7
 80011a4:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80011a8:	f00b ff76 	bl	800d098 <pow>
 80011ac:	eeb0 7b40 	vmov.f64	d7, d0
 80011b0:	eeb0 0b47 	vmov.f64	d0, d7
 80011b4:	f00c fa3c 	bl	800d630 <round>
 80011b8:	eeb0 7b40 	vmov.f64	d7, d0
 80011bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80011c0:	ee17 3a90 	vmov	r3, s15
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28

	wave_object obj;
	wtree_object wt;

	char *name = "db10";
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <packetCoeff+0xf8>)
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
	obj = wave_init(name); // Initialize the wavelet
 80011ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011cc:	f008 fcee 	bl	8009bac <wave_init>
 80011d0:	6238      	str	r0, [r7, #32]
	N = length;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	61fb      	str	r3, [r7, #28]

	wt = wtree_init(obj, N, tree_depth); // Initialize the wavelet transform object
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	69f9      	ldr	r1, [r7, #28]
 80011da:	6a38      	ldr	r0, [r7, #32]
 80011dc:	f008 fd5a 	bl	8009c94 <wtree_init>
 80011e0:	61b8      	str	r0, [r7, #24]
	setWTREEExtension(wt, "sym"); // Options are "per" and "sym". Symmetric is the default option
 80011e2:	4928      	ldr	r1, [pc, #160]	; (8001284 <packetCoeff+0xfc>)
 80011e4:	69b8      	ldr	r0, [r7, #24]
 80011e6:	f009 fd2b 	bl	800ac40 <setWTREEExtension>

	wtree(wt, inp);
 80011ea:	68f9      	ldr	r1, [r7, #12]
 80011ec:	69b8      	ldr	r0, [r7, #24]
 80011ee:	f009 fa17 	bl	800a620 <wtree>
	// wtree_summary(wt); too much information - reenable if needed

	len = getWTREENodelength(wt, tree_depth); //because the lowest level is J
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	69b8      	ldr	r0, [r7, #24]
 80011f6:	f009 fc71 	bl	800aadc <getWTREENodelength>
 80011fa:	6178      	str	r0, [r7, #20]
	myprintf(" \r\n %d", len);
 80011fc:	6979      	ldr	r1, [r7, #20]
 80011fe:	4822      	ldr	r0, [pc, #136]	; (8001288 <packetCoeff+0x100>)
 8001200:	f7ff ff82 	bl	8001108 <myprintf>
	myprintf(" \r\n");
 8001204:	4821      	ldr	r0, [pc, #132]	; (800128c <packetCoeff+0x104>)
 8001206:	f7ff ff7f 	bl	8001108 <myprintf>

	double *oup = (double *)malloc(sizeof(double) * len);
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4618      	mov	r0, r3
 8001210:	f009 fda8 	bl	800ad64 <malloc>
 8001214:	4603      	mov	r3, r0
 8001216:	613b      	str	r3, [r7, #16]

	for(int node_index = 0; node_index < coef_len; node_index++){
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800121c:	e01b      	b.n	8001256 <packetCoeff+0xce>
		myprintf("Node [%d %d] Coefficients :  \r\n", tree_depth, node_index);
 800121e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	481b      	ldr	r0, [pc, #108]	; (8001290 <packetCoeff+0x108>)
 8001224:	f7ff ff70 	bl	8001108 <myprintf>
		getWTREECoeffs(wt, tree_depth, node_index, oup, len);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	69b8      	ldr	r0, [r7, #24]
 8001234:	f009 fc7e 	bl	800ab34 <getWTREECoeffs>
		coefs[node_index] = norm2(oup,len);
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	18d4      	adds	r4, r2, r3
 8001240:	6979      	ldr	r1, [r7, #20]
 8001242:	6938      	ldr	r0, [r7, #16]
 8001244:	f7ff ff6b 	bl	800111e <norm2>
 8001248:	eeb0 7b40 	vmov.f64	d7, d0
 800124c:	ed84 7b00 	vstr	d7, [r4]
	for(int node_index = 0; node_index < coef_len; node_index++){
 8001250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001252:	3301      	adds	r3, #1
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125a:	429a      	cmp	r2, r3
 800125c:	dbdf      	blt.n	800121e <packetCoeff+0x96>
	}
	free(oup);
 800125e:	6938      	ldr	r0, [r7, #16]
 8001260:	f009 fd88 	bl	800ad74 <free>
	free(inp);
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f009 fd85 	bl	800ad74 <free>
	wave_free(obj);
 800126a:	6a38      	ldr	r0, [r7, #32]
 800126c:	f009 fd18 	bl	800aca0 <wave_free>
	wtree_free(wt);
 8001270:	69b8      	ldr	r0, [r7, #24]
 8001272:	f009 fd20 	bl	800acb6 <wtree_free>

	return coefs;
 8001276:	683b      	ldr	r3, [r7, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3734      	adds	r7, #52	; 0x34
 800127c:	46bd      	mov	sp, r7
 800127e:	bd90      	pop	{r4, r7, pc}
 8001280:	0800d8dc 	.word	0x0800d8dc
 8001284:	0800d8e4 	.word	0x0800d8e4
 8001288:	0800d8e8 	.word	0x0800d8e8
 800128c:	0800d8f0 	.word	0x0800d8f0
 8001290:	0800d8f4 	.word	0x0800d8f4

08001294 <featureExtractor>:

double *featureExtractor(	uint16_t *time_array,			// time-domain snapshot
							int len_time_array,				// length of time-domain snapshot
							int tree_depth,					// depth of the wavelet decomposition tree
							double *out_features_array)		// output array of features
{
 8001294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001298:	b097      	sub	sp, #92	; 0x5c
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	466b      	mov	r3, sp
 80012a6:	461e      	mov	r6, r3
	// cast the input array to double
	double time_array_double[len_time_array];
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	1e4b      	subs	r3, r1, #1
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ae:	460a      	mov	r2, r1
 80012b0:	2300      	movs	r3, #0
 80012b2:	4690      	mov	r8, r2
 80012b4:	4699      	mov	r9, r3
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80012c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80012c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80012ca:	460a      	mov	r2, r1
 80012cc:	2300      	movs	r3, #0
 80012ce:	4614      	mov	r4, r2
 80012d0:	461d      	mov	r5, r3
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	01ab      	lsls	r3, r5, #6
 80012dc:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80012e0:	01a2      	lsls	r2, r4, #6
 80012e2:	460b      	mov	r3, r1
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	3307      	adds	r3, #7
 80012e8:	08db      	lsrs	r3, r3, #3
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	ebad 0d03 	sub.w	sp, sp, r3
 80012f0:	466b      	mov	r3, sp
 80012f2:	3307      	adds	r3, #7
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < len_time_array; ++i) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	657b      	str	r3, [r7, #84]	; 0x54
 80012fe:	e011      	b.n	8001324 <featureExtractor+0x90>
    	time_array_double[i] = (double)time_array[i];
 8001300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4413      	add	r3, r2
 800131a:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0; i < len_time_array; ++i) {
 800131e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001320:	3301      	adds	r3, #1
 8001322:	657b      	str	r3, [r7, #84]	; 0x54
 8001324:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbe9      	blt.n	8001300 <featureExtractor+0x6c>
    }

	myprintf("Time array converted to double: \r\n");
 800132c:	486c      	ldr	r0, [pc, #432]	; (80014e0 <featureExtractor+0x24c>)
 800132e:	f7ff feeb 	bl	8001108 <myprintf>
    for(int i = 0; i<len_time_array; i++){
 8001332:	2300      	movs	r3, #0
 8001334:	653b      	str	r3, [r7, #80]	; 0x50
 8001336:	e00b      	b.n	8001350 <featureExtractor+0xbc>
        myprintf("%e\t",time_array_double[i]);
 8001338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800133a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4413      	add	r3, r2
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	4867      	ldr	r0, [pc, #412]	; (80014e4 <featureExtractor+0x250>)
 8001346:	f7ff fedf 	bl	8001108 <myprintf>
    for(int i = 0; i<len_time_array; i++){
 800134a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800134c:	3301      	adds	r3, #1
 800134e:	653b      	str	r3, [r7, #80]	; 0x50
 8001350:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbef      	blt.n	8001338 <featureExtractor+0xa4>
    }
	// compute the mean of the time-domain snapshot
	double mean = 0;
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	for (int i = 0; i < len_time_array; ++i) {
 8001364:	2300      	movs	r3, #0
 8001366:	647b      	str	r3, [r7, #68]	; 0x44
 8001368:	e00e      	b.n	8001388 <featureExtractor+0xf4>
		mean += time_array_double[i];
 800136a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800136c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4413      	add	r3, r2
 8001372:	ed93 7b00 	vldr	d7, [r3]
 8001376:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 800137a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800137e:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	for (int i = 0; i < len_time_array; ++i) {
 8001382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001384:	3301      	adds	r3, #1
 8001386:	647b      	str	r3, [r7, #68]	; 0x44
 8001388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	429a      	cmp	r2, r3
 800138e:	dbec      	blt.n	800136a <featureExtractor+0xd6>
	}
	mean /= (double) len_time_array;
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800139a:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 800139e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013a2:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	// compute the energy of the time-domain snapshot
	double energy = 0;
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	for (int i = 0; i < len_time_array; ++i) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
 80013b6:	e016      	b.n	80013e6 <featureExtractor+0x152>
		energy += pow(time_array_double[i],2);
 80013b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4413      	add	r3, r2
 80013c0:	ed93 7b00 	vldr	d7, [r3]
 80013c4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013c8:	eeb0 0b47 	vmov.f64	d0, d7
 80013cc:	f00b fe64 	bl	800d098 <pow>
 80013d0:	eeb0 6b40 	vmov.f64	d6, d0
 80013d4:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80013d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013dc:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	for (int i = 0; i < len_time_array; ++i) {
 80013e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e2:	3301      	adds	r3, #1
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34
 80013e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	dbe4      	blt.n	80013b8 <featureExtractor+0x124>
	}
	// compute the variance of the time-domain snapshot
	double variance = 0;
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double mean_energy = energy/len_time_array;
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001404:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8001408:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800140c:	ed87 7b06 	vstr	d7, [r7, #24]
	variance = mean_energy - pow(mean,2);
 8001410:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001414:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001418:	f00b fe3e 	bl	800d098 <pow>
 800141c:	eeb0 6b40 	vmov.f64	d6, d0
 8001420:	ed97 7b06 	vldr	d7, [r7, #24]
 8001424:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001428:	ed87 7b08 	vstr	d7, [r7, #32]

	// assign the features to the output array
	out_features_array[0] = mean;
 800142c:	6839      	ldr	r1, [r7, #0]
 800142e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001432:	e9c1 2300 	strd	r2, r3, [r1]
	out_features_array[1] = energy;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f103 0108 	add.w	r1, r3, #8
 800143c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001440:	e9c1 2300 	strd	r2, r3, [r1]
	out_features_array[2] = variance;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	f103 0110 	add.w	r1, r3, #16
 800144a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800144e:	e9c1 2300 	strd	r2, r3, [r1]

	// compute the wavelet decomposition of the time-domain snapshot
	int len = round(pow(2,tree_depth)); // the nodes in the lowest level are 2^depth
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	ee07 3a90 	vmov	s15, r3
 8001458:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800145c:	eeb0 1b47 	vmov.f64	d1, d7
 8001460:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001464:	f00b fe18 	bl	800d098 <pow>
 8001468:	eeb0 7b40 	vmov.f64	d7, d0
 800146c:	eeb0 0b47 	vmov.f64	d0, d7
 8001470:	f00c f8de 	bl	800d630 <round>
 8001474:	eeb0 7b40 	vmov.f64	d7, d0
 8001478:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800147c:	ee17 3a90 	vmov	r3, s15
 8001480:	617b      	str	r3, [r7, #20]
	double *coefs = (double *)malloc(sizeof(double) * len);
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4618      	mov	r0, r3
 8001488:	f009 fc6c 	bl	800ad64 <malloc>
 800148c:	4603      	mov	r3, r0
 800148e:	613b      	str	r3, [r7, #16]
	coefs = packetCoeff(time_array_double, len_time_array, tree_depth, coefs);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001498:	f7ff fe76 	bl	8001188 <packetCoeff>
 800149c:	6138      	str	r0, [r7, #16]

	// assign the features to the output array
	for (int i = 0; i < len; ++i) {
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
 80014a2:	e00f      	b.n	80014c4 <featureExtractor+0x230>
		out_features_array[i+3] = coefs[i];
 80014a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4413      	add	r3, r2
 80014ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ae:	3203      	adds	r2, #3
 80014b0:	00d2      	lsls	r2, r2, #3
 80014b2:	6839      	ldr	r1, [r7, #0]
 80014b4:	4411      	add	r1, r2
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < len; ++i) {
 80014be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c0:	3301      	adds	r3, #1
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
 80014c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbeb      	blt.n	80014a4 <featureExtractor+0x210>
	}

	// free the memory
	free(coefs);
 80014cc:	6938      	ldr	r0, [r7, #16]
 80014ce:	f009 fc51 	bl	800ad74 <free>

	return out_features_array;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	46b5      	mov	sp, r6
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	375c      	adds	r7, #92	; 0x5c
 80014da:	46bd      	mov	sp, r7
 80014dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014e0:	0800d914 	.word	0x0800d914
 80014e4:	0800d8d4 	.word	0x0800d8d4

080014e8 <eucDist>:

double eucDist(double *arr1, double *arr2, int len){ // calculate euclidian distance
 80014e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014ec:	b089      	sub	sp, #36	; 0x24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	466b      	mov	r3, sp
 80014f8:	461e      	mov	r6, r3
	//printDoubleArray(arr1, len);
	//printDoubleArray(arr2, len);
	double diff[len];
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	1e4b      	subs	r3, r1, #1
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	460a      	mov	r2, r1
 8001502:	2300      	movs	r3, #0
 8001504:	4690      	mov	r8, r2
 8001506:	4699      	mov	r9, r3
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001514:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001518:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800151c:	460a      	mov	r2, r1
 800151e:	2300      	movs	r3, #0
 8001520:	4614      	mov	r4, r2
 8001522:	461d      	mov	r5, r3
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	01ab      	lsls	r3, r5, #6
 800152e:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8001532:	01a2      	lsls	r2, r4, #6
 8001534:	460b      	mov	r3, r1
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	3307      	adds	r3, #7
 800153a:	08db      	lsrs	r3, r3, #3
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	ebad 0d03 	sub.w	sp, sp, r3
 8001542:	466b      	mov	r3, sp
 8001544:	3307      	adds	r3, #7
 8001546:	08db      	lsrs	r3, r3, #3
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	617b      	str	r3, [r7, #20]
	for(int i=0; i<len;i++){							// calculate difference
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	e016      	b.n	8001580 <eucDist+0x98>
		diff[i]=arr1[i]-arr2[i];
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4413      	add	r3, r2
 800155a:	ed93 6b00 	vldr	d6, [r3]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	4413      	add	r3, r2
 8001566:	ed93 7b00 	vldr	d7, [r3]
 800156a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0; i<len;i++){							// calculate difference
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbe4      	blt.n	8001552 <eucDist+0x6a>
	}
	return norm2(diff,len);
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff fdc7 	bl	800111e <norm2>
 8001590:	eeb0 7b40 	vmov.f64	d7, d0
 8001594:	46b5      	mov	sp, r6
}
 8001596:	eeb0 0b47 	vmov.f64	d0, d7
 800159a:	3724      	adds	r7, #36	; 0x24
 800159c:	46bd      	mov	sp, r7
 800159e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080015a4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <RetargetInit+0x28>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <RetargetInit+0x2c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6898      	ldr	r0, [r3, #8]
 80015b8:	2300      	movs	r3, #0
 80015ba:	2202      	movs	r2, #2
 80015bc:	2100      	movs	r1, #0
 80015be:	f009 fe5d 	bl	800b27c <setvbuf>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200038b4 	.word	0x200038b4
 80015d0:	200008e0 	.word	0x200008e0

080015d4 <_isatty>:

int _isatty(int fd) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db04      	blt.n	80015ec <_isatty+0x18>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	dc01      	bgt.n	80015ec <_isatty+0x18>
    return 1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e005      	b.n	80015f8 <_isatty+0x24>

  errno = EBADF;
 80015ec:	f00a f860 	bl	800b6b0 <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2209      	movs	r2, #9
 80015f4:	601a      	str	r2, [r3, #0]
  return 0;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_write>:

int _write(int fd, char* ptr, int len) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d002      	beq.n	8001618 <_write+0x18>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d111      	bne.n	800163c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <_write+0x54>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	b29a      	uxth	r2, r3
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	f004 f82f 	bl	8005688 <HAL_UART_Transmit>
 800162a:	4603      	mov	r3, r0
 800162c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <_write+0x38>
      return len;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	e008      	b.n	800164a <_write+0x4a>
    else
      return EIO;
 8001638:	2305      	movs	r3, #5
 800163a:	e006      	b.n	800164a <_write+0x4a>
  }
  errno = EBADF;
 800163c:	f00a f838 	bl	800b6b0 <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	2209      	movs	r2, #9
 8001644:	601a      	str	r2, [r3, #0]
  return -1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200038b4 	.word	0x200038b4

08001658 <_close>:

int _close(int fd) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db04      	blt.n	8001670 <_close+0x18>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b02      	cmp	r3, #2
 800166a:	dc01      	bgt.n	8001670 <_close+0x18>
    return 0;
 800166c:	2300      	movs	r3, #0
 800166e:	e006      	b.n	800167e <_close+0x26>

  errno = EBADF;
 8001670:	f00a f81e 	bl	800b6b0 <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	2209      	movs	r2, #9
 8001678:	601a      	str	r2, [r3, #0]
  return -1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001692:	f00a f80d 	bl	800b6b0 <__errno>
 8001696:	4603      	mov	r3, r0
 8001698:	2209      	movs	r2, #9
 800169a:	601a      	str	r2, [r3, #0]
  return -1;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_read>:

int _read(int fd, char* ptr, int len) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d110      	bne.n	80016dc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <_read+0x4c>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	2201      	movs	r2, #1
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	f004 f862 	bl	800578e <HAL_UART_Receive>
 80016ca:	4603      	mov	r3, r0
 80016cc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <_read+0x30>
      return 1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e008      	b.n	80016ea <_read+0x42>
    else
      return EIO;
 80016d8:	2305      	movs	r3, #5
 80016da:	e006      	b.n	80016ea <_read+0x42>
  }
  errno = EBADF;
 80016dc:	f009 ffe8 	bl	800b6b0 <__errno>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2209      	movs	r2, #9
 80016e4:	601a      	str	r2, [r3, #0]
  return -1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200038b4 	.word	0x200038b4

080016f8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db08      	blt.n	800171a <_fstat+0x22>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b02      	cmp	r3, #2
 800170c:	dc05      	bgt.n	800171a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001714:	605a      	str	r2, [r3, #4]
    return 0;
 8001716:	2300      	movs	r3, #0
 8001718:	e005      	b.n	8001726 <_fstat+0x2e>
  }

  errno = EBADF;
 800171a:	f009 ffc9 	bl	800b6b0 <__errno>
 800171e:	4603      	mov	r3, r0
 8001720:	2209      	movs	r2, #9
 8001722:	601a      	str	r2, [r3, #0]
  return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_MspInit+0x44>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_MspInit+0x44>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_MspInit+0x44>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_MspInit+0x44>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_MspInit+0x44>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_MspInit+0x44>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a15      	ldr	r2, [pc, #84]	; (80017ec <HAL_ADC_MspInit+0x74>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d123      	bne.n	80017e2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_ADC_MspInit+0x78>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <HAL_ADC_MspInit+0x78>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_ADC_MspInit+0x78>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_ADC_MspInit+0x78>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_ADC_MspInit+0x78>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_ADC_MspInit+0x78>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ca:	2308      	movs	r3, #8
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ce:	2303      	movs	r3, #3
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <HAL_ADC_MspInit+0x7c>)
 80017de:	f001 fbf5 	bl	8002fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40012000 	.word	0x40012000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000

080017f8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08e      	sub	sp, #56	; 0x38
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a4e      	ldr	r2, [pc, #312]	; (8001950 <HAL_ETH_MspInit+0x158>)
 8001816:	4293      	cmp	r3, r2
 8001818:	f040 8096 	bne.w	8001948 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800181c:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	4a4c      	ldr	r2, [pc, #304]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 8001822:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001826:	6313      	str	r3, [r2, #48]	; 0x30
 8001828:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	623b      	str	r3, [r7, #32]
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	4a46      	ldr	r2, [pc, #280]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 800183a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800183e:	6313      	str	r3, [r2, #48]	; 0x30
 8001840:	4b44      	ldr	r3, [pc, #272]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	4b41      	ldr	r3, [pc, #260]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	4a40      	ldr	r2, [pc, #256]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 8001852:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001856:	6313      	str	r3, [r2, #48]	; 0x30
 8001858:	4b3e      	ldr	r3, [pc, #248]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001864:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	4a3a      	ldr	r2, [pc, #232]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6313      	str	r3, [r2, #48]	; 0x30
 8001870:	4b38      	ldr	r3, [pc, #224]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b35      	ldr	r3, [pc, #212]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	4a34      	ldr	r2, [pc, #208]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6313      	str	r3, [r2, #48]	; 0x30
 8001888:	4b32      	ldr	r3, [pc, #200]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	4a2e      	ldr	r2, [pc, #184]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	6313      	str	r3, [r2, #48]	; 0x30
 80018a0:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	4a28      	ldr	r2, [pc, #160]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 80018b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018b6:	6313      	str	r3, [r2, #48]	; 0x30
 80018b8:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_ETH_MspInit+0x15c>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018c4:	2332      	movs	r3, #50	; 0x32
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018d4:	230b      	movs	r3, #11
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018dc:	4619      	mov	r1, r3
 80018de:	481e      	ldr	r0, [pc, #120]	; (8001958 <HAL_ETH_MspInit+0x160>)
 80018e0:	f001 fb74 	bl	8002fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018e4:	2386      	movs	r3, #134	; 0x86
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018f4:	230b      	movs	r3, #11
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fc:	4619      	mov	r1, r3
 80018fe:	4817      	ldr	r0, [pc, #92]	; (800195c <HAL_ETH_MspInit+0x164>)
 8001900:	f001 fb64 	bl	8002fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001916:	230b      	movs	r3, #11
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191e:	4619      	mov	r1, r3
 8001920:	480f      	ldr	r0, [pc, #60]	; (8001960 <HAL_ETH_MspInit+0x168>)
 8001922:	f001 fb53 	bl	8002fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001926:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001938:	230b      	movs	r3, #11
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	4808      	ldr	r0, [pc, #32]	; (8001964 <HAL_ETH_MspInit+0x16c>)
 8001944:	f001 fb42 	bl	8002fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3738      	adds	r7, #56	; 0x38
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40028000 	.word	0x40028000
 8001954:	40023800 	.word	0x40023800
 8001958:	40020800 	.word	0x40020800
 800195c:	40020000 	.word	0x40020000
 8001960:	40020400 	.word	0x40020400
 8001964:	40021800 	.word	0x40021800

08001968 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0a6      	sub	sp, #152	; 0x98
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	2290      	movs	r2, #144	; 0x90
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f009 fe25 	bl	800b5c8 <memset>
  if(hrtc->Instance==RTC)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_RTC_MspInit+0x54>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d114      	bne.n	80019b2 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001988:	2320      	movs	r3, #32
 800198a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800198c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fb8c 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80019a2:	f7ff fb8d 	bl	80010c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_RTC_MspInit+0x58>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <HAL_RTC_MspInit+0x58>)
 80019ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	3798      	adds	r7, #152	; 0x98
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40002800 	.word	0x40002800
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <HAL_TIM_Base_MspInit+0x44>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d113      	bne.n	80019fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_TIM_Base_MspInit+0x48>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_TIM_Base_MspInit+0x48>)
 80019dc:	f043 0310 	orr.w	r3, r3, #16
 80019e0:	6413      	str	r3, [r2, #64]	; 0x40
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_TIM_Base_MspInit+0x48>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	2036      	movs	r0, #54	; 0x36
 80019f4:	f000 fefb 	bl	80027ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019f8:	2036      	movs	r0, #54	; 0x36
 80019fa:	f000 ff14 	bl	8002826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40001000 	.word	0x40001000
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b0ae      	sub	sp, #184	; 0xb8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2290      	movs	r2, #144	; 0x90
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f009 fdc9 	bl	800b5c8 <memset>
  if(huart->Instance==USART3)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <HAL_UART_MspInit+0xc4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d144      	bne.n	8001aca <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 fb30 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a5a:	f7ff fb31 	bl	80010c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_UART_MspInit+0xc8>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_UART_MspInit+0xc8>)
 8001a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_UART_MspInit+0xc8>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_UART_MspInit+0xc8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <HAL_UART_MspInit+0xc8>)
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_UART_MspInit+0xc8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4809      	ldr	r0, [pc, #36]	; (8001adc <HAL_UART_MspInit+0xcc>)
 8001ab6:	f001 fa89 	bl	8002fcc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	2027      	movs	r0, #39	; 0x27
 8001ac0:	f000 fe95 	bl	80027ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ac4:	2027      	movs	r0, #39	; 0x27
 8001ac6:	f000 feae 	bl	8002826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001aca:	bf00      	nop
 8001acc:	37b8      	adds	r7, #184	; 0xb8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40004800 	.word	0x40004800
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020c00 	.word	0x40020c00

08001ae0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b0ae      	sub	sp, #184	; 0xb8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2290      	movs	r2, #144	; 0x90
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f009 fd61 	bl	800b5c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b0e:	d159      	bne.n	8001bc4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b14:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4618      	mov	r0, r3
 8001b22:	f002 fac7 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001b2c:	f7ff fac8 	bl	80010c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <HAL_PCD_MspInit+0xec>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	4a25      	ldr	r2, [pc, #148]	; (8001bcc <HAL_PCD_MspInit+0xec>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <HAL_PCD_MspInit+0xec>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b48:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b62:	230a      	movs	r3, #10
 8001b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4818      	ldr	r0, [pc, #96]	; (8001bd0 <HAL_PCD_MspInit+0xf0>)
 8001b70:	f001 fa2c 	bl	8002fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4810      	ldr	r0, [pc, #64]	; (8001bd0 <HAL_PCD_MspInit+0xf0>)
 8001b90:	f001 fa1c 	bl	8002fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_PCD_MspInit+0xec>)
 8001b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b98:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <HAL_PCD_MspInit+0xec>)
 8001b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9e:	6353      	str	r3, [r2, #52]	; 0x34
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_PCD_MspInit+0xec>)
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <HAL_PCD_MspInit+0xec>)
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <HAL_PCD_MspInit+0xec>)
 8001bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <HAL_PCD_MspInit+0xec>)
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bc4:	bf00      	nop
 8001bc6:	37b8      	adds	r7, #184	; 0xb8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <NMI_Handler+0x4>

08001bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <MemManage_Handler+0x4>

08001be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <BusFault_Handler+0x4>

08001bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <UsageFault_Handler+0x4>

08001bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c20:	f000 f8cc 	bl	8001dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <USART3_IRQHandler+0x10>)
 8001c2e:	f003 feb7 	bl	80059a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000bdc 	.word	0x20000bdc

08001c3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001c40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c44:	f001 fba2 	bl	800338c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <TIM6_DAC_IRQHandler+0x10>)
 8001c52:	f003 fa37 	bl	80050c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000b90 	.word	0x20000b90

08001c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c68:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <_sbrk+0x5c>)
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <_sbrk+0x60>)
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d102      	bne.n	8001c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <_sbrk+0x64>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <_sbrk+0x68>)
 8001c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d207      	bcs.n	8001ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c90:	f009 fd0e 	bl	800b6b0 <__errno>
 8001c94:	4603      	mov	r3, r0
 8001c96:	220c      	movs	r2, #12
 8001c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9e:	e009      	b.n	8001cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <_sbrk+0x64>)
 8001cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20080000 	.word	0x20080000
 8001cc0:	00000400 	.word	0x00000400
 8001cc4:	200038b8 	.word	0x200038b8
 8001cc8:	20003a10 	.word	0x20003a10

08001ccc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <SystemInit+0x20>)
 8001cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <SystemInit+0x20>)
 8001cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf4:	480d      	ldr	r0, [pc, #52]	; (8001d2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cf6:	490e      	ldr	r1, [pc, #56]	; (8001d30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cf8:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cfc:	e002      	b.n	8001d04 <LoopCopyDataInit>

08001cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d02:	3304      	adds	r3, #4

08001d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d08:	d3f9      	bcc.n	8001cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d0c:	4c0b      	ldr	r4, [pc, #44]	; (8001d3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d10:	e001      	b.n	8001d16 <LoopFillZerobss>

08001d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d14:	3204      	adds	r2, #4

08001d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d18:	d3fb      	bcc.n	8001d12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d1a:	f7ff ffd7 	bl	8001ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1e:	f009 fccd 	bl	800b6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d22:	f7fe fc73 	bl	800060c <main>
  bx  lr    
 8001d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d28:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d30:	200008e4 	.word	0x200008e4
  ldr r2, =_sidata
 8001d34:	08017070 	.word	0x08017070
  ldr r2, =_sbss
 8001d38:	20000a24 	.word	0x20000a24
  ldr r4, =_ebss
 8001d3c:	20003a0c 	.word	0x20003a0c

08001d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d40:	e7fe      	b.n	8001d40 <ADC_IRQHandler>

08001d42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d46:	2003      	movs	r0, #3
 8001d48:	f000 fd46 	bl	80027d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f000 f805 	bl	8001d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d52:	f7ff fced 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_InitTick+0x54>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_InitTick+0x58>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fd61 	bl	8002842 <HAL_SYSTICK_Config>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00e      	b.n	8001da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b0f      	cmp	r3, #15
 8001d8e:	d80a      	bhi.n	8001da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d90:	2200      	movs	r2, #0
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f000 fd29 	bl	80027ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d9c:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <HAL_InitTick+0x5c>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e000      	b.n	8001da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	2000087c 	.word	0x2000087c
 8001db4:	20000884 	.word	0x20000884
 8001db8:	20000880 	.word	0x20000880

08001dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x20>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x24>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_IncTick+0x24>)
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000884 	.word	0x20000884
 8001de0:	200038bc 	.word	0x200038bc

08001de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return uwTick;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_GetTick+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	200038bc 	.word	0x200038bc

08001dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff ffee 	bl	8001de4 <HAL_GetTick>
 8001e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e14:	d005      	beq.n	8001e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_Delay+0x44>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e22:	bf00      	nop
 8001e24:	f7ff ffde 	bl	8001de4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d8f7      	bhi.n	8001e24 <HAL_Delay+0x28>
  {
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000884 	.word	0x20000884

08001e44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e031      	b.n	8001ebe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fc88 	bl	8001778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d116      	bne.n	8001eb0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_ADC_Init+0x84>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	f043 0202 	orr.w	r2, r3, #2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fad6 	bl	8002444 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f023 0303 	bic.w	r3, r3, #3
 8001ea6:	f043 0201 	orr.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
 8001eae:	e001      	b.n	8001eb4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	ffffeefd 	.word	0xffffeefd

08001ecc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_Start+0x1a>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e0ad      	b.n	8002042 <HAL_ADC_Start+0x176>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d018      	beq.n	8001f2e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_ADC_Start+0x184>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a50      	ldr	r2, [pc, #320]	; (8002054 <HAL_ADC_Start+0x188>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	0c9a      	lsrs	r2, r3, #18
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001f20:	e002      	b.n	8001f28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f9      	bne.n	8001f22 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d175      	bne.n	8002028 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f40:	4b45      	ldr	r3, [pc, #276]	; (8002058 <HAL_ADC_Start+0x18c>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f76:	d106      	bne.n	8001f86 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	f023 0206 	bic.w	r2, r3, #6
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	645a      	str	r2, [r3, #68]	; 0x44
 8001f84:	e002      	b.n	8001f8c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f9c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001f9e:	4b2f      	ldr	r3, [pc, #188]	; (800205c <HAL_ADC_Start+0x190>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10f      	bne.n	8001fca <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d143      	bne.n	8002040 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	e03a      	b.n	8002040 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a24      	ldr	r2, [pc, #144]	; (8002060 <HAL_ADC_Start+0x194>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d10e      	bne.n	8001ff2 <HAL_ADC_Start+0x126>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d107      	bne.n	8001ff2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ff0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <HAL_ADC_Start+0x190>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d120      	bne.n	8002040 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <HAL_ADC_Start+0x198>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d11b      	bne.n	8002040 <HAL_ADC_Start+0x174>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d114      	bne.n	8002040 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	e00b      	b.n	8002040 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f043 0210 	orr.w	r2, r3, #16
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	f043 0201 	orr.w	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	2000087c 	.word	0x2000087c
 8002054:	431bde83 	.word	0x431bde83
 8002058:	fffff8fe 	.word	0xfffff8fe
 800205c:	40012300 	.word	0x40012300
 8002060:	40012000 	.word	0x40012000
 8002064:	40012200 	.word	0x40012200

08002068 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002084:	d113      	bne.n	80020ae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002094:	d10b      	bne.n	80020ae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f043 0220 	orr.w	r2, r3, #32
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e063      	b.n	8002176 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020ae:	f7ff fe99 	bl	8001de4 <HAL_GetTick>
 80020b2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020b4:	e021      	b.n	80020fa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020bc:	d01d      	beq.n	80020fa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_ADC_PollForConversion+0x6c>
 80020c4:	f7ff fe8e 	bl	8001de4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d212      	bcs.n	80020fa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d00b      	beq.n	80020fa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f043 0204 	orr.w	r2, r3, #4
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e03d      	b.n	8002176 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b02      	cmp	r3, #2
 8002106:	d1d6      	bne.n	80020b6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0212 	mvn.w	r2, #18
 8002110:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d123      	bne.n	8002174 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002130:	2b00      	cmp	r3, #0
 8002132:	d11f      	bne.n	8002174 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800214c:	2b00      	cmp	r3, #0
 800214e:	d111      	bne.n	8002174 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x1c>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e136      	b.n	8002422 <HAL_ADC_ConfigChannel+0x28a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b09      	cmp	r3, #9
 80021c2:	d93a      	bls.n	800223a <HAL_ADC_ConfigChannel+0xa2>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021cc:	d035      	beq.n	800223a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68d9      	ldr	r1, [r3, #12]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	3b1e      	subs	r3, #30
 80021e4:	2207      	movs	r2, #7
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	400a      	ands	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a8d      	ldr	r2, [pc, #564]	; (8002430 <HAL_ADC_ConfigChannel+0x298>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d10a      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68d9      	ldr	r1, [r3, #12]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	061a      	lsls	r2, r3, #24
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002212:	e035      	b.n	8002280 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68d9      	ldr	r1, [r3, #12]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	4618      	mov	r0, r3
 8002226:	4603      	mov	r3, r0
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4403      	add	r3, r0
 800222c:	3b1e      	subs	r3, #30
 800222e:	409a      	lsls	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002238:	e022      	b.n	8002280 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6919      	ldr	r1, [r3, #16]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	2207      	movs	r2, #7
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43da      	mvns	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	400a      	ands	r2, r1
 800225c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6919      	ldr	r1, [r3, #16]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	4618      	mov	r0, r3
 8002270:	4603      	mov	r3, r0
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4403      	add	r3, r0
 8002276:	409a      	lsls	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b06      	cmp	r3, #6
 8002286:	d824      	bhi.n	80022d2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	3b05      	subs	r3, #5
 800229a:	221f      	movs	r2, #31
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43da      	mvns	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	400a      	ands	r2, r1
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	3b05      	subs	r3, #5
 80022c4:	fa00 f203 	lsl.w	r2, r0, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	635a      	str	r2, [r3, #52]	; 0x34
 80022d0:	e04c      	b.n	800236c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d824      	bhi.n	8002324 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	3b23      	subs	r3, #35	; 0x23
 80022ec:	221f      	movs	r2, #31
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	400a      	ands	r2, r1
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	4618      	mov	r0, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	3b23      	subs	r3, #35	; 0x23
 8002316:	fa00 f203 	lsl.w	r2, r0, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
 8002322:	e023      	b.n	800236c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	3b41      	subs	r3, #65	; 0x41
 8002336:	221f      	movs	r2, #31
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43da      	mvns	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	400a      	ands	r2, r1
 8002344:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	b29b      	uxth	r3, r3
 8002352:	4618      	mov	r0, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	3b41      	subs	r3, #65	; 0x41
 8002360:	fa00 f203 	lsl.w	r2, r0, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a30      	ldr	r2, [pc, #192]	; (8002434 <HAL_ADC_ConfigChannel+0x29c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10a      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1f4>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800237e:	d105      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002380:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <HAL_ADC_ConfigChannel+0x2a0>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a2c      	ldr	r2, [pc, #176]	; (8002438 <HAL_ADC_ConfigChannel+0x2a0>)
 8002386:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800238a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a28      	ldr	r2, [pc, #160]	; (8002434 <HAL_ADC_ConfigChannel+0x29c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10f      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x21e>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b12      	cmp	r3, #18
 800239c:	d10b      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800239e:	4b26      	ldr	r3, [pc, #152]	; (8002438 <HAL_ADC_ConfigChannel+0x2a0>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4a25      	ldr	r2, [pc, #148]	; (8002438 <HAL_ADC_ConfigChannel+0x2a0>)
 80023a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023a8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80023aa:	4b23      	ldr	r3, [pc, #140]	; (8002438 <HAL_ADC_ConfigChannel+0x2a0>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4a22      	ldr	r2, [pc, #136]	; (8002438 <HAL_ADC_ConfigChannel+0x2a0>)
 80023b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a1e      	ldr	r2, [pc, #120]	; (8002434 <HAL_ADC_ConfigChannel+0x29c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d12b      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x280>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <HAL_ADC_ConfigChannel+0x298>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d003      	beq.n	80023d2 <HAL_ADC_ConfigChannel+0x23a>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b11      	cmp	r3, #17
 80023d0:	d122      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_ADC_ConfigChannel+0x2a0>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4a18      	ldr	r2, [pc, #96]	; (8002438 <HAL_ADC_ConfigChannel+0x2a0>)
 80023d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023dc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_ADC_ConfigChannel+0x2a0>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a15      	ldr	r2, [pc, #84]	; (8002438 <HAL_ADC_ConfigChannel+0x2a0>)
 80023e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a10      	ldr	r2, [pc, #64]	; (8002430 <HAL_ADC_ConfigChannel+0x298>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d111      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_ADC_ConfigChannel+0x2a4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a11      	ldr	r2, [pc, #68]	; (8002440 <HAL_ADC_ConfigChannel+0x2a8>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0c9a      	lsrs	r2, r3, #18
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800240a:	e002      	b.n	8002412 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3b01      	subs	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f9      	bne.n	800240c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	10000012 	.word	0x10000012
 8002434:	40012000 	.word	0x40012000
 8002438:	40012300 	.word	0x40012300
 800243c:	2000087c 	.word	0x2000087c
 8002440:	431bde83 	.word	0x431bde83

08002444 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800244c:	4b78      	ldr	r3, [pc, #480]	; (8002630 <ADC_Init+0x1ec>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a77      	ldr	r2, [pc, #476]	; (8002630 <ADC_Init+0x1ec>)
 8002452:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002456:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002458:	4b75      	ldr	r3, [pc, #468]	; (8002630 <ADC_Init+0x1ec>)
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4973      	ldr	r1, [pc, #460]	; (8002630 <ADC_Init+0x1ec>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	021a      	lsls	r2, r3, #8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002498:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6899      	ldr	r1, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	4a58      	ldr	r2, [pc, #352]	; (8002634 <ADC_Init+0x1f0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d022      	beq.n	800251e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6899      	ldr	r1, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6899      	ldr	r1, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	e00f      	b.n	800253e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800252c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800253c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0202 	bic.w	r2, r2, #2
 800254c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6899      	ldr	r1, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	005a      	lsls	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01b      	beq.n	80025a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800258a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	3b01      	subs	r3, #1
 8002598:	035a      	lsls	r2, r3, #13
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	e007      	b.n	80025b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	051a      	lsls	r2, r3, #20
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6899      	ldr	r1, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025f6:	025a      	lsls	r2, r3, #9
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800260e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6899      	ldr	r1, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	029a      	lsls	r2, r3, #10
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	609a      	str	r2, [r3, #8]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40012300 	.word	0x40012300
 8002634:	0f000001 	.word	0x0f000001

08002638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <__NVIC_SetPriorityGrouping+0x40>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002654:	4013      	ands	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <__NVIC_SetPriorityGrouping+0x44>)
 8002662:	4313      	orrs	r3, r2
 8002664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002666:	4a04      	ldr	r2, [pc, #16]	; (8002678 <__NVIC_SetPriorityGrouping+0x40>)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	60d3      	str	r3, [r2, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00
 800267c:	05fa0000 	.word	0x05fa0000

08002680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <__NVIC_GetPriorityGrouping+0x18>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	f003 0307 	and.w	r3, r3, #7
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	db0b      	blt.n	80026c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <__NVIC_EnableIRQ+0x38>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2001      	movs	r0, #1
 80026be:	fa00 f202 	lsl.w	r2, r0, r2
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db0a      	blt.n	8002702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	; (8002724 <__NVIC_SetPriority+0x4c>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	440b      	add	r3, r1
 80026fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002700:	e00a      	b.n	8002718 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4908      	ldr	r1, [pc, #32]	; (8002728 <__NVIC_SetPriority+0x50>)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3b04      	subs	r3, #4
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	440b      	add	r3, r1
 8002716:	761a      	strb	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
         );
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a4:	d301      	bcc.n	80027aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00f      	b.n	80027ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <SysTick_Config+0x40>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b2:	210f      	movs	r1, #15
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	f7ff ff8e 	bl	80026d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <SysTick_Config+0x40>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c2:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <SysTick_Config+0x40>)
 80027c4:	2207      	movs	r2, #7
 80027c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	e000e010 	.word	0xe000e010

080027d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff29 	bl	8002638 <__NVIC_SetPriorityGrouping>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002800:	f7ff ff3e 	bl	8002680 <__NVIC_GetPriorityGrouping>
 8002804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f7ff ff8e 	bl	800272c <NVIC_EncodePriority>
 8002810:	4602      	mov	r2, r0
 8002812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff5d 	bl	80026d8 <__NVIC_SetPriority>
}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff31 	bl	800269c <__NVIC_EnableIRQ>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffa2 	bl	8002794 <SysTick_Config>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff fabc 	bl	8001de4 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d008      	beq.n	800288c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e052      	b.n	8002932 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0216 	bic.w	r2, r2, #22
 800289a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d103      	bne.n	80028bc <HAL_DMA_Abort+0x62>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d007      	beq.n	80028cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0208 	bic.w	r2, r2, #8
 80028ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028dc:	e013      	b.n	8002906 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028de:	f7ff fa81 	bl	8001de4 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d90c      	bls.n	8002906 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2220      	movs	r2, #32
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2203      	movs	r2, #3
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e015      	b.n	8002932 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1e4      	bne.n	80028de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	223f      	movs	r2, #63	; 0x3f
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d004      	beq.n	8002958 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2280      	movs	r2, #128	; 0x80
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e00c      	b.n	8002972 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2205      	movs	r2, #5
 800295c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e06a      	b.n	8002a68 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002998:	2b00      	cmp	r3, #0
 800299a:	d106      	bne.n	80029aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2223      	movs	r2, #35	; 0x23
 80029a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7fe ff27 	bl	80017f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029aa:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <HAL_ETH_Init+0xf0>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a30      	ldr	r2, [pc, #192]	; (8002a70 <HAL_ETH_Init+0xf0>)
 80029b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <HAL_ETH_Init+0xf0>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80029c2:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <HAL_ETH_Init+0xf4>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4a2b      	ldr	r2, [pc, #172]	; (8002a74 <HAL_ETH_Init+0xf4>)
 80029c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029cc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80029ce:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <HAL_ETH_Init+0xf4>)
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	4927      	ldr	r1, [pc, #156]	; (8002a74 <HAL_ETH_Init+0xf4>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80029dc:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <HAL_ETH_Init+0xf4>)
 80029de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029f8:	f7ff f9f4 	bl	8001de4 <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029fe:	e011      	b.n	8002a24 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a00:	f7ff f9f0 	bl	8001de4 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a0e:	d909      	bls.n	8002a24 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2204      	movs	r2, #4
 8002a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	22e0      	movs	r2, #224	; 0xe0
 8002a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e021      	b.n	8002a68 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1e4      	bne.n	8002a00 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f958 	bl	8002cec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f9ff 	bl	8002e40 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fa55 	bl	8002ef2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2100      	movs	r1, #0
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f9bd 	bl	8002dd0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2210      	movs	r2, #16
 8002a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40013800 	.word	0x40013800

08002a78 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4b51      	ldr	r3, [pc, #324]	; (8002bd4 <ETH_SetMACConfig+0x15c>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	7c1b      	ldrb	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <ETH_SetMACConfig+0x28>
 8002a9a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a9e:	e000      	b.n	8002aa2 <ETH_SetMACConfig+0x2a>
 8002aa0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	7c5b      	ldrb	r3, [r3, #17]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d102      	bne.n	8002ab0 <ETH_SetMACConfig+0x38>
 8002aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aae:	e000      	b.n	8002ab2 <ETH_SetMACConfig+0x3a>
 8002ab0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ab2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ab8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	7fdb      	ldrb	r3, [r3, #31]
 8002abe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ac0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ac6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	7f92      	ldrb	r2, [r2, #30]
 8002acc:	2a00      	cmp	r2, #0
 8002ace:	d102      	bne.n	8002ad6 <ETH_SetMACConfig+0x5e>
 8002ad0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ad4:	e000      	b.n	8002ad8 <ETH_SetMACConfig+0x60>
 8002ad6:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ad8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	7f1b      	ldrb	r3, [r3, #28]
 8002ade:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ae0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ae6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	791b      	ldrb	r3, [r3, #4]
 8002aec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002aee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002af6:	2a00      	cmp	r2, #0
 8002af8:	d102      	bne.n	8002b00 <ETH_SetMACConfig+0x88>
 8002afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afe:	e000      	b.n	8002b02 <ETH_SetMACConfig+0x8a>
 8002b00:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002b02:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	7bdb      	ldrb	r3, [r3, #15]
 8002b08:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b0a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b10:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b18:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b32:	2001      	movs	r0, #1
 8002b34:	f7ff f962 	bl	8001dfc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b4e:	4013      	ands	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b56:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b5e:	2a00      	cmp	r2, #0
 8002b60:	d101      	bne.n	8002b66 <ETH_SetMACConfig+0xee>
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	e000      	b.n	8002b68 <ETH_SetMACConfig+0xf0>
 8002b66:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b68:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002b76:	2a01      	cmp	r2, #1
 8002b78:	d101      	bne.n	8002b7e <ETH_SetMACConfig+0x106>
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	e000      	b.n	8002b80 <ETH_SetMACConfig+0x108>
 8002b7e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b80:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002b88:	2a01      	cmp	r2, #1
 8002b8a:	d101      	bne.n	8002b90 <ETH_SetMACConfig+0x118>
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	e000      	b.n	8002b92 <ETH_SetMACConfig+0x11a>
 8002b90:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002b9a:	2a01      	cmp	r2, #1
 8002b9c:	d101      	bne.n	8002ba2 <ETH_SetMACConfig+0x12a>
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	e000      	b.n	8002ba4 <ETH_SetMACConfig+0x12c>
 8002ba2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f7ff f91d 	bl	8001dfc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	619a      	str	r2, [r3, #24]
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	ff20810f 	.word	0xff20810f

08002bd8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <ETH_SetDMAConfig+0x110>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	7b1b      	ldrb	r3, [r3, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <ETH_SetDMAConfig+0x2c>
 8002bfe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c02:	e000      	b.n	8002c06 <ETH_SetDMAConfig+0x2e>
 8002c04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	7b5b      	ldrb	r3, [r3, #13]
 8002c0a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c0c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	7f52      	ldrb	r2, [r2, #29]
 8002c12:	2a00      	cmp	r2, #0
 8002c14:	d102      	bne.n	8002c1c <ETH_SetDMAConfig+0x44>
 8002c16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c1a:	e000      	b.n	8002c1e <ETH_SetDMAConfig+0x46>
 8002c1c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	7b9b      	ldrb	r3, [r3, #14]
 8002c24:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c26:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	7f1b      	ldrb	r3, [r3, #28]
 8002c32:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002c34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	7f9b      	ldrb	r3, [r3, #30]
 8002c3a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c3c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c42:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c4a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f7ff f8c4 	bl	8001dfc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	791b      	ldrb	r3, [r3, #4]
 8002c86:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c8c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c92:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c98:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ca0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002ca2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002caa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002cb0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cbe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f7ff f895 	bl	8001dfc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	f8de3f23 	.word	0xf8de3f23

08002cec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b0a6      	sub	sp, #152	; 0x98
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002d00:	2300      	movs	r3, #0
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d52:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d64:	4619      	mov	r1, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff fe86 	bl	8002a78 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d70:	2301      	movs	r3, #1
 8002d72:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d92:	2301      	movs	r3, #1
 8002d94:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002da0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002da2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002da6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002dbc:	f107 0308 	add.w	r3, r7, #8
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ff08 	bl	8002bd8 <ETH_SetDMAConfig>
}
 8002dc8:	bf00      	nop
 8002dca:	3798      	adds	r7, #152	; 0x98
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3305      	adds	r3, #5
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	3204      	adds	r2, #4
 8002de8:	7812      	ldrb	r2, [r2, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <ETH_MACAddressConfig+0x68>)
 8002df2:	4413      	add	r3, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3303      	adds	r3, #3
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	061a      	lsls	r2, r3, #24
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3302      	adds	r3, #2
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	041b      	lsls	r3, r3, #16
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	4313      	orrs	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <ETH_MACAddressConfig+0x6c>)
 8002e22:	4413      	add	r3, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	6013      	str	r3, [r2, #0]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40028040 	.word	0x40028040
 8002e3c:	40028044 	.word	0x40028044

08002e40 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	e03e      	b.n	8002ecc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68d9      	ldr	r1, [r3, #12]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2200      	movs	r2, #0
 8002e76:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	3206      	adds	r2, #6
 8002e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d80c      	bhi.n	8002eb0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68d9      	ldr	r1, [r3, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	e004      	b.n	8002eba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d9bd      	bls.n	8002e4e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee4:	611a      	str	r2, [r3, #16]
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e046      	b.n	8002f8e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6919      	ldr	r1, [r3, #16]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2200      	movs	r2, #0
 8002f28:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2200      	movs	r2, #0
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f3c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002f44:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	3212      	adds	r2, #18
 8002f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d80c      	bhi.n	8002f7e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6919      	ldr	r1, [r3, #16]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	440b      	add	r3, r1
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	60da      	str	r2, [r3, #12]
 8002f7c:	e004      	b.n	8002f88 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d9b5      	bls.n	8002f00 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fbe:	60da      	str	r2, [r3, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	e175      	b.n	80032d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fec:	2201      	movs	r2, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	429a      	cmp	r2, r3
 8003006:	f040 8164 	bne.w	80032d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d005      	beq.n	8003022 <HAL_GPIO_Init+0x56>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d130      	bne.n	8003084 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003058:	2201      	movs	r2, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 0201 	and.w	r2, r3, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b03      	cmp	r3, #3
 800308e:	d017      	beq.n	80030c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d123      	bne.n	8003114 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	08da      	lsrs	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3208      	adds	r2, #8
 800310e:	69b9      	ldr	r1, [r7, #24]
 8003110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0203 	and.w	r2, r3, #3
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80be 	beq.w	80032d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003156:	4b66      	ldr	r3, [pc, #408]	; (80032f0 <HAL_GPIO_Init+0x324>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	4a65      	ldr	r2, [pc, #404]	; (80032f0 <HAL_GPIO_Init+0x324>)
 800315c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003160:	6453      	str	r3, [r2, #68]	; 0x44
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <HAL_GPIO_Init+0x324>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800316e:	4a61      	ldr	r2, [pc, #388]	; (80032f4 <HAL_GPIO_Init+0x328>)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	3302      	adds	r3, #2
 8003176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	220f      	movs	r2, #15
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a58      	ldr	r2, [pc, #352]	; (80032f8 <HAL_GPIO_Init+0x32c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d037      	beq.n	800320a <HAL_GPIO_Init+0x23e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a57      	ldr	r2, [pc, #348]	; (80032fc <HAL_GPIO_Init+0x330>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d031      	beq.n	8003206 <HAL_GPIO_Init+0x23a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a56      	ldr	r2, [pc, #344]	; (8003300 <HAL_GPIO_Init+0x334>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02b      	beq.n	8003202 <HAL_GPIO_Init+0x236>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a55      	ldr	r2, [pc, #340]	; (8003304 <HAL_GPIO_Init+0x338>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d025      	beq.n	80031fe <HAL_GPIO_Init+0x232>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a54      	ldr	r2, [pc, #336]	; (8003308 <HAL_GPIO_Init+0x33c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01f      	beq.n	80031fa <HAL_GPIO_Init+0x22e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a53      	ldr	r2, [pc, #332]	; (800330c <HAL_GPIO_Init+0x340>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d019      	beq.n	80031f6 <HAL_GPIO_Init+0x22a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a52      	ldr	r2, [pc, #328]	; (8003310 <HAL_GPIO_Init+0x344>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_GPIO_Init+0x226>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a51      	ldr	r2, [pc, #324]	; (8003314 <HAL_GPIO_Init+0x348>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00d      	beq.n	80031ee <HAL_GPIO_Init+0x222>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a50      	ldr	r2, [pc, #320]	; (8003318 <HAL_GPIO_Init+0x34c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d007      	beq.n	80031ea <HAL_GPIO_Init+0x21e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4f      	ldr	r2, [pc, #316]	; (800331c <HAL_GPIO_Init+0x350>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <HAL_GPIO_Init+0x21a>
 80031e2:	2309      	movs	r3, #9
 80031e4:	e012      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031e6:	230a      	movs	r3, #10
 80031e8:	e010      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031ea:	2308      	movs	r3, #8
 80031ec:	e00e      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031ee:	2307      	movs	r3, #7
 80031f0:	e00c      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031f2:	2306      	movs	r3, #6
 80031f4:	e00a      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031f6:	2305      	movs	r3, #5
 80031f8:	e008      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031fa:	2304      	movs	r3, #4
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x240>
 80031fe:	2303      	movs	r3, #3
 8003200:	e004      	b.n	800320c <HAL_GPIO_Init+0x240>
 8003202:	2302      	movs	r3, #2
 8003204:	e002      	b.n	800320c <HAL_GPIO_Init+0x240>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_GPIO_Init+0x240>
 800320a:	2300      	movs	r3, #0
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	f002 0203 	and.w	r2, r2, #3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4093      	lsls	r3, r2
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800321c:	4935      	ldr	r1, [pc, #212]	; (80032f4 <HAL_GPIO_Init+0x328>)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800322a:	4b3d      	ldr	r3, [pc, #244]	; (8003320 <HAL_GPIO_Init+0x354>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800324e:	4a34      	ldr	r2, [pc, #208]	; (8003320 <HAL_GPIO_Init+0x354>)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003254:	4b32      	ldr	r3, [pc, #200]	; (8003320 <HAL_GPIO_Init+0x354>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003278:	4a29      	ldr	r2, [pc, #164]	; (8003320 <HAL_GPIO_Init+0x354>)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800327e:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_GPIO_Init+0x354>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a2:	4a1f      	ldr	r2, [pc, #124]	; (8003320 <HAL_GPIO_Init+0x354>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a8:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_GPIO_Init+0x354>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <HAL_GPIO_Init+0x354>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	f67f ae86 	bls.w	8002fec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3724      	adds	r7, #36	; 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40013800 	.word	0x40013800
 80032f8:	40020000 	.word	0x40020000
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020800 	.word	0x40020800
 8003304:	40020c00 	.word	0x40020c00
 8003308:	40021000 	.word	0x40021000
 800330c:	40021400 	.word	0x40021400
 8003310:	40021800 	.word	0x40021800
 8003314:	40021c00 	.word	0x40021c00
 8003318:	40022000 	.word	0x40022000
 800331c:	40022400 	.word	0x40022400
 8003320:	40013c00 	.word	0x40013c00

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003340:	e003      	b.n	800334a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	041a      	lsls	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	619a      	str	r2, [r3, #24]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003356:	b480      	push	{r7}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003368:	887a      	ldrh	r2, [r7, #2]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4013      	ands	r3, r2
 800336e:	041a      	lsls	r2, r3, #16
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43d9      	mvns	r1, r3
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	400b      	ands	r3, r1
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	619a      	str	r2, [r3, #24]
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d006      	beq.n	80033b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033a2:	4a05      	ldr	r2, [pc, #20]	; (80033b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd fe14 	bl	8000fd8 <HAL_GPIO_EXTI_Callback>
  }
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40013c00 	.word	0x40013c00

080033bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033be:	b08f      	sub	sp, #60	; 0x3c
 80033c0:	af0a      	add	r7, sp, #40	; 0x28
 80033c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e116      	b.n	80035fc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d106      	bne.n	80033ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7fe fb79 	bl	8001ae0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2203      	movs	r2, #3
 80033f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f003 fd1b 	bl	8006e48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	687e      	ldr	r6, [r7, #4]
 800341a:	466d      	mov	r5, sp
 800341c:	f106 0410 	add.w	r4, r6, #16
 8003420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003428:	e894 0003 	ldmia.w	r4, {r0, r1}
 800342c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003430:	1d33      	adds	r3, r6, #4
 8003432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003434:	6838      	ldr	r0, [r7, #0]
 8003436:	f003 fcaf 	bl	8006d98 <USB_CoreInit>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0d7      	b.n	80035fc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f003 fd09 	bl	8006e6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	e04a      	b.n	80034f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	333d      	adds	r3, #61	; 0x3d
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	333c      	adds	r3, #60	; 0x3c
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	b298      	uxth	r0, r3
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3344      	adds	r3, #68	; 0x44
 800349a:	4602      	mov	r2, r0
 800349c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800349e:	7bfa      	ldrb	r2, [r7, #15]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	3340      	adds	r3, #64	; 0x40
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	3348      	adds	r3, #72	; 0x48
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	334c      	adds	r3, #76	; 0x4c
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3354      	adds	r3, #84	; 0x54
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	3301      	adds	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	7bfa      	ldrb	r2, [r7, #15]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d3af      	bcc.n	800345e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e044      	b.n	800358e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	3301      	adds	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	d3b5      	bcc.n	8003504 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	687e      	ldr	r6, [r7, #4]
 80035a0:	466d      	mov	r5, sp
 80035a2:	f106 0410 	add.w	r4, r6, #16
 80035a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80035b6:	1d33      	adds	r3, r6, #4
 80035b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ba:	6838      	ldr	r0, [r7, #0]
 80035bc:	f003 fca2 	bl	8006f04 <USB_DevInit>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e014      	b.n	80035fc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d102      	bne.n	80035f0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f80a 	bl	8003604 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 fe60 	bl	80072ba <USB_DevDisconnect>

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003604 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_PCDEx_ActivateLPM+0x44>)
 8003634:	4313      	orrs	r3, r2
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	10000003 	.word	0x10000003

0800364c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800365a:	6013      	str	r3, [r2, #0]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40007000 	.word	0x40007000

0800366c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	4b23      	ldr	r3, [pc, #140]	; (8003704 <HAL_PWREx_EnableOverDrive+0x98>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	4a22      	ldr	r2, [pc, #136]	; (8003704 <HAL_PWREx_EnableOverDrive+0x98>)
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003680:	6413      	str	r3, [r2, #64]	; 0x40
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_PWREx_EnableOverDrive+0x98>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800368e:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003698:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800369a:	f7fe fba3 	bl	8001de4 <HAL_GetTick>
 800369e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036a0:	e009      	b.n	80036b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036a2:	f7fe fb9f 	bl	8001de4 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036b0:	d901      	bls.n	80036b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e022      	b.n	80036fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c2:	d1ee      	bne.n	80036a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0f      	ldr	r2, [pc, #60]	; (8003708 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d0:	f7fe fb88 	bl	8001de4 <HAL_GetTick>
 80036d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036d6:	e009      	b.n	80036ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036d8:	f7fe fb84 	bl	8001de4 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036e6:	d901      	bls.n	80036ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e007      	b.n	80036fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036f8:	d1ee      	bne.n	80036d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40023800 	.word	0x40023800
 8003708:	40007000 	.word	0x40007000

0800370c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003714:	2300      	movs	r3, #0
 8003716:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e29b      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8087 	beq.w	800383e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003730:	4b96      	ldr	r3, [pc, #600]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b04      	cmp	r3, #4
 800373a:	d00c      	beq.n	8003756 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373c:	4b93      	ldr	r3, [pc, #588]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d112      	bne.n	800376e <HAL_RCC_OscConfig+0x62>
 8003748:	4b90      	ldr	r3, [pc, #576]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003754:	d10b      	bne.n	800376e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003756:	4b8d      	ldr	r3, [pc, #564]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d06c      	beq.n	800383c <HAL_RCC_OscConfig+0x130>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d168      	bne.n	800383c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e275      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x7a>
 8003778:	4b84      	ldr	r3, [pc, #528]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a83      	ldr	r2, [pc, #524]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800377e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	e02e      	b.n	80037e4 <HAL_RCC_OscConfig+0xd8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x9c>
 800378e:	4b7f      	ldr	r3, [pc, #508]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7e      	ldr	r2, [pc, #504]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b7c      	ldr	r3, [pc, #496]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a7b      	ldr	r2, [pc, #492]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e01d      	b.n	80037e4 <HAL_RCC_OscConfig+0xd8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0xc0>
 80037b2:	4b76      	ldr	r3, [pc, #472]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a75      	ldr	r2, [pc, #468]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b73      	ldr	r3, [pc, #460]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a72      	ldr	r2, [pc, #456]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0xd8>
 80037cc:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6e      	ldr	r2, [pc, #440]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b6c      	ldr	r3, [pc, #432]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a6b      	ldr	r2, [pc, #428]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fafa 	bl	8001de4 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fe faf6 	bl	8001de4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e229      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b61      	ldr	r3, [pc, #388]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0xe8>
 8003812:	e014      	b.n	800383e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fe fae6 	bl	8001de4 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800381c:	f7fe fae2 	bl	8001de4 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e215      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	4b57      	ldr	r3, [pc, #348]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x110>
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d069      	beq.n	800391e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800384a:	4b50      	ldr	r3, [pc, #320]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003856:	4b4d      	ldr	r3, [pc, #308]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b08      	cmp	r3, #8
 8003860:	d11c      	bne.n	800389c <HAL_RCC_OscConfig+0x190>
 8003862:	4b4a      	ldr	r3, [pc, #296]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d116      	bne.n	800389c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386e:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_RCC_OscConfig+0x17a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d001      	beq.n	8003886 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e1e9      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	493d      	ldr	r1, [pc, #244]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	e040      	b.n	800391e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d023      	beq.n	80038ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a4:	4b39      	ldr	r3, [pc, #228]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a38      	ldr	r2, [pc, #224]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe fa98 	bl	8001de4 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b8:	f7fe fa94 	bl	8001de4 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e1c7      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	4b30      	ldr	r3, [pc, #192]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d6:	4b2d      	ldr	r3, [pc, #180]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4929      	ldr	r1, [pc, #164]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]
 80038ea:	e018      	b.n	800391e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a26      	ldr	r2, [pc, #152]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fe fa74 	bl	8001de4 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003900:	f7fe fa70 	bl	8001de4 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e1a3      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003912:	4b1e      	ldr	r3, [pc, #120]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d038      	beq.n	800399c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d019      	beq.n	8003966 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003932:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003936:	4a15      	ldr	r2, [pc, #84]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393e:	f7fe fa51 	bl	8001de4 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003946:	f7fe fa4d 	bl	8001de4 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e180      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800395a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x23a>
 8003964:	e01a      	b.n	800399c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396a:	4a08      	ldr	r2, [pc, #32]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003972:	f7fe fa37 	bl	8001de4 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	e00a      	b.n	8003990 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397a:	f7fe fa33 	bl	8001de4 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d903      	bls.n	8003990 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e166      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
 800398c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003990:	4b92      	ldr	r3, [pc, #584]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ee      	bne.n	800397a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80a4 	beq.w	8003af2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039aa:	4b8c      	ldr	r3, [pc, #560]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10d      	bne.n	80039d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b6:	4b89      	ldr	r3, [pc, #548]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	4a88      	ldr	r2, [pc, #544]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 80039bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c0:	6413      	str	r3, [r2, #64]	; 0x40
 80039c2:	4b86      	ldr	r3, [pc, #536]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ce:	2301      	movs	r3, #1
 80039d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d2:	4b83      	ldr	r3, [pc, #524]	; (8003be0 <HAL_RCC_OscConfig+0x4d4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d118      	bne.n	8003a10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039de:	4b80      	ldr	r3, [pc, #512]	; (8003be0 <HAL_RCC_OscConfig+0x4d4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a7f      	ldr	r2, [pc, #508]	; (8003be0 <HAL_RCC_OscConfig+0x4d4>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ea:	f7fe f9fb 	bl	8001de4 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fe f9f7 	bl	8001de4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b64      	cmp	r3, #100	; 0x64
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e12a      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a04:	4b76      	ldr	r3, [pc, #472]	; (8003be0 <HAL_RCC_OscConfig+0x4d4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0x31a>
 8003a18:	4b70      	ldr	r3, [pc, #448]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a6f      	ldr	r2, [pc, #444]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
 8003a24:	e02d      	b.n	8003a82 <HAL_RCC_OscConfig+0x376>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x33c>
 8003a2e:	4b6b      	ldr	r3, [pc, #428]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a6a      	ldr	r2, [pc, #424]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3a:	4b68      	ldr	r3, [pc, #416]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a67      	ldr	r2, [pc, #412]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a40:	f023 0304 	bic.w	r3, r3, #4
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
 8003a46:	e01c      	b.n	8003a82 <HAL_RCC_OscConfig+0x376>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	d10c      	bne.n	8003a6a <HAL_RCC_OscConfig+0x35e>
 8003a50:	4b62      	ldr	r3, [pc, #392]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a61      	ldr	r2, [pc, #388]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a56:	f043 0304 	orr.w	r3, r3, #4
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5c:	4b5f      	ldr	r3, [pc, #380]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	4a5e      	ldr	r2, [pc, #376]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	6713      	str	r3, [r2, #112]	; 0x70
 8003a68:	e00b      	b.n	8003a82 <HAL_RCC_OscConfig+0x376>
 8003a6a:	4b5c      	ldr	r3, [pc, #368]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	4a5b      	ldr	r2, [pc, #364]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	6713      	str	r3, [r2, #112]	; 0x70
 8003a76:	4b59      	ldr	r3, [pc, #356]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a7c:	f023 0304 	bic.w	r3, r3, #4
 8003a80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d015      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8a:	f7fe f9ab 	bl	8001de4 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fe f9a7 	bl	8001de4 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e0d8      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa8:	4b4c      	ldr	r3, [pc, #304]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0ee      	beq.n	8003a92 <HAL_RCC_OscConfig+0x386>
 8003ab4:	e014      	b.n	8003ae0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab6:	f7fe f995 	bl	8001de4 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abc:	e00a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003abe:	f7fe f991 	bl	8001de4 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e0c2      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad4:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ee      	bne.n	8003abe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d105      	bne.n	8003af2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	4a3c      	ldr	r2, [pc, #240]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80ae 	beq.w	8003c58 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003afc:	4b37      	ldr	r3, [pc, #220]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d06d      	beq.n	8003be4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d14b      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b10:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a31      	ldr	r2, [pc, #196]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fe f962 	bl	8001de4 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe f95e 	bl	8001de4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e091      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	4b29      	ldr	r3, [pc, #164]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	019b      	lsls	r3, r3, #6
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	071b      	lsls	r3, r3, #28
 8003b6e:	491b      	ldr	r1, [pc, #108]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fe f930 	bl	8001de4 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b88:	f7fe f92c 	bl	8001de4 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e05f      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x47c>
 8003ba6:	e057      	b.n	8003c58 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0b      	ldr	r2, [pc, #44]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7fe f916 	bl	8001de4 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fe f912 	bl	8001de4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e045      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4b0>
 8003bda:	e03d      	b.n	8003c58 <HAL_RCC_OscConfig+0x54c>
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <HAL_RCC_OscConfig+0x558>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d030      	beq.n	8003c54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d129      	bne.n	8003c54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d122      	bne.n	8003c54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d119      	bne.n	8003c54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d10f      	bne.n	8003c54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d107      	bne.n	8003c54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800

08003c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0d0      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c80:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d910      	bls.n	8003cb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8e:	4b67      	ldr	r3, [pc, #412]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 020f 	bic.w	r2, r3, #15
 8003c96:	4965      	ldr	r1, [pc, #404]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9e:	4b63      	ldr	r3, [pc, #396]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0b8      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d020      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc8:	4b59      	ldr	r3, [pc, #356]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4a58      	ldr	r2, [pc, #352]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce0:	4b53      	ldr	r3, [pc, #332]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4a52      	ldr	r2, [pc, #328]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cec:	4b50      	ldr	r3, [pc, #320]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	494d      	ldr	r1, [pc, #308]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d040      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d115      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e07f      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2a:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e073      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3a:	4b3d      	ldr	r3, [pc, #244]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e06b      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d4a:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f023 0203 	bic.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4936      	ldr	r1, [pc, #216]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5c:	f7fe f842 	bl	8001de4 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d64:	f7fe f83e 	bl	8001de4 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e053      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 020c 	and.w	r2, r3, #12
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1eb      	bne.n	8003d64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d210      	bcs.n	8003dbc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 020f 	bic.w	r2, r3, #15
 8003da2:	4922      	ldr	r1, [pc, #136]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e032      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc8:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4916      	ldr	r1, [pc, #88]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003de6:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	490e      	ldr	r1, [pc, #56]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dfa:	f000 f821 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	091b      	lsrs	r3, r3, #4
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	490a      	ldr	r1, [pc, #40]	; (8003e34 <HAL_RCC_ClockConfig+0x1cc>)
 8003e0c:	5ccb      	ldrb	r3, [r1, r3]
 8003e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e12:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <HAL_RCC_ClockConfig+0x1d0>)
 8003e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_RCC_ClockConfig+0x1d4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fd ff9e 	bl	8001d5c <HAL_InitTick>

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40023c00 	.word	0x40023c00
 8003e30:	40023800 	.word	0x40023800
 8003e34:	0800ea80 	.word	0x0800ea80
 8003e38:	2000087c 	.word	0x2000087c
 8003e3c:	20000880 	.word	0x20000880

08003e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e44:	b094      	sub	sp, #80	; 0x50
 8003e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e50:	2300      	movs	r3, #0
 8003e52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e58:	4b79      	ldr	r3, [pc, #484]	; (8004040 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 030c 	and.w	r3, r3, #12
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d00d      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x40>
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	f200 80e1 	bhi.w	800402c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x34>
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d003      	beq.n	8003e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e72:	e0db      	b.n	800402c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e74:	4b73      	ldr	r3, [pc, #460]	; (8004044 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e78:	e0db      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e7a:	4b73      	ldr	r3, [pc, #460]	; (8004048 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e7e:	e0d8      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e80:	4b6f      	ldr	r3, [pc, #444]	; (8004040 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e88:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e8a:	4b6d      	ldr	r3, [pc, #436]	; (8004040 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d063      	beq.n	8003f5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e96:	4b6a      	ldr	r3, [pc, #424]	; (8004040 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	099b      	lsrs	r3, r3, #6
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eaa:	2300      	movs	r3, #0
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
 8003eae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	462b      	mov	r3, r5
 8003eb6:	f04f 0000 	mov.w	r0, #0
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	0159      	lsls	r1, r3, #5
 8003ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec4:	0150      	lsls	r0, r2, #5
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4621      	mov	r1, r4
 8003ecc:	1a51      	subs	r1, r2, r1
 8003ece:	6139      	str	r1, [r7, #16]
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee4:	4659      	mov	r1, fp
 8003ee6:	018b      	lsls	r3, r1, #6
 8003ee8:	4651      	mov	r1, sl
 8003eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eee:	4651      	mov	r1, sl
 8003ef0:	018a      	lsls	r2, r1, #6
 8003ef2:	4651      	mov	r1, sl
 8003ef4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ef8:	4659      	mov	r1, fp
 8003efa:	eb63 0901 	sbc.w	r9, r3, r1
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f12:	4690      	mov	r8, r2
 8003f14:	4699      	mov	r9, r3
 8003f16:	4623      	mov	r3, r4
 8003f18:	eb18 0303 	adds.w	r3, r8, r3
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	462b      	mov	r3, r5
 8003f20:	eb49 0303 	adc.w	r3, r9, r3
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f32:	4629      	mov	r1, r5
 8003f34:	024b      	lsls	r3, r1, #9
 8003f36:	4621      	mov	r1, r4
 8003f38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	024a      	lsls	r2, r1, #9
 8003f40:	4610      	mov	r0, r2
 8003f42:	4619      	mov	r1, r3
 8003f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f46:	2200      	movs	r2, #0
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f50:	f7fc f9de 	bl	8000310 <__aeabi_uldivmod>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4613      	mov	r3, r2
 8003f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f5c:	e058      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5e:	4b38      	ldr	r3, [pc, #224]	; (8004040 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	099b      	lsrs	r3, r3, #6
 8003f64:	2200      	movs	r2, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	4611      	mov	r1, r2
 8003f6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f6e:	623b      	str	r3, [r7, #32]
 8003f70:	2300      	movs	r3, #0
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
 8003f74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	f04f 0000 	mov.w	r0, #0
 8003f80:	f04f 0100 	mov.w	r1, #0
 8003f84:	0159      	lsls	r1, r3, #5
 8003f86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f8a:	0150      	lsls	r0, r2, #5
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4641      	mov	r1, r8
 8003f92:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f96:	4649      	mov	r1, r9
 8003f98:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fb0:	ebb2 040a 	subs.w	r4, r2, sl
 8003fb4:	eb63 050b 	sbc.w	r5, r3, fp
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	00eb      	lsls	r3, r5, #3
 8003fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fc6:	00e2      	lsls	r2, r4, #3
 8003fc8:	4614      	mov	r4, r2
 8003fca:	461d      	mov	r5, r3
 8003fcc:	4643      	mov	r3, r8
 8003fce:	18e3      	adds	r3, r4, r3
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	eb45 0303 	adc.w	r3, r5, r3
 8003fd8:	607b      	str	r3, [r7, #4]
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	028b      	lsls	r3, r1, #10
 8003fea:	4621      	mov	r1, r4
 8003fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	028a      	lsls	r2, r1, #10
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	61fa      	str	r2, [r7, #28]
 8004000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004004:	f7fc f984 	bl	8000310 <__aeabi_uldivmod>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4613      	mov	r3, r2
 800400e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCC_GetSysClockFreq+0x200>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	0c1b      	lsrs	r3, r3, #16
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	3301      	adds	r3, #1
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800402a:	e002      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800402c:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_RCC_GetSysClockFreq+0x204>)
 800402e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004034:	4618      	mov	r0, r3
 8004036:	3750      	adds	r7, #80	; 0x50
 8004038:	46bd      	mov	sp, r7
 800403a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800403e:	bf00      	nop
 8004040:	40023800 	.word	0x40023800
 8004044:	00f42400 	.word	0x00f42400
 8004048:	007a1200 	.word	0x007a1200

0800404c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <HAL_RCC_GetHCLKFreq+0x14>)
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	2000087c 	.word	0x2000087c

08004064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004068:	f7ff fff0 	bl	800404c <HAL_RCC_GetHCLKFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	0a9b      	lsrs	r3, r3, #10
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4903      	ldr	r1, [pc, #12]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40023800 	.word	0x40023800
 8004088:	0800ea90 	.word	0x0800ea90

0800408c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004090:	f7ff ffdc 	bl	800404c <HAL_RCC_GetHCLKFreq>
 8004094:	4602      	mov	r2, r0
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	0b5b      	lsrs	r3, r3, #13
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	4903      	ldr	r1, [pc, #12]	; (80040b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a2:	5ccb      	ldrb	r3, [r1, r3]
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40023800 	.word	0x40023800
 80040b0:	0800ea90 	.word	0x0800ea90

080040b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d012      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040dc:	4b69      	ldr	r3, [pc, #420]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a68      	ldr	r2, [pc, #416]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040e6:	6093      	str	r3, [r2, #8]
 80040e8:	4b66      	ldr	r3, [pc, #408]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f0:	4964      	ldr	r1, [pc, #400]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80040fe:	2301      	movs	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d017      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800410e:	4b5d      	ldr	r3, [pc, #372]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	4959      	ldr	r1, [pc, #356]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800412c:	d101      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800412e:	2301      	movs	r3, #1
 8004130:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800413a:	2301      	movs	r3, #1
 800413c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d017      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800414a:	4b4e      	ldr	r3, [pc, #312]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004150:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	494a      	ldr	r1, [pc, #296]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004168:	d101      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800416a:	2301      	movs	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004186:	2301      	movs	r3, #1
 8004188:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 808b 	beq.w	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004198:	4b3a      	ldr	r3, [pc, #232]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	4a39      	ldr	r2, [pc, #228]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a2:	6413      	str	r3, [r2, #64]	; 0x40
 80041a4:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041b0:	4b35      	ldr	r3, [pc, #212]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a34      	ldr	r2, [pc, #208]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041bc:	f7fd fe12 	bl	8001de4 <HAL_GetTick>
 80041c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c4:	f7fd fe0e 	bl	8001de4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e38f      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041d6:	4b2c      	ldr	r3, [pc, #176]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041e2:	4b28      	ldr	r3, [pc, #160]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d035      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d02e      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004200:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004208:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800420a:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004216:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	4a1a      	ldr	r2, [pc, #104]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004220:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004222:	4a18      	ldr	r2, [pc, #96]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004228:	4b16      	ldr	r3, [pc, #88]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b01      	cmp	r3, #1
 8004232:	d114      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fd fdd6 	bl	8001de4 <HAL_GetTick>
 8004238:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423a:	e00a      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7fd fdd2 	bl	8001de4 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e351      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004252:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0ee      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426a:	d111      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800427a:	400b      	ands	r3, r1
 800427c:	4901      	ldr	r1, [pc, #4]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
 8004282:	e00b      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004284:	40023800 	.word	0x40023800
 8004288:	40007000 	.word	0x40007000
 800428c:	0ffffcff 	.word	0x0ffffcff
 8004290:	4bac      	ldr	r3, [pc, #688]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4aab      	ldr	r2, [pc, #684]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004296:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800429a:	6093      	str	r3, [r2, #8]
 800429c:	4ba9      	ldr	r3, [pc, #676]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a8:	49a6      	ldr	r1, [pc, #664]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d010      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042ba:	4ba2      	ldr	r3, [pc, #648]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c0:	4aa0      	ldr	r2, [pc, #640]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042ca:	4b9e      	ldr	r3, [pc, #632]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	499b      	ldr	r1, [pc, #620]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042e8:	4b96      	ldr	r3, [pc, #600]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042f6:	4993      	ldr	r1, [pc, #588]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800430a:	4b8e      	ldr	r3, [pc, #568]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004318:	498a      	ldr	r1, [pc, #552]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800432c:	4b85      	ldr	r3, [pc, #532]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433a:	4982      	ldr	r1, [pc, #520]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800434e:	4b7d      	ldr	r3, [pc, #500]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004354:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435c:	4979      	ldr	r1, [pc, #484]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004370:	4b74      	ldr	r3, [pc, #464]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	f023 0203 	bic.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	4971      	ldr	r1, [pc, #452]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004392:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	f023 020c 	bic.w	r2, r3, #12
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a0:	4968      	ldr	r1, [pc, #416]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043b4:	4b63      	ldr	r3, [pc, #396]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c2:	4960      	ldr	r1, [pc, #384]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043d6:	4b5b      	ldr	r3, [pc, #364]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e4:	4957      	ldr	r1, [pc, #348]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043f8:	4b52      	ldr	r3, [pc, #328]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	494f      	ldr	r1, [pc, #316]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800441a:	4b4a      	ldr	r3, [pc, #296]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004420:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	4946      	ldr	r1, [pc, #280]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800443c:	4b41      	ldr	r3, [pc, #260]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004442:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444a:	493e      	ldr	r1, [pc, #248]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800445e:	4b39      	ldr	r3, [pc, #228]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004464:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446c:	4935      	ldr	r1, [pc, #212]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004480:	4b30      	ldr	r3, [pc, #192]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800448e:	492d      	ldr	r1, [pc, #180]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d011      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044a2:	4b28      	ldr	r3, [pc, #160]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b0:	4924      	ldr	r1, [pc, #144]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c0:	d101      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044c2:	2301      	movs	r3, #1
 80044c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044d2:	2301      	movs	r3, #1
 80044d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044e2:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f0:	4914      	ldr	r1, [pc, #80]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00b      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004514:	490b      	ldr	r1, [pc, #44]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00f      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004538:	4902      	ldr	r1, [pc, #8]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004540:	e002      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00b      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004554:	4b8a      	ldr	r3, [pc, #552]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800455a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	4986      	ldr	r1, [pc, #536]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004578:	4b81      	ldr	r3, [pc, #516]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800457e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004588:	497d      	ldr	r1, [pc, #500]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d006      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 80d6 	beq.w	8004750 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045a4:	4b76      	ldr	r3, [pc, #472]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a75      	ldr	r2, [pc, #468]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b0:	f7fd fc18 	bl	8001de4 <HAL_GetTick>
 80045b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045b8:	f7fd fc14 	bl	8001de4 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	; 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e195      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045ca:	4b6d      	ldr	r3, [pc, #436]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d021      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d11d      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045ea:	4b65      	ldr	r3, [pc, #404]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f0:	0c1b      	lsrs	r3, r3, #16
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045f8:	4b61      	ldr	r3, [pc, #388]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fe:	0e1b      	lsrs	r3, r3, #24
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	019a      	lsls	r2, r3, #6
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	041b      	lsls	r3, r3, #16
 8004610:	431a      	orrs	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	061b      	lsls	r3, r3, #24
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	071b      	lsls	r3, r3, #28
 800461e:	4958      	ldr	r1, [pc, #352]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d004      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004644:	2b00      	cmp	r3, #0
 8004646:	d02e      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004650:	d129      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004652:	4b4b      	ldr	r3, [pc, #300]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004660:	4b47      	ldr	r3, [pc, #284]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004666:	0f1b      	lsrs	r3, r3, #28
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	019a      	lsls	r2, r3, #6
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	041b      	lsls	r3, r3, #16
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	061b      	lsls	r3, r3, #24
 8004680:	431a      	orrs	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	071b      	lsls	r3, r3, #28
 8004686:	493e      	ldr	r1, [pc, #248]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800468e:	4b3c      	ldr	r3, [pc, #240]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004694:	f023 021f 	bic.w	r2, r3, #31
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	3b01      	subs	r3, #1
 800469e:	4938      	ldr	r1, [pc, #224]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d01d      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046b2:	4b33      	ldr	r3, [pc, #204]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b8:	0e1b      	lsrs	r3, r3, #24
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046c0:	4b2f      	ldr	r3, [pc, #188]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c6:	0f1b      	lsrs	r3, r3, #28
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	019a      	lsls	r2, r3, #6
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	041b      	lsls	r3, r3, #16
 80046da:	431a      	orrs	r2, r3
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	061b      	lsls	r3, r3, #24
 80046e0:	431a      	orrs	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	071b      	lsls	r3, r3, #28
 80046e6:	4926      	ldr	r1, [pc, #152]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d011      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	019a      	lsls	r2, r3, #6
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	041b      	lsls	r3, r3, #16
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	061b      	lsls	r3, r3, #24
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	071b      	lsls	r3, r3, #28
 8004716:	491a      	ldr	r1, [pc, #104]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a17      	ldr	r2, [pc, #92]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004724:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472a:	f7fd fb5b 	bl	8001de4 <HAL_GetTick>
 800472e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004730:	e008      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004732:	f7fd fb57 	bl	8001de4 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b64      	cmp	r3, #100	; 0x64
 800473e:	d901      	bls.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e0d8      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004744:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b01      	cmp	r3, #1
 8004754:	f040 80ce 	bne.w	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a08      	ldr	r2, [pc, #32]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800475e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004764:	f7fd fb3e 	bl	8001de4 <HAL_GetTick>
 8004768:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800476a:	e00b      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800476c:	f7fd fb3a 	bl	8001de4 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b64      	cmp	r3, #100	; 0x64
 8004778:	d904      	bls.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e0bb      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800477e:	bf00      	nop
 8004780:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004784:	4b5e      	ldr	r3, [pc, #376]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800478c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004790:	d0ec      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d009      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d02e      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d12a      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047ba:	4b51      	ldr	r3, [pc, #324]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047c8:	4b4d      	ldr	r3, [pc, #308]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	0f1b      	lsrs	r3, r3, #28
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	019a      	lsls	r2, r3, #6
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	041b      	lsls	r3, r3, #16
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	061b      	lsls	r3, r3, #24
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	071b      	lsls	r3, r3, #28
 80047ee:	4944      	ldr	r1, [pc, #272]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047f6:	4b42      	ldr	r3, [pc, #264]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	3b01      	subs	r3, #1
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	493d      	ldr	r1, [pc, #244]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d022      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004824:	d11d      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004826:	4b36      	ldr	r3, [pc, #216]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482c:	0e1b      	lsrs	r3, r3, #24
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004834:	4b32      	ldr	r3, [pc, #200]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	0f1b      	lsrs	r3, r3, #28
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	019a      	lsls	r2, r3, #6
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	431a      	orrs	r2, r3
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	061b      	lsls	r3, r3, #24
 8004854:	431a      	orrs	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	071b      	lsls	r3, r3, #28
 800485a:	4929      	ldr	r1, [pc, #164]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d028      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800486e:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	0e1b      	lsrs	r3, r3, #24
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800487c:	4b20      	ldr	r3, [pc, #128]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	0c1b      	lsrs	r3, r3, #16
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	019a      	lsls	r2, r3, #6
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	041b      	lsls	r3, r3, #16
 8004894:	431a      	orrs	r2, r3
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	071b      	lsls	r3, r3, #28
 80048a2:	4917      	ldr	r1, [pc, #92]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4911      	ldr	r1, [pc, #68]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048c0:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a0e      	ldr	r2, [pc, #56]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048cc:	f7fd fa8a 	bl	8001de4 <HAL_GetTick>
 80048d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048d4:	f7fd fa86 	bl	8001de4 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b64      	cmp	r3, #100	; 0x64
 80048e0:	d901      	bls.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e007      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048e6:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048f2:	d1ef      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40023800 	.word	0x40023800

08004904 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e071      	b.n	80049fe <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	7f5b      	ldrb	r3, [r3, #29]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fd f81c 	bl	8001968 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b10      	cmp	r3, #16
 8004942:	d053      	beq.n	80049ec <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	22ca      	movs	r2, #202	; 0xca
 800494a:	625a      	str	r2, [r3, #36]	; 0x24
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2253      	movs	r2, #83	; 0x53
 8004952:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fa4d 	bl	8004df4 <RTC_EnterInitMode>
 800495a:	4603      	mov	r3, r0
 800495c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d12a      	bne.n	80049ba <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6899      	ldr	r1, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b26      	ldr	r3, [pc, #152]	; (8004a08 <HAL_RTC_Init+0x104>)
 8004970:	400b      	ands	r3, r1
 8004972:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6899      	ldr	r1, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	68d2      	ldr	r2, [r2, #12]
 800499a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6919      	ldr	r1, [r3, #16]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	041a      	lsls	r2, r3, #16
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fa56 	bl	8004e62 <RTC_ExitInitMode>
 80049b6:	4603      	mov	r3, r0
 80049b8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d110      	bne.n	80049e2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0208 	bic.w	r2, r2, #8
 80049ce:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	22ff      	movs	r2, #255	; 0xff
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24
 80049ea:	e001      	b.n	80049f0 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d102      	bne.n	80049fc <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	ff8fffbf 	.word	0xff8fffbf

08004a0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	7f1b      	ldrb	r3, [r3, #28]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_RTC_SetTime+0x1c>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e085      	b.n	8004b34 <HAL_RTC_SetTime+0x128>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2202      	movs	r2, #2
 8004a32:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d126      	bne.n	8004a88 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d102      	bne.n	8004a4e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fa2a 	bl	8004eac <RTC_ByteToBcd2>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fa23 	bl	8004eac <RTC_ByteToBcd2>
 8004a66:	4603      	mov	r3, r0
 8004a68:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a6a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	789b      	ldrb	r3, [r3, #2]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fa1b 	bl	8004eac <RTC_ByteToBcd2>
 8004a76:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a78:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	78db      	ldrb	r3, [r3, #3]
 8004a80:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e018      	b.n	8004aba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d102      	bne.n	8004a9c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	785b      	ldrb	r3, [r3, #1]
 8004aa6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004aa8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004aae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	78db      	ldrb	r3, [r3, #3]
 8004ab4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	22ca      	movs	r2, #202	; 0xca
 8004ac0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2253      	movs	r2, #83	; 0x53
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f992 	bl	8004df4 <RTC_EnterInitMode>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004ad4:	7cfb      	ldrb	r3, [r7, #19]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d11e      	bne.n	8004b18 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	6979      	ldr	r1, [r7, #20]
 8004ae0:	4b16      	ldr	r3, [pc, #88]	; (8004b3c <HAL_RTC_SetTime+0x130>)
 8004ae2:	400b      	ands	r3, r1
 8004ae4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004af4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6899      	ldr	r1, [r3, #8]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f9a7 	bl	8004e62 <RTC_ExitInitMode>
 8004b14:	4603      	mov	r3, r0
 8004b16:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004b18:	7cfb      	ldrb	r3, [r7, #19]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	22ff      	movs	r2, #255	; 0xff
 8004b2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	771a      	strb	r2, [r3, #28]

  return status;
 8004b32:	7cfb      	ldrb	r3, [r7, #19]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}
 8004b3c:	007f7f7f 	.word	0x007f7f7f

08004b40 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b22      	ldr	r3, [pc, #136]	; (8004bf8 <HAL_RTC_GetTime+0xb8>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	0c1b      	lsrs	r3, r3, #16
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	0d9b      	lsrs	r3, r3, #22
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d11a      	bne.n	8004bee <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 f993 	bl	8004ee8 <RTC_Bcd2ToByte>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	785b      	ldrb	r3, [r3, #1]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f98a 	bl	8004ee8 <RTC_Bcd2ToByte>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	789b      	ldrb	r3, [r3, #2]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 f981 	bl	8004ee8 <RTC_Bcd2ToByte>
 8004be6:	4603      	mov	r3, r0
 8004be8:	461a      	mov	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	007f7f7f 	.word	0x007f7f7f

08004bfc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	7f1b      	ldrb	r3, [r3, #28]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_RTC_SetDate+0x1c>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e06f      	b.n	8004cf8 <HAL_RTC_SetDate+0xfc>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2202      	movs	r2, #2
 8004c22:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10e      	bne.n	8004c48 <HAL_RTC_SetDate+0x4c>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	785b      	ldrb	r3, [r3, #1]
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	785b      	ldrb	r3, [r3, #1]
 8004c3a:	f023 0310 	bic.w	r3, r3, #16
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	330a      	adds	r3, #10
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d11c      	bne.n	8004c88 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	78db      	ldrb	r3, [r3, #3]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f92a 	bl	8004eac <RTC_ByteToBcd2>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	785b      	ldrb	r3, [r3, #1]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 f923 	bl	8004eac <RTC_ByteToBcd2>
 8004c66:	4603      	mov	r3, r0
 8004c68:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c6a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	789b      	ldrb	r3, [r3, #2]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 f91b 	bl	8004eac <RTC_ByteToBcd2>
 8004c76:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c78:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e00e      	b.n	8004ca6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	78db      	ldrb	r3, [r3, #3]
 8004c8c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	785b      	ldrb	r3, [r3, #1]
 8004c92:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c94:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c9a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	22ca      	movs	r2, #202	; 0xca
 8004cac:	625a      	str	r2, [r3, #36]	; 0x24
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2253      	movs	r2, #83	; 0x53
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f89c 	bl	8004df4 <RTC_EnterInitMode>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004cc0:	7cfb      	ldrb	r3, [r7, #19]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	6979      	ldr	r1, [r7, #20]
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <HAL_RTC_SetDate+0x104>)
 8004cce:	400b      	ands	r3, r1
 8004cd0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f8c5 	bl	8004e62 <RTC_ExitInitMode>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004cdc:	7cfb      	ldrb	r3, [r7, #19]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	22ff      	movs	r2, #255	; 0xff
 8004cee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	771a      	strb	r2, [r3, #28]

  return status;
 8004cf6:	7cfb      	ldrb	r3, [r7, #19]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd90      	pop	{r4, r7, pc}
 8004d00:	00ffff3f 	.word	0x00ffff3f

08004d04 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	4b21      	ldr	r3, [pc, #132]	; (8004da0 <HAL_RTC_GetDate+0x9c>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	0c1b      	lsrs	r3, r3, #16
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	0b5b      	lsrs	r3, r3, #13
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d11a      	bne.n	8004d94 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	78db      	ldrb	r3, [r3, #3]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 f8c0 	bl	8004ee8 <RTC_Bcd2ToByte>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f8b7 	bl	8004ee8 <RTC_Bcd2ToByte>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	789b      	ldrb	r3, [r3, #2]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f8ae 	bl	8004ee8 <RTC_Bcd2ToByte>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	00ffff3f 	.word	0x00ffff3f

08004da4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dbe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dc0:	f7fd f810 	bl	8001de4 <HAL_GetTick>
 8004dc4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004dc6:	e009      	b.n	8004ddc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004dc8:	f7fd f80c 	bl	8001de4 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dd6:	d901      	bls.n	8004ddc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e007      	b.n	8004dec <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0ee      	beq.n	8004dc8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d122      	bne.n	8004e58 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e22:	f7fc ffdf 	bl	8001de4 <HAL_GetTick>
 8004e26:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e28:	e00c      	b.n	8004e44 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e2a:	f7fc ffdb 	bl	8001de4 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e38:	d904      	bls.n	8004e44 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <RTC_EnterInitMode+0x64>
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d1e8      	bne.n	8004e2a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e7c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ff89 	bl	8004da4 <HAL_RTC_WaitForSynchro>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004eba:	e005      	b.n	8004ec8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	3b0a      	subs	r3, #10
 8004ec6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	2b09      	cmp	r3, #9
 8004ecc:	d8f6      	bhi.n	8004ebc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	b2db      	uxtb	r3, r3
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	4413      	add	r3, r2
 8004f16:	b2db      	uxtb	r3, r3
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e049      	b.n	8004fca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fc fd3a 	bl	80019c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f000 f9f6 	bl	8005354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d001      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e054      	b.n	8005096 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0201 	orr.w	r2, r2, #1
 8005002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a26      	ldr	r2, [pc, #152]	; (80050a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d022      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005016:	d01d      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d018      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a21      	ldr	r2, [pc, #132]	; (80050ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d013      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1f      	ldr	r2, [pc, #124]	; (80050b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00e      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d009      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1c      	ldr	r2, [pc, #112]	; (80050b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <HAL_TIM_Base_Start_IT+0xe8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d115      	bne.n	8005080 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_TIM_Base_Start_IT+0xec>)
 800505c:	4013      	ands	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b06      	cmp	r3, #6
 8005064:	d015      	beq.n	8005092 <HAL_TIM_Base_Start_IT+0xbe>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506c:	d011      	beq.n	8005092 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0201 	orr.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507e:	e008      	b.n	8005092 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e000      	b.n	8005094 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005092:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40000c00 	.word	0x40000c00
 80050b4:	40010400 	.word	0x40010400
 80050b8:	40014000 	.word	0x40014000
 80050bc:	40001800 	.word	0x40001800
 80050c0:	00010007 	.word	0x00010007

080050c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d122      	bne.n	8005120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d11b      	bne.n	8005120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0202 	mvn.w	r2, #2
 80050f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f905 	bl	8005316 <HAL_TIM_IC_CaptureCallback>
 800510c:	e005      	b.n	800511a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f8f7 	bl	8005302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f908 	bl	800532a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b04      	cmp	r3, #4
 800512c:	d122      	bne.n	8005174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b04      	cmp	r3, #4
 800513a:	d11b      	bne.n	8005174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0204 	mvn.w	r2, #4
 8005144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8db 	bl	8005316 <HAL_TIM_IC_CaptureCallback>
 8005160:	e005      	b.n	800516e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f8cd 	bl	8005302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f8de 	bl	800532a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b08      	cmp	r3, #8
 8005180:	d122      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b08      	cmp	r3, #8
 800518e:	d11b      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0208 	mvn.w	r2, #8
 8005198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2204      	movs	r2, #4
 800519e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f8b1 	bl	8005316 <HAL_TIM_IC_CaptureCallback>
 80051b4:	e005      	b.n	80051c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f8a3 	bl	8005302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f8b4 	bl	800532a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0310 	and.w	r3, r3, #16
 80051d2:	2b10      	cmp	r3, #16
 80051d4:	d122      	bne.n	800521c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d11b      	bne.n	800521c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0210 	mvn.w	r2, #16
 80051ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2208      	movs	r2, #8
 80051f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f887 	bl	8005316 <HAL_TIM_IC_CaptureCallback>
 8005208:	e005      	b.n	8005216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f879 	bl	8005302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f88a 	bl	800532a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b01      	cmp	r3, #1
 8005228:	d10e      	bne.n	8005248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b01      	cmp	r3, #1
 8005236:	d107      	bne.n	8005248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0201 	mvn.w	r2, #1
 8005240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fb fef2 	bl	800102c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005252:	2b80      	cmp	r3, #128	; 0x80
 8005254:	d10e      	bne.n	8005274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005260:	2b80      	cmp	r3, #128	; 0x80
 8005262:	d107      	bne.n	8005274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800526c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f9a8 	bl	80055c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005282:	d10e      	bne.n	80052a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	2b80      	cmp	r3, #128	; 0x80
 8005290:	d107      	bne.n	80052a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800529a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f99b 	bl	80055d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ac:	2b40      	cmp	r3, #64	; 0x40
 80052ae:	d10e      	bne.n	80052ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ba:	2b40      	cmp	r3, #64	; 0x40
 80052bc:	d107      	bne.n	80052ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f838 	bl	800533e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d10e      	bne.n	80052fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d107      	bne.n	80052fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f06f 0220 	mvn.w	r2, #32
 80052f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f95b 	bl	80055b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a40      	ldr	r2, [pc, #256]	; (8005468 <TIM_Base_SetConfig+0x114>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d013      	beq.n	8005394 <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005372:	d00f      	beq.n	8005394 <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a3d      	ldr	r2, [pc, #244]	; (800546c <TIM_Base_SetConfig+0x118>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00b      	beq.n	8005394 <TIM_Base_SetConfig+0x40>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a3c      	ldr	r2, [pc, #240]	; (8005470 <TIM_Base_SetConfig+0x11c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d007      	beq.n	8005394 <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a3b      	ldr	r2, [pc, #236]	; (8005474 <TIM_Base_SetConfig+0x120>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a3a      	ldr	r2, [pc, #232]	; (8005478 <TIM_Base_SetConfig+0x124>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d108      	bne.n	80053a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2f      	ldr	r2, [pc, #188]	; (8005468 <TIM_Base_SetConfig+0x114>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d02b      	beq.n	8005406 <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b4:	d027      	beq.n	8005406 <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2c      	ldr	r2, [pc, #176]	; (800546c <TIM_Base_SetConfig+0x118>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d023      	beq.n	8005406 <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2b      	ldr	r2, [pc, #172]	; (8005470 <TIM_Base_SetConfig+0x11c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01f      	beq.n	8005406 <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a2a      	ldr	r2, [pc, #168]	; (8005474 <TIM_Base_SetConfig+0x120>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01b      	beq.n	8005406 <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a29      	ldr	r2, [pc, #164]	; (8005478 <TIM_Base_SetConfig+0x124>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d017      	beq.n	8005406 <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a28      	ldr	r2, [pc, #160]	; (800547c <TIM_Base_SetConfig+0x128>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a27      	ldr	r2, [pc, #156]	; (8005480 <TIM_Base_SetConfig+0x12c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00f      	beq.n	8005406 <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a26      	ldr	r2, [pc, #152]	; (8005484 <TIM_Base_SetConfig+0x130>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00b      	beq.n	8005406 <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a25      	ldr	r2, [pc, #148]	; (8005488 <TIM_Base_SetConfig+0x134>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a24      	ldr	r2, [pc, #144]	; (800548c <TIM_Base_SetConfig+0x138>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d003      	beq.n	8005406 <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a23      	ldr	r2, [pc, #140]	; (8005490 <TIM_Base_SetConfig+0x13c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d108      	bne.n	8005418 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a0a      	ldr	r2, [pc, #40]	; (8005468 <TIM_Base_SetConfig+0x114>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_Base_SetConfig+0xf8>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a0c      	ldr	r2, [pc, #48]	; (8005478 <TIM_Base_SetConfig+0x124>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d103      	bne.n	8005454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	615a      	str	r2, [r3, #20]
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40010000 	.word	0x40010000
 800546c:	40000400 	.word	0x40000400
 8005470:	40000800 	.word	0x40000800
 8005474:	40000c00 	.word	0x40000c00
 8005478:	40010400 	.word	0x40010400
 800547c:	40014000 	.word	0x40014000
 8005480:	40014400 	.word	0x40014400
 8005484:	40014800 	.word	0x40014800
 8005488:	40001800 	.word	0x40001800
 800548c:	40001c00 	.word	0x40001c00
 8005490:	40002000 	.word	0x40002000

08005494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e06d      	b.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a30      	ldr	r2, [pc, #192]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a2f      	ldr	r2, [pc, #188]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d108      	bne.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a20      	ldr	r2, [pc, #128]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d022      	beq.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551e:	d01d      	beq.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1d      	ldr	r2, [pc, #116]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d018      	beq.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1c      	ldr	r2, [pc, #112]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d013      	beq.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1a      	ldr	r2, [pc, #104]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00e      	beq.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a15      	ldr	r2, [pc, #84]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d009      	beq.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a16      	ldr	r2, [pc, #88]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d004      	beq.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a15      	ldr	r2, [pc, #84]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d10c      	bne.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005562:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	4313      	orrs	r3, r2
 800556c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40010000 	.word	0x40010000
 8005598:	40010400 	.word	0x40010400
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800
 80055a4:	40000c00 	.word	0x40000c00
 80055a8:	40014000 	.word	0x40014000
 80055ac:	40001800 	.word	0x40001800

080055b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e040      	b.n	8005680 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fc f9fe 	bl	8001a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2224      	movs	r2, #36	; 0x24
 8005618:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0201 	bic.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fcca 	bl	8005fc4 <UART_SetConfig>
 8005630:	4603      	mov	r3, r0
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e022      	b.n	8005680 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 ff22 	bl	800648c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005656:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005666:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 ffa9 	bl	80065d0 <UART_CheckIdleState>
 800567e:	4603      	mov	r3, r0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08a      	sub	sp, #40	; 0x28
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800569c:	2b20      	cmp	r3, #32
 800569e:	d171      	bne.n	8005784 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_UART_Transmit+0x24>
 80056a6:	88fb      	ldrh	r3, [r7, #6]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e06a      	b.n	8005786 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2221      	movs	r2, #33	; 0x21
 80056bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056be:	f7fc fb91 	bl	8001de4 <HAL_GetTick>
 80056c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	88fa      	ldrh	r2, [r7, #6]
 80056d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056dc:	d108      	bne.n	80056f0 <HAL_UART_Transmit+0x68>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d104      	bne.n	80056f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	e003      	b.n	80056f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056f8:	e02c      	b.n	8005754 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2200      	movs	r2, #0
 8005702:	2180      	movs	r1, #128	; 0x80
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 ffb0 	bl	800666a <UART_WaitOnFlagUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e038      	b.n	8005786 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10b      	bne.n	8005732 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005728:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	3302      	adds	r3, #2
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	e007      	b.n	8005742 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	781a      	ldrb	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	3301      	adds	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1cc      	bne.n	80056fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2200      	movs	r2, #0
 8005768:	2140      	movs	r1, #64	; 0x40
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 ff7d 	bl	800666a <UART_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e005      	b.n	8005786 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005784:	2302      	movs	r3, #2
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b08a      	sub	sp, #40	; 0x28
 8005792:	af02      	add	r7, sp, #8
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	603b      	str	r3, [r7, #0]
 800579a:	4613      	mov	r3, r2
 800579c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	f040 80b1 	bne.w	800590c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_UART_Receive+0x28>
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e0a9      	b.n	800590e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2222      	movs	r2, #34	; 0x22
 80057c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057d0:	f7fc fb08 	bl	8001de4 <HAL_GetTick>
 80057d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	88fa      	ldrh	r2, [r7, #6]
 80057da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	88fa      	ldrh	r2, [r7, #6]
 80057e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ee:	d10e      	bne.n	800580e <HAL_UART_Receive+0x80>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d105      	bne.n	8005804 <HAL_UART_Receive+0x76>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005802:	e02d      	b.n	8005860 <HAL_UART_Receive+0xd2>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	22ff      	movs	r2, #255	; 0xff
 8005808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800580c:	e028      	b.n	8005860 <HAL_UART_Receive+0xd2>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10d      	bne.n	8005832 <HAL_UART_Receive+0xa4>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <HAL_UART_Receive+0x9a>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	22ff      	movs	r2, #255	; 0xff
 8005822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005826:	e01b      	b.n	8005860 <HAL_UART_Receive+0xd2>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	227f      	movs	r2, #127	; 0x7f
 800582c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005830:	e016      	b.n	8005860 <HAL_UART_Receive+0xd2>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800583a:	d10d      	bne.n	8005858 <HAL_UART_Receive+0xca>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d104      	bne.n	800584e <HAL_UART_Receive+0xc0>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	227f      	movs	r2, #127	; 0x7f
 8005848:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800584c:	e008      	b.n	8005860 <HAL_UART_Receive+0xd2>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	223f      	movs	r2, #63	; 0x3f
 8005852:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005856:	e003      	b.n	8005860 <HAL_UART_Receive+0xd2>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005866:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005870:	d108      	bne.n	8005884 <HAL_UART_Receive+0xf6>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d104      	bne.n	8005884 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	e003      	b.n	800588c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005888:	2300      	movs	r3, #0
 800588a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800588c:	e032      	b.n	80058f4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2200      	movs	r2, #0
 8005896:	2120      	movs	r1, #32
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fee6 	bl	800666a <UART_WaitOnFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e032      	b.n	800590e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10c      	bne.n	80058c8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	8a7b      	ldrh	r3, [r7, #18]
 80058b8:	4013      	ands	r3, r2
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	3302      	adds	r3, #2
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e00c      	b.n	80058e2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	8a7b      	ldrh	r3, [r7, #18]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	4013      	ands	r3, r2
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	3301      	adds	r3, #1
 80058e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1c6      	bne.n	800588e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	e000      	b.n	800590e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800590c:	2302      	movs	r3, #2
  }
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b08a      	sub	sp, #40	; 0x28
 800591a:	af00      	add	r7, sp, #0
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	4613      	mov	r3, r2
 8005922:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800592a:	2b20      	cmp	r3, #32
 800592c:	d132      	bne.n	8005994 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <HAL_UART_Receive_IT+0x24>
 8005934:	88fb      	ldrh	r3, [r7, #6]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e02b      	b.n	8005996 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d018      	beq.n	8005984 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	613b      	str	r3, [r7, #16]
   return(result);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	461a      	mov	r2, r3
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	623b      	str	r3, [r7, #32]
 8005972:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	69f9      	ldr	r1, [r7, #28]
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	61bb      	str	r3, [r7, #24]
   return(result);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e6      	bne.n	8005952 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005984:	88fb      	ldrh	r3, [r7, #6]
 8005986:	461a      	mov	r2, r3
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 ff34 	bl	80067f8 <UART_Start_Receive_IT>
 8005990:	4603      	mov	r3, r0
 8005992:	e000      	b.n	8005996 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	3728      	adds	r7, #40	; 0x28
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b0ba      	sub	sp, #232	; 0xe8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80059ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80059ce:	4013      	ands	r3, r2
 80059d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80059d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d115      	bne.n	8005a08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00f      	beq.n	8005a08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 82ac 	beq.w	8005f56 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
      }
      return;
 8005a06:	e2a6      	b.n	8005f56 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 8117 	beq.w	8005c40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a22:	4b85      	ldr	r3, [pc, #532]	; (8005c38 <HAL_UART_IRQHandler+0x298>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 810a 	beq.w	8005c40 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d011      	beq.n	8005a5c <HAL_UART_IRQHandler+0xbc>
 8005a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00b      	beq.n	8005a5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a52:	f043 0201 	orr.w	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d011      	beq.n	8005a8c <HAL_UART_IRQHandler+0xec>
 8005a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00b      	beq.n	8005a8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a82:	f043 0204 	orr.w	r2, r3, #4
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d011      	beq.n	8005abc <HAL_UART_IRQHandler+0x11c>
 8005a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00b      	beq.n	8005abc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2204      	movs	r2, #4
 8005aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab2:	f043 0202 	orr.w	r2, r3, #2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d017      	beq.n	8005af8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d105      	bne.n	8005ae0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ad8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00b      	beq.n	8005af8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aee:	f043 0208 	orr.w	r2, r3, #8
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d012      	beq.n	8005b2a <HAL_UART_IRQHandler+0x18a>
 8005b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00c      	beq.n	8005b2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b20:	f043 0220 	orr.w	r2, r3, #32
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8212 	beq.w	8005f5a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00d      	beq.n	8005b5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	d005      	beq.n	8005b82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d04f      	beq.n	8005c22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fefe 	bl	8006984 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d141      	bne.n	8005c1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1d9      	bne.n	8005b96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d013      	beq.n	8005c12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bee:	4a13      	ldr	r2, [pc, #76]	; (8005c3c <HAL_UART_IRQHandler+0x29c>)
 8005bf0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fc fe9f 	bl	800293a <HAL_DMA_Abort_IT>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d017      	beq.n	8005c32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c10:	e00f      	b.n	8005c32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f9b6 	bl	8005f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	e00b      	b.n	8005c32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f9b2 	bl	8005f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	e007      	b.n	8005c32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f9ae 	bl	8005f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005c30:	e193      	b.n	8005f5a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c32:	bf00      	nop
    return;
 8005c34:	e191      	b.n	8005f5a <HAL_UART_IRQHandler+0x5ba>
 8005c36:	bf00      	nop
 8005c38:	04000120 	.word	0x04000120
 8005c3c:	08006a4d 	.word	0x08006a4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	f040 814c 	bne.w	8005ee2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4e:	f003 0310 	and.w	r3, r3, #16
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8145 	beq.w	8005ee2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 813e 	beq.w	8005ee2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2210      	movs	r2, #16
 8005c6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	f040 80b6 	bne.w	8005dea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 8165 	beq.w	8005f5e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	f080 815d 	bcs.w	8005f5e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005caa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb8:	f000 8086 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005cea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1da      	bne.n	8005cbc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3308      	adds	r3, #8
 8005d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e1      	bne.n	8005d06 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3308      	adds	r3, #8
 8005d48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3308      	adds	r3, #8
 8005d62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e3      	bne.n	8005d42 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d98:	f023 0310 	bic.w	r3, r3, #16
 8005d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005daa:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e4      	bne.n	8005d88 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fc fd49 	bl	800285a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	4619      	mov	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f8d8 	bl	8005f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005de8:	e0b9      	b.n	8005f5e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 80ab 	beq.w	8005f62 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 80a6 	beq.w	8005f62 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e38:	647b      	str	r3, [r7, #68]	; 0x44
 8005e3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e4      	bne.n	8005e16 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3308      	adds	r3, #8
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	f023 0301 	bic.w	r3, r3, #1
 8005e62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e70:	633a      	str	r2, [r7, #48]	; 0x30
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e78:	e841 2300 	strex	r3, r2, [r1]
 8005e7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e3      	bne.n	8005e4c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f023 0310 	bic.w	r3, r3, #16
 8005eac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	69b9      	ldr	r1, [r7, #24]
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e4      	bne.n	8005e98 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f85c 	bl	8005f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ee0:	e03f      	b.n	8005f62 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00e      	beq.n	8005f0c <HAL_UART_IRQHandler+0x56c>
 8005eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d008      	beq.n	8005f0c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f853 	bl	8005fb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f0a:	e02d      	b.n	8005f68 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00e      	beq.n	8005f36 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01c      	beq.n	8005f66 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
    }
    return;
 8005f34:	e017      	b.n	8005f66 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d012      	beq.n	8005f68 <HAL_UART_IRQHandler+0x5c8>
 8005f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00c      	beq.n	8005f68 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fd92 	bl	8006a78 <UART_EndTransmit_IT>
    return;
 8005f54:	e008      	b.n	8005f68 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005f56:	bf00      	nop
 8005f58:	e006      	b.n	8005f68 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005f5a:	bf00      	nop
 8005f5c:	e004      	b.n	8005f68 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005f5e:	bf00      	nop
 8005f60:	e002      	b.n	8005f68 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005f62:	bf00      	nop
 8005f64:	e000      	b.n	8005f68 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005f66:	bf00      	nop
  }

}
 8005f68:	37e8      	adds	r7, #232	; 0xe8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop

08005f70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	4ba6      	ldr	r3, [pc, #664]	; (8006288 <UART_SetConfig+0x2c4>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6812      	ldr	r2, [r2, #0]
 8005ff6:	6979      	ldr	r1, [r7, #20]
 8005ff8:	430b      	orrs	r3, r1
 8005ffa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	430a      	orrs	r2, r1
 8006034:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a94      	ldr	r2, [pc, #592]	; (800628c <UART_SetConfig+0x2c8>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d120      	bne.n	8006082 <UART_SetConfig+0xbe>
 8006040:	4b93      	ldr	r3, [pc, #588]	; (8006290 <UART_SetConfig+0x2cc>)
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b03      	cmp	r3, #3
 800604c:	d816      	bhi.n	800607c <UART_SetConfig+0xb8>
 800604e:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <UART_SetConfig+0x90>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	08006065 	.word	0x08006065
 8006058:	08006071 	.word	0x08006071
 800605c:	0800606b 	.word	0x0800606b
 8006060:	08006077 	.word	0x08006077
 8006064:	2301      	movs	r3, #1
 8006066:	77fb      	strb	r3, [r7, #31]
 8006068:	e150      	b.n	800630c <UART_SetConfig+0x348>
 800606a:	2302      	movs	r3, #2
 800606c:	77fb      	strb	r3, [r7, #31]
 800606e:	e14d      	b.n	800630c <UART_SetConfig+0x348>
 8006070:	2304      	movs	r3, #4
 8006072:	77fb      	strb	r3, [r7, #31]
 8006074:	e14a      	b.n	800630c <UART_SetConfig+0x348>
 8006076:	2308      	movs	r3, #8
 8006078:	77fb      	strb	r3, [r7, #31]
 800607a:	e147      	b.n	800630c <UART_SetConfig+0x348>
 800607c:	2310      	movs	r3, #16
 800607e:	77fb      	strb	r3, [r7, #31]
 8006080:	e144      	b.n	800630c <UART_SetConfig+0x348>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a83      	ldr	r2, [pc, #524]	; (8006294 <UART_SetConfig+0x2d0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d132      	bne.n	80060f2 <UART_SetConfig+0x12e>
 800608c:	4b80      	ldr	r3, [pc, #512]	; (8006290 <UART_SetConfig+0x2cc>)
 800608e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006092:	f003 030c 	and.w	r3, r3, #12
 8006096:	2b0c      	cmp	r3, #12
 8006098:	d828      	bhi.n	80060ec <UART_SetConfig+0x128>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <UART_SetConfig+0xdc>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060d5 	.word	0x080060d5
 80060a4:	080060ed 	.word	0x080060ed
 80060a8:	080060ed 	.word	0x080060ed
 80060ac:	080060ed 	.word	0x080060ed
 80060b0:	080060e1 	.word	0x080060e1
 80060b4:	080060ed 	.word	0x080060ed
 80060b8:	080060ed 	.word	0x080060ed
 80060bc:	080060ed 	.word	0x080060ed
 80060c0:	080060db 	.word	0x080060db
 80060c4:	080060ed 	.word	0x080060ed
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	080060ed 	.word	0x080060ed
 80060d0:	080060e7 	.word	0x080060e7
 80060d4:	2300      	movs	r3, #0
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	e118      	b.n	800630c <UART_SetConfig+0x348>
 80060da:	2302      	movs	r3, #2
 80060dc:	77fb      	strb	r3, [r7, #31]
 80060de:	e115      	b.n	800630c <UART_SetConfig+0x348>
 80060e0:	2304      	movs	r3, #4
 80060e2:	77fb      	strb	r3, [r7, #31]
 80060e4:	e112      	b.n	800630c <UART_SetConfig+0x348>
 80060e6:	2308      	movs	r3, #8
 80060e8:	77fb      	strb	r3, [r7, #31]
 80060ea:	e10f      	b.n	800630c <UART_SetConfig+0x348>
 80060ec:	2310      	movs	r3, #16
 80060ee:	77fb      	strb	r3, [r7, #31]
 80060f0:	e10c      	b.n	800630c <UART_SetConfig+0x348>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a68      	ldr	r2, [pc, #416]	; (8006298 <UART_SetConfig+0x2d4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d120      	bne.n	800613e <UART_SetConfig+0x17a>
 80060fc:	4b64      	ldr	r3, [pc, #400]	; (8006290 <UART_SetConfig+0x2cc>)
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006102:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006106:	2b30      	cmp	r3, #48	; 0x30
 8006108:	d013      	beq.n	8006132 <UART_SetConfig+0x16e>
 800610a:	2b30      	cmp	r3, #48	; 0x30
 800610c:	d814      	bhi.n	8006138 <UART_SetConfig+0x174>
 800610e:	2b20      	cmp	r3, #32
 8006110:	d009      	beq.n	8006126 <UART_SetConfig+0x162>
 8006112:	2b20      	cmp	r3, #32
 8006114:	d810      	bhi.n	8006138 <UART_SetConfig+0x174>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <UART_SetConfig+0x15c>
 800611a:	2b10      	cmp	r3, #16
 800611c:	d006      	beq.n	800612c <UART_SetConfig+0x168>
 800611e:	e00b      	b.n	8006138 <UART_SetConfig+0x174>
 8006120:	2300      	movs	r3, #0
 8006122:	77fb      	strb	r3, [r7, #31]
 8006124:	e0f2      	b.n	800630c <UART_SetConfig+0x348>
 8006126:	2302      	movs	r3, #2
 8006128:	77fb      	strb	r3, [r7, #31]
 800612a:	e0ef      	b.n	800630c <UART_SetConfig+0x348>
 800612c:	2304      	movs	r3, #4
 800612e:	77fb      	strb	r3, [r7, #31]
 8006130:	e0ec      	b.n	800630c <UART_SetConfig+0x348>
 8006132:	2308      	movs	r3, #8
 8006134:	77fb      	strb	r3, [r7, #31]
 8006136:	e0e9      	b.n	800630c <UART_SetConfig+0x348>
 8006138:	2310      	movs	r3, #16
 800613a:	77fb      	strb	r3, [r7, #31]
 800613c:	e0e6      	b.n	800630c <UART_SetConfig+0x348>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a56      	ldr	r2, [pc, #344]	; (800629c <UART_SetConfig+0x2d8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d120      	bne.n	800618a <UART_SetConfig+0x1c6>
 8006148:	4b51      	ldr	r3, [pc, #324]	; (8006290 <UART_SetConfig+0x2cc>)
 800614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006152:	2bc0      	cmp	r3, #192	; 0xc0
 8006154:	d013      	beq.n	800617e <UART_SetConfig+0x1ba>
 8006156:	2bc0      	cmp	r3, #192	; 0xc0
 8006158:	d814      	bhi.n	8006184 <UART_SetConfig+0x1c0>
 800615a:	2b80      	cmp	r3, #128	; 0x80
 800615c:	d009      	beq.n	8006172 <UART_SetConfig+0x1ae>
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d810      	bhi.n	8006184 <UART_SetConfig+0x1c0>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <UART_SetConfig+0x1a8>
 8006166:	2b40      	cmp	r3, #64	; 0x40
 8006168:	d006      	beq.n	8006178 <UART_SetConfig+0x1b4>
 800616a:	e00b      	b.n	8006184 <UART_SetConfig+0x1c0>
 800616c:	2300      	movs	r3, #0
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e0cc      	b.n	800630c <UART_SetConfig+0x348>
 8006172:	2302      	movs	r3, #2
 8006174:	77fb      	strb	r3, [r7, #31]
 8006176:	e0c9      	b.n	800630c <UART_SetConfig+0x348>
 8006178:	2304      	movs	r3, #4
 800617a:	77fb      	strb	r3, [r7, #31]
 800617c:	e0c6      	b.n	800630c <UART_SetConfig+0x348>
 800617e:	2308      	movs	r3, #8
 8006180:	77fb      	strb	r3, [r7, #31]
 8006182:	e0c3      	b.n	800630c <UART_SetConfig+0x348>
 8006184:	2310      	movs	r3, #16
 8006186:	77fb      	strb	r3, [r7, #31]
 8006188:	e0c0      	b.n	800630c <UART_SetConfig+0x348>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a44      	ldr	r2, [pc, #272]	; (80062a0 <UART_SetConfig+0x2dc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d125      	bne.n	80061e0 <UART_SetConfig+0x21c>
 8006194:	4b3e      	ldr	r3, [pc, #248]	; (8006290 <UART_SetConfig+0x2cc>)
 8006196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800619e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a2:	d017      	beq.n	80061d4 <UART_SetConfig+0x210>
 80061a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a8:	d817      	bhi.n	80061da <UART_SetConfig+0x216>
 80061aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ae:	d00b      	beq.n	80061c8 <UART_SetConfig+0x204>
 80061b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b4:	d811      	bhi.n	80061da <UART_SetConfig+0x216>
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <UART_SetConfig+0x1fe>
 80061ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061be:	d006      	beq.n	80061ce <UART_SetConfig+0x20a>
 80061c0:	e00b      	b.n	80061da <UART_SetConfig+0x216>
 80061c2:	2300      	movs	r3, #0
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e0a1      	b.n	800630c <UART_SetConfig+0x348>
 80061c8:	2302      	movs	r3, #2
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e09e      	b.n	800630c <UART_SetConfig+0x348>
 80061ce:	2304      	movs	r3, #4
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e09b      	b.n	800630c <UART_SetConfig+0x348>
 80061d4:	2308      	movs	r3, #8
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e098      	b.n	800630c <UART_SetConfig+0x348>
 80061da:	2310      	movs	r3, #16
 80061dc:	77fb      	strb	r3, [r7, #31]
 80061de:	e095      	b.n	800630c <UART_SetConfig+0x348>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a2f      	ldr	r2, [pc, #188]	; (80062a4 <UART_SetConfig+0x2e0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d125      	bne.n	8006236 <UART_SetConfig+0x272>
 80061ea:	4b29      	ldr	r3, [pc, #164]	; (8006290 <UART_SetConfig+0x2cc>)
 80061ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061f8:	d017      	beq.n	800622a <UART_SetConfig+0x266>
 80061fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061fe:	d817      	bhi.n	8006230 <UART_SetConfig+0x26c>
 8006200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006204:	d00b      	beq.n	800621e <UART_SetConfig+0x25a>
 8006206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800620a:	d811      	bhi.n	8006230 <UART_SetConfig+0x26c>
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <UART_SetConfig+0x254>
 8006210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006214:	d006      	beq.n	8006224 <UART_SetConfig+0x260>
 8006216:	e00b      	b.n	8006230 <UART_SetConfig+0x26c>
 8006218:	2301      	movs	r3, #1
 800621a:	77fb      	strb	r3, [r7, #31]
 800621c:	e076      	b.n	800630c <UART_SetConfig+0x348>
 800621e:	2302      	movs	r3, #2
 8006220:	77fb      	strb	r3, [r7, #31]
 8006222:	e073      	b.n	800630c <UART_SetConfig+0x348>
 8006224:	2304      	movs	r3, #4
 8006226:	77fb      	strb	r3, [r7, #31]
 8006228:	e070      	b.n	800630c <UART_SetConfig+0x348>
 800622a:	2308      	movs	r3, #8
 800622c:	77fb      	strb	r3, [r7, #31]
 800622e:	e06d      	b.n	800630c <UART_SetConfig+0x348>
 8006230:	2310      	movs	r3, #16
 8006232:	77fb      	strb	r3, [r7, #31]
 8006234:	e06a      	b.n	800630c <UART_SetConfig+0x348>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1b      	ldr	r2, [pc, #108]	; (80062a8 <UART_SetConfig+0x2e4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d138      	bne.n	80062b2 <UART_SetConfig+0x2ee>
 8006240:	4b13      	ldr	r3, [pc, #76]	; (8006290 <UART_SetConfig+0x2cc>)
 8006242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006246:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800624a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800624e:	d017      	beq.n	8006280 <UART_SetConfig+0x2bc>
 8006250:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006254:	d82a      	bhi.n	80062ac <UART_SetConfig+0x2e8>
 8006256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800625a:	d00b      	beq.n	8006274 <UART_SetConfig+0x2b0>
 800625c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006260:	d824      	bhi.n	80062ac <UART_SetConfig+0x2e8>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <UART_SetConfig+0x2aa>
 8006266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626a:	d006      	beq.n	800627a <UART_SetConfig+0x2b6>
 800626c:	e01e      	b.n	80062ac <UART_SetConfig+0x2e8>
 800626e:	2300      	movs	r3, #0
 8006270:	77fb      	strb	r3, [r7, #31]
 8006272:	e04b      	b.n	800630c <UART_SetConfig+0x348>
 8006274:	2302      	movs	r3, #2
 8006276:	77fb      	strb	r3, [r7, #31]
 8006278:	e048      	b.n	800630c <UART_SetConfig+0x348>
 800627a:	2304      	movs	r3, #4
 800627c:	77fb      	strb	r3, [r7, #31]
 800627e:	e045      	b.n	800630c <UART_SetConfig+0x348>
 8006280:	2308      	movs	r3, #8
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e042      	b.n	800630c <UART_SetConfig+0x348>
 8006286:	bf00      	nop
 8006288:	efff69f3 	.word	0xefff69f3
 800628c:	40011000 	.word	0x40011000
 8006290:	40023800 	.word	0x40023800
 8006294:	40004400 	.word	0x40004400
 8006298:	40004800 	.word	0x40004800
 800629c:	40004c00 	.word	0x40004c00
 80062a0:	40005000 	.word	0x40005000
 80062a4:	40011400 	.word	0x40011400
 80062a8:	40007800 	.word	0x40007800
 80062ac:	2310      	movs	r3, #16
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e02c      	b.n	800630c <UART_SetConfig+0x348>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a72      	ldr	r2, [pc, #456]	; (8006480 <UART_SetConfig+0x4bc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d125      	bne.n	8006308 <UART_SetConfig+0x344>
 80062bc:	4b71      	ldr	r3, [pc, #452]	; (8006484 <UART_SetConfig+0x4c0>)
 80062be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80062c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062ca:	d017      	beq.n	80062fc <UART_SetConfig+0x338>
 80062cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062d0:	d817      	bhi.n	8006302 <UART_SetConfig+0x33e>
 80062d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d6:	d00b      	beq.n	80062f0 <UART_SetConfig+0x32c>
 80062d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062dc:	d811      	bhi.n	8006302 <UART_SetConfig+0x33e>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <UART_SetConfig+0x326>
 80062e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062e6:	d006      	beq.n	80062f6 <UART_SetConfig+0x332>
 80062e8:	e00b      	b.n	8006302 <UART_SetConfig+0x33e>
 80062ea:	2300      	movs	r3, #0
 80062ec:	77fb      	strb	r3, [r7, #31]
 80062ee:	e00d      	b.n	800630c <UART_SetConfig+0x348>
 80062f0:	2302      	movs	r3, #2
 80062f2:	77fb      	strb	r3, [r7, #31]
 80062f4:	e00a      	b.n	800630c <UART_SetConfig+0x348>
 80062f6:	2304      	movs	r3, #4
 80062f8:	77fb      	strb	r3, [r7, #31]
 80062fa:	e007      	b.n	800630c <UART_SetConfig+0x348>
 80062fc:	2308      	movs	r3, #8
 80062fe:	77fb      	strb	r3, [r7, #31]
 8006300:	e004      	b.n	800630c <UART_SetConfig+0x348>
 8006302:	2310      	movs	r3, #16
 8006304:	77fb      	strb	r3, [r7, #31]
 8006306:	e001      	b.n	800630c <UART_SetConfig+0x348>
 8006308:	2310      	movs	r3, #16
 800630a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006314:	d15b      	bne.n	80063ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006316:	7ffb      	ldrb	r3, [r7, #31]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d828      	bhi.n	800636e <UART_SetConfig+0x3aa>
 800631c:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <UART_SetConfig+0x360>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	08006349 	.word	0x08006349
 8006328:	08006351 	.word	0x08006351
 800632c:	08006359 	.word	0x08006359
 8006330:	0800636f 	.word	0x0800636f
 8006334:	0800635f 	.word	0x0800635f
 8006338:	0800636f 	.word	0x0800636f
 800633c:	0800636f 	.word	0x0800636f
 8006340:	0800636f 	.word	0x0800636f
 8006344:	08006367 	.word	0x08006367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006348:	f7fd fe8c 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 800634c:	61b8      	str	r0, [r7, #24]
        break;
 800634e:	e013      	b.n	8006378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006350:	f7fd fe9c 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 8006354:	61b8      	str	r0, [r7, #24]
        break;
 8006356:	e00f      	b.n	8006378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006358:	4b4b      	ldr	r3, [pc, #300]	; (8006488 <UART_SetConfig+0x4c4>)
 800635a:	61bb      	str	r3, [r7, #24]
        break;
 800635c:	e00c      	b.n	8006378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800635e:	f7fd fd6f 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8006362:	61b8      	str	r0, [r7, #24]
        break;
 8006364:	e008      	b.n	8006378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800636a:	61bb      	str	r3, [r7, #24]
        break;
 800636c:	e004      	b.n	8006378 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	77bb      	strb	r3, [r7, #30]
        break;
 8006376:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d074      	beq.n	8006468 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	005a      	lsls	r2, r3, #1
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	441a      	add	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006392:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	2b0f      	cmp	r3, #15
 8006398:	d916      	bls.n	80063c8 <UART_SetConfig+0x404>
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a0:	d212      	bcs.n	80063c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	f023 030f 	bic.w	r3, r3, #15
 80063aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	085b      	lsrs	r3, r3, #1
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	89fb      	ldrh	r3, [r7, #14]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	89fa      	ldrh	r2, [r7, #14]
 80063c4:	60da      	str	r2, [r3, #12]
 80063c6:	e04f      	b.n	8006468 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	77bb      	strb	r3, [r7, #30]
 80063cc:	e04c      	b.n	8006468 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ce:	7ffb      	ldrb	r3, [r7, #31]
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d828      	bhi.n	8006426 <UART_SetConfig+0x462>
 80063d4:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <UART_SetConfig+0x418>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	08006401 	.word	0x08006401
 80063e0:	08006409 	.word	0x08006409
 80063e4:	08006411 	.word	0x08006411
 80063e8:	08006427 	.word	0x08006427
 80063ec:	08006417 	.word	0x08006417
 80063f0:	08006427 	.word	0x08006427
 80063f4:	08006427 	.word	0x08006427
 80063f8:	08006427 	.word	0x08006427
 80063fc:	0800641f 	.word	0x0800641f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006400:	f7fd fe30 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8006404:	61b8      	str	r0, [r7, #24]
        break;
 8006406:	e013      	b.n	8006430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006408:	f7fd fe40 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 800640c:	61b8      	str	r0, [r7, #24]
        break;
 800640e:	e00f      	b.n	8006430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006410:	4b1d      	ldr	r3, [pc, #116]	; (8006488 <UART_SetConfig+0x4c4>)
 8006412:	61bb      	str	r3, [r7, #24]
        break;
 8006414:	e00c      	b.n	8006430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006416:	f7fd fd13 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 800641a:	61b8      	str	r0, [r7, #24]
        break;
 800641c:	e008      	b.n	8006430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800641e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006422:	61bb      	str	r3, [r7, #24]
        break;
 8006424:	e004      	b.n	8006430 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	77bb      	strb	r3, [r7, #30]
        break;
 800642e:	bf00      	nop
    }

    if (pclk != 0U)
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d018      	beq.n	8006468 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	085a      	lsrs	r2, r3, #1
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	441a      	add	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	fbb2 f3f3 	udiv	r3, r2, r3
 8006448:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b0f      	cmp	r3, #15
 800644e:	d909      	bls.n	8006464 <UART_SetConfig+0x4a0>
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006456:	d205      	bcs.n	8006464 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	b29a      	uxth	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60da      	str	r2, [r3, #12]
 8006462:	e001      	b.n	8006468 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006474:	7fbb      	ldrb	r3, [r7, #30]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3720      	adds	r7, #32
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40007c00 	.word	0x40007c00
 8006484:	40023800 	.word	0x40023800
 8006488:	00f42400 	.word	0x00f42400

0800648c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00a      	beq.n	800653e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	f003 0320 	and.w	r3, r3, #32
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01a      	beq.n	80065a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800658a:	d10a      	bne.n	80065a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  }
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065e0:	f7fb fc00 	bl	8001de4 <HAL_GetTick>
 80065e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d10e      	bne.n	8006612 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f831 	bl	800666a <UART_WaitOnFlagUntilTimeout>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e027      	b.n	8006662 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b04      	cmp	r3, #4
 800661e:	d10e      	bne.n	800663e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f81b 	bl	800666a <UART_WaitOnFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e011      	b.n	8006662 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b09c      	sub	sp, #112	; 0x70
 800666e:	af00      	add	r7, sp, #0
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	603b      	str	r3, [r7, #0]
 8006676:	4613      	mov	r3, r2
 8006678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800667a:	e0a7      	b.n	80067cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800667c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006682:	f000 80a3 	beq.w	80067cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006686:	f7fb fbad 	bl	8001de4 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006692:	429a      	cmp	r2, r3
 8006694:	d302      	bcc.n	800669c <UART_WaitOnFlagUntilTimeout+0x32>
 8006696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006698:	2b00      	cmp	r3, #0
 800669a:	d13f      	bne.n	800671c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066b0:	667b      	str	r3, [r7, #100]	; 0x64
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80066c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e6      	bne.n	800669c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3308      	adds	r3, #8
 80066d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	f023 0301 	bic.w	r3, r3, #1
 80066e4:	663b      	str	r3, [r7, #96]	; 0x60
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3308      	adds	r3, #8
 80066ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80066f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e5      	bne.n	80066ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2220      	movs	r2, #32
 800670c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e068      	b.n	80067ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d050      	beq.n	80067cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006738:	d148      	bne.n	80067cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006742:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006758:	66fb      	str	r3, [r7, #108]	; 0x6c
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
 8006764:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e6      	bne.n	8006744 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3308      	adds	r3, #8
 800677c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	613b      	str	r3, [r7, #16]
   return(result);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f023 0301 	bic.w	r3, r3, #1
 800678c:	66bb      	str	r3, [r7, #104]	; 0x68
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3308      	adds	r3, #8
 8006794:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006796:	623a      	str	r2, [r7, #32]
 8006798:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	69f9      	ldr	r1, [r7, #28]
 800679c:	6a3a      	ldr	r2, [r7, #32]
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e5      	bne.n	8006776 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e010      	b.n	80067ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	69da      	ldr	r2, [r3, #28]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	4013      	ands	r3, r2
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	429a      	cmp	r2, r3
 80067da:	bf0c      	ite	eq
 80067dc:	2301      	moveq	r3, #1
 80067de:	2300      	movne	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	461a      	mov	r2, r3
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	f43f af48 	beq.w	800667c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3770      	adds	r7, #112	; 0x70
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b097      	sub	sp, #92	; 0x5c
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	4613      	mov	r3, r2
 8006804:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	88fa      	ldrh	r2, [r7, #6]
 8006818:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682a:	d10e      	bne.n	800684a <UART_Start_Receive_IT+0x52>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d105      	bne.n	8006840 <UART_Start_Receive_IT+0x48>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f240 12ff 	movw	r2, #511	; 0x1ff
 800683a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800683e:	e02d      	b.n	800689c <UART_Start_Receive_IT+0xa4>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	22ff      	movs	r2, #255	; 0xff
 8006844:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006848:	e028      	b.n	800689c <UART_Start_Receive_IT+0xa4>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10d      	bne.n	800686e <UART_Start_Receive_IT+0x76>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d104      	bne.n	8006864 <UART_Start_Receive_IT+0x6c>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	22ff      	movs	r2, #255	; 0xff
 800685e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006862:	e01b      	b.n	800689c <UART_Start_Receive_IT+0xa4>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	227f      	movs	r2, #127	; 0x7f
 8006868:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800686c:	e016      	b.n	800689c <UART_Start_Receive_IT+0xa4>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006876:	d10d      	bne.n	8006894 <UART_Start_Receive_IT+0x9c>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <UART_Start_Receive_IT+0x92>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	227f      	movs	r2, #127	; 0x7f
 8006884:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006888:	e008      	b.n	800689c <UART_Start_Receive_IT+0xa4>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	223f      	movs	r2, #63	; 0x3f
 800688e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006892:	e003      	b.n	800689c <UART_Start_Receive_IT+0xa4>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2222      	movs	r2, #34	; 0x22
 80068a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3308      	adds	r3, #8
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	f043 0301 	orr.w	r3, r3, #1
 80068c2:	657b      	str	r3, [r7, #84]	; 0x54
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3308      	adds	r3, #8
 80068ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80068ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e5      	bne.n	80068ac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e8:	d107      	bne.n	80068fa <UART_Start_Receive_IT+0x102>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d103      	bne.n	80068fa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4a21      	ldr	r2, [pc, #132]	; (800697c <UART_Start_Receive_IT+0x184>)
 80068f6:	669a      	str	r2, [r3, #104]	; 0x68
 80068f8:	e002      	b.n	8006900 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4a20      	ldr	r2, [pc, #128]	; (8006980 <UART_Start_Receive_IT+0x188>)
 80068fe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d019      	beq.n	800693c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800691c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006926:	637b      	str	r3, [r7, #52]	; 0x34
 8006928:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800692c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e6      	bne.n	8006908 <UART_Start_Receive_IT+0x110>
 800693a:	e018      	b.n	800696e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	613b      	str	r3, [r7, #16]
   return(result);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f043 0320 	orr.w	r3, r3, #32
 8006950:	653b      	str	r3, [r7, #80]	; 0x50
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800695a:	623b      	str	r3, [r7, #32]
 800695c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	69f9      	ldr	r1, [r7, #28]
 8006960:	6a3a      	ldr	r2, [r7, #32]
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	61bb      	str	r3, [r7, #24]
   return(result);
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e6      	bne.n	800693c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	375c      	adds	r7, #92	; 0x5c
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	08006c33 	.word	0x08006c33
 8006980:	08006acd 	.word	0x08006acd

08006984 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b095      	sub	sp, #84	; 0x54
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069aa:	643b      	str	r3, [r7, #64]	; 0x40
 80069ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e6      	bne.n	800698c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3308      	adds	r3, #8
 80069c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	f023 0301 	bic.w	r3, r3, #1
 80069d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3308      	adds	r3, #8
 80069dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e5      	bne.n	80069be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d118      	bne.n	8006a2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f023 0310 	bic.w	r3, r3, #16
 8006a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a18:	61bb      	str	r3, [r7, #24]
 8006a1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	6979      	ldr	r1, [r7, #20]
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	613b      	str	r3, [r7, #16]
   return(result);
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e6      	bne.n	80069fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a40:	bf00      	nop
 8006a42:	3754      	adds	r7, #84	; 0x54
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f7ff fa8a 	bl	8005f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	61bb      	str	r3, [r7, #24]
 8006aa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6979      	ldr	r1, [r7, #20]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e6      	bne.n	8006a80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff fa56 	bl	8005f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ac4:	bf00      	nop
 8006ac6:	3720      	adds	r7, #32
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b096      	sub	sp, #88	; 0x58
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ada:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ae4:	2b22      	cmp	r3, #34	; 0x22
 8006ae6:	f040 8098 	bne.w	8006c1a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006af4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006af8:	b2d9      	uxtb	r1, r3
 8006afa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b04:	400a      	ands	r2, r1
 8006b06:	b2d2      	uxtb	r2, r2
 8006b08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d17b      	bne.n	8006c2a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b46:	653b      	str	r3, [r7, #80]	; 0x50
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b50:	647b      	str	r3, [r7, #68]	; 0x44
 8006b52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e6      	bne.n	8006b32 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3308      	adds	r3, #8
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	e853 3f00 	ldrex	r3, [r3]
 8006b72:	623b      	str	r3, [r7, #32]
   return(result);
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3308      	adds	r3, #8
 8006b82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b84:	633a      	str	r2, [r7, #48]	; 0x30
 8006b86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8c:	e841 2300 	strex	r3, r2, [r1]
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e5      	bne.n	8006b64 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d12e      	bne.n	8006c12 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0310 	bic.w	r3, r3, #16
 8006bce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	69b9      	ldr	r1, [r7, #24]
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	617b      	str	r3, [r7, #20]
   return(result);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e6      	bne.n	8006bba <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f003 0310 	and.w	r3, r3, #16
 8006bf6:	2b10      	cmp	r3, #16
 8006bf8:	d103      	bne.n	8006c02 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2210      	movs	r2, #16
 8006c00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff f9c4 	bl	8005f98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c10:	e00b      	b.n	8006c2a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fa f9f6 	bl	8001004 <HAL_UART_RxCpltCallback>
}
 8006c18:	e007      	b.n	8006c2a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	699a      	ldr	r2, [r3, #24]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0208 	orr.w	r2, r2, #8
 8006c28:	619a      	str	r2, [r3, #24]
}
 8006c2a:	bf00      	nop
 8006c2c:	3758      	adds	r7, #88	; 0x58
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b096      	sub	sp, #88	; 0x58
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c4a:	2b22      	cmp	r3, #34	; 0x22
 8006c4c:	f040 8098 	bne.w	8006d80 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c60:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006c64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c68:	4013      	ands	r3, r2
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c6e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c74:	1c9a      	adds	r2, r3, #2
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d17b      	bne.n	8006d90 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8006cb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cbe:	e841 2300 	strex	r3, r2, [r1]
 8006cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e6      	bne.n	8006c98 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3308      	adds	r3, #8
 8006cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	f023 0301 	bic.w	r3, r3, #1
 8006ce0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e5      	bne.n	8006cca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d12e      	bne.n	8006d78 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f023 0310 	bic.w	r3, r3, #16
 8006d34:	647b      	str	r3, [r7, #68]	; 0x44
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d42:	6979      	ldr	r1, [r7, #20]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e6      	bne.n	8006d20 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	f003 0310 	and.w	r3, r3, #16
 8006d5c:	2b10      	cmp	r3, #16
 8006d5e:	d103      	bne.n	8006d68 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2210      	movs	r2, #16
 8006d66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff f911 	bl	8005f98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d76:	e00b      	b.n	8006d90 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7fa f943 	bl	8001004 <HAL_UART_RxCpltCallback>
}
 8006d7e:	e007      	b.n	8006d90 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	699a      	ldr	r2, [r3, #24]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0208 	orr.w	r2, r2, #8
 8006d8e:	619a      	str	r2, [r3, #24]
}
 8006d90:	bf00      	nop
 8006d92:	3758      	adds	r7, #88	; 0x58
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d98:	b084      	sub	sp, #16
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	f107 001c 	add.w	r0, r7, #28
 8006da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d120      	bne.n	8006df2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	4b20      	ldr	r3, [pc, #128]	; (8006e44 <USB_CoreInit+0xac>)
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d105      	bne.n	8006de6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fa96 	bl	8007318 <USB_CoreReset>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73fb      	strb	r3, [r7, #15]
 8006df0:	e010      	b.n	8006e14 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa8a 	bl	8007318 <USB_CoreReset>
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d10b      	bne.n	8006e32 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f043 0206 	orr.w	r2, r3, #6
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f043 0220 	orr.w	r2, r3, #32
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e3e:	b004      	add	sp, #16
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	ffbdffbf 	.word	0xffbdffbf

08006e48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f023 0201 	bic.w	r2, r3, #1
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e86:	78fb      	ldrb	r3, [r7, #3]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d115      	bne.n	8006eb8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e98:	2001      	movs	r0, #1
 8006e9a:	f7fa ffaf 	bl	8001dfc <HAL_Delay>
      ms++;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fa29 	bl	80072fc <USB_GetMode>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d01e      	beq.n	8006eee <USB_SetCurrentMode+0x84>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b31      	cmp	r3, #49	; 0x31
 8006eb4:	d9f0      	bls.n	8006e98 <USB_SetCurrentMode+0x2e>
 8006eb6:	e01a      	b.n	8006eee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d115      	bne.n	8006eea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006eca:	2001      	movs	r0, #1
 8006ecc:	f7fa ff96 	bl	8001dfc <HAL_Delay>
      ms++;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fa10 	bl	80072fc <USB_GetMode>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d005      	beq.n	8006eee <USB_SetCurrentMode+0x84>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b31      	cmp	r3, #49	; 0x31
 8006ee6:	d9f0      	bls.n	8006eca <USB_SetCurrentMode+0x60>
 8006ee8:	e001      	b.n	8006eee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e005      	b.n	8006efa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b32      	cmp	r3, #50	; 0x32
 8006ef2:	d101      	bne.n	8006ef8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f04:	b084      	sub	sp, #16
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b086      	sub	sp, #24
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f1e:	2300      	movs	r3, #0
 8006f20:	613b      	str	r3, [r7, #16]
 8006f22:	e009      	b.n	8006f38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	3340      	adds	r3, #64	; 0x40
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	3301      	adds	r3, #1
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b0e      	cmp	r3, #14
 8006f3c:	d9f2      	bls.n	8006f24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d11c      	bne.n	8006f7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f52:	f043 0302 	orr.w	r3, r3, #2
 8006f56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	e005      	b.n	8006f8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f90:	461a      	mov	r2, r3
 8006f92:	2300      	movs	r3, #0
 8006f94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	680b      	ldr	r3, [r1, #0]
 8006fa8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d10c      	bne.n	8006fca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d104      	bne.n	8006fc0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f965 	bl	8007288 <USB_SetDevSpeed>
 8006fbe:	e008      	b.n	8006fd2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f960 	bl	8007288 <USB_SetDevSpeed>
 8006fc8:	e003      	b.n	8006fd2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fca:	2103      	movs	r1, #3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f95b 	bl	8007288 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fd2:	2110      	movs	r1, #16
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f8f3 	bl	80071c0 <USB_FlushTxFifo>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f91f 	bl	8007228 <USB_FlushRxFifo>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007006:	461a      	mov	r2, r3
 8007008:	2300      	movs	r3, #0
 800700a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007012:	461a      	mov	r2, r3
 8007014:	2300      	movs	r3, #0
 8007016:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007018:	2300      	movs	r3, #0
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	e043      	b.n	80070a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007034:	d118      	bne.n	8007068 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10a      	bne.n	8007052 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	461a      	mov	r2, r3
 800704a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	e013      	b.n	800707a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705e:	461a      	mov	r2, r3
 8007060:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	e008      	b.n	800707a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007074:	461a      	mov	r2, r3
 8007076:	2300      	movs	r3, #0
 8007078:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007086:	461a      	mov	r2, r3
 8007088:	2300      	movs	r3, #0
 800708a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	461a      	mov	r2, r3
 800709a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800709e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	3301      	adds	r3, #1
 80070a4:	613b      	str	r3, [r7, #16]
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d3b7      	bcc.n	800701e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ae:	2300      	movs	r3, #0
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	e043      	b.n	800713c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ca:	d118      	bne.n	80070fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070de:	461a      	mov	r2, r3
 80070e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	e013      	b.n	8007110 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f4:	461a      	mov	r2, r3
 80070f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	e008      	b.n	8007110 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	461a      	mov	r2, r3
 800710c:	2300      	movs	r3, #0
 800710e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711c:	461a      	mov	r2, r3
 800711e:	2300      	movs	r3, #0
 8007120:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712e:	461a      	mov	r2, r3
 8007130:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007134:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	3301      	adds	r3, #1
 800713a:	613b      	str	r3, [r7, #16]
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	429a      	cmp	r2, r3
 8007142:	d3b7      	bcc.n	80070b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007156:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007164:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	d105      	bne.n	8007178 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	f043 0210 	orr.w	r2, r3, #16
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699a      	ldr	r2, [r3, #24]
 800717c:	4b0e      	ldr	r3, [pc, #56]	; (80071b8 <USB_DevInit+0x2b4>)
 800717e:	4313      	orrs	r3, r2
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	f043 0208 	orr.w	r2, r3, #8
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007198:	2b01      	cmp	r3, #1
 800719a:	d105      	bne.n	80071a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	699a      	ldr	r2, [r3, #24]
 80071a0:	4b06      	ldr	r3, [pc, #24]	; (80071bc <USB_DevInit+0x2b8>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071b4:	b004      	add	sp, #16
 80071b6:	4770      	bx	lr
 80071b8:	803c3800 	.word	0x803c3800
 80071bc:	40000004 	.word	0x40000004

080071c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3301      	adds	r3, #1
 80071d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4a13      	ldr	r2, [pc, #76]	; (8007224 <USB_FlushTxFifo+0x64>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d901      	bls.n	80071e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e01b      	b.n	8007218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	daf2      	bge.n	80071ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	019b      	lsls	r3, r3, #6
 80071f0:	f043 0220 	orr.w	r2, r3, #32
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3301      	adds	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4a08      	ldr	r2, [pc, #32]	; (8007224 <USB_FlushTxFifo+0x64>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d901      	bls.n	800720a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e006      	b.n	8007218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b20      	cmp	r3, #32
 8007214:	d0f0      	beq.n	80071f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	00030d40 	.word	0x00030d40

08007228 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3301      	adds	r3, #1
 8007238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4a11      	ldr	r2, [pc, #68]	; (8007284 <USB_FlushRxFifo+0x5c>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d901      	bls.n	8007246 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e018      	b.n	8007278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	daf2      	bge.n	8007234 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2210      	movs	r2, #16
 8007256:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3301      	adds	r3, #1
 800725c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4a08      	ldr	r2, [pc, #32]	; (8007284 <USB_FlushRxFifo+0x5c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d901      	bls.n	800726a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e006      	b.n	8007278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f003 0310 	and.w	r3, r3, #16
 8007272:	2b10      	cmp	r3, #16
 8007274:	d0f0      	beq.n	8007258 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	00030d40 	.word	0x00030d40

08007288 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	68f9      	ldr	r1, [r7, #12]
 80072a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072a8:	4313      	orrs	r3, r2
 80072aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b085      	sub	sp, #20
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072d4:	f023 0303 	bic.w	r3, r3, #3
 80072d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072e8:	f043 0302 	orr.w	r3, r3, #2
 80072ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	f003 0301 	and.w	r3, r3, #1
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3301      	adds	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4a13      	ldr	r2, [pc, #76]	; (800737c <USB_CoreReset+0x64>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d901      	bls.n	8007336 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e01b      	b.n	800736e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	daf2      	bge.n	8007324 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f043 0201 	orr.w	r2, r3, #1
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3301      	adds	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4a09      	ldr	r2, [pc, #36]	; (800737c <USB_CoreReset+0x64>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d901      	bls.n	8007360 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e006      	b.n	800736e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b01      	cmp	r3, #1
 800736a:	d0f0      	beq.n	800734e <USB_CoreReset+0x36>

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	00030d40 	.word	0x00030d40

08007380 <filtlength>:
    0.000000449585560,
    0.000001278766757,
    -0.000001509740857,
    0.0};

int filtlength(const char* name) {
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
    int len = strlen(name);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7f8 ff63 	bl	8000254 <strlen>
 800738e:	4603      	mov	r3, r0
 8007390:	613b      	str	r3, [r7, #16]
    int i = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	617b      	str	r3, [r7, #20]
    char *new_str = NULL;
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]
    int N = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	60bb      	str	r3, [r7, #8]
	if (!strcmp(name,"haar") || !strcmp(name,"db1")) {
 800739e:	49a1      	ldr	r1, [pc, #644]	; (8007624 <filtlength+0x2a4>)
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7f8 ff4d 	bl	8000240 <strcmp>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d006      	beq.n	80073ba <filtlength+0x3a>
 80073ac:	499e      	ldr	r1, [pc, #632]	; (8007628 <filtlength+0x2a8>)
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7f8 ff46 	bl	8000240 <strcmp>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <filtlength+0x3e>
		return 2;
 80073ba:	2302      	movs	r3, #2
 80073bc:	e206      	b.n	80077cc <filtlength+0x44c>
	}
    else if (len > 2 && strstr(name, "db") != NULL)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	dd33      	ble.n	800742c <filtlength+0xac>
 80073c4:	4999      	ldr	r1, [pc, #612]	; (800762c <filtlength+0x2ac>)
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f004 f906 	bl	800b5d8 <strstr>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d02c      	beq.n	800742c <filtlength+0xac>
    {
        new_str = (char*)malloc(sizeof(char)*(len-2 + 1));
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	4618      	mov	r0, r3
 80073d8:	f003 fcc4 	bl	800ad64 <malloc>
 80073dc:	4603      	mov	r3, r0
 80073de:	60fb      	str	r3, [r7, #12]
        for (i = 2; i < len + 1; i++)
 80073e0:	2302      	movs	r3, #2
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e00b      	b.n	80073fe <filtlength+0x7e>
            new_str[i - 2] = name[i];
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	441a      	add	r2, r3
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	3b02      	subs	r3, #2
 80073f0:	68f9      	ldr	r1, [r7, #12]
 80073f2:	440b      	add	r3, r1
 80073f4:	7812      	ldrb	r2, [r2, #0]
 80073f6:	701a      	strb	r2, [r3, #0]
        for (i = 2; i < len + 1; i++)
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	3301      	adds	r3, #1
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	429a      	cmp	r2, r3
 8007404:	daef      	bge.n	80073e6 <filtlength+0x66>

        N = atoi(new_str);
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f003 fc96 	bl	800ad38 <atoi>
 800740c:	60b8      	str	r0, [r7, #8]
        free(new_str);
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f003 fcb0 	bl	800ad74 <free>
        if (N>38)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2b26      	cmp	r3, #38	; 0x26
 8007418:	dd05      	ble.n	8007426 <filtlength+0xa6>
        {
            printf("\n Filter Not in Database \n");
 800741a:	4885      	ldr	r0, [pc, #532]	; (8007630 <filtlength+0x2b0>)
 800741c:	f003 ff14 	bl	800b248 <puts>
            return -1;
 8007420:	f04f 33ff 	mov.w	r3, #4294967295
 8007424:	e1d2      	b.n	80077cc <filtlength+0x44c>
        }

        return N * 2;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	e1cf      	b.n	80077cc <filtlength+0x44c>
    }
	else if (!strcmp(name,"bior1.1")){
 800742c:	4981      	ldr	r1, [pc, #516]	; (8007634 <filtlength+0x2b4>)
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7f8 ff06 	bl	8000240 <strcmp>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <filtlength+0xbe>
		return 2;
 800743a:	2302      	movs	r3, #2
 800743c:	e1c6      	b.n	80077cc <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior1.3")){
 800743e:	497e      	ldr	r1, [pc, #504]	; (8007638 <filtlength+0x2b8>)
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7f8 fefd 	bl	8000240 <strcmp>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <filtlength+0xd0>
		return 6;
 800744c:	2306      	movs	r3, #6
 800744e:	e1bd      	b.n	80077cc <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior1.5")){
 8007450:	497a      	ldr	r1, [pc, #488]	; (800763c <filtlength+0x2bc>)
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7f8 fef4 	bl	8000240 <strcmp>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <filtlength+0xe2>
		return 10;
 800745e:	230a      	movs	r3, #10
 8007460:	e1b4      	b.n	80077cc <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior2.2")){
 8007462:	4977      	ldr	r1, [pc, #476]	; (8007640 <filtlength+0x2c0>)
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7f8 feeb 	bl	8000240 <strcmp>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <filtlength+0xf4>
		return 6;
 8007470:	2306      	movs	r3, #6
 8007472:	e1ab      	b.n	80077cc <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior2.4")){
 8007474:	4973      	ldr	r1, [pc, #460]	; (8007644 <filtlength+0x2c4>)
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7f8 fee2 	bl	8000240 <strcmp>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <filtlength+0x106>
		return 10;
 8007482:	230a      	movs	r3, #10
 8007484:	e1a2      	b.n	80077cc <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior2.6")){
 8007486:	4970      	ldr	r1, [pc, #448]	; (8007648 <filtlength+0x2c8>)
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7f8 fed9 	bl	8000240 <strcmp>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <filtlength+0x118>
		return 14;
 8007494:	230e      	movs	r3, #14
 8007496:	e199      	b.n	80077cc <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior2.8")){
 8007498:	496c      	ldr	r1, [pc, #432]	; (800764c <filtlength+0x2cc>)
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7f8 fed0 	bl	8000240 <strcmp>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <filtlength+0x12a>
		return 18;
 80074a6:	2312      	movs	r3, #18
 80074a8:	e190      	b.n	80077cc <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior3.1")){
 80074aa:	4969      	ldr	r1, [pc, #420]	; (8007650 <filtlength+0x2d0>)
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7f8 fec7 	bl	8000240 <strcmp>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <filtlength+0x13c>
		return 4;
 80074b8:	2304      	movs	r3, #4
 80074ba:	e187      	b.n	80077cc <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior3.3")){
 80074bc:	4965      	ldr	r1, [pc, #404]	; (8007654 <filtlength+0x2d4>)
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7f8 febe 	bl	8000240 <strcmp>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <filtlength+0x14e>
		return 8;
 80074ca:	2308      	movs	r3, #8
 80074cc:	e17e      	b.n	80077cc <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior3.5")){
 80074ce:	4962      	ldr	r1, [pc, #392]	; (8007658 <filtlength+0x2d8>)
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7f8 feb5 	bl	8000240 <strcmp>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <filtlength+0x160>
		return 12;
 80074dc:	230c      	movs	r3, #12
 80074de:	e175      	b.n	80077cc <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior3.7")){
 80074e0:	495e      	ldr	r1, [pc, #376]	; (800765c <filtlength+0x2dc>)
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7f8 feac 	bl	8000240 <strcmp>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <filtlength+0x172>
		return 16;
 80074ee:	2310      	movs	r3, #16
 80074f0:	e16c      	b.n	80077cc <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior3.9")){
 80074f2:	495b      	ldr	r1, [pc, #364]	; (8007660 <filtlength+0x2e0>)
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7f8 fea3 	bl	8000240 <strcmp>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <filtlength+0x184>
		return 20;
 8007500:	2314      	movs	r3, #20
 8007502:	e163      	b.n	80077cc <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior4.4")){
 8007504:	4957      	ldr	r1, [pc, #348]	; (8007664 <filtlength+0x2e4>)
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7f8 fe9a 	bl	8000240 <strcmp>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <filtlength+0x196>
		return 10;
 8007512:	230a      	movs	r3, #10
 8007514:	e15a      	b.n	80077cc <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior5.5")){
 8007516:	4954      	ldr	r1, [pc, #336]	; (8007668 <filtlength+0x2e8>)
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7f8 fe91 	bl	8000240 <strcmp>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <filtlength+0x1a8>
		return 12;
 8007524:	230c      	movs	r3, #12
 8007526:	e151      	b.n	80077cc <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior6.8")){
 8007528:	4950      	ldr	r1, [pc, #320]	; (800766c <filtlength+0x2ec>)
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7f8 fe88 	bl	8000240 <strcmp>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <filtlength+0x1ba>
		return 18;
 8007536:	2312      	movs	r3, #18
 8007538:	e148      	b.n	80077cc <filtlength+0x44c>
	}
    else if (!strcmp(name, "rbior1.1")){
 800753a:	494d      	ldr	r1, [pc, #308]	; (8007670 <filtlength+0x2f0>)
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7f8 fe7f 	bl	8000240 <strcmp>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <filtlength+0x1cc>
        return 2;
 8007548:	2302      	movs	r3, #2
 800754a:	e13f      	b.n	80077cc <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior1.3")){
 800754c:	4949      	ldr	r1, [pc, #292]	; (8007674 <filtlength+0x2f4>)
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7f8 fe76 	bl	8000240 <strcmp>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <filtlength+0x1de>
        return 6;
 800755a:	2306      	movs	r3, #6
 800755c:	e136      	b.n	80077cc <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior1.5")){
 800755e:	4946      	ldr	r1, [pc, #280]	; (8007678 <filtlength+0x2f8>)
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7f8 fe6d 	bl	8000240 <strcmp>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <filtlength+0x1f0>
        return 10;
 800756c:	230a      	movs	r3, #10
 800756e:	e12d      	b.n	80077cc <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior2.2")){
 8007570:	4942      	ldr	r1, [pc, #264]	; (800767c <filtlength+0x2fc>)
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7f8 fe64 	bl	8000240 <strcmp>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <filtlength+0x202>
        return 6;
 800757e:	2306      	movs	r3, #6
 8007580:	e124      	b.n	80077cc <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior2.4")){
 8007582:	493f      	ldr	r1, [pc, #252]	; (8007680 <filtlength+0x300>)
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7f8 fe5b 	bl	8000240 <strcmp>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <filtlength+0x214>
        return 10;
 8007590:	230a      	movs	r3, #10
 8007592:	e11b      	b.n	80077cc <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior2.6")){
 8007594:	493b      	ldr	r1, [pc, #236]	; (8007684 <filtlength+0x304>)
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7f8 fe52 	bl	8000240 <strcmp>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <filtlength+0x226>
        return 14;
 80075a2:	230e      	movs	r3, #14
 80075a4:	e112      	b.n	80077cc <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior2.8")){
 80075a6:	4938      	ldr	r1, [pc, #224]	; (8007688 <filtlength+0x308>)
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7f8 fe49 	bl	8000240 <strcmp>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <filtlength+0x238>
        return 18;
 80075b4:	2312      	movs	r3, #18
 80075b6:	e109      	b.n	80077cc <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior3.1")){
 80075b8:	4934      	ldr	r1, [pc, #208]	; (800768c <filtlength+0x30c>)
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7f8 fe40 	bl	8000240 <strcmp>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <filtlength+0x24a>
        return 4;
 80075c6:	2304      	movs	r3, #4
 80075c8:	e100      	b.n	80077cc <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior3.3")){
 80075ca:	4931      	ldr	r1, [pc, #196]	; (8007690 <filtlength+0x310>)
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7f8 fe37 	bl	8000240 <strcmp>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <filtlength+0x25c>
        return 8;
 80075d8:	2308      	movs	r3, #8
 80075da:	e0f7      	b.n	80077cc <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior3.5")){
 80075dc:	492d      	ldr	r1, [pc, #180]	; (8007694 <filtlength+0x314>)
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7f8 fe2e 	bl	8000240 <strcmp>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <filtlength+0x26e>
        return 12;
 80075ea:	230c      	movs	r3, #12
 80075ec:	e0ee      	b.n	80077cc <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior3.7")){
 80075ee:	492a      	ldr	r1, [pc, #168]	; (8007698 <filtlength+0x318>)
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7f8 fe25 	bl	8000240 <strcmp>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <filtlength+0x280>
        return 16;
 80075fc:	2310      	movs	r3, #16
 80075fe:	e0e5      	b.n	80077cc <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior3.9")){
 8007600:	4926      	ldr	r1, [pc, #152]	; (800769c <filtlength+0x31c>)
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7f8 fe1c 	bl	8000240 <strcmp>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <filtlength+0x292>
        return 20;
 800760e:	2314      	movs	r3, #20
 8007610:	e0dc      	b.n	80077cc <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior4.4")){
 8007612:	4923      	ldr	r1, [pc, #140]	; (80076a0 <filtlength+0x320>)
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7f8 fe13 	bl	8000240 <strcmp>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d141      	bne.n	80076a4 <filtlength+0x324>
        return 10;
 8007620:	230a      	movs	r3, #10
 8007622:	e0d3      	b.n	80077cc <filtlength+0x44c>
 8007624:	0800d938 	.word	0x0800d938
 8007628:	0800d940 	.word	0x0800d940
 800762c:	0800d944 	.word	0x0800d944
 8007630:	0800d948 	.word	0x0800d948
 8007634:	0800d964 	.word	0x0800d964
 8007638:	0800d96c 	.word	0x0800d96c
 800763c:	0800d974 	.word	0x0800d974
 8007640:	0800d97c 	.word	0x0800d97c
 8007644:	0800d984 	.word	0x0800d984
 8007648:	0800d98c 	.word	0x0800d98c
 800764c:	0800d994 	.word	0x0800d994
 8007650:	0800d99c 	.word	0x0800d99c
 8007654:	0800d9a4 	.word	0x0800d9a4
 8007658:	0800d9ac 	.word	0x0800d9ac
 800765c:	0800d9b4 	.word	0x0800d9b4
 8007660:	0800d9bc 	.word	0x0800d9bc
 8007664:	0800d9c4 	.word	0x0800d9c4
 8007668:	0800d9cc 	.word	0x0800d9cc
 800766c:	0800d9d4 	.word	0x0800d9d4
 8007670:	0800d9dc 	.word	0x0800d9dc
 8007674:	0800d9e8 	.word	0x0800d9e8
 8007678:	0800d9f4 	.word	0x0800d9f4
 800767c:	0800da00 	.word	0x0800da00
 8007680:	0800da0c 	.word	0x0800da0c
 8007684:	0800da18 	.word	0x0800da18
 8007688:	0800da24 	.word	0x0800da24
 800768c:	0800da30 	.word	0x0800da30
 8007690:	0800da3c 	.word	0x0800da3c
 8007694:	0800da48 	.word	0x0800da48
 8007698:	0800da54 	.word	0x0800da54
 800769c:	0800da60 	.word	0x0800da60
 80076a0:	0800da6c 	.word	0x0800da6c
    }
    else if (!strcmp(name, "rbior5.5")){
 80076a4:	494b      	ldr	r1, [pc, #300]	; (80077d4 <filtlength+0x454>)
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7f8 fdca 	bl	8000240 <strcmp>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <filtlength+0x336>
        return 12;
 80076b2:	230c      	movs	r3, #12
 80076b4:	e08a      	b.n	80077cc <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior6.8")){
 80076b6:	4948      	ldr	r1, [pc, #288]	; (80077d8 <filtlength+0x458>)
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7f8 fdc1 	bl	8000240 <strcmp>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <filtlength+0x348>
        return 18;
 80076c4:	2312      	movs	r3, #18
 80076c6:	e081      	b.n	80077cc <filtlength+0x44c>
    }
    else if (len > 4 && strstr(name, "coif") != NULL)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	dd36      	ble.n	800773c <filtlength+0x3bc>
 80076ce:	4943      	ldr	r1, [pc, #268]	; (80077dc <filtlength+0x45c>)
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f003 ff81 	bl	800b5d8 <strstr>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d02f      	beq.n	800773c <filtlength+0x3bc>
    {
        new_str = (char*)malloc(sizeof(char)*(len - 4 + 1));
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	3b03      	subs	r3, #3
 80076e0:	4618      	mov	r0, r3
 80076e2:	f003 fb3f 	bl	800ad64 <malloc>
 80076e6:	4603      	mov	r3, r0
 80076e8:	60fb      	str	r3, [r7, #12]
        for (i = 4; i < len + 1; i++)
 80076ea:	2304      	movs	r3, #4
 80076ec:	617b      	str	r3, [r7, #20]
 80076ee:	e00b      	b.n	8007708 <filtlength+0x388>
            new_str[i - 4] = name[i];
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	441a      	add	r2, r3
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	3b04      	subs	r3, #4
 80076fa:	68f9      	ldr	r1, [r7, #12]
 80076fc:	440b      	add	r3, r1
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	701a      	strb	r2, [r3, #0]
        for (i = 4; i < len + 1; i++)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	3301      	adds	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	429a      	cmp	r2, r3
 800770e:	daef      	bge.n	80076f0 <filtlength+0x370>

        N = atoi(new_str);
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f003 fb11 	bl	800ad38 <atoi>
 8007716:	60b8      	str	r0, [r7, #8]
        free(new_str);
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f003 fb2b 	bl	800ad74 <free>
        if (N>17)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b11      	cmp	r3, #17
 8007722:	dd05      	ble.n	8007730 <filtlength+0x3b0>
        {
            printf("\n Filter Not in Database \n");
 8007724:	482e      	ldr	r0, [pc, #184]	; (80077e0 <filtlength+0x460>)
 8007726:	f003 fd8f 	bl	800b248 <puts>
            return -1;
 800772a:	f04f 33ff 	mov.w	r3, #4294967295
 800772e:	e04d      	b.n	80077cc <filtlength+0x44c>
        }

        return N * 6;
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	4613      	mov	r3, r2
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	4413      	add	r3, r2
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	e047      	b.n	80077cc <filtlength+0x44c>
    }
    else if (len > 3 && strstr(name, "sym") != NULL)
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	2b03      	cmp	r3, #3
 8007740:	dd36      	ble.n	80077b0 <filtlength+0x430>
 8007742:	4928      	ldr	r1, [pc, #160]	; (80077e4 <filtlength+0x464>)
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f003 ff47 	bl	800b5d8 <strstr>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d02f      	beq.n	80077b0 <filtlength+0x430>
    {
        new_str = (char*)malloc(sizeof(char)*(len - 3 + 1));
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	3b02      	subs	r3, #2
 8007754:	4618      	mov	r0, r3
 8007756:	f003 fb05 	bl	800ad64 <malloc>
 800775a:	4603      	mov	r3, r0
 800775c:	60fb      	str	r3, [r7, #12]
        for (i = 3; i < len + 1; i++)
 800775e:	2303      	movs	r3, #3
 8007760:	617b      	str	r3, [r7, #20]
 8007762:	e00b      	b.n	800777c <filtlength+0x3fc>
            new_str[i - 3] = name[i];
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	441a      	add	r2, r3
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	3b03      	subs	r3, #3
 800776e:	68f9      	ldr	r1, [r7, #12]
 8007770:	440b      	add	r3, r1
 8007772:	7812      	ldrb	r2, [r2, #0]
 8007774:	701a      	strb	r2, [r3, #0]
        for (i = 3; i < len + 1; i++)
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	3301      	adds	r3, #1
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	429a      	cmp	r2, r3
 8007782:	daef      	bge.n	8007764 <filtlength+0x3e4>

        N = atoi(new_str);
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f003 fad7 	bl	800ad38 <atoi>
 800778a:	60b8      	str	r0, [r7, #8]
        free(new_str);
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f003 faf1 	bl	800ad74 <free>
        if (N>20 || N < 2)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b14      	cmp	r3, #20
 8007796:	dc02      	bgt.n	800779e <filtlength+0x41e>
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b01      	cmp	r3, #1
 800779c:	dc05      	bgt.n	80077aa <filtlength+0x42a>
        {
            printf("\n Filter Not in Database \n");
 800779e:	4810      	ldr	r0, [pc, #64]	; (80077e0 <filtlength+0x460>)
 80077a0:	f003 fd52 	bl	800b248 <puts>
            return -1;
 80077a4:	f04f 33ff 	mov.w	r3, #4294967295
 80077a8:	e010      	b.n	80077cc <filtlength+0x44c>
        }

        return N * 2;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	e00d      	b.n	80077cc <filtlength+0x44c>
    }
    else if (!strcmp(name, "meyer")){
 80077b0:	490d      	ldr	r1, [pc, #52]	; (80077e8 <filtlength+0x468>)
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7f8 fd44 	bl	8000240 <strcmp>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <filtlength+0x442>
        return 102;
 80077be:	2366      	movs	r3, #102	; 0x66
 80077c0:	e004      	b.n	80077cc <filtlength+0x44c>
    }
	else {
		printf("\n Filter Not in Database \n");
 80077c2:	4807      	ldr	r0, [pc, #28]	; (80077e0 <filtlength+0x460>)
 80077c4:	f003 fd40 	bl	800b248 <puts>
		return -1;
 80077c8:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	0800da78 	.word	0x0800da78
 80077d8:	0800da84 	.word	0x0800da84
 80077dc:	0800da90 	.word	0x0800da90
 80077e0:	0800d948 	.word	0x0800d948
 80077e4:	0800da98 	.word	0x0800da98
 80077e8:	0800da9c 	.word	0x0800da9c

080077ec <copy_reverse>:

void copy_reverse(const double *in, int N,double *out)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
    int count = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	617b      	str	r3, [r7, #20]
    for (count = 0; count < N; count++)
 80077fc:	2300      	movs	r3, #0
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e014      	b.n	800782c <copy_reverse+0x40>
        out[count] = in[N - count - 1];
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	461a      	mov	r2, r3
 800780a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800780e:	4413      	add	r3, r2
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	4413      	add	r3, r2
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	00d2      	lsls	r2, r2, #3
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	4411      	add	r1, r2
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	e9c1 2300 	strd	r2, r3, [r1]
    for (count = 0; count < N; count++)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	3301      	adds	r3, #1
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	429a      	cmp	r2, r3
 8007832:	dbe6      	blt.n	8007802 <copy_reverse+0x16>
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <qmf_wrev>:

void qmf_wrev(const double *in, int N, double *out)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b086      	sub	sp, #24
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	607a      	str	r2, [r7, #4]
    double *sigOutTemp;
    sigOutTemp = (double*)malloc(N*sizeof(double));
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	00db      	lsls	r3, r3, #3
 8007852:	4618      	mov	r0, r3
 8007854:	f003 fa86 	bl	800ad64 <malloc>
 8007858:	4603      	mov	r3, r0
 800785a:	617b      	str	r3, [r7, #20]

    qmf_even(in, N, sigOutTemp);
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	68b9      	ldr	r1, [r7, #8]
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f80c 	bl	800787e <qmf_even>
    copy_reverse(sigOutTemp, N, out);
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	6978      	ldr	r0, [r7, #20]
 800786c:	f7ff ffbe 	bl	80077ec <copy_reverse>

    free(sigOutTemp);
 8007870:	6978      	ldr	r0, [r7, #20]
 8007872:	f003 fa7f 	bl	800ad74 <free>
    return;
 8007876:	bf00      	nop
}
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <qmf_even>:

void qmf_even(const double *in, int N,double *out)
{
 800787e:	b480      	push	{r7}
 8007880:	b087      	sub	sp, #28
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	60b9      	str	r1, [r7, #8]
 8007888:	607a      	str	r2, [r7, #4]
    int count = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	617b      	str	r3, [r7, #20]
    for (count = 0; count < N; count++)
 800788e:	2300      	movs	r3, #0
 8007890:	617b      	str	r3, [r7, #20]
 8007892:	e027      	b.n	80078e4 <qmf_even+0x66>
    {
        out[count] = in[N - count - 1];
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	461a      	mov	r2, r3
 800789c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80078a0:	4413      	add	r3, r2
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	00d2      	lsls	r2, r2, #3
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	4411      	add	r1, r2
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	e9c1 2300 	strd	r2, r3, [r1]
        if (count % 2 != 0)
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00d      	beq.n	80078de <qmf_even+0x60>
        {
            out[count] = -1 * out[count];
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	4413      	add	r3, r2
 80078ca:	ed93 7b00 	vldr	d7, [r3]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	4413      	add	r3, r2
 80078d6:	eeb1 7b47 	vneg.f64	d7, d7
 80078da:	ed83 7b00 	vstr	d7, [r3]
    for (count = 0; count < N; count++)
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	3301      	adds	r3, #1
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	dbd3      	blt.n	8007894 <qmf_even+0x16>
        }
    }
}
 80078ec:	bf00      	nop
 80078ee:	bf00      	nop
 80078f0:	371c      	adds	r7, #28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <copy>:
void copy(const double *in, int N, double *out)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b087      	sub	sp, #28
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
    int count = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	617b      	str	r3, [r7, #20]
    for (count = 0; count < N; count++)
 800790a:	2300      	movs	r3, #0
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	e00e      	b.n	800792e <copy+0x34>
        out[count] = in[count];
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	00db      	lsls	r3, r3, #3
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4413      	add	r3, r2
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	00d2      	lsls	r2, r2, #3
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	4411      	add	r1, r2
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	e9c1 2300 	strd	r2, r3, [r1]
    for (count = 0; count < N; count++)
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	3301      	adds	r3, #1
 800792c:	617b      	str	r3, [r7, #20]
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	429a      	cmp	r2, r3
 8007934:	dbec      	blt.n	8007910 <copy+0x16>
}
 8007936:	bf00      	nop
 8007938:	bf00      	nop
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	0000      	movs	r0, r0
	...

08007948 <filtcoef>:

int filtcoef(const char* name, double *lp1, double *hp1, double *lp2, double *hp2) {
 8007948:	b580      	push	{r7, lr}
 800794a:	b098      	sub	sp, #96	; 0x60
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
    int i = 0; 
 8007956:	2300      	movs	r3, #0
 8007958:	65fb      	str	r3, [r7, #92]	; 0x5c
    int N = filtlength(name);
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7ff fd10 	bl	8007380 <filtlength>
 8007960:	65b8      	str	r0, [r7, #88]	; 0x58
	if (!strcmp(name,"haar") || !strcmp(name,"db1")) {
 8007962:	4999      	ldr	r1, [pc, #612]	; (8007bc8 <filtcoef+0x280>)
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f7f8 fc6b 	bl	8000240 <strcmp>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d006      	beq.n	800797e <filtcoef+0x36>
 8007970:	4996      	ldr	r1, [pc, #600]	; (8007bcc <filtcoef+0x284>)
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f7f8 fc64 	bl	8000240 <strcmp>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d116      	bne.n	80079ac <filtcoef+0x64>
        copy_reverse(db1, N, lp1);
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007982:	4893      	ldr	r0, [pc, #588]	; (8007bd0 <filtcoef+0x288>)
 8007984:	f7ff ff32 	bl	80077ec <copy_reverse>
        qmf_wrev(db1, N, hp1);
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800798c:	4890      	ldr	r0, [pc, #576]	; (8007bd0 <filtcoef+0x288>)
 800798e:	f7ff ff58 	bl	8007842 <qmf_wrev>
        copy(db1, N, lp2);
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007996:	488e      	ldr	r0, [pc, #568]	; (8007bd0 <filtcoef+0x288>)
 8007998:	f7ff ffaf 	bl	80078fa <copy>
        qmf_even(db1, N, hp2);
 800799c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800799e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079a0:	488b      	ldr	r0, [pc, #556]	; (8007bd0 <filtcoef+0x288>)
 80079a2:	f7ff ff6c 	bl	800787e <qmf_even>

		return N;
 80079a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079a8:	f002 b8e6 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db2")){
 80079ac:	4989      	ldr	r1, [pc, #548]	; (8007bd4 <filtcoef+0x28c>)
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f7f8 fc46 	bl	8000240 <strcmp>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d116      	bne.n	80079e8 <filtcoef+0xa0>
        copy_reverse(db2, N, lp1);
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079be:	4886      	ldr	r0, [pc, #536]	; (8007bd8 <filtcoef+0x290>)
 80079c0:	f7ff ff14 	bl	80077ec <copy_reverse>
        qmf_wrev(db2, N, hp1);
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079c8:	4883      	ldr	r0, [pc, #524]	; (8007bd8 <filtcoef+0x290>)
 80079ca:	f7ff ff3a 	bl	8007842 <qmf_wrev>
        copy(db2, N, lp2);
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079d2:	4881      	ldr	r0, [pc, #516]	; (8007bd8 <filtcoef+0x290>)
 80079d4:	f7ff ff91 	bl	80078fa <copy>
        qmf_even(db2, N, hp2);
 80079d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079dc:	487e      	ldr	r0, [pc, #504]	; (8007bd8 <filtcoef+0x290>)
 80079de:	f7ff ff4e 	bl	800787e <qmf_even>

        return N;
 80079e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079e4:	f002 b8c8 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db3")){
 80079e8:	497c      	ldr	r1, [pc, #496]	; (8007bdc <filtcoef+0x294>)
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f7f8 fc28 	bl	8000240 <strcmp>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d116      	bne.n	8007a24 <filtcoef+0xdc>
        copy_reverse(db3, N, lp1);
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079fa:	4879      	ldr	r0, [pc, #484]	; (8007be0 <filtcoef+0x298>)
 80079fc:	f7ff fef6 	bl	80077ec <copy_reverse>
        qmf_wrev(db3, N, hp1);
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a04:	4876      	ldr	r0, [pc, #472]	; (8007be0 <filtcoef+0x298>)
 8007a06:	f7ff ff1c 	bl	8007842 <qmf_wrev>
        copy(db3, N, lp2);
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a0e:	4874      	ldr	r0, [pc, #464]	; (8007be0 <filtcoef+0x298>)
 8007a10:	f7ff ff73 	bl	80078fa <copy>
        qmf_even(db3, N, hp2);
 8007a14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a18:	4871      	ldr	r0, [pc, #452]	; (8007be0 <filtcoef+0x298>)
 8007a1a:	f7ff ff30 	bl	800787e <qmf_even>

        return N;
 8007a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a20:	f002 b8aa 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db4")){
 8007a24:	496f      	ldr	r1, [pc, #444]	; (8007be4 <filtcoef+0x29c>)
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7f8 fc0a 	bl	8000240 <strcmp>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d116      	bne.n	8007a60 <filtcoef+0x118>
        copy_reverse(db4, N, lp1);
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a36:	486c      	ldr	r0, [pc, #432]	; (8007be8 <filtcoef+0x2a0>)
 8007a38:	f7ff fed8 	bl	80077ec <copy_reverse>
        qmf_wrev(db4, N, hp1);
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a40:	4869      	ldr	r0, [pc, #420]	; (8007be8 <filtcoef+0x2a0>)
 8007a42:	f7ff fefe 	bl	8007842 <qmf_wrev>
        copy(db4, N, lp2);
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a4a:	4867      	ldr	r0, [pc, #412]	; (8007be8 <filtcoef+0x2a0>)
 8007a4c:	f7ff ff55 	bl	80078fa <copy>
        qmf_even(db4, N, hp2);
 8007a50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a54:	4864      	ldr	r0, [pc, #400]	; (8007be8 <filtcoef+0x2a0>)
 8007a56:	f7ff ff12 	bl	800787e <qmf_even>

        return N;
 8007a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a5c:	f002 b88c 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db5")){
 8007a60:	4962      	ldr	r1, [pc, #392]	; (8007bec <filtcoef+0x2a4>)
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f7f8 fbec 	bl	8000240 <strcmp>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d116      	bne.n	8007a9c <filtcoef+0x154>
        copy_reverse(db5, N, lp1);
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a72:	485f      	ldr	r0, [pc, #380]	; (8007bf0 <filtcoef+0x2a8>)
 8007a74:	f7ff feba 	bl	80077ec <copy_reverse>
        qmf_wrev(db5, N, hp1);
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a7c:	485c      	ldr	r0, [pc, #368]	; (8007bf0 <filtcoef+0x2a8>)
 8007a7e:	f7ff fee0 	bl	8007842 <qmf_wrev>
        copy(db5, N, lp2);
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a86:	485a      	ldr	r0, [pc, #360]	; (8007bf0 <filtcoef+0x2a8>)
 8007a88:	f7ff ff37 	bl	80078fa <copy>
        qmf_even(db5, N, hp2);
 8007a8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a90:	4857      	ldr	r0, [pc, #348]	; (8007bf0 <filtcoef+0x2a8>)
 8007a92:	f7ff fef4 	bl	800787e <qmf_even>

        return N;
 8007a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a98:	f002 b86e 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db6")){
 8007a9c:	4955      	ldr	r1, [pc, #340]	; (8007bf4 <filtcoef+0x2ac>)
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7f8 fbce 	bl	8000240 <strcmp>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d116      	bne.n	8007ad8 <filtcoef+0x190>
        copy_reverse(db6, N, lp1);
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007aae:	4852      	ldr	r0, [pc, #328]	; (8007bf8 <filtcoef+0x2b0>)
 8007ab0:	f7ff fe9c 	bl	80077ec <copy_reverse>
        qmf_wrev(db6, N, hp1);
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ab8:	484f      	ldr	r0, [pc, #316]	; (8007bf8 <filtcoef+0x2b0>)
 8007aba:	f7ff fec2 	bl	8007842 <qmf_wrev>
        copy(db6, N, lp2);
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ac2:	484d      	ldr	r0, [pc, #308]	; (8007bf8 <filtcoef+0x2b0>)
 8007ac4:	f7ff ff19 	bl	80078fa <copy>
        qmf_even(db6, N, hp2);
 8007ac8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007aca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007acc:	484a      	ldr	r0, [pc, #296]	; (8007bf8 <filtcoef+0x2b0>)
 8007ace:	f7ff fed6 	bl	800787e <qmf_even>

        return N;
 8007ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ad4:	f002 b850 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db7")){
 8007ad8:	4948      	ldr	r1, [pc, #288]	; (8007bfc <filtcoef+0x2b4>)
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f7f8 fbb0 	bl	8000240 <strcmp>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d116      	bne.n	8007b14 <filtcoef+0x1cc>
        copy_reverse(db7, N, lp1);
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007aea:	4845      	ldr	r0, [pc, #276]	; (8007c00 <filtcoef+0x2b8>)
 8007aec:	f7ff fe7e 	bl	80077ec <copy_reverse>
        qmf_wrev(db7, N, hp1);
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007af4:	4842      	ldr	r0, [pc, #264]	; (8007c00 <filtcoef+0x2b8>)
 8007af6:	f7ff fea4 	bl	8007842 <qmf_wrev>
        copy(db7, N, lp2);
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007afe:	4840      	ldr	r0, [pc, #256]	; (8007c00 <filtcoef+0x2b8>)
 8007b00:	f7ff fefb 	bl	80078fa <copy>
        qmf_even(db7, N, hp2);
 8007b04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b08:	483d      	ldr	r0, [pc, #244]	; (8007c00 <filtcoef+0x2b8>)
 8007b0a:	f7ff feb8 	bl	800787e <qmf_even>

        return N;
 8007b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b10:	f002 b832 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db8")){
 8007b14:	493b      	ldr	r1, [pc, #236]	; (8007c04 <filtcoef+0x2bc>)
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f7f8 fb92 	bl	8000240 <strcmp>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d116      	bne.n	8007b50 <filtcoef+0x208>
        copy_reverse(db8, N, lp1);
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b26:	4838      	ldr	r0, [pc, #224]	; (8007c08 <filtcoef+0x2c0>)
 8007b28:	f7ff fe60 	bl	80077ec <copy_reverse>
        qmf_wrev(db8, N, hp1);
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b30:	4835      	ldr	r0, [pc, #212]	; (8007c08 <filtcoef+0x2c0>)
 8007b32:	f7ff fe86 	bl	8007842 <qmf_wrev>
        copy(db8, N, lp2);
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b3a:	4833      	ldr	r0, [pc, #204]	; (8007c08 <filtcoef+0x2c0>)
 8007b3c:	f7ff fedd 	bl	80078fa <copy>
        qmf_even(db8, N, hp2);
 8007b40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b44:	4830      	ldr	r0, [pc, #192]	; (8007c08 <filtcoef+0x2c0>)
 8007b46:	f7ff fe9a 	bl	800787e <qmf_even>

        return N;
 8007b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b4c:	f002 b814 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db9")){
 8007b50:	492e      	ldr	r1, [pc, #184]	; (8007c0c <filtcoef+0x2c4>)
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7f8 fb74 	bl	8000240 <strcmp>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d116      	bne.n	8007b8c <filtcoef+0x244>
        copy_reverse(db9, N, lp1);
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b62:	482b      	ldr	r0, [pc, #172]	; (8007c10 <filtcoef+0x2c8>)
 8007b64:	f7ff fe42 	bl	80077ec <copy_reverse>
        qmf_wrev(db9, N, hp1);
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b6c:	4828      	ldr	r0, [pc, #160]	; (8007c10 <filtcoef+0x2c8>)
 8007b6e:	f7ff fe68 	bl	8007842 <qmf_wrev>
        copy(db9, N, lp2);
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b76:	4826      	ldr	r0, [pc, #152]	; (8007c10 <filtcoef+0x2c8>)
 8007b78:	f7ff febf 	bl	80078fa <copy>
        qmf_even(db9, N, hp2);
 8007b7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b80:	4823      	ldr	r0, [pc, #140]	; (8007c10 <filtcoef+0x2c8>)
 8007b82:	f7ff fe7c 	bl	800787e <qmf_even>

        return N;
 8007b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b88:	f001 bff6 	b.w	8009b78 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"db10")){
 8007b8c:	4921      	ldr	r1, [pc, #132]	; (8007c14 <filtcoef+0x2cc>)
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f7f8 fb56 	bl	8000240 <strcmp>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d140      	bne.n	8007c1c <filtcoef+0x2d4>
        copy_reverse(db10, N, lp1);
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b9e:	481e      	ldr	r0, [pc, #120]	; (8007c18 <filtcoef+0x2d0>)
 8007ba0:	f7ff fe24 	bl	80077ec <copy_reverse>
        qmf_wrev(db10, N, hp1);
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ba8:	481b      	ldr	r0, [pc, #108]	; (8007c18 <filtcoef+0x2d0>)
 8007baa:	f7ff fe4a 	bl	8007842 <qmf_wrev>
        copy(db10, N, lp2);
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bb2:	4819      	ldr	r0, [pc, #100]	; (8007c18 <filtcoef+0x2d0>)
 8007bb4:	f7ff fea1 	bl	80078fa <copy>
        qmf_even(db10, N, hp2);
 8007bb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bbc:	4816      	ldr	r0, [pc, #88]	; (8007c18 <filtcoef+0x2d0>)
 8007bbe:	f7ff fe5e 	bl	800787e <qmf_even>

        return N;
 8007bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bc4:	f001 bfd8 	b.w	8009b78 <filtcoef+0x2230>
 8007bc8:	0800d938 	.word	0x0800d938
 8007bcc:	0800d940 	.word	0x0800d940
 8007bd0:	0800ea98 	.word	0x0800ea98
 8007bd4:	0800daa4 	.word	0x0800daa4
 8007bd8:	0800eaa8 	.word	0x0800eaa8
 8007bdc:	0800daa8 	.word	0x0800daa8
 8007be0:	0800eac8 	.word	0x0800eac8
 8007be4:	0800daac 	.word	0x0800daac
 8007be8:	0800eaf8 	.word	0x0800eaf8
 8007bec:	0800dab0 	.word	0x0800dab0
 8007bf0:	0800eb38 	.word	0x0800eb38
 8007bf4:	0800dab4 	.word	0x0800dab4
 8007bf8:	0800eb88 	.word	0x0800eb88
 8007bfc:	0800dab8 	.word	0x0800dab8
 8007c00:	0800ebe8 	.word	0x0800ebe8
 8007c04:	0800dabc 	.word	0x0800dabc
 8007c08:	0800ec58 	.word	0x0800ec58
 8007c0c:	0800dac0 	.word	0x0800dac0
 8007c10:	0800ecd8 	.word	0x0800ecd8
 8007c14:	0800dac4 	.word	0x0800dac4
 8007c18:	0800ed68 	.word	0x0800ed68
	}

	else if (!strcmp(name,"db11")){
 8007c1c:	4995      	ldr	r1, [pc, #596]	; (8007e74 <filtcoef+0x52c>)
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7f8 fb0e 	bl	8000240 <strcmp>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d116      	bne.n	8007c58 <filtcoef+0x310>
        copy_reverse(db11, N, lp1);
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c2e:	4892      	ldr	r0, [pc, #584]	; (8007e78 <filtcoef+0x530>)
 8007c30:	f7ff fddc 	bl	80077ec <copy_reverse>
        qmf_wrev(db11, N, hp1);
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c38:	488f      	ldr	r0, [pc, #572]	; (8007e78 <filtcoef+0x530>)
 8007c3a:	f7ff fe02 	bl	8007842 <qmf_wrev>
        copy(db11, N, lp2);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c42:	488d      	ldr	r0, [pc, #564]	; (8007e78 <filtcoef+0x530>)
 8007c44:	f7ff fe59 	bl	80078fa <copy>
        qmf_even(db11, N, hp2);
 8007c48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c4c:	488a      	ldr	r0, [pc, #552]	; (8007e78 <filtcoef+0x530>)
 8007c4e:	f7ff fe16 	bl	800787e <qmf_even>

        return N;
 8007c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c54:	f001 bf90 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db12")){
 8007c58:	4988      	ldr	r1, [pc, #544]	; (8007e7c <filtcoef+0x534>)
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f7f8 faf0 	bl	8000240 <strcmp>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d116      	bne.n	8007c94 <filtcoef+0x34c>
        copy_reverse(db12, N, lp1);
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c6a:	4885      	ldr	r0, [pc, #532]	; (8007e80 <filtcoef+0x538>)
 8007c6c:	f7ff fdbe 	bl	80077ec <copy_reverse>
        qmf_wrev(db12, N, hp1);
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c74:	4882      	ldr	r0, [pc, #520]	; (8007e80 <filtcoef+0x538>)
 8007c76:	f7ff fde4 	bl	8007842 <qmf_wrev>
        copy(db12, N, lp2);
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c7e:	4880      	ldr	r0, [pc, #512]	; (8007e80 <filtcoef+0x538>)
 8007c80:	f7ff fe3b 	bl	80078fa <copy>
        qmf_even(db12, N, hp2);
 8007c84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c88:	487d      	ldr	r0, [pc, #500]	; (8007e80 <filtcoef+0x538>)
 8007c8a:	f7ff fdf8 	bl	800787e <qmf_even>

        return N;
 8007c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c90:	f001 bf72 	b.w	8009b78 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"db13")){
 8007c94:	497b      	ldr	r1, [pc, #492]	; (8007e84 <filtcoef+0x53c>)
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7f8 fad2 	bl	8000240 <strcmp>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d116      	bne.n	8007cd0 <filtcoef+0x388>
        copy_reverse(db13, N, lp1);
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ca6:	4878      	ldr	r0, [pc, #480]	; (8007e88 <filtcoef+0x540>)
 8007ca8:	f7ff fda0 	bl	80077ec <copy_reverse>
        qmf_wrev(db13, N, hp1);
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cb0:	4875      	ldr	r0, [pc, #468]	; (8007e88 <filtcoef+0x540>)
 8007cb2:	f7ff fdc6 	bl	8007842 <qmf_wrev>
        copy(db13, N, lp2);
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cba:	4873      	ldr	r0, [pc, #460]	; (8007e88 <filtcoef+0x540>)
 8007cbc:	f7ff fe1d 	bl	80078fa <copy>
        qmf_even(db13, N, hp2);
 8007cc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cc4:	4870      	ldr	r0, [pc, #448]	; (8007e88 <filtcoef+0x540>)
 8007cc6:	f7ff fdda 	bl	800787e <qmf_even>

        return N;
 8007cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ccc:	f001 bf54 	b.w	8009b78 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"db14")){
 8007cd0:	496e      	ldr	r1, [pc, #440]	; (8007e8c <filtcoef+0x544>)
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f7f8 fab4 	bl	8000240 <strcmp>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d116      	bne.n	8007d0c <filtcoef+0x3c4>
        copy_reverse(db14, N, lp1);
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ce2:	486b      	ldr	r0, [pc, #428]	; (8007e90 <filtcoef+0x548>)
 8007ce4:	f7ff fd82 	bl	80077ec <copy_reverse>
        qmf_wrev(db14, N, hp1);
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cec:	4868      	ldr	r0, [pc, #416]	; (8007e90 <filtcoef+0x548>)
 8007cee:	f7ff fda8 	bl	8007842 <qmf_wrev>
        copy(db14, N, lp2);
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cf6:	4866      	ldr	r0, [pc, #408]	; (8007e90 <filtcoef+0x548>)
 8007cf8:	f7ff fdff 	bl	80078fa <copy>
        qmf_even(db14, N, hp2);
 8007cfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cfe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d00:	4863      	ldr	r0, [pc, #396]	; (8007e90 <filtcoef+0x548>)
 8007d02:	f7ff fdbc 	bl	800787e <qmf_even>

        return N;
 8007d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d08:	f001 bf36 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db15")){
 8007d0c:	4961      	ldr	r1, [pc, #388]	; (8007e94 <filtcoef+0x54c>)
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7f8 fa96 	bl	8000240 <strcmp>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d116      	bne.n	8007d48 <filtcoef+0x400>
        copy_reverse(db15, N, lp1);
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d1e:	485e      	ldr	r0, [pc, #376]	; (8007e98 <filtcoef+0x550>)
 8007d20:	f7ff fd64 	bl	80077ec <copy_reverse>
        qmf_wrev(db15, N, hp1);
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d28:	485b      	ldr	r0, [pc, #364]	; (8007e98 <filtcoef+0x550>)
 8007d2a:	f7ff fd8a 	bl	8007842 <qmf_wrev>
        copy(db15, N, lp2);
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d32:	4859      	ldr	r0, [pc, #356]	; (8007e98 <filtcoef+0x550>)
 8007d34:	f7ff fde1 	bl	80078fa <copy>
        qmf_even(db15, N, hp2);
 8007d38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d3c:	4856      	ldr	r0, [pc, #344]	; (8007e98 <filtcoef+0x550>)
 8007d3e:	f7ff fd9e 	bl	800787e <qmf_even>

        return N;
 8007d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d44:	f001 bf18 	b.w	8009b78 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "db16")){
 8007d48:	4954      	ldr	r1, [pc, #336]	; (8007e9c <filtcoef+0x554>)
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7f8 fa78 	bl	8000240 <strcmp>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d116      	bne.n	8007d84 <filtcoef+0x43c>
        copy_reverse(db16, N, lp1);
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d5a:	4851      	ldr	r0, [pc, #324]	; (8007ea0 <filtcoef+0x558>)
 8007d5c:	f7ff fd46 	bl	80077ec <copy_reverse>
        qmf_wrev(db16, N, hp1);
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d64:	484e      	ldr	r0, [pc, #312]	; (8007ea0 <filtcoef+0x558>)
 8007d66:	f7ff fd6c 	bl	8007842 <qmf_wrev>
        copy(db16, N, lp2);
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d6e:	484c      	ldr	r0, [pc, #304]	; (8007ea0 <filtcoef+0x558>)
 8007d70:	f7ff fdc3 	bl	80078fa <copy>
        qmf_even(db16, N, hp2);
 8007d74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d78:	4849      	ldr	r0, [pc, #292]	; (8007ea0 <filtcoef+0x558>)
 8007d7a:	f7ff fd80 	bl	800787e <qmf_even>

        return N;
 8007d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d80:	f001 befa 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db17")){
 8007d84:	4947      	ldr	r1, [pc, #284]	; (8007ea4 <filtcoef+0x55c>)
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7f8 fa5a 	bl	8000240 <strcmp>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d116      	bne.n	8007dc0 <filtcoef+0x478>
        copy_reverse(db17, N, lp1);
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d96:	4844      	ldr	r0, [pc, #272]	; (8007ea8 <filtcoef+0x560>)
 8007d98:	f7ff fd28 	bl	80077ec <copy_reverse>
        qmf_wrev(db17, N, hp1);
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007da0:	4841      	ldr	r0, [pc, #260]	; (8007ea8 <filtcoef+0x560>)
 8007da2:	f7ff fd4e 	bl	8007842 <qmf_wrev>
        copy(db17, N, lp2);
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007daa:	483f      	ldr	r0, [pc, #252]	; (8007ea8 <filtcoef+0x560>)
 8007dac:	f7ff fda5 	bl	80078fa <copy>
        qmf_even(db17, N, hp2);
 8007db0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007db2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007db4:	483c      	ldr	r0, [pc, #240]	; (8007ea8 <filtcoef+0x560>)
 8007db6:	f7ff fd62 	bl	800787e <qmf_even>

        return N;
 8007dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dbc:	f001 bedc 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db18")){
 8007dc0:	493a      	ldr	r1, [pc, #232]	; (8007eac <filtcoef+0x564>)
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f7f8 fa3c 	bl	8000240 <strcmp>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d116      	bne.n	8007dfc <filtcoef+0x4b4>
        copy_reverse(db18, N, lp1);
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007dd2:	4837      	ldr	r0, [pc, #220]	; (8007eb0 <filtcoef+0x568>)
 8007dd4:	f7ff fd0a 	bl	80077ec <copy_reverse>
        qmf_wrev(db18, N, hp1);
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ddc:	4834      	ldr	r0, [pc, #208]	; (8007eb0 <filtcoef+0x568>)
 8007dde:	f7ff fd30 	bl	8007842 <qmf_wrev>
        copy(db18, N, lp2);
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007de6:	4832      	ldr	r0, [pc, #200]	; (8007eb0 <filtcoef+0x568>)
 8007de8:	f7ff fd87 	bl	80078fa <copy>
        qmf_even(db18, N, hp2);
 8007dec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007dee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007df0:	482f      	ldr	r0, [pc, #188]	; (8007eb0 <filtcoef+0x568>)
 8007df2:	f7ff fd44 	bl	800787e <qmf_even>

        return N;
 8007df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007df8:	f001 bebe 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db19")){
 8007dfc:	492d      	ldr	r1, [pc, #180]	; (8007eb4 <filtcoef+0x56c>)
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f7f8 fa1e 	bl	8000240 <strcmp>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d116      	bne.n	8007e38 <filtcoef+0x4f0>
        copy_reverse(db19, N, lp1);
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e0e:	482a      	ldr	r0, [pc, #168]	; (8007eb8 <filtcoef+0x570>)
 8007e10:	f7ff fcec 	bl	80077ec <copy_reverse>
        qmf_wrev(db19, N, hp1);
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e18:	4827      	ldr	r0, [pc, #156]	; (8007eb8 <filtcoef+0x570>)
 8007e1a:	f7ff fd12 	bl	8007842 <qmf_wrev>
        copy(db19, N, lp2);
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e22:	4825      	ldr	r0, [pc, #148]	; (8007eb8 <filtcoef+0x570>)
 8007e24:	f7ff fd69 	bl	80078fa <copy>
        qmf_even(db19, N, hp2);
 8007e28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e2c:	4822      	ldr	r0, [pc, #136]	; (8007eb8 <filtcoef+0x570>)
 8007e2e:	f7ff fd26 	bl	800787e <qmf_even>

        return N;
 8007e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e34:	f001 bea0 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db20")){
 8007e38:	4920      	ldr	r1, [pc, #128]	; (8007ebc <filtcoef+0x574>)
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f7f8 fa00 	bl	8000240 <strcmp>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d13e      	bne.n	8007ec4 <filtcoef+0x57c>
        copy_reverse(db20, N, lp1);
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e4a:	481d      	ldr	r0, [pc, #116]	; (8007ec0 <filtcoef+0x578>)
 8007e4c:	f7ff fcce 	bl	80077ec <copy_reverse>
        qmf_wrev(db20, N, hp1);
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e54:	481a      	ldr	r0, [pc, #104]	; (8007ec0 <filtcoef+0x578>)
 8007e56:	f7ff fcf4 	bl	8007842 <qmf_wrev>
        copy(db20, N, lp2);
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e5e:	4818      	ldr	r0, [pc, #96]	; (8007ec0 <filtcoef+0x578>)
 8007e60:	f7ff fd4b 	bl	80078fa <copy>
        qmf_even(db20, N, hp2);
 8007e64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e68:	4815      	ldr	r0, [pc, #84]	; (8007ec0 <filtcoef+0x578>)
 8007e6a:	f7ff fd08 	bl	800787e <qmf_even>

        return N;
 8007e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e70:	f001 be82 	b.w	8009b78 <filtcoef+0x2230>
 8007e74:	0800dacc 	.word	0x0800dacc
 8007e78:	0800ee08 	.word	0x0800ee08
 8007e7c:	0800dad4 	.word	0x0800dad4
 8007e80:	0800eeb8 	.word	0x0800eeb8
 8007e84:	0800dadc 	.word	0x0800dadc
 8007e88:	0800ef78 	.word	0x0800ef78
 8007e8c:	0800dae4 	.word	0x0800dae4
 8007e90:	0800f048 	.word	0x0800f048
 8007e94:	0800daec 	.word	0x0800daec
 8007e98:	0800f128 	.word	0x0800f128
 8007e9c:	0800daf4 	.word	0x0800daf4
 8007ea0:	0800f218 	.word	0x0800f218
 8007ea4:	0800dafc 	.word	0x0800dafc
 8007ea8:	0800f318 	.word	0x0800f318
 8007eac:	0800db04 	.word	0x0800db04
 8007eb0:	0800f428 	.word	0x0800f428
 8007eb4:	0800db0c 	.word	0x0800db0c
 8007eb8:	0800f548 	.word	0x0800f548
 8007ebc:	0800db14 	.word	0x0800db14
 8007ec0:	0800f678 	.word	0x0800f678
    }
    else if (!strcmp(name, "db21")){
 8007ec4:	4995      	ldr	r1, [pc, #596]	; (800811c <filtcoef+0x7d4>)
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f7f8 f9ba 	bl	8000240 <strcmp>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d116      	bne.n	8007f00 <filtcoef+0x5b8>
        copy_reverse(db21, N, lp1);
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ed6:	4892      	ldr	r0, [pc, #584]	; (8008120 <filtcoef+0x7d8>)
 8007ed8:	f7ff fc88 	bl	80077ec <copy_reverse>
        qmf_wrev(db21, N, hp1);
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ee0:	488f      	ldr	r0, [pc, #572]	; (8008120 <filtcoef+0x7d8>)
 8007ee2:	f7ff fcae 	bl	8007842 <qmf_wrev>
        copy(db21, N, lp2);
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007eea:	488d      	ldr	r0, [pc, #564]	; (8008120 <filtcoef+0x7d8>)
 8007eec:	f7ff fd05 	bl	80078fa <copy>
        qmf_even(db21, N, hp2);
 8007ef0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ef2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ef4:	488a      	ldr	r0, [pc, #552]	; (8008120 <filtcoef+0x7d8>)
 8007ef6:	f7ff fcc2 	bl	800787e <qmf_even>

        return N;
 8007efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007efc:	f001 be3c 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db22")){
 8007f00:	4988      	ldr	r1, [pc, #544]	; (8008124 <filtcoef+0x7dc>)
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f7f8 f99c 	bl	8000240 <strcmp>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d116      	bne.n	8007f3c <filtcoef+0x5f4>
        copy_reverse(db22, N, lp1);
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f12:	4885      	ldr	r0, [pc, #532]	; (8008128 <filtcoef+0x7e0>)
 8007f14:	f7ff fc6a 	bl	80077ec <copy_reverse>
        qmf_wrev(db22, N, hp1);
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f1c:	4882      	ldr	r0, [pc, #520]	; (8008128 <filtcoef+0x7e0>)
 8007f1e:	f7ff fc90 	bl	8007842 <qmf_wrev>
        copy(db22, N, lp2);
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f26:	4880      	ldr	r0, [pc, #512]	; (8008128 <filtcoef+0x7e0>)
 8007f28:	f7ff fce7 	bl	80078fa <copy>
        qmf_even(db22, N, hp2);
 8007f2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f30:	487d      	ldr	r0, [pc, #500]	; (8008128 <filtcoef+0x7e0>)
 8007f32:	f7ff fca4 	bl	800787e <qmf_even>

        return N;
 8007f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f38:	f001 be1e 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db23")){
 8007f3c:	497b      	ldr	r1, [pc, #492]	; (800812c <filtcoef+0x7e4>)
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7f8 f97e 	bl	8000240 <strcmp>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d116      	bne.n	8007f78 <filtcoef+0x630>
        copy_reverse(db23, N, lp1);
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f4e:	4878      	ldr	r0, [pc, #480]	; (8008130 <filtcoef+0x7e8>)
 8007f50:	f7ff fc4c 	bl	80077ec <copy_reverse>
        qmf_wrev(db23, N, hp1);
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f58:	4875      	ldr	r0, [pc, #468]	; (8008130 <filtcoef+0x7e8>)
 8007f5a:	f7ff fc72 	bl	8007842 <qmf_wrev>
        copy(db23, N, lp2);
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f62:	4873      	ldr	r0, [pc, #460]	; (8008130 <filtcoef+0x7e8>)
 8007f64:	f7ff fcc9 	bl	80078fa <copy>
        qmf_even(db23, N, hp2);
 8007f68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f6c:	4870      	ldr	r0, [pc, #448]	; (8008130 <filtcoef+0x7e8>)
 8007f6e:	f7ff fc86 	bl	800787e <qmf_even>

        return N;
 8007f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f74:	f001 be00 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db24")){
 8007f78:	496e      	ldr	r1, [pc, #440]	; (8008134 <filtcoef+0x7ec>)
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f7f8 f960 	bl	8000240 <strcmp>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d116      	bne.n	8007fb4 <filtcoef+0x66c>
        copy_reverse(db24, N, lp1);
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f8a:	486b      	ldr	r0, [pc, #428]	; (8008138 <filtcoef+0x7f0>)
 8007f8c:	f7ff fc2e 	bl	80077ec <copy_reverse>
        qmf_wrev(db24, N, hp1);
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f94:	4868      	ldr	r0, [pc, #416]	; (8008138 <filtcoef+0x7f0>)
 8007f96:	f7ff fc54 	bl	8007842 <qmf_wrev>
        copy(db24, N, lp2);
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f9e:	4866      	ldr	r0, [pc, #408]	; (8008138 <filtcoef+0x7f0>)
 8007fa0:	f7ff fcab 	bl	80078fa <copy>
        qmf_even(db24, N, hp2);
 8007fa4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fa8:	4863      	ldr	r0, [pc, #396]	; (8008138 <filtcoef+0x7f0>)
 8007faa:	f7ff fc68 	bl	800787e <qmf_even>

        return N;
 8007fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fb0:	f001 bde2 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db25")){
 8007fb4:	4961      	ldr	r1, [pc, #388]	; (800813c <filtcoef+0x7f4>)
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f7f8 f942 	bl	8000240 <strcmp>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d116      	bne.n	8007ff0 <filtcoef+0x6a8>
        copy_reverse(db25, N, lp1);
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fc6:	485e      	ldr	r0, [pc, #376]	; (8008140 <filtcoef+0x7f8>)
 8007fc8:	f7ff fc10 	bl	80077ec <copy_reverse>
        qmf_wrev(db25, N, hp1);
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fd0:	485b      	ldr	r0, [pc, #364]	; (8008140 <filtcoef+0x7f8>)
 8007fd2:	f7ff fc36 	bl	8007842 <qmf_wrev>
        copy(db25, N, lp2);
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fda:	4859      	ldr	r0, [pc, #356]	; (8008140 <filtcoef+0x7f8>)
 8007fdc:	f7ff fc8d 	bl	80078fa <copy>
        qmf_even(db25, N, hp2);
 8007fe0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fe2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fe4:	4856      	ldr	r0, [pc, #344]	; (8008140 <filtcoef+0x7f8>)
 8007fe6:	f7ff fc4a 	bl	800787e <qmf_even>

        return N;
 8007fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fec:	f001 bdc4 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db26")){
 8007ff0:	4954      	ldr	r1, [pc, #336]	; (8008144 <filtcoef+0x7fc>)
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f7f8 f924 	bl	8000240 <strcmp>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d116      	bne.n	800802c <filtcoef+0x6e4>
        copy_reverse(db26, N, lp1);
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008002:	4851      	ldr	r0, [pc, #324]	; (8008148 <filtcoef+0x800>)
 8008004:	f7ff fbf2 	bl	80077ec <copy_reverse>
        qmf_wrev(db26, N, hp1);
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800800c:	484e      	ldr	r0, [pc, #312]	; (8008148 <filtcoef+0x800>)
 800800e:	f7ff fc18 	bl	8007842 <qmf_wrev>
        copy(db26, N, lp2);
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008016:	484c      	ldr	r0, [pc, #304]	; (8008148 <filtcoef+0x800>)
 8008018:	f7ff fc6f 	bl	80078fa <copy>
        qmf_even(db26, N, hp2);
 800801c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800801e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008020:	4849      	ldr	r0, [pc, #292]	; (8008148 <filtcoef+0x800>)
 8008022:	f7ff fc2c 	bl	800787e <qmf_even>
        return N;
 8008026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008028:	f001 bda6 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db27")){
 800802c:	4947      	ldr	r1, [pc, #284]	; (800814c <filtcoef+0x804>)
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7f8 f906 	bl	8000240 <strcmp>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d116      	bne.n	8008068 <filtcoef+0x720>
        copy_reverse(db27, N, lp1);
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800803e:	4844      	ldr	r0, [pc, #272]	; (8008150 <filtcoef+0x808>)
 8008040:	f7ff fbd4 	bl	80077ec <copy_reverse>
        qmf_wrev(db27, N, hp1);
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008048:	4841      	ldr	r0, [pc, #260]	; (8008150 <filtcoef+0x808>)
 800804a:	f7ff fbfa 	bl	8007842 <qmf_wrev>
        copy(db27, N, lp2);
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008052:	483f      	ldr	r0, [pc, #252]	; (8008150 <filtcoef+0x808>)
 8008054:	f7ff fc51 	bl	80078fa <copy>
        qmf_even(db27, N, hp2);
 8008058:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800805a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800805c:	483c      	ldr	r0, [pc, #240]	; (8008150 <filtcoef+0x808>)
 800805e:	f7ff fc0e 	bl	800787e <qmf_even>

        return N;
 8008062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008064:	f001 bd88 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db28")){
 8008068:	493a      	ldr	r1, [pc, #232]	; (8008154 <filtcoef+0x80c>)
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f7f8 f8e8 	bl	8000240 <strcmp>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d116      	bne.n	80080a4 <filtcoef+0x75c>
        copy_reverse(db28, N, lp1);
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800807a:	4837      	ldr	r0, [pc, #220]	; (8008158 <filtcoef+0x810>)
 800807c:	f7ff fbb6 	bl	80077ec <copy_reverse>
        qmf_wrev(db28, N, hp1);
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008084:	4834      	ldr	r0, [pc, #208]	; (8008158 <filtcoef+0x810>)
 8008086:	f7ff fbdc 	bl	8007842 <qmf_wrev>
        copy(db28, N, lp2);
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800808e:	4832      	ldr	r0, [pc, #200]	; (8008158 <filtcoef+0x810>)
 8008090:	f7ff fc33 	bl	80078fa <copy>
        qmf_even(db28, N, hp2);
 8008094:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008096:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008098:	482f      	ldr	r0, [pc, #188]	; (8008158 <filtcoef+0x810>)
 800809a:	f7ff fbf0 	bl	800787e <qmf_even>

        return N;
 800809e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080a0:	f001 bd6a 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db29")){
 80080a4:	492d      	ldr	r1, [pc, #180]	; (800815c <filtcoef+0x814>)
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7f8 f8ca 	bl	8000240 <strcmp>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d116      	bne.n	80080e0 <filtcoef+0x798>
        copy_reverse(db29, N, lp1);
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080b6:	482a      	ldr	r0, [pc, #168]	; (8008160 <filtcoef+0x818>)
 80080b8:	f7ff fb98 	bl	80077ec <copy_reverse>
        qmf_wrev(db29, N, hp1);
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080c0:	4827      	ldr	r0, [pc, #156]	; (8008160 <filtcoef+0x818>)
 80080c2:	f7ff fbbe 	bl	8007842 <qmf_wrev>
        copy(db29, N, lp2);
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080ca:	4825      	ldr	r0, [pc, #148]	; (8008160 <filtcoef+0x818>)
 80080cc:	f7ff fc15 	bl	80078fa <copy>
        qmf_even(db29, N, hp2);
 80080d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080d4:	4822      	ldr	r0, [pc, #136]	; (8008160 <filtcoef+0x818>)
 80080d6:	f7ff fbd2 	bl	800787e <qmf_even>

        return N;
 80080da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080dc:	f001 bd4c 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db30")){
 80080e0:	4920      	ldr	r1, [pc, #128]	; (8008164 <filtcoef+0x81c>)
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7f8 f8ac 	bl	8000240 <strcmp>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d13e      	bne.n	800816c <filtcoef+0x824>
        copy_reverse(db30, N, lp1);
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080f2:	481d      	ldr	r0, [pc, #116]	; (8008168 <filtcoef+0x820>)
 80080f4:	f7ff fb7a 	bl	80077ec <copy_reverse>
        qmf_wrev(db30, N, hp1);
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080fc:	481a      	ldr	r0, [pc, #104]	; (8008168 <filtcoef+0x820>)
 80080fe:	f7ff fba0 	bl	8007842 <qmf_wrev>
        copy(db30, N, lp2);
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008106:	4818      	ldr	r0, [pc, #96]	; (8008168 <filtcoef+0x820>)
 8008108:	f7ff fbf7 	bl	80078fa <copy>
        qmf_even(db30, N, hp2);
 800810c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800810e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008110:	4815      	ldr	r0, [pc, #84]	; (8008168 <filtcoef+0x820>)
 8008112:	f7ff fbb4 	bl	800787e <qmf_even>

        return N;
 8008116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008118:	f001 bd2e 	b.w	8009b78 <filtcoef+0x2230>
 800811c:	0800db1c 	.word	0x0800db1c
 8008120:	0800f7b8 	.word	0x0800f7b8
 8008124:	0800db24 	.word	0x0800db24
 8008128:	0800f908 	.word	0x0800f908
 800812c:	0800db2c 	.word	0x0800db2c
 8008130:	0800fa68 	.word	0x0800fa68
 8008134:	0800db34 	.word	0x0800db34
 8008138:	0800fbd8 	.word	0x0800fbd8
 800813c:	0800db3c 	.word	0x0800db3c
 8008140:	0800fd58 	.word	0x0800fd58
 8008144:	0800db44 	.word	0x0800db44
 8008148:	0800fee8 	.word	0x0800fee8
 800814c:	0800db4c 	.word	0x0800db4c
 8008150:	08010088 	.word	0x08010088
 8008154:	0800db54 	.word	0x0800db54
 8008158:	08010238 	.word	0x08010238
 800815c:	0800db5c 	.word	0x0800db5c
 8008160:	080103f8 	.word	0x080103f8
 8008164:	0800db64 	.word	0x0800db64
 8008168:	080105c8 	.word	0x080105c8
    }
    else if (!strcmp(name, "db31")){
 800816c:	4997      	ldr	r1, [pc, #604]	; (80083cc <filtcoef+0xa84>)
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7f8 f866 	bl	8000240 <strcmp>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d116      	bne.n	80081a8 <filtcoef+0x860>
        copy_reverse(db31, N, lp1);
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800817e:	4894      	ldr	r0, [pc, #592]	; (80083d0 <filtcoef+0xa88>)
 8008180:	f7ff fb34 	bl	80077ec <copy_reverse>
        qmf_wrev(db31, N, hp1);
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008188:	4891      	ldr	r0, [pc, #580]	; (80083d0 <filtcoef+0xa88>)
 800818a:	f7ff fb5a 	bl	8007842 <qmf_wrev>
        copy(db31, N, lp2);
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008192:	488f      	ldr	r0, [pc, #572]	; (80083d0 <filtcoef+0xa88>)
 8008194:	f7ff fbb1 	bl	80078fa <copy>
        qmf_even(db31, N, hp2);
 8008198:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800819a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800819c:	488c      	ldr	r0, [pc, #560]	; (80083d0 <filtcoef+0xa88>)
 800819e:	f7ff fb6e 	bl	800787e <qmf_even>

        return N;
 80081a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081a4:	f001 bce8 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db32")){
 80081a8:	498a      	ldr	r1, [pc, #552]	; (80083d4 <filtcoef+0xa8c>)
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f7f8 f848 	bl	8000240 <strcmp>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d116      	bne.n	80081e4 <filtcoef+0x89c>
        copy_reverse(db32, N, lp1);
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081ba:	4887      	ldr	r0, [pc, #540]	; (80083d8 <filtcoef+0xa90>)
 80081bc:	f7ff fb16 	bl	80077ec <copy_reverse>
        qmf_wrev(db32, N, hp1);
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081c4:	4884      	ldr	r0, [pc, #528]	; (80083d8 <filtcoef+0xa90>)
 80081c6:	f7ff fb3c 	bl	8007842 <qmf_wrev>
        copy(db32, N, lp2);
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081ce:	4882      	ldr	r0, [pc, #520]	; (80083d8 <filtcoef+0xa90>)
 80081d0:	f7ff fb93 	bl	80078fa <copy>
        qmf_even(db32, N, hp2);
 80081d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80081d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081d8:	487f      	ldr	r0, [pc, #508]	; (80083d8 <filtcoef+0xa90>)
 80081da:	f7ff fb50 	bl	800787e <qmf_even>

        return N;
 80081de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081e0:	f001 bcca 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db33")){
 80081e4:	497d      	ldr	r1, [pc, #500]	; (80083dc <filtcoef+0xa94>)
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f7f8 f82a 	bl	8000240 <strcmp>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d116      	bne.n	8008220 <filtcoef+0x8d8>
        copy_reverse(db33, N, lp1);
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081f6:	487a      	ldr	r0, [pc, #488]	; (80083e0 <filtcoef+0xa98>)
 80081f8:	f7ff faf8 	bl	80077ec <copy_reverse>
        qmf_wrev(db33, N, hp1);
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008200:	4877      	ldr	r0, [pc, #476]	; (80083e0 <filtcoef+0xa98>)
 8008202:	f7ff fb1e 	bl	8007842 <qmf_wrev>
        copy(db33, N, lp2);
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800820a:	4875      	ldr	r0, [pc, #468]	; (80083e0 <filtcoef+0xa98>)
 800820c:	f7ff fb75 	bl	80078fa <copy>
        qmf_even(db33, N, hp2);
 8008210:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008214:	4872      	ldr	r0, [pc, #456]	; (80083e0 <filtcoef+0xa98>)
 8008216:	f7ff fb32 	bl	800787e <qmf_even>

        return N;
 800821a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800821c:	f001 bcac 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db34")){
 8008220:	4970      	ldr	r1, [pc, #448]	; (80083e4 <filtcoef+0xa9c>)
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7f8 f80c 	bl	8000240 <strcmp>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d116      	bne.n	800825c <filtcoef+0x914>
        copy_reverse(db34, N, lp1);
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008232:	486d      	ldr	r0, [pc, #436]	; (80083e8 <filtcoef+0xaa0>)
 8008234:	f7ff fada 	bl	80077ec <copy_reverse>
        qmf_wrev(db34, N, hp1);
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800823c:	486a      	ldr	r0, [pc, #424]	; (80083e8 <filtcoef+0xaa0>)
 800823e:	f7ff fb00 	bl	8007842 <qmf_wrev>
        copy(db34, N, lp2);
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008246:	4868      	ldr	r0, [pc, #416]	; (80083e8 <filtcoef+0xaa0>)
 8008248:	f7ff fb57 	bl	80078fa <copy>
        qmf_even(db34, N, hp2);
 800824c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800824e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008250:	4865      	ldr	r0, [pc, #404]	; (80083e8 <filtcoef+0xaa0>)
 8008252:	f7ff fb14 	bl	800787e <qmf_even>

        return N;
 8008256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008258:	f001 bc8e 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db35")){
 800825c:	4963      	ldr	r1, [pc, #396]	; (80083ec <filtcoef+0xaa4>)
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7f7 ffee 	bl	8000240 <strcmp>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d116      	bne.n	8008298 <filtcoef+0x950>
        copy_reverse(db35, N, lp1);
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800826e:	4860      	ldr	r0, [pc, #384]	; (80083f0 <filtcoef+0xaa8>)
 8008270:	f7ff fabc 	bl	80077ec <copy_reverse>
        qmf_wrev(db35, N, hp1);
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008278:	485d      	ldr	r0, [pc, #372]	; (80083f0 <filtcoef+0xaa8>)
 800827a:	f7ff fae2 	bl	8007842 <qmf_wrev>
        copy(db35, N, lp2);
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008282:	485b      	ldr	r0, [pc, #364]	; (80083f0 <filtcoef+0xaa8>)
 8008284:	f7ff fb39 	bl	80078fa <copy>
        qmf_even(db35, N, hp2);
 8008288:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800828a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800828c:	4858      	ldr	r0, [pc, #352]	; (80083f0 <filtcoef+0xaa8>)
 800828e:	f7ff faf6 	bl	800787e <qmf_even>

        return N;
 8008292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008294:	f001 bc70 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db36")){
 8008298:	4956      	ldr	r1, [pc, #344]	; (80083f4 <filtcoef+0xaac>)
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7f7 ffd0 	bl	8000240 <strcmp>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d116      	bne.n	80082d4 <filtcoef+0x98c>
        copy_reverse(db36, N, lp1);
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082aa:	4853      	ldr	r0, [pc, #332]	; (80083f8 <filtcoef+0xab0>)
 80082ac:	f7ff fa9e 	bl	80077ec <copy_reverse>
        qmf_wrev(db36, N, hp1);
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082b4:	4850      	ldr	r0, [pc, #320]	; (80083f8 <filtcoef+0xab0>)
 80082b6:	f7ff fac4 	bl	8007842 <qmf_wrev>
        copy(db36, N, lp2);
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082be:	484e      	ldr	r0, [pc, #312]	; (80083f8 <filtcoef+0xab0>)
 80082c0:	f7ff fb1b 	bl	80078fa <copy>
        qmf_even(db36, N, hp2);
 80082c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082c8:	484b      	ldr	r0, [pc, #300]	; (80083f8 <filtcoef+0xab0>)
 80082ca:	f7ff fad8 	bl	800787e <qmf_even>

        return N;
 80082ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082d0:	f001 bc52 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db37")){
 80082d4:	4949      	ldr	r1, [pc, #292]	; (80083fc <filtcoef+0xab4>)
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f7f7 ffb2 	bl	8000240 <strcmp>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d116      	bne.n	8008310 <filtcoef+0x9c8>
        copy_reverse(db37, N, lp1);
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082e6:	4846      	ldr	r0, [pc, #280]	; (8008400 <filtcoef+0xab8>)
 80082e8:	f7ff fa80 	bl	80077ec <copy_reverse>
        qmf_wrev(db37, N, hp1);
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082f0:	4843      	ldr	r0, [pc, #268]	; (8008400 <filtcoef+0xab8>)
 80082f2:	f7ff faa6 	bl	8007842 <qmf_wrev>
        copy(db37, N, lp2);
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082fa:	4841      	ldr	r0, [pc, #260]	; (8008400 <filtcoef+0xab8>)
 80082fc:	f7ff fafd 	bl	80078fa <copy>
        qmf_even(db37, N, hp2);
 8008300:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008302:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008304:	483e      	ldr	r0, [pc, #248]	; (8008400 <filtcoef+0xab8>)
 8008306:	f7ff faba 	bl	800787e <qmf_even>

        return N;
 800830a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800830c:	f001 bc34 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db38")){
 8008310:	493c      	ldr	r1, [pc, #240]	; (8008404 <filtcoef+0xabc>)
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7f7 ff94 	bl	8000240 <strcmp>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d116      	bne.n	800834c <filtcoef+0xa04>
        copy_reverse(db38, N, lp1);
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008322:	4839      	ldr	r0, [pc, #228]	; (8008408 <filtcoef+0xac0>)
 8008324:	f7ff fa62 	bl	80077ec <copy_reverse>
        qmf_wrev(db38, N, hp1);
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800832c:	4836      	ldr	r0, [pc, #216]	; (8008408 <filtcoef+0xac0>)
 800832e:	f7ff fa88 	bl	8007842 <qmf_wrev>
        copy(db38, N, lp2);
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008336:	4834      	ldr	r0, [pc, #208]	; (8008408 <filtcoef+0xac0>)
 8008338:	f7ff fadf 	bl	80078fa <copy>
        qmf_even(db38, N, hp2);
 800833c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800833e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008340:	4831      	ldr	r0, [pc, #196]	; (8008408 <filtcoef+0xac0>)
 8008342:	f7ff fa9c 	bl	800787e <qmf_even>

        return N;
 8008346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008348:	f001 bc16 	b.w	8009b78 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior1.1")){
 800834c:	492f      	ldr	r1, [pc, #188]	; (800840c <filtcoef+0xac4>)
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f7f7 ff76 	bl	8000240 <strcmp>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d118      	bne.n	800838c <filtcoef+0xa44>
        copy_reverse(hm1_11, N, lp1);
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800835e:	482c      	ldr	r0, [pc, #176]	; (8008410 <filtcoef+0xac8>)
 8008360:	f7ff fa44 	bl	80077ec <copy_reverse>
        qmf_wrev(h1 + 4, N, hp1);
 8008364:	4b2b      	ldr	r3, [pc, #172]	; (8008414 <filtcoef+0xacc>)
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800836a:	4618      	mov	r0, r3
 800836c:	f7ff fa69 	bl	8007842 <qmf_wrev>
        copy(h1 + 4, N, lp2);
 8008370:	4b28      	ldr	r3, [pc, #160]	; (8008414 <filtcoef+0xacc>)
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008376:	4618      	mov	r0, r3
 8008378:	f7ff fabf 	bl	80078fa <copy>
        qmf_even(hm1_11, N, hp2);
 800837c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800837e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008380:	4823      	ldr	r0, [pc, #140]	; (8008410 <filtcoef+0xac8>)
 8008382:	f7ff fa7c 	bl	800787e <qmf_even>
        return N;
 8008386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008388:	f001 bbf6 	b.w	8009b78 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"bior1.3")){
 800838c:	4922      	ldr	r1, [pc, #136]	; (8008418 <filtcoef+0xad0>)
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f7f7 ff56 	bl	8000240 <strcmp>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d144      	bne.n	8008424 <filtcoef+0xadc>
        copy_reverse(hm1_13, N, lp1);
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800839e:	481f      	ldr	r0, [pc, #124]	; (800841c <filtcoef+0xad4>)
 80083a0:	f7ff fa24 	bl	80077ec <copy_reverse>
        qmf_wrev(h1 + 2, N, hp1);
 80083a4:	4b1e      	ldr	r3, [pc, #120]	; (8008420 <filtcoef+0xad8>)
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7ff fa49 	bl	8007842 <qmf_wrev>
        copy(h1 + 2, N, lp2);
 80083b0:	4b1b      	ldr	r3, [pc, #108]	; (8008420 <filtcoef+0xad8>)
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff fa9f 	bl	80078fa <copy>
        qmf_even(hm1_13, N, hp2);
 80083bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083c0:	4816      	ldr	r0, [pc, #88]	; (800841c <filtcoef+0xad4>)
 80083c2:	f7ff fa5c 	bl	800787e <qmf_even>
        return N;
 80083c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083c8:	f001 bbd6 	b.w	8009b78 <filtcoef+0x2230>
 80083cc:	0800db6c 	.word	0x0800db6c
 80083d0:	080107a8 	.word	0x080107a8
 80083d4:	0800db74 	.word	0x0800db74
 80083d8:	08010998 	.word	0x08010998
 80083dc:	0800db7c 	.word	0x0800db7c
 80083e0:	08010b98 	.word	0x08010b98
 80083e4:	0800db84 	.word	0x0800db84
 80083e8:	08010da8 	.word	0x08010da8
 80083ec:	0800db8c 	.word	0x0800db8c
 80083f0:	08010fc8 	.word	0x08010fc8
 80083f4:	0800db94 	.word	0x0800db94
 80083f8:	080111f8 	.word	0x080111f8
 80083fc:	0800db9c 	.word	0x0800db9c
 8008400:	08011438 	.word	0x08011438
 8008404:	0800dba4 	.word	0x0800dba4
 8008408:	08011688 	.word	0x08011688
 800840c:	0800d964 	.word	0x0800d964
 8008410:	080142f8 	.word	0x080142f8
 8008414:	080142c8 	.word	0x080142c8
 8008418:	0800d96c 	.word	0x0800d96c
 800841c:	08014308 	.word	0x08014308
 8008420:	080142b8 	.word	0x080142b8
	}

	else if (!strcmp(name,"bior1.5")){
 8008424:	499c      	ldr	r1, [pc, #624]	; (8008698 <filtcoef+0xd50>)
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f7f7 ff0a 	bl	8000240 <strcmp>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d116      	bne.n	8008460 <filtcoef+0xb18>
        copy_reverse(hm1_15, N, lp1);
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008436:	4899      	ldr	r0, [pc, #612]	; (800869c <filtcoef+0xd54>)
 8008438:	f7ff f9d8 	bl	80077ec <copy_reverse>
        qmf_wrev(h1, N, hp1);
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008440:	4897      	ldr	r0, [pc, #604]	; (80086a0 <filtcoef+0xd58>)
 8008442:	f7ff f9fe 	bl	8007842 <qmf_wrev>
        copy(h1, N, lp2);
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800844a:	4895      	ldr	r0, [pc, #596]	; (80086a0 <filtcoef+0xd58>)
 800844c:	f7ff fa55 	bl	80078fa <copy>
        qmf_even(hm1_15, N, hp2);
 8008450:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008452:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008454:	4891      	ldr	r0, [pc, #580]	; (800869c <filtcoef+0xd54>)
 8008456:	f7ff fa12 	bl	800787e <qmf_even>
        return N;
 800845a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800845c:	f001 bb8c 	b.w	8009b78 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"bior2.2")){
 8008460:	4990      	ldr	r1, [pc, #576]	; (80086a4 <filtcoef+0xd5c>)
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f7f7 feec 	bl	8000240 <strcmp>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d118      	bne.n	80084a0 <filtcoef+0xb58>
        copy_reverse(hm2_22, N, lp1);
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008472:	488d      	ldr	r0, [pc, #564]	; (80086a8 <filtcoef+0xd60>)
 8008474:	f7ff f9ba 	bl	80077ec <copy_reverse>
        qmf_wrev(h2 + 6, N, hp1);
 8008478:	4b8c      	ldr	r3, [pc, #560]	; (80086ac <filtcoef+0xd64>)
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800847e:	4618      	mov	r0, r3
 8008480:	f7ff f9df 	bl	8007842 <qmf_wrev>
        copy(h2 + 6, N, lp2);
 8008484:	4b89      	ldr	r3, [pc, #548]	; (80086ac <filtcoef+0xd64>)
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800848a:	4618      	mov	r0, r3
 800848c:	f7ff fa35 	bl	80078fa <copy>
        qmf_even(hm2_22, N, hp2);
 8008490:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008492:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008494:	4884      	ldr	r0, [pc, #528]	; (80086a8 <filtcoef+0xd60>)
 8008496:	f7ff f9f2 	bl	800787e <qmf_even>
        return N;
 800849a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800849c:	f001 bb6c 	b.w	8009b78 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "bior2.4")){
 80084a0:	4983      	ldr	r1, [pc, #524]	; (80086b0 <filtcoef+0xd68>)
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7f7 fecc 	bl	8000240 <strcmp>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d118      	bne.n	80084e0 <filtcoef+0xb98>
        copy_reverse(hm2_24, N, lp1);
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084b2:	4880      	ldr	r0, [pc, #512]	; (80086b4 <filtcoef+0xd6c>)
 80084b4:	f7ff f99a 	bl	80077ec <copy_reverse>
        qmf_wrev(h2 + 4, N, hp1);
 80084b8:	4b7f      	ldr	r3, [pc, #508]	; (80086b8 <filtcoef+0xd70>)
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff f9bf 	bl	8007842 <qmf_wrev>
        copy(h2 + 4, N, lp2);
 80084c4:	4b7c      	ldr	r3, [pc, #496]	; (80086b8 <filtcoef+0xd70>)
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7ff fa15 	bl	80078fa <copy>
        qmf_even(hm2_24, N, hp2);
 80084d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084d4:	4877      	ldr	r0, [pc, #476]	; (80086b4 <filtcoef+0xd6c>)
 80084d6:	f7ff f9d2 	bl	800787e <qmf_even>
        return N;
 80084da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084dc:	f001 bb4c 	b.w	8009b78 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior2.6")){
 80084e0:	4976      	ldr	r1, [pc, #472]	; (80086bc <filtcoef+0xd74>)
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f7f7 feac 	bl	8000240 <strcmp>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d118      	bne.n	8008520 <filtcoef+0xbd8>
        copy_reverse(hm2_26, N, lp1);
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084f2:	4873      	ldr	r0, [pc, #460]	; (80086c0 <filtcoef+0xd78>)
 80084f4:	f7ff f97a 	bl	80077ec <copy_reverse>
        qmf_wrev(h2 + 2, N, hp1);
 80084f8:	4b72      	ldr	r3, [pc, #456]	; (80086c4 <filtcoef+0xd7c>)
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff f99f 	bl	8007842 <qmf_wrev>
        copy(h2 + 2, N, lp2);
 8008504:	4b6f      	ldr	r3, [pc, #444]	; (80086c4 <filtcoef+0xd7c>)
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800850a:	4618      	mov	r0, r3
 800850c:	f7ff f9f5 	bl	80078fa <copy>
        qmf_even(hm2_26, N, hp2);
 8008510:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008512:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008514:	486a      	ldr	r0, [pc, #424]	; (80086c0 <filtcoef+0xd78>)
 8008516:	f7ff f9b2 	bl	800787e <qmf_even>
        return N;
 800851a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800851c:	f001 bb2c 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"bior2.8")){
 8008520:	4969      	ldr	r1, [pc, #420]	; (80086c8 <filtcoef+0xd80>)
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7f7 fe8c 	bl	8000240 <strcmp>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d116      	bne.n	800855c <filtcoef+0xc14>
        copy_reverse(hm2_28, N, lp1);
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008532:	4866      	ldr	r0, [pc, #408]	; (80086cc <filtcoef+0xd84>)
 8008534:	f7ff f95a 	bl	80077ec <copy_reverse>
        qmf_wrev(h2, N, hp1);
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800853c:	4864      	ldr	r0, [pc, #400]	; (80086d0 <filtcoef+0xd88>)
 800853e:	f7ff f980 	bl	8007842 <qmf_wrev>
        copy(h2, N, lp2);
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008546:	4862      	ldr	r0, [pc, #392]	; (80086d0 <filtcoef+0xd88>)
 8008548:	f7ff f9d7 	bl	80078fa <copy>
        qmf_even(hm2_28, N, hp2);
 800854c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800854e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008550:	485e      	ldr	r0, [pc, #376]	; (80086cc <filtcoef+0xd84>)
 8008552:	f7ff f994 	bl	800787e <qmf_even>
        return N;
 8008556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008558:	f001 bb0e 	b.w	8009b78 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"bior3.1")){
 800855c:	495d      	ldr	r1, [pc, #372]	; (80086d4 <filtcoef+0xd8c>)
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f7f7 fe6e 	bl	8000240 <strcmp>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d118      	bne.n	800859c <filtcoef+0xc54>
        copy_reverse(hm3_31, N, lp1);
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800856e:	485a      	ldr	r0, [pc, #360]	; (80086d8 <filtcoef+0xd90>)
 8008570:	f7ff f93c 	bl	80077ec <copy_reverse>
        qmf_wrev(h3 + 8, N, hp1);
 8008574:	4b59      	ldr	r3, [pc, #356]	; (80086dc <filtcoef+0xd94>)
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff f961 	bl	8007842 <qmf_wrev>
        copy(h3 + 8, N, lp2);
 8008580:	4b56      	ldr	r3, [pc, #344]	; (80086dc <filtcoef+0xd94>)
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff f9b7 	bl	80078fa <copy>
        qmf_even(hm3_31, N, hp2);
 800858c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800858e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008590:	4851      	ldr	r0, [pc, #324]	; (80086d8 <filtcoef+0xd90>)
 8008592:	f7ff f974 	bl	800787e <qmf_even>
        return N;
 8008596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008598:	f001 baee 	b.w	8009b78 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "bior3.3")){
 800859c:	4950      	ldr	r1, [pc, #320]	; (80086e0 <filtcoef+0xd98>)
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f7f7 fe4e 	bl	8000240 <strcmp>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d118      	bne.n	80085dc <filtcoef+0xc94>
        copy_reverse(hm3_33, N, lp1);
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085ae:	484d      	ldr	r0, [pc, #308]	; (80086e4 <filtcoef+0xd9c>)
 80085b0:	f7ff f91c 	bl	80077ec <copy_reverse>
        qmf_wrev(h3 + 6, N, hp1);
 80085b4:	4b4c      	ldr	r3, [pc, #304]	; (80086e8 <filtcoef+0xda0>)
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7ff f941 	bl	8007842 <qmf_wrev>
        copy(h3 + 6, N, lp2);
 80085c0:	4b49      	ldr	r3, [pc, #292]	; (80086e8 <filtcoef+0xda0>)
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff f997 	bl	80078fa <copy>
        qmf_even(hm3_33, N, hp2);
 80085cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085d0:	4844      	ldr	r0, [pc, #272]	; (80086e4 <filtcoef+0xd9c>)
 80085d2:	f7ff f954 	bl	800787e <qmf_even>
        return N;
 80085d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085d8:	f001 bace 	b.w	8009b78 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior3.5")){
 80085dc:	4943      	ldr	r1, [pc, #268]	; (80086ec <filtcoef+0xda4>)
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f7f7 fe2e 	bl	8000240 <strcmp>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d118      	bne.n	800861c <filtcoef+0xcd4>
        copy_reverse(hm3_35, N, lp1);
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085ee:	4840      	ldr	r0, [pc, #256]	; (80086f0 <filtcoef+0xda8>)
 80085f0:	f7ff f8fc 	bl	80077ec <copy_reverse>
        qmf_wrev(h3 + 4, N, hp1);
 80085f4:	4b3f      	ldr	r3, [pc, #252]	; (80086f4 <filtcoef+0xdac>)
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff f921 	bl	8007842 <qmf_wrev>
        copy(h3 + 4, N, lp2);
 8008600:	4b3c      	ldr	r3, [pc, #240]	; (80086f4 <filtcoef+0xdac>)
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff f977 	bl	80078fa <copy>
        qmf_even(hm3_35, N, hp2);
 800860c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800860e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008610:	4837      	ldr	r0, [pc, #220]	; (80086f0 <filtcoef+0xda8>)
 8008612:	f7ff f934 	bl	800787e <qmf_even>
        return N;
 8008616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008618:	f001 baae 	b.w	8009b78 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "bior3.7")){
 800861c:	4936      	ldr	r1, [pc, #216]	; (80086f8 <filtcoef+0xdb0>)
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f7f7 fe0e 	bl	8000240 <strcmp>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d118      	bne.n	800865c <filtcoef+0xd14>
        copy_reverse(hm3_37, N, lp1);
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800862e:	4833      	ldr	r0, [pc, #204]	; (80086fc <filtcoef+0xdb4>)
 8008630:	f7ff f8dc 	bl	80077ec <copy_reverse>
        qmf_wrev(h3 + 2, N, hp1);
 8008634:	4b32      	ldr	r3, [pc, #200]	; (8008700 <filtcoef+0xdb8>)
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff f901 	bl	8007842 <qmf_wrev>
        copy(h3 +2, N, lp2);
 8008640:	4b2f      	ldr	r3, [pc, #188]	; (8008700 <filtcoef+0xdb8>)
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff f957 	bl	80078fa <copy>
        qmf_even(hm3_37, N, hp2);
 800864c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800864e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008650:	482a      	ldr	r0, [pc, #168]	; (80086fc <filtcoef+0xdb4>)
 8008652:	f7ff f914 	bl	800787e <qmf_even>
        return N;
 8008656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008658:	f001 ba8e 	b.w	8009b78 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior3.9")){
 800865c:	4929      	ldr	r1, [pc, #164]	; (8008704 <filtcoef+0xdbc>)
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7f7 fdee 	bl	8000240 <strcmp>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d152      	bne.n	8008710 <filtcoef+0xdc8>
        copy_reverse(hm3_39, N, lp1);
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800866e:	4826      	ldr	r0, [pc, #152]	; (8008708 <filtcoef+0xdc0>)
 8008670:	f7ff f8bc 	bl	80077ec <copy_reverse>
        qmf_wrev(h3, N, hp1);
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008678:	4824      	ldr	r0, [pc, #144]	; (800870c <filtcoef+0xdc4>)
 800867a:	f7ff f8e2 	bl	8007842 <qmf_wrev>
        copy(h3, N, lp2);
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008682:	4822      	ldr	r0, [pc, #136]	; (800870c <filtcoef+0xdc4>)
 8008684:	f7ff f939 	bl	80078fa <copy>
        qmf_even(hm3_39, N, hp2);
 8008688:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800868a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800868c:	481e      	ldr	r0, [pc, #120]	; (8008708 <filtcoef+0xdc0>)
 800868e:	f7ff f8f6 	bl	800787e <qmf_even>
        return N;
 8008692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008694:	f001 ba70 	b.w	8009b78 <filtcoef+0x2230>
 8008698:	0800d974 	.word	0x0800d974
 800869c:	08014338 	.word	0x08014338
 80086a0:	080142a8 	.word	0x080142a8
 80086a4:	0800d97c 	.word	0x0800d97c
 80086a8:	08014418 	.word	0x08014418
 80086ac:	080143b8 	.word	0x080143b8
 80086b0:	0800d984 	.word	0x0800d984
 80086b4:	08014448 	.word	0x08014448
 80086b8:	080143a8 	.word	0x080143a8
 80086bc:	0800d98c 	.word	0x0800d98c
 80086c0:	08014498 	.word	0x08014498
 80086c4:	08014398 	.word	0x08014398
 80086c8:	0800d994 	.word	0x0800d994
 80086cc:	08014508 	.word	0x08014508
 80086d0:	08014388 	.word	0x08014388
 80086d4:	0800d99c 	.word	0x0800d99c
 80086d8:	08014638 	.word	0x08014638
 80086dc:	080145d8 	.word	0x080145d8
 80086e0:	0800d9a4 	.word	0x0800d9a4
 80086e4:	08014658 	.word	0x08014658
 80086e8:	080145c8 	.word	0x080145c8
 80086ec:	0800d9ac 	.word	0x0800d9ac
 80086f0:	08014698 	.word	0x08014698
 80086f4:	080145b8 	.word	0x080145b8
 80086f8:	0800d9b4 	.word	0x0800d9b4
 80086fc:	080146f8 	.word	0x080146f8
 8008700:	080145a8 	.word	0x080145a8
 8008704:	0800d9bc 	.word	0x0800d9bc
 8008708:	08014778 	.word	0x08014778
 800870c:	08014598 	.word	0x08014598
	}
	else if (!strcmp(name,"bior4.4")){
 8008710:	499a      	ldr	r1, [pc, #616]	; (800897c <filtcoef+0x1034>)
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f7f7 fd94 	bl	8000240 <strcmp>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d116      	bne.n	800874c <filtcoef+0xe04>
        copy_reverse(hm4_44, N, lp1);
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008722:	4897      	ldr	r0, [pc, #604]	; (8008980 <filtcoef+0x1038>)
 8008724:	f7ff f862 	bl	80077ec <copy_reverse>
        qmf_wrev(h4, N, hp1);
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800872c:	4895      	ldr	r0, [pc, #596]	; (8008984 <filtcoef+0x103c>)
 800872e:	f7ff f888 	bl	8007842 <qmf_wrev>
        copy(h4, N, lp2);
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008736:	4893      	ldr	r0, [pc, #588]	; (8008984 <filtcoef+0x103c>)
 8008738:	f7ff f8df 	bl	80078fa <copy>
        qmf_even(hm4_44, N, hp2);
 800873c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800873e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008740:	488f      	ldr	r0, [pc, #572]	; (8008980 <filtcoef+0x1038>)
 8008742:	f7ff f89c 	bl	800787e <qmf_even>
        return N;
 8008746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008748:	f001 ba16 	b.w	8009b78 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "bior5.5")){
 800874c:	498e      	ldr	r1, [pc, #568]	; (8008988 <filtcoef+0x1040>)
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f7f7 fd76 	bl	8000240 <strcmp>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d116      	bne.n	8008788 <filtcoef+0xe40>
        copy_reverse(hm5_55, N, lp1);
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800875e:	488b      	ldr	r0, [pc, #556]	; (800898c <filtcoef+0x1044>)
 8008760:	f7ff f844 	bl	80077ec <copy_reverse>
        qmf_wrev(h5, N, hp1);
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008768:	4889      	ldr	r0, [pc, #548]	; (8008990 <filtcoef+0x1048>)
 800876a:	f7ff f86a 	bl	8007842 <qmf_wrev>
        copy(h5, N, lp2);
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008772:	4887      	ldr	r0, [pc, #540]	; (8008990 <filtcoef+0x1048>)
 8008774:	f7ff f8c1 	bl	80078fa <copy>
        qmf_even(hm5_55, N, hp2);
 8008778:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800877a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800877c:	4883      	ldr	r0, [pc, #524]	; (800898c <filtcoef+0x1044>)
 800877e:	f7ff f87e 	bl	800787e <qmf_even>
        return N;
 8008782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008784:	f001 b9f8 	b.w	8009b78 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior6.8")){
 8008788:	4982      	ldr	r1, [pc, #520]	; (8008994 <filtcoef+0x104c>)
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f7f7 fd58 	bl	8000240 <strcmp>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d116      	bne.n	80087c4 <filtcoef+0xe7c>
        copy_reverse(hm6_68, N, lp1);
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800879a:	487f      	ldr	r0, [pc, #508]	; (8008998 <filtcoef+0x1050>)
 800879c:	f7ff f826 	bl	80077ec <copy_reverse>
        qmf_wrev(h6, N, hp1);
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087a4:	487d      	ldr	r0, [pc, #500]	; (800899c <filtcoef+0x1054>)
 80087a6:	f7ff f84c 	bl	8007842 <qmf_wrev>
        copy(h6, N, lp2);
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087ae:	487b      	ldr	r0, [pc, #492]	; (800899c <filtcoef+0x1054>)
 80087b0:	f7ff f8a3 	bl	80078fa <copy>
        qmf_even(hm6_68, N, hp2);
 80087b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087b8:	4877      	ldr	r0, [pc, #476]	; (8008998 <filtcoef+0x1050>)
 80087ba:	f7ff f860 	bl	800787e <qmf_even>
        return N;
 80087be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087c0:	f001 b9da 	b.w	8009b78 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "rbior1.1")){
 80087c4:	4976      	ldr	r1, [pc, #472]	; (80089a0 <filtcoef+0x1058>)
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f7f7 fd3a 	bl	8000240 <strcmp>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d118      	bne.n	8008804 <filtcoef+0xebc>
        copy_reverse(h1 + 4, N, lp1);
 80087d2:	4b74      	ldr	r3, [pc, #464]	; (80089a4 <filtcoef+0x105c>)
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff f807 	bl	80077ec <copy_reverse>
        qmf_wrev(hm1_11, N, hp1);
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087e2:	4871      	ldr	r0, [pc, #452]	; (80089a8 <filtcoef+0x1060>)
 80087e4:	f7ff f82d 	bl	8007842 <qmf_wrev>
        copy(hm1_11, N, lp2);
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087ec:	486e      	ldr	r0, [pc, #440]	; (80089a8 <filtcoef+0x1060>)
 80087ee:	f7ff f884 	bl	80078fa <copy>
        qmf_even(h1 + 4, N, hp2);
 80087f2:	4b6c      	ldr	r3, [pc, #432]	; (80089a4 <filtcoef+0x105c>)
 80087f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7ff f840 	bl	800787e <qmf_even>
        return N;
 80087fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008800:	f001 b9ba 	b.w	8009b78 <filtcoef+0x2230>
    }

    else if (!strcmp(name, "rbior1.3")){
 8008804:	4969      	ldr	r1, [pc, #420]	; (80089ac <filtcoef+0x1064>)
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7f7 fd1a 	bl	8000240 <strcmp>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d118      	bne.n	8008844 <filtcoef+0xefc>
        copy_reverse(h1 + 2, N, lp1);
 8008812:	4b67      	ldr	r3, [pc, #412]	; (80089b0 <filtcoef+0x1068>)
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008818:	4618      	mov	r0, r3
 800881a:	f7fe ffe7 	bl	80077ec <copy_reverse>
        qmf_wrev(hm1_13, N, hp1);
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008822:	4864      	ldr	r0, [pc, #400]	; (80089b4 <filtcoef+0x106c>)
 8008824:	f7ff f80d 	bl	8007842 <qmf_wrev>
        copy(hm1_13, N, lp2);
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800882c:	4861      	ldr	r0, [pc, #388]	; (80089b4 <filtcoef+0x106c>)
 800882e:	f7ff f864 	bl	80078fa <copy>
        qmf_even(h1 + 2, N, hp2);
 8008832:	4b5f      	ldr	r3, [pc, #380]	; (80089b0 <filtcoef+0x1068>)
 8008834:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008838:	4618      	mov	r0, r3
 800883a:	f7ff f820 	bl	800787e <qmf_even>
        return N;
 800883e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008840:	f001 b99a 	b.w	8009b78 <filtcoef+0x2230>
    }

    else if (!strcmp(name, "rbior1.5")){
 8008844:	495c      	ldr	r1, [pc, #368]	; (80089b8 <filtcoef+0x1070>)
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7f7 fcfa 	bl	8000240 <strcmp>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d116      	bne.n	8008880 <filtcoef+0xf38>
        copy_reverse(h1, N, lp1);
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008856:	4859      	ldr	r0, [pc, #356]	; (80089bc <filtcoef+0x1074>)
 8008858:	f7fe ffc8 	bl	80077ec <copy_reverse>
        qmf_wrev(hm1_15, N, hp1);
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008860:	4857      	ldr	r0, [pc, #348]	; (80089c0 <filtcoef+0x1078>)
 8008862:	f7fe ffee 	bl	8007842 <qmf_wrev>
        copy(hm1_15, N, lp2);
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800886a:	4855      	ldr	r0, [pc, #340]	; (80089c0 <filtcoef+0x1078>)
 800886c:	f7ff f845 	bl	80078fa <copy>
        qmf_even(h1, N, hp2);
 8008870:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008872:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008874:	4851      	ldr	r0, [pc, #324]	; (80089bc <filtcoef+0x1074>)
 8008876:	f7ff f802 	bl	800787e <qmf_even>
        return N;
 800887a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800887c:	f001 b97c 	b.w	8009b78 <filtcoef+0x2230>
    }

    else if (!strcmp(name, "rbior2.2")){
 8008880:	4950      	ldr	r1, [pc, #320]	; (80089c4 <filtcoef+0x107c>)
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f7f7 fcdc 	bl	8000240 <strcmp>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d118      	bne.n	80088c0 <filtcoef+0xf78>
        copy_reverse(h2 + 6, N, lp1);
 800888e:	4b4e      	ldr	r3, [pc, #312]	; (80089c8 <filtcoef+0x1080>)
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008894:	4618      	mov	r0, r3
 8008896:	f7fe ffa9 	bl	80077ec <copy_reverse>
        qmf_wrev(hm2_22, N, hp1);
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800889e:	484b      	ldr	r0, [pc, #300]	; (80089cc <filtcoef+0x1084>)
 80088a0:	f7fe ffcf 	bl	8007842 <qmf_wrev>
        copy(hm2_22, N, lp2);
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088a8:	4848      	ldr	r0, [pc, #288]	; (80089cc <filtcoef+0x1084>)
 80088aa:	f7ff f826 	bl	80078fa <copy>
        qmf_even(h2 + 6, N, hp2);
 80088ae:	4b46      	ldr	r3, [pc, #280]	; (80089c8 <filtcoef+0x1080>)
 80088b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe ffe2 	bl	800787e <qmf_even>
        return N;
 80088ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088bc:	f001 b95c 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior2.4")){
 80088c0:	4943      	ldr	r1, [pc, #268]	; (80089d0 <filtcoef+0x1088>)
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f7f7 fcbc 	bl	8000240 <strcmp>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d118      	bne.n	8008900 <filtcoef+0xfb8>
        copy_reverse(h2 + 4, N, lp1);
 80088ce:	4b41      	ldr	r3, [pc, #260]	; (80089d4 <filtcoef+0x108c>)
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe ff89 	bl	80077ec <copy_reverse>
        qmf_wrev(hm2_24, N, hp1);
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088de:	483e      	ldr	r0, [pc, #248]	; (80089d8 <filtcoef+0x1090>)
 80088e0:	f7fe ffaf 	bl	8007842 <qmf_wrev>
        copy(hm2_24, N, lp2);
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088e8:	483b      	ldr	r0, [pc, #236]	; (80089d8 <filtcoef+0x1090>)
 80088ea:	f7ff f806 	bl	80078fa <copy>
        qmf_even(h2 + 4, N, hp2);
 80088ee:	4b39      	ldr	r3, [pc, #228]	; (80089d4 <filtcoef+0x108c>)
 80088f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fe ffc2 	bl	800787e <qmf_even>
        return N;
 80088fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088fc:	f001 b93c 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior2.6")){
 8008900:	4936      	ldr	r1, [pc, #216]	; (80089dc <filtcoef+0x1094>)
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7f7 fc9c 	bl	8000240 <strcmp>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d118      	bne.n	8008940 <filtcoef+0xff8>
        copy_reverse(h2 + 2, N, lp1);
 800890e:	4b34      	ldr	r3, [pc, #208]	; (80089e0 <filtcoef+0x1098>)
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe ff69 	bl	80077ec <copy_reverse>
        qmf_wrev(hm2_26, N, hp1);
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800891e:	4831      	ldr	r0, [pc, #196]	; (80089e4 <filtcoef+0x109c>)
 8008920:	f7fe ff8f 	bl	8007842 <qmf_wrev>
        copy(hm2_26, N, lp2);
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008928:	482e      	ldr	r0, [pc, #184]	; (80089e4 <filtcoef+0x109c>)
 800892a:	f7fe ffe6 	bl	80078fa <copy>
        qmf_even(h2 + 2, N, hp2);
 800892e:	4b2c      	ldr	r3, [pc, #176]	; (80089e0 <filtcoef+0x1098>)
 8008930:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008932:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008934:	4618      	mov	r0, r3
 8008936:	f7fe ffa2 	bl	800787e <qmf_even>
        return N;
 800893a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800893c:	f001 b91c 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior2.8")){
 8008940:	4929      	ldr	r1, [pc, #164]	; (80089e8 <filtcoef+0x10a0>)
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f7f7 fc7c 	bl	8000240 <strcmp>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d152      	bne.n	80089f4 <filtcoef+0x10ac>
        copy_reverse(h2, N, lp1);
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008952:	4826      	ldr	r0, [pc, #152]	; (80089ec <filtcoef+0x10a4>)
 8008954:	f7fe ff4a 	bl	80077ec <copy_reverse>
        qmf_wrev(hm2_28, N, hp1);
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800895c:	4824      	ldr	r0, [pc, #144]	; (80089f0 <filtcoef+0x10a8>)
 800895e:	f7fe ff70 	bl	8007842 <qmf_wrev>
        copy(hm2_28, N, lp2);
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008966:	4822      	ldr	r0, [pc, #136]	; (80089f0 <filtcoef+0x10a8>)
 8008968:	f7fe ffc7 	bl	80078fa <copy>
        qmf_even(h2, N, hp2);
 800896c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800896e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008970:	481e      	ldr	r0, [pc, #120]	; (80089ec <filtcoef+0x10a4>)
 8008972:	f7fe ff84 	bl	800787e <qmf_even>
        return N;
 8008976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008978:	f001 b8fe 	b.w	8009b78 <filtcoef+0x2230>
 800897c:	0800d9c4 	.word	0x0800d9c4
 8008980:	08014868 	.word	0x08014868
 8008984:	08014818 	.word	0x08014818
 8008988:	0800d9cc 	.word	0x0800d9cc
 800898c:	08014918 	.word	0x08014918
 8008990:	080148b8 	.word	0x080148b8
 8008994:	0800d9d4 	.word	0x0800d9d4
 8008998:	08014a08 	.word	0x08014a08
 800899c:	08014978 	.word	0x08014978
 80089a0:	0800d9dc 	.word	0x0800d9dc
 80089a4:	080142c8 	.word	0x080142c8
 80089a8:	080142f8 	.word	0x080142f8
 80089ac:	0800d9e8 	.word	0x0800d9e8
 80089b0:	080142b8 	.word	0x080142b8
 80089b4:	08014308 	.word	0x08014308
 80089b8:	0800d9f4 	.word	0x0800d9f4
 80089bc:	080142a8 	.word	0x080142a8
 80089c0:	08014338 	.word	0x08014338
 80089c4:	0800da00 	.word	0x0800da00
 80089c8:	080143b8 	.word	0x080143b8
 80089cc:	08014418 	.word	0x08014418
 80089d0:	0800da0c 	.word	0x0800da0c
 80089d4:	080143a8 	.word	0x080143a8
 80089d8:	08014448 	.word	0x08014448
 80089dc:	0800da18 	.word	0x0800da18
 80089e0:	08014398 	.word	0x08014398
 80089e4:	08014498 	.word	0x08014498
 80089e8:	0800da24 	.word	0x0800da24
 80089ec:	08014388 	.word	0x08014388
 80089f0:	08014508 	.word	0x08014508
    }

    else if (!strcmp(name, "rbior3.1")){
 80089f4:	49a2      	ldr	r1, [pc, #648]	; (8008c80 <filtcoef+0x1338>)
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f7f7 fc22 	bl	8000240 <strcmp>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d118      	bne.n	8008a34 <filtcoef+0x10ec>
        copy_reverse(h3 + 8, N, lp1);
 8008a02:	4ba0      	ldr	r3, [pc, #640]	; (8008c84 <filtcoef+0x133c>)
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fe feef 	bl	80077ec <copy_reverse>
        qmf_wrev(hm3_31, N, hp1);
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a12:	489d      	ldr	r0, [pc, #628]	; (8008c88 <filtcoef+0x1340>)
 8008a14:	f7fe ff15 	bl	8007842 <qmf_wrev>
        copy(hm3_31, N, lp2);
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a1c:	489a      	ldr	r0, [pc, #616]	; (8008c88 <filtcoef+0x1340>)
 8008a1e:	f7fe ff6c 	bl	80078fa <copy>
        qmf_even(h3 + 8, N, hp2);
 8008a22:	4b98      	ldr	r3, [pc, #608]	; (8008c84 <filtcoef+0x133c>)
 8008a24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fe ff28 	bl	800787e <qmf_even>
        return N;
 8008a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a30:	f001 b8a2 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior3.3")){
 8008a34:	4995      	ldr	r1, [pc, #596]	; (8008c8c <filtcoef+0x1344>)
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f7f7 fc02 	bl	8000240 <strcmp>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d118      	bne.n	8008a74 <filtcoef+0x112c>
        copy_reverse(h3 + 6, N, lp1);
 8008a42:	4b93      	ldr	r3, [pc, #588]	; (8008c90 <filtcoef+0x1348>)
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fe fecf 	bl	80077ec <copy_reverse>
        qmf_wrev(hm3_33, N, hp1);
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a52:	4890      	ldr	r0, [pc, #576]	; (8008c94 <filtcoef+0x134c>)
 8008a54:	f7fe fef5 	bl	8007842 <qmf_wrev>
        copy(hm3_33, N, lp2);
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a5c:	488d      	ldr	r0, [pc, #564]	; (8008c94 <filtcoef+0x134c>)
 8008a5e:	f7fe ff4c 	bl	80078fa <copy>
        qmf_even(h3 + 6, N, hp2);
 8008a62:	4b8b      	ldr	r3, [pc, #556]	; (8008c90 <filtcoef+0x1348>)
 8008a64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe ff08 	bl	800787e <qmf_even>
        return N;
 8008a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a70:	f001 b882 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior3.5")){
 8008a74:	4988      	ldr	r1, [pc, #544]	; (8008c98 <filtcoef+0x1350>)
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f7f7 fbe2 	bl	8000240 <strcmp>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d118      	bne.n	8008ab4 <filtcoef+0x116c>
        copy_reverse(h3 + 4, N, lp1);
 8008a82:	4b86      	ldr	r3, [pc, #536]	; (8008c9c <filtcoef+0x1354>)
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fe feaf 	bl	80077ec <copy_reverse>
        qmf_wrev(hm3_35, N, hp1);
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a92:	4883      	ldr	r0, [pc, #524]	; (8008ca0 <filtcoef+0x1358>)
 8008a94:	f7fe fed5 	bl	8007842 <qmf_wrev>
        copy(hm3_35, N, lp2);
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a9c:	4880      	ldr	r0, [pc, #512]	; (8008ca0 <filtcoef+0x1358>)
 8008a9e:	f7fe ff2c 	bl	80078fa <copy>
        qmf_even(h3 + 4, N, hp2);
 8008aa2:	4b7e      	ldr	r3, [pc, #504]	; (8008c9c <filtcoef+0x1354>)
 8008aa4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008aa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fe fee8 	bl	800787e <qmf_even>
        return N;
 8008aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ab0:	f001 b862 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior3.7")){
 8008ab4:	497b      	ldr	r1, [pc, #492]	; (8008ca4 <filtcoef+0x135c>)
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f7f7 fbc2 	bl	8000240 <strcmp>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d118      	bne.n	8008af4 <filtcoef+0x11ac>
        copy_reverse(h3 + 2, N, lp1);
 8008ac2:	4b79      	ldr	r3, [pc, #484]	; (8008ca8 <filtcoef+0x1360>)
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fe fe8f 	bl	80077ec <copy_reverse>
        qmf_wrev(hm3_37, N, hp1);
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ad2:	4876      	ldr	r0, [pc, #472]	; (8008cac <filtcoef+0x1364>)
 8008ad4:	f7fe feb5 	bl	8007842 <qmf_wrev>
        copy(hm3_37, N, lp2);
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008adc:	4873      	ldr	r0, [pc, #460]	; (8008cac <filtcoef+0x1364>)
 8008ade:	f7fe ff0c 	bl	80078fa <copy>
        qmf_even(h3 + 2, N, hp2);
 8008ae2:	4b71      	ldr	r3, [pc, #452]	; (8008ca8 <filtcoef+0x1360>)
 8008ae4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ae6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe fec8 	bl	800787e <qmf_even>
        return N;
 8008aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008af0:	f001 b842 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior3.9")){
 8008af4:	496e      	ldr	r1, [pc, #440]	; (8008cb0 <filtcoef+0x1368>)
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f7f7 fba2 	bl	8000240 <strcmp>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d116      	bne.n	8008b30 <filtcoef+0x11e8>
        copy_reverse(h3, N, lp1);
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b06:	486b      	ldr	r0, [pc, #428]	; (8008cb4 <filtcoef+0x136c>)
 8008b08:	f7fe fe70 	bl	80077ec <copy_reverse>
        qmf_wrev(hm3_39, N, hp1);
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b10:	4869      	ldr	r0, [pc, #420]	; (8008cb8 <filtcoef+0x1370>)
 8008b12:	f7fe fe96 	bl	8007842 <qmf_wrev>
        copy(hm3_39, N, lp2);
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b1a:	4867      	ldr	r0, [pc, #412]	; (8008cb8 <filtcoef+0x1370>)
 8008b1c:	f7fe feed 	bl	80078fa <copy>
        qmf_even(h3, N, hp2);
 8008b20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b24:	4863      	ldr	r0, [pc, #396]	; (8008cb4 <filtcoef+0x136c>)
 8008b26:	f7fe feaa 	bl	800787e <qmf_even>
        return N;
 8008b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b2c:	f001 b824 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior4.4")){
 8008b30:	4962      	ldr	r1, [pc, #392]	; (8008cbc <filtcoef+0x1374>)
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f7f7 fb84 	bl	8000240 <strcmp>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d116      	bne.n	8008b6c <filtcoef+0x1224>
        copy_reverse(h4, N, lp1);
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b42:	485f      	ldr	r0, [pc, #380]	; (8008cc0 <filtcoef+0x1378>)
 8008b44:	f7fe fe52 	bl	80077ec <copy_reverse>
        qmf_wrev(hm4_44, N, hp1);
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b4c:	485d      	ldr	r0, [pc, #372]	; (8008cc4 <filtcoef+0x137c>)
 8008b4e:	f7fe fe78 	bl	8007842 <qmf_wrev>
        copy(hm4_44, N, lp2);
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b56:	485b      	ldr	r0, [pc, #364]	; (8008cc4 <filtcoef+0x137c>)
 8008b58:	f7fe fecf 	bl	80078fa <copy>
        qmf_even(h4, N, hp2);
 8008b5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b60:	4857      	ldr	r0, [pc, #348]	; (8008cc0 <filtcoef+0x1378>)
 8008b62:	f7fe fe8c 	bl	800787e <qmf_even>
        return N;
 8008b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b68:	f001 b806 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior5.5")){
 8008b6c:	4956      	ldr	r1, [pc, #344]	; (8008cc8 <filtcoef+0x1380>)
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7f7 fb66 	bl	8000240 <strcmp>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d116      	bne.n	8008ba8 <filtcoef+0x1260>
        copy_reverse(h5, N, lp1);
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b7e:	4853      	ldr	r0, [pc, #332]	; (8008ccc <filtcoef+0x1384>)
 8008b80:	f7fe fe34 	bl	80077ec <copy_reverse>
        qmf_wrev(hm5_55, N, hp1);
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b88:	4851      	ldr	r0, [pc, #324]	; (8008cd0 <filtcoef+0x1388>)
 8008b8a:	f7fe fe5a 	bl	8007842 <qmf_wrev>
        copy(hm5_55, N, lp2);
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b92:	484f      	ldr	r0, [pc, #316]	; (8008cd0 <filtcoef+0x1388>)
 8008b94:	f7fe feb1 	bl	80078fa <copy>
        qmf_even(h5, N, hp2);
 8008b98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b9c:	484b      	ldr	r0, [pc, #300]	; (8008ccc <filtcoef+0x1384>)
 8008b9e:	f7fe fe6e 	bl	800787e <qmf_even>
        return N;
 8008ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ba4:	f000 bfe8 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior6.8")){
 8008ba8:	494a      	ldr	r1, [pc, #296]	; (8008cd4 <filtcoef+0x138c>)
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f7f7 fb48 	bl	8000240 <strcmp>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d116      	bne.n	8008be4 <filtcoef+0x129c>
        copy_reverse(h6, N, lp1);
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bba:	4847      	ldr	r0, [pc, #284]	; (8008cd8 <filtcoef+0x1390>)
 8008bbc:	f7fe fe16 	bl	80077ec <copy_reverse>
        qmf_wrev(hm6_68, N, hp1);
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bc4:	4845      	ldr	r0, [pc, #276]	; (8008cdc <filtcoef+0x1394>)
 8008bc6:	f7fe fe3c 	bl	8007842 <qmf_wrev>
        copy(hm6_68, N, lp2);
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bce:	4843      	ldr	r0, [pc, #268]	; (8008cdc <filtcoef+0x1394>)
 8008bd0:	f7fe fe93 	bl	80078fa <copy>
        qmf_even(h6, N, hp2);
 8008bd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bd8:	483f      	ldr	r0, [pc, #252]	; (8008cd8 <filtcoef+0x1390>)
 8008bda:	f7fe fe50 	bl	800787e <qmf_even>
        return N;
 8008bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008be0:	f000 bfca 	b.w	8009b78 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"coif1")){
 8008be4:	493e      	ldr	r1, [pc, #248]	; (8008ce0 <filtcoef+0x1398>)
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f7f7 fb2a 	bl	8000240 <strcmp>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d17a      	bne.n	8008ce8 <filtcoef+0x13a0>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8008bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f002 f8b4 	bl	800ad64 <malloc>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	617b      	str	r3, [r7, #20]

        copy(coif1, N, coeffTemp);
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c04:	4837      	ldr	r0, [pc, #220]	; (8008ce4 <filtcoef+0x139c>)
 8008c06:	f7fe fe78 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c0e:	e012      	b.n	8008c36 <filtcoef+0x12ee>
            coeffTemp[i] *= M_SQRT2;
 8008c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	4413      	add	r3, r2
 8008c18:	ed93 7b00 	vldr	d7, [r3]
 8008c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	4413      	add	r3, r2
 8008c24:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8008c78 <filtcoef+0x1330>
 8008c28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c2c:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8008c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c32:	3301      	adds	r3, #1
 8008c34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	dbe8      	blt.n	8008c10 <filtcoef+0x12c8>
        }

        copy_reverse(coeffTemp, N, lp1);
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c42:	6978      	ldr	r0, [r7, #20]
 8008c44:	f7fe fdd2 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c4c:	6978      	ldr	r0, [r7, #20]
 8008c4e:	f7fe fdf8 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c56:	6978      	ldr	r0, [r7, #20]
 8008c58:	f7fe fe4f 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 8008c5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c60:	6978      	ldr	r0, [r7, #20]
 8008c62:	f7fe fe0c 	bl	800787e <qmf_even>
        free(coeffTemp);
 8008c66:	6978      	ldr	r0, [r7, #20]
 8008c68:	f002 f884 	bl	800ad74 <free>

        return N;
 8008c6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c6e:	f000 bf83 	b.w	8009b78 <filtcoef+0x2230>
 8008c72:	bf00      	nop
 8008c74:	f3af 8000 	nop.w
 8008c78:	667f3bcd 	.word	0x667f3bcd
 8008c7c:	3ff6a09e 	.word	0x3ff6a09e
 8008c80:	0800da30 	.word	0x0800da30
 8008c84:	080145d8 	.word	0x080145d8
 8008c88:	08014638 	.word	0x08014638
 8008c8c:	0800da3c 	.word	0x0800da3c
 8008c90:	080145c8 	.word	0x080145c8
 8008c94:	08014658 	.word	0x08014658
 8008c98:	0800da48 	.word	0x0800da48
 8008c9c:	080145b8 	.word	0x080145b8
 8008ca0:	08014698 	.word	0x08014698
 8008ca4:	0800da54 	.word	0x0800da54
 8008ca8:	080145a8 	.word	0x080145a8
 8008cac:	080146f8 	.word	0x080146f8
 8008cb0:	0800da60 	.word	0x0800da60
 8008cb4:	08014598 	.word	0x08014598
 8008cb8:	08014778 	.word	0x08014778
 8008cbc:	0800da6c 	.word	0x0800da6c
 8008cc0:	08014818 	.word	0x08014818
 8008cc4:	08014868 	.word	0x08014868
 8008cc8:	0800da78 	.word	0x0800da78
 8008ccc:	080148b8 	.word	0x080148b8
 8008cd0:	08014918 	.word	0x08014918
 8008cd4:	0800da84 	.word	0x0800da84
 8008cd8:	08014978 	.word	0x08014978
 8008cdc:	08014a08 	.word	0x08014a08
 8008ce0:	0800dbac 	.word	0x0800dbac
 8008ce4:	080118e8 	.word	0x080118e8
	}
	else if (!strcmp(name,"coif2")){
 8008ce8:	499b      	ldr	r1, [pc, #620]	; (8008f58 <filtcoef+0x1610>)
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f7f7 faa8 	bl	8000240 <strcmp>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d13f      	bne.n	8008d76 <filtcoef+0x142e>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8008cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cf8:	00db      	lsls	r3, r3, #3
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f002 f832 	bl	800ad64 <malloc>
 8008d00:	4603      	mov	r3, r0
 8008d02:	61bb      	str	r3, [r7, #24]

        copy(coif2, N, coeffTemp);
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d08:	4894      	ldr	r0, [pc, #592]	; (8008f5c <filtcoef+0x1614>)
 8008d0a:	f7fe fdf6 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 8008d0e:	2300      	movs	r3, #0
 8008d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d12:	e012      	b.n	8008d3a <filtcoef+0x13f2>
            coeffTemp[i] *= M_SQRT2;
 8008d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	69ba      	ldr	r2, [r7, #24]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	ed93 7b00 	vldr	d7, [r3]
 8008d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	4413      	add	r3, r2
 8008d28:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8008f50 <filtcoef+0x1608>
 8008d2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d30:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8008d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d36:	3301      	adds	r3, #1
 8008d38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	dbe8      	blt.n	8008d14 <filtcoef+0x13cc>
        }

        copy_reverse(coeffTemp, N, lp1);
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d46:	69b8      	ldr	r0, [r7, #24]
 8008d48:	f7fe fd50 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d50:	69b8      	ldr	r0, [r7, #24]
 8008d52:	f7fe fd76 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d5a:	69b8      	ldr	r0, [r7, #24]
 8008d5c:	f7fe fdcd 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 8008d60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d64:	69b8      	ldr	r0, [r7, #24]
 8008d66:	f7fe fd8a 	bl	800787e <qmf_even>
        free(coeffTemp);
 8008d6a:	69b8      	ldr	r0, [r7, #24]
 8008d6c:	f002 f802 	bl	800ad74 <free>

        return N;
 8008d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d72:	f000 bf01 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"coif3")){
 8008d76:	497a      	ldr	r1, [pc, #488]	; (8008f60 <filtcoef+0x1618>)
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f7f7 fa61 	bl	8000240 <strcmp>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d13f      	bne.n	8008e04 <filtcoef+0x14bc>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8008d84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d86:	00db      	lsls	r3, r3, #3
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f001 ffeb 	bl	800ad64 <malloc>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	61fb      	str	r3, [r7, #28]

        copy(coif3, N, coeffTemp);
 8008d92:	69fa      	ldr	r2, [r7, #28]
 8008d94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d96:	4873      	ldr	r0, [pc, #460]	; (8008f64 <filtcoef+0x161c>)
 8008d98:	f7fe fdaf 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008da0:	e012      	b.n	8008dc8 <filtcoef+0x1480>
            coeffTemp[i] *= M_SQRT2;
 8008da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008da4:	00db      	lsls	r3, r3, #3
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	4413      	add	r3, r2
 8008daa:	ed93 7b00 	vldr	d7, [r3]
 8008dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	69fa      	ldr	r2, [r7, #28]
 8008db4:	4413      	add	r3, r2
 8008db6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008f50 <filtcoef+0x1608>
 8008dba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008dbe:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8008dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	dbe8      	blt.n	8008da2 <filtcoef+0x145a>
        }

        copy_reverse(coeffTemp, N, lp1);
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dd4:	69f8      	ldr	r0, [r7, #28]
 8008dd6:	f7fe fd09 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dde:	69f8      	ldr	r0, [r7, #28]
 8008de0:	f7fe fd2f 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008de8:	69f8      	ldr	r0, [r7, #28]
 8008dea:	f7fe fd86 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 8008dee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008df0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008df2:	69f8      	ldr	r0, [r7, #28]
 8008df4:	f7fe fd43 	bl	800787e <qmf_even>
        free(coeffTemp);
 8008df8:	69f8      	ldr	r0, [r7, #28]
 8008dfa:	f001 ffbb 	bl	800ad74 <free>

        return N;
 8008dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e00:	f000 beba 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"coif4")){
 8008e04:	4958      	ldr	r1, [pc, #352]	; (8008f68 <filtcoef+0x1620>)
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f7f7 fa1a 	bl	8000240 <strcmp>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d13f      	bne.n	8008e92 <filtcoef+0x154a>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8008e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e14:	00db      	lsls	r3, r3, #3
 8008e16:	4618      	mov	r0, r3
 8008e18:	f001 ffa4 	bl	800ad64 <malloc>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	623b      	str	r3, [r7, #32]

        copy(coif4, N, coeffTemp);
 8008e20:	6a3a      	ldr	r2, [r7, #32]
 8008e22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e24:	4851      	ldr	r0, [pc, #324]	; (8008f6c <filtcoef+0x1624>)
 8008e26:	f7fe fd68 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e2e:	e012      	b.n	8008e56 <filtcoef+0x150e>
            coeffTemp[i] *= M_SQRT2;
 8008e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e32:	00db      	lsls	r3, r3, #3
 8008e34:	6a3a      	ldr	r2, [r7, #32]
 8008e36:	4413      	add	r3, r2
 8008e38:	ed93 7b00 	vldr	d7, [r3]
 8008e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	6a3a      	ldr	r2, [r7, #32]
 8008e42:	4413      	add	r3, r2
 8008e44:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8008f50 <filtcoef+0x1608>
 8008e48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e4c:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8008e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e52:	3301      	adds	r3, #1
 8008e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	dbe8      	blt.n	8008e30 <filtcoef+0x14e8>
        }

        copy_reverse(coeffTemp, N, lp1);
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e62:	6a38      	ldr	r0, [r7, #32]
 8008e64:	f7fe fcc2 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e6c:	6a38      	ldr	r0, [r7, #32]
 8008e6e:	f7fe fce8 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e76:	6a38      	ldr	r0, [r7, #32]
 8008e78:	f7fe fd3f 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 8008e7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e80:	6a38      	ldr	r0, [r7, #32]
 8008e82:	f7fe fcfc 	bl	800787e <qmf_even>
        free(coeffTemp);
 8008e86:	6a38      	ldr	r0, [r7, #32]
 8008e88:	f001 ff74 	bl	800ad74 <free>

        return N;
 8008e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e8e:	f000 be73 	b.w	8009b78 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"coif5")){
 8008e92:	4937      	ldr	r1, [pc, #220]	; (8008f70 <filtcoef+0x1628>)
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f7f7 f9d3 	bl	8000240 <strcmp>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d13f      	bne.n	8008f20 <filtcoef+0x15d8>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8008ea0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f001 ff5d 	bl	800ad64 <malloc>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24

        copy(coif5, N, coeffTemp);
 8008eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008eb2:	4830      	ldr	r0, [pc, #192]	; (8008f74 <filtcoef+0x162c>)
 8008eb4:	f7fe fd21 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 8008eb8:	2300      	movs	r3, #0
 8008eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ebc:	e012      	b.n	8008ee4 <filtcoef+0x159c>
            coeffTemp[i] *= M_SQRT2;
 8008ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec4:	4413      	add	r3, r2
 8008ec6:	ed93 7b00 	vldr	d7, [r3]
 8008eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ecc:	00db      	lsls	r3, r3, #3
 8008ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed0:	4413      	add	r3, r2
 8008ed2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8008f50 <filtcoef+0x1608>
 8008ed6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008eda:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8008ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ee4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	dbe8      	blt.n	8008ebe <filtcoef+0x1576>
        }

        copy_reverse(coeffTemp, N, lp1);
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ef2:	f7fe fc7b 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008efa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008efc:	f7fe fca1 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f06:	f7fe fcf8 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 8008f0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f10:	f7fe fcb5 	bl	800787e <qmf_even>
        free(coeffTemp);
 8008f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f16:	f001 ff2d 	bl	800ad74 <free>

        return N;
 8008f1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f1c:	f000 be2c 	b.w	8009b78 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "coif6")){
 8008f20:	4915      	ldr	r1, [pc, #84]	; (8008f78 <filtcoef+0x1630>)
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f7f7 f98c 	bl	8000240 <strcmp>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d159      	bne.n	8008fe2 <filtcoef+0x169a>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8008f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 ff16 	bl	800ad64 <malloc>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	62bb      	str	r3, [r7, #40]	; 0x28

        copy(coif6, N, coeffTemp);
 8008f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f40:	480e      	ldr	r0, [pc, #56]	; (8008f7c <filtcoef+0x1634>)
 8008f42:	f7fe fcda 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 8008f46:	2300      	movs	r3, #0
 8008f48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f4a:	e02c      	b.n	8008fa6 <filtcoef+0x165e>
 8008f4c:	f3af 8000 	nop.w
 8008f50:	667f3bcd 	.word	0x667f3bcd
 8008f54:	3ff6a09e 	.word	0x3ff6a09e
 8008f58:	0800dbb4 	.word	0x0800dbb4
 8008f5c:	08011918 	.word	0x08011918
 8008f60:	0800dbbc 	.word	0x0800dbbc
 8008f64:	08011978 	.word	0x08011978
 8008f68:	0800dbc4 	.word	0x0800dbc4
 8008f6c:	08011a08 	.word	0x08011a08
 8008f70:	0800dbcc 	.word	0x0800dbcc
 8008f74:	08011ac8 	.word	0x08011ac8
 8008f78:	0800dbd4 	.word	0x0800dbd4
 8008f7c:	08011bb8 	.word	0x08011bb8
            coeffTemp[i] *= M_SQRT2;
 8008f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f82:	00db      	lsls	r3, r3, #3
 8008f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f86:	4413      	add	r3, r2
 8008f88:	ed93 7b00 	vldr	d7, [r3]
 8008f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f8e:	00db      	lsls	r3, r3, #3
 8008f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f92:	4413      	add	r3, r2
 8008f94:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8009220 <filtcoef+0x18d8>
 8008f98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f9c:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8008fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fa6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008faa:	429a      	cmp	r2, r3
 8008fac:	dbe8      	blt.n	8008f80 <filtcoef+0x1638>
        }

        copy_reverse(coeffTemp, N, lp1);
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fb4:	f7fe fc1a 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fbe:	f7fe fc40 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fc8:	f7fe fc97 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 8008fcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fd2:	f7fe fc54 	bl	800787e <qmf_even>
        free(coeffTemp);
 8008fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fd8:	f001 fecc 	bl	800ad74 <free>

        return N;
 8008fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fde:	f000 bdcb 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif7")){
 8008fe2:	4991      	ldr	r1, [pc, #580]	; (8009228 <filtcoef+0x18e0>)
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f7f7 f92b 	bl	8000240 <strcmp>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d13f      	bne.n	8009070 <filtcoef+0x1728>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8008ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f001 feb5 	bl	800ad64 <malloc>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	62fb      	str	r3, [r7, #44]	; 0x2c

        copy(coif7, N, coeffTemp);
 8008ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009000:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009002:	488a      	ldr	r0, [pc, #552]	; (800922c <filtcoef+0x18e4>)
 8009004:	f7fe fc79 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 8009008:	2300      	movs	r3, #0
 800900a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800900c:	e012      	b.n	8009034 <filtcoef+0x16ec>
            coeffTemp[i] *= M_SQRT2;
 800900e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009014:	4413      	add	r3, r2
 8009016:	ed93 7b00 	vldr	d7, [r3]
 800901a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800901c:	00db      	lsls	r3, r3, #3
 800901e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009020:	4413      	add	r3, r2
 8009022:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8009220 <filtcoef+0x18d8>
 8009026:	ee27 7b06 	vmul.f64	d7, d7, d6
 800902a:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 800902e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009030:	3301      	adds	r3, #1
 8009032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009034:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009038:	429a      	cmp	r2, r3
 800903a:	dbe8      	blt.n	800900e <filtcoef+0x16c6>
        }

        copy_reverse(coeffTemp, N, lp1);
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009042:	f7fe fbd3 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800904a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800904c:	f7fe fbf9 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009054:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009056:	f7fe fc50 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 800905a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800905c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800905e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009060:	f7fe fc0d 	bl	800787e <qmf_even>
        free(coeffTemp);
 8009064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009066:	f001 fe85 	bl	800ad74 <free>

        return N;
 800906a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800906c:	f000 bd84 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif8")){
 8009070:	496f      	ldr	r1, [pc, #444]	; (8009230 <filtcoef+0x18e8>)
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7f7 f8e4 	bl	8000240 <strcmp>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d13f      	bne.n	80090fe <filtcoef+0x17b6>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 800907e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009080:	00db      	lsls	r3, r3, #3
 8009082:	4618      	mov	r0, r3
 8009084:	f001 fe6e 	bl	800ad64 <malloc>
 8009088:	4603      	mov	r3, r0
 800908a:	633b      	str	r3, [r7, #48]	; 0x30

        copy(coif8, N, coeffTemp);
 800908c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800908e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009090:	4868      	ldr	r0, [pc, #416]	; (8009234 <filtcoef+0x18ec>)
 8009092:	f7fe fc32 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 8009096:	2300      	movs	r3, #0
 8009098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800909a:	e012      	b.n	80090c2 <filtcoef+0x177a>
            coeffTemp[i] *= M_SQRT2;
 800909c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800909e:	00db      	lsls	r3, r3, #3
 80090a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090a2:	4413      	add	r3, r2
 80090a4:	ed93 7b00 	vldr	d7, [r3]
 80090a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090aa:	00db      	lsls	r3, r3, #3
 80090ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ae:	4413      	add	r3, r2
 80090b0:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8009220 <filtcoef+0x18d8>
 80090b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80090b8:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80090bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090be:	3301      	adds	r3, #1
 80090c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090c6:	429a      	cmp	r2, r3
 80090c8:	dbe8      	blt.n	800909c <filtcoef+0x1754>
        }

        copy_reverse(coeffTemp, N, lp1);
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090d0:	f7fe fb8c 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090da:	f7fe fbb2 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090e4:	f7fe fc09 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 80090e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090ee:	f7fe fbc6 	bl	800787e <qmf_even>
        free(coeffTemp);
 80090f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090f4:	f001 fe3e 	bl	800ad74 <free>

        return N;
 80090f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090fa:	f000 bd3d 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif9")){
 80090fe:	494e      	ldr	r1, [pc, #312]	; (8009238 <filtcoef+0x18f0>)
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f7f7 f89d 	bl	8000240 <strcmp>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d13f      	bne.n	800918c <filtcoef+0x1844>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 800910c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800910e:	00db      	lsls	r3, r3, #3
 8009110:	4618      	mov	r0, r3
 8009112:	f001 fe27 	bl	800ad64 <malloc>
 8009116:	4603      	mov	r3, r0
 8009118:	637b      	str	r3, [r7, #52]	; 0x34

        copy(coif9, N, coeffTemp);
 800911a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800911c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800911e:	4847      	ldr	r0, [pc, #284]	; (800923c <filtcoef+0x18f4>)
 8009120:	f7fe fbeb 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 8009124:	2300      	movs	r3, #0
 8009126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009128:	e012      	b.n	8009150 <filtcoef+0x1808>
            coeffTemp[i] *= M_SQRT2;
 800912a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800912c:	00db      	lsls	r3, r3, #3
 800912e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009130:	4413      	add	r3, r2
 8009132:	ed93 7b00 	vldr	d7, [r3]
 8009136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800913c:	4413      	add	r3, r2
 800913e:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8009220 <filtcoef+0x18d8>
 8009142:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009146:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 800914a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800914c:	3301      	adds	r3, #1
 800914e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009150:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009154:	429a      	cmp	r2, r3
 8009156:	dbe8      	blt.n	800912a <filtcoef+0x17e2>
        }

        copy_reverse(coeffTemp, N, lp1);
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800915c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800915e:	f7fe fb45 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009166:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009168:	f7fe fb6b 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009170:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009172:	f7fe fbc2 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 8009176:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009178:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800917a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800917c:	f7fe fb7f 	bl	800787e <qmf_even>
        free(coeffTemp);
 8009180:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009182:	f001 fdf7 	bl	800ad74 <free>

        return N;
 8009186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009188:	f000 bcf6 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif10")){
 800918c:	492c      	ldr	r1, [pc, #176]	; (8009240 <filtcoef+0x18f8>)
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f7f7 f856 	bl	8000240 <strcmp>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d156      	bne.n	8009248 <filtcoef+0x1900>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 800919a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	4618      	mov	r0, r3
 80091a0:	f001 fde0 	bl	800ad64 <malloc>
 80091a4:	4603      	mov	r3, r0
 80091a6:	63bb      	str	r3, [r7, #56]	; 0x38

        copy(coif10, N, coeffTemp);
 80091a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091ac:	4825      	ldr	r0, [pc, #148]	; (8009244 <filtcoef+0x18fc>)
 80091ae:	f7fe fba4 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 80091b2:	2300      	movs	r3, #0
 80091b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091b6:	e012      	b.n	80091de <filtcoef+0x1896>
            coeffTemp[i] *= M_SQRT2;
 80091b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ba:	00db      	lsls	r3, r3, #3
 80091bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091be:	4413      	add	r3, r2
 80091c0:	ed93 7b00 	vldr	d7, [r3]
 80091c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091ca:	4413      	add	r3, r2
 80091cc:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8009220 <filtcoef+0x18d8>
 80091d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091d4:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80091d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091da:	3301      	adds	r3, #1
 80091dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091e2:	429a      	cmp	r2, r3
 80091e4:	dbe8      	blt.n	80091b8 <filtcoef+0x1870>
        }

        copy_reverse(coeffTemp, N, lp1);
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091ec:	f7fe fafe 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091f6:	f7fe fb24 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009200:	f7fe fb7b 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 8009204:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009206:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009208:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800920a:	f7fe fb38 	bl	800787e <qmf_even>
        free(coeffTemp);
 800920e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009210:	f001 fdb0 	bl	800ad74 <free>

        return N;
 8009214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009216:	f000 bcaf 	b.w	8009b78 <filtcoef+0x2230>
 800921a:	bf00      	nop
 800921c:	f3af 8000 	nop.w
 8009220:	667f3bcd 	.word	0x667f3bcd
 8009224:	3ff6a09e 	.word	0x3ff6a09e
 8009228:	0800dbdc 	.word	0x0800dbdc
 800922c:	08011cd8 	.word	0x08011cd8
 8009230:	0800dbe4 	.word	0x0800dbe4
 8009234:	08011e28 	.word	0x08011e28
 8009238:	0800dbec 	.word	0x0800dbec
 800923c:	08011fa8 	.word	0x08011fa8
 8009240:	0800dbf4 	.word	0x0800dbf4
 8009244:	08012158 	.word	0x08012158
    }
    else if (!strcmp(name, "coif11")){
 8009248:	4999      	ldr	r1, [pc, #612]	; (80094b0 <filtcoef+0x1b68>)
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f7f6 fff8 	bl	8000240 <strcmp>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d13f      	bne.n	80092d6 <filtcoef+0x198e>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8009256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009258:	00db      	lsls	r3, r3, #3
 800925a:	4618      	mov	r0, r3
 800925c:	f001 fd82 	bl	800ad64 <malloc>
 8009260:	4603      	mov	r3, r0
 8009262:	63fb      	str	r3, [r7, #60]	; 0x3c

        copy(coif11, N, coeffTemp);
 8009264:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009266:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009268:	4892      	ldr	r0, [pc, #584]	; (80094b4 <filtcoef+0x1b6c>)
 800926a:	f7fe fb46 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 800926e:	2300      	movs	r3, #0
 8009270:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009272:	e012      	b.n	800929a <filtcoef+0x1952>
            coeffTemp[i] *= M_SQRT2;
 8009274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009276:	00db      	lsls	r3, r3, #3
 8009278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800927a:	4413      	add	r3, r2
 800927c:	ed93 7b00 	vldr	d7, [r3]
 8009280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009286:	4413      	add	r3, r2
 8009288:	ed9f 6b87 	vldr	d6, [pc, #540]	; 80094a8 <filtcoef+0x1b60>
 800928c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009290:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8009294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009296:	3301      	adds	r3, #1
 8009298:	65fb      	str	r3, [r7, #92]	; 0x5c
 800929a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800929c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800929e:	429a      	cmp	r2, r3
 80092a0:	dbe8      	blt.n	8009274 <filtcoef+0x192c>
        }

        copy_reverse(coeffTemp, N, lp1);
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80092a8:	f7fe faa0 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80092b2:	f7fe fac6 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80092bc:	f7fe fb1d 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 80092c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80092c6:	f7fe fada 	bl	800787e <qmf_even>
        free(coeffTemp);
 80092ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80092cc:	f001 fd52 	bl	800ad74 <free>

        return N;
 80092d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092d2:	f000 bc51 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif12")){
 80092d6:	4978      	ldr	r1, [pc, #480]	; (80094b8 <filtcoef+0x1b70>)
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f7f6 ffb1 	bl	8000240 <strcmp>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d13f      	bne.n	8009364 <filtcoef+0x1a1c>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 80092e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	4618      	mov	r0, r3
 80092ea:	f001 fd3b 	bl	800ad64 <malloc>
 80092ee:	4603      	mov	r3, r0
 80092f0:	643b      	str	r3, [r7, #64]	; 0x40

        copy(coif12, N, coeffTemp);
 80092f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092f6:	4871      	ldr	r0, [pc, #452]	; (80094bc <filtcoef+0x1b74>)
 80092f8:	f7fe faff 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 80092fc:	2300      	movs	r3, #0
 80092fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009300:	e012      	b.n	8009328 <filtcoef+0x19e0>
            coeffTemp[i] *= M_SQRT2;
 8009302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009304:	00db      	lsls	r3, r3, #3
 8009306:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009308:	4413      	add	r3, r2
 800930a:	ed93 7b00 	vldr	d7, [r3]
 800930e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009310:	00db      	lsls	r3, r3, #3
 8009312:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009314:	4413      	add	r3, r2
 8009316:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80094a8 <filtcoef+0x1b60>
 800931a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800931e:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8009322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009324:	3301      	adds	r3, #1
 8009326:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009328:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800932a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800932c:	429a      	cmp	r2, r3
 800932e:	dbe8      	blt.n	8009302 <filtcoef+0x19ba>
        }

        copy_reverse(coeffTemp, N, lp1);
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009334:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009336:	f7fe fa59 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800933e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009340:	f7fe fa7f 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009348:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800934a:	f7fe fad6 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 800934e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009350:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009352:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009354:	f7fe fa93 	bl	800787e <qmf_even>
        free(coeffTemp);
 8009358:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800935a:	f001 fd0b 	bl	800ad74 <free>

        return N;
 800935e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009360:	f000 bc0a 	b.w	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif13")){
 8009364:	4956      	ldr	r1, [pc, #344]	; (80094c0 <filtcoef+0x1b78>)
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f7f6 ff6a 	bl	8000240 <strcmp>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d13e      	bne.n	80093f0 <filtcoef+0x1aa8>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8009372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009374:	00db      	lsls	r3, r3, #3
 8009376:	4618      	mov	r0, r3
 8009378:	f001 fcf4 	bl	800ad64 <malloc>
 800937c:	4603      	mov	r3, r0
 800937e:	647b      	str	r3, [r7, #68]	; 0x44

        copy(coif13, N, coeffTemp);
 8009380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009384:	484f      	ldr	r0, [pc, #316]	; (80094c4 <filtcoef+0x1b7c>)
 8009386:	f7fe fab8 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 800938a:	2300      	movs	r3, #0
 800938c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800938e:	e012      	b.n	80093b6 <filtcoef+0x1a6e>
            coeffTemp[i] *= M_SQRT2;
 8009390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009392:	00db      	lsls	r3, r3, #3
 8009394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009396:	4413      	add	r3, r2
 8009398:	ed93 7b00 	vldr	d7, [r3]
 800939c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093a2:	4413      	add	r3, r2
 80093a4:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80094a8 <filtcoef+0x1b60>
 80093a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80093ac:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80093b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093b2:	3301      	adds	r3, #1
 80093b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093ba:	429a      	cmp	r2, r3
 80093bc:	dbe8      	blt.n	8009390 <filtcoef+0x1a48>
        }

        copy_reverse(coeffTemp, N, lp1);
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80093c4:	f7fe fa12 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80093ce:	f7fe fa38 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80093d8:	f7fe fa8f 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 80093dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80093e2:	f7fe fa4c 	bl	800787e <qmf_even>
        free(coeffTemp);
 80093e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80093e8:	f001 fcc4 	bl	800ad74 <free>

        return N;
 80093ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093ee:	e3c3      	b.n	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif14")){
 80093f0:	4935      	ldr	r1, [pc, #212]	; (80094c8 <filtcoef+0x1b80>)
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f7f6 ff24 	bl	8000240 <strcmp>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d13e      	bne.n	800947c <filtcoef+0x1b34>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 80093fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	4618      	mov	r0, r3
 8009404:	f001 fcae 	bl	800ad64 <malloc>
 8009408:	4603      	mov	r3, r0
 800940a:	64bb      	str	r3, [r7, #72]	; 0x48

        copy(coif14, N, coeffTemp);
 800940c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800940e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009410:	482e      	ldr	r0, [pc, #184]	; (80094cc <filtcoef+0x1b84>)
 8009412:	f7fe fa72 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 8009416:	2300      	movs	r3, #0
 8009418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800941a:	e012      	b.n	8009442 <filtcoef+0x1afa>
            coeffTemp[i] *= M_SQRT2;
 800941c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800941e:	00db      	lsls	r3, r3, #3
 8009420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009422:	4413      	add	r3, r2
 8009424:	ed93 7b00 	vldr	d7, [r3]
 8009428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800942e:	4413      	add	r3, r2
 8009430:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 80094a8 <filtcoef+0x1b60>
 8009434:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009438:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 800943c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800943e:	3301      	adds	r3, #1
 8009440:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009442:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009446:	429a      	cmp	r2, r3
 8009448:	dbe8      	blt.n	800941c <filtcoef+0x1ad4>
        }

        copy_reverse(coeffTemp, N, lp1);
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800944e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009450:	f7fe f9cc 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009458:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800945a:	f7fe f9f2 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009462:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009464:	f7fe fa49 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 8009468:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800946a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800946c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800946e:	f7fe fa06 	bl	800787e <qmf_even>
        free(coeffTemp);
 8009472:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009474:	f001 fc7e 	bl	800ad74 <free>

        return N;
 8009478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800947a:	e37d      	b.n	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif15")){
 800947c:	4914      	ldr	r1, [pc, #80]	; (80094d0 <filtcoef+0x1b88>)
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f7f6 fede 	bl	8000240 <strcmp>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d156      	bne.n	8009538 <filtcoef+0x1bf0>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 800948a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800948c:	00db      	lsls	r3, r3, #3
 800948e:	4618      	mov	r0, r3
 8009490:	f001 fc68 	bl	800ad64 <malloc>
 8009494:	4603      	mov	r3, r0
 8009496:	64fb      	str	r3, [r7, #76]	; 0x4c

        copy(coif15, N, coeffTemp);
 8009498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800949a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800949c:	480d      	ldr	r0, [pc, #52]	; (80094d4 <filtcoef+0x1b8c>)
 800949e:	f7fe fa2c 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 80094a2:	2300      	movs	r3, #0
 80094a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094a6:	e02a      	b.n	80094fe <filtcoef+0x1bb6>
 80094a8:	667f3bcd 	.word	0x667f3bcd
 80094ac:	3ff6a09e 	.word	0x3ff6a09e
 80094b0:	0800dbfc 	.word	0x0800dbfc
 80094b4:	08012338 	.word	0x08012338
 80094b8:	0800dc04 	.word	0x0800dc04
 80094bc:	08012548 	.word	0x08012548
 80094c0:	0800dc0c 	.word	0x0800dc0c
 80094c4:	08012788 	.word	0x08012788
 80094c8:	0800dc14 	.word	0x0800dc14
 80094cc:	080129f8 	.word	0x080129f8
 80094d0:	0800dc1c 	.word	0x0800dc1c
 80094d4:	08012c98 	.word	0x08012c98
            coeffTemp[i] *= M_SQRT2;
 80094d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094de:	4413      	add	r3, r2
 80094e0:	ed93 7b00 	vldr	d7, [r3]
 80094e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094ea:	4413      	add	r3, r2
 80094ec:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8009778 <filtcoef+0x1e30>
 80094f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80094f4:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80094f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094fa:	3301      	adds	r3, #1
 80094fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009502:	429a      	cmp	r2, r3
 8009504:	dbe8      	blt.n	80094d8 <filtcoef+0x1b90>
        }

        copy_reverse(coeffTemp, N, lp1);
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800950a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800950c:	f7fe f96e 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009514:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009516:	f7fe f994 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800951e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009520:	f7fe f9eb 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 8009524:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009526:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009528:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800952a:	f7fe f9a8 	bl	800787e <qmf_even>
        free(coeffTemp);
 800952e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009530:	f001 fc20 	bl	800ad74 <free>

        return N;
 8009534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009536:	e31f      	b.n	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif16")){
 8009538:	4991      	ldr	r1, [pc, #580]	; (8009780 <filtcoef+0x1e38>)
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f7f6 fe80 	bl	8000240 <strcmp>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d13e      	bne.n	80095c4 <filtcoef+0x1c7c>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8009546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009548:	00db      	lsls	r3, r3, #3
 800954a:	4618      	mov	r0, r3
 800954c:	f001 fc0a 	bl	800ad64 <malloc>
 8009550:	4603      	mov	r3, r0
 8009552:	653b      	str	r3, [r7, #80]	; 0x50

        copy(coif16, N, coeffTemp);
 8009554:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009558:	488a      	ldr	r0, [pc, #552]	; (8009784 <filtcoef+0x1e3c>)
 800955a:	f7fe f9ce 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 800955e:	2300      	movs	r3, #0
 8009560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009562:	e012      	b.n	800958a <filtcoef+0x1c42>
            coeffTemp[i] *= M_SQRT2;
 8009564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800956a:	4413      	add	r3, r2
 800956c:	ed93 7b00 	vldr	d7, [r3]
 8009570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009576:	4413      	add	r3, r2
 8009578:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8009778 <filtcoef+0x1e30>
 800957c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009580:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8009584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009586:	3301      	adds	r3, #1
 8009588:	65fb      	str	r3, [r7, #92]	; 0x5c
 800958a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800958c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800958e:	429a      	cmp	r2, r3
 8009590:	dbe8      	blt.n	8009564 <filtcoef+0x1c1c>
        }

        copy_reverse(coeffTemp, N, lp1);
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009596:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009598:	f7fe f928 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80095a2:	f7fe f94e 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80095ac:	f7fe f9a5 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 80095b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095b4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80095b6:	f7fe f962 	bl	800787e <qmf_even>
        free(coeffTemp);
 80095ba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80095bc:	f001 fbda 	bl	800ad74 <free>

        return N;
 80095c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095c2:	e2d9      	b.n	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif17")){
 80095c4:	4970      	ldr	r1, [pc, #448]	; (8009788 <filtcoef+0x1e40>)
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f7f6 fe3a 	bl	8000240 <strcmp>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d13e      	bne.n	8009650 <filtcoef+0x1d08>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 80095d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095d4:	00db      	lsls	r3, r3, #3
 80095d6:	4618      	mov	r0, r3
 80095d8:	f001 fbc4 	bl	800ad64 <malloc>
 80095dc:	4603      	mov	r3, r0
 80095de:	657b      	str	r3, [r7, #84]	; 0x54

        copy(coif17, N, coeffTemp);
 80095e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095e4:	4869      	ldr	r0, [pc, #420]	; (800978c <filtcoef+0x1e44>)
 80095e6:	f7fe f988 	bl	80078fa <copy>
        for (i = 0; i < N; ++i) {
 80095ea:	2300      	movs	r3, #0
 80095ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095ee:	e012      	b.n	8009616 <filtcoef+0x1cce>
            coeffTemp[i] *= M_SQRT2;
 80095f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095f2:	00db      	lsls	r3, r3, #3
 80095f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095f6:	4413      	add	r3, r2
 80095f8:	ed93 7b00 	vldr	d7, [r3]
 80095fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009602:	4413      	add	r3, r2
 8009604:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8009778 <filtcoef+0x1e30>
 8009608:	ee27 7b06 	vmul.f64	d7, d7, d6
 800960c:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8009610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009612:	3301      	adds	r3, #1
 8009614:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009616:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800961a:	429a      	cmp	r2, r3
 800961c:	dbe8      	blt.n	80095f0 <filtcoef+0x1ca8>
        }

        copy_reverse(coeffTemp, N, lp1);
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009622:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009624:	f7fe f8e2 	bl	80077ec <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800962c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800962e:	f7fe f908 	bl	8007842 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009636:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009638:	f7fe f95f 	bl	80078fa <copy>
        qmf_even(coeffTemp, N, hp2);
 800963c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800963e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009640:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009642:	f7fe f91c 	bl	800787e <qmf_even>
        free(coeffTemp);
 8009646:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009648:	f001 fb94 	bl	800ad74 <free>

        return N;
 800964c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800964e:	e293      	b.n	8009b78 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"sym2")){
 8009650:	494f      	ldr	r1, [pc, #316]	; (8009790 <filtcoef+0x1e48>)
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f7f6 fdf4 	bl	8000240 <strcmp>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d115      	bne.n	800968a <filtcoef+0x1d42>
        copy_reverse(sym2, N, lp1);
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009662:	484c      	ldr	r0, [pc, #304]	; (8009794 <filtcoef+0x1e4c>)
 8009664:	f7fe f8c2 	bl	80077ec <copy_reverse>
        qmf_wrev(sym2, N, hp1);
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800966c:	4849      	ldr	r0, [pc, #292]	; (8009794 <filtcoef+0x1e4c>)
 800966e:	f7fe f8e8 	bl	8007842 <qmf_wrev>
        copy(sym2, N, lp2);
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009676:	4847      	ldr	r0, [pc, #284]	; (8009794 <filtcoef+0x1e4c>)
 8009678:	f7fe f93f 	bl	80078fa <copy>
        qmf_even(sym2, N, hp2);
 800967c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800967e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009680:	4844      	ldr	r0, [pc, #272]	; (8009794 <filtcoef+0x1e4c>)
 8009682:	f7fe f8fc 	bl	800787e <qmf_even>
        return N;
 8009686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009688:	e276      	b.n	8009b78 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym3")){
 800968a:	4943      	ldr	r1, [pc, #268]	; (8009798 <filtcoef+0x1e50>)
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f7f6 fdd7 	bl	8000240 <strcmp>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d115      	bne.n	80096c4 <filtcoef+0x1d7c>
        copy_reverse(sym3, N, lp1);
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800969c:	483f      	ldr	r0, [pc, #252]	; (800979c <filtcoef+0x1e54>)
 800969e:	f7fe f8a5 	bl	80077ec <copy_reverse>
        qmf_wrev(sym3, N, hp1);
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096a6:	483d      	ldr	r0, [pc, #244]	; (800979c <filtcoef+0x1e54>)
 80096a8:	f7fe f8cb 	bl	8007842 <qmf_wrev>
        copy(sym3, N, lp2);
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096b0:	483a      	ldr	r0, [pc, #232]	; (800979c <filtcoef+0x1e54>)
 80096b2:	f7fe f922 	bl	80078fa <copy>
        qmf_even(sym3, N, hp2);
 80096b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096ba:	4838      	ldr	r0, [pc, #224]	; (800979c <filtcoef+0x1e54>)
 80096bc:	f7fe f8df 	bl	800787e <qmf_even>
        return N;
 80096c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096c2:	e259      	b.n	8009b78 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym4")){
 80096c4:	4936      	ldr	r1, [pc, #216]	; (80097a0 <filtcoef+0x1e58>)
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f7f6 fdba 	bl	8000240 <strcmp>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d115      	bne.n	80096fe <filtcoef+0x1db6>
        copy_reverse(sym4, N, lp1);
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096d6:	4833      	ldr	r0, [pc, #204]	; (80097a4 <filtcoef+0x1e5c>)
 80096d8:	f7fe f888 	bl	80077ec <copy_reverse>
        qmf_wrev(sym4, N, hp1);
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096e0:	4830      	ldr	r0, [pc, #192]	; (80097a4 <filtcoef+0x1e5c>)
 80096e2:	f7fe f8ae 	bl	8007842 <qmf_wrev>
        copy(sym4, N, lp2);
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096ea:	482e      	ldr	r0, [pc, #184]	; (80097a4 <filtcoef+0x1e5c>)
 80096ec:	f7fe f905 	bl	80078fa <copy>
        qmf_even(sym4, N, hp2);
 80096f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096f4:	482b      	ldr	r0, [pc, #172]	; (80097a4 <filtcoef+0x1e5c>)
 80096f6:	f7fe f8c2 	bl	800787e <qmf_even>
        return N;
 80096fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096fc:	e23c      	b.n	8009b78 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym5")){
 80096fe:	492a      	ldr	r1, [pc, #168]	; (80097a8 <filtcoef+0x1e60>)
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f7f6 fd9d 	bl	8000240 <strcmp>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d115      	bne.n	8009738 <filtcoef+0x1df0>
        copy_reverse(sym5, N, lp1);
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009710:	4826      	ldr	r0, [pc, #152]	; (80097ac <filtcoef+0x1e64>)
 8009712:	f7fe f86b 	bl	80077ec <copy_reverse>
        qmf_wrev(sym5, N, hp1);
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800971a:	4824      	ldr	r0, [pc, #144]	; (80097ac <filtcoef+0x1e64>)
 800971c:	f7fe f891 	bl	8007842 <qmf_wrev>
        copy(sym5, N, lp2);
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009724:	4821      	ldr	r0, [pc, #132]	; (80097ac <filtcoef+0x1e64>)
 8009726:	f7fe f8e8 	bl	80078fa <copy>
        qmf_even(sym5, N, hp2);
 800972a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800972c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800972e:	481f      	ldr	r0, [pc, #124]	; (80097ac <filtcoef+0x1e64>)
 8009730:	f7fe f8a5 	bl	800787e <qmf_even>
        return N;
 8009734:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009736:	e21f      	b.n	8009b78 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym6")){
 8009738:	491d      	ldr	r1, [pc, #116]	; (80097b0 <filtcoef+0x1e68>)
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f7f6 fd80 	bl	8000240 <strcmp>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d138      	bne.n	80097b8 <filtcoef+0x1e70>
        copy_reverse(sym6, N, lp1);
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800974a:	481a      	ldr	r0, [pc, #104]	; (80097b4 <filtcoef+0x1e6c>)
 800974c:	f7fe f84e 	bl	80077ec <copy_reverse>
        qmf_wrev(sym6, N, hp1);
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009754:	4817      	ldr	r0, [pc, #92]	; (80097b4 <filtcoef+0x1e6c>)
 8009756:	f7fe f874 	bl	8007842 <qmf_wrev>
        copy(sym6, N, lp2);
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800975e:	4815      	ldr	r0, [pc, #84]	; (80097b4 <filtcoef+0x1e6c>)
 8009760:	f7fe f8cb 	bl	80078fa <copy>
        qmf_even(sym6, N, hp2);
 8009764:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009766:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009768:	4812      	ldr	r0, [pc, #72]	; (80097b4 <filtcoef+0x1e6c>)
 800976a:	f7fe f888 	bl	800787e <qmf_even>
        return N;
 800976e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009770:	e202      	b.n	8009b78 <filtcoef+0x2230>
 8009772:	bf00      	nop
 8009774:	f3af 8000 	nop.w
 8009778:	667f3bcd 	.word	0x667f3bcd
 800977c:	3ff6a09e 	.word	0x3ff6a09e
 8009780:	0800dc24 	.word	0x0800dc24
 8009784:	08012f68 	.word	0x08012f68
 8009788:	0800dc2c 	.word	0x0800dc2c
 800978c:	08013268 	.word	0x08013268
 8009790:	0800dc34 	.word	0x0800dc34
 8009794:	08013598 	.word	0x08013598
 8009798:	0800dc3c 	.word	0x0800dc3c
 800979c:	080135b8 	.word	0x080135b8
 80097a0:	0800dc44 	.word	0x0800dc44
 80097a4:	080135e8 	.word	0x080135e8
 80097a8:	0800dc4c 	.word	0x0800dc4c
 80097ac:	08013628 	.word	0x08013628
 80097b0:	0800dc54 	.word	0x0800dc54
 80097b4:	08013678 	.word	0x08013678
	}

	else if (!strcmp(name,"sym7")){
 80097b8:	4990      	ldr	r1, [pc, #576]	; (80099fc <filtcoef+0x20b4>)
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f7f6 fd40 	bl	8000240 <strcmp>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d115      	bne.n	80097f2 <filtcoef+0x1eaa>
        copy_reverse(sym7, N, lp1);
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097ca:	488d      	ldr	r0, [pc, #564]	; (8009a00 <filtcoef+0x20b8>)
 80097cc:	f7fe f80e 	bl	80077ec <copy_reverse>
        qmf_wrev(sym7, N, hp1);
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097d4:	488a      	ldr	r0, [pc, #552]	; (8009a00 <filtcoef+0x20b8>)
 80097d6:	f7fe f834 	bl	8007842 <qmf_wrev>
        copy(sym7, N, lp2);
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097de:	4888      	ldr	r0, [pc, #544]	; (8009a00 <filtcoef+0x20b8>)
 80097e0:	f7fe f88b 	bl	80078fa <copy>
        qmf_even(sym7, N, hp2);
 80097e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097e8:	4885      	ldr	r0, [pc, #532]	; (8009a00 <filtcoef+0x20b8>)
 80097ea:	f7fe f848 	bl	800787e <qmf_even>
        return N;
 80097ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097f0:	e1c2      	b.n	8009b78 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym8")){
 80097f2:	4984      	ldr	r1, [pc, #528]	; (8009a04 <filtcoef+0x20bc>)
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f7f6 fd23 	bl	8000240 <strcmp>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d115      	bne.n	800982c <filtcoef+0x1ee4>
        copy_reverse(sym8, N, lp1);
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009804:	4880      	ldr	r0, [pc, #512]	; (8009a08 <filtcoef+0x20c0>)
 8009806:	f7fd fff1 	bl	80077ec <copy_reverse>
        qmf_wrev(sym8, N, hp1);
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800980e:	487e      	ldr	r0, [pc, #504]	; (8009a08 <filtcoef+0x20c0>)
 8009810:	f7fe f817 	bl	8007842 <qmf_wrev>
        copy(sym8, N, lp2);
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009818:	487b      	ldr	r0, [pc, #492]	; (8009a08 <filtcoef+0x20c0>)
 800981a:	f7fe f86e 	bl	80078fa <copy>
        qmf_even(sym8, N, hp2);
 800981e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009820:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009822:	4879      	ldr	r0, [pc, #484]	; (8009a08 <filtcoef+0x20c0>)
 8009824:	f7fe f82b 	bl	800787e <qmf_even>
        return N;
 8009828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800982a:	e1a5      	b.n	8009b78 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym9")){
 800982c:	4977      	ldr	r1, [pc, #476]	; (8009a0c <filtcoef+0x20c4>)
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f7f6 fd06 	bl	8000240 <strcmp>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d115      	bne.n	8009866 <filtcoef+0x1f1e>
        copy_reverse(sym9, N, lp1);
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800983e:	4874      	ldr	r0, [pc, #464]	; (8009a10 <filtcoef+0x20c8>)
 8009840:	f7fd ffd4 	bl	80077ec <copy_reverse>
        qmf_wrev(sym9, N, hp1);
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009848:	4871      	ldr	r0, [pc, #452]	; (8009a10 <filtcoef+0x20c8>)
 800984a:	f7fd fffa 	bl	8007842 <qmf_wrev>
        copy(sym9, N, lp2);
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009852:	486f      	ldr	r0, [pc, #444]	; (8009a10 <filtcoef+0x20c8>)
 8009854:	f7fe f851 	bl	80078fa <copy>
        qmf_even(sym9, N, hp2);
 8009858:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800985a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800985c:	486c      	ldr	r0, [pc, #432]	; (8009a10 <filtcoef+0x20c8>)
 800985e:	f7fe f80e 	bl	800787e <qmf_even>
        return N;
 8009862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009864:	e188      	b.n	8009b78 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym10")){
 8009866:	496b      	ldr	r1, [pc, #428]	; (8009a14 <filtcoef+0x20cc>)
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f7f6 fce9 	bl	8000240 <strcmp>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d115      	bne.n	80098a0 <filtcoef+0x1f58>
        copy_reverse(sym10, N, lp1);
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009878:	4867      	ldr	r0, [pc, #412]	; (8009a18 <filtcoef+0x20d0>)
 800987a:	f7fd ffb7 	bl	80077ec <copy_reverse>
        qmf_wrev(sym10, N, hp1);
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009882:	4865      	ldr	r0, [pc, #404]	; (8009a18 <filtcoef+0x20d0>)
 8009884:	f7fd ffdd 	bl	8007842 <qmf_wrev>
        copy(sym10, N, lp2);
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800988c:	4862      	ldr	r0, [pc, #392]	; (8009a18 <filtcoef+0x20d0>)
 800988e:	f7fe f834 	bl	80078fa <copy>
        qmf_even(sym10, N, hp2);
 8009892:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009894:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009896:	4860      	ldr	r0, [pc, #384]	; (8009a18 <filtcoef+0x20d0>)
 8009898:	f7fd fff1 	bl	800787e <qmf_even>
        return N;
 800989c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800989e:	e16b      	b.n	8009b78 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "sym11")){
 80098a0:	495e      	ldr	r1, [pc, #376]	; (8009a1c <filtcoef+0x20d4>)
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f7f6 fccc 	bl	8000240 <strcmp>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d115      	bne.n	80098da <filtcoef+0x1f92>
        copy_reverse(sym11, N, lp1);
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098b2:	485b      	ldr	r0, [pc, #364]	; (8009a20 <filtcoef+0x20d8>)
 80098b4:	f7fd ff9a 	bl	80077ec <copy_reverse>
        qmf_wrev(sym11, N, hp1);
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098bc:	4858      	ldr	r0, [pc, #352]	; (8009a20 <filtcoef+0x20d8>)
 80098be:	f7fd ffc0 	bl	8007842 <qmf_wrev>
        copy(sym11, N, lp2);
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098c6:	4856      	ldr	r0, [pc, #344]	; (8009a20 <filtcoef+0x20d8>)
 80098c8:	f7fe f817 	bl	80078fa <copy>
        qmf_even(sym11, N, hp2);
 80098cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80098ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098d0:	4853      	ldr	r0, [pc, #332]	; (8009a20 <filtcoef+0x20d8>)
 80098d2:	f7fd ffd4 	bl	800787e <qmf_even>
        return N;
 80098d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098d8:	e14e      	b.n	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym12")){
 80098da:	4952      	ldr	r1, [pc, #328]	; (8009a24 <filtcoef+0x20dc>)
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f7f6 fcaf 	bl	8000240 <strcmp>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d115      	bne.n	8009914 <filtcoef+0x1fcc>
        copy_reverse(sym12, N, lp1);
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098ec:	484e      	ldr	r0, [pc, #312]	; (8009a28 <filtcoef+0x20e0>)
 80098ee:	f7fd ff7d 	bl	80077ec <copy_reverse>
        qmf_wrev(sym12, N, hp1);
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098f6:	484c      	ldr	r0, [pc, #304]	; (8009a28 <filtcoef+0x20e0>)
 80098f8:	f7fd ffa3 	bl	8007842 <qmf_wrev>
        copy(sym12, N, lp2);
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009900:	4849      	ldr	r0, [pc, #292]	; (8009a28 <filtcoef+0x20e0>)
 8009902:	f7fd fffa 	bl	80078fa <copy>
        qmf_even(sym12, N, hp2);
 8009906:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009908:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800990a:	4847      	ldr	r0, [pc, #284]	; (8009a28 <filtcoef+0x20e0>)
 800990c:	f7fd ffb7 	bl	800787e <qmf_even>
        return N;
 8009910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009912:	e131      	b.n	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym13")){
 8009914:	4945      	ldr	r1, [pc, #276]	; (8009a2c <filtcoef+0x20e4>)
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f7f6 fc92 	bl	8000240 <strcmp>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d115      	bne.n	800994e <filtcoef+0x2006>
        copy_reverse(sym13, N, lp1);
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009926:	4842      	ldr	r0, [pc, #264]	; (8009a30 <filtcoef+0x20e8>)
 8009928:	f7fd ff60 	bl	80077ec <copy_reverse>
        qmf_wrev(sym13, N, hp1);
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009930:	483f      	ldr	r0, [pc, #252]	; (8009a30 <filtcoef+0x20e8>)
 8009932:	f7fd ff86 	bl	8007842 <qmf_wrev>
        copy(sym13, N, lp2);
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800993a:	483d      	ldr	r0, [pc, #244]	; (8009a30 <filtcoef+0x20e8>)
 800993c:	f7fd ffdd 	bl	80078fa <copy>
        qmf_even(sym13, N, hp2);
 8009940:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009942:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009944:	483a      	ldr	r0, [pc, #232]	; (8009a30 <filtcoef+0x20e8>)
 8009946:	f7fd ff9a 	bl	800787e <qmf_even>
        return N;
 800994a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800994c:	e114      	b.n	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym14")){
 800994e:	4939      	ldr	r1, [pc, #228]	; (8009a34 <filtcoef+0x20ec>)
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f7f6 fc75 	bl	8000240 <strcmp>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d115      	bne.n	8009988 <filtcoef+0x2040>
        copy_reverse(sym14, N, lp1);
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009960:	4835      	ldr	r0, [pc, #212]	; (8009a38 <filtcoef+0x20f0>)
 8009962:	f7fd ff43 	bl	80077ec <copy_reverse>
        qmf_wrev(sym14, N, hp1);
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800996a:	4833      	ldr	r0, [pc, #204]	; (8009a38 <filtcoef+0x20f0>)
 800996c:	f7fd ff69 	bl	8007842 <qmf_wrev>
        copy(sym14, N, lp2);
 8009970:	683a      	ldr	r2, [r7, #0]
 8009972:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009974:	4830      	ldr	r0, [pc, #192]	; (8009a38 <filtcoef+0x20f0>)
 8009976:	f7fd ffc0 	bl	80078fa <copy>
        qmf_even(sym14, N, hp2);
 800997a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800997c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800997e:	482e      	ldr	r0, [pc, #184]	; (8009a38 <filtcoef+0x20f0>)
 8009980:	f7fd ff7d 	bl	800787e <qmf_even>
        return N;
 8009984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009986:	e0f7      	b.n	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym15")){
 8009988:	492c      	ldr	r1, [pc, #176]	; (8009a3c <filtcoef+0x20f4>)
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f7f6 fc58 	bl	8000240 <strcmp>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d115      	bne.n	80099c2 <filtcoef+0x207a>
        copy_reverse(sym15, N, lp1);
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800999a:	4829      	ldr	r0, [pc, #164]	; (8009a40 <filtcoef+0x20f8>)
 800999c:	f7fd ff26 	bl	80077ec <copy_reverse>
        qmf_wrev(sym15, N, hp1);
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099a4:	4826      	ldr	r0, [pc, #152]	; (8009a40 <filtcoef+0x20f8>)
 80099a6:	f7fd ff4c 	bl	8007842 <qmf_wrev>
        copy(sym15, N, lp2);
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099ae:	4824      	ldr	r0, [pc, #144]	; (8009a40 <filtcoef+0x20f8>)
 80099b0:	f7fd ffa3 	bl	80078fa <copy>
        qmf_even(sym15, N, hp2);
 80099b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099b8:	4821      	ldr	r0, [pc, #132]	; (8009a40 <filtcoef+0x20f8>)
 80099ba:	f7fd ff60 	bl	800787e <qmf_even>
        return N;
 80099be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099c0:	e0da      	b.n	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym16")){
 80099c2:	4920      	ldr	r1, [pc, #128]	; (8009a44 <filtcoef+0x20fc>)
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f7f6 fc3b 	bl	8000240 <strcmp>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d13d      	bne.n	8009a4c <filtcoef+0x2104>
        copy_reverse(sym16, N, lp1);
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099d4:	481c      	ldr	r0, [pc, #112]	; (8009a48 <filtcoef+0x2100>)
 80099d6:	f7fd ff09 	bl	80077ec <copy_reverse>
        qmf_wrev(sym16, N, hp1);
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099de:	481a      	ldr	r0, [pc, #104]	; (8009a48 <filtcoef+0x2100>)
 80099e0:	f7fd ff2f 	bl	8007842 <qmf_wrev>
        copy(sym16, N, lp2);
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099e8:	4817      	ldr	r0, [pc, #92]	; (8009a48 <filtcoef+0x2100>)
 80099ea:	f7fd ff86 	bl	80078fa <copy>
        qmf_even(sym16, N, hp2);
 80099ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099f2:	4815      	ldr	r0, [pc, #84]	; (8009a48 <filtcoef+0x2100>)
 80099f4:	f7fd ff43 	bl	800787e <qmf_even>
        return N;
 80099f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099fa:	e0bd      	b.n	8009b78 <filtcoef+0x2230>
 80099fc:	0800dc5c 	.word	0x0800dc5c
 8009a00:	080136d8 	.word	0x080136d8
 8009a04:	0800dc64 	.word	0x0800dc64
 8009a08:	08013748 	.word	0x08013748
 8009a0c:	0800dc6c 	.word	0x0800dc6c
 8009a10:	080137c8 	.word	0x080137c8
 8009a14:	0800dc74 	.word	0x0800dc74
 8009a18:	08013858 	.word	0x08013858
 8009a1c:	0800dc7c 	.word	0x0800dc7c
 8009a20:	080138f8 	.word	0x080138f8
 8009a24:	0800dc84 	.word	0x0800dc84
 8009a28:	080139a8 	.word	0x080139a8
 8009a2c:	0800dc8c 	.word	0x0800dc8c
 8009a30:	08013a68 	.word	0x08013a68
 8009a34:	0800dc94 	.word	0x0800dc94
 8009a38:	08013b38 	.word	0x08013b38
 8009a3c:	0800dc9c 	.word	0x0800dc9c
 8009a40:	08013c18 	.word	0x08013c18
 8009a44:	0800dca4 	.word	0x0800dca4
 8009a48:	08013d08 	.word	0x08013d08
    }
    else if (!strcmp(name, "sym17")){
 8009a4c:	494c      	ldr	r1, [pc, #304]	; (8009b80 <filtcoef+0x2238>)
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f7f6 fbf6 	bl	8000240 <strcmp>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d115      	bne.n	8009a86 <filtcoef+0x213e>
        copy_reverse(sym17, N, lp1);
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a5e:	4849      	ldr	r0, [pc, #292]	; (8009b84 <filtcoef+0x223c>)
 8009a60:	f7fd fec4 	bl	80077ec <copy_reverse>
        qmf_wrev(sym17, N, hp1);
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a68:	4846      	ldr	r0, [pc, #280]	; (8009b84 <filtcoef+0x223c>)
 8009a6a:	f7fd feea 	bl	8007842 <qmf_wrev>
        copy(sym17, N, lp2);
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a72:	4844      	ldr	r0, [pc, #272]	; (8009b84 <filtcoef+0x223c>)
 8009a74:	f7fd ff41 	bl	80078fa <copy>
        qmf_even(sym17, N, hp2);
 8009a78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a7c:	4841      	ldr	r0, [pc, #260]	; (8009b84 <filtcoef+0x223c>)
 8009a7e:	f7fd fefe 	bl	800787e <qmf_even>
        return N;
 8009a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a84:	e078      	b.n	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym18")){
 8009a86:	4940      	ldr	r1, [pc, #256]	; (8009b88 <filtcoef+0x2240>)
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f7f6 fbd9 	bl	8000240 <strcmp>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d115      	bne.n	8009ac0 <filtcoef+0x2178>
        copy_reverse(sym18, N, lp1);
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a98:	483c      	ldr	r0, [pc, #240]	; (8009b8c <filtcoef+0x2244>)
 8009a9a:	f7fd fea7 	bl	80077ec <copy_reverse>
        qmf_wrev(sym18, N, hp1);
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009aa2:	483a      	ldr	r0, [pc, #232]	; (8009b8c <filtcoef+0x2244>)
 8009aa4:	f7fd fecd 	bl	8007842 <qmf_wrev>
        copy(sym18, N, lp2);
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009aac:	4837      	ldr	r0, [pc, #220]	; (8009b8c <filtcoef+0x2244>)
 8009aae:	f7fd ff24 	bl	80078fa <copy>
        qmf_even(sym18, N, hp2);
 8009ab2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ab4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ab6:	4835      	ldr	r0, [pc, #212]	; (8009b8c <filtcoef+0x2244>)
 8009ab8:	f7fd fee1 	bl	800787e <qmf_even>
        return N;
 8009abc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009abe:	e05b      	b.n	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym19")){
 8009ac0:	4933      	ldr	r1, [pc, #204]	; (8009b90 <filtcoef+0x2248>)
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f7f6 fbbc 	bl	8000240 <strcmp>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d115      	bne.n	8009afa <filtcoef+0x21b2>
        copy_reverse(sym19, N, lp1);
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ad2:	4830      	ldr	r0, [pc, #192]	; (8009b94 <filtcoef+0x224c>)
 8009ad4:	f7fd fe8a 	bl	80077ec <copy_reverse>
        qmf_wrev(sym19, N, hp1);
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009adc:	482d      	ldr	r0, [pc, #180]	; (8009b94 <filtcoef+0x224c>)
 8009ade:	f7fd feb0 	bl	8007842 <qmf_wrev>
        copy(sym19, N, lp2);
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ae6:	482b      	ldr	r0, [pc, #172]	; (8009b94 <filtcoef+0x224c>)
 8009ae8:	f7fd ff07 	bl	80078fa <copy>
        qmf_even(sym19, N, hp2);
 8009aec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009aee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009af0:	4828      	ldr	r0, [pc, #160]	; (8009b94 <filtcoef+0x224c>)
 8009af2:	f7fd fec4 	bl	800787e <qmf_even>
        return N;
 8009af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009af8:	e03e      	b.n	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym20")){
 8009afa:	4927      	ldr	r1, [pc, #156]	; (8009b98 <filtcoef+0x2250>)
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f7f6 fb9f 	bl	8000240 <strcmp>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d115      	bne.n	8009b34 <filtcoef+0x21ec>
        copy_reverse(sym20, N, lp1);
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b0c:	4823      	ldr	r0, [pc, #140]	; (8009b9c <filtcoef+0x2254>)
 8009b0e:	f7fd fe6d 	bl	80077ec <copy_reverse>
        qmf_wrev(sym20, N, hp1);
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b16:	4821      	ldr	r0, [pc, #132]	; (8009b9c <filtcoef+0x2254>)
 8009b18:	f7fd fe93 	bl	8007842 <qmf_wrev>
        copy(sym20, N, lp2);
 8009b1c:	683a      	ldr	r2, [r7, #0]
 8009b1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b20:	481e      	ldr	r0, [pc, #120]	; (8009b9c <filtcoef+0x2254>)
 8009b22:	f7fd feea 	bl	80078fa <copy>
        qmf_even(sym20, N, hp2);
 8009b26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b2a:	481c      	ldr	r0, [pc, #112]	; (8009b9c <filtcoef+0x2254>)
 8009b2c:	f7fd fea7 	bl	800787e <qmf_even>
        return N;
 8009b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b32:	e021      	b.n	8009b78 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "meyer")){
 8009b34:	491a      	ldr	r1, [pc, #104]	; (8009ba0 <filtcoef+0x2258>)
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f7f6 fb82 	bl	8000240 <strcmp>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d115      	bne.n	8009b6e <filtcoef+0x2226>
        copy_reverse(meyer, N, lp1);
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b46:	4817      	ldr	r0, [pc, #92]	; (8009ba4 <filtcoef+0x225c>)
 8009b48:	f7fd fe50 	bl	80077ec <copy_reverse>
        qmf_wrev(meyer, N, hp1);
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b50:	4814      	ldr	r0, [pc, #80]	; (8009ba4 <filtcoef+0x225c>)
 8009b52:	f7fd fe76 	bl	8007842 <qmf_wrev>
        copy(meyer, N, lp2);
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b5a:	4812      	ldr	r0, [pc, #72]	; (8009ba4 <filtcoef+0x225c>)
 8009b5c:	f7fd fecd 	bl	80078fa <copy>
        qmf_even(meyer, N, hp2);
 8009b60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b64:	480f      	ldr	r0, [pc, #60]	; (8009ba4 <filtcoef+0x225c>)
 8009b66:	f7fd fe8a 	bl	800787e <qmf_even>
        return N;
 8009b6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b6c:	e004      	b.n	8009b78 <filtcoef+0x2230>
    }

	else {
		printf("\n Filter Not in Database \n");
 8009b6e:	480e      	ldr	r0, [pc, #56]	; (8009ba8 <filtcoef+0x2260>)
 8009b70:	f001 fb6a 	bl	800b248 <puts>
		return -1;
 8009b74:	f04f 33ff 	mov.w	r3, #4294967295
	}

	return 0;
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3760      	adds	r7, #96	; 0x60
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	0800dcac 	.word	0x0800dcac
 8009b84:	08013e08 	.word	0x08013e08
 8009b88:	0800dcb4 	.word	0x0800dcb4
 8009b8c:	08013f18 	.word	0x08013f18
 8009b90:	0800dcbc 	.word	0x0800dcbc
 8009b94:	08014038 	.word	0x08014038
 8009b98:	0800dcc4 	.word	0x0800dcc4
 8009b9c:	08014168 	.word	0x08014168
 8009ba0:	0800da9c 	.word	0x0800da9c
 8009ba4:	08014a98 	.word	0x08014a98
 8009ba8:	0800d948 	.word	0x0800d948

08009bac <wave_init>:
#include <string.h>

#include "../../../Restored/wavelib/src/cwt.h"
#include "../../../Restored/wavelib/src/wtmath.h"

wave_object wave_init(const char* wname) {
 8009bac:	b5b0      	push	{r4, r5, r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af02      	add	r7, sp, #8
 8009bb2:	6078      	str	r0, [r7, #4]
	wave_object obj = NULL;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60bb      	str	r3, [r7, #8]
	int retval;
	retval = 0;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60fb      	str	r3, [r7, #12]

	if (wname != NULL) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <wave_init+0x1e>
		retval = filtlength(wname);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7fd fbdc 	bl	8007380 <filtlength>
 8009bc8:	60f8      	str	r0, [r7, #12]
		//obj->filtlength = retval;
		//strcopy(obj->wname, wname);
	}

	obj = (wave_object)malloc(sizeof(struct wave_set) + sizeof(double)* 4 * retval);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	015b      	lsls	r3, r3, #5
 8009bce:	3358      	adds	r3, #88	; 0x58
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f001 f8c7 	bl	800ad64 <malloc>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	60bb      	str	r3, [r7, #8]

	obj->filtlength = retval;
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	635a      	str	r2, [r3, #52]	; 0x34
	obj->lpd_len = obj->hpd_len = obj->lpr_len = obj->hpr_len = obj->filtlength;
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	645a      	str	r2, [r3, #68]	; 0x44
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	641a      	str	r2, [r3, #64]	; 0x40
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	63da      	str	r2, [r3, #60]	; 0x3c
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	639a      	str	r2, [r3, #56]	; 0x38
	strcpy(obj->wname, wname);
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	6879      	ldr	r1, [r7, #4]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f001 fd80 	bl	800b70a <strcpy>
	if (wname != NULL) {
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01e      	beq.n	8009c4e <wave_init+0xa2>
		filtcoef(wname,obj->params,obj->params+retval,obj->params+2*retval,obj->params+3*retval);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	18d4      	adds	r4, r2, r3
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	011b      	lsls	r3, r3, #4
 8009c2c:	18d5      	adds	r5, r2, r3
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4613      	mov	r3, r2
 8009c38:	005b      	lsls	r3, r3, #1
 8009c3a:	4413      	add	r3, r2
 8009c3c:	00db      	lsls	r3, r3, #3
 8009c3e:	440b      	add	r3, r1
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	462b      	mov	r3, r5
 8009c44:	4622      	mov	r2, r4
 8009c46:	4601      	mov	r1, r0
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fd fe7d 	bl	8007948 <filtcoef>
	}
	obj->lpd = &obj->params[0];
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	649a      	str	r2, [r3, #72]	; 0x48
	obj->hpd = &obj->params[retval];
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	330b      	adds	r3, #11
 8009c5c:	00db      	lsls	r3, r3, #3
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	441a      	add	r2, r3
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	64da      	str	r2, [r3, #76]	; 0x4c
	obj->lpr = &obj->params[2 * retval];
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	330b      	adds	r3, #11
 8009c6c:	00db      	lsls	r3, r3, #3
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	441a      	add	r2, r3
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	651a      	str	r2, [r3, #80]	; 0x50
	obj->hpr = &obj->params[3 * retval];
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	005b      	lsls	r3, r3, #1
 8009c7c:	4413      	add	r3, r2
 8009c7e:	330b      	adds	r3, #11
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	441a      	add	r2, r3
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	655a      	str	r2, [r3, #84]	; 0x54
	return obj;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bdb0      	pop	{r4, r5, r7, pc}

08009c94 <wtree_init>:
	//wave_summary(obj->wave);

	return obj;
}

wtree_object wtree_init(wave_object wave, int siglength,int J) {
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08c      	sub	sp, #48	; 0x30
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
    int size,i,MaxIter,temp,temp2,elength,nodes;
	wtree_object obj = NULL;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	61fb      	str	r3, [r7, #28]

	size = wave->filtlength;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca8:	61bb      	str	r3, [r7, #24]

	if (J > 100) {
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b64      	cmp	r3, #100	; 0x64
 8009cae:	dd06      	ble.n	8009cbe <wtree_init+0x2a>
		printf(" \r\n The Decomposition Iterations Cannot Exceed 100. Exiting  \r\n");
 8009cb0:	4865      	ldr	r0, [pc, #404]	; (8009e48 <wtree_init+0x1b4>)
 8009cb2:	f001 fac9 	bl	800b248 <puts>
		exit(-1);
 8009cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cba:	f001 f841 	bl	800ad40 <exit>
	}


	MaxIter = wmaxiter(siglength, size);
 8009cbe:	69b9      	ldr	r1, [r7, #24]
 8009cc0:	68b8      	ldr	r0, [r7, #8]
 8009cc2:	f001 f805 	bl	800acd0 <wmaxiter>
 8009cc6:	6178      	str	r0, [r7, #20]
	if (J > MaxIter) {
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	dd07      	ble.n	8009ce0 <wtree_init+0x4c>
		printf(" \r\n Error - The Signal Can only be iterated %d times using this wavelet. Exiting \r\n", MaxIter);
 8009cd0:	6979      	ldr	r1, [r7, #20]
 8009cd2:	485e      	ldr	r0, [pc, #376]	; (8009e4c <wtree_init+0x1b8>)
 8009cd4:	f001 fa52 	bl	800b17c <iprintf>
		exit(-1);
 8009cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cdc:	f001 f830 	bl	800ad40 <exit>
	}
	temp = 1;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	62bb      	str	r3, [r7, #40]	; 0x28
	elength = 0;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24
	nodes = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	623b      	str	r3, [r7, #32]
	for(i = 0; i < J;++i) {
 8009cec:	2300      	movs	r3, #0
 8009cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cf0:	e014      	b.n	8009d1c <wtree_init+0x88>
	  temp *= 2;
 8009cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf4:	005b      	lsls	r3, r3, #1
 8009cf6:	62bb      	str	r3, [r7, #40]	; 0x28
	  nodes += temp;
 8009cf8:	6a3a      	ldr	r2, [r7, #32]
 8009cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfc:	4413      	add	r3, r2
 8009cfe:	623b      	str	r3, [r7, #32]
	  temp2 = (size - 2) * (temp - 1);
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	3b02      	subs	r3, #2
 8009d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d06:	3a01      	subs	r2, #1
 8009d08:	fb02 f303 	mul.w	r3, r2, r3
 8009d0c:	613b      	str	r3, [r7, #16]
	  elength += temp2;
 8009d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	4413      	add	r3, r2
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24
	for(i = 0; i < J;++i) {
 8009d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d18:	3301      	adds	r3, #1
 8009d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	dbe6      	blt.n	8009cf2 <wtree_init+0x5e>
	}

	obj = (wtree_object)malloc(sizeof(struct wtree_set) + sizeof(double)* (siglength * (J + 1) + elength + nodes + J + 1));
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	3301      	adds	r3, #1
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	fb03 f202 	mul.w	r2, r3, r2
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	441a      	add	r2, r3
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	441a      	add	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4413      	add	r3, r2
 8009d3a:	333f      	adds	r3, #63	; 0x3f
 8009d3c:	00db      	lsls	r3, r3, #3
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f001 f810 	bl	800ad64 <malloc>
 8009d44:	4603      	mov	r3, r0
 8009d46:	61fb      	str	r3, [r7, #28]
	obj->outlength = siglength * (J + 1) + elength;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	fb03 f202 	mul.w	r2, r3, r2
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	441a      	add	r2, r3
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	619a      	str	r2, [r3, #24]
	strcpy(obj->ext, "sym");
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	332c      	adds	r3, #44	; 0x2c
 8009d5e:	4a3c      	ldr	r2, [pc, #240]	; (8009e50 <wtree_init+0x1bc>)
 8009d60:	6810      	ldr	r0, [r2, #0]
 8009d62:	6018      	str	r0, [r3, #0]

	obj->wave = wave;
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	601a      	str	r2, [r3, #0]
	obj->siglength = siglength;
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	615a      	str	r2, [r3, #20]
	obj->J = J;
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	621a      	str	r2, [r3, #32]
	obj->MaxIter = MaxIter;
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	625a      	str	r2, [r3, #36]	; 0x24
	strcpy(obj->method, "dwt");
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	3308      	adds	r3, #8
 8009d80:	4a34      	ldr	r2, [pc, #208]	; (8009e54 <wtree_init+0x1c0>)
 8009d82:	6810      	ldr	r0, [r2, #0]
 8009d84:	6018      	str	r0, [r3, #0]

	if (siglength % 2 == 0) {
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d103      	bne.n	8009d98 <wtree_init+0x104>
		obj->even = 1;
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	2201      	movs	r2, #1
 8009d94:	629a      	str	r2, [r3, #40]	; 0x28
 8009d96:	e002      	b.n	8009d9e <wtree_init+0x10a>
	}
	else {
		obj->even = 0;
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	629a      	str	r2, [r3, #40]	; 0x28
	}

	obj->cobj = NULL;
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	2200      	movs	r2, #0
 8009da2:	605a      	str	r2, [r3, #4]
	obj->nodes = nodes;
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	6a3a      	ldr	r2, [r7, #32]
 8009da8:	63da      	str	r2, [r3, #60]	; 0x3c

	obj->cfftset = 0;
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	2200      	movs	r2, #0
 8009dae:	641a      	str	r2, [r3, #64]	; 0x40
	obj->lenlength = J + 2;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	1c9a      	adds	r2, r3, #2
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	61da      	str	r2, [r3, #28]
	obj->output = &obj->params[0];
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	obj->nodelength = (int*) &obj->params[siglength * (J + 1) + elength];
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	fb03 f202 	mul.w	r2, r3, r2
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	4413      	add	r3, r2
 8009dd2:	333e      	adds	r3, #62	; 0x3e
 8009dd4:	00db      	lsls	r3, r3, #3
 8009dd6:	69fa      	ldr	r2, [r7, #28]
 8009dd8:	441a      	add	r2, r3
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	obj->coeflength = (int*)&obj->params[siglength * (J + 1) + elength + nodes];
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3301      	adds	r3, #1
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	fb03 f202 	mul.w	r2, r3, r2
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	441a      	add	r2, r3
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	4413      	add	r3, r2
 8009df2:	333e      	adds	r3, #62	; 0x3e
 8009df4:	00db      	lsls	r3, r3, #3
 8009df6:	69fa      	ldr	r2, [r7, #28]
 8009df8:	441a      	add	r2, r3
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for (i = 0; i < siglength * (J + 1) + elength + nodes + J + 1; ++i) {
 8009e00:	2300      	movs	r3, #0
 8009e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e04:	e00d      	b.n	8009e22 <wtree_init+0x18e>
	       obj->params[i] = 0.0;
 8009e06:	69fa      	ldr	r2, [r7, #28]
 8009e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0a:	333e      	adds	r3, #62	; 0x3e
 8009e0c:	00db      	lsls	r3, r3, #3
 8009e0e:	18d1      	adds	r1, r2, r3
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	f04f 0300 	mov.w	r3, #0
 8009e18:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < siglength * (J + 1) + elength + nodes + J + 1; ++i) {
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	3301      	adds	r3, #1
 8009e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3301      	adds	r3, #1
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	fb03 f202 	mul.w	r2, r3, r2
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	441a      	add	r2, r3
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	441a      	add	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4413      	add	r3, r2
 8009e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	dde3      	ble.n	8009e06 <wtree_init+0x172>
	}

	//wave_summary(obj->wave);

	return obj;
 8009e3e:	69fb      	ldr	r3, [r7, #28]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3730      	adds	r7, #48	; 0x30
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	0800dccc 	.word	0x0800dccc
 8009e4c:	0800dd0c 	.word	0x0800dd0c
 8009e50:	0800dd60 	.word	0x0800dd60
 8009e54:	0800dd64 	.word	0x0800dd64

08009e58 <wtree_per>:

	dwt_per_stride(inp,N,wt->wave->lpd,wt->wave->hpd,wt->wave->lpd_len,cA,len_cA,cD,1,1);

}

static void wtree_per(wtree_object wt, double *inp, int N, double *cA, int len_cA, double *cD) {
 8009e58:	b480      	push	{r7}
 8009e5a:	b08b      	sub	sp, #44	; 0x2c
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	603b      	str	r3, [r7, #0]
	int l, l2, isodd, i, t, len_avg;

	len_avg = wt->wave->lpd_len;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6c:	61fb      	str	r3, [r7, #28]
	l2 = len_avg / 2;
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	da00      	bge.n	8009e76 <wtree_per+0x1e>
 8009e74:	3301      	adds	r3, #1
 8009e76:	105b      	asrs	r3, r3, #1
 8009e78:	61bb      	str	r3, [r7, #24]
	isodd = N % 2;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	bfb8      	it	lt
 8009e84:	425b      	neglt	r3, r3
 8009e86:	617b      	str	r3, [r7, #20]

	for (i = 0; i < len_cA; ++i) {
 8009e88:	2300      	movs	r3, #0
 8009e8a:	623b      	str	r3, [r7, #32]
 8009e8c:	e28e      	b.n	800a3ac <wtree_per+0x554>
		t = 2 * i + l2;
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	4413      	add	r3, r2
 8009e96:	613b      	str	r3, [r7, #16]
		cA[i] = 0.0;
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	00db      	lsls	r3, r3, #3
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	18d1      	adds	r1, r2, r3
 8009ea0:	f04f 0200 	mov.w	r2, #0
 8009ea4:	f04f 0300 	mov.w	r3, #0
 8009ea8:	e9c1 2300 	strd	r2, r3, [r1]
		cD[i] = 0.0;
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009eb2:	18d1      	adds	r1, r2, r3
 8009eb4:	f04f 0200 	mov.w	r2, #0
 8009eb8:	f04f 0300 	mov.w	r3, #0
 8009ebc:	e9c1 2300 	strd	r2, r3, [r1]
		for (l = 0; l < len_avg; ++l) {
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ec4:	e26a      	b.n	800a39c <wtree_per+0x544>
			if ((t - l) >= l2 && (t - l) < N) {
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	69ba      	ldr	r2, [r7, #24]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	dc46      	bgt.n	8009f60 <wtree_per+0x108>
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	dd40      	ble.n	8009f60 <wtree_per+0x108>
				cA[i] += wt->wave->lpd[l] * inp[t - l];
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	00db      	lsls	r3, r3, #3
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	ed93 6b00 	vldr	d6, [r3]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	00db      	lsls	r3, r3, #3
 8009ef4:	4413      	add	r3, r2
 8009ef6:	ed93 5b00 	vldr	d5, [r3]
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	00db      	lsls	r3, r3, #3
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	4413      	add	r3, r2
 8009f06:	ed93 7b00 	vldr	d7, [r3]
 8009f0a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	00db      	lsls	r3, r3, #3
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	4413      	add	r3, r2
 8009f16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009f1a:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l];
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	00db      	lsls	r3, r3, #3
 8009f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f24:	4413      	add	r3, r2
 8009f26:	ed93 6b00 	vldr	d6, [r3]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	4413      	add	r3, r2
 8009f36:	ed93 5b00 	vldr	d5, [r3]
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	4413      	add	r3, r2
 8009f46:	ed93 7b00 	vldr	d7, [r3]
 8009f4a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009f4e:	6a3b      	ldr	r3, [r7, #32]
 8009f50:	00db      	lsls	r3, r3, #3
 8009f52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f54:	4413      	add	r3, r2
 8009f56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009f5a:	ed83 7b00 	vstr	d7, [r3]
 8009f5e:	e21a      	b.n	800a396 <wtree_per+0x53e>
			}
			else if ((t - l) < l2 && (t - l) >= 0) {
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	69ba      	ldr	r2, [r7, #24]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	dd45      	ble.n	8009ff8 <wtree_per+0x1a0>
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	db40      	blt.n	8009ff8 <wtree_per+0x1a0>
				cA[i] += wt->wave->lpd[l] * inp[t - l];
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	00db      	lsls	r3, r3, #3
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	ed93 6b00 	vldr	d6, [r3]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	4413      	add	r3, r2
 8009f8e:	ed93 5b00 	vldr	d5, [r3]
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	00db      	lsls	r3, r3, #3
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	ed93 7b00 	vldr	d7, [r3]
 8009fa2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	00db      	lsls	r3, r3, #3
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	4413      	add	r3, r2
 8009fae:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009fb2:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l];
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	00db      	lsls	r3, r3, #3
 8009fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fbc:	4413      	add	r3, r2
 8009fbe:	ed93 6b00 	vldr	d6, [r3]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	00db      	lsls	r3, r3, #3
 8009fcc:	4413      	add	r3, r2
 8009fce:	ed93 5b00 	vldr	d5, [r3]
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	00db      	lsls	r3, r3, #3
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	4413      	add	r3, r2
 8009fde:	ed93 7b00 	vldr	d7, [r3]
 8009fe2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	00db      	lsls	r3, r3, #3
 8009fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fec:	4413      	add	r3, r2
 8009fee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009ff2:	ed83 7b00 	vstr	d7, [r3]
 8009ff6:	e1ce      	b.n	800a396 <wtree_per+0x53e>
			}
			else if ((t - l) < 0 && isodd == 0) {
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	da47      	bge.n	800a092 <wtree_per+0x23a>
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d144      	bne.n	800a092 <wtree_per+0x23a>
				cA[i] += wt->wave->lpd[l] * inp[t - l + N];
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	4413      	add	r3, r2
 800a010:	ed93 6b00 	vldr	d6, [r3]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	00db      	lsls	r3, r3, #3
 800a01e:	4413      	add	r3, r2
 800a020:	ed93 5b00 	vldr	d5, [r3]
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a028:	1ad2      	subs	r2, r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4413      	add	r3, r2
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	4413      	add	r3, r2
 800a034:	ed93 7b00 	vldr	d7, [r3]
 800a038:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	4413      	add	r3, r2
 800a044:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a048:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l + N];
 800a04c:	6a3b      	ldr	r3, [r7, #32]
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a052:	4413      	add	r3, r2
 800a054:	ed93 6b00 	vldr	d6, [r3]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	00db      	lsls	r3, r3, #3
 800a062:	4413      	add	r3, r2
 800a064:	ed93 5b00 	vldr	d5, [r3]
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	1ad2      	subs	r2, r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4413      	add	r3, r2
 800a072:	00db      	lsls	r3, r3, #3
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	4413      	add	r3, r2
 800a078:	ed93 7b00 	vldr	d7, [r3]
 800a07c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a086:	4413      	add	r3, r2
 800a088:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a08c:	ed83 7b00 	vstr	d7, [r3]
 800a090:	e181      	b.n	800a396 <wtree_per+0x53e>
			}
			else if ((t - l) < 0 && isodd == 1) {
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f280 8094 	bge.w	800a1c6 <wtree_per+0x36e>
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	f040 8090 	bne.w	800a1c6 <wtree_per+0x36e>
				if ((t - l) != -1) {
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b0:	d046      	beq.n	800a140 <wtree_per+0x2e8>
					cA[i] += wt->wave->lpd[l] * inp[t - l + N + 1];
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	00db      	lsls	r3, r3, #3
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	ed93 6b00 	vldr	d6, [r3]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c6:	00db      	lsls	r3, r3, #3
 800a0c8:	4413      	add	r3, r2
 800a0ca:	ed93 5b00 	vldr	d5, [r3]
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d2:	1ad2      	subs	r2, r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	3301      	adds	r3, #1
 800a0da:	00db      	lsls	r3, r3, #3
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	4413      	add	r3, r2
 800a0e0:	ed93 7b00 	vldr	d7, [r3]
 800a0e4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a0e8:	6a3b      	ldr	r3, [r7, #32]
 800a0ea:	00db      	lsls	r3, r3, #3
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a0f4:	ed83 7b00 	vstr	d7, [r3]
					cD[i] += wt->wave->hpd[l] * inp[t - l + N + 1];
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0fe:	4413      	add	r3, r2
 800a100:	ed93 6b00 	vldr	d6, [r3]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	00db      	lsls	r3, r3, #3
 800a10e:	4413      	add	r3, r2
 800a110:	ed93 5b00 	vldr	d5, [r3]
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a118:	1ad2      	subs	r2, r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4413      	add	r3, r2
 800a11e:	3301      	adds	r3, #1
 800a120:	00db      	lsls	r3, r3, #3
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	4413      	add	r3, r2
 800a126:	ed93 7b00 	vldr	d7, [r3]
 800a12a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	00db      	lsls	r3, r3, #3
 800a132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a134:	4413      	add	r3, r2
 800a136:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a13a:	ed83 7b00 	vstr	d7, [r3]
				if ((t - l) != -1) {
 800a13e:	e12a      	b.n	800a396 <wtree_per+0x53e>
				}
				else {
					cA[i] += wt->wave->lpd[l] * inp[N - 1];
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	00db      	lsls	r3, r3, #3
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	4413      	add	r3, r2
 800a148:	ed93 6b00 	vldr	d6, [r3]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	00db      	lsls	r3, r3, #3
 800a156:	4413      	add	r3, r2
 800a158:	ed93 5b00 	vldr	d5, [r3]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a162:	4413      	add	r3, r2
 800a164:	00db      	lsls	r3, r3, #3
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	4413      	add	r3, r2
 800a16a:	ed93 7b00 	vldr	d7, [r3]
 800a16e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	00db      	lsls	r3, r3, #3
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	4413      	add	r3, r2
 800a17a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a17e:	ed83 7b00 	vstr	d7, [r3]
					cD[i] += wt->wave->hpd[l] * inp[N - 1];
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	00db      	lsls	r3, r3, #3
 800a186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a188:	4413      	add	r3, r2
 800a18a:	ed93 6b00 	vldr	d6, [r3]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	4413      	add	r3, r2
 800a19a:	ed93 5b00 	vldr	d5, [r3]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a1a4:	4413      	add	r3, r2
 800a1a6:	00db      	lsls	r3, r3, #3
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	ed93 7b00 	vldr	d7, [r3]
 800a1b0:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	00db      	lsls	r3, r3, #3
 800a1b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1ba:	4413      	add	r3, r2
 800a1bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a1c0:	ed83 7b00 	vstr	d7, [r3]
				if ((t - l) != -1) {
 800a1c4:	e0e7      	b.n	800a396 <wtree_per+0x53e>
				}
			}
			else if ((t - l) >= N && isodd == 0) {
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	dc47      	bgt.n	800a262 <wtree_per+0x40a>
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d144      	bne.n	800a262 <wtree_per+0x40a>
				cA[i] += wt->wave->lpd[l] * inp[t - l - N];
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	00db      	lsls	r3, r3, #3
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	4413      	add	r3, r2
 800a1e0:	ed93 6b00 	vldr	d6, [r3]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	00db      	lsls	r3, r3, #3
 800a1ee:	4413      	add	r3, r2
 800a1f0:	ed93 5b00 	vldr	d5, [r3]
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	1ad2      	subs	r2, r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	00db      	lsls	r3, r3, #3
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	4413      	add	r3, r2
 800a204:	ed93 7b00 	vldr	d7, [r3]
 800a208:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a20c:	6a3b      	ldr	r3, [r7, #32]
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	4413      	add	r3, r2
 800a214:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a218:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l - N];
 800a21c:	6a3b      	ldr	r3, [r7, #32]
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a222:	4413      	add	r3, r2
 800a224:	ed93 6b00 	vldr	d6, [r3]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	00db      	lsls	r3, r3, #3
 800a232:	4413      	add	r3, r2
 800a234:	ed93 5b00 	vldr	d5, [r3]
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	1ad2      	subs	r2, r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	00db      	lsls	r3, r3, #3
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	4413      	add	r3, r2
 800a248:	ed93 7b00 	vldr	d7, [r3]
 800a24c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	00db      	lsls	r3, r3, #3
 800a254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a256:	4413      	add	r3, r2
 800a258:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a25c:	ed83 7b00 	vstr	d7, [r3]
 800a260:	e099      	b.n	800a396 <wtree_per+0x53e>
			}
			else if ((t - l) >= N && isodd == 1) {
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	f300 8093 	bgt.w	800a396 <wtree_per+0x53e>
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	2b01      	cmp	r3, #1
 800a274:	f040 808f 	bne.w	800a396 <wtree_per+0x53e>
				if (t - l != N) {
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	429a      	cmp	r2, r3
 800a282:	d046      	beq.n	800a312 <wtree_per+0x4ba>
					cA[i] += wt->wave->lpd[l] * inp[t - l - (N + 1)];
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	00db      	lsls	r3, r3, #3
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	4413      	add	r3, r2
 800a28c:	ed93 6b00 	vldr	d6, [r3]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	00db      	lsls	r3, r3, #3
 800a29a:	4413      	add	r3, r2
 800a29c:	ed93 5b00 	vldr	d5, [r3]
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	1ad2      	subs	r2, r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	68ba      	ldr	r2, [r7, #8]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	ed93 7b00 	vldr	d7, [r3]
 800a2b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	00db      	lsls	r3, r3, #3
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a2c6:	ed83 7b00 	vstr	d7, [r3]
					cD[i] += wt->wave->hpd[l] * inp[t - l - (N + 1)];
 800a2ca:	6a3b      	ldr	r3, [r7, #32]
 800a2cc:	00db      	lsls	r3, r3, #3
 800a2ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2d0:	4413      	add	r3, r2
 800a2d2:	ed93 6b00 	vldr	d6, [r3]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2de:	00db      	lsls	r3, r3, #3
 800a2e0:	4413      	add	r3, r2
 800a2e2:	ed93 5b00 	vldr	d5, [r3]
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	1ad2      	subs	r2, r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	ed93 7b00 	vldr	d7, [r3]
 800a2fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	00db      	lsls	r3, r3, #3
 800a304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a306:	4413      	add	r3, r2
 800a308:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a30c:	ed83 7b00 	vstr	d7, [r3]
 800a310:	e041      	b.n	800a396 <wtree_per+0x53e>
				}
				else {
					cA[i] += wt->wave->lpd[l] * inp[N - 1];
 800a312:	6a3b      	ldr	r3, [r7, #32]
 800a314:	00db      	lsls	r3, r3, #3
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	4413      	add	r3, r2
 800a31a:	ed93 6b00 	vldr	d6, [r3]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	00db      	lsls	r3, r3, #3
 800a328:	4413      	add	r3, r2
 800a32a:	ed93 5b00 	vldr	d5, [r3]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a334:	4413      	add	r3, r2
 800a336:	00db      	lsls	r3, r3, #3
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	4413      	add	r3, r2
 800a33c:	ed93 7b00 	vldr	d7, [r3]
 800a340:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a344:	6a3b      	ldr	r3, [r7, #32]
 800a346:	00db      	lsls	r3, r3, #3
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	4413      	add	r3, r2
 800a34c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a350:	ed83 7b00 	vstr	d7, [r3]
					cD[i] += wt->wave->hpd[l] * inp[N - 1];
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	00db      	lsls	r3, r3, #3
 800a358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a35a:	4413      	add	r3, r2
 800a35c:	ed93 6b00 	vldr	d6, [r3]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a368:	00db      	lsls	r3, r3, #3
 800a36a:	4413      	add	r3, r2
 800a36c:	ed93 5b00 	vldr	d5, [r3]
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a376:	4413      	add	r3, r2
 800a378:	00db      	lsls	r3, r3, #3
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	4413      	add	r3, r2
 800a37e:	ed93 7b00 	vldr	d7, [r3]
 800a382:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	00db      	lsls	r3, r3, #3
 800a38a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a38c:	4413      	add	r3, r2
 800a38e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a392:	ed83 7b00 	vstr	d7, [r3]
		for (l = 0; l < len_avg; ++l) {
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	3301      	adds	r3, #1
 800a39a:	627b      	str	r3, [r7, #36]	; 0x24
 800a39c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	f6ff ad90 	blt.w	8009ec6 <wtree_per+0x6e>
	for (i = 0; i < len_cA; ++i) {
 800a3a6:	6a3b      	ldr	r3, [r7, #32]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	623b      	str	r3, [r7, #32]
 800a3ac:	6a3a      	ldr	r2, [r7, #32]
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	f6ff ad6c 	blt.w	8009e8e <wtree_per+0x36>
		}
	}



}
 800a3b6:	bf00      	nop
 800a3b8:	bf00      	nop
 800a3ba:	372c      	adds	r7, #44	; 0x2c
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <wtree_sym>:
static void dwt_sym(wt_object wt, double *inp, int N, double *cA, int len_cA, double *cD) {

	dwt_sym_stride(inp,N,wt->wave->lpd,wt->wave->hpd,wt->wave->lpd_len,cA,len_cA,cD,1,1);
}

static void wtree_sym(wtree_object wt, double *inp, int N, double *cA, int len_cA, double *cD) {
 800a3c4:	b480      	push	{r7}
 800a3c6:	b089      	sub	sp, #36	; 0x24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
 800a3d0:	603b      	str	r3, [r7, #0]
	int i, l, t, len_avg;

	len_avg = wt->wave->lpd_len;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d8:	617b      	str	r3, [r7, #20]

	for (i = 0; i < len_cA; ++i) {
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61fb      	str	r3, [r7, #28]
 800a3de:	e113      	b.n	800a608 <wtree_sym+0x244>
		t = 2 * i + 1;
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	005b      	lsls	r3, r3, #1
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	613b      	str	r3, [r7, #16]
		cA[i] = 0.0;
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	00db      	lsls	r3, r3, #3
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	18d1      	adds	r1, r2, r3
 800a3f0:	f04f 0200 	mov.w	r2, #0
 800a3f4:	f04f 0300 	mov.w	r3, #0
 800a3f8:	e9c1 2300 	strd	r2, r3, [r1]
		cD[i] = 0.0;
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	00db      	lsls	r3, r3, #3
 800a400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a402:	18d1      	adds	r1, r2, r3
 800a404:	f04f 0200 	mov.w	r2, #0
 800a408:	f04f 0300 	mov.w	r3, #0
 800a40c:	e9c1 2300 	strd	r2, r3, [r1]
		for (l = 0; l < len_avg; ++l) {
 800a410:	2300      	movs	r3, #0
 800a412:	61bb      	str	r3, [r7, #24]
 800a414:	e0f0      	b.n	800a5f8 <wtree_sym+0x234>
			if ((t - l) >= 0 && (t - l) < N) {
 800a416:	693a      	ldr	r2, [r7, #16]
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	db46      	blt.n	800a4ae <wtree_sym+0xea>
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	dd40      	ble.n	800a4ae <wtree_sym+0xea>
				cA[i] += wt->wave->lpd[l] * inp[t - l];
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	00db      	lsls	r3, r3, #3
 800a430:	683a      	ldr	r2, [r7, #0]
 800a432:	4413      	add	r3, r2
 800a434:	ed93 6b00 	vldr	d6, [r3]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	4413      	add	r3, r2
 800a444:	ed93 5b00 	vldr	d5, [r3]
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	1ad3      	subs	r3, r2, r3
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	4413      	add	r3, r2
 800a454:	ed93 7b00 	vldr	d7, [r3]
 800a458:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	00db      	lsls	r3, r3, #3
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	4413      	add	r3, r2
 800a464:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a468:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l];
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	00db      	lsls	r3, r3, #3
 800a470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a472:	4413      	add	r3, r2
 800a474:	ed93 6b00 	vldr	d6, [r3]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	00db      	lsls	r3, r3, #3
 800a482:	4413      	add	r3, r2
 800a484:	ed93 5b00 	vldr	d5, [r3]
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	00db      	lsls	r3, r3, #3
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	4413      	add	r3, r2
 800a494:	ed93 7b00 	vldr	d7, [r3]
 800a498:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4a2:	4413      	add	r3, r2
 800a4a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a4a8:	ed83 7b00 	vstr	d7, [r3]
 800a4ac:	e0a1      	b.n	800a5f2 <wtree_sym+0x22e>
			}
			else if ((t - l) < 0) {
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	da48      	bge.n	800a54a <wtree_sym+0x186>
				cA[i] += wt->wave->lpd[l] * inp[-t + l - 1];
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	683a      	ldr	r2, [r7, #0]
 800a4be:	4413      	add	r3, r2
 800a4c0:	ed93 6b00 	vldr	d6, [r3]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	00db      	lsls	r3, r3, #3
 800a4ce:	4413      	add	r3, r2
 800a4d0:	ed93 5b00 	vldr	d5, [r3]
 800a4d4:	69ba      	ldr	r2, [r7, #24]
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	461a      	mov	r2, r3
 800a4dc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a4e0:	4413      	add	r3, r2
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	ed93 7b00 	vldr	d7, [r3]
 800a4ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	00db      	lsls	r3, r3, #3
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a4fc:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[-t + l - 1];
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	00db      	lsls	r3, r3, #3
 800a504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a506:	4413      	add	r3, r2
 800a508:	ed93 6b00 	vldr	d6, [r3]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	00db      	lsls	r3, r3, #3
 800a516:	4413      	add	r3, r2
 800a518:	ed93 5b00 	vldr	d5, [r3]
 800a51c:	69ba      	ldr	r2, [r7, #24]
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	461a      	mov	r2, r3
 800a524:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a528:	4413      	add	r3, r2
 800a52a:	00db      	lsls	r3, r3, #3
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	4413      	add	r3, r2
 800a530:	ed93 7b00 	vldr	d7, [r3]
 800a534:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a53e:	4413      	add	r3, r2
 800a540:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a544:	ed83 7b00 	vstr	d7, [r3]
 800a548:	e053      	b.n	800a5f2 <wtree_sym+0x22e>
			}
			else if ((t - l) >= N) {
 800a54a:	693a      	ldr	r2, [r7, #16]
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	429a      	cmp	r2, r3
 800a554:	dc4d      	bgt.n	800a5f2 <wtree_sym+0x22e>
				cA[i] += wt->wave->lpd[l] * inp[2 * N - t + l - 1];
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	00db      	lsls	r3, r3, #3
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	4413      	add	r3, r2
 800a55e:	ed93 6b00 	vldr	d6, [r3]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	00db      	lsls	r3, r3, #3
 800a56c:	4413      	add	r3, r2
 800a56e:	ed93 5b00 	vldr	d5, [r3]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	005a      	lsls	r2, r3, #1
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	1ad2      	subs	r2, r2, r3
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	4413      	add	r3, r2
 800a57e:	461a      	mov	r2, r3
 800a580:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a584:	4413      	add	r3, r2
 800a586:	00db      	lsls	r3, r3, #3
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	4413      	add	r3, r2
 800a58c:	ed93 7b00 	vldr	d7, [r3]
 800a590:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	4413      	add	r3, r2
 800a59c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a5a0:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[2 * N - t + l - 1];
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	00db      	lsls	r3, r3, #3
 800a5a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5aa:	4413      	add	r3, r2
 800a5ac:	ed93 6b00 	vldr	d6, [r3]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	00db      	lsls	r3, r3, #3
 800a5ba:	4413      	add	r3, r2
 800a5bc:	ed93 5b00 	vldr	d5, [r3]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	005a      	lsls	r2, r3, #1
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	1ad2      	subs	r2, r2, r3
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a5d2:	4413      	add	r3, r2
 800a5d4:	00db      	lsls	r3, r3, #3
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	4413      	add	r3, r2
 800a5da:	ed93 7b00 	vldr	d7, [r3]
 800a5de:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	00db      	lsls	r3, r3, #3
 800a5e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5e8:	4413      	add	r3, r2
 800a5ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a5ee:	ed83 7b00 	vstr	d7, [r3]
		for (l = 0; l < len_avg; ++l) {
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	61bb      	str	r3, [r7, #24]
 800a5f8:	69ba      	ldr	r2, [r7, #24]
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	f6ff af0a 	blt.w	800a416 <wtree_sym+0x52>
	for (i = 0; i < len_cA; ++i) {
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	3301      	adds	r3, #1
 800a606:	61fb      	str	r3, [r7, #28]
 800a608:	69fa      	ldr	r2, [r7, #28]
 800a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60c:	429a      	cmp	r2, r3
 800a60e:	f6ff aee7 	blt.w	800a3e0 <wtree_sym+0x1c>

		}
	}


}
 800a612:	bf00      	nop
 800a614:	bf00      	nop
 800a616:	3724      	adds	r7, #36	; 0x24
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <wtree>:
	}
	
	return mra;
}

void wtree(wtree_object wt,const double *inp) {
 800a620:	b590      	push	{r4, r7, lr}
 800a622:	b095      	sub	sp, #84	; 0x54
 800a624:	af02      	add	r7, sp, #8
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
	int i,J,temp_len,iter,N,lp,p2,k,N2,Np;
	int len_cA,t,t2,it1;
	double *orig;

	temp_len = wt->siglength;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	695b      	ldr	r3, [r3, #20]
 800a62e:	643b      	str	r3, [r7, #64]	; 0x40
	J = wt->J;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	61bb      	str	r3, [r7, #24]
	wt->length[J + 1] = temp_len;
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	1c5a      	adds	r2, r3, #1
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3212      	adds	r2, #18
 800a63e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	wt->outlength = 0;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	619a      	str	r2, [r3, #24]
	wt->zpad = 0;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	645a      	str	r2, [r3, #68]	; 0x44
	orig = (double*)malloc(sizeof(double)* temp_len);
 800a650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a652:	00db      	lsls	r3, r3, #3
 800a654:	4618      	mov	r0, r3
 800a656:	f000 fb85 	bl	800ad64 <malloc>
 800a65a:	4603      	mov	r3, r0
 800a65c:	617b      	str	r3, [r7, #20]
		wt->zpad = 1;
		temp_len++;
		orig = (double*)malloc(sizeof(double)* temp_len);
	}
	*/
	for (i = 0; i < wt->siglength; ++i) {
 800a65e:	2300      	movs	r3, #0
 800a660:	647b      	str	r3, [r7, #68]	; 0x44
 800a662:	e00e      	b.n	800a682 <wtree+0x62>
		orig[i] = inp[i];
 800a664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a666:	00db      	lsls	r3, r3, #3
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	4413      	add	r3, r2
 800a66c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a66e:	00d2      	lsls	r2, r2, #3
 800a670:	6979      	ldr	r1, [r7, #20]
 800a672:	4411      	add	r1, r2
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < wt->siglength; ++i) {
 800a67c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a67e:	3301      	adds	r3, #1
 800a680:	647b      	str	r3, [r7, #68]	; 0x44
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	695b      	ldr	r3, [r3, #20]
 800a686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a688:	429a      	cmp	r2, r3
 800a68a:	dbeb      	blt.n	800a664 <wtree+0x44>
	}

	if (wt->zpad == 1) {
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a690:	2b01      	cmp	r3, #1
 800a692:	d110      	bne.n	800a6b6 <wtree+0x96>
		orig[temp_len - 1] = orig[temp_len - 2];
 800a694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a696:	4ba0      	ldr	r3, [pc, #640]	; (800a918 <wtree+0x2f8>)
 800a698:	4413      	add	r3, r2
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	697a      	ldr	r2, [r7, #20]
 800a69e:	441a      	add	r2, r3
 800a6a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6a2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a6a6:	440b      	add	r3, r1
 800a6a8:	00db      	lsls	r3, r3, #3
 800a6aa:	6979      	ldr	r1, [r7, #20]
 800a6ac:	4419      	add	r1, r3
 800a6ae:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a6b2:	e9c1 2300 	strd	r2, r3, [r1]
	}

	N = temp_len;
 800a6b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6b8:	63bb      	str	r3, [r7, #56]	; 0x38
	lp = wt->wave->lpd_len;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c0:	613b      	str	r3, [r7, #16]
        p2 = 1;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	637b      	str	r3, [r7, #52]	; 0x34

	if (!strcmp(wt->ext,"per")) {
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	332c      	adds	r3, #44	; 0x2c
 800a6ca:	4994      	ldr	r1, [pc, #592]	; (800a91c <wtree+0x2fc>)
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7f5 fdb7 	bl	8000240 <strcmp>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f040 80b7 	bne.w	800a848 <wtree+0x228>
		i = J;
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	647b      	str	r3, [r7, #68]	; 0x44
                p2 = 2;
 800a6de:	2302      	movs	r3, #2
 800a6e0:	637b      	str	r3, [r7, #52]	; 0x34
		while (i > 0) {
 800a6e2:	e02c      	b.n	800a73e <wtree+0x11e>
			N = (int)ceil((double)N / 2.0);
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a6ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a6f2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800a6f6:	eeb0 0b46 	vmov.f64	d0, d6
 800a6fa:	f002 ff21 	bl	800d540 <ceil>
 800a6fe:	eeb0 7b40 	vmov.f64	d7, d0
 800a702:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a706:	ee17 3a90 	vmov	r3, s15
 800a70a:	63bb      	str	r3, [r7, #56]	; 0x38
			wt->length[i] = N;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a710:	3212      	adds	r2, #18
 800a712:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			wt->outlength += p2 * (wt->length[i]);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	699a      	ldr	r2, [r3, #24]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a720:	3112      	adds	r1, #18
 800a722:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a726:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a728:	fb01 f303 	mul.w	r3, r1, r3
 800a72c:	441a      	add	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	619a      	str	r2, [r3, #24]
			i--;
 800a732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a734:	3b01      	subs	r3, #1
 800a736:	647b      	str	r3, [r7, #68]	; 0x44
                        p2 *= 2;
 800a738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73a:	005b      	lsls	r3, r3, #1
 800a73c:	637b      	str	r3, [r7, #52]	; 0x34
		while (i > 0) {
 800a73e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a740:	2b00      	cmp	r3, #0
 800a742:	dccf      	bgt.n	800a6e4 <wtree+0xc4>
		}
		wt->length[0] = wt->length[1];
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	649a      	str	r2, [r3, #72]	; 0x48

		N2 = N = wt->outlength;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	63bb      	str	r3, [r7, #56]	; 0x38
 800a752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a754:	62fb      	str	r3, [r7, #44]	; 0x2c
                p2 = 1;
 800a756:	2301      	movs	r3, #1
 800a758:	637b      	str	r3, [r7, #52]	; 0x34
		for (iter = 0; iter < J; ++iter) {
 800a75a:	2300      	movs	r3, #0
 800a75c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a75e:	e06e      	b.n	800a83e <wtree+0x21e>
			len_cA = wt->length[J - iter];
 800a760:	69ba      	ldr	r2, [r7, #24]
 800a762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a764:	1ad2      	subs	r2, r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	3212      	adds	r2, #18
 800a76a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76e:	60fb      	str	r3, [r7, #12]
                        N2 -= 2 * p2 * len_cA;
 800a770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	fb02 f303 	mul.w	r3, r2, r3
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        N = N2;
 800a780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a782:	63bb      	str	r3, [r7, #56]	; 0x38
                        for(k = 0; k < p2;++k) {
 800a784:	2300      	movs	r3, #0
 800a786:	633b      	str	r3, [r7, #48]	; 0x30
 800a788:	e045      	b.n	800a816 <wtree+0x1f6>
                            if (iter == 0) {
 800a78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d117      	bne.n	800a7c0 <wtree+0x1a0>
                               wtree_per(wt, orig, temp_len, wt->params + N, len_cA, wt->params + N + len_cA);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800a796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a798:	00db      	lsls	r3, r3, #3
 800a79a:	18d0      	adds	r0, r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800a7a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	440b      	add	r3, r1
 800a7a8:	00db      	lsls	r3, r3, #3
 800a7aa:	4413      	add	r3, r2
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7b6:	6979      	ldr	r1, [r7, #20]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff fb4d 	bl	8009e58 <wtree_per>
 800a7be:	e022      	b.n	800a806 <wtree+0x1e6>
                            } else {
                                wtree_per(wt, wt->params + Np + k * temp_len, temp_len, wt->params + N, len_cA, wt->params + N + len_cA);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7ca:	fb01 f303 	mul.w	r3, r1, r3
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d2:	440b      	add	r3, r1
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	18d0      	adds	r0, r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800a7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e0:	00db      	lsls	r3, r3, #3
 800a7e2:	18d4      	adds	r4, r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800a7ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	440b      	add	r3, r1
 800a7f0:	00db      	lsls	r3, r3, #3
 800a7f2:	4413      	add	r3, r2
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	4623      	mov	r3, r4
 800a7fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7fe:	4601      	mov	r1, r0
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7ff fb29 	bl	8009e58 <wtree_per>
                            }
                            N += 2 * len_cA;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a80c:	4413      	add	r3, r2
 800a80e:	63bb      	str	r3, [r7, #56]	; 0x38
                        for(k = 0; k < p2;++k) {
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	3301      	adds	r3, #1
 800a814:	633b      	str	r3, [r7, #48]	; 0x30
 800a816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a81a:	429a      	cmp	r2, r3
 800a81c:	dbb5      	blt.n	800a78a <wtree+0x16a>
                        }

			temp_len = wt->length[J - iter];
 800a81e:	69ba      	ldr	r2, [r7, #24]
 800a820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a822:	1ad2      	subs	r2, r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3212      	adds	r2, #18
 800a828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a82c:	643b      	str	r3, [r7, #64]	; 0x40
			p2 = 2 * p2;
 800a82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a830:	005b      	lsls	r3, r3, #1
 800a832:	637b      	str	r3, [r7, #52]	; 0x34
            Np = N2;
 800a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a836:	62bb      	str	r3, [r7, #40]	; 0x28
		for (iter = 0; iter < J; ++iter) {
 800a838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a83a:	3301      	adds	r3, #1
 800a83c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a83e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	429a      	cmp	r2, r3
 800a844:	db8c      	blt.n	800a760 <wtree+0x140>
 800a846:	e0d3      	b.n	800a9f0 <wtree+0x3d0>
		}
	}
	else if (!strcmp(wt->ext,"sym")) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	332c      	adds	r3, #44	; 0x2c
 800a84c:	4934      	ldr	r1, [pc, #208]	; (800a920 <wtree+0x300>)
 800a84e:	4618      	mov	r0, r3
 800a850:	f7f5 fcf6 	bl	8000240 <strcmp>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	f040 80c3 	bne.w	800a9e2 <wtree+0x3c2>
		//printf(" \r\n YES %s  \r\n", wt->ext);
		i = J;
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	647b      	str	r3, [r7, #68]	; 0x44
                p2 = 2;
 800a860:	2302      	movs	r3, #2
 800a862:	637b      	str	r3, [r7, #52]	; 0x34
		while (i > 0) {
 800a864:	e031      	b.n	800a8ca <wtree+0x2aa>
			N = N + lp - 2;
 800a866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	4413      	add	r3, r2
 800a86c:	3b02      	subs	r3, #2
 800a86e:	63bb      	str	r3, [r7, #56]	; 0x38
			N = (int) ceil((double)N / 2.0);
 800a870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a872:	ee07 3a90 	vmov	s15, r3
 800a876:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a87a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a87e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800a882:	eeb0 0b46 	vmov.f64	d0, d6
 800a886:	f002 fe5b 	bl	800d540 <ceil>
 800a88a:	eeb0 7b40 	vmov.f64	d7, d0
 800a88e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a892:	ee17 3a90 	vmov	r3, s15
 800a896:	63bb      	str	r3, [r7, #56]	; 0x38
			wt->length[i] = N;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a89c:	3212      	adds	r2, #18
 800a89e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			wt->outlength += p2 * (wt->length[i]);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	699a      	ldr	r2, [r3, #24]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a8ac:	3112      	adds	r1, #18
 800a8ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a8b4:	fb01 f303 	mul.w	r3, r1, r3
 800a8b8:	441a      	add	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	619a      	str	r2, [r3, #24]
			i--;
 800a8be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	647b      	str	r3, [r7, #68]	; 0x44
                        p2 *= 2;
 800a8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	637b      	str	r3, [r7, #52]	; 0x34
		while (i > 0) {
 800a8ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	dcca      	bgt.n	800a866 <wtree+0x246>
		}
		wt->length[0] = wt->length[1];
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	649a      	str	r2, [r3, #72]	; 0x48

		N2 = N = wt->outlength;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                p2 = 1;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	637b      	str	r3, [r7, #52]	; 0x34

                for (iter = 0; iter < J; ++iter) {
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8ea:	e075      	b.n	800a9d8 <wtree+0x3b8>
			len_cA = wt->length[J - iter];
 800a8ec:	69ba      	ldr	r2, [r7, #24]
 800a8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f0:	1ad2      	subs	r2, r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3212      	adds	r2, #18
 800a8f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fa:	60fb      	str	r3, [r7, #12]
                        N2 -= 2 * p2 * len_cA;
 800a8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	fb02 f303 	mul.w	r3, r2, r3
 800a904:	005b      	lsls	r3, r3, #1
 800a906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        N = N2;
 800a90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90e:	63bb      	str	r3, [r7, #56]	; 0x38
                        for(k = 0; k < p2;++k) {
 800a910:	2300      	movs	r3, #0
 800a912:	633b      	str	r3, [r7, #48]	; 0x30
 800a914:	e04c      	b.n	800a9b0 <wtree+0x390>
 800a916:	bf00      	nop
 800a918:	1ffffffe 	.word	0x1ffffffe
 800a91c:	0800ddb0 	.word	0x0800ddb0
 800a920:	0800dd60 	.word	0x0800dd60
                            if (iter == 0) {
 800a924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a926:	2b00      	cmp	r3, #0
 800a928:	d117      	bne.n	800a95a <wtree+0x33a>
                                wtree_sym(wt, orig, temp_len, wt->params + N, len_cA, wt->params + N + len_cA);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800a930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a932:	00db      	lsls	r3, r3, #3
 800a934:	18d0      	adds	r0, r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800a93c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	440b      	add	r3, r1
 800a942:	00db      	lsls	r3, r3, #3
 800a944:	4413      	add	r3, r2
 800a946:	9301      	str	r3, [sp, #4]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	4603      	mov	r3, r0
 800a94e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a950:	6979      	ldr	r1, [r7, #20]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff fd36 	bl	800a3c4 <wtree_sym>
 800a958:	e022      	b.n	800a9a0 <wtree+0x380>
                            } else {
                                wtree_sym(wt, wt->params + Np + k * temp_len, temp_len, wt->params + N, len_cA, wt->params + N + len_cA);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a964:	fb01 f303 	mul.w	r3, r1, r3
 800a968:	4619      	mov	r1, r3
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	440b      	add	r3, r1
 800a96e:	00db      	lsls	r3, r3, #3
 800a970:	18d0      	adds	r0, r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800a978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	18d4      	adds	r4, r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800a984:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	440b      	add	r3, r1
 800a98a:	00db      	lsls	r3, r3, #3
 800a98c:	4413      	add	r3, r2
 800a98e:	9301      	str	r3, [sp, #4]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	4623      	mov	r3, r4
 800a996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a998:	4601      	mov	r1, r0
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f7ff fd12 	bl	800a3c4 <wtree_sym>
                            }
                            N += 2 * len_cA;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	005b      	lsls	r3, r3, #1
 800a9a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9a6:	4413      	add	r3, r2
 800a9a8:	63bb      	str	r3, [r7, #56]	; 0x38
                        for(k = 0; k < p2;++k) {
 800a9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	633b      	str	r3, [r7, #48]	; 0x30
 800a9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	dbb5      	blt.n	800a924 <wtree+0x304>
                        }

			temp_len = wt->length[J - iter];
 800a9b8:	69ba      	ldr	r2, [r7, #24]
 800a9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9bc:	1ad2      	subs	r2, r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	3212      	adds	r2, #18
 800a9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c6:	643b      	str	r3, [r7, #64]	; 0x40
			p2 = 2 * p2;
 800a9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ca:	005b      	lsls	r3, r3, #1
 800a9cc:	637b      	str	r3, [r7, #52]	; 0x34
            Np = N2;
 800a9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d0:	62bb      	str	r3, [r7, #40]	; 0x28
                for (iter = 0; iter < J; ++iter) {
 800a9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	db85      	blt.n	800a8ec <wtree+0x2cc>
 800a9e0:	e006      	b.n	800a9f0 <wtree+0x3d0>
		}

	}
	else {
		printf("Signal extension can be either per or sym");
 800a9e2:	483d      	ldr	r0, [pc, #244]	; (800aad8 <wtree+0x4b8>)
 800a9e4:	f000 fbca 	bl	800b17c <iprintf>
		exit(-1);
 800a9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ec:	f000 f9a8 	bl	800ad40 <exit>
	}

	J = wt->J;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a1b      	ldr	r3, [r3, #32]
 800a9f4:	61bb      	str	r3, [r7, #24]
	t2 = wt->outlength - 2 * wt->length[J];
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	699a      	ldr	r2, [r3, #24]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	69b9      	ldr	r1, [r7, #24]
 800a9fe:	3112      	adds	r1, #18
 800aa00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa04:	005b      	lsls	r3, r3, #1
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	623b      	str	r3, [r7, #32]
	p2 = 2;
 800aa0a:	2302      	movs	r3, #2
 800aa0c:	637b      	str	r3, [r7, #52]	; 0x34
	it1 = 0;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < J; ++i) {
 800aa12:	2300      	movs	r3, #0
 800aa14:	647b      	str	r3, [r7, #68]	; 0x44
 800aa16:	e034      	b.n	800aa82 <wtree+0x462>
		t = t2;
 800aa18:	6a3b      	ldr	r3, [r7, #32]
 800aa1a:	627b      	str	r3, [r7, #36]	; 0x24
		for (k = 0; k < p2; ++k) {
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	633b      	str	r3, [r7, #48]	; 0x30
 800aa20:	e017      	b.n	800aa52 <wtree+0x432>
			wt->nodelength[it1] = t;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 800aa28:	69fb      	ldr	r3, [r7, #28]
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa30:	601a      	str	r2, [r3, #0]
			it1++;
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	3301      	adds	r3, #1
 800aa36:	61fb      	str	r3, [r7, #28]
			t += wt->length[J - i];
 800aa38:	69ba      	ldr	r2, [r7, #24]
 800aa3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa3c:	1ad2      	subs	r2, r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	3212      	adds	r2, #18
 800aa42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa48:	4413      	add	r3, r2
 800aa4a:	627b      	str	r3, [r7, #36]	; 0x24
		for (k = 0; k < p2; ++k) {
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4e:	3301      	adds	r3, #1
 800aa50:	633b      	str	r3, [r7, #48]	; 0x30
 800aa52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa56:	429a      	cmp	r2, r3
 800aa58:	dbe3      	blt.n	800aa22 <wtree+0x402>
		}
		p2 *= 2;
 800aa5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	637b      	str	r3, [r7, #52]	; 0x34
		t2 = t2 - p2 * wt->length[J - i - 1];
 800aa60:	69ba      	ldr	r2, [r7, #24]
 800aa62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	1e5a      	subs	r2, r3, #1
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3212      	adds	r2, #18
 800aa6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa72:	fb02 f303 	mul.w	r3, r2, r3
 800aa76:	6a3a      	ldr	r2, [r7, #32]
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	623b      	str	r3, [r7, #32]
	for (i = 0; i < J; ++i) {
 800aa7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa7e:	3301      	adds	r3, #1
 800aa80:	647b      	str	r3, [r7, #68]	; 0x44
 800aa82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	dbc6      	blt.n	800aa18 <wtree+0x3f8>
	}

	wt->coeflength[0] = wt->siglength;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	6952      	ldr	r2, [r2, #20]
 800aa94:	601a      	str	r2, [r3, #0]

	for (i = 1; i < J + 1; ++i) {
 800aa96:	2301      	movs	r3, #1
 800aa98:	647b      	str	r3, [r7, #68]	; 0x44
 800aa9a:	e011      	b.n	800aac0 <wtree+0x4a0>
		wt->coeflength[i] = wt->length[J - i + 1];
 800aa9c:	69ba      	ldr	r2, [r7, #24]
 800aa9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	1c59      	adds	r1, r3, #1
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 800aaaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	3112      	adds	r1, #18
 800aab4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800aab8:	601a      	str	r2, [r3, #0]
	for (i = 1; i < J + 1; ++i) {
 800aaba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aabc:	3301      	adds	r3, #1
 800aabe:	647b      	str	r3, [r7, #68]	; 0x44
 800aac0:	69ba      	ldr	r2, [r7, #24]
 800aac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aac4:	429a      	cmp	r2, r3
 800aac6:	dae9      	bge.n	800aa9c <wtree+0x47c>
	}

	free(orig);
 800aac8:	6978      	ldr	r0, [r7, #20]
 800aaca:	f000 f953 	bl	800ad74 <free>
}
 800aace:	bf00      	nop
 800aad0:	374c      	adds	r7, #76	; 0x4c
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd90      	pop	{r4, r7, pc}
 800aad6:	bf00      	nop
 800aad8:	0800dfd0 	.word	0x0800dfd0

0800aadc <getWTREENodelength>:
	free(orig);
	free(tree);
	free(nodelength);
}

int getWTREENodelength(wtree_object wt, int X) {
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
	int N;
	N = -1;
 800aae6:	f04f 33ff 	mov.w	r3, #4294967295
 800aaea:	60fb      	str	r3, [r7, #12]
	/*
	X - Level. All Nodes at any level have the same length
	*/
	if (X <= 0 || X > wt->J) {
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	dd04      	ble.n	800aafc <getWTREENodelength+0x20>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	dd09      	ble.n	800ab10 <getWTREENodelength+0x34>
		printf("X co-ordinate must be >= 1 and <= %d", wt->J);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	4619      	mov	r1, r3
 800ab02:	480b      	ldr	r0, [pc, #44]	; (800ab30 <getWTREENodelength+0x54>)
 800ab04:	f000 fb3a 	bl	800b17c <iprintf>
		exit(-1);
 800ab08:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0c:	f000 f918 	bl	800ad40 <exit>
	}

	N = wt->length[wt->J -X + 1];
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a1a      	ldr	r2, [r3, #32]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	1c5a      	adds	r2, r3, #1
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	3212      	adds	r2, #18
 800ab1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab22:	60fb      	str	r3, [r7, #12]

	return N;
 800ab24:	68fb      	ldr	r3, [r7, #12]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	0800e008 	.word	0x0800e008

0800ab34 <getWTREECoeffs>:
	N = wt->length[wt->J - X + 1];

	return N;
}

void getWTREECoeffs(wtree_object wt, int X,int Y,double *coeffs,int N) {
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b088      	sub	sp, #32
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
 800ab40:	603b      	str	r3, [r7, #0]
	int ymax,i,t,t2;

	if (X <= 0 || X > wt->J) {
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	dd04      	ble.n	800ab52 <getWTREECoeffs+0x1e>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	dd09      	ble.n	800ab66 <getWTREECoeffs+0x32>
		printf("X co-ordinate must be >= 1 and <= %d", wt->J);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	4619      	mov	r1, r3
 800ab58:	4837      	ldr	r0, [pc, #220]	; (800ac38 <getWTREECoeffs+0x104>)
 800ab5a:	f000 fb0f 	bl	800b17c <iprintf>
		exit(-1);
 800ab5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab62:	f000 f8ed 	bl	800ad40 <exit>
	}
	ymax = 1;
 800ab66:	2301      	movs	r3, #1
 800ab68:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < X; ++i) {
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	61bb      	str	r3, [r7, #24]
 800ab6e:	e005      	b.n	800ab7c <getWTREECoeffs+0x48>
		ymax *= 2;
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	005b      	lsls	r3, r3, #1
 800ab74:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < X; ++i) {
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	61bb      	str	r3, [r7, #24]
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	dbf5      	blt.n	800ab70 <getWTREECoeffs+0x3c>
	}

	ymax -= 1;
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	3b01      	subs	r3, #1
 800ab88:	61fb      	str	r3, [r7, #28]

	if (Y < 0 ||Y > ymax) {
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	db03      	blt.n	800ab98 <getWTREECoeffs+0x64>
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	dd07      	ble.n	800aba8 <getWTREECoeffs+0x74>
		printf("Y co-ordinate must be >= 0 and <= %d", ymax);
 800ab98:	69f9      	ldr	r1, [r7, #28]
 800ab9a:	4828      	ldr	r0, [pc, #160]	; (800ac3c <getWTREECoeffs+0x108>)
 800ab9c:	f000 faee 	bl	800b17c <iprintf>
		exit(-1);
 800aba0:	f04f 30ff 	mov.w	r0, #4294967295
 800aba4:	f000 f8cc 	bl	800ad40 <exit>
	}

	if (X == 1) {
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d102      	bne.n	800abb4 <getWTREECoeffs+0x80>
		t = 0;
 800abae:	2300      	movs	r3, #0
 800abb0:	617b      	str	r3, [r7, #20]
 800abb2:	e015      	b.n	800abe0 <getWTREECoeffs+0xac>
	}
	else {
		t = 0;
 800abb4:	2300      	movs	r3, #0
 800abb6:	617b      	str	r3, [r7, #20]
		t2 = 1;
 800abb8:	2301      	movs	r3, #1
 800abba:	613b      	str	r3, [r7, #16]
		for (i = 0; i < X - 1; ++i) {
 800abbc:	2300      	movs	r3, #0
 800abbe:	61bb      	str	r3, [r7, #24]
 800abc0:	e009      	b.n	800abd6 <getWTREECoeffs+0xa2>
			t2 *= 2;
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	613b      	str	r3, [r7, #16]
			t += t2;
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	4413      	add	r3, r2
 800abce:	617b      	str	r3, [r7, #20]
		for (i = 0; i < X - 1; ++i) {
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	3301      	adds	r3, #1
 800abd4:	61bb      	str	r3, [r7, #24]
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	3b01      	subs	r3, #1
 800abda:	69ba      	ldr	r2, [r7, #24]
 800abdc:	429a      	cmp	r2, r3
 800abde:	dbf0      	blt.n	800abc2 <getWTREECoeffs+0x8e>
		}
	}

	t += Y;
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4413      	add	r3, r2
 800abe6:	617b      	str	r3, [r7, #20]
	t2 = wt->nodelength[t];
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	613b      	str	r3, [r7, #16]
	for (i = 0; i < N; ++i) {
 800abf8:	2300      	movs	r3, #0
 800abfa:	61bb      	str	r3, [r7, #24]
 800abfc:	e012      	b.n	800ac24 <getWTREECoeffs+0xf0>
		coeffs[i] = wt->output[t2+i];
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800ac04:	6939      	ldr	r1, [r7, #16]
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	440b      	add	r3, r1
 800ac0a:	00db      	lsls	r3, r3, #3
 800ac0c:	4413      	add	r3, r2
 800ac0e:	69ba      	ldr	r2, [r7, #24]
 800ac10:	00d2      	lsls	r2, r2, #3
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	4411      	add	r1, r2
 800ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1a:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < N; ++i) {
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	3301      	adds	r3, #1
 800ac22:	61bb      	str	r3, [r7, #24]
 800ac24:	69ba      	ldr	r2, [r7, #24]
 800ac26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	dbe8      	blt.n	800abfe <getWTREECoeffs+0xca>
	}

}
 800ac2c:	bf00      	nop
 800ac2e:	bf00      	nop
 800ac30:	3720      	adds	r7, #32
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	0800e008 	.word	0x0800e008
 800ac3c:	0800e030 	.word	0x0800e030

0800ac40 <setWTREEExtension>:
		printf("Signal extension can be either per or sym");
		exit(-1);
	}
}

void setWTREEExtension(wtree_object wt, const char *extension) {
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
	if (!strcmp(extension, "sym")) {
 800ac4a:	4912      	ldr	r1, [pc, #72]	; (800ac94 <setWTREEExtension+0x54>)
 800ac4c:	6838      	ldr	r0, [r7, #0]
 800ac4e:	f7f5 faf7 	bl	8000240 <strcmp>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d105      	bne.n	800ac64 <setWTREEExtension+0x24>
		strcpy(wt->ext, "sym");
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	332c      	adds	r3, #44	; 0x2c
 800ac5c:	4a0d      	ldr	r2, [pc, #52]	; (800ac94 <setWTREEExtension+0x54>)
 800ac5e:	6810      	ldr	r0, [r2, #0]
 800ac60:	6018      	str	r0, [r3, #0]
	}
	else {
		printf("Signal extension can be either per or sym");
		exit(-1);
	}
}
 800ac62:	e013      	b.n	800ac8c <setWTREEExtension+0x4c>
	else if (!strcmp(extension, "per")) {
 800ac64:	490c      	ldr	r1, [pc, #48]	; (800ac98 <setWTREEExtension+0x58>)
 800ac66:	6838      	ldr	r0, [r7, #0]
 800ac68:	f7f5 faea 	bl	8000240 <strcmp>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d105      	bne.n	800ac7e <setWTREEExtension+0x3e>
		strcpy(wt->ext, "per");
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	332c      	adds	r3, #44	; 0x2c
 800ac76:	4a08      	ldr	r2, [pc, #32]	; (800ac98 <setWTREEExtension+0x58>)
 800ac78:	6810      	ldr	r0, [r2, #0]
 800ac7a:	6018      	str	r0, [r3, #0]
}
 800ac7c:	e006      	b.n	800ac8c <setWTREEExtension+0x4c>
		printf("Signal extension can be either per or sym");
 800ac7e:	4807      	ldr	r0, [pc, #28]	; (800ac9c <setWTREEExtension+0x5c>)
 800ac80:	f000 fa7c 	bl	800b17c <iprintf>
		exit(-1);
 800ac84:	f04f 30ff 	mov.w	r0, #4294967295
 800ac88:	f000 f85a 	bl	800ad40 <exit>
}
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	0800dd60 	.word	0x0800dd60
 800ac98:	0800ddb0 	.word	0x0800ddb0
 800ac9c:	0800dfd0 	.word	0x0800dfd0

0800aca0 <wave_free>:
		printf("Diagonal Coefficients access at wt->coeffaccess[%d]=%d, Vector size:%d  \r\n \r\n", t, wt->coeffaccess[t], vsize);
	}

}

void wave_free(wave_object object) {
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
	free(object);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 f863 	bl	800ad74 <free>
}
 800acae:	bf00      	nop
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <wtree_free>:

void wt_free(wt_object object) {
	free(object);
}

void wtree_free(wtree_object object) {
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b082      	sub	sp, #8
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
	free(object);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f858 	bl	800ad74 <free>
}
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	0000      	movs	r0, r0
	...

0800acd0 <wmaxiter>:

	return ret;

}

int wmaxiter(int sig_len, int filt_len) {
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
	int lev;
	double temp;

	temp = log((double)sig_len / ((double)filt_len - 1.0)) / log(2.0);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	ee07 3a90 	vmov	s15, r3
 800ace0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	ee07 3a90 	vmov	s15, r3
 800acea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800acee:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800acf2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800acf6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800acfa:	eeb0 0b45 	vmov.f64	d0, d5
 800acfe:	f002 f89f 	bl	800ce40 <log>
 800ad02:	eeb0 6b40 	vmov.f64	d6, d0
 800ad06:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 800ad30 <wmaxiter+0x60>
 800ad0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ad0e:	ed87 7b04 	vstr	d7, [r7, #16]
	lev = (int)temp;
 800ad12:	ed97 7b04 	vldr	d7, [r7, #16]
 800ad16:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ad1a:	ee17 3a90 	vmov	r3, s15
 800ad1e:	60fb      	str	r3, [r7, #12]

	return lev;
 800ad20:	68fb      	ldr	r3, [r7, #12]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3718      	adds	r7, #24
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	f3af 8000 	nop.w
 800ad30:	fefa39ef 	.word	0xfefa39ef
 800ad34:	3fe62e42 	.word	0x3fe62e42

0800ad38 <atoi>:
 800ad38:	220a      	movs	r2, #10
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	f000 b952 	b.w	800afe4 <strtol>

0800ad40 <exit>:
 800ad40:	b508      	push	{r3, lr}
 800ad42:	4b06      	ldr	r3, [pc, #24]	; (800ad5c <exit+0x1c>)
 800ad44:	4604      	mov	r4, r0
 800ad46:	b113      	cbz	r3, 800ad4e <exit+0xe>
 800ad48:	2100      	movs	r1, #0
 800ad4a:	f3af 8000 	nop.w
 800ad4e:	4b04      	ldr	r3, [pc, #16]	; (800ad60 <exit+0x20>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <exit+0x16>
 800ad54:	4798      	blx	r3
 800ad56:	4620      	mov	r0, r4
 800ad58:	f002 fcae 	bl	800d6b8 <_exit>
 800ad5c:	00000000 	.word	0x00000000
 800ad60:	20003a00 	.word	0x20003a00

0800ad64 <malloc>:
 800ad64:	4b02      	ldr	r3, [pc, #8]	; (800ad70 <malloc+0xc>)
 800ad66:	4601      	mov	r1, r0
 800ad68:	6818      	ldr	r0, [r3, #0]
 800ad6a:	f000 b82b 	b.w	800adc4 <_malloc_r>
 800ad6e:	bf00      	nop
 800ad70:	200008e0 	.word	0x200008e0

0800ad74 <free>:
 800ad74:	4b02      	ldr	r3, [pc, #8]	; (800ad80 <free+0xc>)
 800ad76:	4601      	mov	r1, r0
 800ad78:	6818      	ldr	r0, [r3, #0]
 800ad7a:	f000 bcdd 	b.w	800b738 <_free_r>
 800ad7e:	bf00      	nop
 800ad80:	200008e0 	.word	0x200008e0

0800ad84 <sbrk_aligned>:
 800ad84:	b570      	push	{r4, r5, r6, lr}
 800ad86:	4e0e      	ldr	r6, [pc, #56]	; (800adc0 <sbrk_aligned+0x3c>)
 800ad88:	460c      	mov	r4, r1
 800ad8a:	6831      	ldr	r1, [r6, #0]
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	b911      	cbnz	r1, 800ad96 <sbrk_aligned+0x12>
 800ad90:	f000 fc6c 	bl	800b66c <_sbrk_r>
 800ad94:	6030      	str	r0, [r6, #0]
 800ad96:	4621      	mov	r1, r4
 800ad98:	4628      	mov	r0, r5
 800ad9a:	f000 fc67 	bl	800b66c <_sbrk_r>
 800ad9e:	1c43      	adds	r3, r0, #1
 800ada0:	d00a      	beq.n	800adb8 <sbrk_aligned+0x34>
 800ada2:	1cc4      	adds	r4, r0, #3
 800ada4:	f024 0403 	bic.w	r4, r4, #3
 800ada8:	42a0      	cmp	r0, r4
 800adaa:	d007      	beq.n	800adbc <sbrk_aligned+0x38>
 800adac:	1a21      	subs	r1, r4, r0
 800adae:	4628      	mov	r0, r5
 800adb0:	f000 fc5c 	bl	800b66c <_sbrk_r>
 800adb4:	3001      	adds	r0, #1
 800adb6:	d101      	bne.n	800adbc <sbrk_aligned+0x38>
 800adb8:	f04f 34ff 	mov.w	r4, #4294967295
 800adbc:	4620      	mov	r0, r4
 800adbe:	bd70      	pop	{r4, r5, r6, pc}
 800adc0:	200038c4 	.word	0x200038c4

0800adc4 <_malloc_r>:
 800adc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc8:	1ccd      	adds	r5, r1, #3
 800adca:	f025 0503 	bic.w	r5, r5, #3
 800adce:	3508      	adds	r5, #8
 800add0:	2d0c      	cmp	r5, #12
 800add2:	bf38      	it	cc
 800add4:	250c      	movcc	r5, #12
 800add6:	2d00      	cmp	r5, #0
 800add8:	4607      	mov	r7, r0
 800adda:	db01      	blt.n	800ade0 <_malloc_r+0x1c>
 800addc:	42a9      	cmp	r1, r5
 800adde:	d905      	bls.n	800adec <_malloc_r+0x28>
 800ade0:	230c      	movs	r3, #12
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	2600      	movs	r6, #0
 800ade6:	4630      	mov	r0, r6
 800ade8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aec0 <_malloc_r+0xfc>
 800adf0:	f000 f868 	bl	800aec4 <__malloc_lock>
 800adf4:	f8d8 3000 	ldr.w	r3, [r8]
 800adf8:	461c      	mov	r4, r3
 800adfa:	bb5c      	cbnz	r4, 800ae54 <_malloc_r+0x90>
 800adfc:	4629      	mov	r1, r5
 800adfe:	4638      	mov	r0, r7
 800ae00:	f7ff ffc0 	bl	800ad84 <sbrk_aligned>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	4604      	mov	r4, r0
 800ae08:	d155      	bne.n	800aeb6 <_malloc_r+0xf2>
 800ae0a:	f8d8 4000 	ldr.w	r4, [r8]
 800ae0e:	4626      	mov	r6, r4
 800ae10:	2e00      	cmp	r6, #0
 800ae12:	d145      	bne.n	800aea0 <_malloc_r+0xdc>
 800ae14:	2c00      	cmp	r4, #0
 800ae16:	d048      	beq.n	800aeaa <_malloc_r+0xe6>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	4631      	mov	r1, r6
 800ae1c:	4638      	mov	r0, r7
 800ae1e:	eb04 0903 	add.w	r9, r4, r3
 800ae22:	f000 fc23 	bl	800b66c <_sbrk_r>
 800ae26:	4581      	cmp	r9, r0
 800ae28:	d13f      	bne.n	800aeaa <_malloc_r+0xe6>
 800ae2a:	6821      	ldr	r1, [r4, #0]
 800ae2c:	1a6d      	subs	r5, r5, r1
 800ae2e:	4629      	mov	r1, r5
 800ae30:	4638      	mov	r0, r7
 800ae32:	f7ff ffa7 	bl	800ad84 <sbrk_aligned>
 800ae36:	3001      	adds	r0, #1
 800ae38:	d037      	beq.n	800aeaa <_malloc_r+0xe6>
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	442b      	add	r3, r5
 800ae3e:	6023      	str	r3, [r4, #0]
 800ae40:	f8d8 3000 	ldr.w	r3, [r8]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d038      	beq.n	800aeba <_malloc_r+0xf6>
 800ae48:	685a      	ldr	r2, [r3, #4]
 800ae4a:	42a2      	cmp	r2, r4
 800ae4c:	d12b      	bne.n	800aea6 <_malloc_r+0xe2>
 800ae4e:	2200      	movs	r2, #0
 800ae50:	605a      	str	r2, [r3, #4]
 800ae52:	e00f      	b.n	800ae74 <_malloc_r+0xb0>
 800ae54:	6822      	ldr	r2, [r4, #0]
 800ae56:	1b52      	subs	r2, r2, r5
 800ae58:	d41f      	bmi.n	800ae9a <_malloc_r+0xd6>
 800ae5a:	2a0b      	cmp	r2, #11
 800ae5c:	d917      	bls.n	800ae8e <_malloc_r+0xca>
 800ae5e:	1961      	adds	r1, r4, r5
 800ae60:	42a3      	cmp	r3, r4
 800ae62:	6025      	str	r5, [r4, #0]
 800ae64:	bf18      	it	ne
 800ae66:	6059      	strne	r1, [r3, #4]
 800ae68:	6863      	ldr	r3, [r4, #4]
 800ae6a:	bf08      	it	eq
 800ae6c:	f8c8 1000 	streq.w	r1, [r8]
 800ae70:	5162      	str	r2, [r4, r5]
 800ae72:	604b      	str	r3, [r1, #4]
 800ae74:	4638      	mov	r0, r7
 800ae76:	f104 060b 	add.w	r6, r4, #11
 800ae7a:	f000 f829 	bl	800aed0 <__malloc_unlock>
 800ae7e:	f026 0607 	bic.w	r6, r6, #7
 800ae82:	1d23      	adds	r3, r4, #4
 800ae84:	1af2      	subs	r2, r6, r3
 800ae86:	d0ae      	beq.n	800ade6 <_malloc_r+0x22>
 800ae88:	1b9b      	subs	r3, r3, r6
 800ae8a:	50a3      	str	r3, [r4, r2]
 800ae8c:	e7ab      	b.n	800ade6 <_malloc_r+0x22>
 800ae8e:	42a3      	cmp	r3, r4
 800ae90:	6862      	ldr	r2, [r4, #4]
 800ae92:	d1dd      	bne.n	800ae50 <_malloc_r+0x8c>
 800ae94:	f8c8 2000 	str.w	r2, [r8]
 800ae98:	e7ec      	b.n	800ae74 <_malloc_r+0xb0>
 800ae9a:	4623      	mov	r3, r4
 800ae9c:	6864      	ldr	r4, [r4, #4]
 800ae9e:	e7ac      	b.n	800adfa <_malloc_r+0x36>
 800aea0:	4634      	mov	r4, r6
 800aea2:	6876      	ldr	r6, [r6, #4]
 800aea4:	e7b4      	b.n	800ae10 <_malloc_r+0x4c>
 800aea6:	4613      	mov	r3, r2
 800aea8:	e7cc      	b.n	800ae44 <_malloc_r+0x80>
 800aeaa:	230c      	movs	r3, #12
 800aeac:	603b      	str	r3, [r7, #0]
 800aeae:	4638      	mov	r0, r7
 800aeb0:	f000 f80e 	bl	800aed0 <__malloc_unlock>
 800aeb4:	e797      	b.n	800ade6 <_malloc_r+0x22>
 800aeb6:	6025      	str	r5, [r4, #0]
 800aeb8:	e7dc      	b.n	800ae74 <_malloc_r+0xb0>
 800aeba:	605b      	str	r3, [r3, #4]
 800aebc:	deff      	udf	#255	; 0xff
 800aebe:	bf00      	nop
 800aec0:	200038c0 	.word	0x200038c0

0800aec4 <__malloc_lock>:
 800aec4:	4801      	ldr	r0, [pc, #4]	; (800aecc <__malloc_lock+0x8>)
 800aec6:	f000 bc1e 	b.w	800b706 <__retarget_lock_acquire_recursive>
 800aeca:	bf00      	nop
 800aecc:	20003a08 	.word	0x20003a08

0800aed0 <__malloc_unlock>:
 800aed0:	4801      	ldr	r0, [pc, #4]	; (800aed8 <__malloc_unlock+0x8>)
 800aed2:	f000 bc19 	b.w	800b708 <__retarget_lock_release_recursive>
 800aed6:	bf00      	nop
 800aed8:	20003a08 	.word	0x20003a08

0800aedc <_strtol_l.constprop.0>:
 800aedc:	2b01      	cmp	r3, #1
 800aede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee2:	d001      	beq.n	800aee8 <_strtol_l.constprop.0+0xc>
 800aee4:	2b24      	cmp	r3, #36	; 0x24
 800aee6:	d906      	bls.n	800aef6 <_strtol_l.constprop.0+0x1a>
 800aee8:	f000 fbe2 	bl	800b6b0 <__errno>
 800aeec:	2316      	movs	r3, #22
 800aeee:	6003      	str	r3, [r0, #0]
 800aef0:	2000      	movs	r0, #0
 800aef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800afdc <_strtol_l.constprop.0+0x100>
 800aefa:	460d      	mov	r5, r1
 800aefc:	462e      	mov	r6, r5
 800aefe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af02:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800af06:	f017 0708 	ands.w	r7, r7, #8
 800af0a:	d1f7      	bne.n	800aefc <_strtol_l.constprop.0+0x20>
 800af0c:	2c2d      	cmp	r4, #45	; 0x2d
 800af0e:	d132      	bne.n	800af76 <_strtol_l.constprop.0+0x9a>
 800af10:	782c      	ldrb	r4, [r5, #0]
 800af12:	2701      	movs	r7, #1
 800af14:	1cb5      	adds	r5, r6, #2
 800af16:	2b00      	cmp	r3, #0
 800af18:	d05b      	beq.n	800afd2 <_strtol_l.constprop.0+0xf6>
 800af1a:	2b10      	cmp	r3, #16
 800af1c:	d109      	bne.n	800af32 <_strtol_l.constprop.0+0x56>
 800af1e:	2c30      	cmp	r4, #48	; 0x30
 800af20:	d107      	bne.n	800af32 <_strtol_l.constprop.0+0x56>
 800af22:	782c      	ldrb	r4, [r5, #0]
 800af24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800af28:	2c58      	cmp	r4, #88	; 0x58
 800af2a:	d14d      	bne.n	800afc8 <_strtol_l.constprop.0+0xec>
 800af2c:	786c      	ldrb	r4, [r5, #1]
 800af2e:	2310      	movs	r3, #16
 800af30:	3502      	adds	r5, #2
 800af32:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800af36:	f108 38ff 	add.w	r8, r8, #4294967295
 800af3a:	f04f 0e00 	mov.w	lr, #0
 800af3e:	fbb8 f9f3 	udiv	r9, r8, r3
 800af42:	4676      	mov	r6, lr
 800af44:	fb03 8a19 	mls	sl, r3, r9, r8
 800af48:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800af4c:	f1bc 0f09 	cmp.w	ip, #9
 800af50:	d816      	bhi.n	800af80 <_strtol_l.constprop.0+0xa4>
 800af52:	4664      	mov	r4, ip
 800af54:	42a3      	cmp	r3, r4
 800af56:	dd24      	ble.n	800afa2 <_strtol_l.constprop.0+0xc6>
 800af58:	f1be 3fff 	cmp.w	lr, #4294967295
 800af5c:	d008      	beq.n	800af70 <_strtol_l.constprop.0+0x94>
 800af5e:	45b1      	cmp	r9, r6
 800af60:	d31c      	bcc.n	800af9c <_strtol_l.constprop.0+0xc0>
 800af62:	d101      	bne.n	800af68 <_strtol_l.constprop.0+0x8c>
 800af64:	45a2      	cmp	sl, r4
 800af66:	db19      	blt.n	800af9c <_strtol_l.constprop.0+0xc0>
 800af68:	fb06 4603 	mla	r6, r6, r3, r4
 800af6c:	f04f 0e01 	mov.w	lr, #1
 800af70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af74:	e7e8      	b.n	800af48 <_strtol_l.constprop.0+0x6c>
 800af76:	2c2b      	cmp	r4, #43	; 0x2b
 800af78:	bf04      	itt	eq
 800af7a:	782c      	ldrbeq	r4, [r5, #0]
 800af7c:	1cb5      	addeq	r5, r6, #2
 800af7e:	e7ca      	b.n	800af16 <_strtol_l.constprop.0+0x3a>
 800af80:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800af84:	f1bc 0f19 	cmp.w	ip, #25
 800af88:	d801      	bhi.n	800af8e <_strtol_l.constprop.0+0xb2>
 800af8a:	3c37      	subs	r4, #55	; 0x37
 800af8c:	e7e2      	b.n	800af54 <_strtol_l.constprop.0+0x78>
 800af8e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800af92:	f1bc 0f19 	cmp.w	ip, #25
 800af96:	d804      	bhi.n	800afa2 <_strtol_l.constprop.0+0xc6>
 800af98:	3c57      	subs	r4, #87	; 0x57
 800af9a:	e7db      	b.n	800af54 <_strtol_l.constprop.0+0x78>
 800af9c:	f04f 3eff 	mov.w	lr, #4294967295
 800afa0:	e7e6      	b.n	800af70 <_strtol_l.constprop.0+0x94>
 800afa2:	f1be 3fff 	cmp.w	lr, #4294967295
 800afa6:	d105      	bne.n	800afb4 <_strtol_l.constprop.0+0xd8>
 800afa8:	2322      	movs	r3, #34	; 0x22
 800afaa:	6003      	str	r3, [r0, #0]
 800afac:	4646      	mov	r6, r8
 800afae:	b942      	cbnz	r2, 800afc2 <_strtol_l.constprop.0+0xe6>
 800afb0:	4630      	mov	r0, r6
 800afb2:	e79e      	b.n	800aef2 <_strtol_l.constprop.0+0x16>
 800afb4:	b107      	cbz	r7, 800afb8 <_strtol_l.constprop.0+0xdc>
 800afb6:	4276      	negs	r6, r6
 800afb8:	2a00      	cmp	r2, #0
 800afba:	d0f9      	beq.n	800afb0 <_strtol_l.constprop.0+0xd4>
 800afbc:	f1be 0f00 	cmp.w	lr, #0
 800afc0:	d000      	beq.n	800afc4 <_strtol_l.constprop.0+0xe8>
 800afc2:	1e69      	subs	r1, r5, #1
 800afc4:	6011      	str	r1, [r2, #0]
 800afc6:	e7f3      	b.n	800afb0 <_strtol_l.constprop.0+0xd4>
 800afc8:	2430      	movs	r4, #48	; 0x30
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1b1      	bne.n	800af32 <_strtol_l.constprop.0+0x56>
 800afce:	2308      	movs	r3, #8
 800afd0:	e7af      	b.n	800af32 <_strtol_l.constprop.0+0x56>
 800afd2:	2c30      	cmp	r4, #48	; 0x30
 800afd4:	d0a5      	beq.n	800af22 <_strtol_l.constprop.0+0x46>
 800afd6:	230a      	movs	r3, #10
 800afd8:	e7ab      	b.n	800af32 <_strtol_l.constprop.0+0x56>
 800afda:	bf00      	nop
 800afdc:	08014dc9 	.word	0x08014dc9

0800afe0 <_strtol_r>:
 800afe0:	f7ff bf7c 	b.w	800aedc <_strtol_l.constprop.0>

0800afe4 <strtol>:
 800afe4:	4613      	mov	r3, r2
 800afe6:	460a      	mov	r2, r1
 800afe8:	4601      	mov	r1, r0
 800afea:	4802      	ldr	r0, [pc, #8]	; (800aff4 <strtol+0x10>)
 800afec:	6800      	ldr	r0, [r0, #0]
 800afee:	f7ff bf75 	b.w	800aedc <_strtol_l.constprop.0>
 800aff2:	bf00      	nop
 800aff4:	200008e0 	.word	0x200008e0

0800aff8 <std>:
 800aff8:	2300      	movs	r3, #0
 800affa:	b510      	push	{r4, lr}
 800affc:	4604      	mov	r4, r0
 800affe:	e9c0 3300 	strd	r3, r3, [r0]
 800b002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b006:	6083      	str	r3, [r0, #8]
 800b008:	8181      	strh	r1, [r0, #12]
 800b00a:	6643      	str	r3, [r0, #100]	; 0x64
 800b00c:	81c2      	strh	r2, [r0, #14]
 800b00e:	6183      	str	r3, [r0, #24]
 800b010:	4619      	mov	r1, r3
 800b012:	2208      	movs	r2, #8
 800b014:	305c      	adds	r0, #92	; 0x5c
 800b016:	f000 fad7 	bl	800b5c8 <memset>
 800b01a:	4b0d      	ldr	r3, [pc, #52]	; (800b050 <std+0x58>)
 800b01c:	6263      	str	r3, [r4, #36]	; 0x24
 800b01e:	4b0d      	ldr	r3, [pc, #52]	; (800b054 <std+0x5c>)
 800b020:	62a3      	str	r3, [r4, #40]	; 0x28
 800b022:	4b0d      	ldr	r3, [pc, #52]	; (800b058 <std+0x60>)
 800b024:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b026:	4b0d      	ldr	r3, [pc, #52]	; (800b05c <std+0x64>)
 800b028:	6323      	str	r3, [r4, #48]	; 0x30
 800b02a:	4b0d      	ldr	r3, [pc, #52]	; (800b060 <std+0x68>)
 800b02c:	6224      	str	r4, [r4, #32]
 800b02e:	429c      	cmp	r4, r3
 800b030:	d006      	beq.n	800b040 <std+0x48>
 800b032:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b036:	4294      	cmp	r4, r2
 800b038:	d002      	beq.n	800b040 <std+0x48>
 800b03a:	33d0      	adds	r3, #208	; 0xd0
 800b03c:	429c      	cmp	r4, r3
 800b03e:	d105      	bne.n	800b04c <std+0x54>
 800b040:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b048:	f000 bb5c 	b.w	800b704 <__retarget_lock_init_recursive>
 800b04c:	bd10      	pop	{r4, pc}
 800b04e:	bf00      	nop
 800b050:	0800b419 	.word	0x0800b419
 800b054:	0800b43b 	.word	0x0800b43b
 800b058:	0800b473 	.word	0x0800b473
 800b05c:	0800b497 	.word	0x0800b497
 800b060:	200038c8 	.word	0x200038c8

0800b064 <stdio_exit_handler>:
 800b064:	4a02      	ldr	r2, [pc, #8]	; (800b070 <stdio_exit_handler+0xc>)
 800b066:	4903      	ldr	r1, [pc, #12]	; (800b074 <stdio_exit_handler+0x10>)
 800b068:	4803      	ldr	r0, [pc, #12]	; (800b078 <stdio_exit_handler+0x14>)
 800b06a:	f000 b869 	b.w	800b140 <_fwalk_sglue>
 800b06e:	bf00      	nop
 800b070:	20000888 	.word	0x20000888
 800b074:	0800c73d 	.word	0x0800c73d
 800b078:	20000894 	.word	0x20000894

0800b07c <cleanup_stdio>:
 800b07c:	6841      	ldr	r1, [r0, #4]
 800b07e:	4b0c      	ldr	r3, [pc, #48]	; (800b0b0 <cleanup_stdio+0x34>)
 800b080:	4299      	cmp	r1, r3
 800b082:	b510      	push	{r4, lr}
 800b084:	4604      	mov	r4, r0
 800b086:	d001      	beq.n	800b08c <cleanup_stdio+0x10>
 800b088:	f001 fb58 	bl	800c73c <_fflush_r>
 800b08c:	68a1      	ldr	r1, [r4, #8]
 800b08e:	4b09      	ldr	r3, [pc, #36]	; (800b0b4 <cleanup_stdio+0x38>)
 800b090:	4299      	cmp	r1, r3
 800b092:	d002      	beq.n	800b09a <cleanup_stdio+0x1e>
 800b094:	4620      	mov	r0, r4
 800b096:	f001 fb51 	bl	800c73c <_fflush_r>
 800b09a:	68e1      	ldr	r1, [r4, #12]
 800b09c:	4b06      	ldr	r3, [pc, #24]	; (800b0b8 <cleanup_stdio+0x3c>)
 800b09e:	4299      	cmp	r1, r3
 800b0a0:	d004      	beq.n	800b0ac <cleanup_stdio+0x30>
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0a8:	f001 bb48 	b.w	800c73c <_fflush_r>
 800b0ac:	bd10      	pop	{r4, pc}
 800b0ae:	bf00      	nop
 800b0b0:	200038c8 	.word	0x200038c8
 800b0b4:	20003930 	.word	0x20003930
 800b0b8:	20003998 	.word	0x20003998

0800b0bc <global_stdio_init.part.0>:
 800b0bc:	b510      	push	{r4, lr}
 800b0be:	4b0b      	ldr	r3, [pc, #44]	; (800b0ec <global_stdio_init.part.0+0x30>)
 800b0c0:	4c0b      	ldr	r4, [pc, #44]	; (800b0f0 <global_stdio_init.part.0+0x34>)
 800b0c2:	4a0c      	ldr	r2, [pc, #48]	; (800b0f4 <global_stdio_init.part.0+0x38>)
 800b0c4:	601a      	str	r2, [r3, #0]
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	2104      	movs	r1, #4
 800b0cc:	f7ff ff94 	bl	800aff8 <std>
 800b0d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	2109      	movs	r1, #9
 800b0d8:	f7ff ff8e 	bl	800aff8 <std>
 800b0dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0e6:	2112      	movs	r1, #18
 800b0e8:	f7ff bf86 	b.w	800aff8 <std>
 800b0ec:	20003a00 	.word	0x20003a00
 800b0f0:	200038c8 	.word	0x200038c8
 800b0f4:	0800b065 	.word	0x0800b065

0800b0f8 <__sfp_lock_acquire>:
 800b0f8:	4801      	ldr	r0, [pc, #4]	; (800b100 <__sfp_lock_acquire+0x8>)
 800b0fa:	f000 bb04 	b.w	800b706 <__retarget_lock_acquire_recursive>
 800b0fe:	bf00      	nop
 800b100:	20003a09 	.word	0x20003a09

0800b104 <__sfp_lock_release>:
 800b104:	4801      	ldr	r0, [pc, #4]	; (800b10c <__sfp_lock_release+0x8>)
 800b106:	f000 baff 	b.w	800b708 <__retarget_lock_release_recursive>
 800b10a:	bf00      	nop
 800b10c:	20003a09 	.word	0x20003a09

0800b110 <__sinit>:
 800b110:	b510      	push	{r4, lr}
 800b112:	4604      	mov	r4, r0
 800b114:	f7ff fff0 	bl	800b0f8 <__sfp_lock_acquire>
 800b118:	6a23      	ldr	r3, [r4, #32]
 800b11a:	b11b      	cbz	r3, 800b124 <__sinit+0x14>
 800b11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b120:	f7ff bff0 	b.w	800b104 <__sfp_lock_release>
 800b124:	4b04      	ldr	r3, [pc, #16]	; (800b138 <__sinit+0x28>)
 800b126:	6223      	str	r3, [r4, #32]
 800b128:	4b04      	ldr	r3, [pc, #16]	; (800b13c <__sinit+0x2c>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1f5      	bne.n	800b11c <__sinit+0xc>
 800b130:	f7ff ffc4 	bl	800b0bc <global_stdio_init.part.0>
 800b134:	e7f2      	b.n	800b11c <__sinit+0xc>
 800b136:	bf00      	nop
 800b138:	0800b07d 	.word	0x0800b07d
 800b13c:	20003a00 	.word	0x20003a00

0800b140 <_fwalk_sglue>:
 800b140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b144:	4607      	mov	r7, r0
 800b146:	4688      	mov	r8, r1
 800b148:	4614      	mov	r4, r2
 800b14a:	2600      	movs	r6, #0
 800b14c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b150:	f1b9 0901 	subs.w	r9, r9, #1
 800b154:	d505      	bpl.n	800b162 <_fwalk_sglue+0x22>
 800b156:	6824      	ldr	r4, [r4, #0]
 800b158:	2c00      	cmp	r4, #0
 800b15a:	d1f7      	bne.n	800b14c <_fwalk_sglue+0xc>
 800b15c:	4630      	mov	r0, r6
 800b15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b162:	89ab      	ldrh	r3, [r5, #12]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d907      	bls.n	800b178 <_fwalk_sglue+0x38>
 800b168:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b16c:	3301      	adds	r3, #1
 800b16e:	d003      	beq.n	800b178 <_fwalk_sglue+0x38>
 800b170:	4629      	mov	r1, r5
 800b172:	4638      	mov	r0, r7
 800b174:	47c0      	blx	r8
 800b176:	4306      	orrs	r6, r0
 800b178:	3568      	adds	r5, #104	; 0x68
 800b17a:	e7e9      	b.n	800b150 <_fwalk_sglue+0x10>

0800b17c <iprintf>:
 800b17c:	b40f      	push	{r0, r1, r2, r3}
 800b17e:	b507      	push	{r0, r1, r2, lr}
 800b180:	4906      	ldr	r1, [pc, #24]	; (800b19c <iprintf+0x20>)
 800b182:	ab04      	add	r3, sp, #16
 800b184:	6808      	ldr	r0, [r1, #0]
 800b186:	f853 2b04 	ldr.w	r2, [r3], #4
 800b18a:	6881      	ldr	r1, [r0, #8]
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	f000 fca1 	bl	800bad4 <_vfiprintf_r>
 800b192:	b003      	add	sp, #12
 800b194:	f85d eb04 	ldr.w	lr, [sp], #4
 800b198:	b004      	add	sp, #16
 800b19a:	4770      	bx	lr
 800b19c:	200008e0 	.word	0x200008e0

0800b1a0 <_puts_r>:
 800b1a0:	6a03      	ldr	r3, [r0, #32]
 800b1a2:	b570      	push	{r4, r5, r6, lr}
 800b1a4:	6884      	ldr	r4, [r0, #8]
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	460e      	mov	r6, r1
 800b1aa:	b90b      	cbnz	r3, 800b1b0 <_puts_r+0x10>
 800b1ac:	f7ff ffb0 	bl	800b110 <__sinit>
 800b1b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1b2:	07db      	lsls	r3, r3, #31
 800b1b4:	d405      	bmi.n	800b1c2 <_puts_r+0x22>
 800b1b6:	89a3      	ldrh	r3, [r4, #12]
 800b1b8:	0598      	lsls	r0, r3, #22
 800b1ba:	d402      	bmi.n	800b1c2 <_puts_r+0x22>
 800b1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1be:	f000 faa2 	bl	800b706 <__retarget_lock_acquire_recursive>
 800b1c2:	89a3      	ldrh	r3, [r4, #12]
 800b1c4:	0719      	lsls	r1, r3, #28
 800b1c6:	d513      	bpl.n	800b1f0 <_puts_r+0x50>
 800b1c8:	6923      	ldr	r3, [r4, #16]
 800b1ca:	b18b      	cbz	r3, 800b1f0 <_puts_r+0x50>
 800b1cc:	3e01      	subs	r6, #1
 800b1ce:	68a3      	ldr	r3, [r4, #8]
 800b1d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	60a3      	str	r3, [r4, #8]
 800b1d8:	b9e9      	cbnz	r1, 800b216 <_puts_r+0x76>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	da2e      	bge.n	800b23c <_puts_r+0x9c>
 800b1de:	4622      	mov	r2, r4
 800b1e0:	210a      	movs	r1, #10
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	f000 f95b 	bl	800b49e <__swbuf_r>
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	d007      	beq.n	800b1fc <_puts_r+0x5c>
 800b1ec:	250a      	movs	r5, #10
 800b1ee:	e007      	b.n	800b200 <_puts_r+0x60>
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f000 f990 	bl	800b518 <__swsetup_r>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d0e7      	beq.n	800b1cc <_puts_r+0x2c>
 800b1fc:	f04f 35ff 	mov.w	r5, #4294967295
 800b200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b202:	07da      	lsls	r2, r3, #31
 800b204:	d405      	bmi.n	800b212 <_puts_r+0x72>
 800b206:	89a3      	ldrh	r3, [r4, #12]
 800b208:	059b      	lsls	r3, r3, #22
 800b20a:	d402      	bmi.n	800b212 <_puts_r+0x72>
 800b20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b20e:	f000 fa7b 	bl	800b708 <__retarget_lock_release_recursive>
 800b212:	4628      	mov	r0, r5
 800b214:	bd70      	pop	{r4, r5, r6, pc}
 800b216:	2b00      	cmp	r3, #0
 800b218:	da04      	bge.n	800b224 <_puts_r+0x84>
 800b21a:	69a2      	ldr	r2, [r4, #24]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	dc06      	bgt.n	800b22e <_puts_r+0x8e>
 800b220:	290a      	cmp	r1, #10
 800b222:	d004      	beq.n	800b22e <_puts_r+0x8e>
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	6022      	str	r2, [r4, #0]
 800b22a:	7019      	strb	r1, [r3, #0]
 800b22c:	e7cf      	b.n	800b1ce <_puts_r+0x2e>
 800b22e:	4622      	mov	r2, r4
 800b230:	4628      	mov	r0, r5
 800b232:	f000 f934 	bl	800b49e <__swbuf_r>
 800b236:	3001      	adds	r0, #1
 800b238:	d1c9      	bne.n	800b1ce <_puts_r+0x2e>
 800b23a:	e7df      	b.n	800b1fc <_puts_r+0x5c>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	250a      	movs	r5, #10
 800b240:	1c5a      	adds	r2, r3, #1
 800b242:	6022      	str	r2, [r4, #0]
 800b244:	701d      	strb	r5, [r3, #0]
 800b246:	e7db      	b.n	800b200 <_puts_r+0x60>

0800b248 <puts>:
 800b248:	4b02      	ldr	r3, [pc, #8]	; (800b254 <puts+0xc>)
 800b24a:	4601      	mov	r1, r0
 800b24c:	6818      	ldr	r0, [r3, #0]
 800b24e:	f7ff bfa7 	b.w	800b1a0 <_puts_r>
 800b252:	bf00      	nop
 800b254:	200008e0 	.word	0x200008e0

0800b258 <iscanf>:
 800b258:	b40f      	push	{r0, r1, r2, r3}
 800b25a:	b507      	push	{r0, r1, r2, lr}
 800b25c:	4906      	ldr	r1, [pc, #24]	; (800b278 <iscanf+0x20>)
 800b25e:	ab04      	add	r3, sp, #16
 800b260:	6808      	ldr	r0, [r1, #0]
 800b262:	f853 2b04 	ldr.w	r2, [r3], #4
 800b266:	6841      	ldr	r1, [r0, #4]
 800b268:	9301      	str	r3, [sp, #4]
 800b26a:	f001 f87f 	bl	800c36c <_vfiscanf_r>
 800b26e:	b003      	add	sp, #12
 800b270:	f85d eb04 	ldr.w	lr, [sp], #4
 800b274:	b004      	add	sp, #16
 800b276:	4770      	bx	lr
 800b278:	200008e0 	.word	0x200008e0

0800b27c <setvbuf>:
 800b27c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b280:	461d      	mov	r5, r3
 800b282:	4b54      	ldr	r3, [pc, #336]	; (800b3d4 <setvbuf+0x158>)
 800b284:	681f      	ldr	r7, [r3, #0]
 800b286:	4604      	mov	r4, r0
 800b288:	460e      	mov	r6, r1
 800b28a:	4690      	mov	r8, r2
 800b28c:	b127      	cbz	r7, 800b298 <setvbuf+0x1c>
 800b28e:	6a3b      	ldr	r3, [r7, #32]
 800b290:	b913      	cbnz	r3, 800b298 <setvbuf+0x1c>
 800b292:	4638      	mov	r0, r7
 800b294:	f7ff ff3c 	bl	800b110 <__sinit>
 800b298:	f1b8 0f02 	cmp.w	r8, #2
 800b29c:	d006      	beq.n	800b2ac <setvbuf+0x30>
 800b29e:	f1b8 0f01 	cmp.w	r8, #1
 800b2a2:	f200 8094 	bhi.w	800b3ce <setvbuf+0x152>
 800b2a6:	2d00      	cmp	r5, #0
 800b2a8:	f2c0 8091 	blt.w	800b3ce <setvbuf+0x152>
 800b2ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2ae:	07da      	lsls	r2, r3, #31
 800b2b0:	d405      	bmi.n	800b2be <setvbuf+0x42>
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	059b      	lsls	r3, r3, #22
 800b2b6:	d402      	bmi.n	800b2be <setvbuf+0x42>
 800b2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2ba:	f000 fa24 	bl	800b706 <__retarget_lock_acquire_recursive>
 800b2be:	4621      	mov	r1, r4
 800b2c0:	4638      	mov	r0, r7
 800b2c2:	f001 fa3b 	bl	800c73c <_fflush_r>
 800b2c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2c8:	b141      	cbz	r1, 800b2dc <setvbuf+0x60>
 800b2ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2ce:	4299      	cmp	r1, r3
 800b2d0:	d002      	beq.n	800b2d8 <setvbuf+0x5c>
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	f000 fa30 	bl	800b738 <_free_r>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	6363      	str	r3, [r4, #52]	; 0x34
 800b2dc:	2300      	movs	r3, #0
 800b2de:	61a3      	str	r3, [r4, #24]
 800b2e0:	6063      	str	r3, [r4, #4]
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	0618      	lsls	r0, r3, #24
 800b2e6:	d503      	bpl.n	800b2f0 <setvbuf+0x74>
 800b2e8:	6921      	ldr	r1, [r4, #16]
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	f000 fa24 	bl	800b738 <_free_r>
 800b2f0:	89a3      	ldrh	r3, [r4, #12]
 800b2f2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b2f6:	f023 0303 	bic.w	r3, r3, #3
 800b2fa:	f1b8 0f02 	cmp.w	r8, #2
 800b2fe:	81a3      	strh	r3, [r4, #12]
 800b300:	d05f      	beq.n	800b3c2 <setvbuf+0x146>
 800b302:	ab01      	add	r3, sp, #4
 800b304:	466a      	mov	r2, sp
 800b306:	4621      	mov	r1, r4
 800b308:	4638      	mov	r0, r7
 800b30a:	f001 fa3f 	bl	800c78c <__swhatbuf_r>
 800b30e:	89a3      	ldrh	r3, [r4, #12]
 800b310:	4318      	orrs	r0, r3
 800b312:	81a0      	strh	r0, [r4, #12]
 800b314:	bb2d      	cbnz	r5, 800b362 <setvbuf+0xe6>
 800b316:	9d00      	ldr	r5, [sp, #0]
 800b318:	4628      	mov	r0, r5
 800b31a:	f7ff fd23 	bl	800ad64 <malloc>
 800b31e:	4606      	mov	r6, r0
 800b320:	2800      	cmp	r0, #0
 800b322:	d150      	bne.n	800b3c6 <setvbuf+0x14a>
 800b324:	f8dd 9000 	ldr.w	r9, [sp]
 800b328:	45a9      	cmp	r9, r5
 800b32a:	d13e      	bne.n	800b3aa <setvbuf+0x12e>
 800b32c:	f04f 35ff 	mov.w	r5, #4294967295
 800b330:	2200      	movs	r2, #0
 800b332:	60a2      	str	r2, [r4, #8]
 800b334:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b338:	6022      	str	r2, [r4, #0]
 800b33a:	6122      	str	r2, [r4, #16]
 800b33c:	2201      	movs	r2, #1
 800b33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b342:	6162      	str	r2, [r4, #20]
 800b344:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b346:	f043 0302 	orr.w	r3, r3, #2
 800b34a:	07d1      	lsls	r1, r2, #31
 800b34c:	81a3      	strh	r3, [r4, #12]
 800b34e:	d404      	bmi.n	800b35a <setvbuf+0xde>
 800b350:	059b      	lsls	r3, r3, #22
 800b352:	d402      	bmi.n	800b35a <setvbuf+0xde>
 800b354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b356:	f000 f9d7 	bl	800b708 <__retarget_lock_release_recursive>
 800b35a:	4628      	mov	r0, r5
 800b35c:	b003      	add	sp, #12
 800b35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b362:	2e00      	cmp	r6, #0
 800b364:	d0d8      	beq.n	800b318 <setvbuf+0x9c>
 800b366:	6a3b      	ldr	r3, [r7, #32]
 800b368:	b913      	cbnz	r3, 800b370 <setvbuf+0xf4>
 800b36a:	4638      	mov	r0, r7
 800b36c:	f7ff fed0 	bl	800b110 <__sinit>
 800b370:	f1b8 0f01 	cmp.w	r8, #1
 800b374:	bf08      	it	eq
 800b376:	89a3      	ldrheq	r3, [r4, #12]
 800b378:	6026      	str	r6, [r4, #0]
 800b37a:	bf04      	itt	eq
 800b37c:	f043 0301 	orreq.w	r3, r3, #1
 800b380:	81a3      	strheq	r3, [r4, #12]
 800b382:	89a3      	ldrh	r3, [r4, #12]
 800b384:	f013 0208 	ands.w	r2, r3, #8
 800b388:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b38c:	d01d      	beq.n	800b3ca <setvbuf+0x14e>
 800b38e:	07da      	lsls	r2, r3, #31
 800b390:	bf41      	itttt	mi
 800b392:	2200      	movmi	r2, #0
 800b394:	426d      	negmi	r5, r5
 800b396:	60a2      	strmi	r2, [r4, #8]
 800b398:	61a5      	strmi	r5, [r4, #24]
 800b39a:	bf58      	it	pl
 800b39c:	60a5      	strpl	r5, [r4, #8]
 800b39e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b3a0:	f015 0501 	ands.w	r5, r5, #1
 800b3a4:	d0d4      	beq.n	800b350 <setvbuf+0xd4>
 800b3a6:	2500      	movs	r5, #0
 800b3a8:	e7d7      	b.n	800b35a <setvbuf+0xde>
 800b3aa:	4648      	mov	r0, r9
 800b3ac:	f7ff fcda 	bl	800ad64 <malloc>
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d0ba      	beq.n	800b32c <setvbuf+0xb0>
 800b3b6:	89a3      	ldrh	r3, [r4, #12]
 800b3b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3bc:	81a3      	strh	r3, [r4, #12]
 800b3be:	464d      	mov	r5, r9
 800b3c0:	e7d1      	b.n	800b366 <setvbuf+0xea>
 800b3c2:	2500      	movs	r5, #0
 800b3c4:	e7b4      	b.n	800b330 <setvbuf+0xb4>
 800b3c6:	46a9      	mov	r9, r5
 800b3c8:	e7f5      	b.n	800b3b6 <setvbuf+0x13a>
 800b3ca:	60a2      	str	r2, [r4, #8]
 800b3cc:	e7e7      	b.n	800b39e <setvbuf+0x122>
 800b3ce:	f04f 35ff 	mov.w	r5, #4294967295
 800b3d2:	e7c2      	b.n	800b35a <setvbuf+0xde>
 800b3d4:	200008e0 	.word	0x200008e0

0800b3d8 <siprintf>:
 800b3d8:	b40e      	push	{r1, r2, r3}
 800b3da:	b500      	push	{lr}
 800b3dc:	b09c      	sub	sp, #112	; 0x70
 800b3de:	ab1d      	add	r3, sp, #116	; 0x74
 800b3e0:	9002      	str	r0, [sp, #8]
 800b3e2:	9006      	str	r0, [sp, #24]
 800b3e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3e8:	4809      	ldr	r0, [pc, #36]	; (800b410 <siprintf+0x38>)
 800b3ea:	9107      	str	r1, [sp, #28]
 800b3ec:	9104      	str	r1, [sp, #16]
 800b3ee:	4909      	ldr	r1, [pc, #36]	; (800b414 <siprintf+0x3c>)
 800b3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3f4:	9105      	str	r1, [sp, #20]
 800b3f6:	6800      	ldr	r0, [r0, #0]
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	a902      	add	r1, sp, #8
 800b3fc:	f000 fa42 	bl	800b884 <_svfiprintf_r>
 800b400:	9b02      	ldr	r3, [sp, #8]
 800b402:	2200      	movs	r2, #0
 800b404:	701a      	strb	r2, [r3, #0]
 800b406:	b01c      	add	sp, #112	; 0x70
 800b408:	f85d eb04 	ldr.w	lr, [sp], #4
 800b40c:	b003      	add	sp, #12
 800b40e:	4770      	bx	lr
 800b410:	200008e0 	.word	0x200008e0
 800b414:	ffff0208 	.word	0xffff0208

0800b418 <__sread>:
 800b418:	b510      	push	{r4, lr}
 800b41a:	460c      	mov	r4, r1
 800b41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b420:	f000 f912 	bl	800b648 <_read_r>
 800b424:	2800      	cmp	r0, #0
 800b426:	bfab      	itete	ge
 800b428:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b42a:	89a3      	ldrhlt	r3, [r4, #12]
 800b42c:	181b      	addge	r3, r3, r0
 800b42e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b432:	bfac      	ite	ge
 800b434:	6563      	strge	r3, [r4, #84]	; 0x54
 800b436:	81a3      	strhlt	r3, [r4, #12]
 800b438:	bd10      	pop	{r4, pc}

0800b43a <__swrite>:
 800b43a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b43e:	461f      	mov	r7, r3
 800b440:	898b      	ldrh	r3, [r1, #12]
 800b442:	05db      	lsls	r3, r3, #23
 800b444:	4605      	mov	r5, r0
 800b446:	460c      	mov	r4, r1
 800b448:	4616      	mov	r6, r2
 800b44a:	d505      	bpl.n	800b458 <__swrite+0x1e>
 800b44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b450:	2302      	movs	r3, #2
 800b452:	2200      	movs	r2, #0
 800b454:	f000 f8e6 	bl	800b624 <_lseek_r>
 800b458:	89a3      	ldrh	r3, [r4, #12]
 800b45a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b45e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b462:	81a3      	strh	r3, [r4, #12]
 800b464:	4632      	mov	r2, r6
 800b466:	463b      	mov	r3, r7
 800b468:	4628      	mov	r0, r5
 800b46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b46e:	f000 b90d 	b.w	800b68c <_write_r>

0800b472 <__sseek>:
 800b472:	b510      	push	{r4, lr}
 800b474:	460c      	mov	r4, r1
 800b476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b47a:	f000 f8d3 	bl	800b624 <_lseek_r>
 800b47e:	1c43      	adds	r3, r0, #1
 800b480:	89a3      	ldrh	r3, [r4, #12]
 800b482:	bf15      	itete	ne
 800b484:	6560      	strne	r0, [r4, #84]	; 0x54
 800b486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b48a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b48e:	81a3      	strheq	r3, [r4, #12]
 800b490:	bf18      	it	ne
 800b492:	81a3      	strhne	r3, [r4, #12]
 800b494:	bd10      	pop	{r4, pc}

0800b496 <__sclose>:
 800b496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b49a:	f000 b8b3 	b.w	800b604 <_close_r>

0800b49e <__swbuf_r>:
 800b49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a0:	460e      	mov	r6, r1
 800b4a2:	4614      	mov	r4, r2
 800b4a4:	4605      	mov	r5, r0
 800b4a6:	b118      	cbz	r0, 800b4b0 <__swbuf_r+0x12>
 800b4a8:	6a03      	ldr	r3, [r0, #32]
 800b4aa:	b90b      	cbnz	r3, 800b4b0 <__swbuf_r+0x12>
 800b4ac:	f7ff fe30 	bl	800b110 <__sinit>
 800b4b0:	69a3      	ldr	r3, [r4, #24]
 800b4b2:	60a3      	str	r3, [r4, #8]
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	071a      	lsls	r2, r3, #28
 800b4b8:	d525      	bpl.n	800b506 <__swbuf_r+0x68>
 800b4ba:	6923      	ldr	r3, [r4, #16]
 800b4bc:	b31b      	cbz	r3, 800b506 <__swbuf_r+0x68>
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	6922      	ldr	r2, [r4, #16]
 800b4c2:	1a98      	subs	r0, r3, r2
 800b4c4:	6963      	ldr	r3, [r4, #20]
 800b4c6:	b2f6      	uxtb	r6, r6
 800b4c8:	4283      	cmp	r3, r0
 800b4ca:	4637      	mov	r7, r6
 800b4cc:	dc04      	bgt.n	800b4d8 <__swbuf_r+0x3a>
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	f001 f933 	bl	800c73c <_fflush_r>
 800b4d6:	b9e0      	cbnz	r0, 800b512 <__swbuf_r+0x74>
 800b4d8:	68a3      	ldr	r3, [r4, #8]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	60a3      	str	r3, [r4, #8]
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	1c5a      	adds	r2, r3, #1
 800b4e2:	6022      	str	r2, [r4, #0]
 800b4e4:	701e      	strb	r6, [r3, #0]
 800b4e6:	6962      	ldr	r2, [r4, #20]
 800b4e8:	1c43      	adds	r3, r0, #1
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d004      	beq.n	800b4f8 <__swbuf_r+0x5a>
 800b4ee:	89a3      	ldrh	r3, [r4, #12]
 800b4f0:	07db      	lsls	r3, r3, #31
 800b4f2:	d506      	bpl.n	800b502 <__swbuf_r+0x64>
 800b4f4:	2e0a      	cmp	r6, #10
 800b4f6:	d104      	bne.n	800b502 <__swbuf_r+0x64>
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f001 f91e 	bl	800c73c <_fflush_r>
 800b500:	b938      	cbnz	r0, 800b512 <__swbuf_r+0x74>
 800b502:	4638      	mov	r0, r7
 800b504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b506:	4621      	mov	r1, r4
 800b508:	4628      	mov	r0, r5
 800b50a:	f000 f805 	bl	800b518 <__swsetup_r>
 800b50e:	2800      	cmp	r0, #0
 800b510:	d0d5      	beq.n	800b4be <__swbuf_r+0x20>
 800b512:	f04f 37ff 	mov.w	r7, #4294967295
 800b516:	e7f4      	b.n	800b502 <__swbuf_r+0x64>

0800b518 <__swsetup_r>:
 800b518:	b538      	push	{r3, r4, r5, lr}
 800b51a:	4b2a      	ldr	r3, [pc, #168]	; (800b5c4 <__swsetup_r+0xac>)
 800b51c:	4605      	mov	r5, r0
 800b51e:	6818      	ldr	r0, [r3, #0]
 800b520:	460c      	mov	r4, r1
 800b522:	b118      	cbz	r0, 800b52c <__swsetup_r+0x14>
 800b524:	6a03      	ldr	r3, [r0, #32]
 800b526:	b90b      	cbnz	r3, 800b52c <__swsetup_r+0x14>
 800b528:	f7ff fdf2 	bl	800b110 <__sinit>
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b532:	0718      	lsls	r0, r3, #28
 800b534:	d422      	bmi.n	800b57c <__swsetup_r+0x64>
 800b536:	06d9      	lsls	r1, r3, #27
 800b538:	d407      	bmi.n	800b54a <__swsetup_r+0x32>
 800b53a:	2309      	movs	r3, #9
 800b53c:	602b      	str	r3, [r5, #0]
 800b53e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b542:	81a3      	strh	r3, [r4, #12]
 800b544:	f04f 30ff 	mov.w	r0, #4294967295
 800b548:	e034      	b.n	800b5b4 <__swsetup_r+0x9c>
 800b54a:	0758      	lsls	r0, r3, #29
 800b54c:	d512      	bpl.n	800b574 <__swsetup_r+0x5c>
 800b54e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b550:	b141      	cbz	r1, 800b564 <__swsetup_r+0x4c>
 800b552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b556:	4299      	cmp	r1, r3
 800b558:	d002      	beq.n	800b560 <__swsetup_r+0x48>
 800b55a:	4628      	mov	r0, r5
 800b55c:	f000 f8ec 	bl	800b738 <_free_r>
 800b560:	2300      	movs	r3, #0
 800b562:	6363      	str	r3, [r4, #52]	; 0x34
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b56a:	81a3      	strh	r3, [r4, #12]
 800b56c:	2300      	movs	r3, #0
 800b56e:	6063      	str	r3, [r4, #4]
 800b570:	6923      	ldr	r3, [r4, #16]
 800b572:	6023      	str	r3, [r4, #0]
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	f043 0308 	orr.w	r3, r3, #8
 800b57a:	81a3      	strh	r3, [r4, #12]
 800b57c:	6923      	ldr	r3, [r4, #16]
 800b57e:	b94b      	cbnz	r3, 800b594 <__swsetup_r+0x7c>
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b58a:	d003      	beq.n	800b594 <__swsetup_r+0x7c>
 800b58c:	4621      	mov	r1, r4
 800b58e:	4628      	mov	r0, r5
 800b590:	f001 f922 	bl	800c7d8 <__smakebuf_r>
 800b594:	89a0      	ldrh	r0, [r4, #12]
 800b596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b59a:	f010 0301 	ands.w	r3, r0, #1
 800b59e:	d00a      	beq.n	800b5b6 <__swsetup_r+0x9e>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	60a3      	str	r3, [r4, #8]
 800b5a4:	6963      	ldr	r3, [r4, #20]
 800b5a6:	425b      	negs	r3, r3
 800b5a8:	61a3      	str	r3, [r4, #24]
 800b5aa:	6923      	ldr	r3, [r4, #16]
 800b5ac:	b943      	cbnz	r3, 800b5c0 <__swsetup_r+0xa8>
 800b5ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b5b2:	d1c4      	bne.n	800b53e <__swsetup_r+0x26>
 800b5b4:	bd38      	pop	{r3, r4, r5, pc}
 800b5b6:	0781      	lsls	r1, r0, #30
 800b5b8:	bf58      	it	pl
 800b5ba:	6963      	ldrpl	r3, [r4, #20]
 800b5bc:	60a3      	str	r3, [r4, #8]
 800b5be:	e7f4      	b.n	800b5aa <__swsetup_r+0x92>
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	e7f7      	b.n	800b5b4 <__swsetup_r+0x9c>
 800b5c4:	200008e0 	.word	0x200008e0

0800b5c8 <memset>:
 800b5c8:	4402      	add	r2, r0
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d100      	bne.n	800b5d2 <memset+0xa>
 800b5d0:	4770      	bx	lr
 800b5d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b5d6:	e7f9      	b.n	800b5cc <memset+0x4>

0800b5d8 <strstr>:
 800b5d8:	780a      	ldrb	r2, [r1, #0]
 800b5da:	b570      	push	{r4, r5, r6, lr}
 800b5dc:	b96a      	cbnz	r2, 800b5fa <strstr+0x22>
 800b5de:	bd70      	pop	{r4, r5, r6, pc}
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d109      	bne.n	800b5f8 <strstr+0x20>
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d0f6      	beq.n	800b5de <strstr+0x6>
 800b5f0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b5f4:	429e      	cmp	r6, r3
 800b5f6:	d0f7      	beq.n	800b5e8 <strstr+0x10>
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	7803      	ldrb	r3, [r0, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1ef      	bne.n	800b5e0 <strstr+0x8>
 800b600:	4618      	mov	r0, r3
 800b602:	e7ec      	b.n	800b5de <strstr+0x6>

0800b604 <_close_r>:
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	4d06      	ldr	r5, [pc, #24]	; (800b620 <_close_r+0x1c>)
 800b608:	2300      	movs	r3, #0
 800b60a:	4604      	mov	r4, r0
 800b60c:	4608      	mov	r0, r1
 800b60e:	602b      	str	r3, [r5, #0]
 800b610:	f7f6 f822 	bl	8001658 <_close>
 800b614:	1c43      	adds	r3, r0, #1
 800b616:	d102      	bne.n	800b61e <_close_r+0x1a>
 800b618:	682b      	ldr	r3, [r5, #0]
 800b61a:	b103      	cbz	r3, 800b61e <_close_r+0x1a>
 800b61c:	6023      	str	r3, [r4, #0]
 800b61e:	bd38      	pop	{r3, r4, r5, pc}
 800b620:	20003a04 	.word	0x20003a04

0800b624 <_lseek_r>:
 800b624:	b538      	push	{r3, r4, r5, lr}
 800b626:	4d07      	ldr	r5, [pc, #28]	; (800b644 <_lseek_r+0x20>)
 800b628:	4604      	mov	r4, r0
 800b62a:	4608      	mov	r0, r1
 800b62c:	4611      	mov	r1, r2
 800b62e:	2200      	movs	r2, #0
 800b630:	602a      	str	r2, [r5, #0]
 800b632:	461a      	mov	r2, r3
 800b634:	f7f6 f827 	bl	8001686 <_lseek>
 800b638:	1c43      	adds	r3, r0, #1
 800b63a:	d102      	bne.n	800b642 <_lseek_r+0x1e>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	b103      	cbz	r3, 800b642 <_lseek_r+0x1e>
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	bd38      	pop	{r3, r4, r5, pc}
 800b644:	20003a04 	.word	0x20003a04

0800b648 <_read_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	4d07      	ldr	r5, [pc, #28]	; (800b668 <_read_r+0x20>)
 800b64c:	4604      	mov	r4, r0
 800b64e:	4608      	mov	r0, r1
 800b650:	4611      	mov	r1, r2
 800b652:	2200      	movs	r2, #0
 800b654:	602a      	str	r2, [r5, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	f7f6 f826 	bl	80016a8 <_read>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	d102      	bne.n	800b666 <_read_r+0x1e>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	b103      	cbz	r3, 800b666 <_read_r+0x1e>
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	bd38      	pop	{r3, r4, r5, pc}
 800b668:	20003a04 	.word	0x20003a04

0800b66c <_sbrk_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4d06      	ldr	r5, [pc, #24]	; (800b688 <_sbrk_r+0x1c>)
 800b670:	2300      	movs	r3, #0
 800b672:	4604      	mov	r4, r0
 800b674:	4608      	mov	r0, r1
 800b676:	602b      	str	r3, [r5, #0]
 800b678:	f7f6 faf2 	bl	8001c60 <_sbrk>
 800b67c:	1c43      	adds	r3, r0, #1
 800b67e:	d102      	bne.n	800b686 <_sbrk_r+0x1a>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	b103      	cbz	r3, 800b686 <_sbrk_r+0x1a>
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	bd38      	pop	{r3, r4, r5, pc}
 800b688:	20003a04 	.word	0x20003a04

0800b68c <_write_r>:
 800b68c:	b538      	push	{r3, r4, r5, lr}
 800b68e:	4d07      	ldr	r5, [pc, #28]	; (800b6ac <_write_r+0x20>)
 800b690:	4604      	mov	r4, r0
 800b692:	4608      	mov	r0, r1
 800b694:	4611      	mov	r1, r2
 800b696:	2200      	movs	r2, #0
 800b698:	602a      	str	r2, [r5, #0]
 800b69a:	461a      	mov	r2, r3
 800b69c:	f7f5 ffb0 	bl	8001600 <_write>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d102      	bne.n	800b6aa <_write_r+0x1e>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	b103      	cbz	r3, 800b6aa <_write_r+0x1e>
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	bd38      	pop	{r3, r4, r5, pc}
 800b6ac:	20003a04 	.word	0x20003a04

0800b6b0 <__errno>:
 800b6b0:	4b01      	ldr	r3, [pc, #4]	; (800b6b8 <__errno+0x8>)
 800b6b2:	6818      	ldr	r0, [r3, #0]
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	200008e0 	.word	0x200008e0

0800b6bc <__libc_init_array>:
 800b6bc:	b570      	push	{r4, r5, r6, lr}
 800b6be:	4d0d      	ldr	r5, [pc, #52]	; (800b6f4 <__libc_init_array+0x38>)
 800b6c0:	4c0d      	ldr	r4, [pc, #52]	; (800b6f8 <__libc_init_array+0x3c>)
 800b6c2:	1b64      	subs	r4, r4, r5
 800b6c4:	10a4      	asrs	r4, r4, #2
 800b6c6:	2600      	movs	r6, #0
 800b6c8:	42a6      	cmp	r6, r4
 800b6ca:	d109      	bne.n	800b6e0 <__libc_init_array+0x24>
 800b6cc:	4d0b      	ldr	r5, [pc, #44]	; (800b6fc <__libc_init_array+0x40>)
 800b6ce:	4c0c      	ldr	r4, [pc, #48]	; (800b700 <__libc_init_array+0x44>)
 800b6d0:	f001 fff4 	bl	800d6bc <_init>
 800b6d4:	1b64      	subs	r4, r4, r5
 800b6d6:	10a4      	asrs	r4, r4, #2
 800b6d8:	2600      	movs	r6, #0
 800b6da:	42a6      	cmp	r6, r4
 800b6dc:	d105      	bne.n	800b6ea <__libc_init_array+0x2e>
 800b6de:	bd70      	pop	{r4, r5, r6, pc}
 800b6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6e4:	4798      	blx	r3
 800b6e6:	3601      	adds	r6, #1
 800b6e8:	e7ee      	b.n	800b6c8 <__libc_init_array+0xc>
 800b6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ee:	4798      	blx	r3
 800b6f0:	3601      	adds	r6, #1
 800b6f2:	e7f2      	b.n	800b6da <__libc_init_array+0x1e>
 800b6f4:	08017068 	.word	0x08017068
 800b6f8:	08017068 	.word	0x08017068
 800b6fc:	08017068 	.word	0x08017068
 800b700:	0801706c 	.word	0x0801706c

0800b704 <__retarget_lock_init_recursive>:
 800b704:	4770      	bx	lr

0800b706 <__retarget_lock_acquire_recursive>:
 800b706:	4770      	bx	lr

0800b708 <__retarget_lock_release_recursive>:
 800b708:	4770      	bx	lr

0800b70a <strcpy>:
 800b70a:	4603      	mov	r3, r0
 800b70c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b710:	f803 2b01 	strb.w	r2, [r3], #1
 800b714:	2a00      	cmp	r2, #0
 800b716:	d1f9      	bne.n	800b70c <strcpy+0x2>
 800b718:	4770      	bx	lr

0800b71a <memcpy>:
 800b71a:	440a      	add	r2, r1
 800b71c:	4291      	cmp	r1, r2
 800b71e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b722:	d100      	bne.n	800b726 <memcpy+0xc>
 800b724:	4770      	bx	lr
 800b726:	b510      	push	{r4, lr}
 800b728:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b72c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b730:	4291      	cmp	r1, r2
 800b732:	d1f9      	bne.n	800b728 <memcpy+0xe>
 800b734:	bd10      	pop	{r4, pc}
	...

0800b738 <_free_r>:
 800b738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b73a:	2900      	cmp	r1, #0
 800b73c:	d044      	beq.n	800b7c8 <_free_r+0x90>
 800b73e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b742:	9001      	str	r0, [sp, #4]
 800b744:	2b00      	cmp	r3, #0
 800b746:	f1a1 0404 	sub.w	r4, r1, #4
 800b74a:	bfb8      	it	lt
 800b74c:	18e4      	addlt	r4, r4, r3
 800b74e:	f7ff fbb9 	bl	800aec4 <__malloc_lock>
 800b752:	4a1e      	ldr	r2, [pc, #120]	; (800b7cc <_free_r+0x94>)
 800b754:	9801      	ldr	r0, [sp, #4]
 800b756:	6813      	ldr	r3, [r2, #0]
 800b758:	b933      	cbnz	r3, 800b768 <_free_r+0x30>
 800b75a:	6063      	str	r3, [r4, #4]
 800b75c:	6014      	str	r4, [r2, #0]
 800b75e:	b003      	add	sp, #12
 800b760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b764:	f7ff bbb4 	b.w	800aed0 <__malloc_unlock>
 800b768:	42a3      	cmp	r3, r4
 800b76a:	d908      	bls.n	800b77e <_free_r+0x46>
 800b76c:	6825      	ldr	r5, [r4, #0]
 800b76e:	1961      	adds	r1, r4, r5
 800b770:	428b      	cmp	r3, r1
 800b772:	bf01      	itttt	eq
 800b774:	6819      	ldreq	r1, [r3, #0]
 800b776:	685b      	ldreq	r3, [r3, #4]
 800b778:	1949      	addeq	r1, r1, r5
 800b77a:	6021      	streq	r1, [r4, #0]
 800b77c:	e7ed      	b.n	800b75a <_free_r+0x22>
 800b77e:	461a      	mov	r2, r3
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	b10b      	cbz	r3, 800b788 <_free_r+0x50>
 800b784:	42a3      	cmp	r3, r4
 800b786:	d9fa      	bls.n	800b77e <_free_r+0x46>
 800b788:	6811      	ldr	r1, [r2, #0]
 800b78a:	1855      	adds	r5, r2, r1
 800b78c:	42a5      	cmp	r5, r4
 800b78e:	d10b      	bne.n	800b7a8 <_free_r+0x70>
 800b790:	6824      	ldr	r4, [r4, #0]
 800b792:	4421      	add	r1, r4
 800b794:	1854      	adds	r4, r2, r1
 800b796:	42a3      	cmp	r3, r4
 800b798:	6011      	str	r1, [r2, #0]
 800b79a:	d1e0      	bne.n	800b75e <_free_r+0x26>
 800b79c:	681c      	ldr	r4, [r3, #0]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	6053      	str	r3, [r2, #4]
 800b7a2:	440c      	add	r4, r1
 800b7a4:	6014      	str	r4, [r2, #0]
 800b7a6:	e7da      	b.n	800b75e <_free_r+0x26>
 800b7a8:	d902      	bls.n	800b7b0 <_free_r+0x78>
 800b7aa:	230c      	movs	r3, #12
 800b7ac:	6003      	str	r3, [r0, #0]
 800b7ae:	e7d6      	b.n	800b75e <_free_r+0x26>
 800b7b0:	6825      	ldr	r5, [r4, #0]
 800b7b2:	1961      	adds	r1, r4, r5
 800b7b4:	428b      	cmp	r3, r1
 800b7b6:	bf04      	itt	eq
 800b7b8:	6819      	ldreq	r1, [r3, #0]
 800b7ba:	685b      	ldreq	r3, [r3, #4]
 800b7bc:	6063      	str	r3, [r4, #4]
 800b7be:	bf04      	itt	eq
 800b7c0:	1949      	addeq	r1, r1, r5
 800b7c2:	6021      	streq	r1, [r4, #0]
 800b7c4:	6054      	str	r4, [r2, #4]
 800b7c6:	e7ca      	b.n	800b75e <_free_r+0x26>
 800b7c8:	b003      	add	sp, #12
 800b7ca:	bd30      	pop	{r4, r5, pc}
 800b7cc:	200038c0 	.word	0x200038c0

0800b7d0 <__ssputs_r>:
 800b7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d4:	688e      	ldr	r6, [r1, #8]
 800b7d6:	461f      	mov	r7, r3
 800b7d8:	42be      	cmp	r6, r7
 800b7da:	680b      	ldr	r3, [r1, #0]
 800b7dc:	4682      	mov	sl, r0
 800b7de:	460c      	mov	r4, r1
 800b7e0:	4690      	mov	r8, r2
 800b7e2:	d82c      	bhi.n	800b83e <__ssputs_r+0x6e>
 800b7e4:	898a      	ldrh	r2, [r1, #12]
 800b7e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7ea:	d026      	beq.n	800b83a <__ssputs_r+0x6a>
 800b7ec:	6965      	ldr	r5, [r4, #20]
 800b7ee:	6909      	ldr	r1, [r1, #16]
 800b7f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7f4:	eba3 0901 	sub.w	r9, r3, r1
 800b7f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7fc:	1c7b      	adds	r3, r7, #1
 800b7fe:	444b      	add	r3, r9
 800b800:	106d      	asrs	r5, r5, #1
 800b802:	429d      	cmp	r5, r3
 800b804:	bf38      	it	cc
 800b806:	461d      	movcc	r5, r3
 800b808:	0553      	lsls	r3, r2, #21
 800b80a:	d527      	bpl.n	800b85c <__ssputs_r+0x8c>
 800b80c:	4629      	mov	r1, r5
 800b80e:	f7ff fad9 	bl	800adc4 <_malloc_r>
 800b812:	4606      	mov	r6, r0
 800b814:	b360      	cbz	r0, 800b870 <__ssputs_r+0xa0>
 800b816:	6921      	ldr	r1, [r4, #16]
 800b818:	464a      	mov	r2, r9
 800b81a:	f7ff ff7e 	bl	800b71a <memcpy>
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b828:	81a3      	strh	r3, [r4, #12]
 800b82a:	6126      	str	r6, [r4, #16]
 800b82c:	6165      	str	r5, [r4, #20]
 800b82e:	444e      	add	r6, r9
 800b830:	eba5 0509 	sub.w	r5, r5, r9
 800b834:	6026      	str	r6, [r4, #0]
 800b836:	60a5      	str	r5, [r4, #8]
 800b838:	463e      	mov	r6, r7
 800b83a:	42be      	cmp	r6, r7
 800b83c:	d900      	bls.n	800b840 <__ssputs_r+0x70>
 800b83e:	463e      	mov	r6, r7
 800b840:	6820      	ldr	r0, [r4, #0]
 800b842:	4632      	mov	r2, r6
 800b844:	4641      	mov	r1, r8
 800b846:	f001 f980 	bl	800cb4a <memmove>
 800b84a:	68a3      	ldr	r3, [r4, #8]
 800b84c:	1b9b      	subs	r3, r3, r6
 800b84e:	60a3      	str	r3, [r4, #8]
 800b850:	6823      	ldr	r3, [r4, #0]
 800b852:	4433      	add	r3, r6
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	2000      	movs	r0, #0
 800b858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b85c:	462a      	mov	r2, r5
 800b85e:	f001 f9b1 	bl	800cbc4 <_realloc_r>
 800b862:	4606      	mov	r6, r0
 800b864:	2800      	cmp	r0, #0
 800b866:	d1e0      	bne.n	800b82a <__ssputs_r+0x5a>
 800b868:	6921      	ldr	r1, [r4, #16]
 800b86a:	4650      	mov	r0, sl
 800b86c:	f7ff ff64 	bl	800b738 <_free_r>
 800b870:	230c      	movs	r3, #12
 800b872:	f8ca 3000 	str.w	r3, [sl]
 800b876:	89a3      	ldrh	r3, [r4, #12]
 800b878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b87c:	81a3      	strh	r3, [r4, #12]
 800b87e:	f04f 30ff 	mov.w	r0, #4294967295
 800b882:	e7e9      	b.n	800b858 <__ssputs_r+0x88>

0800b884 <_svfiprintf_r>:
 800b884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b888:	4698      	mov	r8, r3
 800b88a:	898b      	ldrh	r3, [r1, #12]
 800b88c:	061b      	lsls	r3, r3, #24
 800b88e:	b09d      	sub	sp, #116	; 0x74
 800b890:	4607      	mov	r7, r0
 800b892:	460d      	mov	r5, r1
 800b894:	4614      	mov	r4, r2
 800b896:	d50e      	bpl.n	800b8b6 <_svfiprintf_r+0x32>
 800b898:	690b      	ldr	r3, [r1, #16]
 800b89a:	b963      	cbnz	r3, 800b8b6 <_svfiprintf_r+0x32>
 800b89c:	2140      	movs	r1, #64	; 0x40
 800b89e:	f7ff fa91 	bl	800adc4 <_malloc_r>
 800b8a2:	6028      	str	r0, [r5, #0]
 800b8a4:	6128      	str	r0, [r5, #16]
 800b8a6:	b920      	cbnz	r0, 800b8b2 <_svfiprintf_r+0x2e>
 800b8a8:	230c      	movs	r3, #12
 800b8aa:	603b      	str	r3, [r7, #0]
 800b8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b0:	e0d0      	b.n	800ba54 <_svfiprintf_r+0x1d0>
 800b8b2:	2340      	movs	r3, #64	; 0x40
 800b8b4:	616b      	str	r3, [r5, #20]
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ba:	2320      	movs	r3, #32
 800b8bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8c4:	2330      	movs	r3, #48	; 0x30
 800b8c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ba6c <_svfiprintf_r+0x1e8>
 800b8ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8ce:	f04f 0901 	mov.w	r9, #1
 800b8d2:	4623      	mov	r3, r4
 800b8d4:	469a      	mov	sl, r3
 800b8d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8da:	b10a      	cbz	r2, 800b8e0 <_svfiprintf_r+0x5c>
 800b8dc:	2a25      	cmp	r2, #37	; 0x25
 800b8de:	d1f9      	bne.n	800b8d4 <_svfiprintf_r+0x50>
 800b8e0:	ebba 0b04 	subs.w	fp, sl, r4
 800b8e4:	d00b      	beq.n	800b8fe <_svfiprintf_r+0x7a>
 800b8e6:	465b      	mov	r3, fp
 800b8e8:	4622      	mov	r2, r4
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	4638      	mov	r0, r7
 800b8ee:	f7ff ff6f 	bl	800b7d0 <__ssputs_r>
 800b8f2:	3001      	adds	r0, #1
 800b8f4:	f000 80a9 	beq.w	800ba4a <_svfiprintf_r+0x1c6>
 800b8f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8fa:	445a      	add	r2, fp
 800b8fc:	9209      	str	r2, [sp, #36]	; 0x24
 800b8fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b902:	2b00      	cmp	r3, #0
 800b904:	f000 80a1 	beq.w	800ba4a <_svfiprintf_r+0x1c6>
 800b908:	2300      	movs	r3, #0
 800b90a:	f04f 32ff 	mov.w	r2, #4294967295
 800b90e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b912:	f10a 0a01 	add.w	sl, sl, #1
 800b916:	9304      	str	r3, [sp, #16]
 800b918:	9307      	str	r3, [sp, #28]
 800b91a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b91e:	931a      	str	r3, [sp, #104]	; 0x68
 800b920:	4654      	mov	r4, sl
 800b922:	2205      	movs	r2, #5
 800b924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b928:	4850      	ldr	r0, [pc, #320]	; (800ba6c <_svfiprintf_r+0x1e8>)
 800b92a:	f7f4 fca1 	bl	8000270 <memchr>
 800b92e:	9a04      	ldr	r2, [sp, #16]
 800b930:	b9d8      	cbnz	r0, 800b96a <_svfiprintf_r+0xe6>
 800b932:	06d0      	lsls	r0, r2, #27
 800b934:	bf44      	itt	mi
 800b936:	2320      	movmi	r3, #32
 800b938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b93c:	0711      	lsls	r1, r2, #28
 800b93e:	bf44      	itt	mi
 800b940:	232b      	movmi	r3, #43	; 0x2b
 800b942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b946:	f89a 3000 	ldrb.w	r3, [sl]
 800b94a:	2b2a      	cmp	r3, #42	; 0x2a
 800b94c:	d015      	beq.n	800b97a <_svfiprintf_r+0xf6>
 800b94e:	9a07      	ldr	r2, [sp, #28]
 800b950:	4654      	mov	r4, sl
 800b952:	2000      	movs	r0, #0
 800b954:	f04f 0c0a 	mov.w	ip, #10
 800b958:	4621      	mov	r1, r4
 800b95a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b95e:	3b30      	subs	r3, #48	; 0x30
 800b960:	2b09      	cmp	r3, #9
 800b962:	d94d      	bls.n	800ba00 <_svfiprintf_r+0x17c>
 800b964:	b1b0      	cbz	r0, 800b994 <_svfiprintf_r+0x110>
 800b966:	9207      	str	r2, [sp, #28]
 800b968:	e014      	b.n	800b994 <_svfiprintf_r+0x110>
 800b96a:	eba0 0308 	sub.w	r3, r0, r8
 800b96e:	fa09 f303 	lsl.w	r3, r9, r3
 800b972:	4313      	orrs	r3, r2
 800b974:	9304      	str	r3, [sp, #16]
 800b976:	46a2      	mov	sl, r4
 800b978:	e7d2      	b.n	800b920 <_svfiprintf_r+0x9c>
 800b97a:	9b03      	ldr	r3, [sp, #12]
 800b97c:	1d19      	adds	r1, r3, #4
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	9103      	str	r1, [sp, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	bfbb      	ittet	lt
 800b986:	425b      	neglt	r3, r3
 800b988:	f042 0202 	orrlt.w	r2, r2, #2
 800b98c:	9307      	strge	r3, [sp, #28]
 800b98e:	9307      	strlt	r3, [sp, #28]
 800b990:	bfb8      	it	lt
 800b992:	9204      	strlt	r2, [sp, #16]
 800b994:	7823      	ldrb	r3, [r4, #0]
 800b996:	2b2e      	cmp	r3, #46	; 0x2e
 800b998:	d10c      	bne.n	800b9b4 <_svfiprintf_r+0x130>
 800b99a:	7863      	ldrb	r3, [r4, #1]
 800b99c:	2b2a      	cmp	r3, #42	; 0x2a
 800b99e:	d134      	bne.n	800ba0a <_svfiprintf_r+0x186>
 800b9a0:	9b03      	ldr	r3, [sp, #12]
 800b9a2:	1d1a      	adds	r2, r3, #4
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	9203      	str	r2, [sp, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bfb8      	it	lt
 800b9ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9b0:	3402      	adds	r4, #2
 800b9b2:	9305      	str	r3, [sp, #20]
 800b9b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ba7c <_svfiprintf_r+0x1f8>
 800b9b8:	7821      	ldrb	r1, [r4, #0]
 800b9ba:	2203      	movs	r2, #3
 800b9bc:	4650      	mov	r0, sl
 800b9be:	f7f4 fc57 	bl	8000270 <memchr>
 800b9c2:	b138      	cbz	r0, 800b9d4 <_svfiprintf_r+0x150>
 800b9c4:	9b04      	ldr	r3, [sp, #16]
 800b9c6:	eba0 000a 	sub.w	r0, r0, sl
 800b9ca:	2240      	movs	r2, #64	; 0x40
 800b9cc:	4082      	lsls	r2, r0
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	3401      	adds	r4, #1
 800b9d2:	9304      	str	r3, [sp, #16]
 800b9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d8:	4825      	ldr	r0, [pc, #148]	; (800ba70 <_svfiprintf_r+0x1ec>)
 800b9da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9de:	2206      	movs	r2, #6
 800b9e0:	f7f4 fc46 	bl	8000270 <memchr>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	d038      	beq.n	800ba5a <_svfiprintf_r+0x1d6>
 800b9e8:	4b22      	ldr	r3, [pc, #136]	; (800ba74 <_svfiprintf_r+0x1f0>)
 800b9ea:	bb1b      	cbnz	r3, 800ba34 <_svfiprintf_r+0x1b0>
 800b9ec:	9b03      	ldr	r3, [sp, #12]
 800b9ee:	3307      	adds	r3, #7
 800b9f0:	f023 0307 	bic.w	r3, r3, #7
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	9303      	str	r3, [sp, #12]
 800b9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9fa:	4433      	add	r3, r6
 800b9fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9fe:	e768      	b.n	800b8d2 <_svfiprintf_r+0x4e>
 800ba00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba04:	460c      	mov	r4, r1
 800ba06:	2001      	movs	r0, #1
 800ba08:	e7a6      	b.n	800b958 <_svfiprintf_r+0xd4>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	3401      	adds	r4, #1
 800ba0e:	9305      	str	r3, [sp, #20]
 800ba10:	4619      	mov	r1, r3
 800ba12:	f04f 0c0a 	mov.w	ip, #10
 800ba16:	4620      	mov	r0, r4
 800ba18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba1c:	3a30      	subs	r2, #48	; 0x30
 800ba1e:	2a09      	cmp	r2, #9
 800ba20:	d903      	bls.n	800ba2a <_svfiprintf_r+0x1a6>
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d0c6      	beq.n	800b9b4 <_svfiprintf_r+0x130>
 800ba26:	9105      	str	r1, [sp, #20]
 800ba28:	e7c4      	b.n	800b9b4 <_svfiprintf_r+0x130>
 800ba2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba2e:	4604      	mov	r4, r0
 800ba30:	2301      	movs	r3, #1
 800ba32:	e7f0      	b.n	800ba16 <_svfiprintf_r+0x192>
 800ba34:	ab03      	add	r3, sp, #12
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	462a      	mov	r2, r5
 800ba3a:	4b0f      	ldr	r3, [pc, #60]	; (800ba78 <_svfiprintf_r+0x1f4>)
 800ba3c:	a904      	add	r1, sp, #16
 800ba3e:	4638      	mov	r0, r7
 800ba40:	f3af 8000 	nop.w
 800ba44:	1c42      	adds	r2, r0, #1
 800ba46:	4606      	mov	r6, r0
 800ba48:	d1d6      	bne.n	800b9f8 <_svfiprintf_r+0x174>
 800ba4a:	89ab      	ldrh	r3, [r5, #12]
 800ba4c:	065b      	lsls	r3, r3, #25
 800ba4e:	f53f af2d 	bmi.w	800b8ac <_svfiprintf_r+0x28>
 800ba52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba54:	b01d      	add	sp, #116	; 0x74
 800ba56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba5a:	ab03      	add	r3, sp, #12
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	462a      	mov	r2, r5
 800ba60:	4b05      	ldr	r3, [pc, #20]	; (800ba78 <_svfiprintf_r+0x1f4>)
 800ba62:	a904      	add	r1, sp, #16
 800ba64:	4638      	mov	r0, r7
 800ba66:	f000 f9bd 	bl	800bde4 <_printf_i>
 800ba6a:	e7eb      	b.n	800ba44 <_svfiprintf_r+0x1c0>
 800ba6c:	08014ec9 	.word	0x08014ec9
 800ba70:	08014ed3 	.word	0x08014ed3
 800ba74:	00000000 	.word	0x00000000
 800ba78:	0800b7d1 	.word	0x0800b7d1
 800ba7c:	08014ecf 	.word	0x08014ecf

0800ba80 <__sfputc_r>:
 800ba80:	6893      	ldr	r3, [r2, #8]
 800ba82:	3b01      	subs	r3, #1
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	b410      	push	{r4}
 800ba88:	6093      	str	r3, [r2, #8]
 800ba8a:	da08      	bge.n	800ba9e <__sfputc_r+0x1e>
 800ba8c:	6994      	ldr	r4, [r2, #24]
 800ba8e:	42a3      	cmp	r3, r4
 800ba90:	db01      	blt.n	800ba96 <__sfputc_r+0x16>
 800ba92:	290a      	cmp	r1, #10
 800ba94:	d103      	bne.n	800ba9e <__sfputc_r+0x1e>
 800ba96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba9a:	f7ff bd00 	b.w	800b49e <__swbuf_r>
 800ba9e:	6813      	ldr	r3, [r2, #0]
 800baa0:	1c58      	adds	r0, r3, #1
 800baa2:	6010      	str	r0, [r2, #0]
 800baa4:	7019      	strb	r1, [r3, #0]
 800baa6:	4608      	mov	r0, r1
 800baa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baac:	4770      	bx	lr

0800baae <__sfputs_r>:
 800baae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab0:	4606      	mov	r6, r0
 800bab2:	460f      	mov	r7, r1
 800bab4:	4614      	mov	r4, r2
 800bab6:	18d5      	adds	r5, r2, r3
 800bab8:	42ac      	cmp	r4, r5
 800baba:	d101      	bne.n	800bac0 <__sfputs_r+0x12>
 800babc:	2000      	movs	r0, #0
 800babe:	e007      	b.n	800bad0 <__sfputs_r+0x22>
 800bac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac4:	463a      	mov	r2, r7
 800bac6:	4630      	mov	r0, r6
 800bac8:	f7ff ffda 	bl	800ba80 <__sfputc_r>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d1f3      	bne.n	800bab8 <__sfputs_r+0xa>
 800bad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bad4 <_vfiprintf_r>:
 800bad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad8:	460d      	mov	r5, r1
 800bada:	b09d      	sub	sp, #116	; 0x74
 800badc:	4614      	mov	r4, r2
 800bade:	4698      	mov	r8, r3
 800bae0:	4606      	mov	r6, r0
 800bae2:	b118      	cbz	r0, 800baec <_vfiprintf_r+0x18>
 800bae4:	6a03      	ldr	r3, [r0, #32]
 800bae6:	b90b      	cbnz	r3, 800baec <_vfiprintf_r+0x18>
 800bae8:	f7ff fb12 	bl	800b110 <__sinit>
 800baec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baee:	07d9      	lsls	r1, r3, #31
 800baf0:	d405      	bmi.n	800bafe <_vfiprintf_r+0x2a>
 800baf2:	89ab      	ldrh	r3, [r5, #12]
 800baf4:	059a      	lsls	r2, r3, #22
 800baf6:	d402      	bmi.n	800bafe <_vfiprintf_r+0x2a>
 800baf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bafa:	f7ff fe04 	bl	800b706 <__retarget_lock_acquire_recursive>
 800bafe:	89ab      	ldrh	r3, [r5, #12]
 800bb00:	071b      	lsls	r3, r3, #28
 800bb02:	d501      	bpl.n	800bb08 <_vfiprintf_r+0x34>
 800bb04:	692b      	ldr	r3, [r5, #16]
 800bb06:	b99b      	cbnz	r3, 800bb30 <_vfiprintf_r+0x5c>
 800bb08:	4629      	mov	r1, r5
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f7ff fd04 	bl	800b518 <__swsetup_r>
 800bb10:	b170      	cbz	r0, 800bb30 <_vfiprintf_r+0x5c>
 800bb12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb14:	07dc      	lsls	r4, r3, #31
 800bb16:	d504      	bpl.n	800bb22 <_vfiprintf_r+0x4e>
 800bb18:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1c:	b01d      	add	sp, #116	; 0x74
 800bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb22:	89ab      	ldrh	r3, [r5, #12]
 800bb24:	0598      	lsls	r0, r3, #22
 800bb26:	d4f7      	bmi.n	800bb18 <_vfiprintf_r+0x44>
 800bb28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb2a:	f7ff fded 	bl	800b708 <__retarget_lock_release_recursive>
 800bb2e:	e7f3      	b.n	800bb18 <_vfiprintf_r+0x44>
 800bb30:	2300      	movs	r3, #0
 800bb32:	9309      	str	r3, [sp, #36]	; 0x24
 800bb34:	2320      	movs	r3, #32
 800bb36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb3e:	2330      	movs	r3, #48	; 0x30
 800bb40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bcf4 <_vfiprintf_r+0x220>
 800bb44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb48:	f04f 0901 	mov.w	r9, #1
 800bb4c:	4623      	mov	r3, r4
 800bb4e:	469a      	mov	sl, r3
 800bb50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb54:	b10a      	cbz	r2, 800bb5a <_vfiprintf_r+0x86>
 800bb56:	2a25      	cmp	r2, #37	; 0x25
 800bb58:	d1f9      	bne.n	800bb4e <_vfiprintf_r+0x7a>
 800bb5a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb5e:	d00b      	beq.n	800bb78 <_vfiprintf_r+0xa4>
 800bb60:	465b      	mov	r3, fp
 800bb62:	4622      	mov	r2, r4
 800bb64:	4629      	mov	r1, r5
 800bb66:	4630      	mov	r0, r6
 800bb68:	f7ff ffa1 	bl	800baae <__sfputs_r>
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	f000 80a9 	beq.w	800bcc4 <_vfiprintf_r+0x1f0>
 800bb72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb74:	445a      	add	r2, fp
 800bb76:	9209      	str	r2, [sp, #36]	; 0x24
 800bb78:	f89a 3000 	ldrb.w	r3, [sl]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f000 80a1 	beq.w	800bcc4 <_vfiprintf_r+0x1f0>
 800bb82:	2300      	movs	r3, #0
 800bb84:	f04f 32ff 	mov.w	r2, #4294967295
 800bb88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb8c:	f10a 0a01 	add.w	sl, sl, #1
 800bb90:	9304      	str	r3, [sp, #16]
 800bb92:	9307      	str	r3, [sp, #28]
 800bb94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb98:	931a      	str	r3, [sp, #104]	; 0x68
 800bb9a:	4654      	mov	r4, sl
 800bb9c:	2205      	movs	r2, #5
 800bb9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bba2:	4854      	ldr	r0, [pc, #336]	; (800bcf4 <_vfiprintf_r+0x220>)
 800bba4:	f7f4 fb64 	bl	8000270 <memchr>
 800bba8:	9a04      	ldr	r2, [sp, #16]
 800bbaa:	b9d8      	cbnz	r0, 800bbe4 <_vfiprintf_r+0x110>
 800bbac:	06d1      	lsls	r1, r2, #27
 800bbae:	bf44      	itt	mi
 800bbb0:	2320      	movmi	r3, #32
 800bbb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbb6:	0713      	lsls	r3, r2, #28
 800bbb8:	bf44      	itt	mi
 800bbba:	232b      	movmi	r3, #43	; 0x2b
 800bbbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbc0:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc4:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc6:	d015      	beq.n	800bbf4 <_vfiprintf_r+0x120>
 800bbc8:	9a07      	ldr	r2, [sp, #28]
 800bbca:	4654      	mov	r4, sl
 800bbcc:	2000      	movs	r0, #0
 800bbce:	f04f 0c0a 	mov.w	ip, #10
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbd8:	3b30      	subs	r3, #48	; 0x30
 800bbda:	2b09      	cmp	r3, #9
 800bbdc:	d94d      	bls.n	800bc7a <_vfiprintf_r+0x1a6>
 800bbde:	b1b0      	cbz	r0, 800bc0e <_vfiprintf_r+0x13a>
 800bbe0:	9207      	str	r2, [sp, #28]
 800bbe2:	e014      	b.n	800bc0e <_vfiprintf_r+0x13a>
 800bbe4:	eba0 0308 	sub.w	r3, r0, r8
 800bbe8:	fa09 f303 	lsl.w	r3, r9, r3
 800bbec:	4313      	orrs	r3, r2
 800bbee:	9304      	str	r3, [sp, #16]
 800bbf0:	46a2      	mov	sl, r4
 800bbf2:	e7d2      	b.n	800bb9a <_vfiprintf_r+0xc6>
 800bbf4:	9b03      	ldr	r3, [sp, #12]
 800bbf6:	1d19      	adds	r1, r3, #4
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	9103      	str	r1, [sp, #12]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	bfbb      	ittet	lt
 800bc00:	425b      	neglt	r3, r3
 800bc02:	f042 0202 	orrlt.w	r2, r2, #2
 800bc06:	9307      	strge	r3, [sp, #28]
 800bc08:	9307      	strlt	r3, [sp, #28]
 800bc0a:	bfb8      	it	lt
 800bc0c:	9204      	strlt	r2, [sp, #16]
 800bc0e:	7823      	ldrb	r3, [r4, #0]
 800bc10:	2b2e      	cmp	r3, #46	; 0x2e
 800bc12:	d10c      	bne.n	800bc2e <_vfiprintf_r+0x15a>
 800bc14:	7863      	ldrb	r3, [r4, #1]
 800bc16:	2b2a      	cmp	r3, #42	; 0x2a
 800bc18:	d134      	bne.n	800bc84 <_vfiprintf_r+0x1b0>
 800bc1a:	9b03      	ldr	r3, [sp, #12]
 800bc1c:	1d1a      	adds	r2, r3, #4
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	9203      	str	r2, [sp, #12]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	bfb8      	it	lt
 800bc26:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc2a:	3402      	adds	r4, #2
 800bc2c:	9305      	str	r3, [sp, #20]
 800bc2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bd04 <_vfiprintf_r+0x230>
 800bc32:	7821      	ldrb	r1, [r4, #0]
 800bc34:	2203      	movs	r2, #3
 800bc36:	4650      	mov	r0, sl
 800bc38:	f7f4 fb1a 	bl	8000270 <memchr>
 800bc3c:	b138      	cbz	r0, 800bc4e <_vfiprintf_r+0x17a>
 800bc3e:	9b04      	ldr	r3, [sp, #16]
 800bc40:	eba0 000a 	sub.w	r0, r0, sl
 800bc44:	2240      	movs	r2, #64	; 0x40
 800bc46:	4082      	lsls	r2, r0
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	3401      	adds	r4, #1
 800bc4c:	9304      	str	r3, [sp, #16]
 800bc4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc52:	4829      	ldr	r0, [pc, #164]	; (800bcf8 <_vfiprintf_r+0x224>)
 800bc54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc58:	2206      	movs	r2, #6
 800bc5a:	f7f4 fb09 	bl	8000270 <memchr>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d03f      	beq.n	800bce2 <_vfiprintf_r+0x20e>
 800bc62:	4b26      	ldr	r3, [pc, #152]	; (800bcfc <_vfiprintf_r+0x228>)
 800bc64:	bb1b      	cbnz	r3, 800bcae <_vfiprintf_r+0x1da>
 800bc66:	9b03      	ldr	r3, [sp, #12]
 800bc68:	3307      	adds	r3, #7
 800bc6a:	f023 0307 	bic.w	r3, r3, #7
 800bc6e:	3308      	adds	r3, #8
 800bc70:	9303      	str	r3, [sp, #12]
 800bc72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc74:	443b      	add	r3, r7
 800bc76:	9309      	str	r3, [sp, #36]	; 0x24
 800bc78:	e768      	b.n	800bb4c <_vfiprintf_r+0x78>
 800bc7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc7e:	460c      	mov	r4, r1
 800bc80:	2001      	movs	r0, #1
 800bc82:	e7a6      	b.n	800bbd2 <_vfiprintf_r+0xfe>
 800bc84:	2300      	movs	r3, #0
 800bc86:	3401      	adds	r4, #1
 800bc88:	9305      	str	r3, [sp, #20]
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	f04f 0c0a 	mov.w	ip, #10
 800bc90:	4620      	mov	r0, r4
 800bc92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc96:	3a30      	subs	r2, #48	; 0x30
 800bc98:	2a09      	cmp	r2, #9
 800bc9a:	d903      	bls.n	800bca4 <_vfiprintf_r+0x1d0>
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d0c6      	beq.n	800bc2e <_vfiprintf_r+0x15a>
 800bca0:	9105      	str	r1, [sp, #20]
 800bca2:	e7c4      	b.n	800bc2e <_vfiprintf_r+0x15a>
 800bca4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bca8:	4604      	mov	r4, r0
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e7f0      	b.n	800bc90 <_vfiprintf_r+0x1bc>
 800bcae:	ab03      	add	r3, sp, #12
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	462a      	mov	r2, r5
 800bcb4:	4b12      	ldr	r3, [pc, #72]	; (800bd00 <_vfiprintf_r+0x22c>)
 800bcb6:	a904      	add	r1, sp, #16
 800bcb8:	4630      	mov	r0, r6
 800bcba:	f3af 8000 	nop.w
 800bcbe:	4607      	mov	r7, r0
 800bcc0:	1c78      	adds	r0, r7, #1
 800bcc2:	d1d6      	bne.n	800bc72 <_vfiprintf_r+0x19e>
 800bcc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcc6:	07d9      	lsls	r1, r3, #31
 800bcc8:	d405      	bmi.n	800bcd6 <_vfiprintf_r+0x202>
 800bcca:	89ab      	ldrh	r3, [r5, #12]
 800bccc:	059a      	lsls	r2, r3, #22
 800bcce:	d402      	bmi.n	800bcd6 <_vfiprintf_r+0x202>
 800bcd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcd2:	f7ff fd19 	bl	800b708 <__retarget_lock_release_recursive>
 800bcd6:	89ab      	ldrh	r3, [r5, #12]
 800bcd8:	065b      	lsls	r3, r3, #25
 800bcda:	f53f af1d 	bmi.w	800bb18 <_vfiprintf_r+0x44>
 800bcde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bce0:	e71c      	b.n	800bb1c <_vfiprintf_r+0x48>
 800bce2:	ab03      	add	r3, sp, #12
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	462a      	mov	r2, r5
 800bce8:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <_vfiprintf_r+0x22c>)
 800bcea:	a904      	add	r1, sp, #16
 800bcec:	4630      	mov	r0, r6
 800bcee:	f000 f879 	bl	800bde4 <_printf_i>
 800bcf2:	e7e4      	b.n	800bcbe <_vfiprintf_r+0x1ea>
 800bcf4:	08014ec9 	.word	0x08014ec9
 800bcf8:	08014ed3 	.word	0x08014ed3
 800bcfc:	00000000 	.word	0x00000000
 800bd00:	0800baaf 	.word	0x0800baaf
 800bd04:	08014ecf 	.word	0x08014ecf

0800bd08 <_printf_common>:
 800bd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd0c:	4616      	mov	r6, r2
 800bd0e:	4699      	mov	r9, r3
 800bd10:	688a      	ldr	r2, [r1, #8]
 800bd12:	690b      	ldr	r3, [r1, #16]
 800bd14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	bfb8      	it	lt
 800bd1c:	4613      	movlt	r3, r2
 800bd1e:	6033      	str	r3, [r6, #0]
 800bd20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd24:	4607      	mov	r7, r0
 800bd26:	460c      	mov	r4, r1
 800bd28:	b10a      	cbz	r2, 800bd2e <_printf_common+0x26>
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	6033      	str	r3, [r6, #0]
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	0699      	lsls	r1, r3, #26
 800bd32:	bf42      	ittt	mi
 800bd34:	6833      	ldrmi	r3, [r6, #0]
 800bd36:	3302      	addmi	r3, #2
 800bd38:	6033      	strmi	r3, [r6, #0]
 800bd3a:	6825      	ldr	r5, [r4, #0]
 800bd3c:	f015 0506 	ands.w	r5, r5, #6
 800bd40:	d106      	bne.n	800bd50 <_printf_common+0x48>
 800bd42:	f104 0a19 	add.w	sl, r4, #25
 800bd46:	68e3      	ldr	r3, [r4, #12]
 800bd48:	6832      	ldr	r2, [r6, #0]
 800bd4a:	1a9b      	subs	r3, r3, r2
 800bd4c:	42ab      	cmp	r3, r5
 800bd4e:	dc26      	bgt.n	800bd9e <_printf_common+0x96>
 800bd50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd54:	1e13      	subs	r3, r2, #0
 800bd56:	6822      	ldr	r2, [r4, #0]
 800bd58:	bf18      	it	ne
 800bd5a:	2301      	movne	r3, #1
 800bd5c:	0692      	lsls	r2, r2, #26
 800bd5e:	d42b      	bmi.n	800bdb8 <_printf_common+0xb0>
 800bd60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd64:	4649      	mov	r1, r9
 800bd66:	4638      	mov	r0, r7
 800bd68:	47c0      	blx	r8
 800bd6a:	3001      	adds	r0, #1
 800bd6c:	d01e      	beq.n	800bdac <_printf_common+0xa4>
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	6922      	ldr	r2, [r4, #16]
 800bd72:	f003 0306 	and.w	r3, r3, #6
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	bf02      	ittt	eq
 800bd7a:	68e5      	ldreq	r5, [r4, #12]
 800bd7c:	6833      	ldreq	r3, [r6, #0]
 800bd7e:	1aed      	subeq	r5, r5, r3
 800bd80:	68a3      	ldr	r3, [r4, #8]
 800bd82:	bf0c      	ite	eq
 800bd84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd88:	2500      	movne	r5, #0
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	bfc4      	itt	gt
 800bd8e:	1a9b      	subgt	r3, r3, r2
 800bd90:	18ed      	addgt	r5, r5, r3
 800bd92:	2600      	movs	r6, #0
 800bd94:	341a      	adds	r4, #26
 800bd96:	42b5      	cmp	r5, r6
 800bd98:	d11a      	bne.n	800bdd0 <_printf_common+0xc8>
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	e008      	b.n	800bdb0 <_printf_common+0xa8>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	4652      	mov	r2, sl
 800bda2:	4649      	mov	r1, r9
 800bda4:	4638      	mov	r0, r7
 800bda6:	47c0      	blx	r8
 800bda8:	3001      	adds	r0, #1
 800bdaa:	d103      	bne.n	800bdb4 <_printf_common+0xac>
 800bdac:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb4:	3501      	adds	r5, #1
 800bdb6:	e7c6      	b.n	800bd46 <_printf_common+0x3e>
 800bdb8:	18e1      	adds	r1, r4, r3
 800bdba:	1c5a      	adds	r2, r3, #1
 800bdbc:	2030      	movs	r0, #48	; 0x30
 800bdbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdc2:	4422      	add	r2, r4
 800bdc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bdc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bdcc:	3302      	adds	r3, #2
 800bdce:	e7c7      	b.n	800bd60 <_printf_common+0x58>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	4622      	mov	r2, r4
 800bdd4:	4649      	mov	r1, r9
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	47c0      	blx	r8
 800bdda:	3001      	adds	r0, #1
 800bddc:	d0e6      	beq.n	800bdac <_printf_common+0xa4>
 800bdde:	3601      	adds	r6, #1
 800bde0:	e7d9      	b.n	800bd96 <_printf_common+0x8e>
	...

0800bde4 <_printf_i>:
 800bde4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bde8:	7e0f      	ldrb	r7, [r1, #24]
 800bdea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bdec:	2f78      	cmp	r7, #120	; 0x78
 800bdee:	4691      	mov	r9, r2
 800bdf0:	4680      	mov	r8, r0
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	469a      	mov	sl, r3
 800bdf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bdfa:	d807      	bhi.n	800be0c <_printf_i+0x28>
 800bdfc:	2f62      	cmp	r7, #98	; 0x62
 800bdfe:	d80a      	bhi.n	800be16 <_printf_i+0x32>
 800be00:	2f00      	cmp	r7, #0
 800be02:	f000 80d4 	beq.w	800bfae <_printf_i+0x1ca>
 800be06:	2f58      	cmp	r7, #88	; 0x58
 800be08:	f000 80c0 	beq.w	800bf8c <_printf_i+0x1a8>
 800be0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be14:	e03a      	b.n	800be8c <_printf_i+0xa8>
 800be16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be1a:	2b15      	cmp	r3, #21
 800be1c:	d8f6      	bhi.n	800be0c <_printf_i+0x28>
 800be1e:	a101      	add	r1, pc, #4	; (adr r1, 800be24 <_printf_i+0x40>)
 800be20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be24:	0800be7d 	.word	0x0800be7d
 800be28:	0800be91 	.word	0x0800be91
 800be2c:	0800be0d 	.word	0x0800be0d
 800be30:	0800be0d 	.word	0x0800be0d
 800be34:	0800be0d 	.word	0x0800be0d
 800be38:	0800be0d 	.word	0x0800be0d
 800be3c:	0800be91 	.word	0x0800be91
 800be40:	0800be0d 	.word	0x0800be0d
 800be44:	0800be0d 	.word	0x0800be0d
 800be48:	0800be0d 	.word	0x0800be0d
 800be4c:	0800be0d 	.word	0x0800be0d
 800be50:	0800bf95 	.word	0x0800bf95
 800be54:	0800bebd 	.word	0x0800bebd
 800be58:	0800bf4f 	.word	0x0800bf4f
 800be5c:	0800be0d 	.word	0x0800be0d
 800be60:	0800be0d 	.word	0x0800be0d
 800be64:	0800bfb7 	.word	0x0800bfb7
 800be68:	0800be0d 	.word	0x0800be0d
 800be6c:	0800bebd 	.word	0x0800bebd
 800be70:	0800be0d 	.word	0x0800be0d
 800be74:	0800be0d 	.word	0x0800be0d
 800be78:	0800bf57 	.word	0x0800bf57
 800be7c:	682b      	ldr	r3, [r5, #0]
 800be7e:	1d1a      	adds	r2, r3, #4
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	602a      	str	r2, [r5, #0]
 800be84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be8c:	2301      	movs	r3, #1
 800be8e:	e09f      	b.n	800bfd0 <_printf_i+0x1ec>
 800be90:	6820      	ldr	r0, [r4, #0]
 800be92:	682b      	ldr	r3, [r5, #0]
 800be94:	0607      	lsls	r7, r0, #24
 800be96:	f103 0104 	add.w	r1, r3, #4
 800be9a:	6029      	str	r1, [r5, #0]
 800be9c:	d501      	bpl.n	800bea2 <_printf_i+0xbe>
 800be9e:	681e      	ldr	r6, [r3, #0]
 800bea0:	e003      	b.n	800beaa <_printf_i+0xc6>
 800bea2:	0646      	lsls	r6, r0, #25
 800bea4:	d5fb      	bpl.n	800be9e <_printf_i+0xba>
 800bea6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800beaa:	2e00      	cmp	r6, #0
 800beac:	da03      	bge.n	800beb6 <_printf_i+0xd2>
 800beae:	232d      	movs	r3, #45	; 0x2d
 800beb0:	4276      	negs	r6, r6
 800beb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800beb6:	485a      	ldr	r0, [pc, #360]	; (800c020 <_printf_i+0x23c>)
 800beb8:	230a      	movs	r3, #10
 800beba:	e012      	b.n	800bee2 <_printf_i+0xfe>
 800bebc:	682b      	ldr	r3, [r5, #0]
 800bebe:	6820      	ldr	r0, [r4, #0]
 800bec0:	1d19      	adds	r1, r3, #4
 800bec2:	6029      	str	r1, [r5, #0]
 800bec4:	0605      	lsls	r5, r0, #24
 800bec6:	d501      	bpl.n	800becc <_printf_i+0xe8>
 800bec8:	681e      	ldr	r6, [r3, #0]
 800beca:	e002      	b.n	800bed2 <_printf_i+0xee>
 800becc:	0641      	lsls	r1, r0, #25
 800bece:	d5fb      	bpl.n	800bec8 <_printf_i+0xe4>
 800bed0:	881e      	ldrh	r6, [r3, #0]
 800bed2:	4853      	ldr	r0, [pc, #332]	; (800c020 <_printf_i+0x23c>)
 800bed4:	2f6f      	cmp	r7, #111	; 0x6f
 800bed6:	bf0c      	ite	eq
 800bed8:	2308      	moveq	r3, #8
 800beda:	230a      	movne	r3, #10
 800bedc:	2100      	movs	r1, #0
 800bede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bee2:	6865      	ldr	r5, [r4, #4]
 800bee4:	60a5      	str	r5, [r4, #8]
 800bee6:	2d00      	cmp	r5, #0
 800bee8:	bfa2      	ittt	ge
 800beea:	6821      	ldrge	r1, [r4, #0]
 800beec:	f021 0104 	bicge.w	r1, r1, #4
 800bef0:	6021      	strge	r1, [r4, #0]
 800bef2:	b90e      	cbnz	r6, 800bef8 <_printf_i+0x114>
 800bef4:	2d00      	cmp	r5, #0
 800bef6:	d04b      	beq.n	800bf90 <_printf_i+0x1ac>
 800bef8:	4615      	mov	r5, r2
 800befa:	fbb6 f1f3 	udiv	r1, r6, r3
 800befe:	fb03 6711 	mls	r7, r3, r1, r6
 800bf02:	5dc7      	ldrb	r7, [r0, r7]
 800bf04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf08:	4637      	mov	r7, r6
 800bf0a:	42bb      	cmp	r3, r7
 800bf0c:	460e      	mov	r6, r1
 800bf0e:	d9f4      	bls.n	800befa <_printf_i+0x116>
 800bf10:	2b08      	cmp	r3, #8
 800bf12:	d10b      	bne.n	800bf2c <_printf_i+0x148>
 800bf14:	6823      	ldr	r3, [r4, #0]
 800bf16:	07de      	lsls	r6, r3, #31
 800bf18:	d508      	bpl.n	800bf2c <_printf_i+0x148>
 800bf1a:	6923      	ldr	r3, [r4, #16]
 800bf1c:	6861      	ldr	r1, [r4, #4]
 800bf1e:	4299      	cmp	r1, r3
 800bf20:	bfde      	ittt	le
 800bf22:	2330      	movle	r3, #48	; 0x30
 800bf24:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf28:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf2c:	1b52      	subs	r2, r2, r5
 800bf2e:	6122      	str	r2, [r4, #16]
 800bf30:	f8cd a000 	str.w	sl, [sp]
 800bf34:	464b      	mov	r3, r9
 800bf36:	aa03      	add	r2, sp, #12
 800bf38:	4621      	mov	r1, r4
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	f7ff fee4 	bl	800bd08 <_printf_common>
 800bf40:	3001      	adds	r0, #1
 800bf42:	d14a      	bne.n	800bfda <_printf_i+0x1f6>
 800bf44:	f04f 30ff 	mov.w	r0, #4294967295
 800bf48:	b004      	add	sp, #16
 800bf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	f043 0320 	orr.w	r3, r3, #32
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	4833      	ldr	r0, [pc, #204]	; (800c024 <_printf_i+0x240>)
 800bf58:	2778      	movs	r7, #120	; 0x78
 800bf5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	6829      	ldr	r1, [r5, #0]
 800bf62:	061f      	lsls	r7, r3, #24
 800bf64:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf68:	d402      	bmi.n	800bf70 <_printf_i+0x18c>
 800bf6a:	065f      	lsls	r7, r3, #25
 800bf6c:	bf48      	it	mi
 800bf6e:	b2b6      	uxthmi	r6, r6
 800bf70:	07df      	lsls	r7, r3, #31
 800bf72:	bf48      	it	mi
 800bf74:	f043 0320 	orrmi.w	r3, r3, #32
 800bf78:	6029      	str	r1, [r5, #0]
 800bf7a:	bf48      	it	mi
 800bf7c:	6023      	strmi	r3, [r4, #0]
 800bf7e:	b91e      	cbnz	r6, 800bf88 <_printf_i+0x1a4>
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	f023 0320 	bic.w	r3, r3, #32
 800bf86:	6023      	str	r3, [r4, #0]
 800bf88:	2310      	movs	r3, #16
 800bf8a:	e7a7      	b.n	800bedc <_printf_i+0xf8>
 800bf8c:	4824      	ldr	r0, [pc, #144]	; (800c020 <_printf_i+0x23c>)
 800bf8e:	e7e4      	b.n	800bf5a <_printf_i+0x176>
 800bf90:	4615      	mov	r5, r2
 800bf92:	e7bd      	b.n	800bf10 <_printf_i+0x12c>
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	6826      	ldr	r6, [r4, #0]
 800bf98:	6961      	ldr	r1, [r4, #20]
 800bf9a:	1d18      	adds	r0, r3, #4
 800bf9c:	6028      	str	r0, [r5, #0]
 800bf9e:	0635      	lsls	r5, r6, #24
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	d501      	bpl.n	800bfa8 <_printf_i+0x1c4>
 800bfa4:	6019      	str	r1, [r3, #0]
 800bfa6:	e002      	b.n	800bfae <_printf_i+0x1ca>
 800bfa8:	0670      	lsls	r0, r6, #25
 800bfaa:	d5fb      	bpl.n	800bfa4 <_printf_i+0x1c0>
 800bfac:	8019      	strh	r1, [r3, #0]
 800bfae:	2300      	movs	r3, #0
 800bfb0:	6123      	str	r3, [r4, #16]
 800bfb2:	4615      	mov	r5, r2
 800bfb4:	e7bc      	b.n	800bf30 <_printf_i+0x14c>
 800bfb6:	682b      	ldr	r3, [r5, #0]
 800bfb8:	1d1a      	adds	r2, r3, #4
 800bfba:	602a      	str	r2, [r5, #0]
 800bfbc:	681d      	ldr	r5, [r3, #0]
 800bfbe:	6862      	ldr	r2, [r4, #4]
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f7f4 f954 	bl	8000270 <memchr>
 800bfc8:	b108      	cbz	r0, 800bfce <_printf_i+0x1ea>
 800bfca:	1b40      	subs	r0, r0, r5
 800bfcc:	6060      	str	r0, [r4, #4]
 800bfce:	6863      	ldr	r3, [r4, #4]
 800bfd0:	6123      	str	r3, [r4, #16]
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfd8:	e7aa      	b.n	800bf30 <_printf_i+0x14c>
 800bfda:	6923      	ldr	r3, [r4, #16]
 800bfdc:	462a      	mov	r2, r5
 800bfde:	4649      	mov	r1, r9
 800bfe0:	4640      	mov	r0, r8
 800bfe2:	47d0      	blx	sl
 800bfe4:	3001      	adds	r0, #1
 800bfe6:	d0ad      	beq.n	800bf44 <_printf_i+0x160>
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	079b      	lsls	r3, r3, #30
 800bfec:	d413      	bmi.n	800c016 <_printf_i+0x232>
 800bfee:	68e0      	ldr	r0, [r4, #12]
 800bff0:	9b03      	ldr	r3, [sp, #12]
 800bff2:	4298      	cmp	r0, r3
 800bff4:	bfb8      	it	lt
 800bff6:	4618      	movlt	r0, r3
 800bff8:	e7a6      	b.n	800bf48 <_printf_i+0x164>
 800bffa:	2301      	movs	r3, #1
 800bffc:	4632      	mov	r2, r6
 800bffe:	4649      	mov	r1, r9
 800c000:	4640      	mov	r0, r8
 800c002:	47d0      	blx	sl
 800c004:	3001      	adds	r0, #1
 800c006:	d09d      	beq.n	800bf44 <_printf_i+0x160>
 800c008:	3501      	adds	r5, #1
 800c00a:	68e3      	ldr	r3, [r4, #12]
 800c00c:	9903      	ldr	r1, [sp, #12]
 800c00e:	1a5b      	subs	r3, r3, r1
 800c010:	42ab      	cmp	r3, r5
 800c012:	dcf2      	bgt.n	800bffa <_printf_i+0x216>
 800c014:	e7eb      	b.n	800bfee <_printf_i+0x20a>
 800c016:	2500      	movs	r5, #0
 800c018:	f104 0619 	add.w	r6, r4, #25
 800c01c:	e7f5      	b.n	800c00a <_printf_i+0x226>
 800c01e:	bf00      	nop
 800c020:	08014eda 	.word	0x08014eda
 800c024:	08014eeb 	.word	0x08014eeb

0800c028 <__svfiscanf_r>:
 800c028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c02c:	461d      	mov	r5, r3
 800c02e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c030:	07df      	lsls	r7, r3, #31
 800c032:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c036:	4606      	mov	r6, r0
 800c038:	460c      	mov	r4, r1
 800c03a:	4692      	mov	sl, r2
 800c03c:	d405      	bmi.n	800c04a <__svfiscanf_r+0x22>
 800c03e:	898b      	ldrh	r3, [r1, #12]
 800c040:	0598      	lsls	r0, r3, #22
 800c042:	d402      	bmi.n	800c04a <__svfiscanf_r+0x22>
 800c044:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800c046:	f7ff fb5e 	bl	800b706 <__retarget_lock_acquire_recursive>
 800c04a:	2300      	movs	r3, #0
 800c04c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800c050:	4baa      	ldr	r3, [pc, #680]	; (800c2fc <__svfiscanf_r+0x2d4>)
 800c052:	93a0      	str	r3, [sp, #640]	; 0x280
 800c054:	f10d 0804 	add.w	r8, sp, #4
 800c058:	4ba9      	ldr	r3, [pc, #676]	; (800c300 <__svfiscanf_r+0x2d8>)
 800c05a:	4faa      	ldr	r7, [pc, #680]	; (800c304 <__svfiscanf_r+0x2dc>)
 800c05c:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800c308 <__svfiscanf_r+0x2e0>
 800c060:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c064:	93a1      	str	r3, [sp, #644]	; 0x284
 800c066:	9500      	str	r5, [sp, #0]
 800c068:	f89a 3000 	ldrb.w	r3, [sl]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f000 8170 	beq.w	800c352 <__svfiscanf_r+0x32a>
 800c072:	5cf9      	ldrb	r1, [r7, r3]
 800c074:	f011 0108 	ands.w	r1, r1, #8
 800c078:	f10a 0501 	add.w	r5, sl, #1
 800c07c:	d019      	beq.n	800c0b2 <__svfiscanf_r+0x8a>
 800c07e:	6863      	ldr	r3, [r4, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	dd0f      	ble.n	800c0a4 <__svfiscanf_r+0x7c>
 800c084:	6823      	ldr	r3, [r4, #0]
 800c086:	781a      	ldrb	r2, [r3, #0]
 800c088:	5cba      	ldrb	r2, [r7, r2]
 800c08a:	0711      	lsls	r1, r2, #28
 800c08c:	d401      	bmi.n	800c092 <__svfiscanf_r+0x6a>
 800c08e:	46aa      	mov	sl, r5
 800c090:	e7ea      	b.n	800c068 <__svfiscanf_r+0x40>
 800c092:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c094:	3201      	adds	r2, #1
 800c096:	9245      	str	r2, [sp, #276]	; 0x114
 800c098:	6862      	ldr	r2, [r4, #4]
 800c09a:	3301      	adds	r3, #1
 800c09c:	3a01      	subs	r2, #1
 800c09e:	6062      	str	r2, [r4, #4]
 800c0a0:	6023      	str	r3, [r4, #0]
 800c0a2:	e7ec      	b.n	800c07e <__svfiscanf_r+0x56>
 800c0a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	4798      	blx	r3
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d0e9      	beq.n	800c084 <__svfiscanf_r+0x5c>
 800c0b0:	e7ed      	b.n	800c08e <__svfiscanf_r+0x66>
 800c0b2:	2b25      	cmp	r3, #37	; 0x25
 800c0b4:	d012      	beq.n	800c0dc <__svfiscanf_r+0xb4>
 800c0b6:	469a      	mov	sl, r3
 800c0b8:	6863      	ldr	r3, [r4, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f340 8093 	ble.w	800c1e6 <__svfiscanf_r+0x1be>
 800c0c0:	6822      	ldr	r2, [r4, #0]
 800c0c2:	7813      	ldrb	r3, [r2, #0]
 800c0c4:	4553      	cmp	r3, sl
 800c0c6:	f040 8144 	bne.w	800c352 <__svfiscanf_r+0x32a>
 800c0ca:	6863      	ldr	r3, [r4, #4]
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	6063      	str	r3, [r4, #4]
 800c0d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c0d2:	3201      	adds	r2, #1
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	6022      	str	r2, [r4, #0]
 800c0d8:	9345      	str	r3, [sp, #276]	; 0x114
 800c0da:	e7d8      	b.n	800c08e <__svfiscanf_r+0x66>
 800c0dc:	9141      	str	r1, [sp, #260]	; 0x104
 800c0de:	9143      	str	r1, [sp, #268]	; 0x10c
 800c0e0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800c0e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0e6:	bf02      	ittt	eq
 800c0e8:	2310      	moveq	r3, #16
 800c0ea:	9341      	streq	r3, [sp, #260]	; 0x104
 800c0ec:	f10a 0502 	addeq.w	r5, sl, #2
 800c0f0:	220a      	movs	r2, #10
 800c0f2:	46aa      	mov	sl, r5
 800c0f4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c0f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c0fc:	2b09      	cmp	r3, #9
 800c0fe:	d91d      	bls.n	800c13c <__svfiscanf_r+0x114>
 800c100:	4881      	ldr	r0, [pc, #516]	; (800c308 <__svfiscanf_r+0x2e0>)
 800c102:	2203      	movs	r2, #3
 800c104:	f7f4 f8b4 	bl	8000270 <memchr>
 800c108:	b138      	cbz	r0, 800c11a <__svfiscanf_r+0xf2>
 800c10a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c10c:	eba0 0009 	sub.w	r0, r0, r9
 800c110:	2301      	movs	r3, #1
 800c112:	4083      	lsls	r3, r0
 800c114:	4313      	orrs	r3, r2
 800c116:	9341      	str	r3, [sp, #260]	; 0x104
 800c118:	4655      	mov	r5, sl
 800c11a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c11e:	2b78      	cmp	r3, #120	; 0x78
 800c120:	d807      	bhi.n	800c132 <__svfiscanf_r+0x10a>
 800c122:	2b57      	cmp	r3, #87	; 0x57
 800c124:	d811      	bhi.n	800c14a <__svfiscanf_r+0x122>
 800c126:	2b25      	cmp	r3, #37	; 0x25
 800c128:	d0c5      	beq.n	800c0b6 <__svfiscanf_r+0x8e>
 800c12a:	d857      	bhi.n	800c1dc <__svfiscanf_r+0x1b4>
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f000 80c6 	beq.w	800c2be <__svfiscanf_r+0x296>
 800c132:	2303      	movs	r3, #3
 800c134:	9347      	str	r3, [sp, #284]	; 0x11c
 800c136:	230a      	movs	r3, #10
 800c138:	9342      	str	r3, [sp, #264]	; 0x108
 800c13a:	e07f      	b.n	800c23c <__svfiscanf_r+0x214>
 800c13c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c13e:	fb02 1103 	mla	r1, r2, r3, r1
 800c142:	3930      	subs	r1, #48	; 0x30
 800c144:	9143      	str	r1, [sp, #268]	; 0x10c
 800c146:	4655      	mov	r5, sl
 800c148:	e7d3      	b.n	800c0f2 <__svfiscanf_r+0xca>
 800c14a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c14e:	2a20      	cmp	r2, #32
 800c150:	d8ef      	bhi.n	800c132 <__svfiscanf_r+0x10a>
 800c152:	a101      	add	r1, pc, #4	; (adr r1, 800c158 <__svfiscanf_r+0x130>)
 800c154:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c158:	0800c21f 	.word	0x0800c21f
 800c15c:	0800c133 	.word	0x0800c133
 800c160:	0800c133 	.word	0x0800c133
 800c164:	0800c27d 	.word	0x0800c27d
 800c168:	0800c133 	.word	0x0800c133
 800c16c:	0800c133 	.word	0x0800c133
 800c170:	0800c133 	.word	0x0800c133
 800c174:	0800c133 	.word	0x0800c133
 800c178:	0800c133 	.word	0x0800c133
 800c17c:	0800c133 	.word	0x0800c133
 800c180:	0800c133 	.word	0x0800c133
 800c184:	0800c293 	.word	0x0800c293
 800c188:	0800c279 	.word	0x0800c279
 800c18c:	0800c1e3 	.word	0x0800c1e3
 800c190:	0800c1e3 	.word	0x0800c1e3
 800c194:	0800c1e3 	.word	0x0800c1e3
 800c198:	0800c133 	.word	0x0800c133
 800c19c:	0800c235 	.word	0x0800c235
 800c1a0:	0800c133 	.word	0x0800c133
 800c1a4:	0800c133 	.word	0x0800c133
 800c1a8:	0800c133 	.word	0x0800c133
 800c1ac:	0800c133 	.word	0x0800c133
 800c1b0:	0800c2a3 	.word	0x0800c2a3
 800c1b4:	0800c271 	.word	0x0800c271
 800c1b8:	0800c217 	.word	0x0800c217
 800c1bc:	0800c133 	.word	0x0800c133
 800c1c0:	0800c133 	.word	0x0800c133
 800c1c4:	0800c29f 	.word	0x0800c29f
 800c1c8:	0800c133 	.word	0x0800c133
 800c1cc:	0800c279 	.word	0x0800c279
 800c1d0:	0800c133 	.word	0x0800c133
 800c1d4:	0800c133 	.word	0x0800c133
 800c1d8:	0800c21f 	.word	0x0800c21f
 800c1dc:	3b45      	subs	r3, #69	; 0x45
 800c1de:	2b02      	cmp	r3, #2
 800c1e0:	d8a7      	bhi.n	800c132 <__svfiscanf_r+0x10a>
 800c1e2:	2305      	movs	r3, #5
 800c1e4:	e029      	b.n	800c23a <__svfiscanf_r+0x212>
 800c1e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	4798      	blx	r3
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	f43f af66 	beq.w	800c0c0 <__svfiscanf_r+0x98>
 800c1f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1f6:	07da      	lsls	r2, r3, #31
 800c1f8:	f140 80a3 	bpl.w	800c342 <__svfiscanf_r+0x31a>
 800c1fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c1fe:	2800      	cmp	r0, #0
 800c200:	d066      	beq.n	800c2d0 <__svfiscanf_r+0x2a8>
 800c202:	89a3      	ldrh	r3, [r4, #12]
 800c204:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c208:	bf18      	it	ne
 800c20a:	f04f 30ff 	movne.w	r0, #4294967295
 800c20e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c216:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c218:	f042 0220 	orr.w	r2, r2, #32
 800c21c:	9241      	str	r2, [sp, #260]	; 0x104
 800c21e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c224:	9241      	str	r2, [sp, #260]	; 0x104
 800c226:	2210      	movs	r2, #16
 800c228:	2b6f      	cmp	r3, #111	; 0x6f
 800c22a:	9242      	str	r2, [sp, #264]	; 0x108
 800c22c:	bf34      	ite	cc
 800c22e:	2303      	movcc	r3, #3
 800c230:	2304      	movcs	r3, #4
 800c232:	e002      	b.n	800c23a <__svfiscanf_r+0x212>
 800c234:	2300      	movs	r3, #0
 800c236:	9342      	str	r3, [sp, #264]	; 0x108
 800c238:	2303      	movs	r3, #3
 800c23a:	9347      	str	r3, [sp, #284]	; 0x11c
 800c23c:	6863      	ldr	r3, [r4, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	dd49      	ble.n	800c2d6 <__svfiscanf_r+0x2ae>
 800c242:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c244:	065b      	lsls	r3, r3, #25
 800c246:	d404      	bmi.n	800c252 <__svfiscanf_r+0x22a>
 800c248:	6823      	ldr	r3, [r4, #0]
 800c24a:	781a      	ldrb	r2, [r3, #0]
 800c24c:	5cba      	ldrb	r2, [r7, r2]
 800c24e:	0710      	lsls	r0, r2, #28
 800c250:	d448      	bmi.n	800c2e4 <__svfiscanf_r+0x2bc>
 800c252:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c254:	2b02      	cmp	r3, #2
 800c256:	dc60      	bgt.n	800c31a <__svfiscanf_r+0x2f2>
 800c258:	466b      	mov	r3, sp
 800c25a:	4622      	mov	r2, r4
 800c25c:	a941      	add	r1, sp, #260	; 0x104
 800c25e:	4630      	mov	r0, r6
 800c260:	f000 f898 	bl	800c394 <_scanf_chars>
 800c264:	2801      	cmp	r0, #1
 800c266:	d074      	beq.n	800c352 <__svfiscanf_r+0x32a>
 800c268:	2802      	cmp	r0, #2
 800c26a:	f47f af10 	bne.w	800c08e <__svfiscanf_r+0x66>
 800c26e:	e7c1      	b.n	800c1f4 <__svfiscanf_r+0x1cc>
 800c270:	2308      	movs	r3, #8
 800c272:	9342      	str	r3, [sp, #264]	; 0x108
 800c274:	2304      	movs	r3, #4
 800c276:	e7e0      	b.n	800c23a <__svfiscanf_r+0x212>
 800c278:	220a      	movs	r2, #10
 800c27a:	e7d5      	b.n	800c228 <__svfiscanf_r+0x200>
 800c27c:	4629      	mov	r1, r5
 800c27e:	4640      	mov	r0, r8
 800c280:	f000 fb6c 	bl	800c95c <__sccl>
 800c284:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c28a:	9341      	str	r3, [sp, #260]	; 0x104
 800c28c:	4605      	mov	r5, r0
 800c28e:	2301      	movs	r3, #1
 800c290:	e7d3      	b.n	800c23a <__svfiscanf_r+0x212>
 800c292:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c298:	9341      	str	r3, [sp, #260]	; 0x104
 800c29a:	2300      	movs	r3, #0
 800c29c:	e7cd      	b.n	800c23a <__svfiscanf_r+0x212>
 800c29e:	2302      	movs	r3, #2
 800c2a0:	e7cb      	b.n	800c23a <__svfiscanf_r+0x212>
 800c2a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c2a4:	06c3      	lsls	r3, r0, #27
 800c2a6:	f53f aef2 	bmi.w	800c08e <__svfiscanf_r+0x66>
 800c2aa:	9b00      	ldr	r3, [sp, #0]
 800c2ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c2ae:	1d19      	adds	r1, r3, #4
 800c2b0:	9100      	str	r1, [sp, #0]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	07c0      	lsls	r0, r0, #31
 800c2b6:	bf4c      	ite	mi
 800c2b8:	801a      	strhmi	r2, [r3, #0]
 800c2ba:	601a      	strpl	r2, [r3, #0]
 800c2bc:	e6e7      	b.n	800c08e <__svfiscanf_r+0x66>
 800c2be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2c0:	07d8      	lsls	r0, r3, #31
 800c2c2:	d405      	bmi.n	800c2d0 <__svfiscanf_r+0x2a8>
 800c2c4:	89a3      	ldrh	r3, [r4, #12]
 800c2c6:	0599      	lsls	r1, r3, #22
 800c2c8:	d402      	bmi.n	800c2d0 <__svfiscanf_r+0x2a8>
 800c2ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2cc:	f7ff fa1c 	bl	800b708 <__retarget_lock_release_recursive>
 800c2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d4:	e79b      	b.n	800c20e <__svfiscanf_r+0x1e6>
 800c2d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c2d8:	4621      	mov	r1, r4
 800c2da:	4630      	mov	r0, r6
 800c2dc:	4798      	blx	r3
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d0af      	beq.n	800c242 <__svfiscanf_r+0x21a>
 800c2e2:	e787      	b.n	800c1f4 <__svfiscanf_r+0x1cc>
 800c2e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c2e6:	3201      	adds	r2, #1
 800c2e8:	9245      	str	r2, [sp, #276]	; 0x114
 800c2ea:	6862      	ldr	r2, [r4, #4]
 800c2ec:	3a01      	subs	r2, #1
 800c2ee:	2a00      	cmp	r2, #0
 800c2f0:	6062      	str	r2, [r4, #4]
 800c2f2:	dd0b      	ble.n	800c30c <__svfiscanf_r+0x2e4>
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	6023      	str	r3, [r4, #0]
 800c2f8:	e7a6      	b.n	800c248 <__svfiscanf_r+0x220>
 800c2fa:	bf00      	nop
 800c2fc:	0800ca43 	.word	0x0800ca43
 800c300:	0800c86d 	.word	0x0800c86d
 800c304:	08014dc9 	.word	0x08014dc9
 800c308:	08014ecf 	.word	0x08014ecf
 800c30c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c30e:	4621      	mov	r1, r4
 800c310:	4630      	mov	r0, r6
 800c312:	4798      	blx	r3
 800c314:	2800      	cmp	r0, #0
 800c316:	d097      	beq.n	800c248 <__svfiscanf_r+0x220>
 800c318:	e76c      	b.n	800c1f4 <__svfiscanf_r+0x1cc>
 800c31a:	2b04      	cmp	r3, #4
 800c31c:	dc06      	bgt.n	800c32c <__svfiscanf_r+0x304>
 800c31e:	466b      	mov	r3, sp
 800c320:	4622      	mov	r2, r4
 800c322:	a941      	add	r1, sp, #260	; 0x104
 800c324:	4630      	mov	r0, r6
 800c326:	f000 f88f 	bl	800c448 <_scanf_i>
 800c32a:	e79b      	b.n	800c264 <__svfiscanf_r+0x23c>
 800c32c:	4b0e      	ldr	r3, [pc, #56]	; (800c368 <__svfiscanf_r+0x340>)
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f43f aead 	beq.w	800c08e <__svfiscanf_r+0x66>
 800c334:	466b      	mov	r3, sp
 800c336:	4622      	mov	r2, r4
 800c338:	a941      	add	r1, sp, #260	; 0x104
 800c33a:	4630      	mov	r0, r6
 800c33c:	f3af 8000 	nop.w
 800c340:	e790      	b.n	800c264 <__svfiscanf_r+0x23c>
 800c342:	89a3      	ldrh	r3, [r4, #12]
 800c344:	0599      	lsls	r1, r3, #22
 800c346:	f53f af59 	bmi.w	800c1fc <__svfiscanf_r+0x1d4>
 800c34a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c34c:	f7ff f9dc 	bl	800b708 <__retarget_lock_release_recursive>
 800c350:	e754      	b.n	800c1fc <__svfiscanf_r+0x1d4>
 800c352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c354:	07da      	lsls	r2, r3, #31
 800c356:	d405      	bmi.n	800c364 <__svfiscanf_r+0x33c>
 800c358:	89a3      	ldrh	r3, [r4, #12]
 800c35a:	059b      	lsls	r3, r3, #22
 800c35c:	d402      	bmi.n	800c364 <__svfiscanf_r+0x33c>
 800c35e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c360:	f7ff f9d2 	bl	800b708 <__retarget_lock_release_recursive>
 800c364:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c366:	e752      	b.n	800c20e <__svfiscanf_r+0x1e6>
 800c368:	00000000 	.word	0x00000000

0800c36c <_vfiscanf_r>:
 800c36c:	b530      	push	{r4, r5, lr}
 800c36e:	4604      	mov	r4, r0
 800c370:	b085      	sub	sp, #20
 800c372:	b148      	cbz	r0, 800c388 <_vfiscanf_r+0x1c>
 800c374:	6a05      	ldr	r5, [r0, #32]
 800c376:	b93d      	cbnz	r5, 800c388 <_vfiscanf_r+0x1c>
 800c378:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c37c:	9101      	str	r1, [sp, #4]
 800c37e:	f7fe fec7 	bl	800b110 <__sinit>
 800c382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c386:	9901      	ldr	r1, [sp, #4]
 800c388:	4620      	mov	r0, r4
 800c38a:	b005      	add	sp, #20
 800c38c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c390:	f7ff be4a 	b.w	800c028 <__svfiscanf_r>

0800c394 <_scanf_chars>:
 800c394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c398:	4615      	mov	r5, r2
 800c39a:	688a      	ldr	r2, [r1, #8]
 800c39c:	4680      	mov	r8, r0
 800c39e:	460c      	mov	r4, r1
 800c3a0:	b932      	cbnz	r2, 800c3b0 <_scanf_chars+0x1c>
 800c3a2:	698a      	ldr	r2, [r1, #24]
 800c3a4:	2a00      	cmp	r2, #0
 800c3a6:	bf0c      	ite	eq
 800c3a8:	2201      	moveq	r2, #1
 800c3aa:	f04f 32ff 	movne.w	r2, #4294967295
 800c3ae:	608a      	str	r2, [r1, #8]
 800c3b0:	6822      	ldr	r2, [r4, #0]
 800c3b2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c444 <_scanf_chars+0xb0>
 800c3b6:	06d1      	lsls	r1, r2, #27
 800c3b8:	bf5f      	itttt	pl
 800c3ba:	681a      	ldrpl	r2, [r3, #0]
 800c3bc:	1d11      	addpl	r1, r2, #4
 800c3be:	6019      	strpl	r1, [r3, #0]
 800c3c0:	6816      	ldrpl	r6, [r2, #0]
 800c3c2:	2700      	movs	r7, #0
 800c3c4:	69a0      	ldr	r0, [r4, #24]
 800c3c6:	b188      	cbz	r0, 800c3ec <_scanf_chars+0x58>
 800c3c8:	2801      	cmp	r0, #1
 800c3ca:	d107      	bne.n	800c3dc <_scanf_chars+0x48>
 800c3cc:	682a      	ldr	r2, [r5, #0]
 800c3ce:	7811      	ldrb	r1, [r2, #0]
 800c3d0:	6962      	ldr	r2, [r4, #20]
 800c3d2:	5c52      	ldrb	r2, [r2, r1]
 800c3d4:	b952      	cbnz	r2, 800c3ec <_scanf_chars+0x58>
 800c3d6:	2f00      	cmp	r7, #0
 800c3d8:	d031      	beq.n	800c43e <_scanf_chars+0xaa>
 800c3da:	e022      	b.n	800c422 <_scanf_chars+0x8e>
 800c3dc:	2802      	cmp	r0, #2
 800c3de:	d120      	bne.n	800c422 <_scanf_chars+0x8e>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c3e8:	071b      	lsls	r3, r3, #28
 800c3ea:	d41a      	bmi.n	800c422 <_scanf_chars+0x8e>
 800c3ec:	6823      	ldr	r3, [r4, #0]
 800c3ee:	06da      	lsls	r2, r3, #27
 800c3f0:	bf5e      	ittt	pl
 800c3f2:	682b      	ldrpl	r3, [r5, #0]
 800c3f4:	781b      	ldrbpl	r3, [r3, #0]
 800c3f6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c3fa:	682a      	ldr	r2, [r5, #0]
 800c3fc:	686b      	ldr	r3, [r5, #4]
 800c3fe:	3201      	adds	r2, #1
 800c400:	602a      	str	r2, [r5, #0]
 800c402:	68a2      	ldr	r2, [r4, #8]
 800c404:	3b01      	subs	r3, #1
 800c406:	3a01      	subs	r2, #1
 800c408:	606b      	str	r3, [r5, #4]
 800c40a:	3701      	adds	r7, #1
 800c40c:	60a2      	str	r2, [r4, #8]
 800c40e:	b142      	cbz	r2, 800c422 <_scanf_chars+0x8e>
 800c410:	2b00      	cmp	r3, #0
 800c412:	dcd7      	bgt.n	800c3c4 <_scanf_chars+0x30>
 800c414:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c418:	4629      	mov	r1, r5
 800c41a:	4640      	mov	r0, r8
 800c41c:	4798      	blx	r3
 800c41e:	2800      	cmp	r0, #0
 800c420:	d0d0      	beq.n	800c3c4 <_scanf_chars+0x30>
 800c422:	6823      	ldr	r3, [r4, #0]
 800c424:	f013 0310 	ands.w	r3, r3, #16
 800c428:	d105      	bne.n	800c436 <_scanf_chars+0xa2>
 800c42a:	68e2      	ldr	r2, [r4, #12]
 800c42c:	3201      	adds	r2, #1
 800c42e:	60e2      	str	r2, [r4, #12]
 800c430:	69a2      	ldr	r2, [r4, #24]
 800c432:	b102      	cbz	r2, 800c436 <_scanf_chars+0xa2>
 800c434:	7033      	strb	r3, [r6, #0]
 800c436:	6923      	ldr	r3, [r4, #16]
 800c438:	443b      	add	r3, r7
 800c43a:	6123      	str	r3, [r4, #16]
 800c43c:	2000      	movs	r0, #0
 800c43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c442:	bf00      	nop
 800c444:	08014dc9 	.word	0x08014dc9

0800c448 <_scanf_i>:
 800c448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c44c:	4698      	mov	r8, r3
 800c44e:	4b74      	ldr	r3, [pc, #464]	; (800c620 <_scanf_i+0x1d8>)
 800c450:	460c      	mov	r4, r1
 800c452:	4682      	mov	sl, r0
 800c454:	4616      	mov	r6, r2
 800c456:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c45a:	b087      	sub	sp, #28
 800c45c:	ab03      	add	r3, sp, #12
 800c45e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c462:	4b70      	ldr	r3, [pc, #448]	; (800c624 <_scanf_i+0x1dc>)
 800c464:	69a1      	ldr	r1, [r4, #24]
 800c466:	4a70      	ldr	r2, [pc, #448]	; (800c628 <_scanf_i+0x1e0>)
 800c468:	2903      	cmp	r1, #3
 800c46a:	bf18      	it	ne
 800c46c:	461a      	movne	r2, r3
 800c46e:	68a3      	ldr	r3, [r4, #8]
 800c470:	9201      	str	r2, [sp, #4]
 800c472:	1e5a      	subs	r2, r3, #1
 800c474:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c478:	bf88      	it	hi
 800c47a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c47e:	4627      	mov	r7, r4
 800c480:	bf82      	ittt	hi
 800c482:	eb03 0905 	addhi.w	r9, r3, r5
 800c486:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c48a:	60a3      	strhi	r3, [r4, #8]
 800c48c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c490:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c494:	bf98      	it	ls
 800c496:	f04f 0900 	movls.w	r9, #0
 800c49a:	6023      	str	r3, [r4, #0]
 800c49c:	463d      	mov	r5, r7
 800c49e:	f04f 0b00 	mov.w	fp, #0
 800c4a2:	6831      	ldr	r1, [r6, #0]
 800c4a4:	ab03      	add	r3, sp, #12
 800c4a6:	7809      	ldrb	r1, [r1, #0]
 800c4a8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c4ac:	2202      	movs	r2, #2
 800c4ae:	f7f3 fedf 	bl	8000270 <memchr>
 800c4b2:	b328      	cbz	r0, 800c500 <_scanf_i+0xb8>
 800c4b4:	f1bb 0f01 	cmp.w	fp, #1
 800c4b8:	d159      	bne.n	800c56e <_scanf_i+0x126>
 800c4ba:	6862      	ldr	r2, [r4, #4]
 800c4bc:	b92a      	cbnz	r2, 800c4ca <_scanf_i+0x82>
 800c4be:	6822      	ldr	r2, [r4, #0]
 800c4c0:	2308      	movs	r3, #8
 800c4c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4c6:	6063      	str	r3, [r4, #4]
 800c4c8:	6022      	str	r2, [r4, #0]
 800c4ca:	6822      	ldr	r2, [r4, #0]
 800c4cc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c4d0:	6022      	str	r2, [r4, #0]
 800c4d2:	68a2      	ldr	r2, [r4, #8]
 800c4d4:	1e51      	subs	r1, r2, #1
 800c4d6:	60a1      	str	r1, [r4, #8]
 800c4d8:	b192      	cbz	r2, 800c500 <_scanf_i+0xb8>
 800c4da:	6832      	ldr	r2, [r6, #0]
 800c4dc:	1c51      	adds	r1, r2, #1
 800c4de:	6031      	str	r1, [r6, #0]
 800c4e0:	7812      	ldrb	r2, [r2, #0]
 800c4e2:	f805 2b01 	strb.w	r2, [r5], #1
 800c4e6:	6872      	ldr	r2, [r6, #4]
 800c4e8:	3a01      	subs	r2, #1
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	6072      	str	r2, [r6, #4]
 800c4ee:	dc07      	bgt.n	800c500 <_scanf_i+0xb8>
 800c4f0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c4f4:	4631      	mov	r1, r6
 800c4f6:	4650      	mov	r0, sl
 800c4f8:	4790      	blx	r2
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	f040 8085 	bne.w	800c60a <_scanf_i+0x1c2>
 800c500:	f10b 0b01 	add.w	fp, fp, #1
 800c504:	f1bb 0f03 	cmp.w	fp, #3
 800c508:	d1cb      	bne.n	800c4a2 <_scanf_i+0x5a>
 800c50a:	6863      	ldr	r3, [r4, #4]
 800c50c:	b90b      	cbnz	r3, 800c512 <_scanf_i+0xca>
 800c50e:	230a      	movs	r3, #10
 800c510:	6063      	str	r3, [r4, #4]
 800c512:	6863      	ldr	r3, [r4, #4]
 800c514:	4945      	ldr	r1, [pc, #276]	; (800c62c <_scanf_i+0x1e4>)
 800c516:	6960      	ldr	r0, [r4, #20]
 800c518:	1ac9      	subs	r1, r1, r3
 800c51a:	f000 fa1f 	bl	800c95c <__sccl>
 800c51e:	f04f 0b00 	mov.w	fp, #0
 800c522:	68a3      	ldr	r3, [r4, #8]
 800c524:	6822      	ldr	r2, [r4, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d03d      	beq.n	800c5a6 <_scanf_i+0x15e>
 800c52a:	6831      	ldr	r1, [r6, #0]
 800c52c:	6960      	ldr	r0, [r4, #20]
 800c52e:	f891 c000 	ldrb.w	ip, [r1]
 800c532:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c536:	2800      	cmp	r0, #0
 800c538:	d035      	beq.n	800c5a6 <_scanf_i+0x15e>
 800c53a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c53e:	d124      	bne.n	800c58a <_scanf_i+0x142>
 800c540:	0510      	lsls	r0, r2, #20
 800c542:	d522      	bpl.n	800c58a <_scanf_i+0x142>
 800c544:	f10b 0b01 	add.w	fp, fp, #1
 800c548:	f1b9 0f00 	cmp.w	r9, #0
 800c54c:	d003      	beq.n	800c556 <_scanf_i+0x10e>
 800c54e:	3301      	adds	r3, #1
 800c550:	f109 39ff 	add.w	r9, r9, #4294967295
 800c554:	60a3      	str	r3, [r4, #8]
 800c556:	6873      	ldr	r3, [r6, #4]
 800c558:	3b01      	subs	r3, #1
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	6073      	str	r3, [r6, #4]
 800c55e:	dd1b      	ble.n	800c598 <_scanf_i+0x150>
 800c560:	6833      	ldr	r3, [r6, #0]
 800c562:	3301      	adds	r3, #1
 800c564:	6033      	str	r3, [r6, #0]
 800c566:	68a3      	ldr	r3, [r4, #8]
 800c568:	3b01      	subs	r3, #1
 800c56a:	60a3      	str	r3, [r4, #8]
 800c56c:	e7d9      	b.n	800c522 <_scanf_i+0xda>
 800c56e:	f1bb 0f02 	cmp.w	fp, #2
 800c572:	d1ae      	bne.n	800c4d2 <_scanf_i+0x8a>
 800c574:	6822      	ldr	r2, [r4, #0]
 800c576:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c57a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c57e:	d1bf      	bne.n	800c500 <_scanf_i+0xb8>
 800c580:	2310      	movs	r3, #16
 800c582:	6063      	str	r3, [r4, #4]
 800c584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c588:	e7a2      	b.n	800c4d0 <_scanf_i+0x88>
 800c58a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c58e:	6022      	str	r2, [r4, #0]
 800c590:	780b      	ldrb	r3, [r1, #0]
 800c592:	f805 3b01 	strb.w	r3, [r5], #1
 800c596:	e7de      	b.n	800c556 <_scanf_i+0x10e>
 800c598:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c59c:	4631      	mov	r1, r6
 800c59e:	4650      	mov	r0, sl
 800c5a0:	4798      	blx	r3
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d0df      	beq.n	800c566 <_scanf_i+0x11e>
 800c5a6:	6823      	ldr	r3, [r4, #0]
 800c5a8:	05d9      	lsls	r1, r3, #23
 800c5aa:	d50d      	bpl.n	800c5c8 <_scanf_i+0x180>
 800c5ac:	42bd      	cmp	r5, r7
 800c5ae:	d909      	bls.n	800c5c4 <_scanf_i+0x17c>
 800c5b0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c5b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c5b8:	4632      	mov	r2, r6
 800c5ba:	4650      	mov	r0, sl
 800c5bc:	4798      	blx	r3
 800c5be:	f105 39ff 	add.w	r9, r5, #4294967295
 800c5c2:	464d      	mov	r5, r9
 800c5c4:	42bd      	cmp	r5, r7
 800c5c6:	d028      	beq.n	800c61a <_scanf_i+0x1d2>
 800c5c8:	6822      	ldr	r2, [r4, #0]
 800c5ca:	f012 0210 	ands.w	r2, r2, #16
 800c5ce:	d113      	bne.n	800c5f8 <_scanf_i+0x1b0>
 800c5d0:	702a      	strb	r2, [r5, #0]
 800c5d2:	6863      	ldr	r3, [r4, #4]
 800c5d4:	9e01      	ldr	r6, [sp, #4]
 800c5d6:	4639      	mov	r1, r7
 800c5d8:	4650      	mov	r0, sl
 800c5da:	47b0      	blx	r6
 800c5dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c5e0:	6821      	ldr	r1, [r4, #0]
 800c5e2:	1d1a      	adds	r2, r3, #4
 800c5e4:	f8c8 2000 	str.w	r2, [r8]
 800c5e8:	f011 0f20 	tst.w	r1, #32
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	d00f      	beq.n	800c610 <_scanf_i+0x1c8>
 800c5f0:	6018      	str	r0, [r3, #0]
 800c5f2:	68e3      	ldr	r3, [r4, #12]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	60e3      	str	r3, [r4, #12]
 800c5f8:	6923      	ldr	r3, [r4, #16]
 800c5fa:	1bed      	subs	r5, r5, r7
 800c5fc:	445d      	add	r5, fp
 800c5fe:	442b      	add	r3, r5
 800c600:	6123      	str	r3, [r4, #16]
 800c602:	2000      	movs	r0, #0
 800c604:	b007      	add	sp, #28
 800c606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c60a:	f04f 0b00 	mov.w	fp, #0
 800c60e:	e7ca      	b.n	800c5a6 <_scanf_i+0x15e>
 800c610:	07ca      	lsls	r2, r1, #31
 800c612:	bf4c      	ite	mi
 800c614:	8018      	strhmi	r0, [r3, #0]
 800c616:	6018      	strpl	r0, [r3, #0]
 800c618:	e7eb      	b.n	800c5f2 <_scanf_i+0x1aa>
 800c61a:	2001      	movs	r0, #1
 800c61c:	e7f2      	b.n	800c604 <_scanf_i+0x1bc>
 800c61e:	bf00      	nop
 800c620:	0800ea74 	.word	0x0800ea74
 800c624:	0800cd09 	.word	0x0800cd09
 800c628:	0800afe1 	.word	0x0800afe1
 800c62c:	08014f0c 	.word	0x08014f0c

0800c630 <__sflush_r>:
 800c630:	898a      	ldrh	r2, [r1, #12]
 800c632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c636:	4605      	mov	r5, r0
 800c638:	0710      	lsls	r0, r2, #28
 800c63a:	460c      	mov	r4, r1
 800c63c:	d458      	bmi.n	800c6f0 <__sflush_r+0xc0>
 800c63e:	684b      	ldr	r3, [r1, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	dc05      	bgt.n	800c650 <__sflush_r+0x20>
 800c644:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c646:	2b00      	cmp	r3, #0
 800c648:	dc02      	bgt.n	800c650 <__sflush_r+0x20>
 800c64a:	2000      	movs	r0, #0
 800c64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c652:	2e00      	cmp	r6, #0
 800c654:	d0f9      	beq.n	800c64a <__sflush_r+0x1a>
 800c656:	2300      	movs	r3, #0
 800c658:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c65c:	682f      	ldr	r7, [r5, #0]
 800c65e:	6a21      	ldr	r1, [r4, #32]
 800c660:	602b      	str	r3, [r5, #0]
 800c662:	d032      	beq.n	800c6ca <__sflush_r+0x9a>
 800c664:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c666:	89a3      	ldrh	r3, [r4, #12]
 800c668:	075a      	lsls	r2, r3, #29
 800c66a:	d505      	bpl.n	800c678 <__sflush_r+0x48>
 800c66c:	6863      	ldr	r3, [r4, #4]
 800c66e:	1ac0      	subs	r0, r0, r3
 800c670:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c672:	b10b      	cbz	r3, 800c678 <__sflush_r+0x48>
 800c674:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c676:	1ac0      	subs	r0, r0, r3
 800c678:	2300      	movs	r3, #0
 800c67a:	4602      	mov	r2, r0
 800c67c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c67e:	6a21      	ldr	r1, [r4, #32]
 800c680:	4628      	mov	r0, r5
 800c682:	47b0      	blx	r6
 800c684:	1c43      	adds	r3, r0, #1
 800c686:	89a3      	ldrh	r3, [r4, #12]
 800c688:	d106      	bne.n	800c698 <__sflush_r+0x68>
 800c68a:	6829      	ldr	r1, [r5, #0]
 800c68c:	291d      	cmp	r1, #29
 800c68e:	d82b      	bhi.n	800c6e8 <__sflush_r+0xb8>
 800c690:	4a29      	ldr	r2, [pc, #164]	; (800c738 <__sflush_r+0x108>)
 800c692:	410a      	asrs	r2, r1
 800c694:	07d6      	lsls	r6, r2, #31
 800c696:	d427      	bmi.n	800c6e8 <__sflush_r+0xb8>
 800c698:	2200      	movs	r2, #0
 800c69a:	6062      	str	r2, [r4, #4]
 800c69c:	04d9      	lsls	r1, r3, #19
 800c69e:	6922      	ldr	r2, [r4, #16]
 800c6a0:	6022      	str	r2, [r4, #0]
 800c6a2:	d504      	bpl.n	800c6ae <__sflush_r+0x7e>
 800c6a4:	1c42      	adds	r2, r0, #1
 800c6a6:	d101      	bne.n	800c6ac <__sflush_r+0x7c>
 800c6a8:	682b      	ldr	r3, [r5, #0]
 800c6aa:	b903      	cbnz	r3, 800c6ae <__sflush_r+0x7e>
 800c6ac:	6560      	str	r0, [r4, #84]	; 0x54
 800c6ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6b0:	602f      	str	r7, [r5, #0]
 800c6b2:	2900      	cmp	r1, #0
 800c6b4:	d0c9      	beq.n	800c64a <__sflush_r+0x1a>
 800c6b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6ba:	4299      	cmp	r1, r3
 800c6bc:	d002      	beq.n	800c6c4 <__sflush_r+0x94>
 800c6be:	4628      	mov	r0, r5
 800c6c0:	f7ff f83a 	bl	800b738 <_free_r>
 800c6c4:	2000      	movs	r0, #0
 800c6c6:	6360      	str	r0, [r4, #52]	; 0x34
 800c6c8:	e7c0      	b.n	800c64c <__sflush_r+0x1c>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	47b0      	blx	r6
 800c6d0:	1c41      	adds	r1, r0, #1
 800c6d2:	d1c8      	bne.n	800c666 <__sflush_r+0x36>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d0c5      	beq.n	800c666 <__sflush_r+0x36>
 800c6da:	2b1d      	cmp	r3, #29
 800c6dc:	d001      	beq.n	800c6e2 <__sflush_r+0xb2>
 800c6de:	2b16      	cmp	r3, #22
 800c6e0:	d101      	bne.n	800c6e6 <__sflush_r+0xb6>
 800c6e2:	602f      	str	r7, [r5, #0]
 800c6e4:	e7b1      	b.n	800c64a <__sflush_r+0x1a>
 800c6e6:	89a3      	ldrh	r3, [r4, #12]
 800c6e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6ec:	81a3      	strh	r3, [r4, #12]
 800c6ee:	e7ad      	b.n	800c64c <__sflush_r+0x1c>
 800c6f0:	690f      	ldr	r7, [r1, #16]
 800c6f2:	2f00      	cmp	r7, #0
 800c6f4:	d0a9      	beq.n	800c64a <__sflush_r+0x1a>
 800c6f6:	0793      	lsls	r3, r2, #30
 800c6f8:	680e      	ldr	r6, [r1, #0]
 800c6fa:	bf08      	it	eq
 800c6fc:	694b      	ldreq	r3, [r1, #20]
 800c6fe:	600f      	str	r7, [r1, #0]
 800c700:	bf18      	it	ne
 800c702:	2300      	movne	r3, #0
 800c704:	eba6 0807 	sub.w	r8, r6, r7
 800c708:	608b      	str	r3, [r1, #8]
 800c70a:	f1b8 0f00 	cmp.w	r8, #0
 800c70e:	dd9c      	ble.n	800c64a <__sflush_r+0x1a>
 800c710:	6a21      	ldr	r1, [r4, #32]
 800c712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c714:	4643      	mov	r3, r8
 800c716:	463a      	mov	r2, r7
 800c718:	4628      	mov	r0, r5
 800c71a:	47b0      	blx	r6
 800c71c:	2800      	cmp	r0, #0
 800c71e:	dc06      	bgt.n	800c72e <__sflush_r+0xfe>
 800c720:	89a3      	ldrh	r3, [r4, #12]
 800c722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c726:	81a3      	strh	r3, [r4, #12]
 800c728:	f04f 30ff 	mov.w	r0, #4294967295
 800c72c:	e78e      	b.n	800c64c <__sflush_r+0x1c>
 800c72e:	4407      	add	r7, r0
 800c730:	eba8 0800 	sub.w	r8, r8, r0
 800c734:	e7e9      	b.n	800c70a <__sflush_r+0xda>
 800c736:	bf00      	nop
 800c738:	dfbffffe 	.word	0xdfbffffe

0800c73c <_fflush_r>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	690b      	ldr	r3, [r1, #16]
 800c740:	4605      	mov	r5, r0
 800c742:	460c      	mov	r4, r1
 800c744:	b913      	cbnz	r3, 800c74c <_fflush_r+0x10>
 800c746:	2500      	movs	r5, #0
 800c748:	4628      	mov	r0, r5
 800c74a:	bd38      	pop	{r3, r4, r5, pc}
 800c74c:	b118      	cbz	r0, 800c756 <_fflush_r+0x1a>
 800c74e:	6a03      	ldr	r3, [r0, #32]
 800c750:	b90b      	cbnz	r3, 800c756 <_fflush_r+0x1a>
 800c752:	f7fe fcdd 	bl	800b110 <__sinit>
 800c756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d0f3      	beq.n	800c746 <_fflush_r+0xa>
 800c75e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c760:	07d0      	lsls	r0, r2, #31
 800c762:	d404      	bmi.n	800c76e <_fflush_r+0x32>
 800c764:	0599      	lsls	r1, r3, #22
 800c766:	d402      	bmi.n	800c76e <_fflush_r+0x32>
 800c768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c76a:	f7fe ffcc 	bl	800b706 <__retarget_lock_acquire_recursive>
 800c76e:	4628      	mov	r0, r5
 800c770:	4621      	mov	r1, r4
 800c772:	f7ff ff5d 	bl	800c630 <__sflush_r>
 800c776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c778:	07da      	lsls	r2, r3, #31
 800c77a:	4605      	mov	r5, r0
 800c77c:	d4e4      	bmi.n	800c748 <_fflush_r+0xc>
 800c77e:	89a3      	ldrh	r3, [r4, #12]
 800c780:	059b      	lsls	r3, r3, #22
 800c782:	d4e1      	bmi.n	800c748 <_fflush_r+0xc>
 800c784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c786:	f7fe ffbf 	bl	800b708 <__retarget_lock_release_recursive>
 800c78a:	e7dd      	b.n	800c748 <_fflush_r+0xc>

0800c78c <__swhatbuf_r>:
 800c78c:	b570      	push	{r4, r5, r6, lr}
 800c78e:	460c      	mov	r4, r1
 800c790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c794:	2900      	cmp	r1, #0
 800c796:	b096      	sub	sp, #88	; 0x58
 800c798:	4615      	mov	r5, r2
 800c79a:	461e      	mov	r6, r3
 800c79c:	da0d      	bge.n	800c7ba <__swhatbuf_r+0x2e>
 800c79e:	89a3      	ldrh	r3, [r4, #12]
 800c7a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c7a4:	f04f 0100 	mov.w	r1, #0
 800c7a8:	bf0c      	ite	eq
 800c7aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c7ae:	2340      	movne	r3, #64	; 0x40
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	6031      	str	r1, [r6, #0]
 800c7b4:	602b      	str	r3, [r5, #0]
 800c7b6:	b016      	add	sp, #88	; 0x58
 800c7b8:	bd70      	pop	{r4, r5, r6, pc}
 800c7ba:	466a      	mov	r2, sp
 800c7bc:	f000 f9e0 	bl	800cb80 <_fstat_r>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	dbec      	blt.n	800c79e <__swhatbuf_r+0x12>
 800c7c4:	9901      	ldr	r1, [sp, #4]
 800c7c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c7ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c7ce:	4259      	negs	r1, r3
 800c7d0:	4159      	adcs	r1, r3
 800c7d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7d6:	e7eb      	b.n	800c7b0 <__swhatbuf_r+0x24>

0800c7d8 <__smakebuf_r>:
 800c7d8:	898b      	ldrh	r3, [r1, #12]
 800c7da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7dc:	079d      	lsls	r5, r3, #30
 800c7de:	4606      	mov	r6, r0
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	d507      	bpl.n	800c7f4 <__smakebuf_r+0x1c>
 800c7e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	6123      	str	r3, [r4, #16]
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	6163      	str	r3, [r4, #20]
 800c7f0:	b002      	add	sp, #8
 800c7f2:	bd70      	pop	{r4, r5, r6, pc}
 800c7f4:	ab01      	add	r3, sp, #4
 800c7f6:	466a      	mov	r2, sp
 800c7f8:	f7ff ffc8 	bl	800c78c <__swhatbuf_r>
 800c7fc:	9900      	ldr	r1, [sp, #0]
 800c7fe:	4605      	mov	r5, r0
 800c800:	4630      	mov	r0, r6
 800c802:	f7fe fadf 	bl	800adc4 <_malloc_r>
 800c806:	b948      	cbnz	r0, 800c81c <__smakebuf_r+0x44>
 800c808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80c:	059a      	lsls	r2, r3, #22
 800c80e:	d4ef      	bmi.n	800c7f0 <__smakebuf_r+0x18>
 800c810:	f023 0303 	bic.w	r3, r3, #3
 800c814:	f043 0302 	orr.w	r3, r3, #2
 800c818:	81a3      	strh	r3, [r4, #12]
 800c81a:	e7e3      	b.n	800c7e4 <__smakebuf_r+0xc>
 800c81c:	89a3      	ldrh	r3, [r4, #12]
 800c81e:	6020      	str	r0, [r4, #0]
 800c820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c824:	81a3      	strh	r3, [r4, #12]
 800c826:	9b00      	ldr	r3, [sp, #0]
 800c828:	6163      	str	r3, [r4, #20]
 800c82a:	9b01      	ldr	r3, [sp, #4]
 800c82c:	6120      	str	r0, [r4, #16]
 800c82e:	b15b      	cbz	r3, 800c848 <__smakebuf_r+0x70>
 800c830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c834:	4630      	mov	r0, r6
 800c836:	f000 f9b5 	bl	800cba4 <_isatty_r>
 800c83a:	b128      	cbz	r0, 800c848 <__smakebuf_r+0x70>
 800c83c:	89a3      	ldrh	r3, [r4, #12]
 800c83e:	f023 0303 	bic.w	r3, r3, #3
 800c842:	f043 0301 	orr.w	r3, r3, #1
 800c846:	81a3      	strh	r3, [r4, #12]
 800c848:	89a3      	ldrh	r3, [r4, #12]
 800c84a:	431d      	orrs	r5, r3
 800c84c:	81a5      	strh	r5, [r4, #12]
 800c84e:	e7cf      	b.n	800c7f0 <__smakebuf_r+0x18>

0800c850 <lflush>:
 800c850:	898b      	ldrh	r3, [r1, #12]
 800c852:	f003 0309 	and.w	r3, r3, #9
 800c856:	2b09      	cmp	r3, #9
 800c858:	d103      	bne.n	800c862 <lflush+0x12>
 800c85a:	4b03      	ldr	r3, [pc, #12]	; (800c868 <lflush+0x18>)
 800c85c:	6818      	ldr	r0, [r3, #0]
 800c85e:	f7ff bf6d 	b.w	800c73c <_fflush_r>
 800c862:	2000      	movs	r0, #0
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	200008e0 	.word	0x200008e0

0800c86c <__srefill_r>:
 800c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86e:	460c      	mov	r4, r1
 800c870:	4605      	mov	r5, r0
 800c872:	b118      	cbz	r0, 800c87c <__srefill_r+0x10>
 800c874:	6a03      	ldr	r3, [r0, #32]
 800c876:	b90b      	cbnz	r3, 800c87c <__srefill_r+0x10>
 800c878:	f7fe fc4a 	bl	800b110 <__sinit>
 800c87c:	2300      	movs	r3, #0
 800c87e:	6063      	str	r3, [r4, #4]
 800c880:	89a3      	ldrh	r3, [r4, #12]
 800c882:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c886:	069e      	lsls	r6, r3, #26
 800c888:	d502      	bpl.n	800c890 <__srefill_r+0x24>
 800c88a:	f04f 30ff 	mov.w	r0, #4294967295
 800c88e:	e05c      	b.n	800c94a <__srefill_r+0xde>
 800c890:	0758      	lsls	r0, r3, #29
 800c892:	d448      	bmi.n	800c926 <__srefill_r+0xba>
 800c894:	06d9      	lsls	r1, r3, #27
 800c896:	d405      	bmi.n	800c8a4 <__srefill_r+0x38>
 800c898:	2309      	movs	r3, #9
 800c89a:	602b      	str	r3, [r5, #0]
 800c89c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8a0:	81a3      	strh	r3, [r4, #12]
 800c8a2:	e7f2      	b.n	800c88a <__srefill_r+0x1e>
 800c8a4:	071a      	lsls	r2, r3, #28
 800c8a6:	d50b      	bpl.n	800c8c0 <__srefill_r+0x54>
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	f7ff ff46 	bl	800c73c <_fflush_r>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d1ea      	bne.n	800c88a <__srefill_r+0x1e>
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	60a0      	str	r0, [r4, #8]
 800c8b8:	f023 0308 	bic.w	r3, r3, #8
 800c8bc:	81a3      	strh	r3, [r4, #12]
 800c8be:	61a0      	str	r0, [r4, #24]
 800c8c0:	89a3      	ldrh	r3, [r4, #12]
 800c8c2:	f043 0304 	orr.w	r3, r3, #4
 800c8c6:	81a3      	strh	r3, [r4, #12]
 800c8c8:	6923      	ldr	r3, [r4, #16]
 800c8ca:	b91b      	cbnz	r3, 800c8d4 <__srefill_r+0x68>
 800c8cc:	4621      	mov	r1, r4
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	f7ff ff82 	bl	800c7d8 <__smakebuf_r>
 800c8d4:	89a6      	ldrh	r6, [r4, #12]
 800c8d6:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800c8da:	07b3      	lsls	r3, r6, #30
 800c8dc:	d00f      	beq.n	800c8fe <__srefill_r+0x92>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	4a1b      	ldr	r2, [pc, #108]	; (800c950 <__srefill_r+0xe4>)
 800c8e2:	491c      	ldr	r1, [pc, #112]	; (800c954 <__srefill_r+0xe8>)
 800c8e4:	481c      	ldr	r0, [pc, #112]	; (800c958 <__srefill_r+0xec>)
 800c8e6:	81a3      	strh	r3, [r4, #12]
 800c8e8:	f006 0609 	and.w	r6, r6, #9
 800c8ec:	f7fe fc28 	bl	800b140 <_fwalk_sglue>
 800c8f0:	2e09      	cmp	r6, #9
 800c8f2:	81a7      	strh	r7, [r4, #12]
 800c8f4:	d103      	bne.n	800c8fe <__srefill_r+0x92>
 800c8f6:	4621      	mov	r1, r4
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	f7ff fe99 	bl	800c630 <__sflush_r>
 800c8fe:	6922      	ldr	r2, [r4, #16]
 800c900:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c902:	6963      	ldr	r3, [r4, #20]
 800c904:	6a21      	ldr	r1, [r4, #32]
 800c906:	6022      	str	r2, [r4, #0]
 800c908:	4628      	mov	r0, r5
 800c90a:	47b0      	blx	r6
 800c90c:	2800      	cmp	r0, #0
 800c90e:	6060      	str	r0, [r4, #4]
 800c910:	dc1c      	bgt.n	800c94c <__srefill_r+0xe0>
 800c912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c916:	bf17      	itett	ne
 800c918:	2200      	movne	r2, #0
 800c91a:	f043 0320 	orreq.w	r3, r3, #32
 800c91e:	6062      	strne	r2, [r4, #4]
 800c920:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800c924:	e7bc      	b.n	800c8a0 <__srefill_r+0x34>
 800c926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c928:	2900      	cmp	r1, #0
 800c92a:	d0cd      	beq.n	800c8c8 <__srefill_r+0x5c>
 800c92c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c930:	4299      	cmp	r1, r3
 800c932:	d002      	beq.n	800c93a <__srefill_r+0xce>
 800c934:	4628      	mov	r0, r5
 800c936:	f7fe feff 	bl	800b738 <_free_r>
 800c93a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c93c:	6063      	str	r3, [r4, #4]
 800c93e:	2000      	movs	r0, #0
 800c940:	6360      	str	r0, [r4, #52]	; 0x34
 800c942:	2b00      	cmp	r3, #0
 800c944:	d0c0      	beq.n	800c8c8 <__srefill_r+0x5c>
 800c946:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c948:	6023      	str	r3, [r4, #0]
 800c94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c94c:	2000      	movs	r0, #0
 800c94e:	e7fc      	b.n	800c94a <__srefill_r+0xde>
 800c950:	20000888 	.word	0x20000888
 800c954:	0800c851 	.word	0x0800c851
 800c958:	20000894 	.word	0x20000894

0800c95c <__sccl>:
 800c95c:	b570      	push	{r4, r5, r6, lr}
 800c95e:	780b      	ldrb	r3, [r1, #0]
 800c960:	4604      	mov	r4, r0
 800c962:	2b5e      	cmp	r3, #94	; 0x5e
 800c964:	bf0b      	itete	eq
 800c966:	784b      	ldrbeq	r3, [r1, #1]
 800c968:	1c4a      	addne	r2, r1, #1
 800c96a:	1c8a      	addeq	r2, r1, #2
 800c96c:	2100      	movne	r1, #0
 800c96e:	bf08      	it	eq
 800c970:	2101      	moveq	r1, #1
 800c972:	3801      	subs	r0, #1
 800c974:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c978:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c97c:	42a8      	cmp	r0, r5
 800c97e:	d1fb      	bne.n	800c978 <__sccl+0x1c>
 800c980:	b90b      	cbnz	r3, 800c986 <__sccl+0x2a>
 800c982:	1e50      	subs	r0, r2, #1
 800c984:	bd70      	pop	{r4, r5, r6, pc}
 800c986:	f081 0101 	eor.w	r1, r1, #1
 800c98a:	54e1      	strb	r1, [r4, r3]
 800c98c:	4610      	mov	r0, r2
 800c98e:	4602      	mov	r2, r0
 800c990:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c994:	2d2d      	cmp	r5, #45	; 0x2d
 800c996:	d005      	beq.n	800c9a4 <__sccl+0x48>
 800c998:	2d5d      	cmp	r5, #93	; 0x5d
 800c99a:	d016      	beq.n	800c9ca <__sccl+0x6e>
 800c99c:	2d00      	cmp	r5, #0
 800c99e:	d0f1      	beq.n	800c984 <__sccl+0x28>
 800c9a0:	462b      	mov	r3, r5
 800c9a2:	e7f2      	b.n	800c98a <__sccl+0x2e>
 800c9a4:	7846      	ldrb	r6, [r0, #1]
 800c9a6:	2e5d      	cmp	r6, #93	; 0x5d
 800c9a8:	d0fa      	beq.n	800c9a0 <__sccl+0x44>
 800c9aa:	42b3      	cmp	r3, r6
 800c9ac:	dcf8      	bgt.n	800c9a0 <__sccl+0x44>
 800c9ae:	3002      	adds	r0, #2
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	3201      	adds	r2, #1
 800c9b4:	4296      	cmp	r6, r2
 800c9b6:	54a1      	strb	r1, [r4, r2]
 800c9b8:	dcfb      	bgt.n	800c9b2 <__sccl+0x56>
 800c9ba:	1af2      	subs	r2, r6, r3
 800c9bc:	3a01      	subs	r2, #1
 800c9be:	1c5d      	adds	r5, r3, #1
 800c9c0:	42b3      	cmp	r3, r6
 800c9c2:	bfa8      	it	ge
 800c9c4:	2200      	movge	r2, #0
 800c9c6:	18ab      	adds	r3, r5, r2
 800c9c8:	e7e1      	b.n	800c98e <__sccl+0x32>
 800c9ca:	4610      	mov	r0, r2
 800c9cc:	e7da      	b.n	800c984 <__sccl+0x28>

0800c9ce <__submore>:
 800c9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c9d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9da:	4299      	cmp	r1, r3
 800c9dc:	d11d      	bne.n	800ca1a <__submore+0x4c>
 800c9de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c9e2:	f7fe f9ef 	bl	800adc4 <_malloc_r>
 800c9e6:	b918      	cbnz	r0, 800c9f0 <__submore+0x22>
 800c9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9f4:	63a3      	str	r3, [r4, #56]	; 0x38
 800c9f6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c9fa:	6360      	str	r0, [r4, #52]	; 0x34
 800c9fc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ca00:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ca04:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ca08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ca0c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ca10:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ca14:	6020      	str	r0, [r4, #0]
 800ca16:	2000      	movs	r0, #0
 800ca18:	e7e8      	b.n	800c9ec <__submore+0x1e>
 800ca1a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ca1c:	0077      	lsls	r7, r6, #1
 800ca1e:	463a      	mov	r2, r7
 800ca20:	f000 f8d0 	bl	800cbc4 <_realloc_r>
 800ca24:	4605      	mov	r5, r0
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d0de      	beq.n	800c9e8 <__submore+0x1a>
 800ca2a:	eb00 0806 	add.w	r8, r0, r6
 800ca2e:	4601      	mov	r1, r0
 800ca30:	4632      	mov	r2, r6
 800ca32:	4640      	mov	r0, r8
 800ca34:	f7fe fe71 	bl	800b71a <memcpy>
 800ca38:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ca3c:	f8c4 8000 	str.w	r8, [r4]
 800ca40:	e7e9      	b.n	800ca16 <__submore+0x48>

0800ca42 <_ungetc_r>:
 800ca42:	b570      	push	{r4, r5, r6, lr}
 800ca44:	4614      	mov	r4, r2
 800ca46:	1c4a      	adds	r2, r1, #1
 800ca48:	4606      	mov	r6, r0
 800ca4a:	460d      	mov	r5, r1
 800ca4c:	d103      	bne.n	800ca56 <_ungetc_r+0x14>
 800ca4e:	f04f 35ff 	mov.w	r5, #4294967295
 800ca52:	4628      	mov	r0, r5
 800ca54:	bd70      	pop	{r4, r5, r6, pc}
 800ca56:	b118      	cbz	r0, 800ca60 <_ungetc_r+0x1e>
 800ca58:	6a03      	ldr	r3, [r0, #32]
 800ca5a:	b90b      	cbnz	r3, 800ca60 <_ungetc_r+0x1e>
 800ca5c:	f7fe fb58 	bl	800b110 <__sinit>
 800ca60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca62:	07db      	lsls	r3, r3, #31
 800ca64:	d405      	bmi.n	800ca72 <_ungetc_r+0x30>
 800ca66:	89a3      	ldrh	r3, [r4, #12]
 800ca68:	0598      	lsls	r0, r3, #22
 800ca6a:	d402      	bmi.n	800ca72 <_ungetc_r+0x30>
 800ca6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca6e:	f7fe fe4a 	bl	800b706 <__retarget_lock_acquire_recursive>
 800ca72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca76:	f023 0320 	bic.w	r3, r3, #32
 800ca7a:	0759      	lsls	r1, r3, #29
 800ca7c:	81a3      	strh	r3, [r4, #12]
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	d423      	bmi.n	800caca <_ungetc_r+0x88>
 800ca82:	06d3      	lsls	r3, r2, #27
 800ca84:	d409      	bmi.n	800ca9a <_ungetc_r+0x58>
 800ca86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca88:	07dd      	lsls	r5, r3, #31
 800ca8a:	d4e0      	bmi.n	800ca4e <_ungetc_r+0xc>
 800ca8c:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ca90:	d1dd      	bne.n	800ca4e <_ungetc_r+0xc>
 800ca92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca94:	f7fe fe38 	bl	800b708 <__retarget_lock_release_recursive>
 800ca98:	e7d9      	b.n	800ca4e <_ungetc_r+0xc>
 800ca9a:	0710      	lsls	r0, r2, #28
 800ca9c:	d511      	bpl.n	800cac2 <_ungetc_r+0x80>
 800ca9e:	4621      	mov	r1, r4
 800caa0:	4630      	mov	r0, r6
 800caa2:	f7ff fe4b 	bl	800c73c <_fflush_r>
 800caa6:	b130      	cbz	r0, 800cab6 <_ungetc_r+0x74>
 800caa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800caaa:	07d9      	lsls	r1, r3, #31
 800caac:	d4cf      	bmi.n	800ca4e <_ungetc_r+0xc>
 800caae:	89a3      	ldrh	r3, [r4, #12]
 800cab0:	f413 7f00 	tst.w	r3, #512	; 0x200
 800cab4:	e7ec      	b.n	800ca90 <_ungetc_r+0x4e>
 800cab6:	89a3      	ldrh	r3, [r4, #12]
 800cab8:	60a0      	str	r0, [r4, #8]
 800caba:	f023 0308 	bic.w	r3, r3, #8
 800cabe:	81a3      	strh	r3, [r4, #12]
 800cac0:	61a0      	str	r0, [r4, #24]
 800cac2:	89a3      	ldrh	r3, [r4, #12]
 800cac4:	f043 0304 	orr.w	r3, r3, #4
 800cac8:	81a3      	strh	r3, [r4, #12]
 800caca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cacc:	6862      	ldr	r2, [r4, #4]
 800cace:	b2ed      	uxtb	r5, r5
 800cad0:	b1d3      	cbz	r3, 800cb08 <_ungetc_r+0xc6>
 800cad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cad4:	4293      	cmp	r3, r2
 800cad6:	dc05      	bgt.n	800cae4 <_ungetc_r+0xa2>
 800cad8:	4621      	mov	r1, r4
 800cada:	4630      	mov	r0, r6
 800cadc:	f7ff ff77 	bl	800c9ce <__submore>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	d1e1      	bne.n	800caa8 <_ungetc_r+0x66>
 800cae4:	6823      	ldr	r3, [r4, #0]
 800cae6:	1e5a      	subs	r2, r3, #1
 800cae8:	6022      	str	r2, [r4, #0]
 800caea:	f803 5c01 	strb.w	r5, [r3, #-1]
 800caee:	6863      	ldr	r3, [r4, #4]
 800caf0:	3301      	adds	r3, #1
 800caf2:	6063      	str	r3, [r4, #4]
 800caf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800caf6:	07da      	lsls	r2, r3, #31
 800caf8:	d4ab      	bmi.n	800ca52 <_ungetc_r+0x10>
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	059b      	lsls	r3, r3, #22
 800cafe:	d4a8      	bmi.n	800ca52 <_ungetc_r+0x10>
 800cb00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb02:	f7fe fe01 	bl	800b708 <__retarget_lock_release_recursive>
 800cb06:	e7a4      	b.n	800ca52 <_ungetc_r+0x10>
 800cb08:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800cb0a:	6920      	ldr	r0, [r4, #16]
 800cb0c:	6823      	ldr	r3, [r4, #0]
 800cb0e:	f001 0101 	and.w	r1, r1, #1
 800cb12:	b160      	cbz	r0, 800cb2e <_ungetc_r+0xec>
 800cb14:	4298      	cmp	r0, r3
 800cb16:	d20a      	bcs.n	800cb2e <_ungetc_r+0xec>
 800cb18:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800cb1c:	42a8      	cmp	r0, r5
 800cb1e:	d106      	bne.n	800cb2e <_ungetc_r+0xec>
 800cb20:	3b01      	subs	r3, #1
 800cb22:	3201      	adds	r2, #1
 800cb24:	6023      	str	r3, [r4, #0]
 800cb26:	6062      	str	r2, [r4, #4]
 800cb28:	2900      	cmp	r1, #0
 800cb2a:	d192      	bne.n	800ca52 <_ungetc_r+0x10>
 800cb2c:	e7e5      	b.n	800cafa <_ungetc_r+0xb8>
 800cb2e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cb32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb36:	6363      	str	r3, [r4, #52]	; 0x34
 800cb38:	2303      	movs	r3, #3
 800cb3a:	63a3      	str	r3, [r4, #56]	; 0x38
 800cb3c:	4623      	mov	r3, r4
 800cb3e:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cb42:	6023      	str	r3, [r4, #0]
 800cb44:	2301      	movs	r3, #1
 800cb46:	6063      	str	r3, [r4, #4]
 800cb48:	e7ee      	b.n	800cb28 <_ungetc_r+0xe6>

0800cb4a <memmove>:
 800cb4a:	4288      	cmp	r0, r1
 800cb4c:	b510      	push	{r4, lr}
 800cb4e:	eb01 0402 	add.w	r4, r1, r2
 800cb52:	d902      	bls.n	800cb5a <memmove+0x10>
 800cb54:	4284      	cmp	r4, r0
 800cb56:	4623      	mov	r3, r4
 800cb58:	d807      	bhi.n	800cb6a <memmove+0x20>
 800cb5a:	1e43      	subs	r3, r0, #1
 800cb5c:	42a1      	cmp	r1, r4
 800cb5e:	d008      	beq.n	800cb72 <memmove+0x28>
 800cb60:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb64:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb68:	e7f8      	b.n	800cb5c <memmove+0x12>
 800cb6a:	4402      	add	r2, r0
 800cb6c:	4601      	mov	r1, r0
 800cb6e:	428a      	cmp	r2, r1
 800cb70:	d100      	bne.n	800cb74 <memmove+0x2a>
 800cb72:	bd10      	pop	{r4, pc}
 800cb74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb78:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb7c:	e7f7      	b.n	800cb6e <memmove+0x24>
	...

0800cb80 <_fstat_r>:
 800cb80:	b538      	push	{r3, r4, r5, lr}
 800cb82:	4d07      	ldr	r5, [pc, #28]	; (800cba0 <_fstat_r+0x20>)
 800cb84:	2300      	movs	r3, #0
 800cb86:	4604      	mov	r4, r0
 800cb88:	4608      	mov	r0, r1
 800cb8a:	4611      	mov	r1, r2
 800cb8c:	602b      	str	r3, [r5, #0]
 800cb8e:	f7f4 fdb3 	bl	80016f8 <_fstat>
 800cb92:	1c43      	adds	r3, r0, #1
 800cb94:	d102      	bne.n	800cb9c <_fstat_r+0x1c>
 800cb96:	682b      	ldr	r3, [r5, #0]
 800cb98:	b103      	cbz	r3, 800cb9c <_fstat_r+0x1c>
 800cb9a:	6023      	str	r3, [r4, #0]
 800cb9c:	bd38      	pop	{r3, r4, r5, pc}
 800cb9e:	bf00      	nop
 800cba0:	20003a04 	.word	0x20003a04

0800cba4 <_isatty_r>:
 800cba4:	b538      	push	{r3, r4, r5, lr}
 800cba6:	4d06      	ldr	r5, [pc, #24]	; (800cbc0 <_isatty_r+0x1c>)
 800cba8:	2300      	movs	r3, #0
 800cbaa:	4604      	mov	r4, r0
 800cbac:	4608      	mov	r0, r1
 800cbae:	602b      	str	r3, [r5, #0]
 800cbb0:	f7f4 fd10 	bl	80015d4 <_isatty>
 800cbb4:	1c43      	adds	r3, r0, #1
 800cbb6:	d102      	bne.n	800cbbe <_isatty_r+0x1a>
 800cbb8:	682b      	ldr	r3, [r5, #0]
 800cbba:	b103      	cbz	r3, 800cbbe <_isatty_r+0x1a>
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	bd38      	pop	{r3, r4, r5, pc}
 800cbc0:	20003a04 	.word	0x20003a04

0800cbc4 <_realloc_r>:
 800cbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc8:	4680      	mov	r8, r0
 800cbca:	4614      	mov	r4, r2
 800cbcc:	460e      	mov	r6, r1
 800cbce:	b921      	cbnz	r1, 800cbda <_realloc_r+0x16>
 800cbd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	f7fe b8f5 	b.w	800adc4 <_malloc_r>
 800cbda:	b92a      	cbnz	r2, 800cbe8 <_realloc_r+0x24>
 800cbdc:	f7fe fdac 	bl	800b738 <_free_r>
 800cbe0:	4625      	mov	r5, r4
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe8:	f000 f890 	bl	800cd0c <_malloc_usable_size_r>
 800cbec:	4284      	cmp	r4, r0
 800cbee:	4607      	mov	r7, r0
 800cbf0:	d802      	bhi.n	800cbf8 <_realloc_r+0x34>
 800cbf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbf6:	d812      	bhi.n	800cc1e <_realloc_r+0x5a>
 800cbf8:	4621      	mov	r1, r4
 800cbfa:	4640      	mov	r0, r8
 800cbfc:	f7fe f8e2 	bl	800adc4 <_malloc_r>
 800cc00:	4605      	mov	r5, r0
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d0ed      	beq.n	800cbe2 <_realloc_r+0x1e>
 800cc06:	42bc      	cmp	r4, r7
 800cc08:	4622      	mov	r2, r4
 800cc0a:	4631      	mov	r1, r6
 800cc0c:	bf28      	it	cs
 800cc0e:	463a      	movcs	r2, r7
 800cc10:	f7fe fd83 	bl	800b71a <memcpy>
 800cc14:	4631      	mov	r1, r6
 800cc16:	4640      	mov	r0, r8
 800cc18:	f7fe fd8e 	bl	800b738 <_free_r>
 800cc1c:	e7e1      	b.n	800cbe2 <_realloc_r+0x1e>
 800cc1e:	4635      	mov	r5, r6
 800cc20:	e7df      	b.n	800cbe2 <_realloc_r+0x1e>
	...

0800cc24 <_strtoul_l.constprop.0>:
 800cc24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc28:	4f36      	ldr	r7, [pc, #216]	; (800cd04 <_strtoul_l.constprop.0+0xe0>)
 800cc2a:	4686      	mov	lr, r0
 800cc2c:	460d      	mov	r5, r1
 800cc2e:	4628      	mov	r0, r5
 800cc30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc34:	5d3e      	ldrb	r6, [r7, r4]
 800cc36:	f016 0608 	ands.w	r6, r6, #8
 800cc3a:	d1f8      	bne.n	800cc2e <_strtoul_l.constprop.0+0xa>
 800cc3c:	2c2d      	cmp	r4, #45	; 0x2d
 800cc3e:	d130      	bne.n	800cca2 <_strtoul_l.constprop.0+0x7e>
 800cc40:	782c      	ldrb	r4, [r5, #0]
 800cc42:	2601      	movs	r6, #1
 800cc44:	1c85      	adds	r5, r0, #2
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d057      	beq.n	800ccfa <_strtoul_l.constprop.0+0xd6>
 800cc4a:	2b10      	cmp	r3, #16
 800cc4c:	d109      	bne.n	800cc62 <_strtoul_l.constprop.0+0x3e>
 800cc4e:	2c30      	cmp	r4, #48	; 0x30
 800cc50:	d107      	bne.n	800cc62 <_strtoul_l.constprop.0+0x3e>
 800cc52:	7828      	ldrb	r0, [r5, #0]
 800cc54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cc58:	2858      	cmp	r0, #88	; 0x58
 800cc5a:	d149      	bne.n	800ccf0 <_strtoul_l.constprop.0+0xcc>
 800cc5c:	786c      	ldrb	r4, [r5, #1]
 800cc5e:	2310      	movs	r3, #16
 800cc60:	3502      	adds	r5, #2
 800cc62:	f04f 38ff 	mov.w	r8, #4294967295
 800cc66:	2700      	movs	r7, #0
 800cc68:	fbb8 f8f3 	udiv	r8, r8, r3
 800cc6c:	fb03 f908 	mul.w	r9, r3, r8
 800cc70:	ea6f 0909 	mvn.w	r9, r9
 800cc74:	4638      	mov	r0, r7
 800cc76:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cc7a:	f1bc 0f09 	cmp.w	ip, #9
 800cc7e:	d815      	bhi.n	800ccac <_strtoul_l.constprop.0+0x88>
 800cc80:	4664      	mov	r4, ip
 800cc82:	42a3      	cmp	r3, r4
 800cc84:	dd23      	ble.n	800ccce <_strtoul_l.constprop.0+0xaa>
 800cc86:	f1b7 3fff 	cmp.w	r7, #4294967295
 800cc8a:	d007      	beq.n	800cc9c <_strtoul_l.constprop.0+0x78>
 800cc8c:	4580      	cmp	r8, r0
 800cc8e:	d31b      	bcc.n	800ccc8 <_strtoul_l.constprop.0+0xa4>
 800cc90:	d101      	bne.n	800cc96 <_strtoul_l.constprop.0+0x72>
 800cc92:	45a1      	cmp	r9, r4
 800cc94:	db18      	blt.n	800ccc8 <_strtoul_l.constprop.0+0xa4>
 800cc96:	fb00 4003 	mla	r0, r0, r3, r4
 800cc9a:	2701      	movs	r7, #1
 800cc9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cca0:	e7e9      	b.n	800cc76 <_strtoul_l.constprop.0+0x52>
 800cca2:	2c2b      	cmp	r4, #43	; 0x2b
 800cca4:	bf04      	itt	eq
 800cca6:	782c      	ldrbeq	r4, [r5, #0]
 800cca8:	1c85      	addeq	r5, r0, #2
 800ccaa:	e7cc      	b.n	800cc46 <_strtoul_l.constprop.0+0x22>
 800ccac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ccb0:	f1bc 0f19 	cmp.w	ip, #25
 800ccb4:	d801      	bhi.n	800ccba <_strtoul_l.constprop.0+0x96>
 800ccb6:	3c37      	subs	r4, #55	; 0x37
 800ccb8:	e7e3      	b.n	800cc82 <_strtoul_l.constprop.0+0x5e>
 800ccba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ccbe:	f1bc 0f19 	cmp.w	ip, #25
 800ccc2:	d804      	bhi.n	800ccce <_strtoul_l.constprop.0+0xaa>
 800ccc4:	3c57      	subs	r4, #87	; 0x57
 800ccc6:	e7dc      	b.n	800cc82 <_strtoul_l.constprop.0+0x5e>
 800ccc8:	f04f 37ff 	mov.w	r7, #4294967295
 800cccc:	e7e6      	b.n	800cc9c <_strtoul_l.constprop.0+0x78>
 800ccce:	1c7b      	adds	r3, r7, #1
 800ccd0:	d106      	bne.n	800cce0 <_strtoul_l.constprop.0+0xbc>
 800ccd2:	2322      	movs	r3, #34	; 0x22
 800ccd4:	f8ce 3000 	str.w	r3, [lr]
 800ccd8:	4638      	mov	r0, r7
 800ccda:	b932      	cbnz	r2, 800ccea <_strtoul_l.constprop.0+0xc6>
 800ccdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cce0:	b106      	cbz	r6, 800cce4 <_strtoul_l.constprop.0+0xc0>
 800cce2:	4240      	negs	r0, r0
 800cce4:	2a00      	cmp	r2, #0
 800cce6:	d0f9      	beq.n	800ccdc <_strtoul_l.constprop.0+0xb8>
 800cce8:	b107      	cbz	r7, 800ccec <_strtoul_l.constprop.0+0xc8>
 800ccea:	1e69      	subs	r1, r5, #1
 800ccec:	6011      	str	r1, [r2, #0]
 800ccee:	e7f5      	b.n	800ccdc <_strtoul_l.constprop.0+0xb8>
 800ccf0:	2430      	movs	r4, #48	; 0x30
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1b5      	bne.n	800cc62 <_strtoul_l.constprop.0+0x3e>
 800ccf6:	2308      	movs	r3, #8
 800ccf8:	e7b3      	b.n	800cc62 <_strtoul_l.constprop.0+0x3e>
 800ccfa:	2c30      	cmp	r4, #48	; 0x30
 800ccfc:	d0a9      	beq.n	800cc52 <_strtoul_l.constprop.0+0x2e>
 800ccfe:	230a      	movs	r3, #10
 800cd00:	e7af      	b.n	800cc62 <_strtoul_l.constprop.0+0x3e>
 800cd02:	bf00      	nop
 800cd04:	08014dc9 	.word	0x08014dc9

0800cd08 <_strtoul_r>:
 800cd08:	f7ff bf8c 	b.w	800cc24 <_strtoul_l.constprop.0>

0800cd0c <_malloc_usable_size_r>:
 800cd0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd10:	1f18      	subs	r0, r3, #4
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	bfbc      	itt	lt
 800cd16:	580b      	ldrlt	r3, [r1, r0]
 800cd18:	18c0      	addlt	r0, r0, r3
 800cd1a:	4770      	bx	lr
 800cd1c:	0000      	movs	r0, r0
	...

0800cd20 <sqrt>:
 800cd20:	b508      	push	{r3, lr}
 800cd22:	ed2d 8b04 	vpush	{d8-d9}
 800cd26:	eeb0 8b40 	vmov.f64	d8, d0
 800cd2a:	f000 fc05 	bl	800d538 <__ieee754_sqrt>
 800cd2e:	eeb4 8b48 	vcmp.f64	d8, d8
 800cd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd36:	d60c      	bvs.n	800cd52 <sqrt+0x32>
 800cd38:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800cd58 <sqrt+0x38>
 800cd3c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800cd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd44:	d505      	bpl.n	800cd52 <sqrt+0x32>
 800cd46:	f7fe fcb3 	bl	800b6b0 <__errno>
 800cd4a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800cd4e:	2321      	movs	r3, #33	; 0x21
 800cd50:	6003      	str	r3, [r0, #0]
 800cd52:	ecbd 8b04 	vpop	{d8-d9}
 800cd56:	bd08      	pop	{r3, pc}
	...

0800cd60 <with_errno>:
 800cd60:	b513      	push	{r0, r1, r4, lr}
 800cd62:	4604      	mov	r4, r0
 800cd64:	ed8d 0b00 	vstr	d0, [sp]
 800cd68:	f7fe fca2 	bl	800b6b0 <__errno>
 800cd6c:	ed9d 0b00 	vldr	d0, [sp]
 800cd70:	6004      	str	r4, [r0, #0]
 800cd72:	b002      	add	sp, #8
 800cd74:	bd10      	pop	{r4, pc}

0800cd76 <xflow>:
 800cd76:	b082      	sub	sp, #8
 800cd78:	b158      	cbz	r0, 800cd92 <xflow+0x1c>
 800cd7a:	eeb1 7b40 	vneg.f64	d7, d0
 800cd7e:	ed8d 7b00 	vstr	d7, [sp]
 800cd82:	ed9d 7b00 	vldr	d7, [sp]
 800cd86:	2022      	movs	r0, #34	; 0x22
 800cd88:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cd8c:	b002      	add	sp, #8
 800cd8e:	f7ff bfe7 	b.w	800cd60 <with_errno>
 800cd92:	eeb0 7b40 	vmov.f64	d7, d0
 800cd96:	e7f2      	b.n	800cd7e <xflow+0x8>

0800cd98 <__math_uflow>:
 800cd98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cda0 <__math_uflow+0x8>
 800cd9c:	f7ff bfeb 	b.w	800cd76 <xflow>
 800cda0:	00000000 	.word	0x00000000
 800cda4:	10000000 	.word	0x10000000

0800cda8 <__math_oflow>:
 800cda8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cdb0 <__math_oflow+0x8>
 800cdac:	f7ff bfe3 	b.w	800cd76 <xflow>
 800cdb0:	00000000 	.word	0x00000000
 800cdb4:	70000000 	.word	0x70000000

0800cdb8 <__math_divzero>:
 800cdb8:	b082      	sub	sp, #8
 800cdba:	2800      	cmp	r0, #0
 800cdbc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cdc0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800cdc4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800cdc8:	ed8d 7b00 	vstr	d7, [sp]
 800cdcc:	ed9d 0b00 	vldr	d0, [sp]
 800cdd0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800cde0 <__math_divzero+0x28>
 800cdd4:	2022      	movs	r0, #34	; 0x22
 800cdd6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800cdda:	b002      	add	sp, #8
 800cddc:	f7ff bfc0 	b.w	800cd60 <with_errno>
	...

0800cde8 <__math_invalid>:
 800cde8:	eeb0 7b40 	vmov.f64	d7, d0
 800cdec:	eeb4 7b47 	vcmp.f64	d7, d7
 800cdf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800cdf8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800cdfc:	d602      	bvs.n	800ce04 <__math_invalid+0x1c>
 800cdfe:	2021      	movs	r0, #33	; 0x21
 800ce00:	f7ff bfae 	b.w	800cd60 <with_errno>
 800ce04:	4770      	bx	lr

0800ce06 <__math_check_uflow>:
 800ce06:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ce0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce0e:	d102      	bne.n	800ce16 <__math_check_uflow+0x10>
 800ce10:	2022      	movs	r0, #34	; 0x22
 800ce12:	f7ff bfa5 	b.w	800cd60 <with_errno>
 800ce16:	4770      	bx	lr

0800ce18 <__math_check_oflow>:
 800ce18:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800ce38 <__math_check_oflow+0x20>
 800ce1c:	eeb0 7bc0 	vabs.f64	d7, d0
 800ce20:	eeb4 7b46 	vcmp.f64	d7, d6
 800ce24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce28:	dd02      	ble.n	800ce30 <__math_check_oflow+0x18>
 800ce2a:	2022      	movs	r0, #34	; 0x22
 800ce2c:	f7ff bf98 	b.w	800cd60 <with_errno>
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	f3af 8000 	nop.w
 800ce38:	ffffffff 	.word	0xffffffff
 800ce3c:	7fefffff 	.word	0x7fefffff

0800ce40 <log>:
 800ce40:	b470      	push	{r4, r5, r6}
 800ce42:	ee10 1a90 	vmov	r1, s1
 800ce46:	ee10 3a10 	vmov	r3, s0
 800ce4a:	f04f 34ff 	mov.w	r4, #4294967295
 800ce4e:	429c      	cmp	r4, r3
 800ce50:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 800ce54:	4c72      	ldr	r4, [pc, #456]	; (800d020 <log+0x1e0>)
 800ce56:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 800ce5a:	4184      	sbcs	r4, r0
 800ce5c:	ed2d 8b02 	vpush	{d8}
 800ce60:	ea4f 4211 	mov.w	r2, r1, lsr #16
 800ce64:	d35a      	bcc.n	800cf1c <log+0xdc>
 800ce66:	4a6f      	ldr	r2, [pc, #444]	; (800d024 <log+0x1e4>)
 800ce68:	4291      	cmp	r1, r2
 800ce6a:	bf08      	it	eq
 800ce6c:	2b00      	cmpeq	r3, #0
 800ce6e:	f000 80c5 	beq.w	800cffc <log+0x1bc>
 800ce72:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ce76:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ce7a:	4b6b      	ldr	r3, [pc, #428]	; (800d028 <log+0x1e8>)
 800ce7c:	ee20 2b00 	vmul.f64	d2, d0, d0
 800ce80:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800ce84:	ee20 4b02 	vmul.f64	d4, d0, d2
 800ce88:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800ce8c:	eea6 7b00 	vfma.f64	d7, d6, d0
 800ce90:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800ce94:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800ce98:	eea6 7b02 	vfma.f64	d7, d6, d2
 800ce9c:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800cea0:	eea5 6b00 	vfma.f64	d6, d5, d0
 800cea4:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800cea8:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 800ceac:	eea5 6b02 	vfma.f64	d6, d5, d2
 800ceb0:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 800ceb4:	eea3 5b00 	vfma.f64	d5, d3, d0
 800ceb8:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 800cebc:	eea3 5b02 	vfma.f64	d5, d3, d2
 800cec0:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 800cec4:	eea3 5b04 	vfma.f64	d5, d3, d4
 800cec8:	eea5 6b04 	vfma.f64	d6, d5, d4
 800cecc:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 800ced0:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ced4:	eeb0 2b47 	vmov.f64	d2, d7
 800ced8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d008 <log+0x1c8>
 800cedc:	eeb0 6b40 	vmov.f64	d6, d0
 800cee0:	eeb0 3b40 	vmov.f64	d3, d0
 800cee4:	eea0 6b07 	vfma.f64	d6, d0, d7
 800cee8:	eea0 6b47 	vfms.f64	d6, d0, d7
 800ceec:	ee30 8b46 	vsub.f64	d8, d0, d6
 800cef0:	ee26 1b06 	vmul.f64	d1, d6, d6
 800cef4:	eea1 3b05 	vfma.f64	d3, d1, d5
 800cef8:	ee30 7b43 	vsub.f64	d7, d0, d3
 800cefc:	ee30 0b06 	vadd.f64	d0, d0, d6
 800cf00:	eea1 7b05 	vfma.f64	d7, d1, d5
 800cf04:	ee25 5b08 	vmul.f64	d5, d5, d8
 800cf08:	eea5 7b00 	vfma.f64	d7, d5, d0
 800cf0c:	eea2 7b04 	vfma.f64	d7, d2, d4
 800cf10:	ee33 0b07 	vadd.f64	d0, d3, d7
 800cf14:	ecbd 8b02 	vpop	{d8}
 800cf18:	bc70      	pop	{r4, r5, r6}
 800cf1a:	4770      	bx	lr
 800cf1c:	f1a2 0410 	sub.w	r4, r2, #16
 800cf20:	f647 70df 	movw	r0, #32735	; 0x7fdf
 800cf24:	4284      	cmp	r4, r0
 800cf26:	d924      	bls.n	800cf72 <log+0x132>
 800cf28:	18d8      	adds	r0, r3, r3
 800cf2a:	eb41 0401 	adc.w	r4, r1, r1
 800cf2e:	4320      	orrs	r0, r4
 800cf30:	d105      	bne.n	800cf3e <log+0xfe>
 800cf32:	ecbd 8b02 	vpop	{d8}
 800cf36:	2001      	movs	r0, #1
 800cf38:	bc70      	pop	{r4, r5, r6}
 800cf3a:	f7ff bf3d 	b.w	800cdb8 <__math_divzero>
 800cf3e:	483b      	ldr	r0, [pc, #236]	; (800d02c <log+0x1ec>)
 800cf40:	4281      	cmp	r1, r0
 800cf42:	bf08      	it	eq
 800cf44:	2b00      	cmpeq	r3, #0
 800cf46:	d0e5      	beq.n	800cf14 <log+0xd4>
 800cf48:	0413      	lsls	r3, r2, #16
 800cf4a:	d403      	bmi.n	800cf54 <log+0x114>
 800cf4c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800cf50:	4393      	bics	r3, r2
 800cf52:	d104      	bne.n	800cf5e <log+0x11e>
 800cf54:	ecbd 8b02 	vpop	{d8}
 800cf58:	bc70      	pop	{r4, r5, r6}
 800cf5a:	f7ff bf45 	b.w	800cde8 <__math_invalid>
 800cf5e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800d010 <log+0x1d0>
 800cf62:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cf66:	ec53 2b17 	vmov	r2, r3, d7
 800cf6a:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 800cf6e:	ee17 3a10 	vmov	r3, s14
 800cf72:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800cf76:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800cf7a:	f502 12d0 	add.w	r2, r2, #1703936	; 0x1a0000
 800cf7e:	0d16      	lsrs	r6, r2, #20
 800cf80:	1e1c      	subs	r4, r3, #0
 800cf82:	4b29      	ldr	r3, [pc, #164]	; (800d028 <log+0x1e8>)
 800cf84:	f3c2 3046 	ubfx	r0, r2, #13, #7
 800cf88:	0536      	lsls	r6, r6, #20
 800cf8a:	1b8d      	subs	r5, r1, r6
 800cf8c:	eb03 1100 	add.w	r1, r3, r0, lsl #4
 800cf90:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 800cf94:	ec45 4b16 	vmov	d6, r4, r5
 800cf98:	1512      	asrs	r2, r2, #20
 800cf9a:	eea6 5b07 	vfma.f64	d5, d6, d7
 800cf9e:	ee07 2a90 	vmov	s15, r2
 800cfa2:	ee25 2b05 	vmul.f64	d2, d5, d5
 800cfa6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800cfaa:	ed93 4b00 	vldr	d4, [r3]
 800cfae:	ee25 1b02 	vmul.f64	d1, d5, d2
 800cfb2:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 800cfb6:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cfba:	ee35 4b07 	vadd.f64	d4, d5, d7
 800cfbe:	ee37 0b44 	vsub.f64	d0, d7, d4
 800cfc2:	ed93 7b02 	vldr	d7, [r3, #8]
 800cfc6:	ee30 0b05 	vadd.f64	d0, d0, d5
 800cfca:	eea7 0b06 	vfma.f64	d0, d7, d6
 800cfce:	ed93 7b04 	vldr	d7, [r3, #16]
 800cfd2:	ed93 6b08 	vldr	d6, [r3, #32]
 800cfd6:	eea7 0b02 	vfma.f64	d0, d7, d2
 800cfda:	ed93 7b06 	vldr	d7, [r3, #24]
 800cfde:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800cfe2:	eea6 7b05 	vfma.f64	d7, d6, d5
 800cfe6:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800cfea:	eea3 6b05 	vfma.f64	d6, d3, d5
 800cfee:	eea6 7b02 	vfma.f64	d7, d6, d2
 800cff2:	eea1 0b07 	vfma.f64	d0, d1, d7
 800cff6:	ee30 0b04 	vadd.f64	d0, d0, d4
 800cffa:	e78b      	b.n	800cf14 <log+0xd4>
 800cffc:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800d018 <log+0x1d8>
 800d000:	e788      	b.n	800cf14 <log+0xd4>
 800d002:	bf00      	nop
 800d004:	f3af 8000 	nop.w
 800d008:	00000000 	.word	0x00000000
 800d00c:	41a00000 	.word	0x41a00000
 800d010:	00000000 	.word	0x00000000
 800d014:	43300000 	.word	0x43300000
	...
 800d020:	000308ff 	.word	0x000308ff
 800d024:	3ff00000 	.word	0x3ff00000
 800d028:	08015788 	.word	0x08015788
 800d02c:	7ff00000 	.word	0x7ff00000

0800d030 <checkint>:
 800d030:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d034:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800d038:	429a      	cmp	r2, r3
 800d03a:	b570      	push	{r4, r5, r6, lr}
 800d03c:	dd2a      	ble.n	800d094 <checkint+0x64>
 800d03e:	f240 4333 	movw	r3, #1075	; 0x433
 800d042:	429a      	cmp	r2, r3
 800d044:	dc24      	bgt.n	800d090 <checkint+0x60>
 800d046:	1a9b      	subs	r3, r3, r2
 800d048:	f1a3 0620 	sub.w	r6, r3, #32
 800d04c:	f04f 32ff 	mov.w	r2, #4294967295
 800d050:	fa02 f403 	lsl.w	r4, r2, r3
 800d054:	fa02 f606 	lsl.w	r6, r2, r6
 800d058:	f1c3 0520 	rsb	r5, r3, #32
 800d05c:	fa22 f505 	lsr.w	r5, r2, r5
 800d060:	4334      	orrs	r4, r6
 800d062:	432c      	orrs	r4, r5
 800d064:	409a      	lsls	r2, r3
 800d066:	ea20 0202 	bic.w	r2, r0, r2
 800d06a:	ea21 0404 	bic.w	r4, r1, r4
 800d06e:	4322      	orrs	r2, r4
 800d070:	f1a3 0420 	sub.w	r4, r3, #32
 800d074:	f1c3 0220 	rsb	r2, r3, #32
 800d078:	d10c      	bne.n	800d094 <checkint+0x64>
 800d07a:	40d8      	lsrs	r0, r3
 800d07c:	fa01 f302 	lsl.w	r3, r1, r2
 800d080:	4318      	orrs	r0, r3
 800d082:	40e1      	lsrs	r1, r4
 800d084:	4308      	orrs	r0, r1
 800d086:	f000 0001 	and.w	r0, r0, #1
 800d08a:	f1d0 0002 	rsbs	r0, r0, #2
 800d08e:	bd70      	pop	{r4, r5, r6, pc}
 800d090:	2002      	movs	r0, #2
 800d092:	e7fc      	b.n	800d08e <checkint+0x5e>
 800d094:	2000      	movs	r0, #0
 800d096:	e7fa      	b.n	800d08e <checkint+0x5e>

0800d098 <pow>:
 800d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09c:	ee10 4a90 	vmov	r4, s1
 800d0a0:	ed2d 8b0a 	vpush	{d8-d12}
 800d0a4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800d0a8:	ee11 aa90 	vmov	sl, s3
 800d0ac:	f108 32ff 	add.w	r2, r8, #4294967295
 800d0b0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	ee10 5a10 	vmov	r5, s0
 800d0ba:	ee11 0a10 	vmov	r0, s2
 800d0be:	b087      	sub	sp, #28
 800d0c0:	46c4      	mov	ip, r8
 800d0c2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800d0c6:	d806      	bhi.n	800d0d6 <pow+0x3e>
 800d0c8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800d0cc:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800d0d0:	2b7f      	cmp	r3, #127	; 0x7f
 800d0d2:	f240 8156 	bls.w	800d382 <pow+0x2ea>
 800d0d6:	1802      	adds	r2, r0, r0
 800d0d8:	eb4a 010a 	adc.w	r1, sl, sl
 800d0dc:	f06f 0b01 	mvn.w	fp, #1
 800d0e0:	1e57      	subs	r7, r2, #1
 800d0e2:	f141 33ff 	adc.w	r3, r1, #4294967295
 800d0e6:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 800d0ea:	45bb      	cmp	fp, r7
 800d0ec:	eb7e 0303 	sbcs.w	r3, lr, r3
 800d0f0:	d242      	bcs.n	800d178 <pow+0xe0>
 800d0f2:	ea52 0301 	orrs.w	r3, r2, r1
 800d0f6:	f04f 0300 	mov.w	r3, #0
 800d0fa:	d10c      	bne.n	800d116 <pow+0x7e>
 800d0fc:	196d      	adds	r5, r5, r5
 800d0fe:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800d102:	4164      	adcs	r4, r4
 800d104:	42ab      	cmp	r3, r5
 800d106:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d10a:	41a3      	sbcs	r3, r4
 800d10c:	f0c0 808f 	bcc.w	800d22e <pow+0x196>
 800d110:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d114:	e02b      	b.n	800d16e <pow+0xd6>
 800d116:	4ed4      	ldr	r6, [pc, #848]	; (800d468 <pow+0x3d0>)
 800d118:	42b4      	cmp	r4, r6
 800d11a:	bf08      	it	eq
 800d11c:	429d      	cmpeq	r5, r3
 800d11e:	d109      	bne.n	800d134 <pow+0x9c>
 800d120:	1800      	adds	r0, r0, r0
 800d122:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 800d126:	eb4a 0a0a 	adc.w	sl, sl, sl
 800d12a:	4283      	cmp	r3, r0
 800d12c:	4bcf      	ldr	r3, [pc, #828]	; (800d46c <pow+0x3d4>)
 800d12e:	eb73 030a 	sbcs.w	r3, r3, sl
 800d132:	e7eb      	b.n	800d10c <pow+0x74>
 800d134:	196d      	adds	r5, r5, r5
 800d136:	48ce      	ldr	r0, [pc, #824]	; (800d470 <pow+0x3d8>)
 800d138:	4164      	adcs	r4, r4
 800d13a:	42ab      	cmp	r3, r5
 800d13c:	eb70 0604 	sbcs.w	r6, r0, r4
 800d140:	d375      	bcc.n	800d22e <pow+0x196>
 800d142:	4281      	cmp	r1, r0
 800d144:	bf08      	it	eq
 800d146:	429a      	cmpeq	r2, r3
 800d148:	d171      	bne.n	800d22e <pow+0x196>
 800d14a:	4aca      	ldr	r2, [pc, #808]	; (800d474 <pow+0x3dc>)
 800d14c:	4294      	cmp	r4, r2
 800d14e:	bf08      	it	eq
 800d150:	429d      	cmpeq	r5, r3
 800d152:	d0dd      	beq.n	800d110 <pow+0x78>
 800d154:	4294      	cmp	r4, r2
 800d156:	ea6f 0a0a 	mvn.w	sl, sl
 800d15a:	bf34      	ite	cc
 800d15c:	2400      	movcc	r4, #0
 800d15e:	2401      	movcs	r4, #1
 800d160:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800d164:	4554      	cmp	r4, sl
 800d166:	f040 81dc 	bne.w	800d522 <pow+0x48a>
 800d16a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800d16e:	b007      	add	sp, #28
 800d170:	ecbd 8b0a 	vpop	{d8-d12}
 800d174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d178:	196f      	adds	r7, r5, r5
 800d17a:	eb44 0904 	adc.w	r9, r4, r4
 800d17e:	1e7a      	subs	r2, r7, #1
 800d180:	f169 0300 	sbc.w	r3, r9, #0
 800d184:	4593      	cmp	fp, r2
 800d186:	eb7e 0303 	sbcs.w	r3, lr, r3
 800d18a:	d225      	bcs.n	800d1d8 <pow+0x140>
 800d18c:	ee20 0b00 	vmul.f64	d0, d0, d0
 800d190:	2c00      	cmp	r4, #0
 800d192:	da13      	bge.n	800d1bc <pow+0x124>
 800d194:	4651      	mov	r1, sl
 800d196:	f7ff ff4b 	bl	800d030 <checkint>
 800d19a:	2801      	cmp	r0, #1
 800d19c:	d10e      	bne.n	800d1bc <pow+0x124>
 800d19e:	eeb1 0b40 	vneg.f64	d0, d0
 800d1a2:	ea57 0909 	orrs.w	r9, r7, r9
 800d1a6:	d10b      	bne.n	800d1c0 <pow+0x128>
 800d1a8:	f1ba 0f00 	cmp.w	sl, #0
 800d1ac:	dadf      	bge.n	800d16e <pow+0xd6>
 800d1ae:	b007      	add	sp, #28
 800d1b0:	ecbd 8b0a 	vpop	{d8-d12}
 800d1b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b8:	f7ff bdfe 	b.w	800cdb8 <__math_divzero>
 800d1bc:	2000      	movs	r0, #0
 800d1be:	e7f0      	b.n	800d1a2 <pow+0x10a>
 800d1c0:	f1ba 0f00 	cmp.w	sl, #0
 800d1c4:	dad3      	bge.n	800d16e <pow+0xd6>
 800d1c6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d1ca:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800d1ce:	ed8d 7b00 	vstr	d7, [sp]
 800d1d2:	ed9d 0b00 	vldr	d0, [sp]
 800d1d6:	e7ca      	b.n	800d16e <pow+0xd6>
 800d1d8:	2c00      	cmp	r4, #0
 800d1da:	da2b      	bge.n	800d234 <pow+0x19c>
 800d1dc:	4651      	mov	r1, sl
 800d1de:	f7ff ff27 	bl	800d030 <checkint>
 800d1e2:	b930      	cbnz	r0, 800d1f2 <pow+0x15a>
 800d1e4:	b007      	add	sp, #28
 800d1e6:	ecbd 8b0a 	vpop	{d8-d12}
 800d1ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ee:	f7ff bdfb 	b.w	800cde8 <__math_invalid>
 800d1f2:	1e41      	subs	r1, r0, #1
 800d1f4:	4248      	negs	r0, r1
 800d1f6:	4148      	adcs	r0, r1
 800d1f8:	0480      	lsls	r0, r0, #18
 800d1fa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d1fe:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800d202:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800d206:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800d20a:	2b7f      	cmp	r3, #127	; 0x7f
 800d20c:	d92d      	bls.n	800d26a <pow+0x1d2>
 800d20e:	4b96      	ldr	r3, [pc, #600]	; (800d468 <pow+0x3d0>)
 800d210:	2000      	movs	r0, #0
 800d212:	429c      	cmp	r4, r3
 800d214:	bf08      	it	eq
 800d216:	4285      	cmpeq	r5, r0
 800d218:	f43f af7a 	beq.w	800d110 <pow+0x78>
 800d21c:	f240 31bd 	movw	r1, #957	; 0x3bd
 800d220:	428a      	cmp	r2, r1
 800d222:	d80c      	bhi.n	800d23e <pow+0x1a6>
 800d224:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d228:	42a8      	cmp	r0, r5
 800d22a:	41a3      	sbcs	r3, r4
 800d22c:	d204      	bcs.n	800d238 <pow+0x1a0>
 800d22e:	ee31 0b00 	vadd.f64	d0, d1, d0
 800d232:	e79c      	b.n	800d16e <pow+0xd6>
 800d234:	2000      	movs	r0, #0
 800d236:	e7e4      	b.n	800d202 <pow+0x16a>
 800d238:	ee30 0b41 	vsub.f64	d0, d0, d1
 800d23c:	e797      	b.n	800d16e <pow+0xd6>
 800d23e:	2d01      	cmp	r5, #1
 800d240:	eb74 0303 	sbcs.w	r3, r4, r3
 800d244:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d248:	bf34      	ite	cc
 800d24a:	2301      	movcc	r3, #1
 800d24c:	2300      	movcs	r3, #0
 800d24e:	4296      	cmp	r6, r2
 800d250:	bf8c      	ite	hi
 800d252:	2600      	movhi	r6, #0
 800d254:	2601      	movls	r6, #1
 800d256:	42b3      	cmp	r3, r6
 800d258:	f000 809b 	beq.w	800d392 <pow+0x2fa>
 800d25c:	b007      	add	sp, #28
 800d25e:	ecbd 8b0a 	vpop	{d8-d12}
 800d262:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d266:	f7ff bd9f 	b.w	800cda8 <__math_oflow>
 800d26a:	f1bc 0f00 	cmp.w	ip, #0
 800d26e:	d10b      	bne.n	800d288 <pow+0x1f0>
 800d270:	ed9f 7b79 	vldr	d7, [pc, #484]	; 800d458 <pow+0x3c0>
 800d274:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d278:	ec53 2b17 	vmov	r2, r3, d7
 800d27c:	ee17 5a10 	vmov	r5, s14
 800d280:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d284:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800d288:	4b7b      	ldr	r3, [pc, #492]	; (800d478 <pow+0x3e0>)
 800d28a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d28e:	4423      	add	r3, r4
 800d290:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800d294:	1519      	asrs	r1, r3, #20
 800d296:	0d1b      	lsrs	r3, r3, #20
 800d298:	051b      	lsls	r3, r3, #20
 800d29a:	1ae7      	subs	r7, r4, r3
 800d29c:	4b77      	ldr	r3, [pc, #476]	; (800d47c <pow+0x3e4>)
 800d29e:	ee03 1a10 	vmov	s6, r1
 800d2a2:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800d2a6:	1e2e      	subs	r6, r5, #0
 800d2a8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800d2ac:	ec47 6b15 	vmov	d5, r6, r7
 800d2b0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800d2b4:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d2b8:	ed93 7b00 	vldr	d7, [r3]
 800d2bc:	ed93 5b02 	vldr	d5, [r3, #8]
 800d2c0:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800d2c4:	eea3 2b07 	vfma.f64	d2, d3, d7
 800d2c8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800d2cc:	ee36 4b02 	vadd.f64	d4, d6, d2
 800d2d0:	ee32 2b44 	vsub.f64	d2, d2, d4
 800d2d4:	eea3 7b05 	vfma.f64	d7, d3, d5
 800d2d8:	ed93 5b04 	vldr	d5, [r3, #16]
 800d2dc:	ee32 2b06 	vadd.f64	d2, d2, d6
 800d2e0:	ee37 7b02 	vadd.f64	d7, d7, d2
 800d2e4:	ee26 5b05 	vmul.f64	d5, d6, d5
 800d2e8:	ee26 0b05 	vmul.f64	d0, d6, d5
 800d2ec:	ee34 8b00 	vadd.f64	d8, d4, d0
 800d2f0:	eeb0 9b40 	vmov.f64	d9, d0
 800d2f4:	ee34 4b48 	vsub.f64	d4, d4, d8
 800d2f8:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800d2fc:	ee34 ab00 	vadd.f64	d10, d4, d0
 800d300:	ed93 5b06 	vldr	d5, [r3, #24]
 800d304:	ee26 bb00 	vmul.f64	d11, d6, d0
 800d308:	ee37 7b09 	vadd.f64	d7, d7, d9
 800d30c:	ed93 4b08 	vldr	d4, [r3, #32]
 800d310:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800d314:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800d318:	eea6 5b04 	vfma.f64	d5, d6, d4
 800d31c:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800d320:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800d324:	eea6 4b03 	vfma.f64	d4, d6, d3
 800d328:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800d32c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800d330:	eea0 4b03 	vfma.f64	d4, d0, d3
 800d334:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d338:	eeab 7b05 	vfma.f64	d7, d11, d5
 800d33c:	ee38 4b07 	vadd.f64	d4, d8, d7
 800d340:	ee21 6b04 	vmul.f64	d6, d1, d4
 800d344:	ee16 3a90 	vmov	r3, s13
 800d348:	eeb0 5b46 	vmov.f64	d5, d6
 800d34c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800d350:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800d354:	18b2      	adds	r2, r6, r2
 800d356:	2a3e      	cmp	r2, #62	; 0x3e
 800d358:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800d35c:	ee38 8b44 	vsub.f64	d8, d8, d4
 800d360:	ee38 8b07 	vadd.f64	d8, d8, d7
 800d364:	eea1 5b08 	vfma.f64	d5, d1, d8
 800d368:	d91b      	bls.n	800d3a2 <pow+0x30a>
 800d36a:	2a00      	cmp	r2, #0
 800d36c:	da0b      	bge.n	800d386 <pow+0x2ee>
 800d36e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d372:	ee36 0b00 	vadd.f64	d0, d6, d0
 800d376:	2800      	cmp	r0, #0
 800d378:	f43f aef9 	beq.w	800d16e <pow+0xd6>
 800d37c:	eeb1 0b40 	vneg.f64	d0, d0
 800d380:	e6f5      	b.n	800d16e <pow+0xd6>
 800d382:	2000      	movs	r0, #0
 800d384:	e780      	b.n	800d288 <pow+0x1f0>
 800d386:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800d38a:	d909      	bls.n	800d3a0 <pow+0x308>
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f6bf af65 	bge.w	800d25c <pow+0x1c4>
 800d392:	b007      	add	sp, #28
 800d394:	ecbd 8b0a 	vpop	{d8-d12}
 800d398:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39c:	f7ff bcfc 	b.w	800cd98 <__math_uflow>
 800d3a0:	2600      	movs	r6, #0
 800d3a2:	4937      	ldr	r1, [pc, #220]	; (800d480 <pow+0x3e8>)
 800d3a4:	ed91 4b02 	vldr	d4, [r1, #8]
 800d3a8:	ed91 3b00 	vldr	d3, [r1]
 800d3ac:	eeb0 7b44 	vmov.f64	d7, d4
 800d3b0:	eea6 7b03 	vfma.f64	d7, d6, d3
 800d3b4:	ee17 5a10 	vmov	r5, s14
 800d3b8:	ee37 7b44 	vsub.f64	d7, d7, d4
 800d3bc:	ed91 4b04 	vldr	d4, [r1, #16]
 800d3c0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800d3c4:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d3c8:	ed91 4b06 	vldr	d4, [r1, #24]
 800d3cc:	18dc      	adds	r4, r3, r3
 800d3ce:	f104 030f 	add.w	r3, r4, #15
 800d3d2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d3d6:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d3da:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 800d3de:	ee35 5b06 	vadd.f64	d5, d5, d6
 800d3e2:	ee25 6b05 	vmul.f64	d6, d5, d5
 800d3e6:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800d3ea:	ed91 4b08 	vldr	d4, [r1, #32]
 800d3ee:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d3f2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800d3f6:	eea5 4b03 	vfma.f64	d4, d5, d3
 800d3fa:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800d3fe:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d402:	ee26 6b06 	vmul.f64	d6, d6, d6
 800d406:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800d40a:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800d40e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800d412:	eea5 4b03 	vfma.f64	d4, d5, d3
 800d416:	1940      	adds	r0, r0, r5
 800d418:	2700      	movs	r7, #0
 800d41a:	eb17 020c 	adds.w	r2, r7, ip
 800d41e:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800d422:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d426:	2e00      	cmp	r6, #0
 800d428:	d176      	bne.n	800d518 <pow+0x480>
 800d42a:	42bd      	cmp	r5, r7
 800d42c:	db2a      	blt.n	800d484 <pow+0x3ec>
 800d42e:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800d432:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800d436:	4610      	mov	r0, r2
 800d438:	ec41 0b10 	vmov	d0, r0, r1
 800d43c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d440:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800d460 <pow+0x3c8>
 800d444:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d448:	b007      	add	sp, #28
 800d44a:	ecbd 8b0a 	vpop	{d8-d12}
 800d44e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d452:	f7ff bce1 	b.w	800ce18 <__math_check_oflow>
 800d456:	bf00      	nop
 800d458:	00000000 	.word	0x00000000
 800d45c:	43300000 	.word	0x43300000
 800d460:	00000000 	.word	0x00000000
 800d464:	7f000000 	.word	0x7f000000
 800d468:	3ff00000 	.word	0x3ff00000
 800d46c:	fff00000 	.word	0xfff00000
 800d470:	ffe00000 	.word	0xffe00000
 800d474:	7fe00000 	.word	0x7fe00000
 800d478:	c0196aab 	.word	0xc0196aab
 800d47c:	08016018 	.word	0x08016018
 800d480:	08014f18 	.word	0x08014f18
 800d484:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d488:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800d48c:	4610      	mov	r0, r2
 800d48e:	ec41 0b15 	vmov	d5, r0, r1
 800d492:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 800d496:	ee27 6b05 	vmul.f64	d6, d7, d5
 800d49a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800d49e:	eeb0 4bc7 	vabs.f64	d4, d7
 800d4a2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800d4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4aa:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800d528 <pow+0x490>
 800d4ae:	d52a      	bpl.n	800d506 <pow+0x46e>
 800d4b0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d4b4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4bc:	ee35 5b06 	vadd.f64	d5, d5, d6
 800d4c0:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800d4c4:	bf58      	it	pl
 800d4c6:	eeb0 4b43 	vmovpl.f64	d4, d3
 800d4ca:	ee37 3b04 	vadd.f64	d3, d7, d4
 800d4ce:	ee34 6b43 	vsub.f64	d6, d4, d3
 800d4d2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d4d6:	ee36 6b05 	vadd.f64	d6, d6, d5
 800d4da:	ee36 6b03 	vadd.f64	d6, d6, d3
 800d4de:	ee36 7b44 	vsub.f64	d7, d6, d4
 800d4e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ea:	d104      	bne.n	800d4f6 <pow+0x45e>
 800d4ec:	4632      	mov	r2, r6
 800d4ee:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d4f2:	ec43 2b17 	vmov	d7, r2, r3
 800d4f6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d4fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d4fe:	ee26 6b00 	vmul.f64	d6, d6, d0
 800d502:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d506:	ee27 0b00 	vmul.f64	d0, d7, d0
 800d50a:	b007      	add	sp, #28
 800d50c:	ecbd 8b0a 	vpop	{d8-d12}
 800d510:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	f7ff bc77 	b.w	800ce06 <__math_check_uflow>
 800d518:	ec43 2b10 	vmov	d0, r2, r3
 800d51c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d520:	e625      	b.n	800d16e <pow+0xd6>
 800d522:	ed9f 0b03 	vldr	d0, [pc, #12]	; 800d530 <pow+0x498>
 800d526:	e622      	b.n	800d16e <pow+0xd6>
 800d528:	00000000 	.word	0x00000000
 800d52c:	00100000 	.word	0x00100000
	...

0800d538 <__ieee754_sqrt>:
 800d538:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800d53c:	4770      	bx	lr
	...

0800d540 <ceil>:
 800d540:	ee10 1a90 	vmov	r1, s1
 800d544:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d548:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800d54c:	2b13      	cmp	r3, #19
 800d54e:	b530      	push	{r4, r5, lr}
 800d550:	ee10 0a10 	vmov	r0, s0
 800d554:	ee10 5a10 	vmov	r5, s0
 800d558:	dc2f      	bgt.n	800d5ba <ceil+0x7a>
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	da13      	bge.n	800d586 <ceil+0x46>
 800d55e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800d620 <ceil+0xe0>
 800d562:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d566:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d56e:	dd05      	ble.n	800d57c <ceil+0x3c>
 800d570:	2900      	cmp	r1, #0
 800d572:	db4c      	blt.n	800d60e <ceil+0xce>
 800d574:	4301      	orrs	r1, r0
 800d576:	d04e      	beq.n	800d616 <ceil+0xd6>
 800d578:	492b      	ldr	r1, [pc, #172]	; (800d628 <ceil+0xe8>)
 800d57a:	2000      	movs	r0, #0
 800d57c:	460b      	mov	r3, r1
 800d57e:	4602      	mov	r2, r0
 800d580:	ec43 2b10 	vmov	d0, r2, r3
 800d584:	e020      	b.n	800d5c8 <ceil+0x88>
 800d586:	4a29      	ldr	r2, [pc, #164]	; (800d62c <ceil+0xec>)
 800d588:	411a      	asrs	r2, r3
 800d58a:	ea01 0402 	and.w	r4, r1, r2
 800d58e:	4304      	orrs	r4, r0
 800d590:	d01a      	beq.n	800d5c8 <ceil+0x88>
 800d592:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800d620 <ceil+0xe0>
 800d596:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d59a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5a2:	ddeb      	ble.n	800d57c <ceil+0x3c>
 800d5a4:	2900      	cmp	r1, #0
 800d5a6:	bfc2      	ittt	gt
 800d5a8:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 800d5ac:	fa40 f303 	asrgt.w	r3, r0, r3
 800d5b0:	18c9      	addgt	r1, r1, r3
 800d5b2:	ea21 0102 	bic.w	r1, r1, r2
 800d5b6:	2000      	movs	r0, #0
 800d5b8:	e7e0      	b.n	800d57c <ceil+0x3c>
 800d5ba:	2b33      	cmp	r3, #51	; 0x33
 800d5bc:	dd05      	ble.n	800d5ca <ceil+0x8a>
 800d5be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5c2:	d101      	bne.n	800d5c8 <ceil+0x88>
 800d5c4:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d5c8:	bd30      	pop	{r4, r5, pc}
 800d5ca:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800d5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d5d2:	40e2      	lsrs	r2, r4
 800d5d4:	4210      	tst	r0, r2
 800d5d6:	d0f7      	beq.n	800d5c8 <ceil+0x88>
 800d5d8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800d620 <ceil+0xe0>
 800d5dc:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d5e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e8:	ddc8      	ble.n	800d57c <ceil+0x3c>
 800d5ea:	2900      	cmp	r1, #0
 800d5ec:	dd02      	ble.n	800d5f4 <ceil+0xb4>
 800d5ee:	2b14      	cmp	r3, #20
 800d5f0:	d103      	bne.n	800d5fa <ceil+0xba>
 800d5f2:	3101      	adds	r1, #1
 800d5f4:	ea20 0002 	bic.w	r0, r0, r2
 800d5f8:	e7c0      	b.n	800d57c <ceil+0x3c>
 800d5fa:	2401      	movs	r4, #1
 800d5fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d600:	fa04 f303 	lsl.w	r3, r4, r3
 800d604:	4418      	add	r0, r3
 800d606:	4285      	cmp	r5, r0
 800d608:	bf88      	it	hi
 800d60a:	1909      	addhi	r1, r1, r4
 800d60c:	e7f2      	b.n	800d5f4 <ceil+0xb4>
 800d60e:	2000      	movs	r0, #0
 800d610:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d614:	e7b2      	b.n	800d57c <ceil+0x3c>
 800d616:	4608      	mov	r0, r1
 800d618:	e7b0      	b.n	800d57c <ceil+0x3c>
 800d61a:	bf00      	nop
 800d61c:	f3af 8000 	nop.w
 800d620:	8800759c 	.word	0x8800759c
 800d624:	7e37e43c 	.word	0x7e37e43c
 800d628:	3ff00000 	.word	0x3ff00000
 800d62c:	000fffff 	.word	0x000fffff

0800d630 <round>:
 800d630:	ee10 1a90 	vmov	r1, s1
 800d634:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d638:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800d63c:	2b13      	cmp	r3, #19
 800d63e:	b510      	push	{r4, lr}
 800d640:	ee10 4a10 	vmov	r4, s0
 800d644:	dc19      	bgt.n	800d67a <round+0x4a>
 800d646:	2b00      	cmp	r3, #0
 800d648:	da09      	bge.n	800d65e <round+0x2e>
 800d64a:	3301      	adds	r3, #1
 800d64c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d650:	d103      	bne.n	800d65a <round+0x2a>
 800d652:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d656:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d65a:	2000      	movs	r0, #0
 800d65c:	e025      	b.n	800d6aa <round+0x7a>
 800d65e:	4815      	ldr	r0, [pc, #84]	; (800d6b4 <round+0x84>)
 800d660:	4118      	asrs	r0, r3
 800d662:	ea01 0200 	and.w	r2, r1, r0
 800d666:	4322      	orrs	r2, r4
 800d668:	d00e      	beq.n	800d688 <round+0x58>
 800d66a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d66e:	fa42 f303 	asr.w	r3, r2, r3
 800d672:	440b      	add	r3, r1
 800d674:	ea23 0100 	bic.w	r1, r3, r0
 800d678:	e7ef      	b.n	800d65a <round+0x2a>
 800d67a:	2b33      	cmp	r3, #51	; 0x33
 800d67c:	dd05      	ble.n	800d68a <round+0x5a>
 800d67e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d682:	d101      	bne.n	800d688 <round+0x58>
 800d684:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d688:	bd10      	pop	{r4, pc}
 800d68a:	f2a2 4013 	subw	r0, r2, #1043	; 0x413
 800d68e:	f04f 32ff 	mov.w	r2, #4294967295
 800d692:	40c2      	lsrs	r2, r0
 800d694:	4222      	tst	r2, r4
 800d696:	d0f7      	beq.n	800d688 <round+0x58>
 800d698:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 800d69c:	2001      	movs	r0, #1
 800d69e:	4098      	lsls	r0, r3
 800d6a0:	1900      	adds	r0, r0, r4
 800d6a2:	bf28      	it	cs
 800d6a4:	3101      	addcs	r1, #1
 800d6a6:	ea20 0002 	bic.w	r0, r0, r2
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	ec43 2b10 	vmov	d0, r2, r3
 800d6b2:	e7e9      	b.n	800d688 <round+0x58>
 800d6b4:	000fffff 	.word	0x000fffff

0800d6b8 <_exit>:
 800d6b8:	e7fe      	b.n	800d6b8 <_exit>
	...

0800d6bc <_init>:
 800d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6be:	bf00      	nop
 800d6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6c2:	bc08      	pop	{r3}
 800d6c4:	469e      	mov	lr, r3
 800d6c6:	4770      	bx	lr

0800d6c8 <_fini>:
 800d6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ca:	bf00      	nop
 800d6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ce:	bc08      	pop	{r3}
 800d6d0:	469e      	mov	lr, r3
 800d6d2:	4770      	bx	lr

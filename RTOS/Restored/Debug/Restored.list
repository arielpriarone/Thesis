
Restored.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c2c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009c90  08010e30  08010e30  00020e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aac0  0801aac0  00030b90  2**0
                  CONTENTS
  4 .ARM          00000008  0801aac0  0801aac0  0002aac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aac8  0801aac8  00030b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aac8  0801aac8  0002aac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aacc  0801aacc  0002aacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a50  20000000  0801aad0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000a50  0801b520  00030a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000af0  0801b5c0  00030af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002ff0  20000b90  0801b660  00030b90  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20003b80  0801b660  00033b80  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030b90  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030bbe  2**0
                  CONTENTS, READONLY
 15 .debug_info   00022578  00000000  00000000  00030c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003dad  00000000  00000000  00053179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000019f8  00000000  00000000  00056f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001461  00000000  00000000  00058920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d561  00000000  00000000  00059d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00026f1e  00000000  00000000  000872e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00114356  00000000  00000000  000ae200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008b4c  00000000  00000000  001c2558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  001cb0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000b90 	.word	0x20000b90
 800021c:	00000000 	.word	0x00000000
 8000220:	08010e14 	.word	0x08010e14

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000b94 	.word	0x20000b94
 800023c:	08010e14 	.word	0x08010e14

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a8 	b.w	80009f0 <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9e08      	ldr	r6, [sp, #32]
 800072e:	460d      	mov	r5, r1
 8000730:	4604      	mov	r4, r0
 8000732:	460f      	mov	r7, r1
 8000734:	2b00      	cmp	r3, #0
 8000736:	d14a      	bne.n	80007ce <__udivmoddi4+0xa6>
 8000738:	428a      	cmp	r2, r1
 800073a:	4694      	mov	ip, r2
 800073c:	d965      	bls.n	800080a <__udivmoddi4+0xe2>
 800073e:	fab2 f382 	clz	r3, r2
 8000742:	b143      	cbz	r3, 8000756 <__udivmoddi4+0x2e>
 8000744:	fa02 fc03 	lsl.w	ip, r2, r3
 8000748:	f1c3 0220 	rsb	r2, r3, #32
 800074c:	409f      	lsls	r7, r3
 800074e:	fa20 f202 	lsr.w	r2, r0, r2
 8000752:	4317      	orrs	r7, r2
 8000754:	409c      	lsls	r4, r3
 8000756:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800075a:	fa1f f58c 	uxth.w	r5, ip
 800075e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000762:	0c22      	lsrs	r2, r4, #16
 8000764:	fb0e 7711 	mls	r7, lr, r1, r7
 8000768:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800076c:	fb01 f005 	mul.w	r0, r1, r5
 8000770:	4290      	cmp	r0, r2
 8000772:	d90a      	bls.n	800078a <__udivmoddi4+0x62>
 8000774:	eb1c 0202 	adds.w	r2, ip, r2
 8000778:	f101 37ff 	add.w	r7, r1, #4294967295
 800077c:	f080 811c 	bcs.w	80009b8 <__udivmoddi4+0x290>
 8000780:	4290      	cmp	r0, r2
 8000782:	f240 8119 	bls.w	80009b8 <__udivmoddi4+0x290>
 8000786:	3902      	subs	r1, #2
 8000788:	4462      	add	r2, ip
 800078a:	1a12      	subs	r2, r2, r0
 800078c:	b2a4      	uxth	r4, r4
 800078e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000792:	fb0e 2210 	mls	r2, lr, r0, r2
 8000796:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800079a:	fb00 f505 	mul.w	r5, r0, r5
 800079e:	42a5      	cmp	r5, r4
 80007a0:	d90a      	bls.n	80007b8 <__udivmoddi4+0x90>
 80007a2:	eb1c 0404 	adds.w	r4, ip, r4
 80007a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007aa:	f080 8107 	bcs.w	80009bc <__udivmoddi4+0x294>
 80007ae:	42a5      	cmp	r5, r4
 80007b0:	f240 8104 	bls.w	80009bc <__udivmoddi4+0x294>
 80007b4:	4464      	add	r4, ip
 80007b6:	3802      	subs	r0, #2
 80007b8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007bc:	1b64      	subs	r4, r4, r5
 80007be:	2100      	movs	r1, #0
 80007c0:	b11e      	cbz	r6, 80007ca <__udivmoddi4+0xa2>
 80007c2:	40dc      	lsrs	r4, r3
 80007c4:	2300      	movs	r3, #0
 80007c6:	e9c6 4300 	strd	r4, r3, [r6]
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d908      	bls.n	80007e4 <__udivmoddi4+0xbc>
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	f000 80ed 	beq.w	80009b2 <__udivmoddi4+0x28a>
 80007d8:	2100      	movs	r1, #0
 80007da:	e9c6 0500 	strd	r0, r5, [r6]
 80007de:	4608      	mov	r0, r1
 80007e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e4:	fab3 f183 	clz	r1, r3
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d149      	bne.n	8000880 <__udivmoddi4+0x158>
 80007ec:	42ab      	cmp	r3, r5
 80007ee:	d302      	bcc.n	80007f6 <__udivmoddi4+0xce>
 80007f0:	4282      	cmp	r2, r0
 80007f2:	f200 80f8 	bhi.w	80009e6 <__udivmoddi4+0x2be>
 80007f6:	1a84      	subs	r4, r0, r2
 80007f8:	eb65 0203 	sbc.w	r2, r5, r3
 80007fc:	2001      	movs	r0, #1
 80007fe:	4617      	mov	r7, r2
 8000800:	2e00      	cmp	r6, #0
 8000802:	d0e2      	beq.n	80007ca <__udivmoddi4+0xa2>
 8000804:	e9c6 4700 	strd	r4, r7, [r6]
 8000808:	e7df      	b.n	80007ca <__udivmoddi4+0xa2>
 800080a:	b902      	cbnz	r2, 800080e <__udivmoddi4+0xe6>
 800080c:	deff      	udf	#255	; 0xff
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	2b00      	cmp	r3, #0
 8000814:	f040 8090 	bne.w	8000938 <__udivmoddi4+0x210>
 8000818:	1a8a      	subs	r2, r1, r2
 800081a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800081e:	fa1f fe8c 	uxth.w	lr, ip
 8000822:	2101      	movs	r1, #1
 8000824:	fbb2 f5f7 	udiv	r5, r2, r7
 8000828:	fb07 2015 	mls	r0, r7, r5, r2
 800082c:	0c22      	lsrs	r2, r4, #16
 800082e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000832:	fb0e f005 	mul.w	r0, lr, r5
 8000836:	4290      	cmp	r0, r2
 8000838:	d908      	bls.n	800084c <__udivmoddi4+0x124>
 800083a:	eb1c 0202 	adds.w	r2, ip, r2
 800083e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x122>
 8000844:	4290      	cmp	r0, r2
 8000846:	f200 80cb 	bhi.w	80009e0 <__udivmoddi4+0x2b8>
 800084a:	4645      	mov	r5, r8
 800084c:	1a12      	subs	r2, r2, r0
 800084e:	b2a4      	uxth	r4, r4
 8000850:	fbb2 f0f7 	udiv	r0, r2, r7
 8000854:	fb07 2210 	mls	r2, r7, r0, r2
 8000858:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800085c:	fb0e fe00 	mul.w	lr, lr, r0
 8000860:	45a6      	cmp	lr, r4
 8000862:	d908      	bls.n	8000876 <__udivmoddi4+0x14e>
 8000864:	eb1c 0404 	adds.w	r4, ip, r4
 8000868:	f100 32ff 	add.w	r2, r0, #4294967295
 800086c:	d202      	bcs.n	8000874 <__udivmoddi4+0x14c>
 800086e:	45a6      	cmp	lr, r4
 8000870:	f200 80bb 	bhi.w	80009ea <__udivmoddi4+0x2c2>
 8000874:	4610      	mov	r0, r2
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800087e:	e79f      	b.n	80007c0 <__udivmoddi4+0x98>
 8000880:	f1c1 0720 	rsb	r7, r1, #32
 8000884:	408b      	lsls	r3, r1
 8000886:	fa22 fc07 	lsr.w	ip, r2, r7
 800088a:	ea4c 0c03 	orr.w	ip, ip, r3
 800088e:	fa05 f401 	lsl.w	r4, r5, r1
 8000892:	fa20 f307 	lsr.w	r3, r0, r7
 8000896:	40fd      	lsrs	r5, r7
 8000898:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800089c:	4323      	orrs	r3, r4
 800089e:	fbb5 f8f9 	udiv	r8, r5, r9
 80008a2:	fa1f fe8c 	uxth.w	lr, ip
 80008a6:	fb09 5518 	mls	r5, r9, r8, r5
 80008aa:	0c1c      	lsrs	r4, r3, #16
 80008ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008b0:	fb08 f50e 	mul.w	r5, r8, lr
 80008b4:	42a5      	cmp	r5, r4
 80008b6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ba:	fa00 f001 	lsl.w	r0, r0, r1
 80008be:	d90b      	bls.n	80008d8 <__udivmoddi4+0x1b0>
 80008c0:	eb1c 0404 	adds.w	r4, ip, r4
 80008c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008c8:	f080 8088 	bcs.w	80009dc <__udivmoddi4+0x2b4>
 80008cc:	42a5      	cmp	r5, r4
 80008ce:	f240 8085 	bls.w	80009dc <__udivmoddi4+0x2b4>
 80008d2:	f1a8 0802 	sub.w	r8, r8, #2
 80008d6:	4464      	add	r4, ip
 80008d8:	1b64      	subs	r4, r4, r5
 80008da:	b29d      	uxth	r5, r3
 80008dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008e0:	fb09 4413 	mls	r4, r9, r3, r4
 80008e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008e8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008ec:	45a6      	cmp	lr, r4
 80008ee:	d908      	bls.n	8000902 <__udivmoddi4+0x1da>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008f8:	d26c      	bcs.n	80009d4 <__udivmoddi4+0x2ac>
 80008fa:	45a6      	cmp	lr, r4
 80008fc:	d96a      	bls.n	80009d4 <__udivmoddi4+0x2ac>
 80008fe:	3b02      	subs	r3, #2
 8000900:	4464      	add	r4, ip
 8000902:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000906:	fba3 9502 	umull	r9, r5, r3, r2
 800090a:	eba4 040e 	sub.w	r4, r4, lr
 800090e:	42ac      	cmp	r4, r5
 8000910:	46c8      	mov	r8, r9
 8000912:	46ae      	mov	lr, r5
 8000914:	d356      	bcc.n	80009c4 <__udivmoddi4+0x29c>
 8000916:	d053      	beq.n	80009c0 <__udivmoddi4+0x298>
 8000918:	b156      	cbz	r6, 8000930 <__udivmoddi4+0x208>
 800091a:	ebb0 0208 	subs.w	r2, r0, r8
 800091e:	eb64 040e 	sbc.w	r4, r4, lr
 8000922:	fa04 f707 	lsl.w	r7, r4, r7
 8000926:	40ca      	lsrs	r2, r1
 8000928:	40cc      	lsrs	r4, r1
 800092a:	4317      	orrs	r7, r2
 800092c:	e9c6 7400 	strd	r7, r4, [r6]
 8000930:	4618      	mov	r0, r3
 8000932:	2100      	movs	r1, #0
 8000934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000938:	f1c3 0120 	rsb	r1, r3, #32
 800093c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000940:	fa20 f201 	lsr.w	r2, r0, r1
 8000944:	fa25 f101 	lsr.w	r1, r5, r1
 8000948:	409d      	lsls	r5, r3
 800094a:	432a      	orrs	r2, r5
 800094c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000950:	fa1f fe8c 	uxth.w	lr, ip
 8000954:	fbb1 f0f7 	udiv	r0, r1, r7
 8000958:	fb07 1510 	mls	r5, r7, r0, r1
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000962:	fb00 f50e 	mul.w	r5, r0, lr
 8000966:	428d      	cmp	r5, r1
 8000968:	fa04 f403 	lsl.w	r4, r4, r3
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x258>
 800096e:	eb1c 0101 	adds.w	r1, ip, r1
 8000972:	f100 38ff 	add.w	r8, r0, #4294967295
 8000976:	d22f      	bcs.n	80009d8 <__udivmoddi4+0x2b0>
 8000978:	428d      	cmp	r5, r1
 800097a:	d92d      	bls.n	80009d8 <__udivmoddi4+0x2b0>
 800097c:	3802      	subs	r0, #2
 800097e:	4461      	add	r1, ip
 8000980:	1b49      	subs	r1, r1, r5
 8000982:	b292      	uxth	r2, r2
 8000984:	fbb1 f5f7 	udiv	r5, r1, r7
 8000988:	fb07 1115 	mls	r1, r7, r5, r1
 800098c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000990:	fb05 f10e 	mul.w	r1, r5, lr
 8000994:	4291      	cmp	r1, r2
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x282>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f105 38ff 	add.w	r8, r5, #4294967295
 80009a0:	d216      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 80009a2:	4291      	cmp	r1, r2
 80009a4:	d914      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 80009a6:	3d02      	subs	r5, #2
 80009a8:	4462      	add	r2, ip
 80009aa:	1a52      	subs	r2, r2, r1
 80009ac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009b0:	e738      	b.n	8000824 <__udivmoddi4+0xfc>
 80009b2:	4631      	mov	r1, r6
 80009b4:	4630      	mov	r0, r6
 80009b6:	e708      	b.n	80007ca <__udivmoddi4+0xa2>
 80009b8:	4639      	mov	r1, r7
 80009ba:	e6e6      	b.n	800078a <__udivmoddi4+0x62>
 80009bc:	4610      	mov	r0, r2
 80009be:	e6fb      	b.n	80007b8 <__udivmoddi4+0x90>
 80009c0:	4548      	cmp	r0, r9
 80009c2:	d2a9      	bcs.n	8000918 <__udivmoddi4+0x1f0>
 80009c4:	ebb9 0802 	subs.w	r8, r9, r2
 80009c8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009cc:	3b01      	subs	r3, #1
 80009ce:	e7a3      	b.n	8000918 <__udivmoddi4+0x1f0>
 80009d0:	4645      	mov	r5, r8
 80009d2:	e7ea      	b.n	80009aa <__udivmoddi4+0x282>
 80009d4:	462b      	mov	r3, r5
 80009d6:	e794      	b.n	8000902 <__udivmoddi4+0x1da>
 80009d8:	4640      	mov	r0, r8
 80009da:	e7d1      	b.n	8000980 <__udivmoddi4+0x258>
 80009dc:	46d0      	mov	r8, sl
 80009de:	e77b      	b.n	80008d8 <__udivmoddi4+0x1b0>
 80009e0:	3d02      	subs	r5, #2
 80009e2:	4462      	add	r2, ip
 80009e4:	e732      	b.n	800084c <__udivmoddi4+0x124>
 80009e6:	4608      	mov	r0, r1
 80009e8:	e70a      	b.n	8000800 <__udivmoddi4+0xd8>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	e742      	b.n	8000876 <__udivmoddi4+0x14e>

080009f0 <__aeabi_idiv0>:
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN 1 */
		int feat_len = TD_FEAT + pow(2,TREE_DEPTH); 			// features array length
 80009fa:	2343      	movs	r3, #67	; 0x43
 80009fc:	607b      	str	r3, [r7, #4]
		feat_array = (double *)malloc(sizeof(double) * feat_len);	/* features array {0, ... ,TD_FEAT-1, TDFEAT, feat_len-1}
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f00a fc14 	bl	800b230 <malloc>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <main+0x74>)
 8000a0e:	601a      	str	r2, [r3, #0]
																		time-domain		...		freq-domain		*/
		feat_stdsd = (double *)malloc(sizeof(double) * feat_len); // standardised features
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f00a fc0b 	bl	800b230 <malloc>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <main+0x78>)
 8000a20:	601a      	str	r2, [r3, #0]
	  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a22:	f001 fbe0 	bl	80021e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a26:	f000 f82b 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2a:	f000 fa2b 	bl	8000e84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a2e:	f000 f9cb 	bl	8000dc8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a32:	f000 f9f9 	bl	8000e28 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000a36:	f000 f897 	bl	8000b68 <MX_ADC1_Init>
  MX_ETH_Init();
 8000a3a:	f000 f8e7 	bl	8000c0c <MX_ETH_Init>
  MX_TIM6_Init();
 8000a3e:	f000 f98d 	bl	8000d5c <MX_TIM6_Init>
  MX_RTC_Init();
 8000a42:	f000 f931 	bl	8000ca8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3); 						// redirect printf and scanf to huart
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <main+0x7c>)
 8000a48:	f000 fffe 	bl	8001a48 <RetargetInit>
  HAL_TIM_Base_Start_IT(&htim6);  			// start the timer 5 kHz
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <main+0x80>)
 8000a4e:	f004 fd13 	bl	8005478 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, Rx_data, 1); 	// start new data read from huart
 8000a52:	2201      	movs	r2, #1
 8000a54:	4908      	ldr	r1, [pc, #32]	; (8000a78 <main+0x84>)
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <main+0x7c>)
 8000a58:	f005 f9af 	bl	8005dba <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf(" \r\n Entering the superloop... \r\n");
 8000a5c:	4807      	ldr	r0, [pc, #28]	; (8000a7c <main+0x88>)
 8000a5e:	f00b fc99 	bl	800c394 <puts>
  while (1)
  {
	  snapReadyHandler();
 8000a62:	f000 fbeb 	bl	800123c <snapReadyHandler>
  {
 8000a66:	e7fc      	b.n	8000a62 <main+0x6e>
 8000a68:	200039f8 	.word	0x200039f8
 8000a6c:	200039fc 	.word	0x200039fc
 8000a70:	20000d48 	.word	0x20000d48
 8000a74:	20000cfc 	.word	0x20000cfc
 8000a78:	20003a14 	.word	0x20003a14
 8000a7c:	08010e30 	.word	0x08010e30

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b094      	sub	sp, #80	; 0x50
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	2234      	movs	r2, #52	; 0x34
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f00b fe40 	bl	800c714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa4:	f003 f824 	bl	8003af0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa8:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <SystemClock_Config+0xe0>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a2c      	ldr	r2, [pc, #176]	; (8000b60 <SystemClock_Config+0xe0>)
 8000aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <SystemClock_Config+0xe0>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ac0:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <SystemClock_Config+0xe4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac8:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <SystemClock_Config+0xe4>)
 8000aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <SystemClock_Config+0xe4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000adc:	2309      	movs	r3, #9
 8000ade:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ae0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ae4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aea:	2302      	movs	r3, #2
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000af8:	2360      	movs	r3, #96	; 0x60
 8000afa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b00:	2304      	movs	r3, #4
 8000b02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f003 f84f 	bl	8003bb0 <HAL_RCC_OscConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b18:	f000 fcfe 	bl	8001518 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b1c:	f002 fff8 	bl	8003b10 <HAL_PWREx_EnableOverDrive>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b26:	f000 fcf7 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	2103      	movs	r1, #3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 fae0 	bl	800410c <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000b52:	f000 fce1 	bl	8001518 <Error_Handler>
  }
}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	; 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40007000 	.word	0x40007000

08000b68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b7c:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <MX_ADC1_Init+0x9c>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b82:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <MX_ADC1_Init+0xa0>)
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bca:	f001 fb8d 	bl	80022e8 <HAL_ADC_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bd4:	f000 fca0 	bl	8001518 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bea:	f001 fd27 	bl	800263c <HAL_ADC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bf4:	f000 fc90 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000be4 	.word	0x20000be4
 8000c04:	40012000 	.word	0x40012000
 8000c08:	0f000001 	.word	0x0f000001

08000c0c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c12:	4a20      	ldr	r2, [pc, #128]	; (8000c94 <MX_ETH_Init+0x88>)
 8000c14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c24:	22e1      	movs	r2, #225	; 0xe1
 8000c26:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c3c:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c3e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c42:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c46:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c4a:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <MX_ETH_Init+0x90>)
 8000c4c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <MX_ETH_Init+0x94>)
 8000c52:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c5a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c5e:	f002 f8e1 	bl	8002e24 <HAL_ETH_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c68:	f000 fc56 	bl	8001518 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c6c:	2238      	movs	r2, #56	; 0x38
 8000c6e:	2100      	movs	r1, #0
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_ETH_Init+0x98>)
 8000c72:	f00b fd4f 	bl	800c714 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_ETH_Init+0x98>)
 8000c78:	2221      	movs	r2, #33	; 0x21
 8000c7a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_ETH_Init+0x98>)
 8000c7e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000c82:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <MX_ETH_Init+0x98>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000c2c 	.word	0x20000c2c
 8000c94:	40028000 	.word	0x40028000
 8000c98:	20003a20 	.word	0x20003a20
 8000c9c:	20000af0 	.word	0x20000af0
 8000ca0:	20000a50 	.word	0x20000a50
 8000ca4:	20000bac 	.word	0x20000bac

08000ca8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cc0:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <MX_RTC_Init+0xac>)
 8000cc2:	4a25      	ldr	r2, [pc, #148]	; (8000d58 <MX_RTC_Init+0xb0>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cc6:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <MX_RTC_Init+0xac>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ccc:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MX_RTC_Init+0xac>)
 8000cce:	227f      	movs	r2, #127	; 0x7f
 8000cd0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <MX_RTC_Init+0xac>)
 8000cd4:	22ff      	movs	r2, #255	; 0xff
 8000cd6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <MX_RTC_Init+0xac>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MX_RTC_Init+0xac>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <MX_RTC_Init+0xac>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cea:	481a      	ldr	r0, [pc, #104]	; (8000d54 <MX_RTC_Init+0xac>)
 8000cec:	f004 f85c 	bl	8004da8 <HAL_RTC_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000cf6:	f000 fc0f 	bl	8001518 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2201      	movs	r2, #1
 8000d12:	4619      	mov	r1, r3
 8000d14:	480f      	ldr	r0, [pc, #60]	; (8000d54 <MX_RTC_Init+0xac>)
 8000d16:	f004 f8cb 	bl	8004eb0 <HAL_RTC_SetTime>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000d20:	f000 fbfa 	bl	8001518 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d24:	2301      	movs	r3, #1
 8000d26:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	2201      	movs	r2, #1
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4806      	ldr	r0, [pc, #24]	; (8000d54 <MX_RTC_Init+0xac>)
 8000d3c:	f004 f9b0 	bl	80050a0 <HAL_RTC_SetDate>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000d46:	f000 fbe7 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000cdc 	.word	0x20000cdc
 8000d58:	40002800 	.word	0x40002800

08000d5c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <MX_TIM6_Init+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000d74:	2217      	movs	r2, #23
 8000d76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 800-1;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000d80:	f240 321f 	movw	r2, #799	; 0x31f
 8000d84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000d8e:	f004 fb1b 	bl	80053c8 <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d98:	f000 fbbe 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_TIM6_Init+0x64>)
 8000daa:	f004 fdc5 	bl	8005938 <HAL_TIMEx_MasterConfigSynchronization>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000db4:	f000 fbb0 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000cfc 	.word	0x20000cfc
 8000dc4:	40001000 	.word	0x40001000

08000dc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000dce:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <MX_USART3_UART_Init+0x5c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000e0c:	f004 fe40 	bl	8005a90 <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e16:	f000 fb7f 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000d48 	.word	0x20000d48
 8000e24:	40004800 	.word	0x40004800

08000e28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e36:	2206      	movs	r2, #6
 8000e38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e48:	2202      	movs	r2, #2
 8000e4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6c:	f002 fcf8 	bl	8003860 <HAL_PCD_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e76:	f000 fb4f 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000dd0 	.word	0x20000dd0

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08c      	sub	sp, #48	; 0x30
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a4a      	ldr	r2, [pc, #296]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b48      	ldr	r3, [pc, #288]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	61bb      	str	r3, [r7, #24]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb2:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a44      	ldr	r2, [pc, #272]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b3f      	ldr	r3, [pc, #252]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a3e      	ldr	r2, [pc, #248]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b3c      	ldr	r3, [pc, #240]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a38      	ldr	r2, [pc, #224]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a32      	ldr	r2, [pc, #200]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f12:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a2c      	ldr	r2, [pc, #176]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <MX_GPIO_Init+0x144>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f30:	4826      	ldr	r0, [pc, #152]	; (8000fcc <MX_GPIO_Init+0x148>)
 8000f32:	f002 fc49 	bl	80037c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2140      	movs	r1, #64	; 0x40
 8000f3a:	4825      	ldr	r0, [pc, #148]	; (8000fd0 <MX_GPIO_Init+0x14c>)
 8000f3c:	f002 fc44 	bl	80037c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <MX_GPIO_Init+0x150>)
 8000f58:	f002 fa8a 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f5c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4815      	ldr	r0, [pc, #84]	; (8000fcc <MX_GPIO_Init+0x148>)
 8000f76:	f002 fa7b 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f7a:	2340      	movs	r3, #64	; 0x40
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480f      	ldr	r0, [pc, #60]	; (8000fd0 <MX_GPIO_Init+0x14c>)
 8000f92:	f002 fa6d 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <MX_GPIO_Init+0x14c>)
 8000faa:	f002 fa61 	bl	8003470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2028      	movs	r0, #40	; 0x28
 8000fb4:	f001 fe6d 	bl	8002c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fb8:	2028      	movs	r0, #40	; 0x28
 8000fba:	f001 fe86 	bl	8002cca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3730      	adds	r7, #48	; 0x30
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40021800 	.word	0x40021800
 8000fd4:	40020800 	.word	0x40020800

08000fd8 <setRTCclock>:

/* USER CODE BEGIN 4 */
void setRTCclock() {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b090      	sub	sp, #64	; 0x40
 8000fdc:	af04      	add	r7, sp, #16
	RTC_DateTypeDef sDate;

	int year, month, day, hour, minute, second;

	// Get date and time from the user
	printf("Enter the date and time (YYYY MM DD hh mm ss): ");
 8000fde:	4826      	ldr	r0, [pc, #152]	; (8001078 <setRTCclock+0xa0>)
 8000fe0:	f00b f972 	bl	800c2c8 <iprintf>
	scanf("%d %d %d %d %d %d", &year, &month, &day, &hour, &minute, &second);
 8000fe4:	f107 000c 	add.w	r0, r7, #12
 8000fe8:	f107 0210 	add.w	r2, r7, #16
 8000fec:	f107 0114 	add.w	r1, r7, #20
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	4603      	mov	r3, r0
 8001000:	481e      	ldr	r0, [pc, #120]	; (800107c <setRTCclock+0xa4>)
 8001002:	f00b f9cf 	bl	800c3a4 <iscanf>

	// Set the Date
	sDate.Year = year - 2000;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	3330      	adds	r3, #48	; 0x30
 800100c:	b2db      	uxtb	r3, r3
 800100e:	76fb      	strb	r3, [r7, #27]
	sDate.Month = month;
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	767b      	strb	r3, [r7, #25]
	sDate.Date = day;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	76bb      	strb	r3, [r7, #26]
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800101c:	2301      	movs	r3, #1
 800101e:	763b      	strb	r3, [r7, #24]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	4815      	ldr	r0, [pc, #84]	; (8001080 <setRTCclock+0xa8>)
 800102a:	f004 f839 	bl	80050a0 <HAL_RTC_SetDate>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <setRTCclock+0x60>
		/* Initialization Error */
		Error_Handler();
 8001034:	f000 fa70 	bl	8001518 <Error_Handler>
	}

	// Set the Time
	sTime.Hours = hour;
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	773b      	strb	r3, [r7, #28]
	sTime.Minutes = minute;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	777b      	strb	r3, [r7, #29]
	sTime.Seconds = second;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	77bb      	strb	r3, [r7, #30]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	4809      	ldr	r0, [pc, #36]	; (8001080 <setRTCclock+0xa8>)
 800105c:	f003 ff28 	bl	8004eb0 <HAL_RTC_SetTime>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <setRTCclock+0x92>
		/* Initialization Error */
		Error_Handler();
 8001066:	f000 fa57 	bl	8001518 <Error_Handler>
	}

	printf("RTC clock set successfully.\n");
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <setRTCclock+0xac>)
 800106c:	f00b f992 	bl	800c394 <puts>
	return;
 8001070:	bf00      	nop
}
 8001072:	3730      	adds	r7, #48	; 0x30
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	08010e50 	.word	0x08010e50
 800107c:	08010e80 	.word	0x08010e80
 8001080:	20000cdc 	.word	0x20000cdc
 8001084:	08010e94 	.word	0x08010e94

08001088 <get_time>:

void get_time()
{
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af04      	add	r7, sp, #16
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800108e:	463b      	mov	r3, r7
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <get_time+0x4c>)
 8001096:	f003 ffa5 	bl	8004fe4 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2200      	movs	r2, #0
 80010a0:	4619      	mov	r1, r3
 80010a2:	480c      	ldr	r0, [pc, #48]	; (80010d4 <get_time+0x4c>)
 80010a4:	f004 f880 	bl	80051a8 <HAL_RTC_GetDate>
	/* Display time Format: YYYYMMDDhhmmss */
	sprintf(timestamp,"%04d%02d%02d%02d%02d%02d",2000 + gDate.Year,gDate.Month, gDate.Date,gTime.Hours, gTime.Minutes, gTime.Seconds);
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80010ae:	7d7b      	ldrb	r3, [r7, #21]
 80010b0:	461d      	mov	r5, r3
 80010b2:	7dbb      	ldrb	r3, [r7, #22]
 80010b4:	7839      	ldrb	r1, [r7, #0]
 80010b6:	7878      	ldrb	r0, [r7, #1]
 80010b8:	78bc      	ldrb	r4, [r7, #2]
 80010ba:	9403      	str	r4, [sp, #12]
 80010bc:	9002      	str	r0, [sp, #8]
 80010be:	9101      	str	r1, [sp, #4]
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	462b      	mov	r3, r5
 80010c4:	4904      	ldr	r1, [pc, #16]	; (80010d8 <get_time+0x50>)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <get_time+0x54>)
 80010c8:	f00b fa2c 	bl	800c524 <siprintf>
	return ;
 80010cc:	bf00      	nop
}
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bdb0      	pop	{r4, r5, r7, pc}
 80010d4:	20000cdc 	.word	0x20000cdc
 80010d8:	08010eb0 	.word	0x08010eb0
 80010dc:	20003a00 	.word	0x20003a00

080010e0 <acquireSnapshot>:

void acquireSnapshot(){
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
	snap_recorded = FALSE;						// clear ouput flag
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <acquireSnapshot+0x1c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	snap_request = TRUE;						// request a snapshot
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <acquireSnapshot+0x20>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
	return;
 80010f0:	bf00      	nop
}
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200012d9 	.word	0x200012d9
 8001100:	200012d8 	.word	0x200012d8

08001104 <calcSnapDistanceError>:

double calcSnapDistanceError(){
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
	double distance_assgined_cluster = DBL_MAX; // initialise the minimum distance to MAX double possible, update it
 800110a:	f04f 32ff 	mov.w	r2, #4294967295
 800110e:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <calcSnapDistanceError+0xa4>)
 8001110:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// and than it is the distance to the assigned cluster
	double distance, error;
	int assigned_cluster = -1;	// initialise to impossible value
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n_clusters; ++i) {
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	e021      	b.n	8001164 <calcSnapDistanceError+0x60>
		distance = eucDist(feat_stdsd, centers[i], feat_len); // compute the distance to all the centers (WARNING!!! - not sure if centers[i] works)
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <calcSnapDistanceError+0xa8>)
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f44f 7206 	mov.w	r2, #536	; 0x218
 800112a:	fb02 f303 	mul.w	r3, r2, r3
 800112e:	4a20      	ldr	r2, [pc, #128]	; (80011b0 <calcSnapDistanceError+0xac>)
 8001130:	4413      	add	r3, r2
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <calcSnapDistanceError+0xb0>)
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	f000 fc28 	bl	800198c <eucDist>
 800113c:	ed87 0b00 	vstr	d0, [r7]
		if(distance < distance_assgined_cluster){			// if found a new minimum, save it
 8001140:	ed97 6b00 	vldr	d6, [r7]
 8001144:	ed97 7b06 	vldr	d7, [r7, #24]
 8001148:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	d505      	bpl.n	800115e <calcSnapDistanceError+0x5a>
			assigned_cluster = i;	// assign a new cluster
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	617b      	str	r3, [r7, #20]
			distance_assgined_cluster = distance;			// assign the distance to current cluster
 8001156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800115a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (int i = 0; i < n_clusters; ++i) {
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	3301      	adds	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <calcSnapDistanceError+0xb4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	429a      	cmp	r2, r3
 800116c:	dbd8      	blt.n	8001120 <calcSnapDistanceError+0x1c>
		}
	}
	error = (distance_assgined_cluster-radiuses[assigned_cluster])/radiuses[assigned_cluster]; // removed because division by 0 problem - redone because now min cluster size = 2
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <calcSnapDistanceError+0xb8>)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4413      	add	r3, r2
 8001176:	ed93 7b00 	vldr	d7, [r3]
 800117a:	ed97 6b06 	vldr	d6, [r7, #24]
 800117e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <calcSnapDistanceError+0xb8>)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4413      	add	r3, r2
 800118a:	ed93 6b00 	vldr	d6, [r3]
 800118e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001192:	ed87 7b02 	vstr	d7, [r7, #8]
	return error;
 8001196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800119a:	ec43 2b17 	vmov	d7, r2, r3
}
 800119e:	eeb0 0b47 	vmov.f64	d0, d7
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	7fefffff 	.word	0x7fefffff
 80011ac:	200039fc 	.word	0x200039fc
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000878 	.word	0x20000878
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000868 	.word	0x20000868

080011c0 <std_sclr>:

void std_sclr(){
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
	for(int i=0; i<feat_len; i++){
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	e020      	b.n	800120e <std_sclr+0x4e>
		feat_stdsd[i]=(feat_array[i]-means[i])/stds[i];
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <std_sclr+0x68>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	ed93 6b00 	vldr	d6, [r3]
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <std_sclr+0x6c>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	ed93 7b00 	vldr	d7, [r3]
 80011e6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <std_sclr+0x70>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	4413      	add	r3, r2
 80011f2:	ed93 6b00 	vldr	d6, [r3]
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <std_sclr+0x74>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4413      	add	r3, r2
 8001200:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001204:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0; i<feat_len; i++){
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <std_sclr+0x78>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	429a      	cmp	r2, r3
 8001216:	dbd9      	blt.n	80011cc <std_sclr+0xc>
	}
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	200039f8 	.word	0x200039f8
 800122c:	20000650 	.word	0x20000650
 8001230:	20000438 	.word	0x20000438
 8001234:	200039fc 	.word	0x200039fc
 8001238:	20000878 	.word	0x20000878

0800123c <snapReadyHandler>:



void snapReadyHandler(){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
	if(!snap_recorded){
 8001242:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <snapReadyHandler+0xc0>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	f083 0301 	eor.w	r3, r3, #1
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d150      	bne.n	80012f2 <snapReadyHandler+0xb6>
		return;
	}
	else
	{
		snap_recorded = FALSE;						// reset the recorded flag, because the sample has been consumed
 8001250:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <snapReadyHandler+0xc0>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]

		/* ACTIONS TO PERFORM WHEN A NEW TIME-DOMAIN SNAP IS READY */
		feat_array = featureExtractor(adc_buf, ADC_BUF_LEN, TREE_DEPTH, feat_array); // extract the features
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <snapReadyHandler+0xc4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2206      	movs	r2, #6
 800125c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001260:	4828      	ldr	r0, [pc, #160]	; (8001304 <snapReadyHandler+0xc8>)
 8001262:	f000 fa69 	bl	8001738 <featureExtractor>
 8001266:	4603      	mov	r3, r0
 8001268:	4a25      	ldr	r2, [pc, #148]	; (8001300 <snapReadyHandler+0xc4>)
 800126a:	6013      	str	r3, [r2, #0]
		if (transmit_flag){
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <snapReadyHandler+0xcc>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d026      	beq.n	80012c2 <snapReadyHandler+0x86>
			myprintf("the time-domain sampled signal is: \r\n\n");
 8001274:	4825      	ldr	r0, [pc, #148]	; (800130c <snapReadyHandler+0xd0>)
 8001276:	f000 f999 	bl	80015ac <myprintf>
			if(VERBOSE){printUint16_tArray(adc_buf, ADC_BUF_LEN);}
			if(print_timeserie_flag){
 800127a:	4b25      	ldr	r3, [pc, #148]	; (8001310 <snapReadyHandler+0xd4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00a      	beq.n	8001298 <snapReadyHandler+0x5c>
				print_timeserie_flag = FALSE;
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <snapReadyHandler+0xd4>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
				myprintf("the time-domain sampled signal is: \r\n\n");
 8001288:	4820      	ldr	r0, [pc, #128]	; (800130c <snapReadyHandler+0xd0>)
 800128a:	f000 f98f 	bl	80015ac <myprintf>
				printUint16_tArray(adc_buf, ADC_BUF_LEN);
 800128e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001292:	481c      	ldr	r0, [pc, #112]	; (8001304 <snapReadyHandler+0xc8>)
 8001294:	f000 f96c 	bl	8001570 <printUint16_tArray>
			}
			get_time(timestamp);
 8001298:	481e      	ldr	r0, [pc, #120]	; (8001314 <snapReadyHandler+0xd8>)
 800129a:	f7ff fef5 	bl	8001088 <get_time>
			printf(" \r\nSnapshot recorded. \r\nTimestamp: %s \r\nFeatures: \r\n",timestamp);
 800129e:	491d      	ldr	r1, [pc, #116]	; (8001314 <snapReadyHandler+0xd8>)
 80012a0:	481d      	ldr	r0, [pc, #116]	; (8001318 <snapReadyHandler+0xdc>)
 80012a2:	f00b f811 	bl	800c2c8 <iprintf>
			printDoubleArray(feat_array, feat_len);
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <snapReadyHandler+0xc4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <snapReadyHandler+0xe0>)
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 f93f 	bl	8001534 <printDoubleArray>
			printf(" \r\nEnd of features. \r\n");
 80012b6:	481a      	ldr	r0, [pc, #104]	; (8001320 <snapReadyHandler+0xe4>)
 80012b8:	f00b f86c 	bl	800c394 <puts>
			transmit_flag = FALSE;
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <snapReadyHandler+0xcc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
		}
		if(evaluate_flag){ // evaluate the snaposhot
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <snapReadyHandler+0xe8>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00d      	beq.n	80012e6 <snapReadyHandler+0xaa>
			std_sclr();  	// standardise the snapshot
 80012ca:	f7ff ff79 	bl	80011c0 <std_sclr>
			double indicator;
			indicator = calcSnapDistanceError();
 80012ce:	f7ff ff19 	bl	8001104 <calcSnapDistanceError>
 80012d2:	ed87 0b00 	vstr	d0, [r7]
			printf("Novelty indicator: %e\n",indicator);
 80012d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012da:	4813      	ldr	r0, [pc, #76]	; (8001328 <snapReadyHandler+0xec>)
 80012dc:	f00a fff4 	bl	800c2c8 <iprintf>
			evaluate_flag = FALSE;
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <snapReadyHandler+0xe8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart3, Rx_data, 1); // start new data read from huart
 80012e6:	2201      	movs	r2, #1
 80012e8:	4910      	ldr	r1, [pc, #64]	; (800132c <snapReadyHandler+0xf0>)
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <snapReadyHandler+0xf4>)
 80012ec:	f004 fd65 	bl	8005dba <HAL_UART_Receive_IT>
		return;
 80012f0:	e000      	b.n	80012f4 <snapReadyHandler+0xb8>
		return;
 80012f2:	bf00      	nop
	}
}
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200012d9 	.word	0x200012d9
 8001300:	200039f8 	.word	0x200039f8
 8001304:	200012e4 	.word	0x200012e4
 8001308:	200012e0 	.word	0x200012e0
 800130c:	08010ecc 	.word	0x08010ecc
 8001310:	200012dc 	.word	0x200012dc
 8001314:	20003a00 	.word	0x20003a00
 8001318:	08010ef4 	.word	0x08010ef4
 800131c:	20000878 	.word	0x20000878
 8001320:	08010f2c 	.word	0x08010f2c
 8001324:	200012da 	.word	0x200012da
 8001328:	08010f44 	.word	0x08010f44
 800132c:	20003a14 	.word	0x20003a14
 8001330:	20000d48 	.word	0x20000d48

08001334 <USR_BTN_handler>:

void USR_BTN_handler(){							// handle the press of user button
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
	/* debounce the button */
	uint16_t current_time = HAL_GetTick();
 800133a:	f000 ffa5 	bl	8002288 <HAL_GetTick>
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
	if ((tickmem + 100) > current_time){
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <USR_BTN_handler+0x98>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	429a      	cmp	r2, r3
 800134e:	d838      	bhi.n	80013c2 <USR_BTN_handler+0x8e>
		return;
	}
	else{
		tickmem = HAL_GetTick();
 8001350:	f000 ff9a 	bl	8002288 <HAL_GetTick>
 8001354:	4603      	mov	r3, r0
 8001356:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <USR_BTN_handler+0x98>)
 8001358:	6013      	str	r3, [r2, #0]
	}

	printf(" \r\nPlease enter a command: \r\n-1 = acquire and transmit a snapshot (time-domain) \r\n-2 = set the clock \r\n");
 800135a:	481d      	ldr	r0, [pc, #116]	; (80013d0 <USR_BTN_handler+0x9c>)
 800135c:	f00b f81a 	bl	800c394 <puts>
	printf("-3 = acquire and evaluate a snapshot \r\n");
 8001360:	481c      	ldr	r0, [pc, #112]	; (80013d4 <USR_BTN_handler+0xa0>)
 8001362:	f00b f817 	bl	800c394 <puts>
	printf("-4 = acquire, evaluate and transmit a snapshot \r\n");
 8001366:	481c      	ldr	r0, [pc, #112]	; (80013d8 <USR_BTN_handler+0xa4>)
 8001368:	f00b f814 	bl	800c394 <puts>
	int command;
	//scanf("%u", &command);
	command = 4; // for testing
 800136c:	2304      	movs	r3, #4
 800136e:	603b      	str	r3, [r7, #0]
	switch(command){
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3b01      	subs	r3, #1
 8001374:	2b03      	cmp	r3, #3
 8001376:	d821      	bhi.n	80013bc <USR_BTN_handler+0x88>
 8001378:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <USR_BTN_handler+0x4c>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	08001391 	.word	0x08001391
 8001384:	0800139d 	.word	0x0800139d
 8001388:	080013a3 	.word	0x080013a3
 800138c:	080013ad 	.word	0x080013ad
	case 1:
		acquireSnapshot();
 8001390:	f7ff fea6 	bl	80010e0 <acquireSnapshot>
		transmit_flag = TRUE;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <USR_BTN_handler+0xa8>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
		break;
 800139a:	e00f      	b.n	80013bc <USR_BTN_handler+0x88>
	case 2:
		setRTCclock();
 800139c:	f7ff fe1c 	bl	8000fd8 <setRTCclock>
		break;
 80013a0:	e00c      	b.n	80013bc <USR_BTN_handler+0x88>
	case 3:
		acquireSnapshot();
 80013a2:	f7ff fe9d 	bl	80010e0 <acquireSnapshot>
		evaluate_flag = TRUE;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <USR_BTN_handler+0xac>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
	case 4:
		acquireSnapshot();
 80013ac:	f7ff fe98 	bl	80010e0 <acquireSnapshot>
		transmit_flag = TRUE;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <USR_BTN_handler+0xa8>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
		evaluate_flag = TRUE;
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <USR_BTN_handler+0xac>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
	}
	command = 0;								//	reset command
 80013bc:	2300      	movs	r3, #0
 80013be:	603b      	str	r3, [r7, #0]
	return;
 80013c0:	e000      	b.n	80013c4 <USR_BTN_handler+0x90>
		return;
 80013c2:	bf00      	nop
}
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20003a10 	.word	0x20003a10
 80013d0:	08010f5c 	.word	0x08010f5c
 80013d4:	08010fc4 	.word	0x08010fc4
 80013d8:	08010fec 	.word	0x08010fec
 80013dc:	200012e0 	.word	0x200012e0
 80013e0:	200012da 	.word	0x200012da

080013e4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // GPIO interrupt handler
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == 0x2000){ // if user btn is pressed
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013f4:	d102      	bne.n	80013fc <HAL_GPIO_EXTI_Callback+0x18>
		USR_BTN_handler();
 80013f6:	f7ff ff9d 	bl	8001334 <USR_BTN_handler>
	}
	else{
		printf("Unknown GPIO interrupt happened");
	}
}
 80013fa:	e002      	b.n	8001402 <HAL_GPIO_EXTI_Callback+0x1e>
		printf("Unknown GPIO interrupt happened");
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <HAL_GPIO_EXTI_Callback+0x28>)
 80013fe:	f00a ff63 	bl	800c2c8 <iprintf>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	08011020 	.word	0x08011020

08001410 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  // this is executed when the data is received from HUART
	if(Rx_data[0] == '1'){ // this is for training purposes - transmit the features
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_UART_RxCpltCallback+0x64>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b31      	cmp	r3, #49	; 0x31
 800141e:	d105      	bne.n	800142c <HAL_UART_RxCpltCallback+0x1c>
		acquireSnapshot();
 8001420:	f7ff fe5e 	bl	80010e0 <acquireSnapshot>
		transmit_flag = TRUE;
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_UART_RxCpltCallback+0x68>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
		print_timeserie_flag = TRUE;
	}
	else{
		Error_Handler();
	}
}
 800142a:	e01e      	b.n	800146a <HAL_UART_RxCpltCallback+0x5a>
	else if (Rx_data[0] == '2') { // this is for testing - transmit the features and the metric
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_UART_RxCpltCallback+0x64>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b32      	cmp	r3, #50	; 0x32
 8001432:	d108      	bne.n	8001446 <HAL_UART_RxCpltCallback+0x36>
		acquireSnapshot();
 8001434:	f7ff fe54 	bl	80010e0 <acquireSnapshot>
		transmit_flag = TRUE;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_UART_RxCpltCallback+0x68>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
		evaluate_flag = TRUE;
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_UART_RxCpltCallback+0x6c>)
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
}
 8001444:	e011      	b.n	800146a <HAL_UART_RxCpltCallback+0x5a>
	else if (Rx_data[0] == '3') { // for debug, transmit the timeserie, and the feature, and the metric
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_UART_RxCpltCallback+0x64>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b33      	cmp	r3, #51	; 0x33
 800144c:	d10b      	bne.n	8001466 <HAL_UART_RxCpltCallback+0x56>
		acquireSnapshot();
 800144e:	f7ff fe47 	bl	80010e0 <acquireSnapshot>
		transmit_flag = TRUE;
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_UART_RxCpltCallback+0x68>)
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
		evaluate_flag = TRUE;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_UART_RxCpltCallback+0x6c>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
		print_timeserie_flag = TRUE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_UART_RxCpltCallback+0x70>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]
}
 8001464:	e001      	b.n	800146a <HAL_UART_RxCpltCallback+0x5a>
		Error_Handler();
 8001466:	f000 f857 	bl	8001518 <Error_Handler>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20003a14 	.word	0x20003a14
 8001478:	200012e0 	.word	0x200012e0
 800147c:	200012da 	.word	0x200012da
 8001480:	200012dc 	.word	0x200012dc

08001484 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6 && snap_request == TRUE){ // if the timer is the analog management and the conversion is REQUESTED
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d12f      	bne.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x70>
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d02b      	beq.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x70>
		// Get ADC value
		HAL_ADC_Start(&hadc1);
 800149c:	4819      	ldr	r0, [pc, #100]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800149e:	f000 ff67 	bl	8002370 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014a2:	f04f 31ff 	mov.w	r1, #4294967295
 80014a6:	4817      	ldr	r0, [pc, #92]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80014a8:	f001 f830 	bl	800250c <HAL_ADC_PollForConversion>
		adc_buf[timer_index]= HAL_ADC_GetValue(&hadc1); // save the value in the array
 80014ac:	4815      	ldr	r0, [pc, #84]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80014ae:	f001 f8b8 	bl	8002622 <HAL_ADC_GetValue>
 80014b2:	4601      	mov	r1, r0
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	b289      	uxth	r1, r1
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80014be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		HAL_GPIO_TogglePin(GPIOB, LED_GRE);			// for debug purposes
 80014c2:	2101      	movs	r1, #1
 80014c4:	4812      	ldr	r0, [pc, #72]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80014c6:	f002 f998 	bl	80037fa <HAL_GPIO_TogglePin>
		timer_index ++;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80014d4:	801a      	strh	r2, [r3, #0]
		if(timer_index>=ADC_BUF_LEN){					// if acquisition completed
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	f241 3287 	movw	r2, #4999	; 0x1387
 80014de:	4293      	cmp	r3, r2
 80014e0:	d908      	bls.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x70>
			timer_index=0;								// reset index for next time
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	801a      	strh	r2, [r3, #0]
			snap_recorded = TRUE; 						// conversion complete flag
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
			snap_request = 	FALSE;						// conversion completed, reset request
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000cfc 	.word	0x20000cfc
 8001500:	200012d8 	.word	0x200012d8
 8001504:	20000be4 	.word	0x20000be4
 8001508:	200039f4 	.word	0x200039f4
 800150c:	200012e4 	.word	0x200012e4
 8001510:	40020400 	.word	0x40020400
 8001514:	200012d9 	.word	0x200012d9

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, LED_RED, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001526:	4802      	ldr	r0, [pc, #8]	; (8001530 <Error_Handler+0x18>)
 8001528:	f002 f94e 	bl	80037c8 <HAL_GPIO_WritePin>
 800152c:	e7f8      	b.n	8001520 <Error_Handler+0x8>
 800152e:	bf00      	nop
 8001530:	40020400 	.word	0x40020400

08001534 <printDoubleArray>:
#include <string.h>
#include <math.h>
#include "wavelib.h"
#include "defines.h"

void printDoubleArray(double *array, int len){
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < len; ++i) {
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	e00b      	b.n	800155c <printDoubleArray+0x28>
		printf("%e\t",array[i]);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	4806      	ldr	r0, [pc, #24]	; (800156c <printDoubleArray+0x38>)
 8001552:	f00a feb9 	bl	800c2c8 <iprintf>
	for (int i = 0; i < len; ++i) {
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3301      	adds	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	dbef      	blt.n	8001544 <printDoubleArray+0x10>
	}
	return;
 8001564:	bf00      	nop
}
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	08011040 	.word	0x08011040

08001570 <printUint16_tArray>:

void printUint16_tArray(uint16_t *array, int len){
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < len; ++i) {
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	e00b      	b.n	8001598 <printUint16_tArray+0x28>
		printf("%u\t",array[i]);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	4806      	ldr	r0, [pc, #24]	; (80015a8 <printUint16_tArray+0x38>)
 800158e:	f00a fe9b 	bl	800c2c8 <iprintf>
	for (int i = 0; i < len; ++i) {
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbef      	blt.n	8001580 <printUint16_tArray+0x10>
	}
	return;
 80015a0:	bf00      	nop
}
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	08011044 	.word	0x08011044

080015ac <myprintf>:

void myprintf(const char* format, ...) {
 80015ac:	b40f      	push	{r0, r1, r2, r3}
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
        va_list args;
        va_start(args, format);
        vprintf(format, args);
        va_end(args);
    }
    return;
 80015b4:	bf00      	nop
}
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	b004      	add	sp, #16
 80015c0:	4770      	bx	lr

080015c2 <norm2>:
 *
 * @param array The array for which to calculate the squared norm.
 * @param length The number of elements in the array.
 * @return The squared norm of the array.
 */
double norm2(double *array, int length) {
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
	double sum = 0.0;
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < length; ++i) {
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	e016      	b.n	800160c <norm2+0x4a>
		sum += array[i] * array[i];
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	ed93 6b00 	vldr	d6, [r3]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	ed93 7b00 	vldr	d7, [r3]
 80015f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015fa:	ed97 6b04 	vldr	d6, [r7, #16]
 80015fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001602:	ed87 7b04 	vstr	d7, [r7, #16]
	for (int i = 0; i < length; ++i) {
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3301      	adds	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbe4      	blt.n	80015de <norm2+0x1c>
	}
	return sqrt(sum);
 8001614:	ed97 0b04 	vldr	d0, [r7, #16]
 8001618:	f00e ff1e 	bl	8010458 <sqrt>
 800161c:	eeb0 7b40 	vmov.f64	d7, d0
}
 8001620:	eeb0 0b47 	vmov.f64	d0, d7
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <packetCoeff>:
 * @param length The length of the input array.
 * @param tree_depth The depth of the packet tree.
 * @param coefs The output array to store the computed powers.
 * @return A pointer to the array of computed powers.
 */
double *packetCoeff(double *inp, int length, int tree_depth, double *coefs) { // compute the power of each packet coefficient in the lowest level
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b08f      	sub	sp, #60	; 0x3c
 8001630:	af02      	add	r7, sp, #8
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
	int N, len;
	int coef_len;
	coef_len = round(pow(2,tree_depth)); // the nodes in the lowest level are 2^depth
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001644:	eeb0 1b47 	vmov.f64	d1, d7
 8001648:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800164c:	f00f f8c0 	bl	80107d0 <pow>
 8001650:	eeb0 7b40 	vmov.f64	d7, d0
 8001654:	eeb0 0b47 	vmov.f64	d0, d7
 8001658:	f00f fb86 	bl	8010d68 <round>
 800165c:	eeb0 7b40 	vmov.f64	d7, d0
 8001660:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001664:	ee17 3a90 	vmov	r3, s15
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28

	wave_object obj;
	wtree_object wt;

	char *name = "db10";
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <packetCoeff+0xf8>)
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
	obj = wave_init(name); // Initialize the wavelet
 800166e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001670:	f008 fcec 	bl	800a04c <wave_init>
 8001674:	6238      	str	r0, [r7, #32]
	N = length;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	61fb      	str	r3, [r7, #28]

	wt = wtree_init(obj, N, tree_depth); // Initialize the wavelet transform object
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	69f9      	ldr	r1, [r7, #28]
 800167e:	6a38      	ldr	r0, [r7, #32]
 8001680:	f008 fd58 	bl	800a134 <wtree_init>
 8001684:	61b8      	str	r0, [r7, #24]
	setWTREEExtension(wt, "sym"); // Options are "per" and "sym". Symmetric is the default option
 8001686:	4928      	ldr	r1, [pc, #160]	; (8001728 <packetCoeff+0xfc>)
 8001688:	69b8      	ldr	r0, [r7, #24]
 800168a:	f009 fd29 	bl	800b0e0 <setWTREEExtension>

	wtree(wt, inp);
 800168e:	68f9      	ldr	r1, [r7, #12]
 8001690:	69b8      	ldr	r0, [r7, #24]
 8001692:	f009 fa15 	bl	800aac0 <wtree>
	// wtree_summary(wt); too much information - reenable if needed

	len = getWTREENodelength(wt, tree_depth); //because the lowest level is J
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	69b8      	ldr	r0, [r7, #24]
 800169a:	f009 fc6f 	bl	800af7c <getWTREENodelength>
 800169e:	6178      	str	r0, [r7, #20]
	myprintf(" \r\n %d", len);
 80016a0:	6979      	ldr	r1, [r7, #20]
 80016a2:	4822      	ldr	r0, [pc, #136]	; (800172c <packetCoeff+0x100>)
 80016a4:	f7ff ff82 	bl	80015ac <myprintf>
	myprintf(" \r\n");
 80016a8:	4821      	ldr	r0, [pc, #132]	; (8001730 <packetCoeff+0x104>)
 80016aa:	f7ff ff7f 	bl	80015ac <myprintf>

	double *oup = (double *)malloc(sizeof(double) * len);
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f009 fdbc 	bl	800b230 <malloc>
 80016b8:	4603      	mov	r3, r0
 80016ba:	613b      	str	r3, [r7, #16]

	for(int node_index = 0; node_index < coef_len; node_index++){
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c0:	e01b      	b.n	80016fa <packetCoeff+0xce>
		myprintf("Node [%d %d] Coefficients :  \r\n", tree_depth, node_index);
 80016c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	481b      	ldr	r0, [pc, #108]	; (8001734 <packetCoeff+0x108>)
 80016c8:	f7ff ff70 	bl	80015ac <myprintf>
		getWTREECoeffs(wt, tree_depth, node_index, oup, len);
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	69b8      	ldr	r0, [r7, #24]
 80016d8:	f009 fc7c 	bl	800afd4 <getWTREECoeffs>
		coefs[node_index] = norm2(oup,len);
 80016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	18d4      	adds	r4, r2, r3
 80016e4:	6979      	ldr	r1, [r7, #20]
 80016e6:	6938      	ldr	r0, [r7, #16]
 80016e8:	f7ff ff6b 	bl	80015c2 <norm2>
 80016ec:	eeb0 7b40 	vmov.f64	d7, d0
 80016f0:	ed84 7b00 	vstr	d7, [r4]
	for(int node_index = 0; node_index < coef_len; node_index++){
 80016f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f6:	3301      	adds	r3, #1
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fe:	429a      	cmp	r2, r3
 8001700:	dbdf      	blt.n	80016c2 <packetCoeff+0x96>
	}
	free(oup);
 8001702:	6938      	ldr	r0, [r7, #16]
 8001704:	f009 fd9c 	bl	800b240 <free>
	free(inp);
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f009 fd99 	bl	800b240 <free>
	wave_free(obj);
 800170e:	6a38      	ldr	r0, [r7, #32]
 8001710:	f009 fd16 	bl	800b140 <wave_free>
	wtree_free(wt);
 8001714:	69b8      	ldr	r0, [r7, #24]
 8001716:	f009 fd1e 	bl	800b156 <wtree_free>

	return coefs;
 800171a:	683b      	ldr	r3, [r7, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3734      	adds	r7, #52	; 0x34
 8001720:	46bd      	mov	sp, r7
 8001722:	bd90      	pop	{r4, r7, pc}
 8001724:	08011048 	.word	0x08011048
 8001728:	08011050 	.word	0x08011050
 800172c:	08011054 	.word	0x08011054
 8001730:	0801105c 	.word	0x0801105c
 8001734:	08011060 	.word	0x08011060

08001738 <featureExtractor>:

double *featureExtractor(	uint16_t *time_array,			// time-domain snapshot
							int len_time_array,				// length of time-domain snapshot
							int tree_depth,					// depth of the wavelet decomposition tree
							double *out_features_array)		// output array of features
{
 8001738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800173c:	b097      	sub	sp, #92	; 0x5c
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	466b      	mov	r3, sp
 800174a:	461e      	mov	r6, r3
	// cast the input array to double
	double time_array_double[len_time_array];
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	1e4b      	subs	r3, r1, #1
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001752:	460a      	mov	r2, r1
 8001754:	2300      	movs	r3, #0
 8001756:	4690      	mov	r8, r2
 8001758:	4699      	mov	r9, r3
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001766:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800176a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800176e:	460a      	mov	r2, r1
 8001770:	2300      	movs	r3, #0
 8001772:	4614      	mov	r4, r2
 8001774:	461d      	mov	r5, r3
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	01ab      	lsls	r3, r5, #6
 8001780:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8001784:	01a2      	lsls	r2, r4, #6
 8001786:	460b      	mov	r3, r1
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	3307      	adds	r3, #7
 800178c:	08db      	lsrs	r3, r3, #3
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	ebad 0d03 	sub.w	sp, sp, r3
 8001794:	466b      	mov	r3, sp
 8001796:	3307      	adds	r3, #7
 8001798:	08db      	lsrs	r3, r3, #3
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < len_time_array; ++i) {
 800179e:	2300      	movs	r3, #0
 80017a0:	657b      	str	r3, [r7, #84]	; 0x54
 80017a2:	e011      	b.n	80017c8 <featureExtractor+0x90>
    	time_array_double[i] = (double)time_array[i];
 80017a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80017b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0; i < len_time_array; ++i) {
 80017c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c4:	3301      	adds	r3, #1
 80017c6:	657b      	str	r3, [r7, #84]	; 0x54
 80017c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbe9      	blt.n	80017a4 <featureExtractor+0x6c>
    }

	myprintf("Time array converted to double: \r\n");
 80017d0:	486c      	ldr	r0, [pc, #432]	; (8001984 <featureExtractor+0x24c>)
 80017d2:	f7ff feeb 	bl	80015ac <myprintf>
    for(int i = 0; i<len_time_array; i++){
 80017d6:	2300      	movs	r3, #0
 80017d8:	653b      	str	r3, [r7, #80]	; 0x50
 80017da:	e00b      	b.n	80017f4 <featureExtractor+0xbc>
        myprintf("%e\t",time_array_double[i]);
 80017dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	4867      	ldr	r0, [pc, #412]	; (8001988 <featureExtractor+0x250>)
 80017ea:	f7ff fedf 	bl	80015ac <myprintf>
    for(int i = 0; i<len_time_array; i++){
 80017ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017f0:	3301      	adds	r3, #1
 80017f2:	653b      	str	r3, [r7, #80]	; 0x50
 80017f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dbef      	blt.n	80017dc <featureExtractor+0xa4>
    }
	// compute the mean of the time-domain snapshot
	double mean = 0;
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	for (int i = 0; i < len_time_array; ++i) {
 8001808:	2300      	movs	r3, #0
 800180a:	647b      	str	r3, [r7, #68]	; 0x44
 800180c:	e00e      	b.n	800182c <featureExtractor+0xf4>
		mean += time_array_double[i];
 800180e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	ed93 7b00 	vldr	d7, [r3]
 800181a:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 800181e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001822:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	for (int i = 0; i < len_time_array; ++i) {
 8001826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001828:	3301      	adds	r3, #1
 800182a:	647b      	str	r3, [r7, #68]	; 0x44
 800182c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	429a      	cmp	r2, r3
 8001832:	dbec      	blt.n	800180e <featureExtractor+0xd6>
	}
	mean /= (double) len_time_array;
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800183e:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 8001842:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001846:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	// compute the energy of the time-domain snapshot
	double energy = 0;
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	for (int i = 0; i < len_time_array; ++i) {
 8001856:	2300      	movs	r3, #0
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
 800185a:	e016      	b.n	800188a <featureExtractor+0x152>
		energy += pow(time_array_double[i],2);
 800185c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800185e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4413      	add	r3, r2
 8001864:	ed93 7b00 	vldr	d7, [r3]
 8001868:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800186c:	eeb0 0b47 	vmov.f64	d0, d7
 8001870:	f00e ffae 	bl	80107d0 <pow>
 8001874:	eeb0 6b40 	vmov.f64	d6, d0
 8001878:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800187c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001880:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	for (int i = 0; i < len_time_array; ++i) {
 8001884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001886:	3301      	adds	r3, #1
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
 800188a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	429a      	cmp	r2, r3
 8001890:	dbe4      	blt.n	800185c <featureExtractor+0x124>
	}
	// compute the variance of the time-domain snapshot
	double variance = 0;
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double mean_energy = energy/len_time_array;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018a8:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 80018ac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018b0:	ed87 7b06 	vstr	d7, [r7, #24]
	variance = mean_energy - pow(mean,2);
 80018b4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80018b8:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80018bc:	f00e ff88 	bl	80107d0 <pow>
 80018c0:	eeb0 6b40 	vmov.f64	d6, d0
 80018c4:	ed97 7b06 	vldr	d7, [r7, #24]
 80018c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80018cc:	ed87 7b08 	vstr	d7, [r7, #32]

	// assign the features to the output array
	out_features_array[0] = mean;
 80018d0:	6839      	ldr	r1, [r7, #0]
 80018d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018d6:	e9c1 2300 	strd	r2, r3, [r1]
	out_features_array[1] = energy;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	f103 0108 	add.w	r1, r3, #8
 80018e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018e4:	e9c1 2300 	strd	r2, r3, [r1]
	out_features_array[2] = variance;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f103 0110 	add.w	r1, r3, #16
 80018ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018f2:	e9c1 2300 	strd	r2, r3, [r1]

	// compute the wavelet decomposition of the time-domain snapshot
	int len = round(pow(2,tree_depth)); // the nodes in the lowest level are 2^depth
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001900:	eeb0 1b47 	vmov.f64	d1, d7
 8001904:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001908:	f00e ff62 	bl	80107d0 <pow>
 800190c:	eeb0 7b40 	vmov.f64	d7, d0
 8001910:	eeb0 0b47 	vmov.f64	d0, d7
 8001914:	f00f fa28 	bl	8010d68 <round>
 8001918:	eeb0 7b40 	vmov.f64	d7, d0
 800191c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001920:	ee17 3a90 	vmov	r3, s15
 8001924:	617b      	str	r3, [r7, #20]
	double *coefs = (double *)malloc(sizeof(double) * len);
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4618      	mov	r0, r3
 800192c:	f009 fc80 	bl	800b230 <malloc>
 8001930:	4603      	mov	r3, r0
 8001932:	613b      	str	r3, [r7, #16]
	coefs = packetCoeff(time_array_double, len_time_array, tree_depth, coefs);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800193c:	f7ff fe76 	bl	800162c <packetCoeff>
 8001940:	6138      	str	r0, [r7, #16]

	// assign the features to the output array
	for (int i = 0; i < len; ++i) {
 8001942:	2300      	movs	r3, #0
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
 8001946:	e00f      	b.n	8001968 <featureExtractor+0x230>
		out_features_array[i+3] = coefs[i];
 8001948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4413      	add	r3, r2
 8001950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001952:	3203      	adds	r2, #3
 8001954:	00d2      	lsls	r2, r2, #3
 8001956:	6839      	ldr	r1, [r7, #0]
 8001958:	4411      	add	r1, r2
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < len; ++i) {
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001964:	3301      	adds	r3, #1
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
 8001968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbeb      	blt.n	8001948 <featureExtractor+0x210>
	}

	// free the memory
	free(coefs);
 8001970:	6938      	ldr	r0, [r7, #16]
 8001972:	f009 fc65 	bl	800b240 <free>

	return out_features_array;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	46b5      	mov	sp, r6
}
 800197a:	4618      	mov	r0, r3
 800197c:	375c      	adds	r7, #92	; 0x5c
 800197e:	46bd      	mov	sp, r7
 8001980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001984:	08011080 	.word	0x08011080
 8001988:	08011040 	.word	0x08011040

0800198c <eucDist>:

double eucDist(double *arr1, double *arr2, int len){ // calculate euclidian distance
 800198c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001990:	b089      	sub	sp, #36	; 0x24
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	466b      	mov	r3, sp
 800199c:	461e      	mov	r6, r3
	//printDoubleArray(arr1, len);
	//printDoubleArray(arr2, len);
	double diff[len];
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	1e4b      	subs	r3, r1, #1
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	460a      	mov	r2, r1
 80019a6:	2300      	movs	r3, #0
 80019a8:	4690      	mov	r8, r2
 80019aa:	4699      	mov	r9, r3
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019b8:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019bc:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019c0:	460a      	mov	r2, r1
 80019c2:	2300      	movs	r3, #0
 80019c4:	4614      	mov	r4, r2
 80019c6:	461d      	mov	r5, r3
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	01ab      	lsls	r3, r5, #6
 80019d2:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80019d6:	01a2      	lsls	r2, r4, #6
 80019d8:	460b      	mov	r3, r1
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	3307      	adds	r3, #7
 80019de:	08db      	lsrs	r3, r3, #3
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	ebad 0d03 	sub.w	sp, sp, r3
 80019e6:	466b      	mov	r3, sp
 80019e8:	3307      	adds	r3, #7
 80019ea:	08db      	lsrs	r3, r3, #3
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	617b      	str	r3, [r7, #20]
	for(int i=0; i<len;i++){							// calculate difference
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	e016      	b.n	8001a24 <eucDist+0x98>
		diff[i]=arr1[i]-arr2[i];
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	ed93 6b00 	vldr	d6, [r3]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	4413      	add	r3, r2
 8001a0a:	ed93 7b00 	vldr	d7, [r3]
 8001a0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0; i<len;i++){							// calculate difference
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3301      	adds	r3, #1
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dbe4      	blt.n	80019f6 <eucDist+0x6a>
	}
	return norm2(diff,len);
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff fdc7 	bl	80015c2 <norm2>
 8001a34:	eeb0 7b40 	vmov.f64	d7, d0
 8001a38:	46b5      	mov	sp, r6
}
 8001a3a:	eeb0 0b47 	vmov.f64	d0, d7
 8001a3e:	3724      	adds	r7, #36	; 0x24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001a48 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <RetargetInit+0x28>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <RetargetInit+0x2c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6898      	ldr	r0, [r3, #8]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2202      	movs	r2, #2
 8001a60:	2100      	movs	r1, #0
 8001a62:	f00a fcb1 	bl	800c3c8 <setvbuf>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20003a28 	.word	0x20003a28
 8001a74:	200008e0 	.word	0x200008e0

08001a78 <_isatty>:

int _isatty(int fd) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db04      	blt.n	8001a90 <_isatty+0x18>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	dc01      	bgt.n	8001a90 <_isatty+0x18>
    return 1;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e005      	b.n	8001a9c <_isatty+0x24>

  errno = EBADF;
 8001a90:	f00a feb8 	bl	800c804 <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2209      	movs	r2, #9
 8001a98:	601a      	str	r2, [r3, #0]
  return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_write>:

int _write(int fd, char* ptr, int len) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d002      	beq.n	8001abc <_write+0x18>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d111      	bne.n	8001ae0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <_write+0x54>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	f004 f82f 	bl	8005b2c <HAL_UART_Transmit>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <_write+0x38>
      return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	e008      	b.n	8001aee <_write+0x4a>
    else
      return EIO;
 8001adc:	2305      	movs	r3, #5
 8001ade:	e006      	b.n	8001aee <_write+0x4a>
  }
  errno = EBADF;
 8001ae0:	f00a fe90 	bl	800c804 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2209      	movs	r2, #9
 8001ae8:	601a      	str	r2, [r3, #0]
  return -1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20003a28 	.word	0x20003a28

08001afc <_close>:

int _close(int fd) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db04      	blt.n	8001b14 <_close+0x18>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	dc01      	bgt.n	8001b14 <_close+0x18>
    return 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e006      	b.n	8001b22 <_close+0x26>

  errno = EBADF;
 8001b14:	f00a fe76 	bl	800c804 <__errno>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2209      	movs	r2, #9
 8001b1c:	601a      	str	r2, [r3, #0]
  return -1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001b36:	f00a fe65 	bl	800c804 <__errno>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2209      	movs	r2, #9
 8001b3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_read>:

int _read(int fd, char* ptr, int len) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d110      	bne.n	8001b80 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <_read+0x4c>)
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	2201      	movs	r2, #1
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	f004 f862 	bl	8005c32 <HAL_UART_Receive>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <_read+0x30>
      return 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e008      	b.n	8001b8e <_read+0x42>
    else
      return EIO;
 8001b7c:	2305      	movs	r3, #5
 8001b7e:	e006      	b.n	8001b8e <_read+0x42>
  }
  errno = EBADF;
 8001b80:	f00a fe40 	bl	800c804 <__errno>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2209      	movs	r2, #9
 8001b88:	601a      	str	r2, [r3, #0]
  return -1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20003a28 	.word	0x20003a28

08001b9c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db08      	blt.n	8001bbe <_fstat+0x22>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	dc05      	bgt.n	8001bbe <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb8:	605a      	str	r2, [r3, #4]
    return 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e005      	b.n	8001bca <_fstat+0x2e>
  }

  errno = EBADF;
 8001bbe:	f00a fe21 	bl	800c804 <__errno>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2209      	movs	r2, #9
 8001bc6:	601a      	str	r2, [r3, #0]
  return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_MspInit+0x44>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_MspInit+0x44>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_MspInit+0x44>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_MspInit+0x44>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <HAL_MspInit+0x44>)
 8001bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_MspInit+0x44>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800

08001c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <HAL_ADC_MspInit+0x74>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d123      	bne.n	8001c86 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_ADC_MspInit+0x78>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <HAL_ADC_MspInit+0x78>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_ADC_MspInit+0x78>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_ADC_MspInit+0x78>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <HAL_ADC_MspInit+0x78>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_ADC_MspInit+0x78>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c6e:	2308      	movs	r3, #8
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c72:	2303      	movs	r3, #3
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <HAL_ADC_MspInit+0x7c>)
 8001c82:	f001 fbf5 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	; 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40012000 	.word	0x40012000
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020000 	.word	0x40020000

08001c9c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08e      	sub	sp, #56	; 0x38
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a4e      	ldr	r2, [pc, #312]	; (8001df4 <HAL_ETH_MspInit+0x158>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	f040 8096 	bne.w	8001dec <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001cc0:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	4a4c      	ldr	r2, [pc, #304]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001cc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cca:	6313      	str	r3, [r2, #48]	; 0x30
 8001ccc:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd4:	623b      	str	r3, [r7, #32]
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	4a46      	ldr	r2, [pc, #280]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001cde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce4:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	4a40      	ldr	r2, [pc, #256]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001cf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfc:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d08:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	4a3a      	ldr	r2, [pc, #232]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6313      	str	r3, [r2, #48]	; 0x30
 8001d14:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	4a34      	ldr	r2, [pc, #208]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2c:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d38:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	4a2e      	ldr	r2, [pc, #184]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	6313      	str	r3, [r2, #48]	; 0x30
 8001d44:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5c:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <HAL_ETH_MspInit+0x15c>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d68:	2332      	movs	r3, #50	; 0x32
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d78:	230b      	movs	r3, #11
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d80:	4619      	mov	r1, r3
 8001d82:	481e      	ldr	r0, [pc, #120]	; (8001dfc <HAL_ETH_MspInit+0x160>)
 8001d84:	f001 fb74 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d88:	2386      	movs	r3, #134	; 0x86
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d98:	230b      	movs	r3, #11
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da0:	4619      	mov	r1, r3
 8001da2:	4817      	ldr	r0, [pc, #92]	; (8001e00 <HAL_ETH_MspInit+0x164>)
 8001da4:	f001 fb64 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dba:	230b      	movs	r3, #11
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	480f      	ldr	r0, [pc, #60]	; (8001e04 <HAL_ETH_MspInit+0x168>)
 8001dc6:	f001 fb53 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001dca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ddc:	230b      	movs	r3, #11
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de4:	4619      	mov	r1, r3
 8001de6:	4808      	ldr	r0, [pc, #32]	; (8001e08 <HAL_ETH_MspInit+0x16c>)
 8001de8:	f001 fb42 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001dec:	bf00      	nop
 8001dee:	3738      	adds	r7, #56	; 0x38
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40028000 	.word	0x40028000
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40021800 	.word	0x40021800

08001e0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0a6      	sub	sp, #152	; 0x98
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	2290      	movs	r2, #144	; 0x90
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f00a fc79 	bl	800c714 <memset>
  if(hrtc->Instance==RTC)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <HAL_RTC_MspInit+0x54>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d114      	bne.n	8001e56 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e34:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 fb8c 	bl	8004558 <HAL_RCCEx_PeriphCLKConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001e46:	f7ff fb67 	bl	8001518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RTC_MspInit+0x58>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <HAL_RTC_MspInit+0x58>)
 8001e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e54:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e56:	bf00      	nop
 8001e58:	3798      	adds	r7, #152	; 0x98
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40002800 	.word	0x40002800
 8001e64:	40023800 	.word	0x40023800

08001e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <HAL_TIM_Base_MspInit+0x44>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d113      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <HAL_TIM_Base_MspInit+0x48>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a0c      	ldr	r2, [pc, #48]	; (8001eb0 <HAL_TIM_Base_MspInit+0x48>)
 8001e80:	f043 0310 	orr.w	r3, r3, #16
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_TIM_Base_MspInit+0x48>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2036      	movs	r0, #54	; 0x36
 8001e98:	f000 fefb 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e9c:	2036      	movs	r0, #54	; 0x36
 8001e9e:	f000 ff14 	bl	8002cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40001000 	.word	0x40001000
 8001eb0:	40023800 	.word	0x40023800

08001eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b0ae      	sub	sp, #184	; 0xb8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2290      	movs	r2, #144	; 0x90
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f00a fc1d 	bl	800c714 <memset>
  if(huart->Instance==USART3)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a26      	ldr	r2, [pc, #152]	; (8001f78 <HAL_UART_MspInit+0xc4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d144      	bne.n	8001f6e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f002 fb30 	bl	8004558 <HAL_RCCEx_PeriphCLKConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001efe:	f7ff fb0b 	bl	8001518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f02:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_UART_MspInit+0xc8>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_UART_MspInit+0xc8>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_UART_MspInit+0xc8>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_UART_MspInit+0xc8>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <HAL_UART_MspInit+0xc8>)
 8001f20:	f043 0308 	orr.w	r3, r3, #8
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_UART_MspInit+0xc8>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f4c:	2307      	movs	r3, #7
 8001f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f56:	4619      	mov	r1, r3
 8001f58:	4809      	ldr	r0, [pc, #36]	; (8001f80 <HAL_UART_MspInit+0xcc>)
 8001f5a:	f001 fa89 	bl	8003470 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	2027      	movs	r0, #39	; 0x27
 8001f64:	f000 fe95 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f68:	2027      	movs	r0, #39	; 0x27
 8001f6a:	f000 feae 	bl	8002cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f6e:	bf00      	nop
 8001f70:	37b8      	adds	r7, #184	; 0xb8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40004800 	.word	0x40004800
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020c00 	.word	0x40020c00

08001f84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b0ae      	sub	sp, #184	; 0xb8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2290      	movs	r2, #144	; 0x90
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f00a fbb5 	bl	800c714 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb2:	d159      	bne.n	8002068 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001fb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fb8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 fac7 	bl	8004558 <HAL_RCCEx_PeriphCLKConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001fd0:	f7ff faa2 	bl	8001518 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	4a25      	ldr	r2, [pc, #148]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe0:	4b23      	ldr	r3, [pc, #140]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002006:	230a      	movs	r3, #10
 8002008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002010:	4619      	mov	r1, r3
 8002012:	4818      	ldr	r0, [pc, #96]	; (8002074 <HAL_PCD_MspInit+0xf0>)
 8002014:	f001 fa2c 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800201c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002030:	4619      	mov	r1, r3
 8002032:	4810      	ldr	r0, [pc, #64]	; (8002074 <HAL_PCD_MspInit+0xf0>)
 8002034:	f001 fa1c 	bl	8003470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_PCD_MspInit+0xec>)
 800203a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <HAL_PCD_MspInit+0xec>)
 800203e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002042:	6353      	str	r3, [r2, #52]	; 0x34
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8002046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8002056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205a:	6453      	str	r3, [r2, #68]	; 0x44
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <HAL_PCD_MspInit+0xec>)
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002068:	bf00      	nop
 800206a:	37b8      	adds	r7, #184	; 0xb8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	40020000 	.word	0x40020000

08002078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800207c:	e7fe      	b.n	800207c <NMI_Handler+0x4>

0800207e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002082:	e7fe      	b.n	8002082 <HardFault_Handler+0x4>

08002084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <MemManage_Handler+0x4>

0800208a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208e:	e7fe      	b.n	800208e <BusFault_Handler+0x4>

08002090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <UsageFault_Handler+0x4>

08002096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c4:	f000 f8cc 	bl	8002260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <USART3_IRQHandler+0x10>)
 80020d2:	f003 feb7 	bl	8005e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000d48 	.word	0x20000d48

080020e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80020e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020e8:	f001 fba2 	bl	8003830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <TIM6_DAC_IRQHandler+0x10>)
 80020f6:	f003 fa37 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000cfc 	.word	0x20000cfc

08002104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800210c:	4a14      	ldr	r2, [pc, #80]	; (8002160 <_sbrk+0x5c>)
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <_sbrk+0x60>)
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <_sbrk+0x64>)
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <_sbrk+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002134:	f00a fb66 	bl	800c804 <__errno>
 8002138:	4603      	mov	r3, r0
 800213a:	220c      	movs	r2, #12
 800213c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e009      	b.n	8002158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <_sbrk+0x64>)
 8002154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20080000 	.word	0x20080000
 8002164:	00000400 	.word	0x00000400
 8002168:	20003a2c 	.word	0x20003a2c
 800216c:	20003b80 	.word	0x20003b80

08002170 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <SystemInit+0x20>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217a:	4a05      	ldr	r2, [pc, #20]	; (8002190 <SystemInit+0x20>)
 800217c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002198:	480d      	ldr	r0, [pc, #52]	; (80021d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800219a:	490e      	ldr	r1, [pc, #56]	; (80021d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800219c:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021b0:	4c0b      	ldr	r4, [pc, #44]	; (80021e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021be:	f7ff ffd7 	bl	8002170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021c2:	f00a fb25 	bl	800c810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021c6:	f7fe fc15 	bl	80009f4 <main>
  bx  lr    
 80021ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021cc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80021d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d4:	20000a50 	.word	0x20000a50
  ldr r2, =_sidata
 80021d8:	0801aad0 	.word	0x0801aad0
  ldr r2, =_sbss
 80021dc:	20000b90 	.word	0x20000b90
  ldr r4, =_ebss
 80021e0:	20003b80 	.word	0x20003b80

080021e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e4:	e7fe      	b.n	80021e4 <ADC_IRQHandler>

080021e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ea:	2003      	movs	r0, #3
 80021ec:	f000 fd46 	bl	8002c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f0:	2000      	movs	r0, #0
 80021f2:	f000 f805 	bl	8002200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f6:	f7ff fced 	bl	8001bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_InitTick+0x54>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_InitTick+0x58>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002216:	fbb3 f3f1 	udiv	r3, r3, r1
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fd61 	bl	8002ce6 <HAL_SYSTICK_Config>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e00e      	b.n	800224c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b0f      	cmp	r3, #15
 8002232:	d80a      	bhi.n	800224a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002234:	2200      	movs	r2, #0
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f000 fd29 	bl	8002c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002240:	4a06      	ldr	r2, [pc, #24]	; (800225c <HAL_InitTick+0x5c>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e000      	b.n	800224c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000087c 	.word	0x2000087c
 8002258:	20000884 	.word	0x20000884
 800225c:	20000880 	.word	0x20000880

08002260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x20>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_IncTick+0x24>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4413      	add	r3, r2
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_IncTick+0x24>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000884 	.word	0x20000884
 8002284:	20003a30 	.word	0x20003a30

08002288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return uwTick;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_GetTick+0x14>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20003a30 	.word	0x20003a30

080022a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff ffee 	bl	8002288 <HAL_GetTick>
 80022ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d005      	beq.n	80022c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_Delay+0x44>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022c6:	bf00      	nop
 80022c8:	f7ff ffde 	bl	8002288 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d8f7      	bhi.n	80022c8 <HAL_Delay+0x28>
  {
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000884 	.word	0x20000884

080022e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e031      	b.n	8002362 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fc88 	bl	8001c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b00      	cmp	r3, #0
 8002324:	d116      	bne.n	8002354 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_ADC_Init+0x84>)
 800232c:	4013      	ands	r3, r2
 800232e:	f043 0202 	orr.w	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fad6 	bl	80028e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f023 0303 	bic.w	r3, r3, #3
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
 8002352:	e001      	b.n	8002358 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	ffffeefd 	.word	0xffffeefd

08002370 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_ADC_Start+0x1a>
 8002386:	2302      	movs	r3, #2
 8002388:	e0ad      	b.n	80024e6 <HAL_ADC_Start+0x176>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	d018      	beq.n	80023d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80023b0:	4b50      	ldr	r3, [pc, #320]	; (80024f4 <HAL_ADC_Start+0x184>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a50      	ldr	r2, [pc, #320]	; (80024f8 <HAL_ADC_Start+0x188>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	0c9a      	lsrs	r2, r3, #18
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80023c4:	e002      	b.n	80023cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f9      	bne.n	80023c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d175      	bne.n	80024cc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e4:	4b45      	ldr	r3, [pc, #276]	; (80024fc <HAL_ADC_Start+0x18c>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002406:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241a:	d106      	bne.n	800242a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	f023 0206 	bic.w	r2, r3, #6
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	645a      	str	r2, [r3, #68]	; 0x44
 8002428:	e002      	b.n	8002430 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002440:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002442:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <HAL_ADC_Start+0x190>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10f      	bne.n	800246e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d143      	bne.n	80024e4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	e03a      	b.n	80024e4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a24      	ldr	r2, [pc, #144]	; (8002504 <HAL_ADC_Start+0x194>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d10e      	bne.n	8002496 <HAL_ADC_Start+0x126>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d107      	bne.n	8002496 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002494:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_ADC_Start+0x190>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d120      	bne.n	80024e4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a18      	ldr	r2, [pc, #96]	; (8002508 <HAL_ADC_Start+0x198>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d11b      	bne.n	80024e4 <HAL_ADC_Start+0x174>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d114      	bne.n	80024e4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	e00b      	b.n	80024e4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f043 0210 	orr.w	r2, r3, #16
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	2000087c 	.word	0x2000087c
 80024f8:	431bde83 	.word	0x431bde83
 80024fc:	fffff8fe 	.word	0xfffff8fe
 8002500:	40012300 	.word	0x40012300
 8002504:	40012000 	.word	0x40012000
 8002508:	40012200 	.word	0x40012200

0800250c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002528:	d113      	bne.n	8002552 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002538:	d10b      	bne.n	8002552 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f043 0220 	orr.w	r2, r3, #32
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e063      	b.n	800261a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002552:	f7ff fe99 	bl	8002288 <HAL_GetTick>
 8002556:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002558:	e021      	b.n	800259e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d01d      	beq.n	800259e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_ADC_PollForConversion+0x6c>
 8002568:	f7ff fe8e 	bl	8002288 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d212      	bcs.n	800259e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b02      	cmp	r3, #2
 8002584:	d00b      	beq.n	800259e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f043 0204 	orr.w	r2, r3, #4
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e03d      	b.n	800261a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d1d6      	bne.n	800255a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0212 	mvn.w	r2, #18
 80025b4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d123      	bne.n	8002618 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d11f      	bne.n	8002618 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d111      	bne.n	8002618 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1c>
 8002654:	2302      	movs	r3, #2
 8002656:	e136      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x28a>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b09      	cmp	r3, #9
 8002666:	d93a      	bls.n	80026de <HAL_ADC_ConfigChannel+0xa2>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002670:	d035      	beq.n	80026de <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68d9      	ldr	r1, [r3, #12]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	3b1e      	subs	r3, #30
 8002688:	2207      	movs	r2, #7
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	400a      	ands	r2, r1
 8002696:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a8d      	ldr	r2, [pc, #564]	; (80028d4 <HAL_ADC_ConfigChannel+0x298>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d10a      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68d9      	ldr	r1, [r3, #12]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	061a      	lsls	r2, r3, #24
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026b6:	e035      	b.n	8002724 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68d9      	ldr	r1, [r3, #12]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	4618      	mov	r0, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4403      	add	r3, r0
 80026d0:	3b1e      	subs	r3, #30
 80026d2:	409a      	lsls	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026dc:	e022      	b.n	8002724 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6919      	ldr	r1, [r3, #16]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	2207      	movs	r2, #7
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43da      	mvns	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	400a      	ands	r2, r1
 8002700:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6919      	ldr	r1, [r3, #16]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	4618      	mov	r0, r3
 8002714:	4603      	mov	r3, r0
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4403      	add	r3, r0
 800271a:	409a      	lsls	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b06      	cmp	r3, #6
 800272a:	d824      	bhi.n	8002776 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	3b05      	subs	r3, #5
 800273e:	221f      	movs	r2, #31
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43da      	mvns	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	400a      	ands	r2, r1
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	4618      	mov	r0, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	3b05      	subs	r3, #5
 8002768:	fa00 f203 	lsl.w	r2, r0, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	635a      	str	r2, [r3, #52]	; 0x34
 8002774:	e04c      	b.n	8002810 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b0c      	cmp	r3, #12
 800277c:	d824      	bhi.n	80027c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	3b23      	subs	r3, #35	; 0x23
 8002790:	221f      	movs	r2, #31
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	400a      	ands	r2, r1
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4618      	mov	r0, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	3b23      	subs	r3, #35	; 0x23
 80027ba:	fa00 f203 	lsl.w	r2, r0, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
 80027c6:	e023      	b.n	8002810 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	3b41      	subs	r3, #65	; 0x41
 80027da:	221f      	movs	r2, #31
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43da      	mvns	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	400a      	ands	r2, r1
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	3b41      	subs	r3, #65	; 0x41
 8002804:	fa00 f203 	lsl.w	r2, r0, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a30      	ldr	r2, [pc, #192]	; (80028d8 <HAL_ADC_ConfigChannel+0x29c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10a      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1f4>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002822:	d105      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002824:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a2c      	ldr	r2, [pc, #176]	; (80028dc <HAL_ADC_ConfigChannel+0x2a0>)
 800282a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800282e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a28      	ldr	r2, [pc, #160]	; (80028d8 <HAL_ADC_ConfigChannel+0x29c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10f      	bne.n	800285a <HAL_ADC_ConfigChannel+0x21e>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b12      	cmp	r3, #18
 8002840:	d10b      	bne.n	800285a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002842:	4b26      	ldr	r3, [pc, #152]	; (80028dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a25      	ldr	r2, [pc, #148]	; (80028dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002848:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800284c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800284e:	4b23      	ldr	r3, [pc, #140]	; (80028dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4a22      	ldr	r2, [pc, #136]	; (80028dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002854:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002858:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1e      	ldr	r2, [pc, #120]	; (80028d8 <HAL_ADC_ConfigChannel+0x29c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d12b      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x280>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1a      	ldr	r2, [pc, #104]	; (80028d4 <HAL_ADC_ConfigChannel+0x298>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d003      	beq.n	8002876 <HAL_ADC_ConfigChannel+0x23a>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b11      	cmp	r3, #17
 8002874:	d122      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4a18      	ldr	r2, [pc, #96]	; (80028dc <HAL_ADC_ConfigChannel+0x2a0>)
 800287c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002880:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a15      	ldr	r2, [pc, #84]	; (80028dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002888:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800288c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a10      	ldr	r2, [pc, #64]	; (80028d4 <HAL_ADC_ConfigChannel+0x298>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_ADC_ConfigChannel+0x2a4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a11      	ldr	r2, [pc, #68]	; (80028e4 <HAL_ADC_ConfigChannel+0x2a8>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	0c9a      	lsrs	r2, r3, #18
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028ae:	e002      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f9      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	10000012 	.word	0x10000012
 80028d8:	40012000 	.word	0x40012000
 80028dc:	40012300 	.word	0x40012300
 80028e0:	2000087c 	.word	0x2000087c
 80028e4:	431bde83 	.word	0x431bde83

080028e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028f0:	4b78      	ldr	r3, [pc, #480]	; (8002ad4 <ADC_Init+0x1ec>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a77      	ldr	r2, [pc, #476]	; (8002ad4 <ADC_Init+0x1ec>)
 80028f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028fc:	4b75      	ldr	r3, [pc, #468]	; (8002ad4 <ADC_Init+0x1ec>)
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4973      	ldr	r1, [pc, #460]	; (8002ad4 <ADC_Init+0x1ec>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	021a      	lsls	r2, r3, #8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800293c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6899      	ldr	r1, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <ADC_Init+0x1f0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d022      	beq.n	80029c2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800298a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6899      	ldr	r1, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6899      	ldr	r1, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	e00f      	b.n	80029e2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0202 	bic.w	r2, r2, #2
 80029f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6899      	ldr	r1, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	005a      	lsls	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01b      	beq.n	8002a48 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	035a      	lsls	r2, r3, #13
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	e007      	b.n	8002a58 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	051a      	lsls	r2, r3, #20
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6899      	ldr	r1, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a9a:	025a      	lsls	r2, r3, #9
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6899      	ldr	r1, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	029a      	lsls	r2, r3, #10
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40012300 	.word	0x40012300
 8002ad8:	0f000001 	.word	0x0f000001

08002adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <__NVIC_SetPriorityGrouping+0x40>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af8:	4013      	ands	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <__NVIC_SetPriorityGrouping+0x40>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60d3      	str	r3, [r2, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00
 8002b20:	05fa0000 	.word	0x05fa0000

08002b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <__NVIC_GetPriorityGrouping+0x18>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	f003 0307 	and.w	r3, r3, #7
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	db0b      	blt.n	8002b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	4907      	ldr	r1, [pc, #28]	; (8002b78 <__NVIC_EnableIRQ+0x38>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2001      	movs	r0, #1
 8002b62:	fa00 f202 	lsl.w	r2, r0, r2
 8002b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000e100 	.word	0xe000e100

08002b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	db0a      	blt.n	8002ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	490c      	ldr	r1, [pc, #48]	; (8002bc8 <__NVIC_SetPriority+0x4c>)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba4:	e00a      	b.n	8002bbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4908      	ldr	r1, [pc, #32]	; (8002bcc <__NVIC_SetPriority+0x50>)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	3b04      	subs	r3, #4
 8002bb4:	0112      	lsls	r2, r2, #4
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	440b      	add	r3, r1
 8002bba:	761a      	strb	r2, [r3, #24]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000e100 	.word	0xe000e100
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	; 0x24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f1c3 0307 	rsb	r3, r3, #7
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	bf28      	it	cs
 8002bee:	2304      	movcs	r3, #4
 8002bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d902      	bls.n	8002c00 <NVIC_EncodePriority+0x30>
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3b03      	subs	r3, #3
 8002bfe:	e000      	b.n	8002c02 <NVIC_EncodePriority+0x32>
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	f04f 32ff 	mov.w	r2, #4294967295
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	401a      	ands	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c18:	f04f 31ff 	mov.w	r1, #4294967295
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	43d9      	mvns	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	4313      	orrs	r3, r2
         );
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3724      	adds	r7, #36	; 0x24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c48:	d301      	bcc.n	8002c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00f      	b.n	8002c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <SysTick_Config+0x40>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c56:	210f      	movs	r1, #15
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f7ff ff8e 	bl	8002b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <SysTick_Config+0x40>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <SysTick_Config+0x40>)
 8002c68:	2207      	movs	r2, #7
 8002c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	e000e010 	.word	0xe000e010

08002c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff29 	bl	8002adc <__NVIC_SetPriorityGrouping>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca4:	f7ff ff3e 	bl	8002b24 <__NVIC_GetPriorityGrouping>
 8002ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	6978      	ldr	r0, [r7, #20]
 8002cb0:	f7ff ff8e 	bl	8002bd0 <NVIC_EncodePriority>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff5d 	bl	8002b7c <__NVIC_SetPriority>
}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff31 	bl	8002b40 <__NVIC_EnableIRQ>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff ffa2 	bl	8002c38 <SysTick_Config>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d0c:	f7ff fabc 	bl	8002288 <HAL_GetTick>
 8002d10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d008      	beq.n	8002d30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e052      	b.n	8002dd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0216 	bic.w	r2, r2, #22
 8002d3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <HAL_DMA_Abort+0x62>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0208 	bic.w	r2, r2, #8
 8002d6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d80:	e013      	b.n	8002daa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d82:	f7ff fa81 	bl	8002288 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d90c      	bls.n	8002daa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2203      	movs	r2, #3
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e015      	b.n	8002dd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e4      	bne.n	8002d82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	223f      	movs	r2, #63	; 0x3f
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d004      	beq.n	8002dfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e00c      	b.n	8002e16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2205      	movs	r2, #5
 8002e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06a      	b.n	8002f0c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d106      	bne.n	8002e4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2223      	movs	r2, #35	; 0x23
 8002e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7fe ff27 	bl	8001c9c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4e:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <HAL_ETH_Init+0xf0>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	4a30      	ldr	r2, [pc, #192]	; (8002f14 <HAL_ETH_Init+0xf0>)
 8002e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e58:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5a:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_ETH_Init+0xf0>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <HAL_ETH_Init+0xf4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a2b      	ldr	r2, [pc, #172]	; (8002f18 <HAL_ETH_Init+0xf4>)
 8002e6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e70:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_ETH_Init+0xf4>)
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4927      	ldr	r1, [pc, #156]	; (8002f18 <HAL_ETH_Init+0xf4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002e80:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_ETH_Init+0xf4>)
 8002e82:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e9c:	f7ff f9f4 	bl	8002288 <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ea2:	e011      	b.n	8002ec8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ea4:	f7ff f9f0 	bl	8002288 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eb2:	d909      	bls.n	8002ec8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	22e0      	movs	r2, #224	; 0xe0
 8002ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e021      	b.n	8002f0c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1e4      	bne.n	8002ea4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f958 	bl	8003190 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f9ff 	bl	80032e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fa55 	bl	8003396 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f9bd 	bl	8003274 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2210      	movs	r2, #16
 8002f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40013800 	.word	0x40013800

08002f1c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4b51      	ldr	r3, [pc, #324]	; (8003078 <ETH_SetMACConfig+0x15c>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	7c1b      	ldrb	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <ETH_SetMACConfig+0x28>
 8002f3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f42:	e000      	b.n	8002f46 <ETH_SetMACConfig+0x2a>
 8002f44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	7c5b      	ldrb	r3, [r3, #17]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <ETH_SetMACConfig+0x38>
 8002f4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f52:	e000      	b.n	8002f56 <ETH_SetMACConfig+0x3a>
 8002f54:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f56:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	7fdb      	ldrb	r3, [r3, #31]
 8002f62:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002f64:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	7f92      	ldrb	r2, [r2, #30]
 8002f70:	2a00      	cmp	r2, #0
 8002f72:	d102      	bne.n	8002f7a <ETH_SetMACConfig+0x5e>
 8002f74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f78:	e000      	b.n	8002f7c <ETH_SetMACConfig+0x60>
 8002f7a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	7f1b      	ldrb	r3, [r3, #28]
 8002f82:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f84:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	791b      	ldrb	r3, [r3, #4]
 8002f90:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f9a:	2a00      	cmp	r2, #0
 8002f9c:	d102      	bne.n	8002fa4 <ETH_SetMACConfig+0x88>
 8002f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa2:	e000      	b.n	8002fa6 <ETH_SetMACConfig+0x8a>
 8002fa4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002fa6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	7bdb      	ldrb	r3, [r3, #15]
 8002fac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002fae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002fb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fbc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f7ff f962 	bl	80022a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003002:	2a00      	cmp	r2, #0
 8003004:	d101      	bne.n	800300a <ETH_SetMACConfig+0xee>
 8003006:	2280      	movs	r2, #128	; 0x80
 8003008:	e000      	b.n	800300c <ETH_SetMACConfig+0xf0>
 800300a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800300c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003012:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800301a:	2a01      	cmp	r2, #1
 800301c:	d101      	bne.n	8003022 <ETH_SetMACConfig+0x106>
 800301e:	2208      	movs	r2, #8
 8003020:	e000      	b.n	8003024 <ETH_SetMACConfig+0x108>
 8003022:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003024:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800302c:	2a01      	cmp	r2, #1
 800302e:	d101      	bne.n	8003034 <ETH_SetMACConfig+0x118>
 8003030:	2204      	movs	r2, #4
 8003032:	e000      	b.n	8003036 <ETH_SetMACConfig+0x11a>
 8003034:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003036:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800303e:	2a01      	cmp	r2, #1
 8003040:	d101      	bne.n	8003046 <ETH_SetMACConfig+0x12a>
 8003042:	2202      	movs	r2, #2
 8003044:	e000      	b.n	8003048 <ETH_SetMACConfig+0x12c>
 8003046:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003048:	4313      	orrs	r3, r2
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003060:	2001      	movs	r0, #1
 8003062:	f7ff f91d 	bl	80022a0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	619a      	str	r2, [r3, #24]
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	ff20810f 	.word	0xff20810f

0800307c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4b3d      	ldr	r3, [pc, #244]	; (800318c <ETH_SetDMAConfig+0x110>)
 8003096:	4013      	ands	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	7b1b      	ldrb	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <ETH_SetDMAConfig+0x2c>
 80030a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80030a6:	e000      	b.n	80030aa <ETH_SetDMAConfig+0x2e>
 80030a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	7b5b      	ldrb	r3, [r3, #13]
 80030ae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030b0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	7f52      	ldrb	r2, [r2, #29]
 80030b6:	2a00      	cmp	r2, #0
 80030b8:	d102      	bne.n	80030c0 <ETH_SetDMAConfig+0x44>
 80030ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030be:	e000      	b.n	80030c2 <ETH_SetDMAConfig+0x46>
 80030c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80030c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	7b9b      	ldrb	r3, [r3, #14]
 80030c8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80030ca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	7f1b      	ldrb	r3, [r3, #28]
 80030d6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80030d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	7f9b      	ldrb	r3, [r3, #30]
 80030de:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030e0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030f0:	4313      	orrs	r3, r2
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003100:	461a      	mov	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003112:	2001      	movs	r0, #1
 8003114:	f7ff f8c4 	bl	80022a0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003120:	461a      	mov	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	791b      	ldrb	r3, [r3, #4]
 800312a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003130:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003136:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800313c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003144:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003146:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800314e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003154:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800315e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003162:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003170:	2001      	movs	r0, #1
 8003172:	f7ff f895 	bl	80022a0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6013      	str	r3, [r2, #0]
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	f8de3f23 	.word	0xf8de3f23

08003190 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b0a6      	sub	sp, #152	; 0x98
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80031a4:	2300      	movs	r3, #0
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031cc:	2300      	movs	r3, #0
 80031ce:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031f6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80031f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80031fe:	2300      	movs	r3, #0
 8003200:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003204:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003208:	4619      	mov	r1, r3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fe86 	bl	8002f1c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003210:	2301      	movs	r3, #1
 8003212:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003214:	2301      	movs	r3, #1
 8003216:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800321e:	2301      	movs	r3, #1
 8003220:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003226:	2300      	movs	r3, #0
 8003228:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800322c:	2300      	movs	r3, #0
 800322e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003232:	2300      	movs	r3, #0
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800323c:	2301      	movs	r3, #1
 800323e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003244:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003246:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800324a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800324c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003250:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003258:	2300      	movs	r3, #0
 800325a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800325c:	2300      	movs	r3, #0
 800325e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003260:	f107 0308 	add.w	r3, r7, #8
 8003264:	4619      	mov	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ff08 	bl	800307c <ETH_SetDMAConfig>
}
 800326c:	bf00      	nop
 800326e:	3798      	adds	r7, #152	; 0x98
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3305      	adds	r3, #5
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	3204      	adds	r2, #4
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <ETH_MACAddressConfig+0x68>)
 8003296:	4413      	add	r3, r2
 8003298:	461a      	mov	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3303      	adds	r3, #3
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	061a      	lsls	r2, r3, #24
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3302      	adds	r3, #2
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3301      	adds	r3, #1
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	4313      	orrs	r3, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <ETH_MACAddressConfig+0x6c>)
 80032c6:	4413      	add	r3, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	6013      	str	r3, [r2, #0]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40028040 	.word	0x40028040
 80032e0:	40028044 	.word	0x40028044

080032e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e03e      	b.n	8003370 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68d9      	ldr	r1, [r3, #12]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	440b      	add	r3, r1
 8003302:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2200      	movs	r2, #0
 800330e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2200      	movs	r2, #0
 800331a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	3206      	adds	r2, #6
 8003324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d80c      	bhi.n	8003354 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68d9      	ldr	r1, [r3, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	461a      	mov	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	e004      	b.n	800335e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	461a      	mov	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3301      	adds	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b03      	cmp	r3, #3
 8003374:	d9bd      	bls.n	80032f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003388:	611a      	str	r2, [r3, #16]
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003396:	b480      	push	{r7}
 8003398:	b085      	sub	sp, #20
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e046      	b.n	8003432 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6919      	ldr	r1, [r3, #16]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	440b      	add	r3, r1
 80033b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2200      	movs	r2, #0
 80033c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2200      	movs	r2, #0
 80033d2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2200      	movs	r2, #0
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033e0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80033e8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	3212      	adds	r2, #18
 80033fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d80c      	bhi.n	8003422 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6919      	ldr	r1, [r3, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	440b      	add	r3, r1
 800341a:	461a      	mov	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	60da      	str	r2, [r3, #12]
 8003420:	e004      	b.n	800342c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	461a      	mov	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3301      	adds	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d9b5      	bls.n	80033a4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003462:	60da      	str	r2, [r3, #12]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003470:	b480      	push	{r7}
 8003472:	b089      	sub	sp, #36	; 0x24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	e175      	b.n	800377c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	f040 8164 	bne.w	8003776 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d005      	beq.n	80034c6 <HAL_GPIO_Init+0x56>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d130      	bne.n	8003528 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	2203      	movs	r2, #3
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034fc:	2201      	movs	r2, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 0201 	and.w	r2, r3, #1
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	2b03      	cmp	r3, #3
 8003532:	d017      	beq.n	8003564 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	2203      	movs	r2, #3
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d123      	bne.n	80035b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	08da      	lsrs	r2, r3, #3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3208      	adds	r2, #8
 8003578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	220f      	movs	r2, #15
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	08da      	lsrs	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3208      	adds	r2, #8
 80035b2:	69b9      	ldr	r1, [r7, #24]
 80035b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0203 	and.w	r2, r3, #3
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80be 	beq.w	8003776 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fa:	4b66      	ldr	r3, [pc, #408]	; (8003794 <HAL_GPIO_Init+0x324>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	4a65      	ldr	r2, [pc, #404]	; (8003794 <HAL_GPIO_Init+0x324>)
 8003600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003604:	6453      	str	r3, [r2, #68]	; 0x44
 8003606:	4b63      	ldr	r3, [pc, #396]	; (8003794 <HAL_GPIO_Init+0x324>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003612:	4a61      	ldr	r2, [pc, #388]	; (8003798 <HAL_GPIO_Init+0x328>)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	089b      	lsrs	r3, r3, #2
 8003618:	3302      	adds	r3, #2
 800361a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	220f      	movs	r2, #15
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a58      	ldr	r2, [pc, #352]	; (800379c <HAL_GPIO_Init+0x32c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d037      	beq.n	80036ae <HAL_GPIO_Init+0x23e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a57      	ldr	r2, [pc, #348]	; (80037a0 <HAL_GPIO_Init+0x330>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d031      	beq.n	80036aa <HAL_GPIO_Init+0x23a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a56      	ldr	r2, [pc, #344]	; (80037a4 <HAL_GPIO_Init+0x334>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02b      	beq.n	80036a6 <HAL_GPIO_Init+0x236>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a55      	ldr	r2, [pc, #340]	; (80037a8 <HAL_GPIO_Init+0x338>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d025      	beq.n	80036a2 <HAL_GPIO_Init+0x232>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a54      	ldr	r2, [pc, #336]	; (80037ac <HAL_GPIO_Init+0x33c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01f      	beq.n	800369e <HAL_GPIO_Init+0x22e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a53      	ldr	r2, [pc, #332]	; (80037b0 <HAL_GPIO_Init+0x340>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d019      	beq.n	800369a <HAL_GPIO_Init+0x22a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a52      	ldr	r2, [pc, #328]	; (80037b4 <HAL_GPIO_Init+0x344>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_GPIO_Init+0x226>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a51      	ldr	r2, [pc, #324]	; (80037b8 <HAL_GPIO_Init+0x348>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00d      	beq.n	8003692 <HAL_GPIO_Init+0x222>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a50      	ldr	r2, [pc, #320]	; (80037bc <HAL_GPIO_Init+0x34c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <HAL_GPIO_Init+0x21e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a4f      	ldr	r2, [pc, #316]	; (80037c0 <HAL_GPIO_Init+0x350>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_GPIO_Init+0x21a>
 8003686:	2309      	movs	r3, #9
 8003688:	e012      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800368a:	230a      	movs	r3, #10
 800368c:	e010      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800368e:	2308      	movs	r3, #8
 8003690:	e00e      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 8003692:	2307      	movs	r3, #7
 8003694:	e00c      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 8003696:	2306      	movs	r3, #6
 8003698:	e00a      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800369a:	2305      	movs	r3, #5
 800369c:	e008      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800369e:	2304      	movs	r3, #4
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036a2:	2303      	movs	r3, #3
 80036a4:	e004      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e002      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036ae:	2300      	movs	r3, #0
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f002 0203 	and.w	r2, r2, #3
 80036b6:	0092      	lsls	r2, r2, #2
 80036b8:	4093      	lsls	r3, r2
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036c0:	4935      	ldr	r1, [pc, #212]	; (8003798 <HAL_GPIO_Init+0x328>)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	3302      	adds	r3, #2
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ce:	4b3d      	ldr	r3, [pc, #244]	; (80037c4 <HAL_GPIO_Init+0x354>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036f2:	4a34      	ldr	r2, [pc, #208]	; (80037c4 <HAL_GPIO_Init+0x354>)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036f8:	4b32      	ldr	r3, [pc, #200]	; (80037c4 <HAL_GPIO_Init+0x354>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800371c:	4a29      	ldr	r2, [pc, #164]	; (80037c4 <HAL_GPIO_Init+0x354>)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003722:	4b28      	ldr	r3, [pc, #160]	; (80037c4 <HAL_GPIO_Init+0x354>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003746:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_GPIO_Init+0x354>)
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800374c:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <HAL_GPIO_Init+0x354>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003770:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <HAL_GPIO_Init+0x354>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3301      	adds	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b0f      	cmp	r3, #15
 8003780:	f67f ae86 	bls.w	8003490 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	3724      	adds	r7, #36	; 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800
 8003798:	40013800 	.word	0x40013800
 800379c:	40020000 	.word	0x40020000
 80037a0:	40020400 	.word	0x40020400
 80037a4:	40020800 	.word	0x40020800
 80037a8:	40020c00 	.word	0x40020c00
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40021400 	.word	0x40021400
 80037b4:	40021800 	.word	0x40021800
 80037b8:	40021c00 	.word	0x40021c00
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40022400 	.word	0x40022400
 80037c4:	40013c00 	.word	0x40013c00

080037c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	807b      	strh	r3, [r7, #2]
 80037d4:	4613      	mov	r3, r2
 80037d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037d8:	787b      	ldrb	r3, [r7, #1]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037e4:	e003      	b.n	80037ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037e6:	887b      	ldrh	r3, [r7, #2]
 80037e8:	041a      	lsls	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	619a      	str	r2, [r3, #24]
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800380c:	887a      	ldrh	r2, [r7, #2]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4013      	ands	r3, r2
 8003812:	041a      	lsls	r2, r3, #16
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	43d9      	mvns	r1, r3
 8003818:	887b      	ldrh	r3, [r7, #2]
 800381a:	400b      	ands	r3, r1
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	619a      	str	r2, [r3, #24]
}
 8003822:	bf00      	nop
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d006      	beq.n	8003854 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003846:	4a05      	ldr	r2, [pc, #20]	; (800385c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd fdc8 	bl	80013e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40013c00 	.word	0x40013c00

08003860 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003862:	b08f      	sub	sp, #60	; 0x3c
 8003864:	af0a      	add	r7, sp, #40	; 0x28
 8003866:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e116      	b.n	8003aa0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d106      	bne.n	8003892 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7fe fb79 	bl	8001f84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2203      	movs	r2, #3
 8003896:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d102      	bne.n	80038ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f003 fd1b 	bl	80072ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	687e      	ldr	r6, [r7, #4]
 80038be:	466d      	mov	r5, sp
 80038c0:	f106 0410 	add.w	r4, r6, #16
 80038c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80038d4:	1d33      	adds	r3, r6, #4
 80038d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d8:	6838      	ldr	r0, [r7, #0]
 80038da:	f003 fcaf 	bl	800723c <USB_CoreInit>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0d7      	b.n	8003aa0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f003 fd09 	bl	800730e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]
 8003900:	e04a      	b.n	8003998 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	333d      	adds	r3, #61	; 0x3d
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003916:	7bfa      	ldrb	r2, [r7, #15]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	333c      	adds	r3, #60	; 0x3c
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	b298      	uxth	r0, r3
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3344      	adds	r3, #68	; 0x44
 800393e:	4602      	mov	r2, r0
 8003940:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	3340      	adds	r3, #64	; 0x40
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	3348      	adds	r3, #72	; 0x48
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800396a:	7bfa      	ldrb	r2, [r7, #15]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	334c      	adds	r3, #76	; 0x4c
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800397e:	7bfa      	ldrb	r2, [r7, #15]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3354      	adds	r3, #84	; 0x54
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	3301      	adds	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d3af      	bcc.n	8003902 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
 80039a6:	e044      	b.n	8003a32 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039ea:	7bfa      	ldrb	r2, [r7, #15]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a16:	7bfa      	ldrb	r2, [r7, #15]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d3b5      	bcc.n	80039a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	687e      	ldr	r6, [r7, #4]
 8003a44:	466d      	mov	r5, sp
 8003a46:	f106 0410 	add.w	r4, r6, #16
 8003a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a56:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a5a:	1d33      	adds	r3, r6, #4
 8003a5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a5e:	6838      	ldr	r0, [r7, #0]
 8003a60:	f003 fca2 	bl	80073a8 <USB_DevInit>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e014      	b.n	8003aa0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d102      	bne.n	8003a94 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f80a 	bl	8003aa8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f003 fe60 	bl	800775e <USB_DevDisconnect>

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003aa8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ad6:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_PCDEx_ActivateLPM+0x44>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	10000003 	.word	0x10000003

08003af0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afe:	6013      	str	r3, [r2, #0]
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40007000 	.word	0x40007000

08003b10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b1a:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b24:	6413      	str	r3, [r2, #64]	; 0x40
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b32:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b3e:	f7fe fba3 	bl	8002288 <HAL_GetTick>
 8003b42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b44:	e009      	b.n	8003b5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b46:	f7fe fb9f 	bl	8002288 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b54:	d901      	bls.n	8003b5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e022      	b.n	8003ba0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b5a:	4b14      	ldr	r3, [pc, #80]	; (8003bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b66:	d1ee      	bne.n	8003b46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a0f      	ldr	r2, [pc, #60]	; (8003bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b74:	f7fe fb88 	bl	8002288 <HAL_GetTick>
 8003b78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b7a:	e009      	b.n	8003b90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b7c:	f7fe fb84 	bl	8002288 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b8a:	d901      	bls.n	8003b90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e007      	b.n	8003ba0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b9c:	d1ee      	bne.n	8003b7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40007000 	.word	0x40007000

08003bb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e29b      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8087 	beq.w	8003ce2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bd4:	4b96      	ldr	r3, [pc, #600]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d00c      	beq.n	8003bfa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be0:	4b93      	ldr	r3, [pc, #588]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 030c 	and.w	r3, r3, #12
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d112      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62>
 8003bec:	4b90      	ldr	r3, [pc, #576]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf8:	d10b      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfa:	4b8d      	ldr	r3, [pc, #564]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d06c      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x130>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d168      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e275      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1a:	d106      	bne.n	8003c2a <HAL_RCC_OscConfig+0x7a>
 8003c1c:	4b84      	ldr	r3, [pc, #528]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a83      	ldr	r2, [pc, #524]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	e02e      	b.n	8003c88 <HAL_RCC_OscConfig+0xd8>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCC_OscConfig+0x9c>
 8003c32:	4b7f      	ldr	r3, [pc, #508]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a7e      	ldr	r2, [pc, #504]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4b7c      	ldr	r3, [pc, #496]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7b      	ldr	r2, [pc, #492]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e01d      	b.n	8003c88 <HAL_RCC_OscConfig+0xd8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCC_OscConfig+0xc0>
 8003c56:	4b76      	ldr	r3, [pc, #472]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a75      	ldr	r2, [pc, #468]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b73      	ldr	r3, [pc, #460]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a72      	ldr	r2, [pc, #456]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCC_OscConfig+0xd8>
 8003c70:	4b6f      	ldr	r3, [pc, #444]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a6e      	ldr	r2, [pc, #440]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4b6c      	ldr	r3, [pc, #432]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a6b      	ldr	r2, [pc, #428]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fe fafa 	bl	8002288 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fe faf6 	bl	8002288 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	; 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e229      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	4b61      	ldr	r3, [pc, #388]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0xe8>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fe fae6 	bl	8002288 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc0:	f7fe fae2 	bl	8002288 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e215      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd2:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x110>
 8003cde:	e000      	b.n	8003ce2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d069      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cee:	4b50      	ldr	r3, [pc, #320]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfa:	4b4d      	ldr	r3, [pc, #308]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d11c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x190>
 8003d06:	4b4a      	ldr	r3, [pc, #296]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d116      	bne.n	8003d40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_RCC_OscConfig+0x17a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e1e9      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2a:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	493d      	ldr	r1, [pc, #244]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3e:	e040      	b.n	8003dc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d023      	beq.n	8003d90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d48:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a38      	ldr	r2, [pc, #224]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fe fa98 	bl	8002288 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5c:	f7fe fa94 	bl	8002288 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e1c7      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6e:	4b30      	ldr	r3, [pc, #192]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4929      	ldr	r1, [pc, #164]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]
 8003d8e:	e018      	b.n	8003dc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d90:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a26      	ldr	r2, [pc, #152]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fa74 	bl	8002288 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da4:	f7fe fa70 	bl	8002288 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e1a3      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db6:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d038      	beq.n	8003e40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d019      	beq.n	8003e0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd6:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dda:	4a15      	ldr	r2, [pc, #84]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de2:	f7fe fa51 	bl	8002288 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dea:	f7fe fa4d 	bl	8002288 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e180      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x23a>
 8003e08:	e01a      	b.n	8003e40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e0a:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0e:	4a08      	ldr	r2, [pc, #32]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e16:	f7fe fa37 	bl	8002288 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e1e:	f7fe fa33 	bl	8002288 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d903      	bls.n	8003e34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e166      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
 8003e30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e34:	4b92      	ldr	r3, [pc, #584]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1ee      	bne.n	8003e1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80a4 	beq.w	8003f96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e4e:	4b8c      	ldr	r3, [pc, #560]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10d      	bne.n	8003e76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5a:	4b89      	ldr	r3, [pc, #548]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	4a88      	ldr	r2, [pc, #544]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6413      	str	r3, [r2, #64]	; 0x40
 8003e66:	4b86      	ldr	r3, [pc, #536]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e76:	4b83      	ldr	r3, [pc, #524]	; (8004084 <HAL_RCC_OscConfig+0x4d4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d118      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e82:	4b80      	ldr	r3, [pc, #512]	; (8004084 <HAL_RCC_OscConfig+0x4d4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a7f      	ldr	r2, [pc, #508]	; (8004084 <HAL_RCC_OscConfig+0x4d4>)
 8003e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8e:	f7fe f9fb 	bl	8002288 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e96:	f7fe f9f7 	bl	8002288 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b64      	cmp	r3, #100	; 0x64
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e12a      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ea8:	4b76      	ldr	r3, [pc, #472]	; (8004084 <HAL_RCC_OscConfig+0x4d4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d106      	bne.n	8003eca <HAL_RCC_OscConfig+0x31a>
 8003ebc:	4b70      	ldr	r3, [pc, #448]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	4a6f      	ldr	r2, [pc, #444]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec8:	e02d      	b.n	8003f26 <HAL_RCC_OscConfig+0x376>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x33c>
 8003ed2:	4b6b      	ldr	r3, [pc, #428]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	4a6a      	ldr	r2, [pc, #424]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ede:	4b68      	ldr	r3, [pc, #416]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a67      	ldr	r2, [pc, #412]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003ee4:	f023 0304 	bic.w	r3, r3, #4
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eea:	e01c      	b.n	8003f26 <HAL_RCC_OscConfig+0x376>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b05      	cmp	r3, #5
 8003ef2:	d10c      	bne.n	8003f0e <HAL_RCC_OscConfig+0x35e>
 8003ef4:	4b62      	ldr	r3, [pc, #392]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a61      	ldr	r2, [pc, #388]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003efa:	f043 0304 	orr.w	r3, r3, #4
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
 8003f00:	4b5f      	ldr	r3, [pc, #380]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4a5e      	ldr	r2, [pc, #376]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0c:	e00b      	b.n	8003f26 <HAL_RCC_OscConfig+0x376>
 8003f0e:	4b5c      	ldr	r3, [pc, #368]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4a5b      	ldr	r2, [pc, #364]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003f14:	f023 0301 	bic.w	r3, r3, #1
 8003f18:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1a:	4b59      	ldr	r3, [pc, #356]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a58      	ldr	r2, [pc, #352]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003f20:	f023 0304 	bic.w	r3, r3, #4
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d015      	beq.n	8003f5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2e:	f7fe f9ab 	bl	8002288 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fe f9a7 	bl	8002288 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e0d8      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4c:	4b4c      	ldr	r3, [pc, #304]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0ee      	beq.n	8003f36 <HAL_RCC_OscConfig+0x386>
 8003f58:	e014      	b.n	8003f84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7fe f995 	bl	8002288 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f62:	f7fe f991 	bl	8002288 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e0c2      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f78:	4b41      	ldr	r3, [pc, #260]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ee      	bne.n	8003f62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d105      	bne.n	8003f96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8a:	4b3d      	ldr	r3, [pc, #244]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	4a3c      	ldr	r2, [pc, #240]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 80ae 	beq.w	80040fc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa0:	4b37      	ldr	r3, [pc, #220]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d06d      	beq.n	8004088 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d14b      	bne.n	800404c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb4:	4b32      	ldr	r3, [pc, #200]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a31      	ldr	r2, [pc, #196]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fe f962 	bl	8002288 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fe f95e 	bl	8002288 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e091      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	4b29      	ldr	r3, [pc, #164]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69da      	ldr	r2, [r3, #28]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	019b      	lsls	r3, r3, #6
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	085b      	lsrs	r3, r3, #1
 8003ffe:	3b01      	subs	r3, #1
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	061b      	lsls	r3, r3, #24
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	071b      	lsls	r3, r3, #28
 8004012:	491b      	ldr	r1, [pc, #108]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004018:	4b19      	ldr	r3, [pc, #100]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a18      	ldr	r2, [pc, #96]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 800401e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe f930 	bl	8002288 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7fe f92c 	bl	8002288 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e05f      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x47c>
 800404a:	e057      	b.n	80040fc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a0b      	ldr	r2, [pc, #44]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8004052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fe f916 	bl	8002288 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fe f912 	bl	8002288 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e045      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	4b03      	ldr	r3, [pc, #12]	; (8004080 <HAL_RCC_OscConfig+0x4d0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x4b0>
 800407e:	e03d      	b.n	80040fc <HAL_RCC_OscConfig+0x54c>
 8004080:	40023800 	.word	0x40023800
 8004084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004088:	4b1f      	ldr	r3, [pc, #124]	; (8004108 <HAL_RCC_OscConfig+0x558>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d030      	beq.n	80040f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d129      	bne.n	80040f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d122      	bne.n	80040f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040b8:	4013      	ands	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d119      	bne.n	80040f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	085b      	lsrs	r3, r3, #1
 80040d0:	3b01      	subs	r3, #1
 80040d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d10f      	bne.n	80040f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d107      	bne.n	80040f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800

0800410c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0d0      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004124:	4b6a      	ldr	r3, [pc, #424]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d910      	bls.n	8004154 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004132:	4b67      	ldr	r3, [pc, #412]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 020f 	bic.w	r2, r3, #15
 800413a:	4965      	ldr	r1, [pc, #404]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b63      	ldr	r3, [pc, #396]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0b8      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800416c:	4b59      	ldr	r3, [pc, #356]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4a58      	ldr	r2, [pc, #352]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004176:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004184:	4b53      	ldr	r3, [pc, #332]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a52      	ldr	r2, [pc, #328]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800418a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800418e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004190:	4b50      	ldr	r3, [pc, #320]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	494d      	ldr	r1, [pc, #308]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d040      	beq.n	8004230 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d107      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d115      	bne.n	80041ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e07f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ce:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e073      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041de:	4b3d      	ldr	r3, [pc, #244]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e06b      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ee:	4b39      	ldr	r3, [pc, #228]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f023 0203 	bic.w	r2, r3, #3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4936      	ldr	r1, [pc, #216]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004200:	f7fe f842 	bl	8002288 <HAL_GetTick>
 8004204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004206:	e00a      	b.n	800421e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004208:	f7fe f83e 	bl	8002288 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	f241 3288 	movw	r2, #5000	; 0x1388
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e053      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	4b2d      	ldr	r3, [pc, #180]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 020c 	and.w	r2, r3, #12
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	429a      	cmp	r2, r3
 800422e:	d1eb      	bne.n	8004208 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004230:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d210      	bcs.n	8004260 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423e:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 020f 	bic.w	r2, r3, #15
 8004246:	4922      	ldr	r1, [pc, #136]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e032      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4916      	ldr	r1, [pc, #88]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800427a:	4313      	orrs	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	490e      	ldr	r1, [pc, #56]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800429e:	f000 f821 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 80042a2:	4602      	mov	r2, r0
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	490a      	ldr	r1, [pc, #40]	; (80042d8 <HAL_RCC_ClockConfig+0x1cc>)
 80042b0:	5ccb      	ldrb	r3, [r1, r3]
 80042b2:	fa22 f303 	lsr.w	r3, r2, r3
 80042b6:	4a09      	ldr	r2, [pc, #36]	; (80042dc <HAL_RCC_ClockConfig+0x1d0>)
 80042b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_RCC_ClockConfig+0x1d4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd ff9e 	bl	8002200 <HAL_InitTick>

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40023c00 	.word	0x40023c00
 80042d4:	40023800 	.word	0x40023800
 80042d8:	080121ec 	.word	0x080121ec
 80042dc:	2000087c 	.word	0x2000087c
 80042e0:	20000880 	.word	0x20000880

080042e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e8:	b094      	sub	sp, #80	; 0x50
 80042ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	647b      	str	r3, [r7, #68]	; 0x44
 80042f0:	2300      	movs	r3, #0
 80042f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f4:	2300      	movs	r3, #0
 80042f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042fc:	4b79      	ldr	r3, [pc, #484]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	2b08      	cmp	r3, #8
 8004306:	d00d      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0x40>
 8004308:	2b08      	cmp	r3, #8
 800430a:	f200 80e1 	bhi.w	80044d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x34>
 8004312:	2b04      	cmp	r3, #4
 8004314:	d003      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x3a>
 8004316:	e0db      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004318:	4b73      	ldr	r3, [pc, #460]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800431a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800431c:	e0db      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800431e:	4b73      	ldr	r3, [pc, #460]	; (80044ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004320:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004322:	e0d8      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004324:	4b6f      	ldr	r3, [pc, #444]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800432c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800432e:	4b6d      	ldr	r3, [pc, #436]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d063      	beq.n	8004402 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433a:	4b6a      	ldr	r3, [pc, #424]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	099b      	lsrs	r3, r3, #6
 8004340:	2200      	movs	r2, #0
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
 8004344:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434c:	633b      	str	r3, [r7, #48]	; 0x30
 800434e:	2300      	movs	r3, #0
 8004350:	637b      	str	r3, [r7, #52]	; 0x34
 8004352:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004356:	4622      	mov	r2, r4
 8004358:	462b      	mov	r3, r5
 800435a:	f04f 0000 	mov.w	r0, #0
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	0159      	lsls	r1, r3, #5
 8004364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004368:	0150      	lsls	r0, r2, #5
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4621      	mov	r1, r4
 8004370:	1a51      	subs	r1, r2, r1
 8004372:	6139      	str	r1, [r7, #16]
 8004374:	4629      	mov	r1, r5
 8004376:	eb63 0301 	sbc.w	r3, r3, r1
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004388:	4659      	mov	r1, fp
 800438a:	018b      	lsls	r3, r1, #6
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004392:	4651      	mov	r1, sl
 8004394:	018a      	lsls	r2, r1, #6
 8004396:	4651      	mov	r1, sl
 8004398:	ebb2 0801 	subs.w	r8, r2, r1
 800439c:	4659      	mov	r1, fp
 800439e:	eb63 0901 	sbc.w	r9, r3, r1
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b6:	4690      	mov	r8, r2
 80043b8:	4699      	mov	r9, r3
 80043ba:	4623      	mov	r3, r4
 80043bc:	eb18 0303 	adds.w	r3, r8, r3
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	462b      	mov	r3, r5
 80043c4:	eb49 0303 	adc.w	r3, r9, r3
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043d6:	4629      	mov	r1, r5
 80043d8:	024b      	lsls	r3, r1, #9
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043e0:	4621      	mov	r1, r4
 80043e2:	024a      	lsls	r2, r1, #9
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ea:	2200      	movs	r2, #0
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043f4:	f7fc f948 	bl	8000688 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4613      	mov	r3, r2
 80043fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004400:	e058      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004402:	4b38      	ldr	r3, [pc, #224]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	2200      	movs	r2, #0
 800440a:	4618      	mov	r0, r3
 800440c:	4611      	mov	r1, r2
 800440e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004412:	623b      	str	r3, [r7, #32]
 8004414:	2300      	movs	r3, #0
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
 8004418:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	f04f 0000 	mov.w	r0, #0
 8004424:	f04f 0100 	mov.w	r1, #0
 8004428:	0159      	lsls	r1, r3, #5
 800442a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800442e:	0150      	lsls	r0, r2, #5
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4641      	mov	r1, r8
 8004436:	ebb2 0a01 	subs.w	sl, r2, r1
 800443a:	4649      	mov	r1, r9
 800443c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800444c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004450:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004454:	ebb2 040a 	subs.w	r4, r2, sl
 8004458:	eb63 050b 	sbc.w	r5, r3, fp
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	00eb      	lsls	r3, r5, #3
 8004466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800446a:	00e2      	lsls	r2, r4, #3
 800446c:	4614      	mov	r4, r2
 800446e:	461d      	mov	r5, r3
 8004470:	4643      	mov	r3, r8
 8004472:	18e3      	adds	r3, r4, r3
 8004474:	603b      	str	r3, [r7, #0]
 8004476:	464b      	mov	r3, r9
 8004478:	eb45 0303 	adc.w	r3, r5, r3
 800447c:	607b      	str	r3, [r7, #4]
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800448a:	4629      	mov	r1, r5
 800448c:	028b      	lsls	r3, r1, #10
 800448e:	4621      	mov	r1, r4
 8004490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004494:	4621      	mov	r1, r4
 8004496:	028a      	lsls	r2, r1, #10
 8004498:	4610      	mov	r0, r2
 800449a:	4619      	mov	r1, r3
 800449c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449e:	2200      	movs	r2, #0
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	61fa      	str	r2, [r7, #28]
 80044a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044a8:	f7fc f8ee 	bl	8000688 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4613      	mov	r3, r2
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	0c1b      	lsrs	r3, r3, #16
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	3301      	adds	r3, #1
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80044c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044ce:	e002      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80044d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3750      	adds	r7, #80	; 0x50
 80044dc:	46bd      	mov	sp, r7
 80044de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800
 80044e8:	00f42400 	.word	0x00f42400
 80044ec:	007a1200 	.word	0x007a1200

080044f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <HAL_RCC_GetHCLKFreq+0x14>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	2000087c 	.word	0x2000087c

08004508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800450c:	f7ff fff0 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0a9b      	lsrs	r3, r3, #10
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	4903      	ldr	r1, [pc, #12]	; (800452c <HAL_RCC_GetPCLK1Freq+0x24>)
 800451e:	5ccb      	ldrb	r3, [r1, r3]
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004524:	4618      	mov	r0, r3
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40023800 	.word	0x40023800
 800452c:	080121fc 	.word	0x080121fc

08004530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004534:	f7ff ffdc 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004538:	4602      	mov	r2, r0
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	0b5b      	lsrs	r3, r3, #13
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	4903      	ldr	r1, [pc, #12]	; (8004554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004546:	5ccb      	ldrb	r3, [r1, r3]
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40023800 	.word	0x40023800
 8004554:	080121fc 	.word	0x080121fc

08004558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d012      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004580:	4b69      	ldr	r3, [pc, #420]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4a68      	ldr	r2, [pc, #416]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004586:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800458a:	6093      	str	r3, [r2, #8]
 800458c:	4b66      	ldr	r3, [pc, #408]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004594:	4964      	ldr	r1, [pc, #400]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045a2:	2301      	movs	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d017      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045b2:	4b5d      	ldr	r3, [pc, #372]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c0:	4959      	ldr	r1, [pc, #356]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d0:	d101      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045de:	2301      	movs	r3, #1
 80045e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d017      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045ee:	4b4e      	ldr	r3, [pc, #312]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	494a      	ldr	r1, [pc, #296]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800460c:	d101      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800460e:	2301      	movs	r3, #1
 8004610:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800461a:	2301      	movs	r3, #1
 800461c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 808b 	beq.w	8004752 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800463c:	4b3a      	ldr	r3, [pc, #232]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	4a39      	ldr	r2, [pc, #228]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004646:	6413      	str	r3, [r2, #64]	; 0x40
 8004648:	4b37      	ldr	r3, [pc, #220]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004654:	4b35      	ldr	r3, [pc, #212]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a34      	ldr	r2, [pc, #208]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800465a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004660:	f7fd fe12 	bl	8002288 <HAL_GetTick>
 8004664:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004666:	e008      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004668:	f7fd fe0e 	bl	8002288 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b64      	cmp	r3, #100	; 0x64
 8004674:	d901      	bls.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e38f      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800467a:	4b2c      	ldr	r3, [pc, #176]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0f0      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004686:	4b28      	ldr	r3, [pc, #160]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d035      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d02e      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046a4:	4b20      	ldr	r3, [pc, #128]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ae:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ba:	4b1b      	ldr	r3, [pc, #108]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	4a1a      	ldr	r2, [pc, #104]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046c6:	4a18      	ldr	r2, [pc, #96]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046cc:	4b16      	ldr	r3, [pc, #88]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d114      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fd fdd6 	bl	8002288 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046de:	e00a      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e0:	f7fd fdd2 	bl	8002288 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e351      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0ee      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800470e:	d111      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800471c:	4b04      	ldr	r3, [pc, #16]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800471e:	400b      	ands	r3, r1
 8004720:	4901      	ldr	r1, [pc, #4]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
 8004726:	e00b      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004728:	40023800 	.word	0x40023800
 800472c:	40007000 	.word	0x40007000
 8004730:	0ffffcff 	.word	0x0ffffcff
 8004734:	4bac      	ldr	r3, [pc, #688]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4aab      	ldr	r2, [pc, #684]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800473e:	6093      	str	r3, [r2, #8]
 8004740:	4ba9      	ldr	r3, [pc, #676]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474c:	49a6      	ldr	r1, [pc, #664]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474e:	4313      	orrs	r3, r2
 8004750:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	d010      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800475e:	4ba2      	ldr	r3, [pc, #648]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004764:	4aa0      	ldr	r2, [pc, #640]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800476e:	4b9e      	ldr	r3, [pc, #632]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004770:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	499b      	ldr	r1, [pc, #620]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800478c:	4b96      	ldr	r3, [pc, #600]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800479a:	4993      	ldr	r1, [pc, #588]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ae:	4b8e      	ldr	r3, [pc, #568]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047bc:	498a      	ldr	r1, [pc, #552]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047d0:	4b85      	ldr	r3, [pc, #532]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047de:	4982      	ldr	r1, [pc, #520]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047f2:	4b7d      	ldr	r3, [pc, #500]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	4979      	ldr	r1, [pc, #484]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004814:	4b74      	ldr	r3, [pc, #464]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	f023 0203 	bic.w	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	4971      	ldr	r1, [pc, #452]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004836:	4b6c      	ldr	r3, [pc, #432]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f023 020c 	bic.w	r2, r3, #12
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004844:	4968      	ldr	r1, [pc, #416]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004858:	4b63      	ldr	r3, [pc, #396]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004866:	4960      	ldr	r1, [pc, #384]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800487a:	4b5b      	ldr	r3, [pc, #364]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004888:	4957      	ldr	r1, [pc, #348]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800489c:	4b52      	ldr	r3, [pc, #328]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	494f      	ldr	r1, [pc, #316]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048be:	4b4a      	ldr	r3, [pc, #296]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048cc:	4946      	ldr	r1, [pc, #280]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048e0:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ee:	493e      	ldr	r1, [pc, #248]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004902:	4b39      	ldr	r3, [pc, #228]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	4935      	ldr	r1, [pc, #212]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004924:	4b30      	ldr	r3, [pc, #192]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004932:	492d      	ldr	r1, [pc, #180]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d011      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004946:	4b28      	ldr	r3, [pc, #160]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004954:	4924      	ldr	r1, [pc, #144]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004964:	d101      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004966:	2301      	movs	r3, #1
 8004968:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004976:	2301      	movs	r3, #1
 8004978:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004986:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004994:	4914      	ldr	r1, [pc, #80]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00b      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049a8:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049b8:	490b      	ldr	r1, [pc, #44]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00f      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049dc:	4902      	ldr	r1, [pc, #8]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049e4:	e002      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00b      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049f8:	4b8a      	ldr	r3, [pc, #552]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a08:	4986      	ldr	r1, [pc, #536]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00b      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a1c:	4b81      	ldr	r3, [pc, #516]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a22:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a2c:	497d      	ldr	r1, [pc, #500]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d006      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80d6 	beq.w	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a48:	4b76      	ldr	r3, [pc, #472]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a75      	ldr	r2, [pc, #468]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a54:	f7fd fc18 	bl	8002288 <HAL_GetTick>
 8004a58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a5c:	f7fd fc14 	bl	8002288 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e195      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a6e:	4b6d      	ldr	r3, [pc, #436]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d021      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11d      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a8e:	4b65      	ldr	r3, [pc, #404]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a94:	0c1b      	lsrs	r3, r3, #16
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a9c:	4b61      	ldr	r3, [pc, #388]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa2:	0e1b      	lsrs	r3, r3, #24
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	019a      	lsls	r2, r3, #6
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	041b      	lsls	r3, r3, #16
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	061b      	lsls	r3, r3, #24
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	071b      	lsls	r3, r3, #28
 8004ac2:	4958      	ldr	r1, [pc, #352]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d004      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ade:	d00a      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d02e      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af4:	d129      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004af6:	4b4b      	ldr	r3, [pc, #300]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b04:	4b47      	ldr	r3, [pc, #284]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b0a:	0f1b      	lsrs	r3, r3, #28
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	019a      	lsls	r2, r3, #6
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	061b      	lsls	r3, r3, #24
 8004b24:	431a      	orrs	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	071b      	lsls	r3, r3, #28
 8004b2a:	493e      	ldr	r1, [pc, #248]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b32:	4b3c      	ldr	r3, [pc, #240]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b38:	f023 021f 	bic.w	r2, r3, #31
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	3b01      	subs	r3, #1
 8004b42:	4938      	ldr	r1, [pc, #224]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01d      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b56:	4b33      	ldr	r3, [pc, #204]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b5c:	0e1b      	lsrs	r3, r3, #24
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b64:	4b2f      	ldr	r3, [pc, #188]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b6a:	0f1b      	lsrs	r3, r3, #28
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	019a      	lsls	r2, r3, #6
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	061b      	lsls	r3, r3, #24
 8004b84:	431a      	orrs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	071b      	lsls	r3, r3, #28
 8004b8a:	4926      	ldr	r1, [pc, #152]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d011      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	019a      	lsls	r2, r3, #6
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	041b      	lsls	r3, r3, #16
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	061b      	lsls	r3, r3, #24
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	071b      	lsls	r3, r3, #28
 8004bba:	491a      	ldr	r1, [pc, #104]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bc2:	4b18      	ldr	r3, [pc, #96]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a17      	ldr	r2, [pc, #92]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bce:	f7fd fb5b 	bl	8002288 <HAL_GetTick>
 8004bd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bd6:	f7fd fb57 	bl	8002288 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b64      	cmp	r3, #100	; 0x64
 8004be2:	d901      	bls.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e0d8      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004be8:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0f0      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	f040 80ce 	bne.w	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c08:	f7fd fb3e 	bl	8002288 <HAL_GetTick>
 8004c0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c0e:	e00b      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c10:	f7fd fb3a 	bl	8002288 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	; 0x64
 8004c1c:	d904      	bls.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e0bb      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c22:	bf00      	nop
 8004c24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c28:	4b5e      	ldr	r3, [pc, #376]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c34:	d0ec      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d009      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d02e      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d12a      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c5e:	4b51      	ldr	r3, [pc, #324]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c6c:	4b4d      	ldr	r3, [pc, #308]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	0f1b      	lsrs	r3, r3, #28
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	019a      	lsls	r2, r3, #6
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	041b      	lsls	r3, r3, #16
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	061b      	lsls	r3, r3, #24
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	071b      	lsls	r3, r3, #28
 8004c92:	4944      	ldr	r1, [pc, #272]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c9a:	4b42      	ldr	r3, [pc, #264]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ca0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	493d      	ldr	r1, [pc, #244]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d022      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc8:	d11d      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cca:	4b36      	ldr	r3, [pc, #216]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	0e1b      	lsrs	r3, r3, #24
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cd8:	4b32      	ldr	r3, [pc, #200]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cde:	0f1b      	lsrs	r3, r3, #28
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	019a      	lsls	r2, r3, #6
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	041b      	lsls	r3, r3, #16
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	061b      	lsls	r3, r3, #24
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	071b      	lsls	r3, r3, #28
 8004cfe:	4929      	ldr	r1, [pc, #164]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d028      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d12:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	0e1b      	lsrs	r3, r3, #24
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d20:	4b20      	ldr	r3, [pc, #128]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	0c1b      	lsrs	r3, r3, #16
 8004d28:	f003 0303 	and.w	r3, r3, #3
 8004d2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	019a      	lsls	r2, r3, #6
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	041b      	lsls	r3, r3, #16
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	061b      	lsls	r3, r3, #24
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	071b      	lsls	r3, r3, #28
 8004d46:	4917      	ldr	r1, [pc, #92]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d4e:	4b15      	ldr	r3, [pc, #84]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	4911      	ldr	r1, [pc, #68]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a0e      	ldr	r2, [pc, #56]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d70:	f7fd fa8a 	bl	8002288 <HAL_GetTick>
 8004d74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d78:	f7fd fa86 	bl	8002288 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b64      	cmp	r3, #100	; 0x64
 8004d84:	d901      	bls.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e007      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d8a:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d96:	d1ef      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40023800 	.word	0x40023800

08004da8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e071      	b.n	8004ea2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	7f5b      	ldrb	r3, [r3, #29]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d105      	bne.n	8004dd4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fd f81c 	bl	8001e0c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d053      	beq.n	8004e90 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	22ca      	movs	r2, #202	; 0xca
 8004dee:	625a      	str	r2, [r3, #36]	; 0x24
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2253      	movs	r2, #83	; 0x53
 8004df6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fa4d 	bl	8005298 <RTC_EnterInitMode>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d12a      	bne.n	8004e5e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6899      	ldr	r1, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4b26      	ldr	r3, [pc, #152]	; (8004eac <HAL_RTC_Init+0x104>)
 8004e14:	400b      	ands	r3, r1
 8004e16:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6899      	ldr	r1, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	68d2      	ldr	r2, [r2, #12]
 8004e3e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6919      	ldr	r1, [r3, #16]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	041a      	lsls	r2, r3, #16
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fa56 	bl	8005306 <RTC_ExitInitMode>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d110      	bne.n	8004e86 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0208 	bic.w	r2, r2, #8
 8004e72:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	22ff      	movs	r2, #255	; 0xff
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8004e8e:	e001      	b.n	8004e94 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	ff8fffbf 	.word	0xff8fffbf

08004eb0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	7f1b      	ldrb	r3, [r3, #28]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_RTC_SetTime+0x1c>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e085      	b.n	8004fd8 <HAL_RTC_SetTime+0x128>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d126      	bne.n	8004f2c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d102      	bne.n	8004ef2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fa2a 	bl	8005350 <RTC_ByteToBcd2>
 8004efc:	4603      	mov	r3, r0
 8004efe:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fa23 	bl	8005350 <RTC_ByteToBcd2>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004f0e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	789b      	ldrb	r3, [r3, #2]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fa1b 	bl	8005350 <RTC_ByteToBcd2>
 8004f1a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f1c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	78db      	ldrb	r3, [r3, #3]
 8004f24:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	e018      	b.n	8004f5e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	785b      	ldrb	r3, [r3, #1]
 8004f4a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004f4c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004f52:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	78db      	ldrb	r3, [r3, #3]
 8004f58:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	22ca      	movs	r2, #202	; 0xca
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2253      	movs	r2, #83	; 0x53
 8004f6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f992 	bl	8005298 <RTC_EnterInitMode>
 8004f74:	4603      	mov	r3, r0
 8004f76:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004f78:	7cfb      	ldrb	r3, [r7, #19]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d11e      	bne.n	8004fbc <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	6979      	ldr	r1, [r7, #20]
 8004f84:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <HAL_RTC_SetTime+0x130>)
 8004f86:	400b      	ands	r3, r1
 8004f88:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f98:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6899      	ldr	r1, [r3, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f9a7 	bl	8005306 <RTC_ExitInitMode>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004fbc:	7cfb      	ldrb	r3, [r7, #19]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d102      	bne.n	8004fc8 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	22ff      	movs	r2, #255	; 0xff
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	771a      	strb	r2, [r3, #28]

  return status;
 8004fd6:	7cfb      	ldrb	r3, [r7, #19]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	371c      	adds	r7, #28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd90      	pop	{r4, r7, pc}
 8004fe0:	007f7f7f 	.word	0x007f7f7f

08004fe4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b22      	ldr	r3, [pc, #136]	; (800509c <HAL_RTC_GetTime+0xb8>)
 8005014:	4013      	ands	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	0c1b      	lsrs	r3, r3, #16
 800501c:	b2db      	uxtb	r3, r3
 800501e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005022:	b2da      	uxtb	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	0a1b      	lsrs	r3, r3, #8
 800502c:	b2db      	uxtb	r3, r3
 800502e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005032:	b2da      	uxtb	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005040:	b2da      	uxtb	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	0d9b      	lsrs	r3, r3, #22
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	b2da      	uxtb	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d11a      	bne.n	8005092 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f000 f993 	bl	800538c <RTC_Bcd2ToByte>
 8005066:	4603      	mov	r3, r0
 8005068:	461a      	mov	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	785b      	ldrb	r3, [r3, #1]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 f98a 	bl	800538c <RTC_Bcd2ToByte>
 8005078:	4603      	mov	r3, r0
 800507a:	461a      	mov	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	789b      	ldrb	r3, [r3, #2]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 f981 	bl	800538c <RTC_Bcd2ToByte>
 800508a:	4603      	mov	r3, r0
 800508c:	461a      	mov	r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	007f7f7f 	.word	0x007f7f7f

080050a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80050a0:	b590      	push	{r4, r7, lr}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	7f1b      	ldrb	r3, [r3, #28]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_RTC_SetDate+0x1c>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e06f      	b.n	800519c <HAL_RTC_SetDate+0xfc>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2202      	movs	r2, #2
 80050c6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10e      	bne.n	80050ec <HAL_RTC_SetDate+0x4c>
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	785b      	ldrb	r3, [r3, #1]
 80050de:	f023 0310 	bic.w	r3, r3, #16
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	330a      	adds	r3, #10
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d11c      	bne.n	800512c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	78db      	ldrb	r3, [r3, #3]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 f92a 	bl	8005350 <RTC_ByteToBcd2>
 80050fc:	4603      	mov	r3, r0
 80050fe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	785b      	ldrb	r3, [r3, #1]
 8005104:	4618      	mov	r0, r3
 8005106:	f000 f923 	bl	8005350 <RTC_ByteToBcd2>
 800510a:	4603      	mov	r3, r0
 800510c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800510e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	789b      	ldrb	r3, [r3, #2]
 8005114:	4618      	mov	r0, r3
 8005116:	f000 f91b 	bl	8005350 <RTC_ByteToBcd2>
 800511a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800511c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	e00e      	b.n	800514a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	78db      	ldrb	r3, [r3, #3]
 8005130:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	785b      	ldrb	r3, [r3, #1]
 8005136:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005138:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800513e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	22ca      	movs	r2, #202	; 0xca
 8005150:	625a      	str	r2, [r3, #36]	; 0x24
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2253      	movs	r2, #83	; 0x53
 8005158:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 f89c 	bl	8005298 <RTC_EnterInitMode>
 8005160:	4603      	mov	r3, r0
 8005162:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005164:	7cfb      	ldrb	r3, [r7, #19]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	6979      	ldr	r1, [r7, #20]
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <HAL_RTC_SetDate+0x104>)
 8005172:	400b      	ands	r3, r1
 8005174:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 f8c5 	bl	8005306 <RTC_ExitInitMode>
 800517c:	4603      	mov	r3, r0
 800517e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005180:	7cfb      	ldrb	r3, [r7, #19]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	22ff      	movs	r2, #255	; 0xff
 8005192:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	771a      	strb	r2, [r3, #28]

  return status;
 800519a:	7cfb      	ldrb	r3, [r7, #19]
}
 800519c:	4618      	mov	r0, r3
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd90      	pop	{r4, r7, pc}
 80051a4:	00ffff3f 	.word	0x00ffff3f

080051a8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	4b21      	ldr	r3, [pc, #132]	; (8005244 <HAL_RTC_GetDate+0x9c>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	0b5b      	lsrs	r3, r3, #13
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d11a      	bne.n	8005238 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	78db      	ldrb	r3, [r3, #3]
 8005206:	4618      	mov	r0, r3
 8005208:	f000 f8c0 	bl	800538c <RTC_Bcd2ToByte>
 800520c:	4603      	mov	r3, r0
 800520e:	461a      	mov	r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f8b7 	bl	800538c <RTC_Bcd2ToByte>
 800521e:	4603      	mov	r3, r0
 8005220:	461a      	mov	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	789b      	ldrb	r3, [r3, #2]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 f8ae 	bl	800538c <RTC_Bcd2ToByte>
 8005230:	4603      	mov	r3, r0
 8005232:	461a      	mov	r2, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	00ffff3f 	.word	0x00ffff3f

08005248 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005262:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005264:	f7fd f810 	bl	8002288 <HAL_GetTick>
 8005268:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800526a:	e009      	b.n	8005280 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800526c:	f7fd f80c 	bl	8002288 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800527a:	d901      	bls.n	8005280 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e007      	b.n	8005290 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0ee      	beq.n	800526c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d122      	bne.n	80052fc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052c4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052c6:	f7fc ffdf 	bl	8002288 <HAL_GetTick>
 80052ca:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80052cc:	e00c      	b.n	80052e8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052ce:	f7fc ffdb 	bl	8002288 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052dc:	d904      	bls.n	80052e8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2204      	movs	r2, #4
 80052e2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d102      	bne.n	80052fc <RTC_EnterInitMode+0x64>
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d1e8      	bne.n	80052ce <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005320:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff ff89 	bl	8005248 <HAL_RTC_WaitForSynchro>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d004      	beq.n	8005346 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2204      	movs	r2, #4
 8005340:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005346:	7bfb      	ldrb	r3, [r7, #15]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800535e:	e005      	b.n	800536c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3301      	adds	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	3b0a      	subs	r3, #10
 800536a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	2b09      	cmp	r3, #9
 8005370:	d8f6      	bhi.n	8005360 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	b2da      	uxtb	r2, r3
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	4313      	orrs	r3, r2
 800537e:	b2db      	uxtb	r3, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	4413      	add	r3, r2
 80053ba:	b2db      	uxtb	r3, r3
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e049      	b.n	800546e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fc fd3a 	bl	8001e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3304      	adds	r3, #4
 8005404:	4619      	mov	r1, r3
 8005406:	4610      	mov	r0, r2
 8005408:	f000 f9f6 	bl	80057f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b01      	cmp	r3, #1
 800548a:	d001      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e054      	b.n	800553a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a26      	ldr	r2, [pc, #152]	; (8005548 <HAL_TIM_Base_Start_IT+0xd0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d022      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ba:	d01d      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a22      	ldr	r2, [pc, #136]	; (800554c <HAL_TIM_Base_Start_IT+0xd4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d018      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a21      	ldr	r2, [pc, #132]	; (8005550 <HAL_TIM_Base_Start_IT+0xd8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1f      	ldr	r2, [pc, #124]	; (8005554 <HAL_TIM_Base_Start_IT+0xdc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00e      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1e      	ldr	r2, [pc, #120]	; (8005558 <HAL_TIM_Base_Start_IT+0xe0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d009      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1c      	ldr	r2, [pc, #112]	; (800555c <HAL_TIM_Base_Start_IT+0xe4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1b      	ldr	r2, [pc, #108]	; (8005560 <HAL_TIM_Base_Start_IT+0xe8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d115      	bne.n	8005524 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	4b19      	ldr	r3, [pc, #100]	; (8005564 <HAL_TIM_Base_Start_IT+0xec>)
 8005500:	4013      	ands	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b06      	cmp	r3, #6
 8005508:	d015      	beq.n	8005536 <HAL_TIM_Base_Start_IT+0xbe>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005510:	d011      	beq.n	8005536 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0201 	orr.w	r2, r2, #1
 8005520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005522:	e008      	b.n	8005536 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e000      	b.n	8005538 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005536:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40010000 	.word	0x40010000
 800554c:	40000400 	.word	0x40000400
 8005550:	40000800 	.word	0x40000800
 8005554:	40000c00 	.word	0x40000c00
 8005558:	40010400 	.word	0x40010400
 800555c:	40014000 	.word	0x40014000
 8005560:	40001800 	.word	0x40001800
 8005564:	00010007 	.word	0x00010007

08005568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b02      	cmp	r3, #2
 800557c:	d122      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b02      	cmp	r3, #2
 800558a:	d11b      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0202 	mvn.w	r2, #2
 8005594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f905 	bl	80057ba <HAL_TIM_IC_CaptureCallback>
 80055b0:	e005      	b.n	80055be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f8f7 	bl	80057a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f908 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d122      	bne.n	8005618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d11b      	bne.n	8005618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0204 	mvn.w	r2, #4
 80055e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8db 	bl	80057ba <HAL_TIM_IC_CaptureCallback>
 8005604:	e005      	b.n	8005612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f8cd 	bl	80057a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f8de 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b08      	cmp	r3, #8
 8005624:	d122      	bne.n	800566c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b08      	cmp	r3, #8
 8005632:	d11b      	bne.n	800566c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0208 	mvn.w	r2, #8
 800563c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2204      	movs	r2, #4
 8005642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f8b1 	bl	80057ba <HAL_TIM_IC_CaptureCallback>
 8005658:	e005      	b.n	8005666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f8a3 	bl	80057a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f8b4 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b10      	cmp	r3, #16
 8005678:	d122      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b10      	cmp	r3, #16
 8005686:	d11b      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0210 	mvn.w	r2, #16
 8005690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2208      	movs	r2, #8
 8005696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f887 	bl	80057ba <HAL_TIM_IC_CaptureCallback>
 80056ac:	e005      	b.n	80056ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f879 	bl	80057a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f88a 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d10e      	bne.n	80056ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d107      	bne.n	80056ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0201 	mvn.w	r2, #1
 80056e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fb fecc 	bl	8001484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f6:	2b80      	cmp	r3, #128	; 0x80
 80056f8:	d10e      	bne.n	8005718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005704:	2b80      	cmp	r3, #128	; 0x80
 8005706:	d107      	bne.n	8005718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f9a8 	bl	8005a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005726:	d10e      	bne.n	8005746 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b80      	cmp	r3, #128	; 0x80
 8005734:	d107      	bne.n	8005746 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800573e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f99b 	bl	8005a7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d10e      	bne.n	8005772 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d107      	bne.n	8005772 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800576a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f838 	bl	80057e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b20      	cmp	r3, #32
 800577e:	d10e      	bne.n	800579e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b20      	cmp	r3, #32
 800578c:	d107      	bne.n	800579e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f06f 0220 	mvn.w	r2, #32
 8005796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f95b 	bl	8005a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a40      	ldr	r2, [pc, #256]	; (800590c <TIM_Base_SetConfig+0x114>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d013      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005816:	d00f      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a3d      	ldr	r2, [pc, #244]	; (8005910 <TIM_Base_SetConfig+0x118>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00b      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a3c      	ldr	r2, [pc, #240]	; (8005914 <TIM_Base_SetConfig+0x11c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d007      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a3b      	ldr	r2, [pc, #236]	; (8005918 <TIM_Base_SetConfig+0x120>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a3a      	ldr	r2, [pc, #232]	; (800591c <TIM_Base_SetConfig+0x124>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d108      	bne.n	800584a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2f      	ldr	r2, [pc, #188]	; (800590c <TIM_Base_SetConfig+0x114>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d02b      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005858:	d027      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2c      	ldr	r2, [pc, #176]	; (8005910 <TIM_Base_SetConfig+0x118>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d023      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a2b      	ldr	r2, [pc, #172]	; (8005914 <TIM_Base_SetConfig+0x11c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d01f      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2a      	ldr	r2, [pc, #168]	; (8005918 <TIM_Base_SetConfig+0x120>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01b      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a29      	ldr	r2, [pc, #164]	; (800591c <TIM_Base_SetConfig+0x124>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d017      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a28      	ldr	r2, [pc, #160]	; (8005920 <TIM_Base_SetConfig+0x128>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a27      	ldr	r2, [pc, #156]	; (8005924 <TIM_Base_SetConfig+0x12c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00f      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a26      	ldr	r2, [pc, #152]	; (8005928 <TIM_Base_SetConfig+0x130>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00b      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a25      	ldr	r2, [pc, #148]	; (800592c <TIM_Base_SetConfig+0x134>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d007      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a24      	ldr	r2, [pc, #144]	; (8005930 <TIM_Base_SetConfig+0x138>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d003      	beq.n	80058aa <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a23      	ldr	r2, [pc, #140]	; (8005934 <TIM_Base_SetConfig+0x13c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d108      	bne.n	80058bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a0a      	ldr	r2, [pc, #40]	; (800590c <TIM_Base_SetConfig+0x114>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_Base_SetConfig+0xf8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a0c      	ldr	r2, [pc, #48]	; (800591c <TIM_Base_SetConfig+0x124>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d103      	bne.n	80058f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	615a      	str	r2, [r3, #20]
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40010000 	.word	0x40010000
 8005910:	40000400 	.word	0x40000400
 8005914:	40000800 	.word	0x40000800
 8005918:	40000c00 	.word	0x40000c00
 800591c:	40010400 	.word	0x40010400
 8005920:	40014000 	.word	0x40014000
 8005924:	40014400 	.word	0x40014400
 8005928:	40014800 	.word	0x40014800
 800592c:	40001800 	.word	0x40001800
 8005930:	40001c00 	.word	0x40001c00
 8005934:	40002000 	.word	0x40002000

08005938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800594c:	2302      	movs	r3, #2
 800594e:	e06d      	b.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a30      	ldr	r2, [pc, #192]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d004      	beq.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a2f      	ldr	r2, [pc, #188]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d108      	bne.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800598a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a20      	ldr	r2, [pc, #128]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d022      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c2:	d01d      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a1d      	ldr	r2, [pc, #116]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d018      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a1c      	ldr	r2, [pc, #112]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d013      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1a      	ldr	r2, [pc, #104]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00e      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a15      	ldr	r2, [pc, #84]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d009      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d004      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d10c      	bne.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800
 8005a48:	40000c00 	.word	0x40000c00
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40001800 	.word	0x40001800

08005a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e040      	b.n	8005b24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fc f9fe 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2224      	movs	r2, #36	; 0x24
 8005abc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0201 	bic.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fcca 	bl	8006468 <UART_SetConfig>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e022      	b.n	8005b24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 ff22 	bl	8006930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 ffa9 	bl	8006a74 <UART_CheckIdleState>
 8005b22:	4603      	mov	r3, r0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	; 0x28
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	d171      	bne.n	8005c28 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <HAL_UART_Transmit+0x24>
 8005b4a:	88fb      	ldrh	r3, [r7, #6]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e06a      	b.n	8005c2a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2221      	movs	r2, #33	; 0x21
 8005b60:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b62:	f7fc fb91 	bl	8002288 <HAL_GetTick>
 8005b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	88fa      	ldrh	r2, [r7, #6]
 8005b6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	88fa      	ldrh	r2, [r7, #6]
 8005b74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b80:	d108      	bne.n	8005b94 <HAL_UART_Transmit+0x68>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d104      	bne.n	8005b94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	61bb      	str	r3, [r7, #24]
 8005b92:	e003      	b.n	8005b9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b9c:	e02c      	b.n	8005bf8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2180      	movs	r1, #128	; 0x80
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 ffb0 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e038      	b.n	8005c2a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10b      	bne.n	8005bd6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bcc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	3302      	adds	r3, #2
 8005bd2:	61bb      	str	r3, [r7, #24]
 8005bd4:	e007      	b.n	8005be6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	781a      	ldrb	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	3301      	adds	r3, #1
 8005be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1cc      	bne.n	8005b9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2140      	movs	r1, #64	; 0x40
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 ff7d 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e005      	b.n	8005c2a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2220      	movs	r2, #32
 8005c22:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e000      	b.n	8005c2a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3720      	adds	r7, #32
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b08a      	sub	sp, #40	; 0x28
 8005c36:	af02      	add	r7, sp, #8
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	f040 80b1 	bne.w	8005db0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_UART_Receive+0x28>
 8005c54:	88fb      	ldrh	r3, [r7, #6]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e0a9      	b.n	8005db2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2222      	movs	r2, #34	; 0x22
 8005c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c74:	f7fc fb08 	bl	8002288 <HAL_GetTick>
 8005c78:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	88fa      	ldrh	r2, [r7, #6]
 8005c7e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	88fa      	ldrh	r2, [r7, #6]
 8005c86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c92:	d10e      	bne.n	8005cb2 <HAL_UART_Receive+0x80>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d105      	bne.n	8005ca8 <HAL_UART_Receive+0x76>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ca2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ca6:	e02d      	b.n	8005d04 <HAL_UART_Receive+0xd2>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	22ff      	movs	r2, #255	; 0xff
 8005cac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cb0:	e028      	b.n	8005d04 <HAL_UART_Receive+0xd2>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10d      	bne.n	8005cd6 <HAL_UART_Receive+0xa4>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d104      	bne.n	8005ccc <HAL_UART_Receive+0x9a>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	22ff      	movs	r2, #255	; 0xff
 8005cc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cca:	e01b      	b.n	8005d04 <HAL_UART_Receive+0xd2>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	227f      	movs	r2, #127	; 0x7f
 8005cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cd4:	e016      	b.n	8005d04 <HAL_UART_Receive+0xd2>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cde:	d10d      	bne.n	8005cfc <HAL_UART_Receive+0xca>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_UART_Receive+0xc0>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	227f      	movs	r2, #127	; 0x7f
 8005cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cf0:	e008      	b.n	8005d04 <HAL_UART_Receive+0xd2>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	223f      	movs	r2, #63	; 0x3f
 8005cf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cfa:	e003      	b.n	8005d04 <HAL_UART_Receive+0xd2>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d0a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d14:	d108      	bne.n	8005d28 <HAL_UART_Receive+0xf6>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d104      	bne.n	8005d28 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	61bb      	str	r3, [r7, #24]
 8005d26:	e003      	b.n	8005d30 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d30:	e032      	b.n	8005d98 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2120      	movs	r1, #32
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fee6 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e032      	b.n	8005db2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10c      	bne.n	8005d6c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	8a7b      	ldrh	r3, [r7, #18]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	3302      	adds	r3, #2
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	e00c      	b.n	8005d86 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	8a7b      	ldrh	r3, [r7, #18]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	4013      	ands	r3, r2
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	3301      	adds	r3, #1
 8005d84:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1c6      	bne.n	8005d32 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e000      	b.n	8005db2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005db0:	2302      	movs	r3, #2
  }
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3720      	adds	r7, #32
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b08a      	sub	sp, #40	; 0x28
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d132      	bne.n	8005e38 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_UART_Receive_IT+0x24>
 8005dd8:	88fb      	ldrh	r3, [r7, #6]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e02b      	b.n	8005e3a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d018      	beq.n	8005e28 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	613b      	str	r3, [r7, #16]
   return(result);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	623b      	str	r3, [r7, #32]
 8005e16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	69f9      	ldr	r1, [r7, #28]
 8005e1a:	6a3a      	ldr	r2, [r7, #32]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e6      	bne.n	8005df6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e28:	88fb      	ldrh	r3, [r7, #6]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 ff34 	bl	8006c9c <UART_Start_Receive_IT>
 8005e34:	4603      	mov	r3, r0
 8005e36:	e000      	b.n	8005e3a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005e38:	2302      	movs	r3, #2
  }
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3728      	adds	r7, #40	; 0x28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b0ba      	sub	sp, #232	; 0xe8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e72:	4013      	ands	r3, r2
 8005e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d115      	bne.n	8005eac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00f      	beq.n	8005eac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d009      	beq.n	8005eac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 82ac 	beq.w	80063fa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
      }
      return;
 8005eaa:	e2a6      	b.n	80063fa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005eac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8117 	beq.w	80060e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ec2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ec6:	4b85      	ldr	r3, [pc, #532]	; (80060dc <HAL_UART_IRQHandler+0x298>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 810a 	beq.w	80060e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d011      	beq.n	8005f00 <HAL_UART_IRQHandler+0xbc>
 8005edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00b      	beq.n	8005f00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2201      	movs	r2, #1
 8005eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef6:	f043 0201 	orr.w	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d011      	beq.n	8005f30 <HAL_UART_IRQHandler+0xec>
 8005f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00b      	beq.n	8005f30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f26:	f043 0204 	orr.w	r2, r3, #4
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d011      	beq.n	8005f60 <HAL_UART_IRQHandler+0x11c>
 8005f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f56:	f043 0202 	orr.w	r2, r3, #2
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d017      	beq.n	8005f9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d105      	bne.n	8005f84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2208      	movs	r2, #8
 8005f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f92:	f043 0208 	orr.w	r2, r3, #8
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d012      	beq.n	8005fce <HAL_UART_IRQHandler+0x18a>
 8005fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00c      	beq.n	8005fce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc4:	f043 0220 	orr.w	r2, r3, #32
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8212 	beq.w	80063fe <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00d      	beq.n	8006002 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006008:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006016:	2b40      	cmp	r3, #64	; 0x40
 8006018:	d005      	beq.n	8006026 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800601a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800601e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006022:	2b00      	cmp	r3, #0
 8006024:	d04f      	beq.n	80060c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fefe 	bl	8006e28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b40      	cmp	r3, #64	; 0x40
 8006038:	d141      	bne.n	80060be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3308      	adds	r3, #8
 8006040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006050:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006058:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3308      	adds	r3, #8
 8006062:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006066:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800606a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006072:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800607e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1d9      	bne.n	800603a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800608a:	2b00      	cmp	r3, #0
 800608c:	d013      	beq.n	80060b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006092:	4a13      	ldr	r2, [pc, #76]	; (80060e0 <HAL_UART_IRQHandler+0x29c>)
 8006094:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800609a:	4618      	mov	r0, r3
 800609c:	f7fc fe9f 	bl	8002dde <HAL_DMA_Abort_IT>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d017      	beq.n	80060d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80060b0:	4610      	mov	r0, r2
 80060b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b4:	e00f      	b.n	80060d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f9b6 	bl	8006428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060bc:	e00b      	b.n	80060d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f9b2 	bl	8006428 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c4:	e007      	b.n	80060d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f9ae 	bl	8006428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80060d4:	e193      	b.n	80063fe <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d6:	bf00      	nop
    return;
 80060d8:	e191      	b.n	80063fe <HAL_UART_IRQHandler+0x5ba>
 80060da:	bf00      	nop
 80060dc:	04000120 	.word	0x04000120
 80060e0:	08006ef1 	.word	0x08006ef1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	f040 814c 	bne.w	8006386 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 8145 	beq.w	8006386 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 813e 	beq.w	8006386 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2210      	movs	r2, #16
 8006110:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611c:	2b40      	cmp	r3, #64	; 0x40
 800611e:	f040 80b6 	bne.w	800628e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800612e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 8165 	beq.w	8006402 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800613e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006142:	429a      	cmp	r2, r3
 8006144:	f080 815d 	bcs.w	8006402 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800614e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800615c:	f000 8086 	beq.w	800626c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800617c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800618a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800618e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006196:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1da      	bne.n	8006160 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3308      	adds	r3, #8
 80061b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061bc:	f023 0301 	bic.w	r3, r3, #1
 80061c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3308      	adds	r3, #8
 80061ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e1      	bne.n	80061aa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3308      	adds	r3, #8
 80061ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3308      	adds	r3, #8
 8006206:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800620a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800620c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006210:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e3      	bne.n	80061e6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800623a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800623c:	f023 0310 	bic.w	r3, r3, #16
 8006240:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800624e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006250:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006254:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800625c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e4      	bne.n	800622c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006266:	4618      	mov	r0, r3
 8006268:	f7fc fd49 	bl	8002cfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800627e:	b29b      	uxth	r3, r3
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	b29b      	uxth	r3, r3
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f8d8 	bl	800643c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800628c:	e0b9      	b.n	8006402 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800629a:	b29b      	uxth	r3, r3
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 80ab 	beq.w	8006406 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80062b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 80a6 	beq.w	8006406 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062dc:	647b      	str	r3, [r7, #68]	; 0x44
 80062de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e4      	bne.n	80062ba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3308      	adds	r3, #8
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	f023 0301 	bic.w	r3, r3, #1
 8006306:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006314:	633a      	str	r2, [r7, #48]	; 0x30
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800631a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e3      	bne.n	80062f0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2220      	movs	r2, #32
 800632c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	60fb      	str	r3, [r7, #12]
   return(result);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f023 0310 	bic.w	r3, r3, #16
 8006350:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	69b9      	ldr	r1, [r7, #24]
 8006364:	69fa      	ldr	r2, [r7, #28]
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	617b      	str	r3, [r7, #20]
   return(result);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e4      	bne.n	800633c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f85c 	bl	800643c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006384:	e03f      	b.n	8006406 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00e      	beq.n	80063b0 <HAL_UART_IRQHandler+0x56c>
 8006392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f853 	bl	8006454 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063ae:	e02d      	b.n	800640c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00e      	beq.n	80063da <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01c      	beq.n	800640a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
    }
    return;
 80063d8:	e017      	b.n	800640a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d012      	beq.n	800640c <HAL_UART_IRQHandler+0x5c8>
 80063e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00c      	beq.n	800640c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fd92 	bl	8006f1c <UART_EndTransmit_IT>
    return;
 80063f8:	e008      	b.n	800640c <HAL_UART_IRQHandler+0x5c8>
      return;
 80063fa:	bf00      	nop
 80063fc:	e006      	b.n	800640c <HAL_UART_IRQHandler+0x5c8>
    return;
 80063fe:	bf00      	nop
 8006400:	e004      	b.n	800640c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006402:	bf00      	nop
 8006404:	e002      	b.n	800640c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006406:	bf00      	nop
 8006408:	e000      	b.n	800640c <HAL_UART_IRQHandler+0x5c8>
    return;
 800640a:	bf00      	nop
  }

}
 800640c:	37e8      	adds	r7, #232	; 0xe8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop

08006414 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4ba6      	ldr	r3, [pc, #664]	; (800672c <UART_SetConfig+0x2c4>)
 8006494:	4013      	ands	r3, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	6979      	ldr	r1, [r7, #20]
 800649c:	430b      	orrs	r3, r1
 800649e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a94      	ldr	r2, [pc, #592]	; (8006730 <UART_SetConfig+0x2c8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d120      	bne.n	8006526 <UART_SetConfig+0xbe>
 80064e4:	4b93      	ldr	r3, [pc, #588]	; (8006734 <UART_SetConfig+0x2cc>)
 80064e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d816      	bhi.n	8006520 <UART_SetConfig+0xb8>
 80064f2:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <UART_SetConfig+0x90>)
 80064f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f8:	08006509 	.word	0x08006509
 80064fc:	08006515 	.word	0x08006515
 8006500:	0800650f 	.word	0x0800650f
 8006504:	0800651b 	.word	0x0800651b
 8006508:	2301      	movs	r3, #1
 800650a:	77fb      	strb	r3, [r7, #31]
 800650c:	e150      	b.n	80067b0 <UART_SetConfig+0x348>
 800650e:	2302      	movs	r3, #2
 8006510:	77fb      	strb	r3, [r7, #31]
 8006512:	e14d      	b.n	80067b0 <UART_SetConfig+0x348>
 8006514:	2304      	movs	r3, #4
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e14a      	b.n	80067b0 <UART_SetConfig+0x348>
 800651a:	2308      	movs	r3, #8
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e147      	b.n	80067b0 <UART_SetConfig+0x348>
 8006520:	2310      	movs	r3, #16
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e144      	b.n	80067b0 <UART_SetConfig+0x348>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a83      	ldr	r2, [pc, #524]	; (8006738 <UART_SetConfig+0x2d0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d132      	bne.n	8006596 <UART_SetConfig+0x12e>
 8006530:	4b80      	ldr	r3, [pc, #512]	; (8006734 <UART_SetConfig+0x2cc>)
 8006532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006536:	f003 030c 	and.w	r3, r3, #12
 800653a:	2b0c      	cmp	r3, #12
 800653c:	d828      	bhi.n	8006590 <UART_SetConfig+0x128>
 800653e:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <UART_SetConfig+0xdc>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	08006579 	.word	0x08006579
 8006548:	08006591 	.word	0x08006591
 800654c:	08006591 	.word	0x08006591
 8006550:	08006591 	.word	0x08006591
 8006554:	08006585 	.word	0x08006585
 8006558:	08006591 	.word	0x08006591
 800655c:	08006591 	.word	0x08006591
 8006560:	08006591 	.word	0x08006591
 8006564:	0800657f 	.word	0x0800657f
 8006568:	08006591 	.word	0x08006591
 800656c:	08006591 	.word	0x08006591
 8006570:	08006591 	.word	0x08006591
 8006574:	0800658b 	.word	0x0800658b
 8006578:	2300      	movs	r3, #0
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e118      	b.n	80067b0 <UART_SetConfig+0x348>
 800657e:	2302      	movs	r3, #2
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e115      	b.n	80067b0 <UART_SetConfig+0x348>
 8006584:	2304      	movs	r3, #4
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e112      	b.n	80067b0 <UART_SetConfig+0x348>
 800658a:	2308      	movs	r3, #8
 800658c:	77fb      	strb	r3, [r7, #31]
 800658e:	e10f      	b.n	80067b0 <UART_SetConfig+0x348>
 8006590:	2310      	movs	r3, #16
 8006592:	77fb      	strb	r3, [r7, #31]
 8006594:	e10c      	b.n	80067b0 <UART_SetConfig+0x348>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a68      	ldr	r2, [pc, #416]	; (800673c <UART_SetConfig+0x2d4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d120      	bne.n	80065e2 <UART_SetConfig+0x17a>
 80065a0:	4b64      	ldr	r3, [pc, #400]	; (8006734 <UART_SetConfig+0x2cc>)
 80065a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065aa:	2b30      	cmp	r3, #48	; 0x30
 80065ac:	d013      	beq.n	80065d6 <UART_SetConfig+0x16e>
 80065ae:	2b30      	cmp	r3, #48	; 0x30
 80065b0:	d814      	bhi.n	80065dc <UART_SetConfig+0x174>
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	d009      	beq.n	80065ca <UART_SetConfig+0x162>
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	d810      	bhi.n	80065dc <UART_SetConfig+0x174>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <UART_SetConfig+0x15c>
 80065be:	2b10      	cmp	r3, #16
 80065c0:	d006      	beq.n	80065d0 <UART_SetConfig+0x168>
 80065c2:	e00b      	b.n	80065dc <UART_SetConfig+0x174>
 80065c4:	2300      	movs	r3, #0
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e0f2      	b.n	80067b0 <UART_SetConfig+0x348>
 80065ca:	2302      	movs	r3, #2
 80065cc:	77fb      	strb	r3, [r7, #31]
 80065ce:	e0ef      	b.n	80067b0 <UART_SetConfig+0x348>
 80065d0:	2304      	movs	r3, #4
 80065d2:	77fb      	strb	r3, [r7, #31]
 80065d4:	e0ec      	b.n	80067b0 <UART_SetConfig+0x348>
 80065d6:	2308      	movs	r3, #8
 80065d8:	77fb      	strb	r3, [r7, #31]
 80065da:	e0e9      	b.n	80067b0 <UART_SetConfig+0x348>
 80065dc:	2310      	movs	r3, #16
 80065de:	77fb      	strb	r3, [r7, #31]
 80065e0:	e0e6      	b.n	80067b0 <UART_SetConfig+0x348>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a56      	ldr	r2, [pc, #344]	; (8006740 <UART_SetConfig+0x2d8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d120      	bne.n	800662e <UART_SetConfig+0x1c6>
 80065ec:	4b51      	ldr	r3, [pc, #324]	; (8006734 <UART_SetConfig+0x2cc>)
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065f6:	2bc0      	cmp	r3, #192	; 0xc0
 80065f8:	d013      	beq.n	8006622 <UART_SetConfig+0x1ba>
 80065fa:	2bc0      	cmp	r3, #192	; 0xc0
 80065fc:	d814      	bhi.n	8006628 <UART_SetConfig+0x1c0>
 80065fe:	2b80      	cmp	r3, #128	; 0x80
 8006600:	d009      	beq.n	8006616 <UART_SetConfig+0x1ae>
 8006602:	2b80      	cmp	r3, #128	; 0x80
 8006604:	d810      	bhi.n	8006628 <UART_SetConfig+0x1c0>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <UART_SetConfig+0x1a8>
 800660a:	2b40      	cmp	r3, #64	; 0x40
 800660c:	d006      	beq.n	800661c <UART_SetConfig+0x1b4>
 800660e:	e00b      	b.n	8006628 <UART_SetConfig+0x1c0>
 8006610:	2300      	movs	r3, #0
 8006612:	77fb      	strb	r3, [r7, #31]
 8006614:	e0cc      	b.n	80067b0 <UART_SetConfig+0x348>
 8006616:	2302      	movs	r3, #2
 8006618:	77fb      	strb	r3, [r7, #31]
 800661a:	e0c9      	b.n	80067b0 <UART_SetConfig+0x348>
 800661c:	2304      	movs	r3, #4
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e0c6      	b.n	80067b0 <UART_SetConfig+0x348>
 8006622:	2308      	movs	r3, #8
 8006624:	77fb      	strb	r3, [r7, #31]
 8006626:	e0c3      	b.n	80067b0 <UART_SetConfig+0x348>
 8006628:	2310      	movs	r3, #16
 800662a:	77fb      	strb	r3, [r7, #31]
 800662c:	e0c0      	b.n	80067b0 <UART_SetConfig+0x348>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a44      	ldr	r2, [pc, #272]	; (8006744 <UART_SetConfig+0x2dc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d125      	bne.n	8006684 <UART_SetConfig+0x21c>
 8006638:	4b3e      	ldr	r3, [pc, #248]	; (8006734 <UART_SetConfig+0x2cc>)
 800663a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006646:	d017      	beq.n	8006678 <UART_SetConfig+0x210>
 8006648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800664c:	d817      	bhi.n	800667e <UART_SetConfig+0x216>
 800664e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006652:	d00b      	beq.n	800666c <UART_SetConfig+0x204>
 8006654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006658:	d811      	bhi.n	800667e <UART_SetConfig+0x216>
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <UART_SetConfig+0x1fe>
 800665e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006662:	d006      	beq.n	8006672 <UART_SetConfig+0x20a>
 8006664:	e00b      	b.n	800667e <UART_SetConfig+0x216>
 8006666:	2300      	movs	r3, #0
 8006668:	77fb      	strb	r3, [r7, #31]
 800666a:	e0a1      	b.n	80067b0 <UART_SetConfig+0x348>
 800666c:	2302      	movs	r3, #2
 800666e:	77fb      	strb	r3, [r7, #31]
 8006670:	e09e      	b.n	80067b0 <UART_SetConfig+0x348>
 8006672:	2304      	movs	r3, #4
 8006674:	77fb      	strb	r3, [r7, #31]
 8006676:	e09b      	b.n	80067b0 <UART_SetConfig+0x348>
 8006678:	2308      	movs	r3, #8
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e098      	b.n	80067b0 <UART_SetConfig+0x348>
 800667e:	2310      	movs	r3, #16
 8006680:	77fb      	strb	r3, [r7, #31]
 8006682:	e095      	b.n	80067b0 <UART_SetConfig+0x348>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a2f      	ldr	r2, [pc, #188]	; (8006748 <UART_SetConfig+0x2e0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d125      	bne.n	80066da <UART_SetConfig+0x272>
 800668e:	4b29      	ldr	r3, [pc, #164]	; (8006734 <UART_SetConfig+0x2cc>)
 8006690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006694:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006698:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800669c:	d017      	beq.n	80066ce <UART_SetConfig+0x266>
 800669e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a2:	d817      	bhi.n	80066d4 <UART_SetConfig+0x26c>
 80066a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a8:	d00b      	beq.n	80066c2 <UART_SetConfig+0x25a>
 80066aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ae:	d811      	bhi.n	80066d4 <UART_SetConfig+0x26c>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <UART_SetConfig+0x254>
 80066b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b8:	d006      	beq.n	80066c8 <UART_SetConfig+0x260>
 80066ba:	e00b      	b.n	80066d4 <UART_SetConfig+0x26c>
 80066bc:	2301      	movs	r3, #1
 80066be:	77fb      	strb	r3, [r7, #31]
 80066c0:	e076      	b.n	80067b0 <UART_SetConfig+0x348>
 80066c2:	2302      	movs	r3, #2
 80066c4:	77fb      	strb	r3, [r7, #31]
 80066c6:	e073      	b.n	80067b0 <UART_SetConfig+0x348>
 80066c8:	2304      	movs	r3, #4
 80066ca:	77fb      	strb	r3, [r7, #31]
 80066cc:	e070      	b.n	80067b0 <UART_SetConfig+0x348>
 80066ce:	2308      	movs	r3, #8
 80066d0:	77fb      	strb	r3, [r7, #31]
 80066d2:	e06d      	b.n	80067b0 <UART_SetConfig+0x348>
 80066d4:	2310      	movs	r3, #16
 80066d6:	77fb      	strb	r3, [r7, #31]
 80066d8:	e06a      	b.n	80067b0 <UART_SetConfig+0x348>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1b      	ldr	r2, [pc, #108]	; (800674c <UART_SetConfig+0x2e4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d138      	bne.n	8006756 <UART_SetConfig+0x2ee>
 80066e4:	4b13      	ldr	r3, [pc, #76]	; (8006734 <UART_SetConfig+0x2cc>)
 80066e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066f2:	d017      	beq.n	8006724 <UART_SetConfig+0x2bc>
 80066f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066f8:	d82a      	bhi.n	8006750 <UART_SetConfig+0x2e8>
 80066fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066fe:	d00b      	beq.n	8006718 <UART_SetConfig+0x2b0>
 8006700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006704:	d824      	bhi.n	8006750 <UART_SetConfig+0x2e8>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <UART_SetConfig+0x2aa>
 800670a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670e:	d006      	beq.n	800671e <UART_SetConfig+0x2b6>
 8006710:	e01e      	b.n	8006750 <UART_SetConfig+0x2e8>
 8006712:	2300      	movs	r3, #0
 8006714:	77fb      	strb	r3, [r7, #31]
 8006716:	e04b      	b.n	80067b0 <UART_SetConfig+0x348>
 8006718:	2302      	movs	r3, #2
 800671a:	77fb      	strb	r3, [r7, #31]
 800671c:	e048      	b.n	80067b0 <UART_SetConfig+0x348>
 800671e:	2304      	movs	r3, #4
 8006720:	77fb      	strb	r3, [r7, #31]
 8006722:	e045      	b.n	80067b0 <UART_SetConfig+0x348>
 8006724:	2308      	movs	r3, #8
 8006726:	77fb      	strb	r3, [r7, #31]
 8006728:	e042      	b.n	80067b0 <UART_SetConfig+0x348>
 800672a:	bf00      	nop
 800672c:	efff69f3 	.word	0xefff69f3
 8006730:	40011000 	.word	0x40011000
 8006734:	40023800 	.word	0x40023800
 8006738:	40004400 	.word	0x40004400
 800673c:	40004800 	.word	0x40004800
 8006740:	40004c00 	.word	0x40004c00
 8006744:	40005000 	.word	0x40005000
 8006748:	40011400 	.word	0x40011400
 800674c:	40007800 	.word	0x40007800
 8006750:	2310      	movs	r3, #16
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e02c      	b.n	80067b0 <UART_SetConfig+0x348>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a72      	ldr	r2, [pc, #456]	; (8006924 <UART_SetConfig+0x4bc>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d125      	bne.n	80067ac <UART_SetConfig+0x344>
 8006760:	4b71      	ldr	r3, [pc, #452]	; (8006928 <UART_SetConfig+0x4c0>)
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006766:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800676a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800676e:	d017      	beq.n	80067a0 <UART_SetConfig+0x338>
 8006770:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006774:	d817      	bhi.n	80067a6 <UART_SetConfig+0x33e>
 8006776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677a:	d00b      	beq.n	8006794 <UART_SetConfig+0x32c>
 800677c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006780:	d811      	bhi.n	80067a6 <UART_SetConfig+0x33e>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <UART_SetConfig+0x326>
 8006786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800678a:	d006      	beq.n	800679a <UART_SetConfig+0x332>
 800678c:	e00b      	b.n	80067a6 <UART_SetConfig+0x33e>
 800678e:	2300      	movs	r3, #0
 8006790:	77fb      	strb	r3, [r7, #31]
 8006792:	e00d      	b.n	80067b0 <UART_SetConfig+0x348>
 8006794:	2302      	movs	r3, #2
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e00a      	b.n	80067b0 <UART_SetConfig+0x348>
 800679a:	2304      	movs	r3, #4
 800679c:	77fb      	strb	r3, [r7, #31]
 800679e:	e007      	b.n	80067b0 <UART_SetConfig+0x348>
 80067a0:	2308      	movs	r3, #8
 80067a2:	77fb      	strb	r3, [r7, #31]
 80067a4:	e004      	b.n	80067b0 <UART_SetConfig+0x348>
 80067a6:	2310      	movs	r3, #16
 80067a8:	77fb      	strb	r3, [r7, #31]
 80067aa:	e001      	b.n	80067b0 <UART_SetConfig+0x348>
 80067ac:	2310      	movs	r3, #16
 80067ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067b8:	d15b      	bne.n	8006872 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80067ba:	7ffb      	ldrb	r3, [r7, #31]
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d828      	bhi.n	8006812 <UART_SetConfig+0x3aa>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <UART_SetConfig+0x360>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067ed 	.word	0x080067ed
 80067cc:	080067f5 	.word	0x080067f5
 80067d0:	080067fd 	.word	0x080067fd
 80067d4:	08006813 	.word	0x08006813
 80067d8:	08006803 	.word	0x08006803
 80067dc:	08006813 	.word	0x08006813
 80067e0:	08006813 	.word	0x08006813
 80067e4:	08006813 	.word	0x08006813
 80067e8:	0800680b 	.word	0x0800680b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067ec:	f7fd fe8c 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 80067f0:	61b8      	str	r0, [r7, #24]
        break;
 80067f2:	e013      	b.n	800681c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f4:	f7fd fe9c 	bl	8004530 <HAL_RCC_GetPCLK2Freq>
 80067f8:	61b8      	str	r0, [r7, #24]
        break;
 80067fa:	e00f      	b.n	800681c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067fc:	4b4b      	ldr	r3, [pc, #300]	; (800692c <UART_SetConfig+0x4c4>)
 80067fe:	61bb      	str	r3, [r7, #24]
        break;
 8006800:	e00c      	b.n	800681c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006802:	f7fd fd6f 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 8006806:	61b8      	str	r0, [r7, #24]
        break;
 8006808:	e008      	b.n	800681c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800680a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800680e:	61bb      	str	r3, [r7, #24]
        break;
 8006810:	e004      	b.n	800681c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	77bb      	strb	r3, [r7, #30]
        break;
 800681a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d074      	beq.n	800690c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	005a      	lsls	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	441a      	add	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	fbb2 f3f3 	udiv	r3, r2, r3
 8006836:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b0f      	cmp	r3, #15
 800683c:	d916      	bls.n	800686c <UART_SetConfig+0x404>
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006844:	d212      	bcs.n	800686c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f023 030f 	bic.w	r3, r3, #15
 800684e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	b29b      	uxth	r3, r3
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	b29a      	uxth	r2, r3
 800685c:	89fb      	ldrh	r3, [r7, #14]
 800685e:	4313      	orrs	r3, r2
 8006860:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	89fa      	ldrh	r2, [r7, #14]
 8006868:	60da      	str	r2, [r3, #12]
 800686a:	e04f      	b.n	800690c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	77bb      	strb	r3, [r7, #30]
 8006870:	e04c      	b.n	800690c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006872:	7ffb      	ldrb	r3, [r7, #31]
 8006874:	2b08      	cmp	r3, #8
 8006876:	d828      	bhi.n	80068ca <UART_SetConfig+0x462>
 8006878:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <UART_SetConfig+0x418>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	080068a5 	.word	0x080068a5
 8006884:	080068ad 	.word	0x080068ad
 8006888:	080068b5 	.word	0x080068b5
 800688c:	080068cb 	.word	0x080068cb
 8006890:	080068bb 	.word	0x080068bb
 8006894:	080068cb 	.word	0x080068cb
 8006898:	080068cb 	.word	0x080068cb
 800689c:	080068cb 	.word	0x080068cb
 80068a0:	080068c3 	.word	0x080068c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a4:	f7fd fe30 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 80068a8:	61b8      	str	r0, [r7, #24]
        break;
 80068aa:	e013      	b.n	80068d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068ac:	f7fd fe40 	bl	8004530 <HAL_RCC_GetPCLK2Freq>
 80068b0:	61b8      	str	r0, [r7, #24]
        break;
 80068b2:	e00f      	b.n	80068d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b4:	4b1d      	ldr	r3, [pc, #116]	; (800692c <UART_SetConfig+0x4c4>)
 80068b6:	61bb      	str	r3, [r7, #24]
        break;
 80068b8:	e00c      	b.n	80068d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ba:	f7fd fd13 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 80068be:	61b8      	str	r0, [r7, #24]
        break;
 80068c0:	e008      	b.n	80068d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068c6:	61bb      	str	r3, [r7, #24]
        break;
 80068c8:	e004      	b.n	80068d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	77bb      	strb	r3, [r7, #30]
        break;
 80068d2:	bf00      	nop
    }

    if (pclk != 0U)
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d018      	beq.n	800690c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	085a      	lsrs	r2, r3, #1
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	441a      	add	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b0f      	cmp	r3, #15
 80068f2:	d909      	bls.n	8006908 <UART_SetConfig+0x4a0>
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068fa:	d205      	bcs.n	8006908 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	b29a      	uxth	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60da      	str	r2, [r3, #12]
 8006906:	e001      	b.n	800690c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006918:	7fbb      	ldrb	r3, [r7, #30]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40007c00 	.word	0x40007c00
 8006928:	40023800 	.word	0x40023800
 800692c:	00f42400 	.word	0x00f42400

08006930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01a      	beq.n	8006a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a2e:	d10a      	bne.n	8006a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	605a      	str	r2, [r3, #4]
  }
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a84:	f7fb fc00 	bl	8002288 <HAL_GetTick>
 8006a88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0308 	and.w	r3, r3, #8
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d10e      	bne.n	8006ab6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f831 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e027      	b.n	8006b06 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d10e      	bne.n	8006ae2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f81b 	bl	8006b0e <UART_WaitOnFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e011      	b.n	8006b06 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b09c      	sub	sp, #112	; 0x70
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	603b      	str	r3, [r7, #0]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b1e:	e0a7      	b.n	8006c70 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b26:	f000 80a3 	beq.w	8006c70 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2a:	f7fb fbad 	bl	8002288 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d302      	bcc.n	8006b40 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d13f      	bne.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b54:	667b      	str	r3, [r7, #100]	; 0x64
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e6      	bne.n	8006b40 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3308      	adds	r3, #8
 8006b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	663b      	str	r3, [r7, #96]	; 0x60
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b92:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e5      	bne.n	8006b72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e068      	b.n	8006c92 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d050      	beq.n	8006c70 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bdc:	d148      	bne.n	8006c70 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006be6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c06:	637b      	str	r3, [r7, #52]	; 0x34
 8006c08:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e6      	bne.n	8006be8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3308      	adds	r3, #8
 8006c38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c3a:	623a      	str	r2, [r7, #32]
 8006c3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	69f9      	ldr	r1, [r7, #28]
 8006c40:	6a3a      	ldr	r2, [r7, #32]
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e5      	bne.n	8006c1a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2220      	movs	r2, #32
 8006c52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e010      	b.n	8006c92 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	69da      	ldr	r2, [r3, #28]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	bf0c      	ite	eq
 8006c80:	2301      	moveq	r3, #1
 8006c82:	2300      	movne	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	f43f af48 	beq.w	8006b20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3770      	adds	r7, #112	; 0x70
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b097      	sub	sp, #92	; 0x5c
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	88fa      	ldrh	r2, [r7, #6]
 8006cb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	88fa      	ldrh	r2, [r7, #6]
 8006cbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cce:	d10e      	bne.n	8006cee <UART_Start_Receive_IT+0x52>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d105      	bne.n	8006ce4 <UART_Start_Receive_IT+0x48>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006cde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ce2:	e02d      	b.n	8006d40 <UART_Start_Receive_IT+0xa4>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	22ff      	movs	r2, #255	; 0xff
 8006ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cec:	e028      	b.n	8006d40 <UART_Start_Receive_IT+0xa4>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10d      	bne.n	8006d12 <UART_Start_Receive_IT+0x76>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <UART_Start_Receive_IT+0x6c>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	22ff      	movs	r2, #255	; 0xff
 8006d02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d06:	e01b      	b.n	8006d40 <UART_Start_Receive_IT+0xa4>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	227f      	movs	r2, #127	; 0x7f
 8006d0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d10:	e016      	b.n	8006d40 <UART_Start_Receive_IT+0xa4>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d1a:	d10d      	bne.n	8006d38 <UART_Start_Receive_IT+0x9c>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d104      	bne.n	8006d2e <UART_Start_Receive_IT+0x92>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	227f      	movs	r2, #127	; 0x7f
 8006d28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d2c:	e008      	b.n	8006d40 <UART_Start_Receive_IT+0xa4>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	223f      	movs	r2, #63	; 0x3f
 8006d32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d36:	e003      	b.n	8006d40 <UART_Start_Receive_IT+0xa4>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2222      	movs	r2, #34	; 0x22
 8006d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3308      	adds	r3, #8
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5a:	e853 3f00 	ldrex	r3, [r3]
 8006d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d62:	f043 0301 	orr.w	r3, r3, #1
 8006d66:	657b      	str	r3, [r7, #84]	; 0x54
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d70:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d72:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d78:	e841 2300 	strex	r3, r2, [r1]
 8006d7c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e5      	bne.n	8006d50 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d8c:	d107      	bne.n	8006d9e <UART_Start_Receive_IT+0x102>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a21      	ldr	r2, [pc, #132]	; (8006e20 <UART_Start_Receive_IT+0x184>)
 8006d9a:	669a      	str	r2, [r3, #104]	; 0x68
 8006d9c:	e002      	b.n	8006da4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4a20      	ldr	r2, [pc, #128]	; (8006e24 <UART_Start_Receive_IT+0x188>)
 8006da2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d019      	beq.n	8006de0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dca:	637b      	str	r3, [r7, #52]	; 0x34
 8006dcc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e6      	bne.n	8006dac <UART_Start_Receive_IT+0x110>
 8006dde:	e018      	b.n	8006e12 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	613b      	str	r3, [r7, #16]
   return(result);
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f043 0320 	orr.w	r3, r3, #32
 8006df4:	653b      	str	r3, [r7, #80]	; 0x50
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dfe:	623b      	str	r3, [r7, #32]
 8006e00:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	69f9      	ldr	r1, [r7, #28]
 8006e04:	6a3a      	ldr	r2, [r7, #32]
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e6      	bne.n	8006de0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	375c      	adds	r7, #92	; 0x5c
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	080070d7 	.word	0x080070d7
 8006e24:	08006f71 	.word	0x08006f71

08006e28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b095      	sub	sp, #84	; 0x54
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e6      	bne.n	8006e30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3308      	adds	r3, #8
 8006e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e5      	bne.n	8006e62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d118      	bne.n	8006ed0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f023 0310 	bic.w	r3, r3, #16
 8006eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6979      	ldr	r1, [r7, #20]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e6      	bne.n	8006e9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ee4:	bf00      	nop
 8006ee6:	3754      	adds	r7, #84	; 0x54
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f7ff fa8a 	bl	8006428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f14:	bf00      	nop
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f38:	61fb      	str	r3, [r7, #28]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	61bb      	str	r3, [r7, #24]
 8006f44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6979      	ldr	r1, [r7, #20]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e6      	bne.n	8006f24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fa56 	bl	8006414 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f68:	bf00      	nop
 8006f6a:	3720      	adds	r7, #32
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b096      	sub	sp, #88	; 0x58
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f7e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f88:	2b22      	cmp	r3, #34	; 0x22
 8006f8a:	f040 8098 	bne.w	80070be <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f98:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006f9c:	b2d9      	uxtb	r1, r3
 8006f9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa8:	400a      	ands	r2, r1
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d17b      	bne.n	80070ce <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fea:	653b      	str	r3, [r7, #80]	; 0x50
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ff6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e6      	bne.n	8006fd6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3308      	adds	r3, #8
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	623b      	str	r3, [r7, #32]
   return(result);
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	f023 0301 	bic.w	r3, r3, #1
 800701e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3308      	adds	r3, #8
 8007026:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007028:	633a      	str	r2, [r7, #48]	; 0x30
 800702a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800702e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e5      	bne.n	8007008 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007054:	2b01      	cmp	r3, #1
 8007056:	d12e      	bne.n	80070b6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	60fb      	str	r3, [r7, #12]
   return(result);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f023 0310 	bic.w	r3, r3, #16
 8007072:	64bb      	str	r3, [r7, #72]	; 0x48
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800707c:	61fb      	str	r3, [r7, #28]
 800707e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	69b9      	ldr	r1, [r7, #24]
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	617b      	str	r3, [r7, #20]
   return(result);
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e6      	bne.n	800705e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f003 0310 	and.w	r3, r3, #16
 800709a:	2b10      	cmp	r3, #16
 800709c:	d103      	bne.n	80070a6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2210      	movs	r2, #16
 80070a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff f9c4 	bl	800643c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070b4:	e00b      	b.n	80070ce <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7fa f9aa 	bl	8001410 <HAL_UART_RxCpltCallback>
}
 80070bc:	e007      	b.n	80070ce <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	699a      	ldr	r2, [r3, #24]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0208 	orr.w	r2, r2, #8
 80070cc:	619a      	str	r2, [r3, #24]
}
 80070ce:	bf00      	nop
 80070d0:	3758      	adds	r7, #88	; 0x58
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b096      	sub	sp, #88	; 0x58
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ee:	2b22      	cmp	r3, #34	; 0x22
 80070f0:	f040 8098 	bne.w	8007224 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007102:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007104:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007108:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800710c:	4013      	ands	r3, r2
 800710e:	b29a      	uxth	r2, r3
 8007110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007112:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007118:	1c9a      	adds	r2, r3, #2
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007124:	b29b      	uxth	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007136:	b29b      	uxth	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d17b      	bne.n	8007234 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800715a:	643b      	str	r3, [r7, #64]	; 0x40
 800715c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e6      	bne.n	800713c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3308      	adds	r3, #8
 8007174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	61fb      	str	r3, [r7, #28]
   return(result);
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	64bb      	str	r3, [r7, #72]	; 0x48
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3308      	adds	r3, #8
 800718c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800718e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007190:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e5      	bne.n	800716e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d12e      	bne.n	800721c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f023 0310 	bic.w	r3, r3, #16
 80071d8:	647b      	str	r3, [r7, #68]	; 0x44
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	6979      	ldr	r1, [r7, #20]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	613b      	str	r3, [r7, #16]
   return(result);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e6      	bne.n	80071c4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f003 0310 	and.w	r3, r3, #16
 8007200:	2b10      	cmp	r3, #16
 8007202:	d103      	bne.n	800720c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2210      	movs	r2, #16
 800720a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff f911 	bl	800643c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800721a:	e00b      	b.n	8007234 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7fa f8f7 	bl	8001410 <HAL_UART_RxCpltCallback>
}
 8007222:	e007      	b.n	8007234 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0208 	orr.w	r2, r2, #8
 8007232:	619a      	str	r2, [r3, #24]
}
 8007234:	bf00      	nop
 8007236:	3758      	adds	r7, #88	; 0x58
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800723c:	b084      	sub	sp, #16
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	f107 001c 	add.w	r0, r7, #28
 800724a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	2b01      	cmp	r3, #1
 8007252:	d120      	bne.n	8007296 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	4b20      	ldr	r3, [pc, #128]	; (80072e8 <USB_CoreInit+0xac>)
 8007266:	4013      	ands	r3, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800727a:	2b01      	cmp	r3, #1
 800727c:	d105      	bne.n	800728a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa96 	bl	80077bc <USB_CoreReset>
 8007290:	4603      	mov	r3, r0
 8007292:	73fb      	strb	r3, [r7, #15]
 8007294:	e010      	b.n	80072b8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa8a 	bl	80077bc <USB_CoreReset>
 80072a8:	4603      	mov	r3, r0
 80072aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d10b      	bne.n	80072d6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f043 0206 	orr.w	r2, r3, #6
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f043 0220 	orr.w	r2, r3, #32
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072e2:	b004      	add	sp, #16
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	ffbdffbf 	.word	0xffbdffbf

080072ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f023 0201 	bic.w	r2, r3, #1
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	460b      	mov	r3, r1
 8007318:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d115      	bne.n	800735c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800733c:	2001      	movs	r0, #1
 800733e:	f7fa ffaf 	bl	80022a0 <HAL_Delay>
      ms++;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3301      	adds	r3, #1
 8007346:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fa29 	bl	80077a0 <USB_GetMode>
 800734e:	4603      	mov	r3, r0
 8007350:	2b01      	cmp	r3, #1
 8007352:	d01e      	beq.n	8007392 <USB_SetCurrentMode+0x84>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b31      	cmp	r3, #49	; 0x31
 8007358:	d9f0      	bls.n	800733c <USB_SetCurrentMode+0x2e>
 800735a:	e01a      	b.n	8007392 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800735c:	78fb      	ldrb	r3, [r7, #3]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d115      	bne.n	800738e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800736e:	2001      	movs	r0, #1
 8007370:	f7fa ff96 	bl	80022a0 <HAL_Delay>
      ms++;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3301      	adds	r3, #1
 8007378:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa10 	bl	80077a0 <USB_GetMode>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d005      	beq.n	8007392 <USB_SetCurrentMode+0x84>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b31      	cmp	r3, #49	; 0x31
 800738a:	d9f0      	bls.n	800736e <USB_SetCurrentMode+0x60>
 800738c:	e001      	b.n	8007392 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e005      	b.n	800739e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b32      	cmp	r3, #50	; 0x32
 8007396:	d101      	bne.n	800739c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073a8:	b084      	sub	sp, #16
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b086      	sub	sp, #24
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80073b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073c2:	2300      	movs	r3, #0
 80073c4:	613b      	str	r3, [r7, #16]
 80073c6:	e009      	b.n	80073dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	3340      	adds	r3, #64	; 0x40
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	2200      	movs	r2, #0
 80073d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	3301      	adds	r3, #1
 80073da:	613b      	str	r3, [r7, #16]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	2b0e      	cmp	r3, #14
 80073e0:	d9f2      	bls.n	80073c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d11c      	bne.n	8007422 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073f6:	f043 0302 	orr.w	r3, r3, #2
 80073fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007400:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	e005      	b.n	800742e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007426:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007434:	461a      	mov	r2, r3
 8007436:	2300      	movs	r3, #0
 8007438:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007440:	4619      	mov	r1, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007448:	461a      	mov	r2, r3
 800744a:	680b      	ldr	r3, [r1, #0]
 800744c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800744e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007450:	2b01      	cmp	r3, #1
 8007452:	d10c      	bne.n	800746e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	2b00      	cmp	r3, #0
 8007458:	d104      	bne.n	8007464 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800745a:	2100      	movs	r1, #0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f965 	bl	800772c <USB_SetDevSpeed>
 8007462:	e008      	b.n	8007476 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007464:	2101      	movs	r1, #1
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f960 	bl	800772c <USB_SetDevSpeed>
 800746c:	e003      	b.n	8007476 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800746e:	2103      	movs	r1, #3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f95b 	bl	800772c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007476:	2110      	movs	r1, #16
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f8f3 	bl	8007664 <USB_FlushTxFifo>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f91f 	bl	80076cc <USB_FlushRxFifo>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749e:	461a      	mov	r2, r3
 80074a0:	2300      	movs	r3, #0
 80074a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074aa:	461a      	mov	r2, r3
 80074ac:	2300      	movs	r3, #0
 80074ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b6:	461a      	mov	r2, r3
 80074b8:	2300      	movs	r3, #0
 80074ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
 80074c0:	e043      	b.n	800754a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d8:	d118      	bne.n	800750c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ec:	461a      	mov	r2, r3
 80074ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	e013      	b.n	800751e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007502:	461a      	mov	r2, r3
 8007504:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007508:	6013      	str	r3, [r2, #0]
 800750a:	e008      	b.n	800751e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007518:	461a      	mov	r2, r3
 800751a:	2300      	movs	r3, #0
 800751c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752a:	461a      	mov	r2, r3
 800752c:	2300      	movs	r3, #0
 800752e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753c:	461a      	mov	r2, r3
 800753e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007542:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	3301      	adds	r3, #1
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	429a      	cmp	r2, r3
 8007550:	d3b7      	bcc.n	80074c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007552:	2300      	movs	r3, #0
 8007554:	613b      	str	r3, [r7, #16]
 8007556:	e043      	b.n	80075e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800756a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800756e:	d118      	bne.n	80075a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10a      	bne.n	800758c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007582:	461a      	mov	r2, r3
 8007584:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	e013      	b.n	80075b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007598:	461a      	mov	r2, r3
 800759a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	e008      	b.n	80075b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ae:	461a      	mov	r2, r3
 80075b0:	2300      	movs	r3, #0
 80075b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c0:	461a      	mov	r2, r3
 80075c2:	2300      	movs	r3, #0
 80075c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d2:	461a      	mov	r2, r3
 80075d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	3301      	adds	r3, #1
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d3b7      	bcc.n	8007558 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007608:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	2b00      	cmp	r3, #0
 800760e:	d105      	bne.n	800761c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	f043 0210 	orr.w	r2, r3, #16
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	699a      	ldr	r2, [r3, #24]
 8007620:	4b0e      	ldr	r3, [pc, #56]	; (800765c <USB_DevInit+0x2b4>)
 8007622:	4313      	orrs	r3, r2
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	f043 0208 	orr.w	r2, r3, #8
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800763a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800763c:	2b01      	cmp	r3, #1
 800763e:	d105      	bne.n	800764c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699a      	ldr	r2, [r3, #24]
 8007644:	4b06      	ldr	r3, [pc, #24]	; (8007660 <USB_DevInit+0x2b8>)
 8007646:	4313      	orrs	r3, r2
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800764c:	7dfb      	ldrb	r3, [r7, #23]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007658:	b004      	add	sp, #16
 800765a:	4770      	bx	lr
 800765c:	803c3800 	.word	0x803c3800
 8007660:	40000004 	.word	0x40000004

08007664 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4a13      	ldr	r2, [pc, #76]	; (80076c8 <USB_FlushTxFifo+0x64>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d901      	bls.n	8007684 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e01b      	b.n	80076bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	daf2      	bge.n	8007672 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	019b      	lsls	r3, r3, #6
 8007694:	f043 0220 	orr.w	r2, r3, #32
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3301      	adds	r3, #1
 80076a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4a08      	ldr	r2, [pc, #32]	; (80076c8 <USB_FlushTxFifo+0x64>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d901      	bls.n	80076ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e006      	b.n	80076bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	f003 0320 	and.w	r3, r3, #32
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	d0f0      	beq.n	800769c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	00030d40 	.word	0x00030d40

080076cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3301      	adds	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4a11      	ldr	r2, [pc, #68]	; (8007728 <USB_FlushRxFifo+0x5c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d901      	bls.n	80076ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e018      	b.n	800771c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	daf2      	bge.n	80076d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2210      	movs	r2, #16
 80076fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3301      	adds	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4a08      	ldr	r2, [pc, #32]	; (8007728 <USB_FlushRxFifo+0x5c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d901      	bls.n	800770e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e006      	b.n	800771c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f003 0310 	and.w	r3, r3, #16
 8007716:	2b10      	cmp	r3, #16
 8007718:	d0f0      	beq.n	80076fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	00030d40 	.word	0x00030d40

0800772c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	68f9      	ldr	r1, [r7, #12]
 8007748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800774c:	4313      	orrs	r3, r2
 800774e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800775e:	b480      	push	{r7}
 8007760:	b085      	sub	sp, #20
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007778:	f023 0303 	bic.w	r3, r3, #3
 800777c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800778c:	f043 0302 	orr.w	r3, r3, #2
 8007790:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	f003 0301 	and.w	r3, r3, #1
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	4a13      	ldr	r2, [pc, #76]	; (8007820 <USB_CoreReset+0x64>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d901      	bls.n	80077da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e01b      	b.n	8007812 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	daf2      	bge.n	80077c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f043 0201 	orr.w	r2, r3, #1
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3301      	adds	r3, #1
 80077f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4a09      	ldr	r2, [pc, #36]	; (8007820 <USB_CoreReset+0x64>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d901      	bls.n	8007804 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e006      	b.n	8007812 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b01      	cmp	r3, #1
 800780e:	d0f0      	beq.n	80077f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	00030d40 	.word	0x00030d40

08007824 <filtlength>:
    0.000000449585560,
    0.000001278766757,
    -0.000001509740857,
    0.0};

int filtlength(const char* name) {
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
    int len = strlen(name);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7f8 fd67 	bl	8000300 <strlen>
 8007832:	4603      	mov	r3, r0
 8007834:	613b      	str	r3, [r7, #16]
    int i = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	617b      	str	r3, [r7, #20]
    char *new_str = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	60fb      	str	r3, [r7, #12]
    int N = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	60bb      	str	r3, [r7, #8]
	if (!strcmp(name,"haar") || !strcmp(name,"db1")) {
 8007842:	49a1      	ldr	r1, [pc, #644]	; (8007ac8 <filtlength+0x2a4>)
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7f8 fcfb 	bl	8000240 <strcmp>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d006      	beq.n	800785e <filtlength+0x3a>
 8007850:	499e      	ldr	r1, [pc, #632]	; (8007acc <filtlength+0x2a8>)
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7f8 fcf4 	bl	8000240 <strcmp>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <filtlength+0x3e>
		return 2;
 800785e:	2302      	movs	r3, #2
 8007860:	e206      	b.n	8007c70 <filtlength+0x44c>
	}
    else if (len > 2 && strstr(name, "db") != NULL)
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	2b02      	cmp	r3, #2
 8007866:	dd33      	ble.n	80078d0 <filtlength+0xac>
 8007868:	4999      	ldr	r1, [pc, #612]	; (8007ad0 <filtlength+0x2ac>)
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f004 ff5a 	bl	800c724 <strstr>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d02c      	beq.n	80078d0 <filtlength+0xac>
    {
        new_str = (char*)malloc(sizeof(char)*(len-2 + 1));
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	3b01      	subs	r3, #1
 800787a:	4618      	mov	r0, r3
 800787c:	f003 fcd8 	bl	800b230 <malloc>
 8007880:	4603      	mov	r3, r0
 8007882:	60fb      	str	r3, [r7, #12]
        for (i = 2; i < len + 1; i++)
 8007884:	2302      	movs	r3, #2
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	e00b      	b.n	80078a2 <filtlength+0x7e>
            new_str[i - 2] = name[i];
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	441a      	add	r2, r3
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	3b02      	subs	r3, #2
 8007894:	68f9      	ldr	r1, [r7, #12]
 8007896:	440b      	add	r3, r1
 8007898:	7812      	ldrb	r2, [r2, #0]
 800789a:	701a      	strb	r2, [r3, #0]
        for (i = 2; i < len + 1; i++)
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	3301      	adds	r3, #1
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	daef      	bge.n	800788a <filtlength+0x66>

        N = atoi(new_str);
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f003 fc94 	bl	800b1d8 <atoi>
 80078b0:	60b8      	str	r0, [r7, #8]
        free(new_str);
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f003 fcc4 	bl	800b240 <free>
        if (N>38)
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b26      	cmp	r3, #38	; 0x26
 80078bc:	dd05      	ble.n	80078ca <filtlength+0xa6>
        {
            printf("\n Filter Not in Database \n");
 80078be:	4885      	ldr	r0, [pc, #532]	; (8007ad4 <filtlength+0x2b0>)
 80078c0:	f004 fd68 	bl	800c394 <puts>
            return -1;
 80078c4:	f04f 33ff 	mov.w	r3, #4294967295
 80078c8:	e1d2      	b.n	8007c70 <filtlength+0x44c>
        }

        return N * 2;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	e1cf      	b.n	8007c70 <filtlength+0x44c>
    }
	else if (!strcmp(name,"bior1.1")){
 80078d0:	4981      	ldr	r1, [pc, #516]	; (8007ad8 <filtlength+0x2b4>)
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7f8 fcb4 	bl	8000240 <strcmp>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <filtlength+0xbe>
		return 2;
 80078de:	2302      	movs	r3, #2
 80078e0:	e1c6      	b.n	8007c70 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior1.3")){
 80078e2:	497e      	ldr	r1, [pc, #504]	; (8007adc <filtlength+0x2b8>)
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7f8 fcab 	bl	8000240 <strcmp>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <filtlength+0xd0>
		return 6;
 80078f0:	2306      	movs	r3, #6
 80078f2:	e1bd      	b.n	8007c70 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior1.5")){
 80078f4:	497a      	ldr	r1, [pc, #488]	; (8007ae0 <filtlength+0x2bc>)
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7f8 fca2 	bl	8000240 <strcmp>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <filtlength+0xe2>
		return 10;
 8007902:	230a      	movs	r3, #10
 8007904:	e1b4      	b.n	8007c70 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior2.2")){
 8007906:	4977      	ldr	r1, [pc, #476]	; (8007ae4 <filtlength+0x2c0>)
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7f8 fc99 	bl	8000240 <strcmp>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <filtlength+0xf4>
		return 6;
 8007914:	2306      	movs	r3, #6
 8007916:	e1ab      	b.n	8007c70 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior2.4")){
 8007918:	4973      	ldr	r1, [pc, #460]	; (8007ae8 <filtlength+0x2c4>)
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7f8 fc90 	bl	8000240 <strcmp>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <filtlength+0x106>
		return 10;
 8007926:	230a      	movs	r3, #10
 8007928:	e1a2      	b.n	8007c70 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior2.6")){
 800792a:	4970      	ldr	r1, [pc, #448]	; (8007aec <filtlength+0x2c8>)
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7f8 fc87 	bl	8000240 <strcmp>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <filtlength+0x118>
		return 14;
 8007938:	230e      	movs	r3, #14
 800793a:	e199      	b.n	8007c70 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior2.8")){
 800793c:	496c      	ldr	r1, [pc, #432]	; (8007af0 <filtlength+0x2cc>)
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7f8 fc7e 	bl	8000240 <strcmp>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <filtlength+0x12a>
		return 18;
 800794a:	2312      	movs	r3, #18
 800794c:	e190      	b.n	8007c70 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior3.1")){
 800794e:	4969      	ldr	r1, [pc, #420]	; (8007af4 <filtlength+0x2d0>)
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7f8 fc75 	bl	8000240 <strcmp>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <filtlength+0x13c>
		return 4;
 800795c:	2304      	movs	r3, #4
 800795e:	e187      	b.n	8007c70 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior3.3")){
 8007960:	4965      	ldr	r1, [pc, #404]	; (8007af8 <filtlength+0x2d4>)
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7f8 fc6c 	bl	8000240 <strcmp>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <filtlength+0x14e>
		return 8;
 800796e:	2308      	movs	r3, #8
 8007970:	e17e      	b.n	8007c70 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior3.5")){
 8007972:	4962      	ldr	r1, [pc, #392]	; (8007afc <filtlength+0x2d8>)
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f7f8 fc63 	bl	8000240 <strcmp>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <filtlength+0x160>
		return 12;
 8007980:	230c      	movs	r3, #12
 8007982:	e175      	b.n	8007c70 <filtlength+0x44c>
	}

	else if (!strcmp(name,"bior3.7")){
 8007984:	495e      	ldr	r1, [pc, #376]	; (8007b00 <filtlength+0x2dc>)
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7f8 fc5a 	bl	8000240 <strcmp>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <filtlength+0x172>
		return 16;
 8007992:	2310      	movs	r3, #16
 8007994:	e16c      	b.n	8007c70 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior3.9")){
 8007996:	495b      	ldr	r1, [pc, #364]	; (8007b04 <filtlength+0x2e0>)
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7f8 fc51 	bl	8000240 <strcmp>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <filtlength+0x184>
		return 20;
 80079a4:	2314      	movs	r3, #20
 80079a6:	e163      	b.n	8007c70 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior4.4")){
 80079a8:	4957      	ldr	r1, [pc, #348]	; (8007b08 <filtlength+0x2e4>)
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7f8 fc48 	bl	8000240 <strcmp>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <filtlength+0x196>
		return 10;
 80079b6:	230a      	movs	r3, #10
 80079b8:	e15a      	b.n	8007c70 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior5.5")){
 80079ba:	4954      	ldr	r1, [pc, #336]	; (8007b0c <filtlength+0x2e8>)
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7f8 fc3f 	bl	8000240 <strcmp>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <filtlength+0x1a8>
		return 12;
 80079c8:	230c      	movs	r3, #12
 80079ca:	e151      	b.n	8007c70 <filtlength+0x44c>
	}
	else if (!strcmp(name,"bior6.8")){
 80079cc:	4950      	ldr	r1, [pc, #320]	; (8007b10 <filtlength+0x2ec>)
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7f8 fc36 	bl	8000240 <strcmp>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <filtlength+0x1ba>
		return 18;
 80079da:	2312      	movs	r3, #18
 80079dc:	e148      	b.n	8007c70 <filtlength+0x44c>
	}
    else if (!strcmp(name, "rbior1.1")){
 80079de:	494d      	ldr	r1, [pc, #308]	; (8007b14 <filtlength+0x2f0>)
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7f8 fc2d 	bl	8000240 <strcmp>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <filtlength+0x1cc>
        return 2;
 80079ec:	2302      	movs	r3, #2
 80079ee:	e13f      	b.n	8007c70 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior1.3")){
 80079f0:	4949      	ldr	r1, [pc, #292]	; (8007b18 <filtlength+0x2f4>)
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7f8 fc24 	bl	8000240 <strcmp>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <filtlength+0x1de>
        return 6;
 80079fe:	2306      	movs	r3, #6
 8007a00:	e136      	b.n	8007c70 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior1.5")){
 8007a02:	4946      	ldr	r1, [pc, #280]	; (8007b1c <filtlength+0x2f8>)
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7f8 fc1b 	bl	8000240 <strcmp>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <filtlength+0x1f0>
        return 10;
 8007a10:	230a      	movs	r3, #10
 8007a12:	e12d      	b.n	8007c70 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior2.2")){
 8007a14:	4942      	ldr	r1, [pc, #264]	; (8007b20 <filtlength+0x2fc>)
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7f8 fc12 	bl	8000240 <strcmp>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <filtlength+0x202>
        return 6;
 8007a22:	2306      	movs	r3, #6
 8007a24:	e124      	b.n	8007c70 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior2.4")){
 8007a26:	493f      	ldr	r1, [pc, #252]	; (8007b24 <filtlength+0x300>)
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7f8 fc09 	bl	8000240 <strcmp>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <filtlength+0x214>
        return 10;
 8007a34:	230a      	movs	r3, #10
 8007a36:	e11b      	b.n	8007c70 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior2.6")){
 8007a38:	493b      	ldr	r1, [pc, #236]	; (8007b28 <filtlength+0x304>)
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7f8 fc00 	bl	8000240 <strcmp>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <filtlength+0x226>
        return 14;
 8007a46:	230e      	movs	r3, #14
 8007a48:	e112      	b.n	8007c70 <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior2.8")){
 8007a4a:	4938      	ldr	r1, [pc, #224]	; (8007b2c <filtlength+0x308>)
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7f8 fbf7 	bl	8000240 <strcmp>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <filtlength+0x238>
        return 18;
 8007a58:	2312      	movs	r3, #18
 8007a5a:	e109      	b.n	8007c70 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior3.1")){
 8007a5c:	4934      	ldr	r1, [pc, #208]	; (8007b30 <filtlength+0x30c>)
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7f8 fbee 	bl	8000240 <strcmp>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <filtlength+0x24a>
        return 4;
 8007a6a:	2304      	movs	r3, #4
 8007a6c:	e100      	b.n	8007c70 <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior3.3")){
 8007a6e:	4931      	ldr	r1, [pc, #196]	; (8007b34 <filtlength+0x310>)
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7f8 fbe5 	bl	8000240 <strcmp>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <filtlength+0x25c>
        return 8;
 8007a7c:	2308      	movs	r3, #8
 8007a7e:	e0f7      	b.n	8007c70 <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior3.5")){
 8007a80:	492d      	ldr	r1, [pc, #180]	; (8007b38 <filtlength+0x314>)
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7f8 fbdc 	bl	8000240 <strcmp>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <filtlength+0x26e>
        return 12;
 8007a8e:	230c      	movs	r3, #12
 8007a90:	e0ee      	b.n	8007c70 <filtlength+0x44c>
    }

    else if (!strcmp(name, "rbior3.7")){
 8007a92:	492a      	ldr	r1, [pc, #168]	; (8007b3c <filtlength+0x318>)
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7f8 fbd3 	bl	8000240 <strcmp>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <filtlength+0x280>
        return 16;
 8007aa0:	2310      	movs	r3, #16
 8007aa2:	e0e5      	b.n	8007c70 <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior3.9")){
 8007aa4:	4926      	ldr	r1, [pc, #152]	; (8007b40 <filtlength+0x31c>)
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7f8 fbca 	bl	8000240 <strcmp>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <filtlength+0x292>
        return 20;
 8007ab2:	2314      	movs	r3, #20
 8007ab4:	e0dc      	b.n	8007c70 <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior4.4")){
 8007ab6:	4923      	ldr	r1, [pc, #140]	; (8007b44 <filtlength+0x320>)
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7f8 fbc1 	bl	8000240 <strcmp>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d141      	bne.n	8007b48 <filtlength+0x324>
        return 10;
 8007ac4:	230a      	movs	r3, #10
 8007ac6:	e0d3      	b.n	8007c70 <filtlength+0x44c>
 8007ac8:	080110a4 	.word	0x080110a4
 8007acc:	080110ac 	.word	0x080110ac
 8007ad0:	080110b0 	.word	0x080110b0
 8007ad4:	080110b4 	.word	0x080110b4
 8007ad8:	080110d0 	.word	0x080110d0
 8007adc:	080110d8 	.word	0x080110d8
 8007ae0:	080110e0 	.word	0x080110e0
 8007ae4:	080110e8 	.word	0x080110e8
 8007ae8:	080110f0 	.word	0x080110f0
 8007aec:	080110f8 	.word	0x080110f8
 8007af0:	08011100 	.word	0x08011100
 8007af4:	08011108 	.word	0x08011108
 8007af8:	08011110 	.word	0x08011110
 8007afc:	08011118 	.word	0x08011118
 8007b00:	08011120 	.word	0x08011120
 8007b04:	08011128 	.word	0x08011128
 8007b08:	08011130 	.word	0x08011130
 8007b0c:	08011138 	.word	0x08011138
 8007b10:	08011140 	.word	0x08011140
 8007b14:	08011148 	.word	0x08011148
 8007b18:	08011154 	.word	0x08011154
 8007b1c:	08011160 	.word	0x08011160
 8007b20:	0801116c 	.word	0x0801116c
 8007b24:	08011178 	.word	0x08011178
 8007b28:	08011184 	.word	0x08011184
 8007b2c:	08011190 	.word	0x08011190
 8007b30:	0801119c 	.word	0x0801119c
 8007b34:	080111a8 	.word	0x080111a8
 8007b38:	080111b4 	.word	0x080111b4
 8007b3c:	080111c0 	.word	0x080111c0
 8007b40:	080111cc 	.word	0x080111cc
 8007b44:	080111d8 	.word	0x080111d8
    }
    else if (!strcmp(name, "rbior5.5")){
 8007b48:	494b      	ldr	r1, [pc, #300]	; (8007c78 <filtlength+0x454>)
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7f8 fb78 	bl	8000240 <strcmp>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <filtlength+0x336>
        return 12;
 8007b56:	230c      	movs	r3, #12
 8007b58:	e08a      	b.n	8007c70 <filtlength+0x44c>
    }
    else if (!strcmp(name, "rbior6.8")){
 8007b5a:	4948      	ldr	r1, [pc, #288]	; (8007c7c <filtlength+0x458>)
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7f8 fb6f 	bl	8000240 <strcmp>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <filtlength+0x348>
        return 18;
 8007b68:	2312      	movs	r3, #18
 8007b6a:	e081      	b.n	8007c70 <filtlength+0x44c>
    }
    else if (len > 4 && strstr(name, "coif") != NULL)
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	dd36      	ble.n	8007be0 <filtlength+0x3bc>
 8007b72:	4943      	ldr	r1, [pc, #268]	; (8007c80 <filtlength+0x45c>)
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f004 fdd5 	bl	800c724 <strstr>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d02f      	beq.n	8007be0 <filtlength+0x3bc>
    {
        new_str = (char*)malloc(sizeof(char)*(len - 4 + 1));
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	3b03      	subs	r3, #3
 8007b84:	4618      	mov	r0, r3
 8007b86:	f003 fb53 	bl	800b230 <malloc>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	60fb      	str	r3, [r7, #12]
        for (i = 4; i < len + 1; i++)
 8007b8e:	2304      	movs	r3, #4
 8007b90:	617b      	str	r3, [r7, #20]
 8007b92:	e00b      	b.n	8007bac <filtlength+0x388>
            new_str[i - 4] = name[i];
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	441a      	add	r2, r3
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	3b04      	subs	r3, #4
 8007b9e:	68f9      	ldr	r1, [r7, #12]
 8007ba0:	440b      	add	r3, r1
 8007ba2:	7812      	ldrb	r2, [r2, #0]
 8007ba4:	701a      	strb	r2, [r3, #0]
        for (i = 4; i < len + 1; i++)
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	daef      	bge.n	8007b94 <filtlength+0x370>

        N = atoi(new_str);
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f003 fb0f 	bl	800b1d8 <atoi>
 8007bba:	60b8      	str	r0, [r7, #8]
        free(new_str);
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f003 fb3f 	bl	800b240 <free>
        if (N>17)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b11      	cmp	r3, #17
 8007bc6:	dd05      	ble.n	8007bd4 <filtlength+0x3b0>
        {
            printf("\n Filter Not in Database \n");
 8007bc8:	482e      	ldr	r0, [pc, #184]	; (8007c84 <filtlength+0x460>)
 8007bca:	f004 fbe3 	bl	800c394 <puts>
            return -1;
 8007bce:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd2:	e04d      	b.n	8007c70 <filtlength+0x44c>
        }

        return N * 6;
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	4413      	add	r3, r2
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	e047      	b.n	8007c70 <filtlength+0x44c>
    }
    else if (len > 3 && strstr(name, "sym") != NULL)
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	dd36      	ble.n	8007c54 <filtlength+0x430>
 8007be6:	4928      	ldr	r1, [pc, #160]	; (8007c88 <filtlength+0x464>)
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f004 fd9b 	bl	800c724 <strstr>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d02f      	beq.n	8007c54 <filtlength+0x430>
    {
        new_str = (char*)malloc(sizeof(char)*(len - 3 + 1));
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	3b02      	subs	r3, #2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f003 fb19 	bl	800b230 <malloc>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	60fb      	str	r3, [r7, #12]
        for (i = 3; i < len + 1; i++)
 8007c02:	2303      	movs	r3, #3
 8007c04:	617b      	str	r3, [r7, #20]
 8007c06:	e00b      	b.n	8007c20 <filtlength+0x3fc>
            new_str[i - 3] = name[i];
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	441a      	add	r2, r3
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	3b03      	subs	r3, #3
 8007c12:	68f9      	ldr	r1, [r7, #12]
 8007c14:	440b      	add	r3, r1
 8007c16:	7812      	ldrb	r2, [r2, #0]
 8007c18:	701a      	strb	r2, [r3, #0]
        for (i = 3; i < len + 1; i++)
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	daef      	bge.n	8007c08 <filtlength+0x3e4>

        N = atoi(new_str);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f003 fad5 	bl	800b1d8 <atoi>
 8007c2e:	60b8      	str	r0, [r7, #8]
        free(new_str);
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f003 fb05 	bl	800b240 <free>
        if (N>20 || N < 2)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b14      	cmp	r3, #20
 8007c3a:	dc02      	bgt.n	8007c42 <filtlength+0x41e>
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	dc05      	bgt.n	8007c4e <filtlength+0x42a>
        {
            printf("\n Filter Not in Database \n");
 8007c42:	4810      	ldr	r0, [pc, #64]	; (8007c84 <filtlength+0x460>)
 8007c44:	f004 fba6 	bl	800c394 <puts>
            return -1;
 8007c48:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4c:	e010      	b.n	8007c70 <filtlength+0x44c>
        }

        return N * 2;
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	e00d      	b.n	8007c70 <filtlength+0x44c>
    }
    else if (!strcmp(name, "meyer")){
 8007c54:	490d      	ldr	r1, [pc, #52]	; (8007c8c <filtlength+0x468>)
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7f8 faf2 	bl	8000240 <strcmp>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <filtlength+0x442>
        return 102;
 8007c62:	2366      	movs	r3, #102	; 0x66
 8007c64:	e004      	b.n	8007c70 <filtlength+0x44c>
    }
	else {
		printf("\n Filter Not in Database \n");
 8007c66:	4807      	ldr	r0, [pc, #28]	; (8007c84 <filtlength+0x460>)
 8007c68:	f004 fb94 	bl	800c394 <puts>
		return -1;
 8007c6c:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	080111e4 	.word	0x080111e4
 8007c7c:	080111f0 	.word	0x080111f0
 8007c80:	080111fc 	.word	0x080111fc
 8007c84:	080110b4 	.word	0x080110b4
 8007c88:	08011204 	.word	0x08011204
 8007c8c:	08011208 	.word	0x08011208

08007c90 <copy_reverse>:

void copy_reverse(const double *in, int N,double *out)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
    int count = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]
    for (count = 0; count < N; count++)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	e014      	b.n	8007cd0 <copy_reverse+0x40>
        out[count] = in[N - count - 1];
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	461a      	mov	r2, r3
 8007cae:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007cb2:	4413      	add	r3, r2
 8007cb4:	00db      	lsls	r3, r3, #3
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4413      	add	r3, r2
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	00d2      	lsls	r2, r2, #3
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	4411      	add	r1, r2
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	e9c1 2300 	strd	r2, r3, [r1]
    for (count = 0; count < N; count++)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	dbe6      	blt.n	8007ca6 <copy_reverse+0x16>
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	371c      	adds	r7, #28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <qmf_wrev>:

void qmf_wrev(const double *in, int N, double *out)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b086      	sub	sp, #24
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	607a      	str	r2, [r7, #4]
    double *sigOutTemp;
    sigOutTemp = (double*)malloc(N*sizeof(double));
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	00db      	lsls	r3, r3, #3
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f003 fa9a 	bl	800b230 <malloc>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	617b      	str	r3, [r7, #20]

    qmf_even(in, N, sigOutTemp);
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	68b9      	ldr	r1, [r7, #8]
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 f80c 	bl	8007d22 <qmf_even>
    copy_reverse(sigOutTemp, N, out);
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	6978      	ldr	r0, [r7, #20]
 8007d10:	f7ff ffbe 	bl	8007c90 <copy_reverse>

    free(sigOutTemp);
 8007d14:	6978      	ldr	r0, [r7, #20]
 8007d16:	f003 fa93 	bl	800b240 <free>
    return;
 8007d1a:	bf00      	nop
}
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <qmf_even>:

void qmf_even(const double *in, int N,double *out)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
    int count = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]
    for (count = 0; count < N; count++)
 8007d32:	2300      	movs	r3, #0
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	e027      	b.n	8007d88 <qmf_even+0x66>
    {
        out[count] = in[N - count - 1];
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007d44:	4413      	add	r3, r2
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	00d2      	lsls	r2, r2, #3
 8007d50:	6879      	ldr	r1, [r7, #4]
 8007d52:	4411      	add	r1, r2
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	e9c1 2300 	strd	r2, r3, [r1]
        if (count % 2 != 0)
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00d      	beq.n	8007d82 <qmf_even+0x60>
        {
            out[count] = -1 * out[count];
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	ed93 7b00 	vldr	d7, [r3]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	00db      	lsls	r3, r3, #3
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	4413      	add	r3, r2
 8007d7a:	eeb1 7b47 	vneg.f64	d7, d7
 8007d7e:	ed83 7b00 	vstr	d7, [r3]
    for (count = 0; count < N; count++)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	3301      	adds	r3, #1
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	dbd3      	blt.n	8007d38 <qmf_even+0x16>
        }
    }
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <copy>:
void copy(const double *in, int N, double *out)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b087      	sub	sp, #28
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	607a      	str	r2, [r7, #4]
    int count = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	617b      	str	r3, [r7, #20]
    for (count = 0; count < N; count++)
 8007dae:	2300      	movs	r3, #0
 8007db0:	617b      	str	r3, [r7, #20]
 8007db2:	e00e      	b.n	8007dd2 <copy+0x34>
        out[count] = in[count];
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	00d2      	lsls	r2, r2, #3
 8007dc0:	6879      	ldr	r1, [r7, #4]
 8007dc2:	4411      	add	r1, r2
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	e9c1 2300 	strd	r2, r3, [r1]
    for (count = 0; count < N; count++)
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	dbec      	blt.n	8007db4 <copy+0x16>
}
 8007dda:	bf00      	nop
 8007ddc:	bf00      	nop
 8007dde:	371c      	adds	r7, #28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <filtcoef>:

int filtcoef(const char* name, double *lp1, double *hp1, double *lp2, double *hp2) {
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b098      	sub	sp, #96	; 0x60
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]
    int i = 0; 
 8007df6:	2300      	movs	r3, #0
 8007df8:	65fb      	str	r3, [r7, #92]	; 0x5c
    int N = filtlength(name);
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f7ff fd12 	bl	8007824 <filtlength>
 8007e00:	65b8      	str	r0, [r7, #88]	; 0x58
	if (!strcmp(name,"haar") || !strcmp(name,"db1")) {
 8007e02:	4999      	ldr	r1, [pc, #612]	; (8008068 <filtcoef+0x280>)
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f7f8 fa1b 	bl	8000240 <strcmp>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d006      	beq.n	8007e1e <filtcoef+0x36>
 8007e10:	4996      	ldr	r1, [pc, #600]	; (800806c <filtcoef+0x284>)
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f7f8 fa14 	bl	8000240 <strcmp>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d116      	bne.n	8007e4c <filtcoef+0x64>
        copy_reverse(db1, N, lp1);
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e22:	4893      	ldr	r0, [pc, #588]	; (8008070 <filtcoef+0x288>)
 8007e24:	f7ff ff34 	bl	8007c90 <copy_reverse>
        qmf_wrev(db1, N, hp1);
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e2c:	4890      	ldr	r0, [pc, #576]	; (8008070 <filtcoef+0x288>)
 8007e2e:	f7ff ff5a 	bl	8007ce6 <qmf_wrev>
        copy(db1, N, lp2);
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e36:	488e      	ldr	r0, [pc, #568]	; (8008070 <filtcoef+0x288>)
 8007e38:	f7ff ffb1 	bl	8007d9e <copy>
        qmf_even(db1, N, hp2);
 8007e3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e40:	488b      	ldr	r0, [pc, #556]	; (8008070 <filtcoef+0x288>)
 8007e42:	f7ff ff6e 	bl	8007d22 <qmf_even>

		return N;
 8007e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e48:	f002 b8e6 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db2")){
 8007e4c:	4989      	ldr	r1, [pc, #548]	; (8008074 <filtcoef+0x28c>)
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7f8 f9f6 	bl	8000240 <strcmp>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d116      	bne.n	8007e88 <filtcoef+0xa0>
        copy_reverse(db2, N, lp1);
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e5e:	4886      	ldr	r0, [pc, #536]	; (8008078 <filtcoef+0x290>)
 8007e60:	f7ff ff16 	bl	8007c90 <copy_reverse>
        qmf_wrev(db2, N, hp1);
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e68:	4883      	ldr	r0, [pc, #524]	; (8008078 <filtcoef+0x290>)
 8007e6a:	f7ff ff3c 	bl	8007ce6 <qmf_wrev>
        copy(db2, N, lp2);
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e72:	4881      	ldr	r0, [pc, #516]	; (8008078 <filtcoef+0x290>)
 8007e74:	f7ff ff93 	bl	8007d9e <copy>
        qmf_even(db2, N, hp2);
 8007e78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e7c:	487e      	ldr	r0, [pc, #504]	; (8008078 <filtcoef+0x290>)
 8007e7e:	f7ff ff50 	bl	8007d22 <qmf_even>

        return N;
 8007e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e84:	f002 b8c8 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db3")){
 8007e88:	497c      	ldr	r1, [pc, #496]	; (800807c <filtcoef+0x294>)
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f7f8 f9d8 	bl	8000240 <strcmp>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d116      	bne.n	8007ec4 <filtcoef+0xdc>
        copy_reverse(db3, N, lp1);
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e9a:	4879      	ldr	r0, [pc, #484]	; (8008080 <filtcoef+0x298>)
 8007e9c:	f7ff fef8 	bl	8007c90 <copy_reverse>
        qmf_wrev(db3, N, hp1);
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ea4:	4876      	ldr	r0, [pc, #472]	; (8008080 <filtcoef+0x298>)
 8007ea6:	f7ff ff1e 	bl	8007ce6 <qmf_wrev>
        copy(db3, N, lp2);
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007eae:	4874      	ldr	r0, [pc, #464]	; (8008080 <filtcoef+0x298>)
 8007eb0:	f7ff ff75 	bl	8007d9e <copy>
        qmf_even(db3, N, hp2);
 8007eb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007eb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007eb8:	4871      	ldr	r0, [pc, #452]	; (8008080 <filtcoef+0x298>)
 8007eba:	f7ff ff32 	bl	8007d22 <qmf_even>

        return N;
 8007ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ec0:	f002 b8aa 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db4")){
 8007ec4:	496f      	ldr	r1, [pc, #444]	; (8008084 <filtcoef+0x29c>)
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f7f8 f9ba 	bl	8000240 <strcmp>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d116      	bne.n	8007f00 <filtcoef+0x118>
        copy_reverse(db4, N, lp1);
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ed6:	486c      	ldr	r0, [pc, #432]	; (8008088 <filtcoef+0x2a0>)
 8007ed8:	f7ff feda 	bl	8007c90 <copy_reverse>
        qmf_wrev(db4, N, hp1);
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ee0:	4869      	ldr	r0, [pc, #420]	; (8008088 <filtcoef+0x2a0>)
 8007ee2:	f7ff ff00 	bl	8007ce6 <qmf_wrev>
        copy(db4, N, lp2);
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007eea:	4867      	ldr	r0, [pc, #412]	; (8008088 <filtcoef+0x2a0>)
 8007eec:	f7ff ff57 	bl	8007d9e <copy>
        qmf_even(db4, N, hp2);
 8007ef0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ef2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ef4:	4864      	ldr	r0, [pc, #400]	; (8008088 <filtcoef+0x2a0>)
 8007ef6:	f7ff ff14 	bl	8007d22 <qmf_even>

        return N;
 8007efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007efc:	f002 b88c 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db5")){
 8007f00:	4962      	ldr	r1, [pc, #392]	; (800808c <filtcoef+0x2a4>)
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f7f8 f99c 	bl	8000240 <strcmp>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d116      	bne.n	8007f3c <filtcoef+0x154>
        copy_reverse(db5, N, lp1);
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f12:	485f      	ldr	r0, [pc, #380]	; (8008090 <filtcoef+0x2a8>)
 8007f14:	f7ff febc 	bl	8007c90 <copy_reverse>
        qmf_wrev(db5, N, hp1);
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f1c:	485c      	ldr	r0, [pc, #368]	; (8008090 <filtcoef+0x2a8>)
 8007f1e:	f7ff fee2 	bl	8007ce6 <qmf_wrev>
        copy(db5, N, lp2);
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f26:	485a      	ldr	r0, [pc, #360]	; (8008090 <filtcoef+0x2a8>)
 8007f28:	f7ff ff39 	bl	8007d9e <copy>
        qmf_even(db5, N, hp2);
 8007f2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f30:	4857      	ldr	r0, [pc, #348]	; (8008090 <filtcoef+0x2a8>)
 8007f32:	f7ff fef6 	bl	8007d22 <qmf_even>

        return N;
 8007f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f38:	f002 b86e 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db6")){
 8007f3c:	4955      	ldr	r1, [pc, #340]	; (8008094 <filtcoef+0x2ac>)
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7f8 f97e 	bl	8000240 <strcmp>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d116      	bne.n	8007f78 <filtcoef+0x190>
        copy_reverse(db6, N, lp1);
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f4e:	4852      	ldr	r0, [pc, #328]	; (8008098 <filtcoef+0x2b0>)
 8007f50:	f7ff fe9e 	bl	8007c90 <copy_reverse>
        qmf_wrev(db6, N, hp1);
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f58:	484f      	ldr	r0, [pc, #316]	; (8008098 <filtcoef+0x2b0>)
 8007f5a:	f7ff fec4 	bl	8007ce6 <qmf_wrev>
        copy(db6, N, lp2);
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f62:	484d      	ldr	r0, [pc, #308]	; (8008098 <filtcoef+0x2b0>)
 8007f64:	f7ff ff1b 	bl	8007d9e <copy>
        qmf_even(db6, N, hp2);
 8007f68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f6c:	484a      	ldr	r0, [pc, #296]	; (8008098 <filtcoef+0x2b0>)
 8007f6e:	f7ff fed8 	bl	8007d22 <qmf_even>

        return N;
 8007f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f74:	f002 b850 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db7")){
 8007f78:	4948      	ldr	r1, [pc, #288]	; (800809c <filtcoef+0x2b4>)
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f7f8 f960 	bl	8000240 <strcmp>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d116      	bne.n	8007fb4 <filtcoef+0x1cc>
        copy_reverse(db7, N, lp1);
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f8a:	4845      	ldr	r0, [pc, #276]	; (80080a0 <filtcoef+0x2b8>)
 8007f8c:	f7ff fe80 	bl	8007c90 <copy_reverse>
        qmf_wrev(db7, N, hp1);
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f94:	4842      	ldr	r0, [pc, #264]	; (80080a0 <filtcoef+0x2b8>)
 8007f96:	f7ff fea6 	bl	8007ce6 <qmf_wrev>
        copy(db7, N, lp2);
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f9e:	4840      	ldr	r0, [pc, #256]	; (80080a0 <filtcoef+0x2b8>)
 8007fa0:	f7ff fefd 	bl	8007d9e <copy>
        qmf_even(db7, N, hp2);
 8007fa4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fa8:	483d      	ldr	r0, [pc, #244]	; (80080a0 <filtcoef+0x2b8>)
 8007faa:	f7ff feba 	bl	8007d22 <qmf_even>

        return N;
 8007fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fb0:	f002 b832 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db8")){
 8007fb4:	493b      	ldr	r1, [pc, #236]	; (80080a4 <filtcoef+0x2bc>)
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f7f8 f942 	bl	8000240 <strcmp>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d116      	bne.n	8007ff0 <filtcoef+0x208>
        copy_reverse(db8, N, lp1);
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fc6:	4838      	ldr	r0, [pc, #224]	; (80080a8 <filtcoef+0x2c0>)
 8007fc8:	f7ff fe62 	bl	8007c90 <copy_reverse>
        qmf_wrev(db8, N, hp1);
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fd0:	4835      	ldr	r0, [pc, #212]	; (80080a8 <filtcoef+0x2c0>)
 8007fd2:	f7ff fe88 	bl	8007ce6 <qmf_wrev>
        copy(db8, N, lp2);
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fda:	4833      	ldr	r0, [pc, #204]	; (80080a8 <filtcoef+0x2c0>)
 8007fdc:	f7ff fedf 	bl	8007d9e <copy>
        qmf_even(db8, N, hp2);
 8007fe0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fe2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fe4:	4830      	ldr	r0, [pc, #192]	; (80080a8 <filtcoef+0x2c0>)
 8007fe6:	f7ff fe9c 	bl	8007d22 <qmf_even>

        return N;
 8007fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fec:	f002 b814 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db9")){
 8007ff0:	492e      	ldr	r1, [pc, #184]	; (80080ac <filtcoef+0x2c4>)
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f7f8 f924 	bl	8000240 <strcmp>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d116      	bne.n	800802c <filtcoef+0x244>
        copy_reverse(db9, N, lp1);
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008002:	482b      	ldr	r0, [pc, #172]	; (80080b0 <filtcoef+0x2c8>)
 8008004:	f7ff fe44 	bl	8007c90 <copy_reverse>
        qmf_wrev(db9, N, hp1);
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800800c:	4828      	ldr	r0, [pc, #160]	; (80080b0 <filtcoef+0x2c8>)
 800800e:	f7ff fe6a 	bl	8007ce6 <qmf_wrev>
        copy(db9, N, lp2);
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008016:	4826      	ldr	r0, [pc, #152]	; (80080b0 <filtcoef+0x2c8>)
 8008018:	f7ff fec1 	bl	8007d9e <copy>
        qmf_even(db9, N, hp2);
 800801c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800801e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008020:	4823      	ldr	r0, [pc, #140]	; (80080b0 <filtcoef+0x2c8>)
 8008022:	f7ff fe7e 	bl	8007d22 <qmf_even>

        return N;
 8008026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008028:	f001 bff6 	b.w	800a018 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"db10")){
 800802c:	4921      	ldr	r1, [pc, #132]	; (80080b4 <filtcoef+0x2cc>)
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7f8 f906 	bl	8000240 <strcmp>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d140      	bne.n	80080bc <filtcoef+0x2d4>
        copy_reverse(db10, N, lp1);
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800803e:	481e      	ldr	r0, [pc, #120]	; (80080b8 <filtcoef+0x2d0>)
 8008040:	f7ff fe26 	bl	8007c90 <copy_reverse>
        qmf_wrev(db10, N, hp1);
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008048:	481b      	ldr	r0, [pc, #108]	; (80080b8 <filtcoef+0x2d0>)
 800804a:	f7ff fe4c 	bl	8007ce6 <qmf_wrev>
        copy(db10, N, lp2);
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008052:	4819      	ldr	r0, [pc, #100]	; (80080b8 <filtcoef+0x2d0>)
 8008054:	f7ff fea3 	bl	8007d9e <copy>
        qmf_even(db10, N, hp2);
 8008058:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800805a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800805c:	4816      	ldr	r0, [pc, #88]	; (80080b8 <filtcoef+0x2d0>)
 800805e:	f7ff fe60 	bl	8007d22 <qmf_even>

        return N;
 8008062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008064:	f001 bfd8 	b.w	800a018 <filtcoef+0x2230>
 8008068:	080110a4 	.word	0x080110a4
 800806c:	080110ac 	.word	0x080110ac
 8008070:	08012208 	.word	0x08012208
 8008074:	08011210 	.word	0x08011210
 8008078:	08012218 	.word	0x08012218
 800807c:	08011214 	.word	0x08011214
 8008080:	08012238 	.word	0x08012238
 8008084:	08011218 	.word	0x08011218
 8008088:	08012268 	.word	0x08012268
 800808c:	0801121c 	.word	0x0801121c
 8008090:	080122a8 	.word	0x080122a8
 8008094:	08011220 	.word	0x08011220
 8008098:	080122f8 	.word	0x080122f8
 800809c:	08011224 	.word	0x08011224
 80080a0:	08012358 	.word	0x08012358
 80080a4:	08011228 	.word	0x08011228
 80080a8:	080123c8 	.word	0x080123c8
 80080ac:	0801122c 	.word	0x0801122c
 80080b0:	08012448 	.word	0x08012448
 80080b4:	08011230 	.word	0x08011230
 80080b8:	080124d8 	.word	0x080124d8
	}

	else if (!strcmp(name,"db11")){
 80080bc:	4995      	ldr	r1, [pc, #596]	; (8008314 <filtcoef+0x52c>)
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f7f8 f8be 	bl	8000240 <strcmp>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d116      	bne.n	80080f8 <filtcoef+0x310>
        copy_reverse(db11, N, lp1);
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080ce:	4892      	ldr	r0, [pc, #584]	; (8008318 <filtcoef+0x530>)
 80080d0:	f7ff fdde 	bl	8007c90 <copy_reverse>
        qmf_wrev(db11, N, hp1);
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080d8:	488f      	ldr	r0, [pc, #572]	; (8008318 <filtcoef+0x530>)
 80080da:	f7ff fe04 	bl	8007ce6 <qmf_wrev>
        copy(db11, N, lp2);
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080e2:	488d      	ldr	r0, [pc, #564]	; (8008318 <filtcoef+0x530>)
 80080e4:	f7ff fe5b 	bl	8007d9e <copy>
        qmf_even(db11, N, hp2);
 80080e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080ec:	488a      	ldr	r0, [pc, #552]	; (8008318 <filtcoef+0x530>)
 80080ee:	f7ff fe18 	bl	8007d22 <qmf_even>

        return N;
 80080f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080f4:	f001 bf90 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db12")){
 80080f8:	4988      	ldr	r1, [pc, #544]	; (800831c <filtcoef+0x534>)
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7f8 f8a0 	bl	8000240 <strcmp>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d116      	bne.n	8008134 <filtcoef+0x34c>
        copy_reverse(db12, N, lp1);
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800810a:	4885      	ldr	r0, [pc, #532]	; (8008320 <filtcoef+0x538>)
 800810c:	f7ff fdc0 	bl	8007c90 <copy_reverse>
        qmf_wrev(db12, N, hp1);
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008114:	4882      	ldr	r0, [pc, #520]	; (8008320 <filtcoef+0x538>)
 8008116:	f7ff fde6 	bl	8007ce6 <qmf_wrev>
        copy(db12, N, lp2);
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800811e:	4880      	ldr	r0, [pc, #512]	; (8008320 <filtcoef+0x538>)
 8008120:	f7ff fe3d 	bl	8007d9e <copy>
        qmf_even(db12, N, hp2);
 8008124:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008126:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008128:	487d      	ldr	r0, [pc, #500]	; (8008320 <filtcoef+0x538>)
 800812a:	f7ff fdfa 	bl	8007d22 <qmf_even>

        return N;
 800812e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008130:	f001 bf72 	b.w	800a018 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"db13")){
 8008134:	497b      	ldr	r1, [pc, #492]	; (8008324 <filtcoef+0x53c>)
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7f8 f882 	bl	8000240 <strcmp>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d116      	bne.n	8008170 <filtcoef+0x388>
        copy_reverse(db13, N, lp1);
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008146:	4878      	ldr	r0, [pc, #480]	; (8008328 <filtcoef+0x540>)
 8008148:	f7ff fda2 	bl	8007c90 <copy_reverse>
        qmf_wrev(db13, N, hp1);
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008150:	4875      	ldr	r0, [pc, #468]	; (8008328 <filtcoef+0x540>)
 8008152:	f7ff fdc8 	bl	8007ce6 <qmf_wrev>
        copy(db13, N, lp2);
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800815a:	4873      	ldr	r0, [pc, #460]	; (8008328 <filtcoef+0x540>)
 800815c:	f7ff fe1f 	bl	8007d9e <copy>
        qmf_even(db13, N, hp2);
 8008160:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008162:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008164:	4870      	ldr	r0, [pc, #448]	; (8008328 <filtcoef+0x540>)
 8008166:	f7ff fddc 	bl	8007d22 <qmf_even>

        return N;
 800816a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800816c:	f001 bf54 	b.w	800a018 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"db14")){
 8008170:	496e      	ldr	r1, [pc, #440]	; (800832c <filtcoef+0x544>)
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f7f8 f864 	bl	8000240 <strcmp>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d116      	bne.n	80081ac <filtcoef+0x3c4>
        copy_reverse(db14, N, lp1);
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008182:	486b      	ldr	r0, [pc, #428]	; (8008330 <filtcoef+0x548>)
 8008184:	f7ff fd84 	bl	8007c90 <copy_reverse>
        qmf_wrev(db14, N, hp1);
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800818c:	4868      	ldr	r0, [pc, #416]	; (8008330 <filtcoef+0x548>)
 800818e:	f7ff fdaa 	bl	8007ce6 <qmf_wrev>
        copy(db14, N, lp2);
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008196:	4866      	ldr	r0, [pc, #408]	; (8008330 <filtcoef+0x548>)
 8008198:	f7ff fe01 	bl	8007d9e <copy>
        qmf_even(db14, N, hp2);
 800819c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800819e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081a0:	4863      	ldr	r0, [pc, #396]	; (8008330 <filtcoef+0x548>)
 80081a2:	f7ff fdbe 	bl	8007d22 <qmf_even>

        return N;
 80081a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081a8:	f001 bf36 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"db15")){
 80081ac:	4961      	ldr	r1, [pc, #388]	; (8008334 <filtcoef+0x54c>)
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f7f8 f846 	bl	8000240 <strcmp>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d116      	bne.n	80081e8 <filtcoef+0x400>
        copy_reverse(db15, N, lp1);
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081be:	485e      	ldr	r0, [pc, #376]	; (8008338 <filtcoef+0x550>)
 80081c0:	f7ff fd66 	bl	8007c90 <copy_reverse>
        qmf_wrev(db15, N, hp1);
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081c8:	485b      	ldr	r0, [pc, #364]	; (8008338 <filtcoef+0x550>)
 80081ca:	f7ff fd8c 	bl	8007ce6 <qmf_wrev>
        copy(db15, N, lp2);
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081d2:	4859      	ldr	r0, [pc, #356]	; (8008338 <filtcoef+0x550>)
 80081d4:	f7ff fde3 	bl	8007d9e <copy>
        qmf_even(db15, N, hp2);
 80081d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80081da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081dc:	4856      	ldr	r0, [pc, #344]	; (8008338 <filtcoef+0x550>)
 80081de:	f7ff fda0 	bl	8007d22 <qmf_even>

        return N;
 80081e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081e4:	f001 bf18 	b.w	800a018 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "db16")){
 80081e8:	4954      	ldr	r1, [pc, #336]	; (800833c <filtcoef+0x554>)
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f7f8 f828 	bl	8000240 <strcmp>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d116      	bne.n	8008224 <filtcoef+0x43c>
        copy_reverse(db16, N, lp1);
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081fa:	4851      	ldr	r0, [pc, #324]	; (8008340 <filtcoef+0x558>)
 80081fc:	f7ff fd48 	bl	8007c90 <copy_reverse>
        qmf_wrev(db16, N, hp1);
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008204:	484e      	ldr	r0, [pc, #312]	; (8008340 <filtcoef+0x558>)
 8008206:	f7ff fd6e 	bl	8007ce6 <qmf_wrev>
        copy(db16, N, lp2);
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800820e:	484c      	ldr	r0, [pc, #304]	; (8008340 <filtcoef+0x558>)
 8008210:	f7ff fdc5 	bl	8007d9e <copy>
        qmf_even(db16, N, hp2);
 8008214:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008216:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008218:	4849      	ldr	r0, [pc, #292]	; (8008340 <filtcoef+0x558>)
 800821a:	f7ff fd82 	bl	8007d22 <qmf_even>

        return N;
 800821e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008220:	f001 befa 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db17")){
 8008224:	4947      	ldr	r1, [pc, #284]	; (8008344 <filtcoef+0x55c>)
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7f8 f80a 	bl	8000240 <strcmp>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d116      	bne.n	8008260 <filtcoef+0x478>
        copy_reverse(db17, N, lp1);
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008236:	4844      	ldr	r0, [pc, #272]	; (8008348 <filtcoef+0x560>)
 8008238:	f7ff fd2a 	bl	8007c90 <copy_reverse>
        qmf_wrev(db17, N, hp1);
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008240:	4841      	ldr	r0, [pc, #260]	; (8008348 <filtcoef+0x560>)
 8008242:	f7ff fd50 	bl	8007ce6 <qmf_wrev>
        copy(db17, N, lp2);
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800824a:	483f      	ldr	r0, [pc, #252]	; (8008348 <filtcoef+0x560>)
 800824c:	f7ff fda7 	bl	8007d9e <copy>
        qmf_even(db17, N, hp2);
 8008250:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008252:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008254:	483c      	ldr	r0, [pc, #240]	; (8008348 <filtcoef+0x560>)
 8008256:	f7ff fd64 	bl	8007d22 <qmf_even>

        return N;
 800825a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800825c:	f001 bedc 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db18")){
 8008260:	493a      	ldr	r1, [pc, #232]	; (800834c <filtcoef+0x564>)
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f7f7 ffec 	bl	8000240 <strcmp>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d116      	bne.n	800829c <filtcoef+0x4b4>
        copy_reverse(db18, N, lp1);
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008272:	4837      	ldr	r0, [pc, #220]	; (8008350 <filtcoef+0x568>)
 8008274:	f7ff fd0c 	bl	8007c90 <copy_reverse>
        qmf_wrev(db18, N, hp1);
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800827c:	4834      	ldr	r0, [pc, #208]	; (8008350 <filtcoef+0x568>)
 800827e:	f7ff fd32 	bl	8007ce6 <qmf_wrev>
        copy(db18, N, lp2);
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008286:	4832      	ldr	r0, [pc, #200]	; (8008350 <filtcoef+0x568>)
 8008288:	f7ff fd89 	bl	8007d9e <copy>
        qmf_even(db18, N, hp2);
 800828c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800828e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008290:	482f      	ldr	r0, [pc, #188]	; (8008350 <filtcoef+0x568>)
 8008292:	f7ff fd46 	bl	8007d22 <qmf_even>

        return N;
 8008296:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008298:	f001 bebe 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db19")){
 800829c:	492d      	ldr	r1, [pc, #180]	; (8008354 <filtcoef+0x56c>)
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f7f7 ffce 	bl	8000240 <strcmp>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d116      	bne.n	80082d8 <filtcoef+0x4f0>
        copy_reverse(db19, N, lp1);
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082ae:	482a      	ldr	r0, [pc, #168]	; (8008358 <filtcoef+0x570>)
 80082b0:	f7ff fcee 	bl	8007c90 <copy_reverse>
        qmf_wrev(db19, N, hp1);
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082b8:	4827      	ldr	r0, [pc, #156]	; (8008358 <filtcoef+0x570>)
 80082ba:	f7ff fd14 	bl	8007ce6 <qmf_wrev>
        copy(db19, N, lp2);
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082c2:	4825      	ldr	r0, [pc, #148]	; (8008358 <filtcoef+0x570>)
 80082c4:	f7ff fd6b 	bl	8007d9e <copy>
        qmf_even(db19, N, hp2);
 80082c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082cc:	4822      	ldr	r0, [pc, #136]	; (8008358 <filtcoef+0x570>)
 80082ce:	f7ff fd28 	bl	8007d22 <qmf_even>

        return N;
 80082d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082d4:	f001 bea0 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db20")){
 80082d8:	4920      	ldr	r1, [pc, #128]	; (800835c <filtcoef+0x574>)
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7f7 ffb0 	bl	8000240 <strcmp>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d13e      	bne.n	8008364 <filtcoef+0x57c>
        copy_reverse(db20, N, lp1);
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082ea:	481d      	ldr	r0, [pc, #116]	; (8008360 <filtcoef+0x578>)
 80082ec:	f7ff fcd0 	bl	8007c90 <copy_reverse>
        qmf_wrev(db20, N, hp1);
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082f4:	481a      	ldr	r0, [pc, #104]	; (8008360 <filtcoef+0x578>)
 80082f6:	f7ff fcf6 	bl	8007ce6 <qmf_wrev>
        copy(db20, N, lp2);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082fe:	4818      	ldr	r0, [pc, #96]	; (8008360 <filtcoef+0x578>)
 8008300:	f7ff fd4d 	bl	8007d9e <copy>
        qmf_even(db20, N, hp2);
 8008304:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008306:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008308:	4815      	ldr	r0, [pc, #84]	; (8008360 <filtcoef+0x578>)
 800830a:	f7ff fd0a 	bl	8007d22 <qmf_even>

        return N;
 800830e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008310:	f001 be82 	b.w	800a018 <filtcoef+0x2230>
 8008314:	08011238 	.word	0x08011238
 8008318:	08012578 	.word	0x08012578
 800831c:	08011240 	.word	0x08011240
 8008320:	08012628 	.word	0x08012628
 8008324:	08011248 	.word	0x08011248
 8008328:	080126e8 	.word	0x080126e8
 800832c:	08011250 	.word	0x08011250
 8008330:	080127b8 	.word	0x080127b8
 8008334:	08011258 	.word	0x08011258
 8008338:	08012898 	.word	0x08012898
 800833c:	08011260 	.word	0x08011260
 8008340:	08012988 	.word	0x08012988
 8008344:	08011268 	.word	0x08011268
 8008348:	08012a88 	.word	0x08012a88
 800834c:	08011270 	.word	0x08011270
 8008350:	08012b98 	.word	0x08012b98
 8008354:	08011278 	.word	0x08011278
 8008358:	08012cb8 	.word	0x08012cb8
 800835c:	08011280 	.word	0x08011280
 8008360:	08012de8 	.word	0x08012de8
    }
    else if (!strcmp(name, "db21")){
 8008364:	4995      	ldr	r1, [pc, #596]	; (80085bc <filtcoef+0x7d4>)
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7f7 ff6a 	bl	8000240 <strcmp>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d116      	bne.n	80083a0 <filtcoef+0x5b8>
        copy_reverse(db21, N, lp1);
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008376:	4892      	ldr	r0, [pc, #584]	; (80085c0 <filtcoef+0x7d8>)
 8008378:	f7ff fc8a 	bl	8007c90 <copy_reverse>
        qmf_wrev(db21, N, hp1);
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008380:	488f      	ldr	r0, [pc, #572]	; (80085c0 <filtcoef+0x7d8>)
 8008382:	f7ff fcb0 	bl	8007ce6 <qmf_wrev>
        copy(db21, N, lp2);
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800838a:	488d      	ldr	r0, [pc, #564]	; (80085c0 <filtcoef+0x7d8>)
 800838c:	f7ff fd07 	bl	8007d9e <copy>
        qmf_even(db21, N, hp2);
 8008390:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008392:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008394:	488a      	ldr	r0, [pc, #552]	; (80085c0 <filtcoef+0x7d8>)
 8008396:	f7ff fcc4 	bl	8007d22 <qmf_even>

        return N;
 800839a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800839c:	f001 be3c 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db22")){
 80083a0:	4988      	ldr	r1, [pc, #544]	; (80085c4 <filtcoef+0x7dc>)
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f7f7 ff4c 	bl	8000240 <strcmp>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d116      	bne.n	80083dc <filtcoef+0x5f4>
        copy_reverse(db22, N, lp1);
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083b2:	4885      	ldr	r0, [pc, #532]	; (80085c8 <filtcoef+0x7e0>)
 80083b4:	f7ff fc6c 	bl	8007c90 <copy_reverse>
        qmf_wrev(db22, N, hp1);
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083bc:	4882      	ldr	r0, [pc, #520]	; (80085c8 <filtcoef+0x7e0>)
 80083be:	f7ff fc92 	bl	8007ce6 <qmf_wrev>
        copy(db22, N, lp2);
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083c6:	4880      	ldr	r0, [pc, #512]	; (80085c8 <filtcoef+0x7e0>)
 80083c8:	f7ff fce9 	bl	8007d9e <copy>
        qmf_even(db22, N, hp2);
 80083cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083d0:	487d      	ldr	r0, [pc, #500]	; (80085c8 <filtcoef+0x7e0>)
 80083d2:	f7ff fca6 	bl	8007d22 <qmf_even>

        return N;
 80083d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083d8:	f001 be1e 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db23")){
 80083dc:	497b      	ldr	r1, [pc, #492]	; (80085cc <filtcoef+0x7e4>)
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7f7 ff2e 	bl	8000240 <strcmp>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d116      	bne.n	8008418 <filtcoef+0x630>
        copy_reverse(db23, N, lp1);
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083ee:	4878      	ldr	r0, [pc, #480]	; (80085d0 <filtcoef+0x7e8>)
 80083f0:	f7ff fc4e 	bl	8007c90 <copy_reverse>
        qmf_wrev(db23, N, hp1);
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083f8:	4875      	ldr	r0, [pc, #468]	; (80085d0 <filtcoef+0x7e8>)
 80083fa:	f7ff fc74 	bl	8007ce6 <qmf_wrev>
        copy(db23, N, lp2);
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008402:	4873      	ldr	r0, [pc, #460]	; (80085d0 <filtcoef+0x7e8>)
 8008404:	f7ff fccb 	bl	8007d9e <copy>
        qmf_even(db23, N, hp2);
 8008408:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800840a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800840c:	4870      	ldr	r0, [pc, #448]	; (80085d0 <filtcoef+0x7e8>)
 800840e:	f7ff fc88 	bl	8007d22 <qmf_even>

        return N;
 8008412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008414:	f001 be00 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db24")){
 8008418:	496e      	ldr	r1, [pc, #440]	; (80085d4 <filtcoef+0x7ec>)
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f7f7 ff10 	bl	8000240 <strcmp>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d116      	bne.n	8008454 <filtcoef+0x66c>
        copy_reverse(db24, N, lp1);
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800842a:	486b      	ldr	r0, [pc, #428]	; (80085d8 <filtcoef+0x7f0>)
 800842c:	f7ff fc30 	bl	8007c90 <copy_reverse>
        qmf_wrev(db24, N, hp1);
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008434:	4868      	ldr	r0, [pc, #416]	; (80085d8 <filtcoef+0x7f0>)
 8008436:	f7ff fc56 	bl	8007ce6 <qmf_wrev>
        copy(db24, N, lp2);
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800843e:	4866      	ldr	r0, [pc, #408]	; (80085d8 <filtcoef+0x7f0>)
 8008440:	f7ff fcad 	bl	8007d9e <copy>
        qmf_even(db24, N, hp2);
 8008444:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008446:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008448:	4863      	ldr	r0, [pc, #396]	; (80085d8 <filtcoef+0x7f0>)
 800844a:	f7ff fc6a 	bl	8007d22 <qmf_even>

        return N;
 800844e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008450:	f001 bde2 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db25")){
 8008454:	4961      	ldr	r1, [pc, #388]	; (80085dc <filtcoef+0x7f4>)
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7f7 fef2 	bl	8000240 <strcmp>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d116      	bne.n	8008490 <filtcoef+0x6a8>
        copy_reverse(db25, N, lp1);
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008466:	485e      	ldr	r0, [pc, #376]	; (80085e0 <filtcoef+0x7f8>)
 8008468:	f7ff fc12 	bl	8007c90 <copy_reverse>
        qmf_wrev(db25, N, hp1);
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008470:	485b      	ldr	r0, [pc, #364]	; (80085e0 <filtcoef+0x7f8>)
 8008472:	f7ff fc38 	bl	8007ce6 <qmf_wrev>
        copy(db25, N, lp2);
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800847a:	4859      	ldr	r0, [pc, #356]	; (80085e0 <filtcoef+0x7f8>)
 800847c:	f7ff fc8f 	bl	8007d9e <copy>
        qmf_even(db25, N, hp2);
 8008480:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008482:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008484:	4856      	ldr	r0, [pc, #344]	; (80085e0 <filtcoef+0x7f8>)
 8008486:	f7ff fc4c 	bl	8007d22 <qmf_even>

        return N;
 800848a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800848c:	f001 bdc4 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db26")){
 8008490:	4954      	ldr	r1, [pc, #336]	; (80085e4 <filtcoef+0x7fc>)
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f7f7 fed4 	bl	8000240 <strcmp>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d116      	bne.n	80084cc <filtcoef+0x6e4>
        copy_reverse(db26, N, lp1);
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084a2:	4851      	ldr	r0, [pc, #324]	; (80085e8 <filtcoef+0x800>)
 80084a4:	f7ff fbf4 	bl	8007c90 <copy_reverse>
        qmf_wrev(db26, N, hp1);
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084ac:	484e      	ldr	r0, [pc, #312]	; (80085e8 <filtcoef+0x800>)
 80084ae:	f7ff fc1a 	bl	8007ce6 <qmf_wrev>
        copy(db26, N, lp2);
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084b6:	484c      	ldr	r0, [pc, #304]	; (80085e8 <filtcoef+0x800>)
 80084b8:	f7ff fc71 	bl	8007d9e <copy>
        qmf_even(db26, N, hp2);
 80084bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084c0:	4849      	ldr	r0, [pc, #292]	; (80085e8 <filtcoef+0x800>)
 80084c2:	f7ff fc2e 	bl	8007d22 <qmf_even>
        return N;
 80084c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084c8:	f001 bda6 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db27")){
 80084cc:	4947      	ldr	r1, [pc, #284]	; (80085ec <filtcoef+0x804>)
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f7f7 feb6 	bl	8000240 <strcmp>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d116      	bne.n	8008508 <filtcoef+0x720>
        copy_reverse(db27, N, lp1);
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084de:	4844      	ldr	r0, [pc, #272]	; (80085f0 <filtcoef+0x808>)
 80084e0:	f7ff fbd6 	bl	8007c90 <copy_reverse>
        qmf_wrev(db27, N, hp1);
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084e8:	4841      	ldr	r0, [pc, #260]	; (80085f0 <filtcoef+0x808>)
 80084ea:	f7ff fbfc 	bl	8007ce6 <qmf_wrev>
        copy(db27, N, lp2);
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084f2:	483f      	ldr	r0, [pc, #252]	; (80085f0 <filtcoef+0x808>)
 80084f4:	f7ff fc53 	bl	8007d9e <copy>
        qmf_even(db27, N, hp2);
 80084f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084fc:	483c      	ldr	r0, [pc, #240]	; (80085f0 <filtcoef+0x808>)
 80084fe:	f7ff fc10 	bl	8007d22 <qmf_even>

        return N;
 8008502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008504:	f001 bd88 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db28")){
 8008508:	493a      	ldr	r1, [pc, #232]	; (80085f4 <filtcoef+0x80c>)
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f7f7 fe98 	bl	8000240 <strcmp>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d116      	bne.n	8008544 <filtcoef+0x75c>
        copy_reverse(db28, N, lp1);
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800851a:	4837      	ldr	r0, [pc, #220]	; (80085f8 <filtcoef+0x810>)
 800851c:	f7ff fbb8 	bl	8007c90 <copy_reverse>
        qmf_wrev(db28, N, hp1);
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008524:	4834      	ldr	r0, [pc, #208]	; (80085f8 <filtcoef+0x810>)
 8008526:	f7ff fbde 	bl	8007ce6 <qmf_wrev>
        copy(db28, N, lp2);
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800852e:	4832      	ldr	r0, [pc, #200]	; (80085f8 <filtcoef+0x810>)
 8008530:	f7ff fc35 	bl	8007d9e <copy>
        qmf_even(db28, N, hp2);
 8008534:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008536:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008538:	482f      	ldr	r0, [pc, #188]	; (80085f8 <filtcoef+0x810>)
 800853a:	f7ff fbf2 	bl	8007d22 <qmf_even>

        return N;
 800853e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008540:	f001 bd6a 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db29")){
 8008544:	492d      	ldr	r1, [pc, #180]	; (80085fc <filtcoef+0x814>)
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f7f7 fe7a 	bl	8000240 <strcmp>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d116      	bne.n	8008580 <filtcoef+0x798>
        copy_reverse(db29, N, lp1);
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008556:	482a      	ldr	r0, [pc, #168]	; (8008600 <filtcoef+0x818>)
 8008558:	f7ff fb9a 	bl	8007c90 <copy_reverse>
        qmf_wrev(db29, N, hp1);
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008560:	4827      	ldr	r0, [pc, #156]	; (8008600 <filtcoef+0x818>)
 8008562:	f7ff fbc0 	bl	8007ce6 <qmf_wrev>
        copy(db29, N, lp2);
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800856a:	4825      	ldr	r0, [pc, #148]	; (8008600 <filtcoef+0x818>)
 800856c:	f7ff fc17 	bl	8007d9e <copy>
        qmf_even(db29, N, hp2);
 8008570:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008572:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008574:	4822      	ldr	r0, [pc, #136]	; (8008600 <filtcoef+0x818>)
 8008576:	f7ff fbd4 	bl	8007d22 <qmf_even>

        return N;
 800857a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800857c:	f001 bd4c 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db30")){
 8008580:	4920      	ldr	r1, [pc, #128]	; (8008604 <filtcoef+0x81c>)
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f7f7 fe5c 	bl	8000240 <strcmp>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d13e      	bne.n	800860c <filtcoef+0x824>
        copy_reverse(db30, N, lp1);
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008592:	481d      	ldr	r0, [pc, #116]	; (8008608 <filtcoef+0x820>)
 8008594:	f7ff fb7c 	bl	8007c90 <copy_reverse>
        qmf_wrev(db30, N, hp1);
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800859c:	481a      	ldr	r0, [pc, #104]	; (8008608 <filtcoef+0x820>)
 800859e:	f7ff fba2 	bl	8007ce6 <qmf_wrev>
        copy(db30, N, lp2);
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085a6:	4818      	ldr	r0, [pc, #96]	; (8008608 <filtcoef+0x820>)
 80085a8:	f7ff fbf9 	bl	8007d9e <copy>
        qmf_even(db30, N, hp2);
 80085ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085b0:	4815      	ldr	r0, [pc, #84]	; (8008608 <filtcoef+0x820>)
 80085b2:	f7ff fbb6 	bl	8007d22 <qmf_even>

        return N;
 80085b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085b8:	f001 bd2e 	b.w	800a018 <filtcoef+0x2230>
 80085bc:	08011288 	.word	0x08011288
 80085c0:	08012f28 	.word	0x08012f28
 80085c4:	08011290 	.word	0x08011290
 80085c8:	08013078 	.word	0x08013078
 80085cc:	08011298 	.word	0x08011298
 80085d0:	080131d8 	.word	0x080131d8
 80085d4:	080112a0 	.word	0x080112a0
 80085d8:	08013348 	.word	0x08013348
 80085dc:	080112a8 	.word	0x080112a8
 80085e0:	080134c8 	.word	0x080134c8
 80085e4:	080112b0 	.word	0x080112b0
 80085e8:	08013658 	.word	0x08013658
 80085ec:	080112b8 	.word	0x080112b8
 80085f0:	080137f8 	.word	0x080137f8
 80085f4:	080112c0 	.word	0x080112c0
 80085f8:	080139a8 	.word	0x080139a8
 80085fc:	080112c8 	.word	0x080112c8
 8008600:	08013b68 	.word	0x08013b68
 8008604:	080112d0 	.word	0x080112d0
 8008608:	08013d38 	.word	0x08013d38
    }
    else if (!strcmp(name, "db31")){
 800860c:	4997      	ldr	r1, [pc, #604]	; (800886c <filtcoef+0xa84>)
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f7f7 fe16 	bl	8000240 <strcmp>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d116      	bne.n	8008648 <filtcoef+0x860>
        copy_reverse(db31, N, lp1);
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800861e:	4894      	ldr	r0, [pc, #592]	; (8008870 <filtcoef+0xa88>)
 8008620:	f7ff fb36 	bl	8007c90 <copy_reverse>
        qmf_wrev(db31, N, hp1);
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008628:	4891      	ldr	r0, [pc, #580]	; (8008870 <filtcoef+0xa88>)
 800862a:	f7ff fb5c 	bl	8007ce6 <qmf_wrev>
        copy(db31, N, lp2);
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008632:	488f      	ldr	r0, [pc, #572]	; (8008870 <filtcoef+0xa88>)
 8008634:	f7ff fbb3 	bl	8007d9e <copy>
        qmf_even(db31, N, hp2);
 8008638:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800863a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800863c:	488c      	ldr	r0, [pc, #560]	; (8008870 <filtcoef+0xa88>)
 800863e:	f7ff fb70 	bl	8007d22 <qmf_even>

        return N;
 8008642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008644:	f001 bce8 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db32")){
 8008648:	498a      	ldr	r1, [pc, #552]	; (8008874 <filtcoef+0xa8c>)
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f7f7 fdf8 	bl	8000240 <strcmp>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d116      	bne.n	8008684 <filtcoef+0x89c>
        copy_reverse(db32, N, lp1);
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800865a:	4887      	ldr	r0, [pc, #540]	; (8008878 <filtcoef+0xa90>)
 800865c:	f7ff fb18 	bl	8007c90 <copy_reverse>
        qmf_wrev(db32, N, hp1);
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008664:	4884      	ldr	r0, [pc, #528]	; (8008878 <filtcoef+0xa90>)
 8008666:	f7ff fb3e 	bl	8007ce6 <qmf_wrev>
        copy(db32, N, lp2);
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800866e:	4882      	ldr	r0, [pc, #520]	; (8008878 <filtcoef+0xa90>)
 8008670:	f7ff fb95 	bl	8007d9e <copy>
        qmf_even(db32, N, hp2);
 8008674:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008676:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008678:	487f      	ldr	r0, [pc, #508]	; (8008878 <filtcoef+0xa90>)
 800867a:	f7ff fb52 	bl	8007d22 <qmf_even>

        return N;
 800867e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008680:	f001 bcca 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db33")){
 8008684:	497d      	ldr	r1, [pc, #500]	; (800887c <filtcoef+0xa94>)
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f7f7 fdda 	bl	8000240 <strcmp>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d116      	bne.n	80086c0 <filtcoef+0x8d8>
        copy_reverse(db33, N, lp1);
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008696:	487a      	ldr	r0, [pc, #488]	; (8008880 <filtcoef+0xa98>)
 8008698:	f7ff fafa 	bl	8007c90 <copy_reverse>
        qmf_wrev(db33, N, hp1);
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086a0:	4877      	ldr	r0, [pc, #476]	; (8008880 <filtcoef+0xa98>)
 80086a2:	f7ff fb20 	bl	8007ce6 <qmf_wrev>
        copy(db33, N, lp2);
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086aa:	4875      	ldr	r0, [pc, #468]	; (8008880 <filtcoef+0xa98>)
 80086ac:	f7ff fb77 	bl	8007d9e <copy>
        qmf_even(db33, N, hp2);
 80086b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086b4:	4872      	ldr	r0, [pc, #456]	; (8008880 <filtcoef+0xa98>)
 80086b6:	f7ff fb34 	bl	8007d22 <qmf_even>

        return N;
 80086ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086bc:	f001 bcac 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db34")){
 80086c0:	4970      	ldr	r1, [pc, #448]	; (8008884 <filtcoef+0xa9c>)
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f7f7 fdbc 	bl	8000240 <strcmp>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d116      	bne.n	80086fc <filtcoef+0x914>
        copy_reverse(db34, N, lp1);
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086d2:	486d      	ldr	r0, [pc, #436]	; (8008888 <filtcoef+0xaa0>)
 80086d4:	f7ff fadc 	bl	8007c90 <copy_reverse>
        qmf_wrev(db34, N, hp1);
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086dc:	486a      	ldr	r0, [pc, #424]	; (8008888 <filtcoef+0xaa0>)
 80086de:	f7ff fb02 	bl	8007ce6 <qmf_wrev>
        copy(db34, N, lp2);
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086e6:	4868      	ldr	r0, [pc, #416]	; (8008888 <filtcoef+0xaa0>)
 80086e8:	f7ff fb59 	bl	8007d9e <copy>
        qmf_even(db34, N, hp2);
 80086ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086f0:	4865      	ldr	r0, [pc, #404]	; (8008888 <filtcoef+0xaa0>)
 80086f2:	f7ff fb16 	bl	8007d22 <qmf_even>

        return N;
 80086f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086f8:	f001 bc8e 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db35")){
 80086fc:	4963      	ldr	r1, [pc, #396]	; (800888c <filtcoef+0xaa4>)
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f7f7 fd9e 	bl	8000240 <strcmp>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d116      	bne.n	8008738 <filtcoef+0x950>
        copy_reverse(db35, N, lp1);
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800870e:	4860      	ldr	r0, [pc, #384]	; (8008890 <filtcoef+0xaa8>)
 8008710:	f7ff fabe 	bl	8007c90 <copy_reverse>
        qmf_wrev(db35, N, hp1);
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008718:	485d      	ldr	r0, [pc, #372]	; (8008890 <filtcoef+0xaa8>)
 800871a:	f7ff fae4 	bl	8007ce6 <qmf_wrev>
        copy(db35, N, lp2);
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008722:	485b      	ldr	r0, [pc, #364]	; (8008890 <filtcoef+0xaa8>)
 8008724:	f7ff fb3b 	bl	8007d9e <copy>
        qmf_even(db35, N, hp2);
 8008728:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800872a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800872c:	4858      	ldr	r0, [pc, #352]	; (8008890 <filtcoef+0xaa8>)
 800872e:	f7ff faf8 	bl	8007d22 <qmf_even>

        return N;
 8008732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008734:	f001 bc70 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db36")){
 8008738:	4956      	ldr	r1, [pc, #344]	; (8008894 <filtcoef+0xaac>)
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f7f7 fd80 	bl	8000240 <strcmp>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d116      	bne.n	8008774 <filtcoef+0x98c>
        copy_reverse(db36, N, lp1);
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800874a:	4853      	ldr	r0, [pc, #332]	; (8008898 <filtcoef+0xab0>)
 800874c:	f7ff faa0 	bl	8007c90 <copy_reverse>
        qmf_wrev(db36, N, hp1);
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008754:	4850      	ldr	r0, [pc, #320]	; (8008898 <filtcoef+0xab0>)
 8008756:	f7ff fac6 	bl	8007ce6 <qmf_wrev>
        copy(db36, N, lp2);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800875e:	484e      	ldr	r0, [pc, #312]	; (8008898 <filtcoef+0xab0>)
 8008760:	f7ff fb1d 	bl	8007d9e <copy>
        qmf_even(db36, N, hp2);
 8008764:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008766:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008768:	484b      	ldr	r0, [pc, #300]	; (8008898 <filtcoef+0xab0>)
 800876a:	f7ff fada 	bl	8007d22 <qmf_even>

        return N;
 800876e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008770:	f001 bc52 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db37")){
 8008774:	4949      	ldr	r1, [pc, #292]	; (800889c <filtcoef+0xab4>)
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f7f7 fd62 	bl	8000240 <strcmp>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d116      	bne.n	80087b0 <filtcoef+0x9c8>
        copy_reverse(db37, N, lp1);
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008786:	4846      	ldr	r0, [pc, #280]	; (80088a0 <filtcoef+0xab8>)
 8008788:	f7ff fa82 	bl	8007c90 <copy_reverse>
        qmf_wrev(db37, N, hp1);
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008790:	4843      	ldr	r0, [pc, #268]	; (80088a0 <filtcoef+0xab8>)
 8008792:	f7ff faa8 	bl	8007ce6 <qmf_wrev>
        copy(db37, N, lp2);
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800879a:	4841      	ldr	r0, [pc, #260]	; (80088a0 <filtcoef+0xab8>)
 800879c:	f7ff faff 	bl	8007d9e <copy>
        qmf_even(db37, N, hp2);
 80087a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087a4:	483e      	ldr	r0, [pc, #248]	; (80088a0 <filtcoef+0xab8>)
 80087a6:	f7ff fabc 	bl	8007d22 <qmf_even>

        return N;
 80087aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087ac:	f001 bc34 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "db38")){
 80087b0:	493c      	ldr	r1, [pc, #240]	; (80088a4 <filtcoef+0xabc>)
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f7f7 fd44 	bl	8000240 <strcmp>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d116      	bne.n	80087ec <filtcoef+0xa04>
        copy_reverse(db38, N, lp1);
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087c2:	4839      	ldr	r0, [pc, #228]	; (80088a8 <filtcoef+0xac0>)
 80087c4:	f7ff fa64 	bl	8007c90 <copy_reverse>
        qmf_wrev(db38, N, hp1);
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087cc:	4836      	ldr	r0, [pc, #216]	; (80088a8 <filtcoef+0xac0>)
 80087ce:	f7ff fa8a 	bl	8007ce6 <qmf_wrev>
        copy(db38, N, lp2);
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087d6:	4834      	ldr	r0, [pc, #208]	; (80088a8 <filtcoef+0xac0>)
 80087d8:	f7ff fae1 	bl	8007d9e <copy>
        qmf_even(db38, N, hp2);
 80087dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087e0:	4831      	ldr	r0, [pc, #196]	; (80088a8 <filtcoef+0xac0>)
 80087e2:	f7ff fa9e 	bl	8007d22 <qmf_even>

        return N;
 80087e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087e8:	f001 bc16 	b.w	800a018 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior1.1")){
 80087ec:	492f      	ldr	r1, [pc, #188]	; (80088ac <filtcoef+0xac4>)
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f7f7 fd26 	bl	8000240 <strcmp>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d118      	bne.n	800882c <filtcoef+0xa44>
        copy_reverse(hm1_11, N, lp1);
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087fe:	482c      	ldr	r0, [pc, #176]	; (80088b0 <filtcoef+0xac8>)
 8008800:	f7ff fa46 	bl	8007c90 <copy_reverse>
        qmf_wrev(h1 + 4, N, hp1);
 8008804:	4b2b      	ldr	r3, [pc, #172]	; (80088b4 <filtcoef+0xacc>)
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800880a:	4618      	mov	r0, r3
 800880c:	f7ff fa6b 	bl	8007ce6 <qmf_wrev>
        copy(h1 + 4, N, lp2);
 8008810:	4b28      	ldr	r3, [pc, #160]	; (80088b4 <filtcoef+0xacc>)
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff fac1 	bl	8007d9e <copy>
        qmf_even(hm1_11, N, hp2);
 800881c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800881e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008820:	4823      	ldr	r0, [pc, #140]	; (80088b0 <filtcoef+0xac8>)
 8008822:	f7ff fa7e 	bl	8007d22 <qmf_even>
        return N;
 8008826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008828:	f001 bbf6 	b.w	800a018 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"bior1.3")){
 800882c:	4922      	ldr	r1, [pc, #136]	; (80088b8 <filtcoef+0xad0>)
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f7f7 fd06 	bl	8000240 <strcmp>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d144      	bne.n	80088c4 <filtcoef+0xadc>
        copy_reverse(hm1_13, N, lp1);
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800883e:	481f      	ldr	r0, [pc, #124]	; (80088bc <filtcoef+0xad4>)
 8008840:	f7ff fa26 	bl	8007c90 <copy_reverse>
        qmf_wrev(h1 + 2, N, hp1);
 8008844:	4b1e      	ldr	r3, [pc, #120]	; (80088c0 <filtcoef+0xad8>)
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff fa4b 	bl	8007ce6 <qmf_wrev>
        copy(h1 + 2, N, lp2);
 8008850:	4b1b      	ldr	r3, [pc, #108]	; (80088c0 <filtcoef+0xad8>)
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008856:	4618      	mov	r0, r3
 8008858:	f7ff faa1 	bl	8007d9e <copy>
        qmf_even(hm1_13, N, hp2);
 800885c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800885e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008860:	4816      	ldr	r0, [pc, #88]	; (80088bc <filtcoef+0xad4>)
 8008862:	f7ff fa5e 	bl	8007d22 <qmf_even>
        return N;
 8008866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008868:	f001 bbd6 	b.w	800a018 <filtcoef+0x2230>
 800886c:	080112d8 	.word	0x080112d8
 8008870:	08013f18 	.word	0x08013f18
 8008874:	080112e0 	.word	0x080112e0
 8008878:	08014108 	.word	0x08014108
 800887c:	080112e8 	.word	0x080112e8
 8008880:	08014308 	.word	0x08014308
 8008884:	080112f0 	.word	0x080112f0
 8008888:	08014518 	.word	0x08014518
 800888c:	080112f8 	.word	0x080112f8
 8008890:	08014738 	.word	0x08014738
 8008894:	08011300 	.word	0x08011300
 8008898:	08014968 	.word	0x08014968
 800889c:	08011308 	.word	0x08011308
 80088a0:	08014ba8 	.word	0x08014ba8
 80088a4:	08011310 	.word	0x08011310
 80088a8:	08014df8 	.word	0x08014df8
 80088ac:	080110d0 	.word	0x080110d0
 80088b0:	08017a68 	.word	0x08017a68
 80088b4:	08017a38 	.word	0x08017a38
 80088b8:	080110d8 	.word	0x080110d8
 80088bc:	08017a78 	.word	0x08017a78
 80088c0:	08017a28 	.word	0x08017a28
	}

	else if (!strcmp(name,"bior1.5")){
 80088c4:	499c      	ldr	r1, [pc, #624]	; (8008b38 <filtcoef+0xd50>)
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7f7 fcba 	bl	8000240 <strcmp>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d116      	bne.n	8008900 <filtcoef+0xb18>
        copy_reverse(hm1_15, N, lp1);
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088d6:	4899      	ldr	r0, [pc, #612]	; (8008b3c <filtcoef+0xd54>)
 80088d8:	f7ff f9da 	bl	8007c90 <copy_reverse>
        qmf_wrev(h1, N, hp1);
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088e0:	4897      	ldr	r0, [pc, #604]	; (8008b40 <filtcoef+0xd58>)
 80088e2:	f7ff fa00 	bl	8007ce6 <qmf_wrev>
        copy(h1, N, lp2);
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088ea:	4895      	ldr	r0, [pc, #596]	; (8008b40 <filtcoef+0xd58>)
 80088ec:	f7ff fa57 	bl	8007d9e <copy>
        qmf_even(hm1_15, N, hp2);
 80088f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088f4:	4891      	ldr	r0, [pc, #580]	; (8008b3c <filtcoef+0xd54>)
 80088f6:	f7ff fa14 	bl	8007d22 <qmf_even>
        return N;
 80088fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088fc:	f001 bb8c 	b.w	800a018 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"bior2.2")){
 8008900:	4990      	ldr	r1, [pc, #576]	; (8008b44 <filtcoef+0xd5c>)
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7f7 fc9c 	bl	8000240 <strcmp>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d118      	bne.n	8008940 <filtcoef+0xb58>
        copy_reverse(hm2_22, N, lp1);
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008912:	488d      	ldr	r0, [pc, #564]	; (8008b48 <filtcoef+0xd60>)
 8008914:	f7ff f9bc 	bl	8007c90 <copy_reverse>
        qmf_wrev(h2 + 6, N, hp1);
 8008918:	4b8c      	ldr	r3, [pc, #560]	; (8008b4c <filtcoef+0xd64>)
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800891e:	4618      	mov	r0, r3
 8008920:	f7ff f9e1 	bl	8007ce6 <qmf_wrev>
        copy(h2 + 6, N, lp2);
 8008924:	4b89      	ldr	r3, [pc, #548]	; (8008b4c <filtcoef+0xd64>)
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff fa37 	bl	8007d9e <copy>
        qmf_even(hm2_22, N, hp2);
 8008930:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008932:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008934:	4884      	ldr	r0, [pc, #528]	; (8008b48 <filtcoef+0xd60>)
 8008936:	f7ff f9f4 	bl	8007d22 <qmf_even>
        return N;
 800893a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800893c:	f001 bb6c 	b.w	800a018 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "bior2.4")){
 8008940:	4983      	ldr	r1, [pc, #524]	; (8008b50 <filtcoef+0xd68>)
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f7f7 fc7c 	bl	8000240 <strcmp>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d118      	bne.n	8008980 <filtcoef+0xb98>
        copy_reverse(hm2_24, N, lp1);
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008952:	4880      	ldr	r0, [pc, #512]	; (8008b54 <filtcoef+0xd6c>)
 8008954:	f7ff f99c 	bl	8007c90 <copy_reverse>
        qmf_wrev(h2 + 4, N, hp1);
 8008958:	4b7f      	ldr	r3, [pc, #508]	; (8008b58 <filtcoef+0xd70>)
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff f9c1 	bl	8007ce6 <qmf_wrev>
        copy(h2 + 4, N, lp2);
 8008964:	4b7c      	ldr	r3, [pc, #496]	; (8008b58 <filtcoef+0xd70>)
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff fa17 	bl	8007d9e <copy>
        qmf_even(hm2_24, N, hp2);
 8008970:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008972:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008974:	4877      	ldr	r0, [pc, #476]	; (8008b54 <filtcoef+0xd6c>)
 8008976:	f7ff f9d4 	bl	8007d22 <qmf_even>
        return N;
 800897a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800897c:	f001 bb4c 	b.w	800a018 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior2.6")){
 8008980:	4976      	ldr	r1, [pc, #472]	; (8008b5c <filtcoef+0xd74>)
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f7f7 fc5c 	bl	8000240 <strcmp>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d118      	bne.n	80089c0 <filtcoef+0xbd8>
        copy_reverse(hm2_26, N, lp1);
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008992:	4873      	ldr	r0, [pc, #460]	; (8008b60 <filtcoef+0xd78>)
 8008994:	f7ff f97c 	bl	8007c90 <copy_reverse>
        qmf_wrev(h2 + 2, N, hp1);
 8008998:	4b72      	ldr	r3, [pc, #456]	; (8008b64 <filtcoef+0xd7c>)
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff f9a1 	bl	8007ce6 <qmf_wrev>
        copy(h2 + 2, N, lp2);
 80089a4:	4b6f      	ldr	r3, [pc, #444]	; (8008b64 <filtcoef+0xd7c>)
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7ff f9f7 	bl	8007d9e <copy>
        qmf_even(hm2_26, N, hp2);
 80089b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80089b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089b4:	486a      	ldr	r0, [pc, #424]	; (8008b60 <filtcoef+0xd78>)
 80089b6:	f7ff f9b4 	bl	8007d22 <qmf_even>
        return N;
 80089ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089bc:	f001 bb2c 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"bior2.8")){
 80089c0:	4969      	ldr	r1, [pc, #420]	; (8008b68 <filtcoef+0xd80>)
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f7f7 fc3c 	bl	8000240 <strcmp>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d116      	bne.n	80089fc <filtcoef+0xc14>
        copy_reverse(hm2_28, N, lp1);
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089d2:	4866      	ldr	r0, [pc, #408]	; (8008b6c <filtcoef+0xd84>)
 80089d4:	f7ff f95c 	bl	8007c90 <copy_reverse>
        qmf_wrev(h2, N, hp1);
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089dc:	4864      	ldr	r0, [pc, #400]	; (8008b70 <filtcoef+0xd88>)
 80089de:	f7ff f982 	bl	8007ce6 <qmf_wrev>
        copy(h2, N, lp2);
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089e6:	4862      	ldr	r0, [pc, #392]	; (8008b70 <filtcoef+0xd88>)
 80089e8:	f7ff f9d9 	bl	8007d9e <copy>
        qmf_even(hm2_28, N, hp2);
 80089ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80089ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089f0:	485e      	ldr	r0, [pc, #376]	; (8008b6c <filtcoef+0xd84>)
 80089f2:	f7ff f996 	bl	8007d22 <qmf_even>
        return N;
 80089f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089f8:	f001 bb0e 	b.w	800a018 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"bior3.1")){
 80089fc:	495d      	ldr	r1, [pc, #372]	; (8008b74 <filtcoef+0xd8c>)
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f7f7 fc1e 	bl	8000240 <strcmp>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d118      	bne.n	8008a3c <filtcoef+0xc54>
        copy_reverse(hm3_31, N, lp1);
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a0e:	485a      	ldr	r0, [pc, #360]	; (8008b78 <filtcoef+0xd90>)
 8008a10:	f7ff f93e 	bl	8007c90 <copy_reverse>
        qmf_wrev(h3 + 8, N, hp1);
 8008a14:	4b59      	ldr	r3, [pc, #356]	; (8008b7c <filtcoef+0xd94>)
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7ff f963 	bl	8007ce6 <qmf_wrev>
        copy(h3 + 8, N, lp2);
 8008a20:	4b56      	ldr	r3, [pc, #344]	; (8008b7c <filtcoef+0xd94>)
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff f9b9 	bl	8007d9e <copy>
        qmf_even(hm3_31, N, hp2);
 8008a2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a30:	4851      	ldr	r0, [pc, #324]	; (8008b78 <filtcoef+0xd90>)
 8008a32:	f7ff f976 	bl	8007d22 <qmf_even>
        return N;
 8008a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a38:	f001 baee 	b.w	800a018 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "bior3.3")){
 8008a3c:	4950      	ldr	r1, [pc, #320]	; (8008b80 <filtcoef+0xd98>)
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f7f7 fbfe 	bl	8000240 <strcmp>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d118      	bne.n	8008a7c <filtcoef+0xc94>
        copy_reverse(hm3_33, N, lp1);
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a4e:	484d      	ldr	r0, [pc, #308]	; (8008b84 <filtcoef+0xd9c>)
 8008a50:	f7ff f91e 	bl	8007c90 <copy_reverse>
        qmf_wrev(h3 + 6, N, hp1);
 8008a54:	4b4c      	ldr	r3, [pc, #304]	; (8008b88 <filtcoef+0xda0>)
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7ff f943 	bl	8007ce6 <qmf_wrev>
        copy(h3 + 6, N, lp2);
 8008a60:	4b49      	ldr	r3, [pc, #292]	; (8008b88 <filtcoef+0xda0>)
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff f999 	bl	8007d9e <copy>
        qmf_even(hm3_33, N, hp2);
 8008a6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a70:	4844      	ldr	r0, [pc, #272]	; (8008b84 <filtcoef+0xd9c>)
 8008a72:	f7ff f956 	bl	8007d22 <qmf_even>
        return N;
 8008a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a78:	f001 bace 	b.w	800a018 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior3.5")){
 8008a7c:	4943      	ldr	r1, [pc, #268]	; (8008b8c <filtcoef+0xda4>)
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f7f7 fbde 	bl	8000240 <strcmp>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d118      	bne.n	8008abc <filtcoef+0xcd4>
        copy_reverse(hm3_35, N, lp1);
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a8e:	4840      	ldr	r0, [pc, #256]	; (8008b90 <filtcoef+0xda8>)
 8008a90:	f7ff f8fe 	bl	8007c90 <copy_reverse>
        qmf_wrev(h3 + 4, N, hp1);
 8008a94:	4b3f      	ldr	r3, [pc, #252]	; (8008b94 <filtcoef+0xdac>)
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff f923 	bl	8007ce6 <qmf_wrev>
        copy(h3 + 4, N, lp2);
 8008aa0:	4b3c      	ldr	r3, [pc, #240]	; (8008b94 <filtcoef+0xdac>)
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff f979 	bl	8007d9e <copy>
        qmf_even(hm3_35, N, hp2);
 8008aac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008aae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ab0:	4837      	ldr	r0, [pc, #220]	; (8008b90 <filtcoef+0xda8>)
 8008ab2:	f7ff f936 	bl	8007d22 <qmf_even>
        return N;
 8008ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ab8:	f001 baae 	b.w	800a018 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "bior3.7")){
 8008abc:	4936      	ldr	r1, [pc, #216]	; (8008b98 <filtcoef+0xdb0>)
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f7f7 fbbe 	bl	8000240 <strcmp>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d118      	bne.n	8008afc <filtcoef+0xd14>
        copy_reverse(hm3_37, N, lp1);
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ace:	4833      	ldr	r0, [pc, #204]	; (8008b9c <filtcoef+0xdb4>)
 8008ad0:	f7ff f8de 	bl	8007c90 <copy_reverse>
        qmf_wrev(h3 + 2, N, hp1);
 8008ad4:	4b32      	ldr	r3, [pc, #200]	; (8008ba0 <filtcoef+0xdb8>)
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7ff f903 	bl	8007ce6 <qmf_wrev>
        copy(h3 +2, N, lp2);
 8008ae0:	4b2f      	ldr	r3, [pc, #188]	; (8008ba0 <filtcoef+0xdb8>)
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff f959 	bl	8007d9e <copy>
        qmf_even(hm3_37, N, hp2);
 8008aec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008aee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008af0:	482a      	ldr	r0, [pc, #168]	; (8008b9c <filtcoef+0xdb4>)
 8008af2:	f7ff f916 	bl	8007d22 <qmf_even>
        return N;
 8008af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008af8:	f001 ba8e 	b.w	800a018 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior3.9")){
 8008afc:	4929      	ldr	r1, [pc, #164]	; (8008ba4 <filtcoef+0xdbc>)
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f7f7 fb9e 	bl	8000240 <strcmp>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d152      	bne.n	8008bb0 <filtcoef+0xdc8>
        copy_reverse(hm3_39, N, lp1);
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b0e:	4826      	ldr	r0, [pc, #152]	; (8008ba8 <filtcoef+0xdc0>)
 8008b10:	f7ff f8be 	bl	8007c90 <copy_reverse>
        qmf_wrev(h3, N, hp1);
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b18:	4824      	ldr	r0, [pc, #144]	; (8008bac <filtcoef+0xdc4>)
 8008b1a:	f7ff f8e4 	bl	8007ce6 <qmf_wrev>
        copy(h3, N, lp2);
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b22:	4822      	ldr	r0, [pc, #136]	; (8008bac <filtcoef+0xdc4>)
 8008b24:	f7ff f93b 	bl	8007d9e <copy>
        qmf_even(hm3_39, N, hp2);
 8008b28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b2c:	481e      	ldr	r0, [pc, #120]	; (8008ba8 <filtcoef+0xdc0>)
 8008b2e:	f7ff f8f8 	bl	8007d22 <qmf_even>
        return N;
 8008b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b34:	f001 ba70 	b.w	800a018 <filtcoef+0x2230>
 8008b38:	080110e0 	.word	0x080110e0
 8008b3c:	08017aa8 	.word	0x08017aa8
 8008b40:	08017a18 	.word	0x08017a18
 8008b44:	080110e8 	.word	0x080110e8
 8008b48:	08017b88 	.word	0x08017b88
 8008b4c:	08017b28 	.word	0x08017b28
 8008b50:	080110f0 	.word	0x080110f0
 8008b54:	08017bb8 	.word	0x08017bb8
 8008b58:	08017b18 	.word	0x08017b18
 8008b5c:	080110f8 	.word	0x080110f8
 8008b60:	08017c08 	.word	0x08017c08
 8008b64:	08017b08 	.word	0x08017b08
 8008b68:	08011100 	.word	0x08011100
 8008b6c:	08017c78 	.word	0x08017c78
 8008b70:	08017af8 	.word	0x08017af8
 8008b74:	08011108 	.word	0x08011108
 8008b78:	08017da8 	.word	0x08017da8
 8008b7c:	08017d48 	.word	0x08017d48
 8008b80:	08011110 	.word	0x08011110
 8008b84:	08017dc8 	.word	0x08017dc8
 8008b88:	08017d38 	.word	0x08017d38
 8008b8c:	08011118 	.word	0x08011118
 8008b90:	08017e08 	.word	0x08017e08
 8008b94:	08017d28 	.word	0x08017d28
 8008b98:	08011120 	.word	0x08011120
 8008b9c:	08017e68 	.word	0x08017e68
 8008ba0:	08017d18 	.word	0x08017d18
 8008ba4:	08011128 	.word	0x08011128
 8008ba8:	08017ee8 	.word	0x08017ee8
 8008bac:	08017d08 	.word	0x08017d08
	}
	else if (!strcmp(name,"bior4.4")){
 8008bb0:	499a      	ldr	r1, [pc, #616]	; (8008e1c <filtcoef+0x1034>)
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f7f7 fb44 	bl	8000240 <strcmp>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d116      	bne.n	8008bec <filtcoef+0xe04>
        copy_reverse(hm4_44, N, lp1);
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bc2:	4897      	ldr	r0, [pc, #604]	; (8008e20 <filtcoef+0x1038>)
 8008bc4:	f7ff f864 	bl	8007c90 <copy_reverse>
        qmf_wrev(h4, N, hp1);
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bcc:	4895      	ldr	r0, [pc, #596]	; (8008e24 <filtcoef+0x103c>)
 8008bce:	f7ff f88a 	bl	8007ce6 <qmf_wrev>
        copy(h4, N, lp2);
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bd6:	4893      	ldr	r0, [pc, #588]	; (8008e24 <filtcoef+0x103c>)
 8008bd8:	f7ff f8e1 	bl	8007d9e <copy>
        qmf_even(hm4_44, N, hp2);
 8008bdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008be0:	488f      	ldr	r0, [pc, #572]	; (8008e20 <filtcoef+0x1038>)
 8008be2:	f7ff f89e 	bl	8007d22 <qmf_even>
        return N;
 8008be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008be8:	f001 ba16 	b.w	800a018 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "bior5.5")){
 8008bec:	498e      	ldr	r1, [pc, #568]	; (8008e28 <filtcoef+0x1040>)
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f7f7 fb26 	bl	8000240 <strcmp>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d116      	bne.n	8008c28 <filtcoef+0xe40>
        copy_reverse(hm5_55, N, lp1);
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bfe:	488b      	ldr	r0, [pc, #556]	; (8008e2c <filtcoef+0x1044>)
 8008c00:	f7ff f846 	bl	8007c90 <copy_reverse>
        qmf_wrev(h5, N, hp1);
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c08:	4889      	ldr	r0, [pc, #548]	; (8008e30 <filtcoef+0x1048>)
 8008c0a:	f7ff f86c 	bl	8007ce6 <qmf_wrev>
        copy(h5, N, lp2);
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c12:	4887      	ldr	r0, [pc, #540]	; (8008e30 <filtcoef+0x1048>)
 8008c14:	f7ff f8c3 	bl	8007d9e <copy>
        qmf_even(hm5_55, N, hp2);
 8008c18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c1c:	4883      	ldr	r0, [pc, #524]	; (8008e2c <filtcoef+0x1044>)
 8008c1e:	f7ff f880 	bl	8007d22 <qmf_even>
        return N;
 8008c22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c24:	f001 b9f8 	b.w	800a018 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"bior6.8")){
 8008c28:	4982      	ldr	r1, [pc, #520]	; (8008e34 <filtcoef+0x104c>)
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f7f7 fb08 	bl	8000240 <strcmp>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d116      	bne.n	8008c64 <filtcoef+0xe7c>
        copy_reverse(hm6_68, N, lp1);
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c3a:	487f      	ldr	r0, [pc, #508]	; (8008e38 <filtcoef+0x1050>)
 8008c3c:	f7ff f828 	bl	8007c90 <copy_reverse>
        qmf_wrev(h6, N, hp1);
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c44:	487d      	ldr	r0, [pc, #500]	; (8008e3c <filtcoef+0x1054>)
 8008c46:	f7ff f84e 	bl	8007ce6 <qmf_wrev>
        copy(h6, N, lp2);
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c4e:	487b      	ldr	r0, [pc, #492]	; (8008e3c <filtcoef+0x1054>)
 8008c50:	f7ff f8a5 	bl	8007d9e <copy>
        qmf_even(hm6_68, N, hp2);
 8008c54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c58:	4877      	ldr	r0, [pc, #476]	; (8008e38 <filtcoef+0x1050>)
 8008c5a:	f7ff f862 	bl	8007d22 <qmf_even>
        return N;
 8008c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c60:	f001 b9da 	b.w	800a018 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "rbior1.1")){
 8008c64:	4976      	ldr	r1, [pc, #472]	; (8008e40 <filtcoef+0x1058>)
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f7f7 faea 	bl	8000240 <strcmp>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d118      	bne.n	8008ca4 <filtcoef+0xebc>
        copy_reverse(h1 + 4, N, lp1);
 8008c72:	4b74      	ldr	r3, [pc, #464]	; (8008e44 <filtcoef+0x105c>)
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff f809 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm1_11, N, hp1);
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c82:	4871      	ldr	r0, [pc, #452]	; (8008e48 <filtcoef+0x1060>)
 8008c84:	f7ff f82f 	bl	8007ce6 <qmf_wrev>
        copy(hm1_11, N, lp2);
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c8c:	486e      	ldr	r0, [pc, #440]	; (8008e48 <filtcoef+0x1060>)
 8008c8e:	f7ff f886 	bl	8007d9e <copy>
        qmf_even(h1 + 4, N, hp2);
 8008c92:	4b6c      	ldr	r3, [pc, #432]	; (8008e44 <filtcoef+0x105c>)
 8008c94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff f842 	bl	8007d22 <qmf_even>
        return N;
 8008c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ca0:	f001 b9ba 	b.w	800a018 <filtcoef+0x2230>
    }

    else if (!strcmp(name, "rbior1.3")){
 8008ca4:	4969      	ldr	r1, [pc, #420]	; (8008e4c <filtcoef+0x1064>)
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7f7 faca 	bl	8000240 <strcmp>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d118      	bne.n	8008ce4 <filtcoef+0xefc>
        copy_reverse(h1 + 2, N, lp1);
 8008cb2:	4b67      	ldr	r3, [pc, #412]	; (8008e50 <filtcoef+0x1068>)
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fe ffe9 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm1_13, N, hp1);
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008cc2:	4864      	ldr	r0, [pc, #400]	; (8008e54 <filtcoef+0x106c>)
 8008cc4:	f7ff f80f 	bl	8007ce6 <qmf_wrev>
        copy(hm1_13, N, lp2);
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ccc:	4861      	ldr	r0, [pc, #388]	; (8008e54 <filtcoef+0x106c>)
 8008cce:	f7ff f866 	bl	8007d9e <copy>
        qmf_even(h1 + 2, N, hp2);
 8008cd2:	4b5f      	ldr	r3, [pc, #380]	; (8008e50 <filtcoef+0x1068>)
 8008cd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008cd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff f822 	bl	8007d22 <qmf_even>
        return N;
 8008cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ce0:	f001 b99a 	b.w	800a018 <filtcoef+0x2230>
    }

    else if (!strcmp(name, "rbior1.5")){
 8008ce4:	495c      	ldr	r1, [pc, #368]	; (8008e58 <filtcoef+0x1070>)
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f7f7 faaa 	bl	8000240 <strcmp>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d116      	bne.n	8008d20 <filtcoef+0xf38>
        copy_reverse(h1, N, lp1);
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008cf6:	4859      	ldr	r0, [pc, #356]	; (8008e5c <filtcoef+0x1074>)
 8008cf8:	f7fe ffca 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm1_15, N, hp1);
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d00:	4857      	ldr	r0, [pc, #348]	; (8008e60 <filtcoef+0x1078>)
 8008d02:	f7fe fff0 	bl	8007ce6 <qmf_wrev>
        copy(hm1_15, N, lp2);
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d0a:	4855      	ldr	r0, [pc, #340]	; (8008e60 <filtcoef+0x1078>)
 8008d0c:	f7ff f847 	bl	8007d9e <copy>
        qmf_even(h1, N, hp2);
 8008d10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d14:	4851      	ldr	r0, [pc, #324]	; (8008e5c <filtcoef+0x1074>)
 8008d16:	f7ff f804 	bl	8007d22 <qmf_even>
        return N;
 8008d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d1c:	f001 b97c 	b.w	800a018 <filtcoef+0x2230>
    }

    else if (!strcmp(name, "rbior2.2")){
 8008d20:	4950      	ldr	r1, [pc, #320]	; (8008e64 <filtcoef+0x107c>)
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f7f7 fa8c 	bl	8000240 <strcmp>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d118      	bne.n	8008d60 <filtcoef+0xf78>
        copy_reverse(h2 + 6, N, lp1);
 8008d2e:	4b4e      	ldr	r3, [pc, #312]	; (8008e68 <filtcoef+0x1080>)
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fe ffab 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm2_22, N, hp1);
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d3e:	484b      	ldr	r0, [pc, #300]	; (8008e6c <filtcoef+0x1084>)
 8008d40:	f7fe ffd1 	bl	8007ce6 <qmf_wrev>
        copy(hm2_22, N, lp2);
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d48:	4848      	ldr	r0, [pc, #288]	; (8008e6c <filtcoef+0x1084>)
 8008d4a:	f7ff f828 	bl	8007d9e <copy>
        qmf_even(h2 + 6, N, hp2);
 8008d4e:	4b46      	ldr	r3, [pc, #280]	; (8008e68 <filtcoef+0x1080>)
 8008d50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe ffe4 	bl	8007d22 <qmf_even>
        return N;
 8008d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d5c:	f001 b95c 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior2.4")){
 8008d60:	4943      	ldr	r1, [pc, #268]	; (8008e70 <filtcoef+0x1088>)
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f7f7 fa6c 	bl	8000240 <strcmp>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d118      	bne.n	8008da0 <filtcoef+0xfb8>
        copy_reverse(h2 + 4, N, lp1);
 8008d6e:	4b41      	ldr	r3, [pc, #260]	; (8008e74 <filtcoef+0x108c>)
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fe ff8b 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm2_24, N, hp1);
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d7e:	483e      	ldr	r0, [pc, #248]	; (8008e78 <filtcoef+0x1090>)
 8008d80:	f7fe ffb1 	bl	8007ce6 <qmf_wrev>
        copy(hm2_24, N, lp2);
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d88:	483b      	ldr	r0, [pc, #236]	; (8008e78 <filtcoef+0x1090>)
 8008d8a:	f7ff f808 	bl	8007d9e <copy>
        qmf_even(h2 + 4, N, hp2);
 8008d8e:	4b39      	ldr	r3, [pc, #228]	; (8008e74 <filtcoef+0x108c>)
 8008d90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fe ffc4 	bl	8007d22 <qmf_even>
        return N;
 8008d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d9c:	f001 b93c 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior2.6")){
 8008da0:	4936      	ldr	r1, [pc, #216]	; (8008e7c <filtcoef+0x1094>)
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f7f7 fa4c 	bl	8000240 <strcmp>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d118      	bne.n	8008de0 <filtcoef+0xff8>
        copy_reverse(h2 + 2, N, lp1);
 8008dae:	4b34      	ldr	r3, [pc, #208]	; (8008e80 <filtcoef+0x1098>)
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe ff6b 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm2_26, N, hp1);
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dbe:	4831      	ldr	r0, [pc, #196]	; (8008e84 <filtcoef+0x109c>)
 8008dc0:	f7fe ff91 	bl	8007ce6 <qmf_wrev>
        copy(hm2_26, N, lp2);
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dc8:	482e      	ldr	r0, [pc, #184]	; (8008e84 <filtcoef+0x109c>)
 8008dca:	f7fe ffe8 	bl	8007d9e <copy>
        qmf_even(h2 + 2, N, hp2);
 8008dce:	4b2c      	ldr	r3, [pc, #176]	; (8008e80 <filtcoef+0x1098>)
 8008dd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008dd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fe ffa4 	bl	8007d22 <qmf_even>
        return N;
 8008dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ddc:	f001 b91c 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior2.8")){
 8008de0:	4929      	ldr	r1, [pc, #164]	; (8008e88 <filtcoef+0x10a0>)
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f7f7 fa2c 	bl	8000240 <strcmp>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d152      	bne.n	8008e94 <filtcoef+0x10ac>
        copy_reverse(h2, N, lp1);
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008df2:	4826      	ldr	r0, [pc, #152]	; (8008e8c <filtcoef+0x10a4>)
 8008df4:	f7fe ff4c 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm2_28, N, hp1);
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dfc:	4824      	ldr	r0, [pc, #144]	; (8008e90 <filtcoef+0x10a8>)
 8008dfe:	f7fe ff72 	bl	8007ce6 <qmf_wrev>
        copy(hm2_28, N, lp2);
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e06:	4822      	ldr	r0, [pc, #136]	; (8008e90 <filtcoef+0x10a8>)
 8008e08:	f7fe ffc9 	bl	8007d9e <copy>
        qmf_even(h2, N, hp2);
 8008e0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e10:	481e      	ldr	r0, [pc, #120]	; (8008e8c <filtcoef+0x10a4>)
 8008e12:	f7fe ff86 	bl	8007d22 <qmf_even>
        return N;
 8008e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e18:	f001 b8fe 	b.w	800a018 <filtcoef+0x2230>
 8008e1c:	08011130 	.word	0x08011130
 8008e20:	08017fd8 	.word	0x08017fd8
 8008e24:	08017f88 	.word	0x08017f88
 8008e28:	08011138 	.word	0x08011138
 8008e2c:	08018088 	.word	0x08018088
 8008e30:	08018028 	.word	0x08018028
 8008e34:	08011140 	.word	0x08011140
 8008e38:	08018178 	.word	0x08018178
 8008e3c:	080180e8 	.word	0x080180e8
 8008e40:	08011148 	.word	0x08011148
 8008e44:	08017a38 	.word	0x08017a38
 8008e48:	08017a68 	.word	0x08017a68
 8008e4c:	08011154 	.word	0x08011154
 8008e50:	08017a28 	.word	0x08017a28
 8008e54:	08017a78 	.word	0x08017a78
 8008e58:	08011160 	.word	0x08011160
 8008e5c:	08017a18 	.word	0x08017a18
 8008e60:	08017aa8 	.word	0x08017aa8
 8008e64:	0801116c 	.word	0x0801116c
 8008e68:	08017b28 	.word	0x08017b28
 8008e6c:	08017b88 	.word	0x08017b88
 8008e70:	08011178 	.word	0x08011178
 8008e74:	08017b18 	.word	0x08017b18
 8008e78:	08017bb8 	.word	0x08017bb8
 8008e7c:	08011184 	.word	0x08011184
 8008e80:	08017b08 	.word	0x08017b08
 8008e84:	08017c08 	.word	0x08017c08
 8008e88:	08011190 	.word	0x08011190
 8008e8c:	08017af8 	.word	0x08017af8
 8008e90:	08017c78 	.word	0x08017c78
    }

    else if (!strcmp(name, "rbior3.1")){
 8008e94:	49a2      	ldr	r1, [pc, #648]	; (8009120 <filtcoef+0x1338>)
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f7f7 f9d2 	bl	8000240 <strcmp>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d118      	bne.n	8008ed4 <filtcoef+0x10ec>
        copy_reverse(h3 + 8, N, lp1);
 8008ea2:	4ba0      	ldr	r3, [pc, #640]	; (8009124 <filtcoef+0x133c>)
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fe fef1 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm3_31, N, hp1);
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008eb2:	489d      	ldr	r0, [pc, #628]	; (8009128 <filtcoef+0x1340>)
 8008eb4:	f7fe ff17 	bl	8007ce6 <qmf_wrev>
        copy(hm3_31, N, lp2);
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ebc:	489a      	ldr	r0, [pc, #616]	; (8009128 <filtcoef+0x1340>)
 8008ebe:	f7fe ff6e 	bl	8007d9e <copy>
        qmf_even(h3 + 8, N, hp2);
 8008ec2:	4b98      	ldr	r3, [pc, #608]	; (8009124 <filtcoef+0x133c>)
 8008ec4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ec6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fe ff2a 	bl	8007d22 <qmf_even>
        return N;
 8008ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ed0:	f001 b8a2 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior3.3")){
 8008ed4:	4995      	ldr	r1, [pc, #596]	; (800912c <filtcoef+0x1344>)
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f7f7 f9b2 	bl	8000240 <strcmp>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d118      	bne.n	8008f14 <filtcoef+0x112c>
        copy_reverse(h3 + 6, N, lp1);
 8008ee2:	4b93      	ldr	r3, [pc, #588]	; (8009130 <filtcoef+0x1348>)
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fe fed1 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm3_33, N, hp1);
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ef2:	4890      	ldr	r0, [pc, #576]	; (8009134 <filtcoef+0x134c>)
 8008ef4:	f7fe fef7 	bl	8007ce6 <qmf_wrev>
        copy(hm3_33, N, lp2);
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008efc:	488d      	ldr	r0, [pc, #564]	; (8009134 <filtcoef+0x134c>)
 8008efe:	f7fe ff4e 	bl	8007d9e <copy>
        qmf_even(h3 + 6, N, hp2);
 8008f02:	4b8b      	ldr	r3, [pc, #556]	; (8009130 <filtcoef+0x1348>)
 8008f04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fe ff0a 	bl	8007d22 <qmf_even>
        return N;
 8008f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f10:	f001 b882 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior3.5")){
 8008f14:	4988      	ldr	r1, [pc, #544]	; (8009138 <filtcoef+0x1350>)
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7f7 f992 	bl	8000240 <strcmp>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d118      	bne.n	8008f54 <filtcoef+0x116c>
        copy_reverse(h3 + 4, N, lp1);
 8008f22:	4b86      	ldr	r3, [pc, #536]	; (800913c <filtcoef+0x1354>)
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fe feb1 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm3_35, N, hp1);
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f32:	4883      	ldr	r0, [pc, #524]	; (8009140 <filtcoef+0x1358>)
 8008f34:	f7fe fed7 	bl	8007ce6 <qmf_wrev>
        copy(hm3_35, N, lp2);
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f3c:	4880      	ldr	r0, [pc, #512]	; (8009140 <filtcoef+0x1358>)
 8008f3e:	f7fe ff2e 	bl	8007d9e <copy>
        qmf_even(h3 + 4, N, hp2);
 8008f42:	4b7e      	ldr	r3, [pc, #504]	; (800913c <filtcoef+0x1354>)
 8008f44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe feea 	bl	8007d22 <qmf_even>
        return N;
 8008f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f50:	f001 b862 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior3.7")){
 8008f54:	497b      	ldr	r1, [pc, #492]	; (8009144 <filtcoef+0x135c>)
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f7f7 f972 	bl	8000240 <strcmp>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d118      	bne.n	8008f94 <filtcoef+0x11ac>
        copy_reverse(h3 + 2, N, lp1);
 8008f62:	4b79      	ldr	r3, [pc, #484]	; (8009148 <filtcoef+0x1360>)
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fe91 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm3_37, N, hp1);
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f72:	4876      	ldr	r0, [pc, #472]	; (800914c <filtcoef+0x1364>)
 8008f74:	f7fe feb7 	bl	8007ce6 <qmf_wrev>
        copy(hm3_37, N, lp2);
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f7c:	4873      	ldr	r0, [pc, #460]	; (800914c <filtcoef+0x1364>)
 8008f7e:	f7fe ff0e 	bl	8007d9e <copy>
        qmf_even(h3 + 2, N, hp2);
 8008f82:	4b71      	ldr	r3, [pc, #452]	; (8009148 <filtcoef+0x1360>)
 8008f84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fe feca 	bl	8007d22 <qmf_even>
        return N;
 8008f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f90:	f001 b842 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior3.9")){
 8008f94:	496e      	ldr	r1, [pc, #440]	; (8009150 <filtcoef+0x1368>)
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7f7 f952 	bl	8000240 <strcmp>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d116      	bne.n	8008fd0 <filtcoef+0x11e8>
        copy_reverse(h3, N, lp1);
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fa6:	486b      	ldr	r0, [pc, #428]	; (8009154 <filtcoef+0x136c>)
 8008fa8:	f7fe fe72 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm3_39, N, hp1);
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fb0:	4869      	ldr	r0, [pc, #420]	; (8009158 <filtcoef+0x1370>)
 8008fb2:	f7fe fe98 	bl	8007ce6 <qmf_wrev>
        copy(hm3_39, N, lp2);
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fba:	4867      	ldr	r0, [pc, #412]	; (8009158 <filtcoef+0x1370>)
 8008fbc:	f7fe feef 	bl	8007d9e <copy>
        qmf_even(h3, N, hp2);
 8008fc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fc4:	4863      	ldr	r0, [pc, #396]	; (8009154 <filtcoef+0x136c>)
 8008fc6:	f7fe feac 	bl	8007d22 <qmf_even>
        return N;
 8008fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fcc:	f001 b824 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior4.4")){
 8008fd0:	4962      	ldr	r1, [pc, #392]	; (800915c <filtcoef+0x1374>)
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f7f7 f934 	bl	8000240 <strcmp>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d116      	bne.n	800900c <filtcoef+0x1224>
        copy_reverse(h4, N, lp1);
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fe2:	485f      	ldr	r0, [pc, #380]	; (8009160 <filtcoef+0x1378>)
 8008fe4:	f7fe fe54 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm4_44, N, hp1);
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fec:	485d      	ldr	r0, [pc, #372]	; (8009164 <filtcoef+0x137c>)
 8008fee:	f7fe fe7a 	bl	8007ce6 <qmf_wrev>
        copy(hm4_44, N, lp2);
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ff6:	485b      	ldr	r0, [pc, #364]	; (8009164 <filtcoef+0x137c>)
 8008ff8:	f7fe fed1 	bl	8007d9e <copy>
        qmf_even(h4, N, hp2);
 8008ffc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ffe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009000:	4857      	ldr	r0, [pc, #348]	; (8009160 <filtcoef+0x1378>)
 8009002:	f7fe fe8e 	bl	8007d22 <qmf_even>
        return N;
 8009006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009008:	f001 b806 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior5.5")){
 800900c:	4956      	ldr	r1, [pc, #344]	; (8009168 <filtcoef+0x1380>)
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f7f7 f916 	bl	8000240 <strcmp>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d116      	bne.n	8009048 <filtcoef+0x1260>
        copy_reverse(h5, N, lp1);
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800901e:	4853      	ldr	r0, [pc, #332]	; (800916c <filtcoef+0x1384>)
 8009020:	f7fe fe36 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm5_55, N, hp1);
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009028:	4851      	ldr	r0, [pc, #324]	; (8009170 <filtcoef+0x1388>)
 800902a:	f7fe fe5c 	bl	8007ce6 <qmf_wrev>
        copy(hm5_55, N, lp2);
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009032:	484f      	ldr	r0, [pc, #316]	; (8009170 <filtcoef+0x1388>)
 8009034:	f7fe feb3 	bl	8007d9e <copy>
        qmf_even(h5, N, hp2);
 8009038:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800903a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800903c:	484b      	ldr	r0, [pc, #300]	; (800916c <filtcoef+0x1384>)
 800903e:	f7fe fe70 	bl	8007d22 <qmf_even>
        return N;
 8009042:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009044:	f000 bfe8 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "rbior6.8")){
 8009048:	494a      	ldr	r1, [pc, #296]	; (8009174 <filtcoef+0x138c>)
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f7f7 f8f8 	bl	8000240 <strcmp>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d116      	bne.n	8009084 <filtcoef+0x129c>
        copy_reverse(h6, N, lp1);
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800905a:	4847      	ldr	r0, [pc, #284]	; (8009178 <filtcoef+0x1390>)
 800905c:	f7fe fe18 	bl	8007c90 <copy_reverse>
        qmf_wrev(hm6_68, N, hp1);
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009064:	4845      	ldr	r0, [pc, #276]	; (800917c <filtcoef+0x1394>)
 8009066:	f7fe fe3e 	bl	8007ce6 <qmf_wrev>
        copy(hm6_68, N, lp2);
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800906e:	4843      	ldr	r0, [pc, #268]	; (800917c <filtcoef+0x1394>)
 8009070:	f7fe fe95 	bl	8007d9e <copy>
        qmf_even(h6, N, hp2);
 8009074:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009076:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009078:	483f      	ldr	r0, [pc, #252]	; (8009178 <filtcoef+0x1390>)
 800907a:	f7fe fe52 	bl	8007d22 <qmf_even>
        return N;
 800907e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009080:	f000 bfca 	b.w	800a018 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"coif1")){
 8009084:	493e      	ldr	r1, [pc, #248]	; (8009180 <filtcoef+0x1398>)
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f7f7 f8da 	bl	8000240 <strcmp>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d17a      	bne.n	8009188 <filtcoef+0x13a0>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8009092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009094:	00db      	lsls	r3, r3, #3
 8009096:	4618      	mov	r0, r3
 8009098:	f002 f8ca 	bl	800b230 <malloc>
 800909c:	4603      	mov	r3, r0
 800909e:	617b      	str	r3, [r7, #20]

        copy(coif1, N, coeffTemp);
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090a4:	4837      	ldr	r0, [pc, #220]	; (8009184 <filtcoef+0x139c>)
 80090a6:	f7fe fe7a 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 80090aa:	2300      	movs	r3, #0
 80090ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090ae:	e012      	b.n	80090d6 <filtcoef+0x12ee>
            coeffTemp[i] *= M_SQRT2;
 80090b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	4413      	add	r3, r2
 80090b8:	ed93 7b00 	vldr	d7, [r3]
 80090bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	4413      	add	r3, r2
 80090c4:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8009118 <filtcoef+0x1330>
 80090c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80090cc:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80090d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090d2:	3301      	adds	r3, #1
 80090d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090da:	429a      	cmp	r2, r3
 80090dc:	dbe8      	blt.n	80090b0 <filtcoef+0x12c8>
        }

        copy_reverse(coeffTemp, N, lp1);
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090e2:	6978      	ldr	r0, [r7, #20]
 80090e4:	f7fe fdd4 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090ec:	6978      	ldr	r0, [r7, #20]
 80090ee:	f7fe fdfa 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090f6:	6978      	ldr	r0, [r7, #20]
 80090f8:	f7fe fe51 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 80090fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009100:	6978      	ldr	r0, [r7, #20]
 8009102:	f7fe fe0e 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 8009106:	6978      	ldr	r0, [r7, #20]
 8009108:	f002 f89a 	bl	800b240 <free>

        return N;
 800910c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800910e:	f000 bf83 	b.w	800a018 <filtcoef+0x2230>
 8009112:	bf00      	nop
 8009114:	f3af 8000 	nop.w
 8009118:	667f3bcd 	.word	0x667f3bcd
 800911c:	3ff6a09e 	.word	0x3ff6a09e
 8009120:	0801119c 	.word	0x0801119c
 8009124:	08017d48 	.word	0x08017d48
 8009128:	08017da8 	.word	0x08017da8
 800912c:	080111a8 	.word	0x080111a8
 8009130:	08017d38 	.word	0x08017d38
 8009134:	08017dc8 	.word	0x08017dc8
 8009138:	080111b4 	.word	0x080111b4
 800913c:	08017d28 	.word	0x08017d28
 8009140:	08017e08 	.word	0x08017e08
 8009144:	080111c0 	.word	0x080111c0
 8009148:	08017d18 	.word	0x08017d18
 800914c:	08017e68 	.word	0x08017e68
 8009150:	080111cc 	.word	0x080111cc
 8009154:	08017d08 	.word	0x08017d08
 8009158:	08017ee8 	.word	0x08017ee8
 800915c:	080111d8 	.word	0x080111d8
 8009160:	08017f88 	.word	0x08017f88
 8009164:	08017fd8 	.word	0x08017fd8
 8009168:	080111e4 	.word	0x080111e4
 800916c:	08018028 	.word	0x08018028
 8009170:	08018088 	.word	0x08018088
 8009174:	080111f0 	.word	0x080111f0
 8009178:	080180e8 	.word	0x080180e8
 800917c:	08018178 	.word	0x08018178
 8009180:	08011318 	.word	0x08011318
 8009184:	08015058 	.word	0x08015058
	}
	else if (!strcmp(name,"coif2")){
 8009188:	499b      	ldr	r1, [pc, #620]	; (80093f8 <filtcoef+0x1610>)
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f7f7 f858 	bl	8000240 <strcmp>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d13f      	bne.n	8009216 <filtcoef+0x142e>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8009196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009198:	00db      	lsls	r3, r3, #3
 800919a:	4618      	mov	r0, r3
 800919c:	f002 f848 	bl	800b230 <malloc>
 80091a0:	4603      	mov	r3, r0
 80091a2:	61bb      	str	r3, [r7, #24]

        copy(coif2, N, coeffTemp);
 80091a4:	69ba      	ldr	r2, [r7, #24]
 80091a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091a8:	4894      	ldr	r0, [pc, #592]	; (80093fc <filtcoef+0x1614>)
 80091aa:	f7fe fdf8 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 80091ae:	2300      	movs	r3, #0
 80091b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091b2:	e012      	b.n	80091da <filtcoef+0x13f2>
            coeffTemp[i] *= M_SQRT2;
 80091b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091b6:	00db      	lsls	r3, r3, #3
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	4413      	add	r3, r2
 80091bc:	ed93 7b00 	vldr	d7, [r3]
 80091c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	69ba      	ldr	r2, [r7, #24]
 80091c6:	4413      	add	r3, r2
 80091c8:	ed9f 6b89 	vldr	d6, [pc, #548]	; 80093f0 <filtcoef+0x1608>
 80091cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091d0:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80091d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091d6:	3301      	adds	r3, #1
 80091d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091de:	429a      	cmp	r2, r3
 80091e0:	dbe8      	blt.n	80091b4 <filtcoef+0x13cc>
        }

        copy_reverse(coeffTemp, N, lp1);
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091e6:	69b8      	ldr	r0, [r7, #24]
 80091e8:	f7fe fd52 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091f0:	69b8      	ldr	r0, [r7, #24]
 80091f2:	f7fe fd78 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091fa:	69b8      	ldr	r0, [r7, #24]
 80091fc:	f7fe fdcf 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 8009200:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009204:	69b8      	ldr	r0, [r7, #24]
 8009206:	f7fe fd8c 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 800920a:	69b8      	ldr	r0, [r7, #24]
 800920c:	f002 f818 	bl	800b240 <free>

        return N;
 8009210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009212:	f000 bf01 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"coif3")){
 8009216:	497a      	ldr	r1, [pc, #488]	; (8009400 <filtcoef+0x1618>)
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f7f7 f811 	bl	8000240 <strcmp>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d13f      	bne.n	80092a4 <filtcoef+0x14bc>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8009224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009226:	00db      	lsls	r3, r3, #3
 8009228:	4618      	mov	r0, r3
 800922a:	f002 f801 	bl	800b230 <malloc>
 800922e:	4603      	mov	r3, r0
 8009230:	61fb      	str	r3, [r7, #28]

        copy(coif3, N, coeffTemp);
 8009232:	69fa      	ldr	r2, [r7, #28]
 8009234:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009236:	4873      	ldr	r0, [pc, #460]	; (8009404 <filtcoef+0x161c>)
 8009238:	f7fe fdb1 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 800923c:	2300      	movs	r3, #0
 800923e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009240:	e012      	b.n	8009268 <filtcoef+0x1480>
            coeffTemp[i] *= M_SQRT2;
 8009242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009244:	00db      	lsls	r3, r3, #3
 8009246:	69fa      	ldr	r2, [r7, #28]
 8009248:	4413      	add	r3, r2
 800924a:	ed93 7b00 	vldr	d7, [r3]
 800924e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009250:	00db      	lsls	r3, r3, #3
 8009252:	69fa      	ldr	r2, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80093f0 <filtcoef+0x1608>
 800925a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800925e:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8009262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009264:	3301      	adds	r3, #1
 8009266:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009268:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800926a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800926c:	429a      	cmp	r2, r3
 800926e:	dbe8      	blt.n	8009242 <filtcoef+0x145a>
        }

        copy_reverse(coeffTemp, N, lp1);
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009274:	69f8      	ldr	r0, [r7, #28]
 8009276:	f7fe fd0b 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800927e:	69f8      	ldr	r0, [r7, #28]
 8009280:	f7fe fd31 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009288:	69f8      	ldr	r0, [r7, #28]
 800928a:	f7fe fd88 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 800928e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009290:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009292:	69f8      	ldr	r0, [r7, #28]
 8009294:	f7fe fd45 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 8009298:	69f8      	ldr	r0, [r7, #28]
 800929a:	f001 ffd1 	bl	800b240 <free>

        return N;
 800929e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092a0:	f000 beba 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"coif4")){
 80092a4:	4958      	ldr	r1, [pc, #352]	; (8009408 <filtcoef+0x1620>)
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f7f6 ffca 	bl	8000240 <strcmp>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d13f      	bne.n	8009332 <filtcoef+0x154a>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 80092b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092b4:	00db      	lsls	r3, r3, #3
 80092b6:	4618      	mov	r0, r3
 80092b8:	f001 ffba 	bl	800b230 <malloc>
 80092bc:	4603      	mov	r3, r0
 80092be:	623b      	str	r3, [r7, #32]

        copy(coif4, N, coeffTemp);
 80092c0:	6a3a      	ldr	r2, [r7, #32]
 80092c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092c4:	4851      	ldr	r0, [pc, #324]	; (800940c <filtcoef+0x1624>)
 80092c6:	f7fe fd6a 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 80092ca:	2300      	movs	r3, #0
 80092cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092ce:	e012      	b.n	80092f6 <filtcoef+0x150e>
            coeffTemp[i] *= M_SQRT2;
 80092d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	6a3a      	ldr	r2, [r7, #32]
 80092d6:	4413      	add	r3, r2
 80092d8:	ed93 7b00 	vldr	d7, [r3]
 80092dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092de:	00db      	lsls	r3, r3, #3
 80092e0:	6a3a      	ldr	r2, [r7, #32]
 80092e2:	4413      	add	r3, r2
 80092e4:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80093f0 <filtcoef+0x1608>
 80092e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80092ec:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80092f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092f2:	3301      	adds	r3, #1
 80092f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092fa:	429a      	cmp	r2, r3
 80092fc:	dbe8      	blt.n	80092d0 <filtcoef+0x14e8>
        }

        copy_reverse(coeffTemp, N, lp1);
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009302:	6a38      	ldr	r0, [r7, #32]
 8009304:	f7fe fcc4 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800930c:	6a38      	ldr	r0, [r7, #32]
 800930e:	f7fe fcea 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009316:	6a38      	ldr	r0, [r7, #32]
 8009318:	f7fe fd41 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 800931c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800931e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009320:	6a38      	ldr	r0, [r7, #32]
 8009322:	f7fe fcfe 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 8009326:	6a38      	ldr	r0, [r7, #32]
 8009328:	f001 ff8a 	bl	800b240 <free>

        return N;
 800932c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800932e:	f000 be73 	b.w	800a018 <filtcoef+0x2230>
	}
	else if (!strcmp(name,"coif5")){
 8009332:	4937      	ldr	r1, [pc, #220]	; (8009410 <filtcoef+0x1628>)
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f7f6 ff83 	bl	8000240 <strcmp>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d13f      	bne.n	80093c0 <filtcoef+0x15d8>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8009340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	4618      	mov	r0, r3
 8009346:	f001 ff73 	bl	800b230 <malloc>
 800934a:	4603      	mov	r3, r0
 800934c:	627b      	str	r3, [r7, #36]	; 0x24

        copy(coif5, N, coeffTemp);
 800934e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009350:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009352:	4830      	ldr	r0, [pc, #192]	; (8009414 <filtcoef+0x162c>)
 8009354:	f7fe fd23 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 8009358:	2300      	movs	r3, #0
 800935a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800935c:	e012      	b.n	8009384 <filtcoef+0x159c>
            coeffTemp[i] *= M_SQRT2;
 800935e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009364:	4413      	add	r3, r2
 8009366:	ed93 7b00 	vldr	d7, [r3]
 800936a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009370:	4413      	add	r3, r2
 8009372:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80093f0 <filtcoef+0x1608>
 8009376:	ee27 7b06 	vmul.f64	d7, d7, d6
 800937a:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 800937e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009380:	3301      	adds	r3, #1
 8009382:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009388:	429a      	cmp	r2, r3
 800938a:	dbe8      	blt.n	800935e <filtcoef+0x1576>
        }

        copy_reverse(coeffTemp, N, lp1);
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009392:	f7fe fc7d 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800939a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800939c:	f7fe fca3 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093a6:	f7fe fcfa 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 80093aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093b0:	f7fe fcb7 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 80093b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093b6:	f001 ff43 	bl	800b240 <free>

        return N;
 80093ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093bc:	f000 be2c 	b.w	800a018 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "coif6")){
 80093c0:	4915      	ldr	r1, [pc, #84]	; (8009418 <filtcoef+0x1630>)
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f7f6 ff3c 	bl	8000240 <strcmp>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d159      	bne.n	8009482 <filtcoef+0x169a>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 80093ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093d0:	00db      	lsls	r3, r3, #3
 80093d2:	4618      	mov	r0, r3
 80093d4:	f001 ff2c 	bl	800b230 <malloc>
 80093d8:	4603      	mov	r3, r0
 80093da:	62bb      	str	r3, [r7, #40]	; 0x28

        copy(coif6, N, coeffTemp);
 80093dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093e0:	480e      	ldr	r0, [pc, #56]	; (800941c <filtcoef+0x1634>)
 80093e2:	f7fe fcdc 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 80093e6:	2300      	movs	r3, #0
 80093e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093ea:	e02c      	b.n	8009446 <filtcoef+0x165e>
 80093ec:	f3af 8000 	nop.w
 80093f0:	667f3bcd 	.word	0x667f3bcd
 80093f4:	3ff6a09e 	.word	0x3ff6a09e
 80093f8:	08011320 	.word	0x08011320
 80093fc:	08015088 	.word	0x08015088
 8009400:	08011328 	.word	0x08011328
 8009404:	080150e8 	.word	0x080150e8
 8009408:	08011330 	.word	0x08011330
 800940c:	08015178 	.word	0x08015178
 8009410:	08011338 	.word	0x08011338
 8009414:	08015238 	.word	0x08015238
 8009418:	08011340 	.word	0x08011340
 800941c:	08015328 	.word	0x08015328
            coeffTemp[i] *= M_SQRT2;
 8009420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009426:	4413      	add	r3, r2
 8009428:	ed93 7b00 	vldr	d7, [r3]
 800942c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009432:	4413      	add	r3, r2
 8009434:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 80096c0 <filtcoef+0x18d8>
 8009438:	ee27 7b06 	vmul.f64	d7, d7, d6
 800943c:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8009440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009442:	3301      	adds	r3, #1
 8009444:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009446:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800944a:	429a      	cmp	r2, r3
 800944c:	dbe8      	blt.n	8009420 <filtcoef+0x1638>
        }

        copy_reverse(coeffTemp, N, lp1);
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009454:	f7fe fc1c 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800945c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800945e:	f7fe fc42 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009468:	f7fe fc99 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 800946c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800946e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009472:	f7fe fc56 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 8009476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009478:	f001 fee2 	bl	800b240 <free>

        return N;
 800947c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800947e:	f000 bdcb 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif7")){
 8009482:	4991      	ldr	r1, [pc, #580]	; (80096c8 <filtcoef+0x18e0>)
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f7f6 fedb 	bl	8000240 <strcmp>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d13f      	bne.n	8009510 <filtcoef+0x1728>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8009490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009492:	00db      	lsls	r3, r3, #3
 8009494:	4618      	mov	r0, r3
 8009496:	f001 fecb 	bl	800b230 <malloc>
 800949a:	4603      	mov	r3, r0
 800949c:	62fb      	str	r3, [r7, #44]	; 0x2c

        copy(coif7, N, coeffTemp);
 800949e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094a2:	488a      	ldr	r0, [pc, #552]	; (80096cc <filtcoef+0x18e4>)
 80094a4:	f7fe fc7b 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 80094a8:	2300      	movs	r3, #0
 80094aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094ac:	e012      	b.n	80094d4 <filtcoef+0x16ec>
            coeffTemp[i] *= M_SQRT2;
 80094ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094b0:	00db      	lsls	r3, r3, #3
 80094b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094b4:	4413      	add	r3, r2
 80094b6:	ed93 7b00 	vldr	d7, [r3]
 80094ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094bc:	00db      	lsls	r3, r3, #3
 80094be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094c0:	4413      	add	r3, r2
 80094c2:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 80096c0 <filtcoef+0x18d8>
 80094c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80094ca:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80094ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094d0:	3301      	adds	r3, #1
 80094d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094d8:	429a      	cmp	r2, r3
 80094da:	dbe8      	blt.n	80094ae <filtcoef+0x16c6>
        }

        copy_reverse(coeffTemp, N, lp1);
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094e2:	f7fe fbd5 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094ec:	f7fe fbfb 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094f6:	f7fe fc52 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 80094fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009500:	f7fe fc0f 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 8009504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009506:	f001 fe9b 	bl	800b240 <free>

        return N;
 800950a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800950c:	f000 bd84 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif8")){
 8009510:	496f      	ldr	r1, [pc, #444]	; (80096d0 <filtcoef+0x18e8>)
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f7f6 fe94 	bl	8000240 <strcmp>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d13f      	bne.n	800959e <filtcoef+0x17b6>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 800951e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009520:	00db      	lsls	r3, r3, #3
 8009522:	4618      	mov	r0, r3
 8009524:	f001 fe84 	bl	800b230 <malloc>
 8009528:	4603      	mov	r3, r0
 800952a:	633b      	str	r3, [r7, #48]	; 0x30

        copy(coif8, N, coeffTemp);
 800952c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800952e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009530:	4868      	ldr	r0, [pc, #416]	; (80096d4 <filtcoef+0x18ec>)
 8009532:	f7fe fc34 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 8009536:	2300      	movs	r3, #0
 8009538:	65fb      	str	r3, [r7, #92]	; 0x5c
 800953a:	e012      	b.n	8009562 <filtcoef+0x177a>
            coeffTemp[i] *= M_SQRT2;
 800953c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009542:	4413      	add	r3, r2
 8009544:	ed93 7b00 	vldr	d7, [r3]
 8009548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800954e:	4413      	add	r3, r2
 8009550:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80096c0 <filtcoef+0x18d8>
 8009554:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009558:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 800955c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800955e:	3301      	adds	r3, #1
 8009560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009562:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009566:	429a      	cmp	r2, r3
 8009568:	dbe8      	blt.n	800953c <filtcoef+0x1754>
        }

        copy_reverse(coeffTemp, N, lp1);
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800956e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009570:	f7fe fb8e 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800957a:	f7fe fbb4 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009584:	f7fe fc0b 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 8009588:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800958a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800958c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800958e:	f7fe fbc8 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 8009592:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009594:	f001 fe54 	bl	800b240 <free>

        return N;
 8009598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800959a:	f000 bd3d 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif9")){
 800959e:	494e      	ldr	r1, [pc, #312]	; (80096d8 <filtcoef+0x18f0>)
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f7f6 fe4d 	bl	8000240 <strcmp>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d13f      	bne.n	800962c <filtcoef+0x1844>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 80095ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095ae:	00db      	lsls	r3, r3, #3
 80095b0:	4618      	mov	r0, r3
 80095b2:	f001 fe3d 	bl	800b230 <malloc>
 80095b6:	4603      	mov	r3, r0
 80095b8:	637b      	str	r3, [r7, #52]	; 0x34

        copy(coif9, N, coeffTemp);
 80095ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095be:	4847      	ldr	r0, [pc, #284]	; (80096dc <filtcoef+0x18f4>)
 80095c0:	f7fe fbed 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 80095c4:	2300      	movs	r3, #0
 80095c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095c8:	e012      	b.n	80095f0 <filtcoef+0x1808>
            coeffTemp[i] *= M_SQRT2;
 80095ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095cc:	00db      	lsls	r3, r3, #3
 80095ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095d0:	4413      	add	r3, r2
 80095d2:	ed93 7b00 	vldr	d7, [r3]
 80095d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095dc:	4413      	add	r3, r2
 80095de:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80096c0 <filtcoef+0x18d8>
 80095e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80095e6:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80095ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095ec:	3301      	adds	r3, #1
 80095ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095f4:	429a      	cmp	r2, r3
 80095f6:	dbe8      	blt.n	80095ca <filtcoef+0x17e2>
        }

        copy_reverse(coeffTemp, N, lp1);
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80095fe:	f7fe fb47 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009606:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009608:	f7fe fb6d 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009610:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009612:	f7fe fbc4 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 8009616:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009618:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800961a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800961c:	f7fe fb81 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 8009620:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009622:	f001 fe0d 	bl	800b240 <free>

        return N;
 8009626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009628:	f000 bcf6 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif10")){
 800962c:	492c      	ldr	r1, [pc, #176]	; (80096e0 <filtcoef+0x18f8>)
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f7f6 fe06 	bl	8000240 <strcmp>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d156      	bne.n	80096e8 <filtcoef+0x1900>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 800963a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800963c:	00db      	lsls	r3, r3, #3
 800963e:	4618      	mov	r0, r3
 8009640:	f001 fdf6 	bl	800b230 <malloc>
 8009644:	4603      	mov	r3, r0
 8009646:	63bb      	str	r3, [r7, #56]	; 0x38

        copy(coif10, N, coeffTemp);
 8009648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800964a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800964c:	4825      	ldr	r0, [pc, #148]	; (80096e4 <filtcoef+0x18fc>)
 800964e:	f7fe fba6 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 8009652:	2300      	movs	r3, #0
 8009654:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009656:	e012      	b.n	800967e <filtcoef+0x1896>
            coeffTemp[i] *= M_SQRT2;
 8009658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800965a:	00db      	lsls	r3, r3, #3
 800965c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800965e:	4413      	add	r3, r2
 8009660:	ed93 7b00 	vldr	d7, [r3]
 8009664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800966a:	4413      	add	r3, r2
 800966c:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80096c0 <filtcoef+0x18d8>
 8009670:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009674:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8009678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800967a:	3301      	adds	r3, #1
 800967c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800967e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009682:	429a      	cmp	r2, r3
 8009684:	dbe8      	blt.n	8009658 <filtcoef+0x1870>
        }

        copy_reverse(coeffTemp, N, lp1);
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800968a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800968c:	f7fe fb00 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009694:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009696:	f7fe fb26 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800969e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096a0:	f7fe fb7d 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 80096a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096aa:	f7fe fb3a 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 80096ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096b0:	f001 fdc6 	bl	800b240 <free>

        return N;
 80096b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096b6:	f000 bcaf 	b.w	800a018 <filtcoef+0x2230>
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	667f3bcd 	.word	0x667f3bcd
 80096c4:	3ff6a09e 	.word	0x3ff6a09e
 80096c8:	08011348 	.word	0x08011348
 80096cc:	08015448 	.word	0x08015448
 80096d0:	08011350 	.word	0x08011350
 80096d4:	08015598 	.word	0x08015598
 80096d8:	08011358 	.word	0x08011358
 80096dc:	08015718 	.word	0x08015718
 80096e0:	08011360 	.word	0x08011360
 80096e4:	080158c8 	.word	0x080158c8
    }
    else if (!strcmp(name, "coif11")){
 80096e8:	4999      	ldr	r1, [pc, #612]	; (8009950 <filtcoef+0x1b68>)
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f7f6 fda8 	bl	8000240 <strcmp>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d13f      	bne.n	8009776 <filtcoef+0x198e>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 80096f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	4618      	mov	r0, r3
 80096fc:	f001 fd98 	bl	800b230 <malloc>
 8009700:	4603      	mov	r3, r0
 8009702:	63fb      	str	r3, [r7, #60]	; 0x3c

        copy(coif11, N, coeffTemp);
 8009704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009706:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009708:	4892      	ldr	r0, [pc, #584]	; (8009954 <filtcoef+0x1b6c>)
 800970a:	f7fe fb48 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 800970e:	2300      	movs	r3, #0
 8009710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009712:	e012      	b.n	800973a <filtcoef+0x1952>
            coeffTemp[i] *= M_SQRT2;
 8009714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009716:	00db      	lsls	r3, r3, #3
 8009718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800971a:	4413      	add	r3, r2
 800971c:	ed93 7b00 	vldr	d7, [r3]
 8009720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009726:	4413      	add	r3, r2
 8009728:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8009948 <filtcoef+0x1b60>
 800972c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009730:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8009734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009736:	3301      	adds	r3, #1
 8009738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800973a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800973c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800973e:	429a      	cmp	r2, r3
 8009740:	dbe8      	blt.n	8009714 <filtcoef+0x192c>
        }

        copy_reverse(coeffTemp, N, lp1);
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009746:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009748:	f7fe faa2 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009750:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009752:	f7fe fac8 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800975a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800975c:	f7fe fb1f 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 8009760:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009762:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009764:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009766:	f7fe fadc 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 800976a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800976c:	f001 fd68 	bl	800b240 <free>

        return N;
 8009770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009772:	f000 bc51 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif12")){
 8009776:	4978      	ldr	r1, [pc, #480]	; (8009958 <filtcoef+0x1b70>)
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f7f6 fd61 	bl	8000240 <strcmp>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d13f      	bne.n	8009804 <filtcoef+0x1a1c>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8009784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009786:	00db      	lsls	r3, r3, #3
 8009788:	4618      	mov	r0, r3
 800978a:	f001 fd51 	bl	800b230 <malloc>
 800978e:	4603      	mov	r3, r0
 8009790:	643b      	str	r3, [r7, #64]	; 0x40

        copy(coif12, N, coeffTemp);
 8009792:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009794:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009796:	4871      	ldr	r0, [pc, #452]	; (800995c <filtcoef+0x1b74>)
 8009798:	f7fe fb01 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 800979c:	2300      	movs	r3, #0
 800979e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097a0:	e012      	b.n	80097c8 <filtcoef+0x19e0>
            coeffTemp[i] *= M_SQRT2;
 80097a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097a4:	00db      	lsls	r3, r3, #3
 80097a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097a8:	4413      	add	r3, r2
 80097aa:	ed93 7b00 	vldr	d7, [r3]
 80097ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097b0:	00db      	lsls	r3, r3, #3
 80097b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097b4:	4413      	add	r3, r2
 80097b6:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8009948 <filtcoef+0x1b60>
 80097ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097be:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80097c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097c4:	3301      	adds	r3, #1
 80097c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80097ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097cc:	429a      	cmp	r2, r3
 80097ce:	dbe8      	blt.n	80097a2 <filtcoef+0x19ba>
        }

        copy_reverse(coeffTemp, N, lp1);
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80097d6:	f7fe fa5b 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097de:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80097e0:	f7fe fa81 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80097ea:	f7fe fad8 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 80097ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097f2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80097f4:	f7fe fa95 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 80097f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80097fa:	f001 fd21 	bl	800b240 <free>

        return N;
 80097fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009800:	f000 bc0a 	b.w	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif13")){
 8009804:	4956      	ldr	r1, [pc, #344]	; (8009960 <filtcoef+0x1b78>)
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f7f6 fd1a 	bl	8000240 <strcmp>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d13e      	bne.n	8009890 <filtcoef+0x1aa8>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8009812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009814:	00db      	lsls	r3, r3, #3
 8009816:	4618      	mov	r0, r3
 8009818:	f001 fd0a 	bl	800b230 <malloc>
 800981c:	4603      	mov	r3, r0
 800981e:	647b      	str	r3, [r7, #68]	; 0x44

        copy(coif13, N, coeffTemp);
 8009820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009822:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009824:	484f      	ldr	r0, [pc, #316]	; (8009964 <filtcoef+0x1b7c>)
 8009826:	f7fe faba 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 800982a:	2300      	movs	r3, #0
 800982c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800982e:	e012      	b.n	8009856 <filtcoef+0x1a6e>
            coeffTemp[i] *= M_SQRT2;
 8009830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009836:	4413      	add	r3, r2
 8009838:	ed93 7b00 	vldr	d7, [r3]
 800983c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009842:	4413      	add	r3, r2
 8009844:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8009948 <filtcoef+0x1b60>
 8009848:	ee27 7b06 	vmul.f64	d7, d7, d6
 800984c:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8009850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009852:	3301      	adds	r3, #1
 8009854:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009856:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800985a:	429a      	cmp	r2, r3
 800985c:	dbe8      	blt.n	8009830 <filtcoef+0x1a48>
        }

        copy_reverse(coeffTemp, N, lp1);
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009862:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009864:	f7fe fa14 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800986c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800986e:	f7fe fa3a 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009876:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009878:	f7fe fa91 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 800987c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800987e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009880:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009882:	f7fe fa4e 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 8009886:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009888:	f001 fcda 	bl	800b240 <free>

        return N;
 800988c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800988e:	e3c3      	b.n	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif14")){
 8009890:	4935      	ldr	r1, [pc, #212]	; (8009968 <filtcoef+0x1b80>)
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f7f6 fcd4 	bl	8000240 <strcmp>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d13e      	bne.n	800991c <filtcoef+0x1b34>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 800989e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	4618      	mov	r0, r3
 80098a4:	f001 fcc4 	bl	800b230 <malloc>
 80098a8:	4603      	mov	r3, r0
 80098aa:	64bb      	str	r3, [r7, #72]	; 0x48

        copy(coif14, N, coeffTemp);
 80098ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098b0:	482e      	ldr	r0, [pc, #184]	; (800996c <filtcoef+0x1b84>)
 80098b2:	f7fe fa74 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 80098b6:	2300      	movs	r3, #0
 80098b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098ba:	e012      	b.n	80098e2 <filtcoef+0x1afa>
            coeffTemp[i] *= M_SQRT2;
 80098bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098c2:	4413      	add	r3, r2
 80098c4:	ed93 7b00 	vldr	d7, [r3]
 80098c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098ce:	4413      	add	r3, r2
 80098d0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8009948 <filtcoef+0x1b60>
 80098d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80098d8:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 80098dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098de:	3301      	adds	r3, #1
 80098e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80098e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098e6:	429a      	cmp	r2, r3
 80098e8:	dbe8      	blt.n	80098bc <filtcoef+0x1ad4>
        }

        copy_reverse(coeffTemp, N, lp1);
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80098f0:	f7fe f9ce 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80098fa:	f7fe f9f4 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009902:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009904:	f7fe fa4b 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 8009908:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800990a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800990c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800990e:	f7fe fa08 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 8009912:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009914:	f001 fc94 	bl	800b240 <free>

        return N;
 8009918:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800991a:	e37d      	b.n	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif15")){
 800991c:	4914      	ldr	r1, [pc, #80]	; (8009970 <filtcoef+0x1b88>)
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f7f6 fc8e 	bl	8000240 <strcmp>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d156      	bne.n	80099d8 <filtcoef+0x1bf0>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 800992a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800992c:	00db      	lsls	r3, r3, #3
 800992e:	4618      	mov	r0, r3
 8009930:	f001 fc7e 	bl	800b230 <malloc>
 8009934:	4603      	mov	r3, r0
 8009936:	64fb      	str	r3, [r7, #76]	; 0x4c

        copy(coif15, N, coeffTemp);
 8009938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800993a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800993c:	480d      	ldr	r0, [pc, #52]	; (8009974 <filtcoef+0x1b8c>)
 800993e:	f7fe fa2e 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 8009942:	2300      	movs	r3, #0
 8009944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009946:	e02a      	b.n	800999e <filtcoef+0x1bb6>
 8009948:	667f3bcd 	.word	0x667f3bcd
 800994c:	3ff6a09e 	.word	0x3ff6a09e
 8009950:	08011368 	.word	0x08011368
 8009954:	08015aa8 	.word	0x08015aa8
 8009958:	08011370 	.word	0x08011370
 800995c:	08015cb8 	.word	0x08015cb8
 8009960:	08011378 	.word	0x08011378
 8009964:	08015ef8 	.word	0x08015ef8
 8009968:	08011380 	.word	0x08011380
 800996c:	08016168 	.word	0x08016168
 8009970:	08011388 	.word	0x08011388
 8009974:	08016408 	.word	0x08016408
            coeffTemp[i] *= M_SQRT2;
 8009978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800997a:	00db      	lsls	r3, r3, #3
 800997c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800997e:	4413      	add	r3, r2
 8009980:	ed93 7b00 	vldr	d7, [r3]
 8009984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009986:	00db      	lsls	r3, r3, #3
 8009988:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800998a:	4413      	add	r3, r2
 800998c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8009c18 <filtcoef+0x1e30>
 8009990:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009994:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8009998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800999a:	3301      	adds	r3, #1
 800999c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800999e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099a2:	429a      	cmp	r2, r3
 80099a4:	dbe8      	blt.n	8009978 <filtcoef+0x1b90>
        }

        copy_reverse(coeffTemp, N, lp1);
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80099ac:	f7fe f970 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80099b6:	f7fe f996 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80099c0:	f7fe f9ed 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 80099c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80099ca:	f7fe f9aa 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 80099ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80099d0:	f001 fc36 	bl	800b240 <free>

        return N;
 80099d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099d6:	e31f      	b.n	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif16")){
 80099d8:	4991      	ldr	r1, [pc, #580]	; (8009c20 <filtcoef+0x1e38>)
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f7f6 fc30 	bl	8000240 <strcmp>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d13e      	bne.n	8009a64 <filtcoef+0x1c7c>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 80099e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099e8:	00db      	lsls	r3, r3, #3
 80099ea:	4618      	mov	r0, r3
 80099ec:	f001 fc20 	bl	800b230 <malloc>
 80099f0:	4603      	mov	r3, r0
 80099f2:	653b      	str	r3, [r7, #80]	; 0x50

        copy(coif16, N, coeffTemp);
 80099f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099f8:	488a      	ldr	r0, [pc, #552]	; (8009c24 <filtcoef+0x1e3c>)
 80099fa:	f7fe f9d0 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 80099fe:	2300      	movs	r3, #0
 8009a00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a02:	e012      	b.n	8009a2a <filtcoef+0x1c42>
            coeffTemp[i] *= M_SQRT2;
 8009a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a0a:	4413      	add	r3, r2
 8009a0c:	ed93 7b00 	vldr	d7, [r3]
 8009a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a16:	4413      	add	r3, r2
 8009a18:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8009c18 <filtcoef+0x1e30>
 8009a1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a20:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8009a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a26:	3301      	adds	r3, #1
 8009a28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	dbe8      	blt.n	8009a04 <filtcoef+0x1c1c>
        }

        copy_reverse(coeffTemp, N, lp1);
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a36:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009a38:	f7fe f92a 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a40:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009a42:	f7fe f950 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a4a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009a4c:	f7fe f9a7 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 8009a50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a54:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009a56:	f7fe f964 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 8009a5a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009a5c:	f001 fbf0 	bl	800b240 <free>

        return N;
 8009a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a62:	e2d9      	b.n	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "coif17")){
 8009a64:	4970      	ldr	r1, [pc, #448]	; (8009c28 <filtcoef+0x1e40>)
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f7f6 fbea 	bl	8000240 <strcmp>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d13e      	bne.n	8009af0 <filtcoef+0x1d08>
        double *coeffTemp;
        coeffTemp = (double*)malloc(N*sizeof(double));
 8009a72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a74:	00db      	lsls	r3, r3, #3
 8009a76:	4618      	mov	r0, r3
 8009a78:	f001 fbda 	bl	800b230 <malloc>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	657b      	str	r3, [r7, #84]	; 0x54

        copy(coif17, N, coeffTemp);
 8009a80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a84:	4869      	ldr	r0, [pc, #420]	; (8009c2c <filtcoef+0x1e44>)
 8009a86:	f7fe f98a 	bl	8007d9e <copy>
        for (i = 0; i < N; ++i) {
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a8e:	e012      	b.n	8009ab6 <filtcoef+0x1cce>
            coeffTemp[i] *= M_SQRT2;
 8009a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a92:	00db      	lsls	r3, r3, #3
 8009a94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a96:	4413      	add	r3, r2
 8009a98:	ed93 7b00 	vldr	d7, [r3]
 8009a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a9e:	00db      	lsls	r3, r3, #3
 8009aa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009aa2:	4413      	add	r3, r2
 8009aa4:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8009c18 <filtcoef+0x1e30>
 8009aa8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009aac:	ed83 7b00 	vstr	d7, [r3]
        for (i = 0; i < N; ++i) {
 8009ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ab6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009aba:	429a      	cmp	r2, r3
 8009abc:	dbe8      	blt.n	8009a90 <filtcoef+0x1ca8>
        }

        copy_reverse(coeffTemp, N, lp1);
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ac2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ac4:	f7fe f8e4 	bl	8007c90 <copy_reverse>
        qmf_wrev(coeffTemp, N, hp1);
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009acc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ace:	f7fe f90a 	bl	8007ce6 <qmf_wrev>
        copy(coeffTemp, N, lp2);
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ad6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ad8:	f7fe f961 	bl	8007d9e <copy>
        qmf_even(coeffTemp, N, hp2);
 8009adc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ade:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ae0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ae2:	f7fe f91e 	bl	8007d22 <qmf_even>
        free(coeffTemp);
 8009ae6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ae8:	f001 fbaa 	bl	800b240 <free>

        return N;
 8009aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009aee:	e293      	b.n	800a018 <filtcoef+0x2230>
    }
	else if (!strcmp(name,"sym2")){
 8009af0:	494f      	ldr	r1, [pc, #316]	; (8009c30 <filtcoef+0x1e48>)
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f7f6 fba4 	bl	8000240 <strcmp>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d115      	bne.n	8009b2a <filtcoef+0x1d42>
        copy_reverse(sym2, N, lp1);
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b02:	484c      	ldr	r0, [pc, #304]	; (8009c34 <filtcoef+0x1e4c>)
 8009b04:	f7fe f8c4 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym2, N, hp1);
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b0c:	4849      	ldr	r0, [pc, #292]	; (8009c34 <filtcoef+0x1e4c>)
 8009b0e:	f7fe f8ea 	bl	8007ce6 <qmf_wrev>
        copy(sym2, N, lp2);
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b16:	4847      	ldr	r0, [pc, #284]	; (8009c34 <filtcoef+0x1e4c>)
 8009b18:	f7fe f941 	bl	8007d9e <copy>
        qmf_even(sym2, N, hp2);
 8009b1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b20:	4844      	ldr	r0, [pc, #272]	; (8009c34 <filtcoef+0x1e4c>)
 8009b22:	f7fe f8fe 	bl	8007d22 <qmf_even>
        return N;
 8009b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b28:	e276      	b.n	800a018 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym3")){
 8009b2a:	4943      	ldr	r1, [pc, #268]	; (8009c38 <filtcoef+0x1e50>)
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f7f6 fb87 	bl	8000240 <strcmp>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d115      	bne.n	8009b64 <filtcoef+0x1d7c>
        copy_reverse(sym3, N, lp1);
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b3c:	483f      	ldr	r0, [pc, #252]	; (8009c3c <filtcoef+0x1e54>)
 8009b3e:	f7fe f8a7 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym3, N, hp1);
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b46:	483d      	ldr	r0, [pc, #244]	; (8009c3c <filtcoef+0x1e54>)
 8009b48:	f7fe f8cd 	bl	8007ce6 <qmf_wrev>
        copy(sym3, N, lp2);
 8009b4c:	683a      	ldr	r2, [r7, #0]
 8009b4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b50:	483a      	ldr	r0, [pc, #232]	; (8009c3c <filtcoef+0x1e54>)
 8009b52:	f7fe f924 	bl	8007d9e <copy>
        qmf_even(sym3, N, hp2);
 8009b56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b5a:	4838      	ldr	r0, [pc, #224]	; (8009c3c <filtcoef+0x1e54>)
 8009b5c:	f7fe f8e1 	bl	8007d22 <qmf_even>
        return N;
 8009b60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b62:	e259      	b.n	800a018 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym4")){
 8009b64:	4936      	ldr	r1, [pc, #216]	; (8009c40 <filtcoef+0x1e58>)
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f7f6 fb6a 	bl	8000240 <strcmp>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d115      	bne.n	8009b9e <filtcoef+0x1db6>
        copy_reverse(sym4, N, lp1);
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b76:	4833      	ldr	r0, [pc, #204]	; (8009c44 <filtcoef+0x1e5c>)
 8009b78:	f7fe f88a 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym4, N, hp1);
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b80:	4830      	ldr	r0, [pc, #192]	; (8009c44 <filtcoef+0x1e5c>)
 8009b82:	f7fe f8b0 	bl	8007ce6 <qmf_wrev>
        copy(sym4, N, lp2);
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b8a:	482e      	ldr	r0, [pc, #184]	; (8009c44 <filtcoef+0x1e5c>)
 8009b8c:	f7fe f907 	bl	8007d9e <copy>
        qmf_even(sym4, N, hp2);
 8009b90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b94:	482b      	ldr	r0, [pc, #172]	; (8009c44 <filtcoef+0x1e5c>)
 8009b96:	f7fe f8c4 	bl	8007d22 <qmf_even>
        return N;
 8009b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b9c:	e23c      	b.n	800a018 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym5")){
 8009b9e:	492a      	ldr	r1, [pc, #168]	; (8009c48 <filtcoef+0x1e60>)
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f7f6 fb4d 	bl	8000240 <strcmp>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d115      	bne.n	8009bd8 <filtcoef+0x1df0>
        copy_reverse(sym5, N, lp1);
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bb0:	4826      	ldr	r0, [pc, #152]	; (8009c4c <filtcoef+0x1e64>)
 8009bb2:	f7fe f86d 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym5, N, hp1);
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bba:	4824      	ldr	r0, [pc, #144]	; (8009c4c <filtcoef+0x1e64>)
 8009bbc:	f7fe f893 	bl	8007ce6 <qmf_wrev>
        copy(sym5, N, lp2);
 8009bc0:	683a      	ldr	r2, [r7, #0]
 8009bc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bc4:	4821      	ldr	r0, [pc, #132]	; (8009c4c <filtcoef+0x1e64>)
 8009bc6:	f7fe f8ea 	bl	8007d9e <copy>
        qmf_even(sym5, N, hp2);
 8009bca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009bcc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bce:	481f      	ldr	r0, [pc, #124]	; (8009c4c <filtcoef+0x1e64>)
 8009bd0:	f7fe f8a7 	bl	8007d22 <qmf_even>
        return N;
 8009bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bd6:	e21f      	b.n	800a018 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym6")){
 8009bd8:	491d      	ldr	r1, [pc, #116]	; (8009c50 <filtcoef+0x1e68>)
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7f6 fb30 	bl	8000240 <strcmp>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d138      	bne.n	8009c58 <filtcoef+0x1e70>
        copy_reverse(sym6, N, lp1);
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bea:	481a      	ldr	r0, [pc, #104]	; (8009c54 <filtcoef+0x1e6c>)
 8009bec:	f7fe f850 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym6, N, hp1);
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bf4:	4817      	ldr	r0, [pc, #92]	; (8009c54 <filtcoef+0x1e6c>)
 8009bf6:	f7fe f876 	bl	8007ce6 <qmf_wrev>
        copy(sym6, N, lp2);
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bfe:	4815      	ldr	r0, [pc, #84]	; (8009c54 <filtcoef+0x1e6c>)
 8009c00:	f7fe f8cd 	bl	8007d9e <copy>
        qmf_even(sym6, N, hp2);
 8009c04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c08:	4812      	ldr	r0, [pc, #72]	; (8009c54 <filtcoef+0x1e6c>)
 8009c0a:	f7fe f88a 	bl	8007d22 <qmf_even>
        return N;
 8009c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c10:	e202      	b.n	800a018 <filtcoef+0x2230>
 8009c12:	bf00      	nop
 8009c14:	f3af 8000 	nop.w
 8009c18:	667f3bcd 	.word	0x667f3bcd
 8009c1c:	3ff6a09e 	.word	0x3ff6a09e
 8009c20:	08011390 	.word	0x08011390
 8009c24:	080166d8 	.word	0x080166d8
 8009c28:	08011398 	.word	0x08011398
 8009c2c:	080169d8 	.word	0x080169d8
 8009c30:	080113a0 	.word	0x080113a0
 8009c34:	08016d08 	.word	0x08016d08
 8009c38:	080113a8 	.word	0x080113a8
 8009c3c:	08016d28 	.word	0x08016d28
 8009c40:	080113b0 	.word	0x080113b0
 8009c44:	08016d58 	.word	0x08016d58
 8009c48:	080113b8 	.word	0x080113b8
 8009c4c:	08016d98 	.word	0x08016d98
 8009c50:	080113c0 	.word	0x080113c0
 8009c54:	08016de8 	.word	0x08016de8
	}

	else if (!strcmp(name,"sym7")){
 8009c58:	4990      	ldr	r1, [pc, #576]	; (8009e9c <filtcoef+0x20b4>)
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f7f6 faf0 	bl	8000240 <strcmp>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d115      	bne.n	8009c92 <filtcoef+0x1eaa>
        copy_reverse(sym7, N, lp1);
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c6a:	488d      	ldr	r0, [pc, #564]	; (8009ea0 <filtcoef+0x20b8>)
 8009c6c:	f7fe f810 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym7, N, hp1);
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c74:	488a      	ldr	r0, [pc, #552]	; (8009ea0 <filtcoef+0x20b8>)
 8009c76:	f7fe f836 	bl	8007ce6 <qmf_wrev>
        copy(sym7, N, lp2);
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c7e:	4888      	ldr	r0, [pc, #544]	; (8009ea0 <filtcoef+0x20b8>)
 8009c80:	f7fe f88d 	bl	8007d9e <copy>
        qmf_even(sym7, N, hp2);
 8009c84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c88:	4885      	ldr	r0, [pc, #532]	; (8009ea0 <filtcoef+0x20b8>)
 8009c8a:	f7fe f84a 	bl	8007d22 <qmf_even>
        return N;
 8009c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c90:	e1c2      	b.n	800a018 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym8")){
 8009c92:	4984      	ldr	r1, [pc, #528]	; (8009ea4 <filtcoef+0x20bc>)
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7f6 fad3 	bl	8000240 <strcmp>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d115      	bne.n	8009ccc <filtcoef+0x1ee4>
        copy_reverse(sym8, N, lp1);
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ca4:	4880      	ldr	r0, [pc, #512]	; (8009ea8 <filtcoef+0x20c0>)
 8009ca6:	f7fd fff3 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym8, N, hp1);
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009cae:	487e      	ldr	r0, [pc, #504]	; (8009ea8 <filtcoef+0x20c0>)
 8009cb0:	f7fe f819 	bl	8007ce6 <qmf_wrev>
        copy(sym8, N, lp2);
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009cb8:	487b      	ldr	r0, [pc, #492]	; (8009ea8 <filtcoef+0x20c0>)
 8009cba:	f7fe f870 	bl	8007d9e <copy>
        qmf_even(sym8, N, hp2);
 8009cbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009cc0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009cc2:	4879      	ldr	r0, [pc, #484]	; (8009ea8 <filtcoef+0x20c0>)
 8009cc4:	f7fe f82d 	bl	8007d22 <qmf_even>
        return N;
 8009cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cca:	e1a5      	b.n	800a018 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym9")){
 8009ccc:	4977      	ldr	r1, [pc, #476]	; (8009eac <filtcoef+0x20c4>)
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f7f6 fab6 	bl	8000240 <strcmp>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d115      	bne.n	8009d06 <filtcoef+0x1f1e>
        copy_reverse(sym9, N, lp1);
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009cde:	4874      	ldr	r0, [pc, #464]	; (8009eb0 <filtcoef+0x20c8>)
 8009ce0:	f7fd ffd6 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym9, N, hp1);
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ce8:	4871      	ldr	r0, [pc, #452]	; (8009eb0 <filtcoef+0x20c8>)
 8009cea:	f7fd fffc 	bl	8007ce6 <qmf_wrev>
        copy(sym9, N, lp2);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009cf2:	486f      	ldr	r0, [pc, #444]	; (8009eb0 <filtcoef+0x20c8>)
 8009cf4:	f7fe f853 	bl	8007d9e <copy>
        qmf_even(sym9, N, hp2);
 8009cf8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009cfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009cfc:	486c      	ldr	r0, [pc, #432]	; (8009eb0 <filtcoef+0x20c8>)
 8009cfe:	f7fe f810 	bl	8007d22 <qmf_even>
        return N;
 8009d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d04:	e188      	b.n	800a018 <filtcoef+0x2230>
	}

	else if (!strcmp(name,"sym10")){
 8009d06:	496b      	ldr	r1, [pc, #428]	; (8009eb4 <filtcoef+0x20cc>)
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7f6 fa99 	bl	8000240 <strcmp>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d115      	bne.n	8009d40 <filtcoef+0x1f58>
        copy_reverse(sym10, N, lp1);
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d18:	4867      	ldr	r0, [pc, #412]	; (8009eb8 <filtcoef+0x20d0>)
 8009d1a:	f7fd ffb9 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym10, N, hp1);
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d22:	4865      	ldr	r0, [pc, #404]	; (8009eb8 <filtcoef+0x20d0>)
 8009d24:	f7fd ffdf 	bl	8007ce6 <qmf_wrev>
        copy(sym10, N, lp2);
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d2c:	4862      	ldr	r0, [pc, #392]	; (8009eb8 <filtcoef+0x20d0>)
 8009d2e:	f7fe f836 	bl	8007d9e <copy>
        qmf_even(sym10, N, hp2);
 8009d32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d36:	4860      	ldr	r0, [pc, #384]	; (8009eb8 <filtcoef+0x20d0>)
 8009d38:	f7fd fff3 	bl	8007d22 <qmf_even>
        return N;
 8009d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d3e:	e16b      	b.n	800a018 <filtcoef+0x2230>
	}
    else if (!strcmp(name, "sym11")){
 8009d40:	495e      	ldr	r1, [pc, #376]	; (8009ebc <filtcoef+0x20d4>)
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7f6 fa7c 	bl	8000240 <strcmp>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d115      	bne.n	8009d7a <filtcoef+0x1f92>
        copy_reverse(sym11, N, lp1);
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d52:	485b      	ldr	r0, [pc, #364]	; (8009ec0 <filtcoef+0x20d8>)
 8009d54:	f7fd ff9c 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym11, N, hp1);
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d5c:	4858      	ldr	r0, [pc, #352]	; (8009ec0 <filtcoef+0x20d8>)
 8009d5e:	f7fd ffc2 	bl	8007ce6 <qmf_wrev>
        copy(sym11, N, lp2);
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d66:	4856      	ldr	r0, [pc, #344]	; (8009ec0 <filtcoef+0x20d8>)
 8009d68:	f7fe f819 	bl	8007d9e <copy>
        qmf_even(sym11, N, hp2);
 8009d6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d70:	4853      	ldr	r0, [pc, #332]	; (8009ec0 <filtcoef+0x20d8>)
 8009d72:	f7fd ffd6 	bl	8007d22 <qmf_even>
        return N;
 8009d76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d78:	e14e      	b.n	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym12")){
 8009d7a:	4952      	ldr	r1, [pc, #328]	; (8009ec4 <filtcoef+0x20dc>)
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f7f6 fa5f 	bl	8000240 <strcmp>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d115      	bne.n	8009db4 <filtcoef+0x1fcc>
        copy_reverse(sym12, N, lp1);
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d8c:	484e      	ldr	r0, [pc, #312]	; (8009ec8 <filtcoef+0x20e0>)
 8009d8e:	f7fd ff7f 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym12, N, hp1);
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d96:	484c      	ldr	r0, [pc, #304]	; (8009ec8 <filtcoef+0x20e0>)
 8009d98:	f7fd ffa5 	bl	8007ce6 <qmf_wrev>
        copy(sym12, N, lp2);
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009da0:	4849      	ldr	r0, [pc, #292]	; (8009ec8 <filtcoef+0x20e0>)
 8009da2:	f7fd fffc 	bl	8007d9e <copy>
        qmf_even(sym12, N, hp2);
 8009da6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009da8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009daa:	4847      	ldr	r0, [pc, #284]	; (8009ec8 <filtcoef+0x20e0>)
 8009dac:	f7fd ffb9 	bl	8007d22 <qmf_even>
        return N;
 8009db0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009db2:	e131      	b.n	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym13")){
 8009db4:	4945      	ldr	r1, [pc, #276]	; (8009ecc <filtcoef+0x20e4>)
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f7f6 fa42 	bl	8000240 <strcmp>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d115      	bne.n	8009dee <filtcoef+0x2006>
        copy_reverse(sym13, N, lp1);
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009dc6:	4842      	ldr	r0, [pc, #264]	; (8009ed0 <filtcoef+0x20e8>)
 8009dc8:	f7fd ff62 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym13, N, hp1);
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009dd0:	483f      	ldr	r0, [pc, #252]	; (8009ed0 <filtcoef+0x20e8>)
 8009dd2:	f7fd ff88 	bl	8007ce6 <qmf_wrev>
        copy(sym13, N, lp2);
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009dda:	483d      	ldr	r0, [pc, #244]	; (8009ed0 <filtcoef+0x20e8>)
 8009ddc:	f7fd ffdf 	bl	8007d9e <copy>
        qmf_even(sym13, N, hp2);
 8009de0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009de2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009de4:	483a      	ldr	r0, [pc, #232]	; (8009ed0 <filtcoef+0x20e8>)
 8009de6:	f7fd ff9c 	bl	8007d22 <qmf_even>
        return N;
 8009dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dec:	e114      	b.n	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym14")){
 8009dee:	4939      	ldr	r1, [pc, #228]	; (8009ed4 <filtcoef+0x20ec>)
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f7f6 fa25 	bl	8000240 <strcmp>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d115      	bne.n	8009e28 <filtcoef+0x2040>
        copy_reverse(sym14, N, lp1);
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e00:	4835      	ldr	r0, [pc, #212]	; (8009ed8 <filtcoef+0x20f0>)
 8009e02:	f7fd ff45 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym14, N, hp1);
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e0a:	4833      	ldr	r0, [pc, #204]	; (8009ed8 <filtcoef+0x20f0>)
 8009e0c:	f7fd ff6b 	bl	8007ce6 <qmf_wrev>
        copy(sym14, N, lp2);
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e14:	4830      	ldr	r0, [pc, #192]	; (8009ed8 <filtcoef+0x20f0>)
 8009e16:	f7fd ffc2 	bl	8007d9e <copy>
        qmf_even(sym14, N, hp2);
 8009e1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e1e:	482e      	ldr	r0, [pc, #184]	; (8009ed8 <filtcoef+0x20f0>)
 8009e20:	f7fd ff7f 	bl	8007d22 <qmf_even>
        return N;
 8009e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e26:	e0f7      	b.n	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym15")){
 8009e28:	492c      	ldr	r1, [pc, #176]	; (8009edc <filtcoef+0x20f4>)
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f7f6 fa08 	bl	8000240 <strcmp>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d115      	bne.n	8009e62 <filtcoef+0x207a>
        copy_reverse(sym15, N, lp1);
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e3a:	4829      	ldr	r0, [pc, #164]	; (8009ee0 <filtcoef+0x20f8>)
 8009e3c:	f7fd ff28 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym15, N, hp1);
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e44:	4826      	ldr	r0, [pc, #152]	; (8009ee0 <filtcoef+0x20f8>)
 8009e46:	f7fd ff4e 	bl	8007ce6 <qmf_wrev>
        copy(sym15, N, lp2);
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e4e:	4824      	ldr	r0, [pc, #144]	; (8009ee0 <filtcoef+0x20f8>)
 8009e50:	f7fd ffa5 	bl	8007d9e <copy>
        qmf_even(sym15, N, hp2);
 8009e54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e58:	4821      	ldr	r0, [pc, #132]	; (8009ee0 <filtcoef+0x20f8>)
 8009e5a:	f7fd ff62 	bl	8007d22 <qmf_even>
        return N;
 8009e5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e60:	e0da      	b.n	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym16")){
 8009e62:	4920      	ldr	r1, [pc, #128]	; (8009ee4 <filtcoef+0x20fc>)
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f7f6 f9eb 	bl	8000240 <strcmp>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d13d      	bne.n	8009eec <filtcoef+0x2104>
        copy_reverse(sym16, N, lp1);
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e74:	481c      	ldr	r0, [pc, #112]	; (8009ee8 <filtcoef+0x2100>)
 8009e76:	f7fd ff0b 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym16, N, hp1);
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e7e:	481a      	ldr	r0, [pc, #104]	; (8009ee8 <filtcoef+0x2100>)
 8009e80:	f7fd ff31 	bl	8007ce6 <qmf_wrev>
        copy(sym16, N, lp2);
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e88:	4817      	ldr	r0, [pc, #92]	; (8009ee8 <filtcoef+0x2100>)
 8009e8a:	f7fd ff88 	bl	8007d9e <copy>
        qmf_even(sym16, N, hp2);
 8009e8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e92:	4815      	ldr	r0, [pc, #84]	; (8009ee8 <filtcoef+0x2100>)
 8009e94:	f7fd ff45 	bl	8007d22 <qmf_even>
        return N;
 8009e98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e9a:	e0bd      	b.n	800a018 <filtcoef+0x2230>
 8009e9c:	080113c8 	.word	0x080113c8
 8009ea0:	08016e48 	.word	0x08016e48
 8009ea4:	080113d0 	.word	0x080113d0
 8009ea8:	08016eb8 	.word	0x08016eb8
 8009eac:	080113d8 	.word	0x080113d8
 8009eb0:	08016f38 	.word	0x08016f38
 8009eb4:	080113e0 	.word	0x080113e0
 8009eb8:	08016fc8 	.word	0x08016fc8
 8009ebc:	080113e8 	.word	0x080113e8
 8009ec0:	08017068 	.word	0x08017068
 8009ec4:	080113f0 	.word	0x080113f0
 8009ec8:	08017118 	.word	0x08017118
 8009ecc:	080113f8 	.word	0x080113f8
 8009ed0:	080171d8 	.word	0x080171d8
 8009ed4:	08011400 	.word	0x08011400
 8009ed8:	080172a8 	.word	0x080172a8
 8009edc:	08011408 	.word	0x08011408
 8009ee0:	08017388 	.word	0x08017388
 8009ee4:	08011410 	.word	0x08011410
 8009ee8:	08017478 	.word	0x08017478
    }
    else if (!strcmp(name, "sym17")){
 8009eec:	494c      	ldr	r1, [pc, #304]	; (800a020 <filtcoef+0x2238>)
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f7f6 f9a6 	bl	8000240 <strcmp>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d115      	bne.n	8009f26 <filtcoef+0x213e>
        copy_reverse(sym17, N, lp1);
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009efe:	4849      	ldr	r0, [pc, #292]	; (800a024 <filtcoef+0x223c>)
 8009f00:	f7fd fec6 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym17, N, hp1);
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f08:	4846      	ldr	r0, [pc, #280]	; (800a024 <filtcoef+0x223c>)
 8009f0a:	f7fd feec 	bl	8007ce6 <qmf_wrev>
        copy(sym17, N, lp2);
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f12:	4844      	ldr	r0, [pc, #272]	; (800a024 <filtcoef+0x223c>)
 8009f14:	f7fd ff43 	bl	8007d9e <copy>
        qmf_even(sym17, N, hp2);
 8009f18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f1c:	4841      	ldr	r0, [pc, #260]	; (800a024 <filtcoef+0x223c>)
 8009f1e:	f7fd ff00 	bl	8007d22 <qmf_even>
        return N;
 8009f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f24:	e078      	b.n	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym18")){
 8009f26:	4940      	ldr	r1, [pc, #256]	; (800a028 <filtcoef+0x2240>)
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f7f6 f989 	bl	8000240 <strcmp>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d115      	bne.n	8009f60 <filtcoef+0x2178>
        copy_reverse(sym18, N, lp1);
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f38:	483c      	ldr	r0, [pc, #240]	; (800a02c <filtcoef+0x2244>)
 8009f3a:	f7fd fea9 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym18, N, hp1);
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f42:	483a      	ldr	r0, [pc, #232]	; (800a02c <filtcoef+0x2244>)
 8009f44:	f7fd fecf 	bl	8007ce6 <qmf_wrev>
        copy(sym18, N, lp2);
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f4c:	4837      	ldr	r0, [pc, #220]	; (800a02c <filtcoef+0x2244>)
 8009f4e:	f7fd ff26 	bl	8007d9e <copy>
        qmf_even(sym18, N, hp2);
 8009f52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f56:	4835      	ldr	r0, [pc, #212]	; (800a02c <filtcoef+0x2244>)
 8009f58:	f7fd fee3 	bl	8007d22 <qmf_even>
        return N;
 8009f5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f5e:	e05b      	b.n	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym19")){
 8009f60:	4933      	ldr	r1, [pc, #204]	; (800a030 <filtcoef+0x2248>)
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f7f6 f96c 	bl	8000240 <strcmp>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d115      	bne.n	8009f9a <filtcoef+0x21b2>
        copy_reverse(sym19, N, lp1);
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f72:	4830      	ldr	r0, [pc, #192]	; (800a034 <filtcoef+0x224c>)
 8009f74:	f7fd fe8c 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym19, N, hp1);
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f7c:	482d      	ldr	r0, [pc, #180]	; (800a034 <filtcoef+0x224c>)
 8009f7e:	f7fd feb2 	bl	8007ce6 <qmf_wrev>
        copy(sym19, N, lp2);
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f86:	482b      	ldr	r0, [pc, #172]	; (800a034 <filtcoef+0x224c>)
 8009f88:	f7fd ff09 	bl	8007d9e <copy>
        qmf_even(sym19, N, hp2);
 8009f8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f90:	4828      	ldr	r0, [pc, #160]	; (800a034 <filtcoef+0x224c>)
 8009f92:	f7fd fec6 	bl	8007d22 <qmf_even>
        return N;
 8009f96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f98:	e03e      	b.n	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "sym20")){
 8009f9a:	4927      	ldr	r1, [pc, #156]	; (800a038 <filtcoef+0x2250>)
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f7f6 f94f 	bl	8000240 <strcmp>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d115      	bne.n	8009fd4 <filtcoef+0x21ec>
        copy_reverse(sym20, N, lp1);
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fac:	4823      	ldr	r0, [pc, #140]	; (800a03c <filtcoef+0x2254>)
 8009fae:	f7fd fe6f 	bl	8007c90 <copy_reverse>
        qmf_wrev(sym20, N, hp1);
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fb6:	4821      	ldr	r0, [pc, #132]	; (800a03c <filtcoef+0x2254>)
 8009fb8:	f7fd fe95 	bl	8007ce6 <qmf_wrev>
        copy(sym20, N, lp2);
 8009fbc:	683a      	ldr	r2, [r7, #0]
 8009fbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fc0:	481e      	ldr	r0, [pc, #120]	; (800a03c <filtcoef+0x2254>)
 8009fc2:	f7fd feec 	bl	8007d9e <copy>
        qmf_even(sym20, N, hp2);
 8009fc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009fc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fca:	481c      	ldr	r0, [pc, #112]	; (800a03c <filtcoef+0x2254>)
 8009fcc:	f7fd fea9 	bl	8007d22 <qmf_even>
        return N;
 8009fd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009fd2:	e021      	b.n	800a018 <filtcoef+0x2230>
    }
    else if (!strcmp(name, "meyer")){
 8009fd4:	491a      	ldr	r1, [pc, #104]	; (800a040 <filtcoef+0x2258>)
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7f6 f932 	bl	8000240 <strcmp>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d115      	bne.n	800a00e <filtcoef+0x2226>
        copy_reverse(meyer, N, lp1);
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fe6:	4817      	ldr	r0, [pc, #92]	; (800a044 <filtcoef+0x225c>)
 8009fe8:	f7fd fe52 	bl	8007c90 <copy_reverse>
        qmf_wrev(meyer, N, hp1);
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ff0:	4814      	ldr	r0, [pc, #80]	; (800a044 <filtcoef+0x225c>)
 8009ff2:	f7fd fe78 	bl	8007ce6 <qmf_wrev>
        copy(meyer, N, lp2);
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ffa:	4812      	ldr	r0, [pc, #72]	; (800a044 <filtcoef+0x225c>)
 8009ffc:	f7fd fecf 	bl	8007d9e <copy>
        qmf_even(meyer, N, hp2);
 800a000:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a002:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a004:	480f      	ldr	r0, [pc, #60]	; (800a044 <filtcoef+0x225c>)
 800a006:	f7fd fe8c 	bl	8007d22 <qmf_even>
        return N;
 800a00a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a00c:	e004      	b.n	800a018 <filtcoef+0x2230>
    }

	else {
		printf("\n Filter Not in Database \n");
 800a00e:	480e      	ldr	r0, [pc, #56]	; (800a048 <filtcoef+0x2260>)
 800a010:	f002 f9c0 	bl	800c394 <puts>
		return -1;
 800a014:	f04f 33ff 	mov.w	r3, #4294967295
	}

	return 0;
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3760      	adds	r7, #96	; 0x60
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	08011418 	.word	0x08011418
 800a024:	08017578 	.word	0x08017578
 800a028:	08011420 	.word	0x08011420
 800a02c:	08017688 	.word	0x08017688
 800a030:	08011428 	.word	0x08011428
 800a034:	080177a8 	.word	0x080177a8
 800a038:	08011430 	.word	0x08011430
 800a03c:	080178d8 	.word	0x080178d8
 800a040:	08011208 	.word	0x08011208
 800a044:	08018208 	.word	0x08018208
 800a048:	080110b4 	.word	0x080110b4

0800a04c <wave_init>:
#include <string.h>

#include "../../../Restored/wavelib/src/cwt.h"
#include "../../../Restored/wavelib/src/wtmath.h"

wave_object wave_init(const char* wname) {
 800a04c:	b5b0      	push	{r4, r5, r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af02      	add	r7, sp, #8
 800a052:	6078      	str	r0, [r7, #4]
	wave_object obj = NULL;
 800a054:	2300      	movs	r3, #0
 800a056:	60bb      	str	r3, [r7, #8]
	int retval;
	retval = 0;
 800a058:	2300      	movs	r3, #0
 800a05a:	60fb      	str	r3, [r7, #12]

	if (wname != NULL) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <wave_init+0x1e>
		retval = filtlength(wname);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7fd fbde 	bl	8007824 <filtlength>
 800a068:	60f8      	str	r0, [r7, #12]
		//obj->filtlength = retval;
		//strcopy(obj->wname, wname);
	}

	obj = (wave_object)malloc(sizeof(struct wave_set) + sizeof(double)* 4 * retval);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	015b      	lsls	r3, r3, #5
 800a06e:	3358      	adds	r3, #88	; 0x58
 800a070:	4618      	mov	r0, r3
 800a072:	f001 f8dd 	bl	800b230 <malloc>
 800a076:	4603      	mov	r3, r0
 800a078:	60bb      	str	r3, [r7, #8]

	obj->filtlength = retval;
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	635a      	str	r2, [r3, #52]	; 0x34
	obj->lpd_len = obj->hpd_len = obj->lpr_len = obj->hpr_len = obj->filtlength;
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	645a      	str	r2, [r3, #68]	; 0x44
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	641a      	str	r2, [r3, #64]	; 0x40
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	63da      	str	r2, [r3, #60]	; 0x3c
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	639a      	str	r2, [r3, #56]	; 0x38
	strcpy(obj->wname, wname);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f002 fbda 	bl	800c85e <strcpy>
	if (wname != NULL) {
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d01e      	beq.n	800a0ee <wave_init+0xa2>
		filtcoef(wname,obj->params,obj->params+retval,obj->params+2*retval,obj->params+3*retval);
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	18d4      	adds	r4, r2, r3
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	011b      	lsls	r3, r3, #4
 800a0cc:	18d5      	adds	r5, r2, r3
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	4413      	add	r3, r2
 800a0dc:	00db      	lsls	r3, r3, #3
 800a0de:	440b      	add	r3, r1
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	462b      	mov	r3, r5
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	4601      	mov	r1, r0
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7fd fe7d 	bl	8007de8 <filtcoef>
	}
	obj->lpd = &obj->params[0];
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	649a      	str	r2, [r3, #72]	; 0x48
	obj->hpd = &obj->params[retval];
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	330b      	adds	r3, #11
 800a0fc:	00db      	lsls	r3, r3, #3
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	441a      	add	r2, r3
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	64da      	str	r2, [r3, #76]	; 0x4c
	obj->lpr = &obj->params[2 * retval];
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	330b      	adds	r3, #11
 800a10c:	00db      	lsls	r3, r3, #3
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	441a      	add	r2, r3
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	651a      	str	r2, [r3, #80]	; 0x50
	obj->hpr = &obj->params[3 * retval];
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	4613      	mov	r3, r2
 800a11a:	005b      	lsls	r3, r3, #1
 800a11c:	4413      	add	r3, r2
 800a11e:	330b      	adds	r3, #11
 800a120:	00db      	lsls	r3, r3, #3
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	441a      	add	r2, r3
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	655a      	str	r2, [r3, #84]	; 0x54
	return obj;
 800a12a:	68bb      	ldr	r3, [r7, #8]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bdb0      	pop	{r4, r5, r7, pc}

0800a134 <wtree_init>:
	//wave_summary(obj->wave);

	return obj;
}

wtree_object wtree_init(wave_object wave, int siglength,int J) {
 800a134:	b580      	push	{r7, lr}
 800a136:	b08c      	sub	sp, #48	; 0x30
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
    int size,i,MaxIter,temp,temp2,elength,nodes;
	wtree_object obj = NULL;
 800a140:	2300      	movs	r3, #0
 800a142:	61fb      	str	r3, [r7, #28]

	size = wave->filtlength;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a148:	61bb      	str	r3, [r7, #24]

	if (J > 100) {
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b64      	cmp	r3, #100	; 0x64
 800a14e:	dd06      	ble.n	800a15e <wtree_init+0x2a>
		printf(" \r\n The Decomposition Iterations Cannot Exceed 100. Exiting  \r\n");
 800a150:	4865      	ldr	r0, [pc, #404]	; (800a2e8 <wtree_init+0x1b4>)
 800a152:	f002 f91f 	bl	800c394 <puts>
		exit(-1);
 800a156:	f04f 30ff 	mov.w	r0, #4294967295
 800a15a:	f001 f857 	bl	800b20c <exit>
	}


	MaxIter = wmaxiter(siglength, size);
 800a15e:	69b9      	ldr	r1, [r7, #24]
 800a160:	68b8      	ldr	r0, [r7, #8]
 800a162:	f001 f805 	bl	800b170 <wmaxiter>
 800a166:	6178      	str	r0, [r7, #20]
	if (J > MaxIter) {
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	dd07      	ble.n	800a180 <wtree_init+0x4c>
		printf(" \r\n Error - The Signal Can only be iterated %d times using this wavelet. Exiting \r\n", MaxIter);
 800a170:	6979      	ldr	r1, [r7, #20]
 800a172:	485e      	ldr	r0, [pc, #376]	; (800a2ec <wtree_init+0x1b8>)
 800a174:	f002 f8a8 	bl	800c2c8 <iprintf>
		exit(-1);
 800a178:	f04f 30ff 	mov.w	r0, #4294967295
 800a17c:	f001 f846 	bl	800b20c <exit>
	}
	temp = 1;
 800a180:	2301      	movs	r3, #1
 800a182:	62bb      	str	r3, [r7, #40]	; 0x28
	elength = 0;
 800a184:	2300      	movs	r3, #0
 800a186:	627b      	str	r3, [r7, #36]	; 0x24
	nodes = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	623b      	str	r3, [r7, #32]
	for(i = 0; i < J;++i) {
 800a18c:	2300      	movs	r3, #0
 800a18e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a190:	e014      	b.n	800a1bc <wtree_init+0x88>
	  temp *= 2;
 800a192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	62bb      	str	r3, [r7, #40]	; 0x28
	  nodes += temp;
 800a198:	6a3a      	ldr	r2, [r7, #32]
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	4413      	add	r3, r2
 800a19e:	623b      	str	r3, [r7, #32]
	  temp2 = (size - 2) * (temp - 1);
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	3b02      	subs	r3, #2
 800a1a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1a6:	3a01      	subs	r2, #1
 800a1a8:	fb02 f303 	mul.w	r3, r2, r3
 800a1ac:	613b      	str	r3, [r7, #16]
	  elength += temp2;
 800a1ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	627b      	str	r3, [r7, #36]	; 0x24
	for(i = 0; i < J;++i) {
 800a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	dbe6      	blt.n	800a192 <wtree_init+0x5e>
	}

	obj = (wtree_object)malloc(sizeof(struct wtree_set) + sizeof(double)* (siglength * (J + 1) + elength + nodes + J + 1));
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	fb03 f202 	mul.w	r2, r3, r2
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	441a      	add	r2, r3
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	441a      	add	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4413      	add	r3, r2
 800a1da:	333f      	adds	r3, #63	; 0x3f
 800a1dc:	00db      	lsls	r3, r3, #3
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f001 f826 	bl	800b230 <malloc>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	61fb      	str	r3, [r7, #28]
	obj->outlength = siglength * (J + 1) + elength;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	fb03 f202 	mul.w	r2, r3, r2
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f4:	441a      	add	r2, r3
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	619a      	str	r2, [r3, #24]
	strcpy(obj->ext, "sym");
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	332c      	adds	r3, #44	; 0x2c
 800a1fe:	4a3c      	ldr	r2, [pc, #240]	; (800a2f0 <wtree_init+0x1bc>)
 800a200:	6810      	ldr	r0, [r2, #0]
 800a202:	6018      	str	r0, [r3, #0]

	obj->wave = wave;
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	601a      	str	r2, [r3, #0]
	obj->siglength = siglength;
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	615a      	str	r2, [r3, #20]
	obj->J = J;
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	621a      	str	r2, [r3, #32]
	obj->MaxIter = MaxIter;
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	625a      	str	r2, [r3, #36]	; 0x24
	strcpy(obj->method, "dwt");
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	3308      	adds	r3, #8
 800a220:	4a34      	ldr	r2, [pc, #208]	; (800a2f4 <wtree_init+0x1c0>)
 800a222:	6810      	ldr	r0, [r2, #0]
 800a224:	6018      	str	r0, [r3, #0]

	if (siglength % 2 == 0) {
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d103      	bne.n	800a238 <wtree_init+0x104>
		obj->even = 1;
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	2201      	movs	r2, #1
 800a234:	629a      	str	r2, [r3, #40]	; 0x28
 800a236:	e002      	b.n	800a23e <wtree_init+0x10a>
	}
	else {
		obj->even = 0;
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	2200      	movs	r2, #0
 800a23c:	629a      	str	r2, [r3, #40]	; 0x28
	}

	obj->cobj = NULL;
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	2200      	movs	r2, #0
 800a242:	605a      	str	r2, [r3, #4]
	obj->nodes = nodes;
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	6a3a      	ldr	r2, [r7, #32]
 800a248:	63da      	str	r2, [r3, #60]	; 0x3c

	obj->cfftset = 0;
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	2200      	movs	r2, #0
 800a24e:	641a      	str	r2, [r3, #64]	; 0x40
	obj->lenlength = J + 2;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	1c9a      	adds	r2, r3, #2
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	61da      	str	r2, [r3, #28]
	obj->output = &obj->params[0];
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	obj->nodelength = (int*) &obj->params[siglength * (J + 1) + elength];
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3301      	adds	r3, #1
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	fb03 f202 	mul.w	r2, r3, r2
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	4413      	add	r3, r2
 800a272:	333e      	adds	r3, #62	; 0x3e
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	69fa      	ldr	r2, [r7, #28]
 800a278:	441a      	add	r2, r3
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	obj->coeflength = (int*)&obj->params[siglength * (J + 1) + elength + nodes];
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3301      	adds	r3, #1
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	fb03 f202 	mul.w	r2, r3, r2
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	441a      	add	r2, r3
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	4413      	add	r3, r2
 800a292:	333e      	adds	r3, #62	; 0x3e
 800a294:	00db      	lsls	r3, r3, #3
 800a296:	69fa      	ldr	r2, [r7, #28]
 800a298:	441a      	add	r2, r3
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for (i = 0; i < siglength * (J + 1) + elength + nodes + J + 1; ++i) {
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2a4:	e00d      	b.n	800a2c2 <wtree_init+0x18e>
	       obj->params[i] = 0.0;
 800a2a6:	69fa      	ldr	r2, [r7, #28]
 800a2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2aa:	333e      	adds	r3, #62	; 0x3e
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	18d1      	adds	r1, r2, r3
 800a2b0:	f04f 0200 	mov.w	r2, #0
 800a2b4:	f04f 0300 	mov.w	r3, #0
 800a2b8:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < siglength * (J + 1) + elength + nodes + J + 1; ++i) {
 800a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2be:	3301      	adds	r3, #1
 800a2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	fb03 f202 	mul.w	r2, r3, r2
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	441a      	add	r2, r3
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
 800a2d2:	441a      	add	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	dde3      	ble.n	800a2a6 <wtree_init+0x172>
	}

	//wave_summary(obj->wave);

	return obj;
 800a2de:	69fb      	ldr	r3, [r7, #28]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3730      	adds	r7, #48	; 0x30
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	08011438 	.word	0x08011438
 800a2ec:	08011478 	.word	0x08011478
 800a2f0:	080114cc 	.word	0x080114cc
 800a2f4:	080114d0 	.word	0x080114d0

0800a2f8 <wtree_per>:

	dwt_per_stride(inp,N,wt->wave->lpd,wt->wave->hpd,wt->wave->lpd_len,cA,len_cA,cD,1,1);

}

static void wtree_per(wtree_object wt, double *inp, int N, double *cA, int len_cA, double *cD) {
 800a2f8:	b480      	push	{r7}
 800a2fa:	b08b      	sub	sp, #44	; 0x2c
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
	int l, l2, isodd, i, t, len_avg;

	len_avg = wt->wave->lpd_len;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30c:	61fb      	str	r3, [r7, #28]
	l2 = len_avg / 2;
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	2b00      	cmp	r3, #0
 800a312:	da00      	bge.n	800a316 <wtree_per+0x1e>
 800a314:	3301      	adds	r3, #1
 800a316:	105b      	asrs	r3, r3, #1
 800a318:	61bb      	str	r3, [r7, #24]
	isodd = N % 2;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	bfb8      	it	lt
 800a324:	425b      	neglt	r3, r3
 800a326:	617b      	str	r3, [r7, #20]

	for (i = 0; i < len_cA; ++i) {
 800a328:	2300      	movs	r3, #0
 800a32a:	623b      	str	r3, [r7, #32]
 800a32c:	e28e      	b.n	800a84c <wtree_per+0x554>
		t = 2 * i + l2;
 800a32e:	6a3b      	ldr	r3, [r7, #32]
 800a330:	005b      	lsls	r3, r3, #1
 800a332:	69ba      	ldr	r2, [r7, #24]
 800a334:	4413      	add	r3, r2
 800a336:	613b      	str	r3, [r7, #16]
		cA[i] = 0.0;
 800a338:	6a3b      	ldr	r3, [r7, #32]
 800a33a:	00db      	lsls	r3, r3, #3
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	18d1      	adds	r1, r2, r3
 800a340:	f04f 0200 	mov.w	r2, #0
 800a344:	f04f 0300 	mov.w	r3, #0
 800a348:	e9c1 2300 	strd	r2, r3, [r1]
		cD[i] = 0.0;
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	00db      	lsls	r3, r3, #3
 800a350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a352:	18d1      	adds	r1, r2, r3
 800a354:	f04f 0200 	mov.w	r2, #0
 800a358:	f04f 0300 	mov.w	r3, #0
 800a35c:	e9c1 2300 	strd	r2, r3, [r1]
		for (l = 0; l < len_avg; ++l) {
 800a360:	2300      	movs	r3, #0
 800a362:	627b      	str	r3, [r7, #36]	; 0x24
 800a364:	e26a      	b.n	800a83c <wtree_per+0x544>
			if ((t - l) >= l2 && (t - l) < N) {
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	429a      	cmp	r2, r3
 800a370:	dc46      	bgt.n	800a400 <wtree_per+0x108>
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	dd40      	ble.n	800a400 <wtree_per+0x108>
				cA[i] += wt->wave->lpd[l] * inp[t - l];
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	00db      	lsls	r3, r3, #3
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	4413      	add	r3, r2
 800a386:	ed93 6b00 	vldr	d6, [r3]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	00db      	lsls	r3, r3, #3
 800a394:	4413      	add	r3, r2
 800a396:	ed93 5b00 	vldr	d5, [r3]
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	00db      	lsls	r3, r3, #3
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	ed93 7b00 	vldr	d7, [r3]
 800a3aa:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a3ba:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l];
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	00db      	lsls	r3, r3, #3
 800a3c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3c4:	4413      	add	r3, r2
 800a3c6:	ed93 6b00 	vldr	d6, [r3]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	00db      	lsls	r3, r3, #3
 800a3d4:	4413      	add	r3, r2
 800a3d6:	ed93 5b00 	vldr	d5, [r3]
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	00db      	lsls	r3, r3, #3
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	ed93 7b00 	vldr	d7, [r3]
 800a3ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a3ee:	6a3b      	ldr	r3, [r7, #32]
 800a3f0:	00db      	lsls	r3, r3, #3
 800a3f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3f4:	4413      	add	r3, r2
 800a3f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a3fa:	ed83 7b00 	vstr	d7, [r3]
 800a3fe:	e21a      	b.n	800a836 <wtree_per+0x53e>
			}
			else if ((t - l) < l2 && (t - l) >= 0) {
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	1ad3      	subs	r3, r2, r3
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	429a      	cmp	r2, r3
 800a40a:	dd45      	ble.n	800a498 <wtree_per+0x1a0>
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	db40      	blt.n	800a498 <wtree_per+0x1a0>
				cA[i] += wt->wave->lpd[l] * inp[t - l];
 800a416:	6a3b      	ldr	r3, [r7, #32]
 800a418:	00db      	lsls	r3, r3, #3
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	4413      	add	r3, r2
 800a41e:	ed93 6b00 	vldr	d6, [r3]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	00db      	lsls	r3, r3, #3
 800a42c:	4413      	add	r3, r2
 800a42e:	ed93 5b00 	vldr	d5, [r3]
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	00db      	lsls	r3, r3, #3
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	4413      	add	r3, r2
 800a43e:	ed93 7b00 	vldr	d7, [r3]
 800a442:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	00db      	lsls	r3, r3, #3
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	4413      	add	r3, r2
 800a44e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a452:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l];
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	00db      	lsls	r3, r3, #3
 800a45a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a45c:	4413      	add	r3, r2
 800a45e:	ed93 6b00 	vldr	d6, [r3]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	00db      	lsls	r3, r3, #3
 800a46c:	4413      	add	r3, r2
 800a46e:	ed93 5b00 	vldr	d5, [r3]
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	00db      	lsls	r3, r3, #3
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	4413      	add	r3, r2
 800a47e:	ed93 7b00 	vldr	d7, [r3]
 800a482:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a486:	6a3b      	ldr	r3, [r7, #32]
 800a488:	00db      	lsls	r3, r3, #3
 800a48a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a48c:	4413      	add	r3, r2
 800a48e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a492:	ed83 7b00 	vstr	d7, [r3]
 800a496:	e1ce      	b.n	800a836 <wtree_per+0x53e>
			}
			else if ((t - l) < 0 && isodd == 0) {
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	da47      	bge.n	800a532 <wtree_per+0x23a>
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d144      	bne.n	800a532 <wtree_per+0x23a>
				cA[i] += wt->wave->lpd[l] * inp[t - l + N];
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	00db      	lsls	r3, r3, #3
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	ed93 6b00 	vldr	d6, [r3]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	00db      	lsls	r3, r3, #3
 800a4be:	4413      	add	r3, r2
 800a4c0:	ed93 5b00 	vldr	d5, [r3]
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c8:	1ad2      	subs	r2, r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	00db      	lsls	r3, r3, #3
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	ed93 7b00 	vldr	d7, [r3]
 800a4d8:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a4dc:	6a3b      	ldr	r3, [r7, #32]
 800a4de:	00db      	lsls	r3, r3, #3
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a4e8:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l + N];
 800a4ec:	6a3b      	ldr	r3, [r7, #32]
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4f2:	4413      	add	r3, r2
 800a4f4:	ed93 6b00 	vldr	d6, [r3]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	00db      	lsls	r3, r3, #3
 800a502:	4413      	add	r3, r2
 800a504:	ed93 5b00 	vldr	d5, [r3]
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50c:	1ad2      	subs	r2, r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4413      	add	r3, r2
 800a512:	00db      	lsls	r3, r3, #3
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	4413      	add	r3, r2
 800a518:	ed93 7b00 	vldr	d7, [r3]
 800a51c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a520:	6a3b      	ldr	r3, [r7, #32]
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a526:	4413      	add	r3, r2
 800a528:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a52c:	ed83 7b00 	vstr	d7, [r3]
 800a530:	e181      	b.n	800a836 <wtree_per+0x53e>
			}
			else if ((t - l) < 0 && isodd == 1) {
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f280 8094 	bge.w	800a666 <wtree_per+0x36e>
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b01      	cmp	r3, #1
 800a542:	f040 8090 	bne.w	800a666 <wtree_per+0x36e>
				if ((t - l) != -1) {
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a550:	d046      	beq.n	800a5e0 <wtree_per+0x2e8>
					cA[i] += wt->wave->lpd[l] * inp[t - l + N + 1];
 800a552:	6a3b      	ldr	r3, [r7, #32]
 800a554:	00db      	lsls	r3, r3, #3
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	4413      	add	r3, r2
 800a55a:	ed93 6b00 	vldr	d6, [r3]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	00db      	lsls	r3, r3, #3
 800a568:	4413      	add	r3, r2
 800a56a:	ed93 5b00 	vldr	d5, [r3]
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	1ad2      	subs	r2, r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4413      	add	r3, r2
 800a578:	3301      	adds	r3, #1
 800a57a:	00db      	lsls	r3, r3, #3
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	4413      	add	r3, r2
 800a580:	ed93 7b00 	vldr	d7, [r3]
 800a584:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	4413      	add	r3, r2
 800a590:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a594:	ed83 7b00 	vstr	d7, [r3]
					cD[i] += wt->wave->hpd[l] * inp[t - l + N + 1];
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	00db      	lsls	r3, r3, #3
 800a59c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a59e:	4413      	add	r3, r2
 800a5a0:	ed93 6b00 	vldr	d6, [r3]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ac:	00db      	lsls	r3, r3, #3
 800a5ae:	4413      	add	r3, r2
 800a5b0:	ed93 5b00 	vldr	d5, [r3]
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b8:	1ad2      	subs	r2, r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4413      	add	r3, r2
 800a5be:	3301      	adds	r3, #1
 800a5c0:	00db      	lsls	r3, r3, #3
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	ed93 7b00 	vldr	d7, [r3]
 800a5ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	00db      	lsls	r3, r3, #3
 800a5d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5d4:	4413      	add	r3, r2
 800a5d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a5da:	ed83 7b00 	vstr	d7, [r3]
				if ((t - l) != -1) {
 800a5de:	e12a      	b.n	800a836 <wtree_per+0x53e>
				}
				else {
					cA[i] += wt->wave->lpd[l] * inp[N - 1];
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	00db      	lsls	r3, r3, #3
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	ed93 6b00 	vldr	d6, [r3]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f4:	00db      	lsls	r3, r3, #3
 800a5f6:	4413      	add	r3, r2
 800a5f8:	ed93 5b00 	vldr	d5, [r3]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a602:	4413      	add	r3, r2
 800a604:	00db      	lsls	r3, r3, #3
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	4413      	add	r3, r2
 800a60a:	ed93 7b00 	vldr	d7, [r3]
 800a60e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	00db      	lsls	r3, r3, #3
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	4413      	add	r3, r2
 800a61a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a61e:	ed83 7b00 	vstr	d7, [r3]
					cD[i] += wt->wave->hpd[l] * inp[N - 1];
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	00db      	lsls	r3, r3, #3
 800a626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a628:	4413      	add	r3, r2
 800a62a:	ed93 6b00 	vldr	d6, [r3]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	4413      	add	r3, r2
 800a63a:	ed93 5b00 	vldr	d5, [r3]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a644:	4413      	add	r3, r2
 800a646:	00db      	lsls	r3, r3, #3
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	4413      	add	r3, r2
 800a64c:	ed93 7b00 	vldr	d7, [r3]
 800a650:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	00db      	lsls	r3, r3, #3
 800a658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a65a:	4413      	add	r3, r2
 800a65c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a660:	ed83 7b00 	vstr	d7, [r3]
				if ((t - l) != -1) {
 800a664:	e0e7      	b.n	800a836 <wtree_per+0x53e>
				}
			}
			else if ((t - l) >= N && isodd == 0) {
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	429a      	cmp	r2, r3
 800a670:	dc47      	bgt.n	800a702 <wtree_per+0x40a>
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d144      	bne.n	800a702 <wtree_per+0x40a>
				cA[i] += wt->wave->lpd[l] * inp[t - l - N];
 800a678:	6a3b      	ldr	r3, [r7, #32]
 800a67a:	00db      	lsls	r3, r3, #3
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	4413      	add	r3, r2
 800a680:	ed93 6b00 	vldr	d6, [r3]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68c:	00db      	lsls	r3, r3, #3
 800a68e:	4413      	add	r3, r2
 800a690:	ed93 5b00 	vldr	d5, [r3]
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	1ad2      	subs	r2, r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	00db      	lsls	r3, r3, #3
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	ed93 7b00 	vldr	d7, [r3]
 800a6a8:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a6ac:	6a3b      	ldr	r3, [r7, #32]
 800a6ae:	00db      	lsls	r3, r3, #3
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a6b8:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l - N];
 800a6bc:	6a3b      	ldr	r3, [r7, #32]
 800a6be:	00db      	lsls	r3, r3, #3
 800a6c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6c2:	4413      	add	r3, r2
 800a6c4:	ed93 6b00 	vldr	d6, [r3]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	4413      	add	r3, r2
 800a6d4:	ed93 5b00 	vldr	d5, [r3]
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6dc:	1ad2      	subs	r2, r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	00db      	lsls	r3, r3, #3
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	ed93 7b00 	vldr	d7, [r3]
 800a6ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a6f0:	6a3b      	ldr	r3, [r7, #32]
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6f6:	4413      	add	r3, r2
 800a6f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a6fc:	ed83 7b00 	vstr	d7, [r3]
 800a700:	e099      	b.n	800a836 <wtree_per+0x53e>
			}
			else if ((t - l) >= N && isodd == 1) {
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	f300 8093 	bgt.w	800a836 <wtree_per+0x53e>
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	2b01      	cmp	r3, #1
 800a714:	f040 808f 	bne.w	800a836 <wtree_per+0x53e>
				if (t - l != N) {
 800a718:	693a      	ldr	r2, [r7, #16]
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	429a      	cmp	r2, r3
 800a722:	d046      	beq.n	800a7b2 <wtree_per+0x4ba>
					cA[i] += wt->wave->lpd[l] * inp[t - l - (N + 1)];
 800a724:	6a3b      	ldr	r3, [r7, #32]
 800a726:	00db      	lsls	r3, r3, #3
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	4413      	add	r3, r2
 800a72c:	ed93 6b00 	vldr	d6, [r3]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	00db      	lsls	r3, r3, #3
 800a73a:	4413      	add	r3, r2
 800a73c:	ed93 5b00 	vldr	d5, [r3]
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	1ad2      	subs	r2, r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	3301      	adds	r3, #1
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	00db      	lsls	r3, r3, #3
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	4413      	add	r3, r2
 800a752:	ed93 7b00 	vldr	d7, [r3]
 800a756:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a75a:	6a3b      	ldr	r3, [r7, #32]
 800a75c:	00db      	lsls	r3, r3, #3
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	4413      	add	r3, r2
 800a762:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a766:	ed83 7b00 	vstr	d7, [r3]
					cD[i] += wt->wave->hpd[l] * inp[t - l - (N + 1)];
 800a76a:	6a3b      	ldr	r3, [r7, #32]
 800a76c:	00db      	lsls	r3, r3, #3
 800a76e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a770:	4413      	add	r3, r2
 800a772:	ed93 6b00 	vldr	d6, [r3]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	00db      	lsls	r3, r3, #3
 800a780:	4413      	add	r3, r2
 800a782:	ed93 5b00 	vldr	d5, [r3]
 800a786:	693a      	ldr	r2, [r7, #16]
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	1ad2      	subs	r2, r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3301      	adds	r3, #1
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	00db      	lsls	r3, r3, #3
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	4413      	add	r3, r2
 800a798:	ed93 7b00 	vldr	d7, [r3]
 800a79c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a7a0:	6a3b      	ldr	r3, [r7, #32]
 800a7a2:	00db      	lsls	r3, r3, #3
 800a7a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7a6:	4413      	add	r3, r2
 800a7a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a7ac:	ed83 7b00 	vstr	d7, [r3]
 800a7b0:	e041      	b.n	800a836 <wtree_per+0x53e>
				}
				else {
					cA[i] += wt->wave->lpd[l] * inp[N - 1];
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	00db      	lsls	r3, r3, #3
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	ed93 6b00 	vldr	d6, [r3]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c6:	00db      	lsls	r3, r3, #3
 800a7c8:	4413      	add	r3, r2
 800a7ca:	ed93 5b00 	vldr	d5, [r3]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a7d4:	4413      	add	r3, r2
 800a7d6:	00db      	lsls	r3, r3, #3
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	4413      	add	r3, r2
 800a7dc:	ed93 7b00 	vldr	d7, [r3]
 800a7e0:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a7f0:	ed83 7b00 	vstr	d7, [r3]
					cD[i] += wt->wave->hpd[l] * inp[N - 1];
 800a7f4:	6a3b      	ldr	r3, [r7, #32]
 800a7f6:	00db      	lsls	r3, r3, #3
 800a7f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7fa:	4413      	add	r3, r2
 800a7fc:	ed93 6b00 	vldr	d6, [r3]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	00db      	lsls	r3, r3, #3
 800a80a:	4413      	add	r3, r2
 800a80c:	ed93 5b00 	vldr	d5, [r3]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a816:	4413      	add	r3, r2
 800a818:	00db      	lsls	r3, r3, #3
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	4413      	add	r3, r2
 800a81e:	ed93 7b00 	vldr	d7, [r3]
 800a822:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	00db      	lsls	r3, r3, #3
 800a82a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a82c:	4413      	add	r3, r2
 800a82e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a832:	ed83 7b00 	vstr	d7, [r3]
		for (l = 0; l < len_avg; ++l) {
 800a836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a838:	3301      	adds	r3, #1
 800a83a:	627b      	str	r3, [r7, #36]	; 0x24
 800a83c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	429a      	cmp	r2, r3
 800a842:	f6ff ad90 	blt.w	800a366 <wtree_per+0x6e>
	for (i = 0; i < len_cA; ++i) {
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	3301      	adds	r3, #1
 800a84a:	623b      	str	r3, [r7, #32]
 800a84c:	6a3a      	ldr	r2, [r7, #32]
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	429a      	cmp	r2, r3
 800a852:	f6ff ad6c 	blt.w	800a32e <wtree_per+0x36>
		}
	}



}
 800a856:	bf00      	nop
 800a858:	bf00      	nop
 800a85a:	372c      	adds	r7, #44	; 0x2c
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <wtree_sym>:
static void dwt_sym(wt_object wt, double *inp, int N, double *cA, int len_cA, double *cD) {

	dwt_sym_stride(inp,N,wt->wave->lpd,wt->wave->hpd,wt->wave->lpd_len,cA,len_cA,cD,1,1);
}

static void wtree_sym(wtree_object wt, double *inp, int N, double *cA, int len_cA, double *cD) {
 800a864:	b480      	push	{r7}
 800a866:	b089      	sub	sp, #36	; 0x24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
 800a870:	603b      	str	r3, [r7, #0]
	int i, l, t, len_avg;

	len_avg = wt->wave->lpd_len;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a878:	617b      	str	r3, [r7, #20]

	for (i = 0; i < len_cA; ++i) {
 800a87a:	2300      	movs	r3, #0
 800a87c:	61fb      	str	r3, [r7, #28]
 800a87e:	e113      	b.n	800aaa8 <wtree_sym+0x244>
		t = 2 * i + 1;
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	005b      	lsls	r3, r3, #1
 800a884:	3301      	adds	r3, #1
 800a886:	613b      	str	r3, [r7, #16]
		cA[i] = 0.0;
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	00db      	lsls	r3, r3, #3
 800a88c:	683a      	ldr	r2, [r7, #0]
 800a88e:	18d1      	adds	r1, r2, r3
 800a890:	f04f 0200 	mov.w	r2, #0
 800a894:	f04f 0300 	mov.w	r3, #0
 800a898:	e9c1 2300 	strd	r2, r3, [r1]
		cD[i] = 0.0;
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	00db      	lsls	r3, r3, #3
 800a8a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8a2:	18d1      	adds	r1, r2, r3
 800a8a4:	f04f 0200 	mov.w	r2, #0
 800a8a8:	f04f 0300 	mov.w	r3, #0
 800a8ac:	e9c1 2300 	strd	r2, r3, [r1]
		for (l = 0; l < len_avg; ++l) {
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	61bb      	str	r3, [r7, #24]
 800a8b4:	e0f0      	b.n	800aa98 <wtree_sym+0x234>
			if ((t - l) >= 0 && (t - l) < N) {
 800a8b6:	693a      	ldr	r2, [r7, #16]
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	db46      	blt.n	800a94e <wtree_sym+0xea>
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	dd40      	ble.n	800a94e <wtree_sym+0xea>
				cA[i] += wt->wave->lpd[l] * inp[t - l];
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	00db      	lsls	r3, r3, #3
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	ed93 6b00 	vldr	d6, [r3]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	00db      	lsls	r3, r3, #3
 800a8e2:	4413      	add	r3, r2
 800a8e4:	ed93 5b00 	vldr	d5, [r3]
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	69bb      	ldr	r3, [r7, #24]
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	00db      	lsls	r3, r3, #3
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	ed93 7b00 	vldr	d7, [r3]
 800a8f8:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	4413      	add	r3, r2
 800a904:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a908:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[t - l];
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	00db      	lsls	r3, r3, #3
 800a910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a912:	4413      	add	r3, r2
 800a914:	ed93 6b00 	vldr	d6, [r3]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	00db      	lsls	r3, r3, #3
 800a922:	4413      	add	r3, r2
 800a924:	ed93 5b00 	vldr	d5, [r3]
 800a928:	693a      	ldr	r2, [r7, #16]
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	00db      	lsls	r3, r3, #3
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	4413      	add	r3, r2
 800a934:	ed93 7b00 	vldr	d7, [r3]
 800a938:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a942:	4413      	add	r3, r2
 800a944:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a948:	ed83 7b00 	vstr	d7, [r3]
 800a94c:	e0a1      	b.n	800aa92 <wtree_sym+0x22e>
			}
			else if ((t - l) < 0) {
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	da48      	bge.n	800a9ea <wtree_sym+0x186>
				cA[i] += wt->wave->lpd[l] * inp[-t + l - 1];
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	00db      	lsls	r3, r3, #3
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	4413      	add	r3, r2
 800a960:	ed93 6b00 	vldr	d6, [r3]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	00db      	lsls	r3, r3, #3
 800a96e:	4413      	add	r3, r2
 800a970:	ed93 5b00 	vldr	d5, [r3]
 800a974:	69ba      	ldr	r2, [r7, #24]
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	461a      	mov	r2, r3
 800a97c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a980:	4413      	add	r3, r2
 800a982:	00db      	lsls	r3, r3, #3
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	4413      	add	r3, r2
 800a988:	ed93 7b00 	vldr	d7, [r3]
 800a98c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	4413      	add	r3, r2
 800a998:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a99c:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[-t + l - 1];
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9a6:	4413      	add	r3, r2
 800a9a8:	ed93 6b00 	vldr	d6, [r3]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	00db      	lsls	r3, r3, #3
 800a9b6:	4413      	add	r3, r2
 800a9b8:	ed93 5b00 	vldr	d5, [r3]
 800a9bc:	69ba      	ldr	r2, [r7, #24]
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a9c8:	4413      	add	r3, r2
 800a9ca:	00db      	lsls	r3, r3, #3
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	ed93 7b00 	vldr	d7, [r3]
 800a9d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	00db      	lsls	r3, r3, #3
 800a9dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9de:	4413      	add	r3, r2
 800a9e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a9e4:	ed83 7b00 	vstr	d7, [r3]
 800a9e8:	e053      	b.n	800aa92 <wtree_sym+0x22e>
			}
			else if ((t - l) >= N) {
 800a9ea:	693a      	ldr	r2, [r7, #16]
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	dc4d      	bgt.n	800aa92 <wtree_sym+0x22e>
				cA[i] += wt->wave->lpd[l] * inp[2 * N - t + l - 1];
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	00db      	lsls	r3, r3, #3
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	ed93 6b00 	vldr	d6, [r3]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	00db      	lsls	r3, r3, #3
 800aa0c:	4413      	add	r3, r2
 800aa0e:	ed93 5b00 	vldr	d5, [r3]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	005a      	lsls	r2, r3, #1
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	1ad2      	subs	r2, r2, r3
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800aa24:	4413      	add	r3, r2
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	ed93 7b00 	vldr	d7, [r3]
 800aa30:	ee25 7b07 	vmul.f64	d7, d5, d7
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800aa40:	ed83 7b00 	vstr	d7, [r3]
				cD[i] += wt->wave->hpd[l] * inp[2 * N - t + l - 1];
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	00db      	lsls	r3, r3, #3
 800aa48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa4a:	4413      	add	r3, r2
 800aa4c:	ed93 6b00 	vldr	d6, [r3]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	00db      	lsls	r3, r3, #3
 800aa5a:	4413      	add	r3, r2
 800aa5c:	ed93 5b00 	vldr	d5, [r3]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	005a      	lsls	r2, r3, #1
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	1ad2      	subs	r2, r2, r3
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800aa72:	4413      	add	r3, r2
 800aa74:	00db      	lsls	r3, r3, #3
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	4413      	add	r3, r2
 800aa7a:	ed93 7b00 	vldr	d7, [r3]
 800aa7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa88:	4413      	add	r3, r2
 800aa8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800aa8e:	ed83 7b00 	vstr	d7, [r3]
		for (l = 0; l < len_avg; ++l) {
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	3301      	adds	r3, #1
 800aa96:	61bb      	str	r3, [r7, #24]
 800aa98:	69ba      	ldr	r2, [r7, #24]
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	f6ff af0a 	blt.w	800a8b6 <wtree_sym+0x52>
	for (i = 0; i < len_cA; ++i) {
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	61fb      	str	r3, [r7, #28]
 800aaa8:	69fa      	ldr	r2, [r7, #28]
 800aaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaac:	429a      	cmp	r2, r3
 800aaae:	f6ff aee7 	blt.w	800a880 <wtree_sym+0x1c>

		}
	}


}
 800aab2:	bf00      	nop
 800aab4:	bf00      	nop
 800aab6:	3724      	adds	r7, #36	; 0x24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <wtree>:
	}
	
	return mra;
}

void wtree(wtree_object wt,const double *inp) {
 800aac0:	b590      	push	{r4, r7, lr}
 800aac2:	b095      	sub	sp, #84	; 0x54
 800aac4:	af02      	add	r7, sp, #8
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
	int i,J,temp_len,iter,N,lp,p2,k,N2,Np;
	int len_cA,t,t2,it1;
	double *orig;

	temp_len = wt->siglength;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	643b      	str	r3, [r7, #64]	; 0x40
	J = wt->J;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a1b      	ldr	r3, [r3, #32]
 800aad4:	61bb      	str	r3, [r7, #24]
	wt->length[J + 1] = temp_len;
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	1c5a      	adds	r2, r3, #1
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	3212      	adds	r2, #18
 800aade:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	wt->outlength = 0;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	619a      	str	r2, [r3, #24]
	wt->zpad = 0;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	645a      	str	r2, [r3, #68]	; 0x44
	orig = (double*)malloc(sizeof(double)* temp_len);
 800aaf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f000 fb9b 	bl	800b230 <malloc>
 800aafa:	4603      	mov	r3, r0
 800aafc:	617b      	str	r3, [r7, #20]
		wt->zpad = 1;
		temp_len++;
		orig = (double*)malloc(sizeof(double)* temp_len);
	}
	*/
	for (i = 0; i < wt->siglength; ++i) {
 800aafe:	2300      	movs	r3, #0
 800ab00:	647b      	str	r3, [r7, #68]	; 0x44
 800ab02:	e00e      	b.n	800ab22 <wtree+0x62>
		orig[i] = inp[i];
 800ab04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab06:	00db      	lsls	r3, r3, #3
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab0e:	00d2      	lsls	r2, r2, #3
 800ab10:	6979      	ldr	r1, [r7, #20]
 800ab12:	4411      	add	r1, r2
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < wt->siglength; ++i) {
 800ab1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab1e:	3301      	adds	r3, #1
 800ab20:	647b      	str	r3, [r7, #68]	; 0x44
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	dbeb      	blt.n	800ab04 <wtree+0x44>
	}

	if (wt->zpad == 1) {
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d110      	bne.n	800ab56 <wtree+0x96>
		orig[temp_len - 1] = orig[temp_len - 2];
 800ab34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab36:	4ba0      	ldr	r3, [pc, #640]	; (800adb8 <wtree+0x2f8>)
 800ab38:	4413      	add	r3, r2
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	441a      	add	r2, r3
 800ab40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab42:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ab46:	440b      	add	r3, r1
 800ab48:	00db      	lsls	r3, r3, #3
 800ab4a:	6979      	ldr	r1, [r7, #20]
 800ab4c:	4419      	add	r1, r3
 800ab4e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ab52:	e9c1 2300 	strd	r2, r3, [r1]
	}

	N = temp_len;
 800ab56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab58:	63bb      	str	r3, [r7, #56]	; 0x38
	lp = wt->wave->lpd_len;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab60:	613b      	str	r3, [r7, #16]
        p2 = 1;
 800ab62:	2301      	movs	r3, #1
 800ab64:	637b      	str	r3, [r7, #52]	; 0x34

	if (!strcmp(wt->ext,"per")) {
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	332c      	adds	r3, #44	; 0x2c
 800ab6a:	4994      	ldr	r1, [pc, #592]	; (800adbc <wtree+0x2fc>)
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7f5 fb67 	bl	8000240 <strcmp>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f040 80b7 	bne.w	800ace8 <wtree+0x228>
		i = J;
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	647b      	str	r3, [r7, #68]	; 0x44
                p2 = 2;
 800ab7e:	2302      	movs	r3, #2
 800ab80:	637b      	str	r3, [r7, #52]	; 0x34
		while (i > 0) {
 800ab82:	e02c      	b.n	800abde <wtree+0x11e>
			N = (int)ceil((double)N / 2.0);
 800ab84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ab8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ab92:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800ab96:	eeb0 0b46 	vmov.f64	d0, d6
 800ab9a:	f006 f86d 	bl	8010c78 <ceil>
 800ab9e:	eeb0 7b40 	vmov.f64	d7, d0
 800aba2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800aba6:	ee17 3a90 	vmov	r3, s15
 800abaa:	63bb      	str	r3, [r7, #56]	; 0x38
			wt->length[i] = N;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abb0:	3212      	adds	r2, #18
 800abb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800abb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			wt->outlength += p2 * (wt->length[i]);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	699a      	ldr	r2, [r3, #24]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abc0:	3112      	adds	r1, #18
 800abc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800abc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800abc8:	fb01 f303 	mul.w	r3, r1, r3
 800abcc:	441a      	add	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	619a      	str	r2, [r3, #24]
			i--;
 800abd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abd4:	3b01      	subs	r3, #1
 800abd6:	647b      	str	r3, [r7, #68]	; 0x44
                        p2 *= 2;
 800abd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abda:	005b      	lsls	r3, r3, #1
 800abdc:	637b      	str	r3, [r7, #52]	; 0x34
		while (i > 0) {
 800abde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	dccf      	bgt.n	800ab84 <wtree+0xc4>
		}
		wt->length[0] = wt->length[1];
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	649a      	str	r2, [r3, #72]	; 0x48

		N2 = N = wt->outlength;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	63bb      	str	r3, [r7, #56]	; 0x38
 800abf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf4:	62fb      	str	r3, [r7, #44]	; 0x2c
                p2 = 1;
 800abf6:	2301      	movs	r3, #1
 800abf8:	637b      	str	r3, [r7, #52]	; 0x34
		for (iter = 0; iter < J; ++iter) {
 800abfa:	2300      	movs	r3, #0
 800abfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abfe:	e06e      	b.n	800acde <wtree+0x21e>
			len_cA = wt->length[J - iter];
 800ac00:	69ba      	ldr	r2, [r7, #24]
 800ac02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac04:	1ad2      	subs	r2, r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	3212      	adds	r2, #18
 800ac0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac0e:	60fb      	str	r3, [r7, #12]
                        N2 -= 2 * p2 * len_cA;
 800ac10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	fb02 f303 	mul.w	r3, r2, r3
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        N = N2;
 800ac20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac22:	63bb      	str	r3, [r7, #56]	; 0x38
                        for(k = 0; k < p2;++k) {
 800ac24:	2300      	movs	r3, #0
 800ac26:	633b      	str	r3, [r7, #48]	; 0x30
 800ac28:	e045      	b.n	800acb6 <wtree+0x1f6>
                            if (iter == 0) {
 800ac2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d117      	bne.n	800ac60 <wtree+0x1a0>
                               wtree_per(wt, orig, temp_len, wt->params + N, len_cA, wt->params + N + len_cA);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800ac36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac38:	00db      	lsls	r3, r3, #3
 800ac3a:	18d0      	adds	r0, r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800ac42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	440b      	add	r3, r1
 800ac48:	00db      	lsls	r3, r3, #3
 800ac4a:	4413      	add	r3, r2
 800ac4c:	9301      	str	r3, [sp, #4]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	4603      	mov	r3, r0
 800ac54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac56:	6979      	ldr	r1, [r7, #20]
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7ff fb4d 	bl	800a2f8 <wtree_per>
 800ac5e:	e022      	b.n	800aca6 <wtree+0x1e6>
                            } else {
                                wtree_per(wt, wt->params + Np + k * temp_len, temp_len, wt->params + N, len_cA, wt->params + N + len_cA);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800ac66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac6a:	fb01 f303 	mul.w	r3, r1, r3
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	440b      	add	r3, r1
 800ac74:	00db      	lsls	r3, r3, #3
 800ac76:	18d0      	adds	r0, r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac80:	00db      	lsls	r3, r3, #3
 800ac82:	18d4      	adds	r4, r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800ac8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	440b      	add	r3, r1
 800ac90:	00db      	lsls	r3, r3, #3
 800ac92:	4413      	add	r3, r2
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	4623      	mov	r3, r4
 800ac9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac9e:	4601      	mov	r1, r0
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f7ff fb29 	bl	800a2f8 <wtree_per>
                            }
                            N += 2 * len_cA;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	005b      	lsls	r3, r3, #1
 800acaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acac:	4413      	add	r3, r2
 800acae:	63bb      	str	r3, [r7, #56]	; 0x38
                        for(k = 0; k < p2;++k) {
 800acb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb2:	3301      	adds	r3, #1
 800acb4:	633b      	str	r3, [r7, #48]	; 0x30
 800acb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acba:	429a      	cmp	r2, r3
 800acbc:	dbb5      	blt.n	800ac2a <wtree+0x16a>
                        }

			temp_len = wt->length[J - iter];
 800acbe:	69ba      	ldr	r2, [r7, #24]
 800acc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc2:	1ad2      	subs	r2, r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	3212      	adds	r2, #18
 800acc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800accc:	643b      	str	r3, [r7, #64]	; 0x40
			p2 = 2 * p2;
 800acce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	637b      	str	r3, [r7, #52]	; 0x34
            Np = N2;
 800acd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd6:	62bb      	str	r3, [r7, #40]	; 0x28
		for (iter = 0; iter < J; ++iter) {
 800acd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acda:	3301      	adds	r3, #1
 800acdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	db8c      	blt.n	800ac00 <wtree+0x140>
 800ace6:	e0d3      	b.n	800ae90 <wtree+0x3d0>
		}
	}
	else if (!strcmp(wt->ext,"sym")) {
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	332c      	adds	r3, #44	; 0x2c
 800acec:	4934      	ldr	r1, [pc, #208]	; (800adc0 <wtree+0x300>)
 800acee:	4618      	mov	r0, r3
 800acf0:	f7f5 faa6 	bl	8000240 <strcmp>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f040 80c3 	bne.w	800ae82 <wtree+0x3c2>
		//printf(" \r\n YES %s  \r\n", wt->ext);
		i = J;
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	647b      	str	r3, [r7, #68]	; 0x44
                p2 = 2;
 800ad00:	2302      	movs	r3, #2
 800ad02:	637b      	str	r3, [r7, #52]	; 0x34
		while (i > 0) {
 800ad04:	e031      	b.n	800ad6a <wtree+0x2aa>
			N = N + lp - 2;
 800ad06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	3b02      	subs	r3, #2
 800ad0e:	63bb      	str	r3, [r7, #56]	; 0x38
			N = (int) ceil((double)N / 2.0);
 800ad10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ad1a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ad1e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800ad22:	eeb0 0b46 	vmov.f64	d0, d6
 800ad26:	f005 ffa7 	bl	8010c78 <ceil>
 800ad2a:	eeb0 7b40 	vmov.f64	d7, d0
 800ad2e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ad32:	ee17 3a90 	vmov	r3, s15
 800ad36:	63bb      	str	r3, [r7, #56]	; 0x38
			wt->length[i] = N;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad3c:	3212      	adds	r2, #18
 800ad3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			wt->outlength += p2 * (wt->length[i]);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	699a      	ldr	r2, [r3, #24]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad4c:	3112      	adds	r1, #18
 800ad4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad54:	fb01 f303 	mul.w	r3, r1, r3
 800ad58:	441a      	add	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	619a      	str	r2, [r3, #24]
			i--;
 800ad5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad60:	3b01      	subs	r3, #1
 800ad62:	647b      	str	r3, [r7, #68]	; 0x44
                        p2 *= 2;
 800ad64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad66:	005b      	lsls	r3, r3, #1
 800ad68:	637b      	str	r3, [r7, #52]	; 0x34
		while (i > 0) {
 800ad6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	dcca      	bgt.n	800ad06 <wtree+0x246>
		}
		wt->length[0] = wt->length[1];
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	649a      	str	r2, [r3, #72]	; 0x48

		N2 = N = wt->outlength;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad80:	62fb      	str	r3, [r7, #44]	; 0x2c
                p2 = 1;
 800ad82:	2301      	movs	r3, #1
 800ad84:	637b      	str	r3, [r7, #52]	; 0x34

                for (iter = 0; iter < J; ++iter) {
 800ad86:	2300      	movs	r3, #0
 800ad88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad8a:	e075      	b.n	800ae78 <wtree+0x3b8>
			len_cA = wt->length[J - iter];
 800ad8c:	69ba      	ldr	r2, [r7, #24]
 800ad8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad90:	1ad2      	subs	r2, r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3212      	adds	r2, #18
 800ad96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9a:	60fb      	str	r3, [r7, #12]
                        N2 -= 2 * p2 * len_cA;
 800ad9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	fb02 f303 	mul.w	r3, r2, r3
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	62fb      	str	r3, [r7, #44]	; 0x2c
                        N = N2;
 800adac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adae:	63bb      	str	r3, [r7, #56]	; 0x38
                        for(k = 0; k < p2;++k) {
 800adb0:	2300      	movs	r3, #0
 800adb2:	633b      	str	r3, [r7, #48]	; 0x30
 800adb4:	e04c      	b.n	800ae50 <wtree+0x390>
 800adb6:	bf00      	nop
 800adb8:	1ffffffe 	.word	0x1ffffffe
 800adbc:	0801151c 	.word	0x0801151c
 800adc0:	080114cc 	.word	0x080114cc
                            if (iter == 0) {
 800adc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d117      	bne.n	800adfa <wtree+0x33a>
                                wtree_sym(wt, orig, temp_len, wt->params + N, len_cA, wt->params + N + len_cA);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	18d0      	adds	r0, r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800addc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	440b      	add	r3, r1
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	4413      	add	r3, r2
 800ade6:	9301      	str	r3, [sp, #4]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	9300      	str	r3, [sp, #0]
 800adec:	4603      	mov	r3, r0
 800adee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adf0:	6979      	ldr	r1, [r7, #20]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f7ff fd36 	bl	800a864 <wtree_sym>
 800adf8:	e022      	b.n	800ae40 <wtree+0x380>
                            } else {
                                wtree_sym(wt, wt->params + Np + k * temp_len, temp_len, wt->params + N, len_cA, wt->params + N + len_cA);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae04:	fb01 f303 	mul.w	r3, r1, r3
 800ae08:	4619      	mov	r1, r3
 800ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0c:	440b      	add	r3, r1
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	18d0      	adds	r0, r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	18d4      	adds	r4, r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 800ae24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	440b      	add	r3, r1
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	4413      	add	r3, r2
 800ae2e:	9301      	str	r3, [sp, #4]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	4623      	mov	r3, r4
 800ae36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae38:	4601      	mov	r1, r0
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7ff fd12 	bl	800a864 <wtree_sym>
                            }
                            N += 2 * len_cA;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	005b      	lsls	r3, r3, #1
 800ae44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae46:	4413      	add	r3, r2
 800ae48:	63bb      	str	r3, [r7, #56]	; 0x38
                        for(k = 0; k < p2;++k) {
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	633b      	str	r3, [r7, #48]	; 0x30
 800ae50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae54:	429a      	cmp	r2, r3
 800ae56:	dbb5      	blt.n	800adc4 <wtree+0x304>
                        }

			temp_len = wt->length[J - iter];
 800ae58:	69ba      	ldr	r2, [r7, #24]
 800ae5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5c:	1ad2      	subs	r2, r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	3212      	adds	r2, #18
 800ae62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae66:	643b      	str	r3, [r7, #64]	; 0x40
			p2 = 2 * p2;
 800ae68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6a:	005b      	lsls	r3, r3, #1
 800ae6c:	637b      	str	r3, [r7, #52]	; 0x34
            Np = N2;
 800ae6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae70:	62bb      	str	r3, [r7, #40]	; 0x28
                for (iter = 0; iter < J; ++iter) {
 800ae72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae74:	3301      	adds	r3, #1
 800ae76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	db85      	blt.n	800ad8c <wtree+0x2cc>
 800ae80:	e006      	b.n	800ae90 <wtree+0x3d0>
		}

	}
	else {
		printf("Signal extension can be either per or sym");
 800ae82:	483d      	ldr	r0, [pc, #244]	; (800af78 <wtree+0x4b8>)
 800ae84:	f001 fa20 	bl	800c2c8 <iprintf>
		exit(-1);
 800ae88:	f04f 30ff 	mov.w	r0, #4294967295
 800ae8c:	f000 f9be 	bl	800b20c <exit>
	}

	J = wt->J;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	61bb      	str	r3, [r7, #24]
	t2 = wt->outlength - 2 * wt->length[J];
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	699a      	ldr	r2, [r3, #24]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	69b9      	ldr	r1, [r7, #24]
 800ae9e:	3112      	adds	r1, #18
 800aea0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aea4:	005b      	lsls	r3, r3, #1
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	623b      	str	r3, [r7, #32]
	p2 = 2;
 800aeaa:	2302      	movs	r3, #2
 800aeac:	637b      	str	r3, [r7, #52]	; 0x34
	it1 = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < J; ++i) {
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	647b      	str	r3, [r7, #68]	; 0x44
 800aeb6:	e034      	b.n	800af22 <wtree+0x462>
		t = t2;
 800aeb8:	6a3b      	ldr	r3, [r7, #32]
 800aeba:	627b      	str	r3, [r7, #36]	; 0x24
		for (k = 0; k < p2; ++k) {
 800aebc:	2300      	movs	r3, #0
 800aebe:	633b      	str	r3, [r7, #48]	; 0x30
 800aec0:	e017      	b.n	800aef2 <wtree+0x432>
			wt->nodelength[it1] = t;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aed0:	601a      	str	r2, [r3, #0]
			it1++;
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	3301      	adds	r3, #1
 800aed6:	61fb      	str	r3, [r7, #28]
			t += wt->length[J - i];
 800aed8:	69ba      	ldr	r2, [r7, #24]
 800aeda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aedc:	1ad2      	subs	r2, r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3212      	adds	r2, #18
 800aee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aee8:	4413      	add	r3, r2
 800aeea:	627b      	str	r3, [r7, #36]	; 0x24
		for (k = 0; k < p2; ++k) {
 800aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeee:	3301      	adds	r3, #1
 800aef0:	633b      	str	r3, [r7, #48]	; 0x30
 800aef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef6:	429a      	cmp	r2, r3
 800aef8:	dbe3      	blt.n	800aec2 <wtree+0x402>
		}
		p2 *= 2;
 800aefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefc:	005b      	lsls	r3, r3, #1
 800aefe:	637b      	str	r3, [r7, #52]	; 0x34
		t2 = t2 - p2 * wt->length[J - i - 1];
 800af00:	69ba      	ldr	r2, [r7, #24]
 800af02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	1e5a      	subs	r2, r3, #1
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3212      	adds	r2, #18
 800af0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af12:	fb02 f303 	mul.w	r3, r2, r3
 800af16:	6a3a      	ldr	r2, [r7, #32]
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	623b      	str	r3, [r7, #32]
	for (i = 0; i < J; ++i) {
 800af1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af1e:	3301      	adds	r3, #1
 800af20:	647b      	str	r3, [r7, #68]	; 0x44
 800af22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	429a      	cmp	r2, r3
 800af28:	dbc6      	blt.n	800aeb8 <wtree+0x3f8>
	}

	wt->coeflength[0] = wt->siglength;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	6952      	ldr	r2, [r2, #20]
 800af34:	601a      	str	r2, [r3, #0]

	for (i = 1; i < J + 1; ++i) {
 800af36:	2301      	movs	r3, #1
 800af38:	647b      	str	r3, [r7, #68]	; 0x44
 800af3a:	e011      	b.n	800af60 <wtree+0x4a0>
		wt->coeflength[i] = wt->length[J - i + 1];
 800af3c:	69ba      	ldr	r2, [r7, #24]
 800af3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	1c59      	adds	r1, r3, #1
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 800af4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4413      	add	r3, r2
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	3112      	adds	r1, #18
 800af54:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800af58:	601a      	str	r2, [r3, #0]
	for (i = 1; i < J + 1; ++i) {
 800af5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af5c:	3301      	adds	r3, #1
 800af5e:	647b      	str	r3, [r7, #68]	; 0x44
 800af60:	69ba      	ldr	r2, [r7, #24]
 800af62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af64:	429a      	cmp	r2, r3
 800af66:	dae9      	bge.n	800af3c <wtree+0x47c>
	}

	free(orig);
 800af68:	6978      	ldr	r0, [r7, #20]
 800af6a:	f000 f969 	bl	800b240 <free>
}
 800af6e:	bf00      	nop
 800af70:	374c      	adds	r7, #76	; 0x4c
 800af72:	46bd      	mov	sp, r7
 800af74:	bd90      	pop	{r4, r7, pc}
 800af76:	bf00      	nop
 800af78:	0801173c 	.word	0x0801173c

0800af7c <getWTREENodelength>:
	free(orig);
	free(tree);
	free(nodelength);
}

int getWTREENodelength(wtree_object wt, int X) {
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
	int N;
	N = -1;
 800af86:	f04f 33ff 	mov.w	r3, #4294967295
 800af8a:	60fb      	str	r3, [r7, #12]
	/*
	X - Level. All Nodes at any level have the same length
	*/
	if (X <= 0 || X > wt->J) {
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	dd04      	ble.n	800af9c <getWTREENodelength+0x20>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	429a      	cmp	r2, r3
 800af9a:	dd09      	ble.n	800afb0 <getWTREENodelength+0x34>
		printf("X co-ordinate must be >= 1 and <= %d", wt->J);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a1b      	ldr	r3, [r3, #32]
 800afa0:	4619      	mov	r1, r3
 800afa2:	480b      	ldr	r0, [pc, #44]	; (800afd0 <getWTREENodelength+0x54>)
 800afa4:	f001 f990 	bl	800c2c8 <iprintf>
		exit(-1);
 800afa8:	f04f 30ff 	mov.w	r0, #4294967295
 800afac:	f000 f92e 	bl	800b20c <exit>
	}

	N = wt->length[wt->J -X + 1];
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a1a      	ldr	r2, [r3, #32]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	1c5a      	adds	r2, r3, #1
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	3212      	adds	r2, #18
 800afbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc2:	60fb      	str	r3, [r7, #12]

	return N;
 800afc4:	68fb      	ldr	r3, [r7, #12]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	08011774 	.word	0x08011774

0800afd4 <getWTREECoeffs>:
	N = wt->length[wt->J - X + 1];

	return N;
}

void getWTREECoeffs(wtree_object wt, int X,int Y,double *coeffs,int N) {
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	603b      	str	r3, [r7, #0]
	int ymax,i,t,t2;

	if (X <= 0 || X > wt->J) {
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	dd04      	ble.n	800aff2 <getWTREECoeffs+0x1e>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6a1b      	ldr	r3, [r3, #32]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	429a      	cmp	r2, r3
 800aff0:	dd09      	ble.n	800b006 <getWTREECoeffs+0x32>
		printf("X co-ordinate must be >= 1 and <= %d", wt->J);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6a1b      	ldr	r3, [r3, #32]
 800aff6:	4619      	mov	r1, r3
 800aff8:	4837      	ldr	r0, [pc, #220]	; (800b0d8 <getWTREECoeffs+0x104>)
 800affa:	f001 f965 	bl	800c2c8 <iprintf>
		exit(-1);
 800affe:	f04f 30ff 	mov.w	r0, #4294967295
 800b002:	f000 f903 	bl	800b20c <exit>
	}
	ymax = 1;
 800b006:	2301      	movs	r3, #1
 800b008:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < X; ++i) {
 800b00a:	2300      	movs	r3, #0
 800b00c:	61bb      	str	r3, [r7, #24]
 800b00e:	e005      	b.n	800b01c <getWTREECoeffs+0x48>
		ymax *= 2;
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	005b      	lsls	r3, r3, #1
 800b014:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < X; ++i) {
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	3301      	adds	r3, #1
 800b01a:	61bb      	str	r3, [r7, #24]
 800b01c:	69ba      	ldr	r2, [r7, #24]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	429a      	cmp	r2, r3
 800b022:	dbf5      	blt.n	800b010 <getWTREECoeffs+0x3c>
	}

	ymax -= 1;
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	3b01      	subs	r3, #1
 800b028:	61fb      	str	r3, [r7, #28]

	if (Y < 0 ||Y > ymax) {
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	db03      	blt.n	800b038 <getWTREECoeffs+0x64>
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	429a      	cmp	r2, r3
 800b036:	dd07      	ble.n	800b048 <getWTREECoeffs+0x74>
		printf("Y co-ordinate must be >= 0 and <= %d", ymax);
 800b038:	69f9      	ldr	r1, [r7, #28]
 800b03a:	4828      	ldr	r0, [pc, #160]	; (800b0dc <getWTREECoeffs+0x108>)
 800b03c:	f001 f944 	bl	800c2c8 <iprintf>
		exit(-1);
 800b040:	f04f 30ff 	mov.w	r0, #4294967295
 800b044:	f000 f8e2 	bl	800b20c <exit>
	}

	if (X == 1) {
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d102      	bne.n	800b054 <getWTREECoeffs+0x80>
		t = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	617b      	str	r3, [r7, #20]
 800b052:	e015      	b.n	800b080 <getWTREECoeffs+0xac>
	}
	else {
		t = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	617b      	str	r3, [r7, #20]
		t2 = 1;
 800b058:	2301      	movs	r3, #1
 800b05a:	613b      	str	r3, [r7, #16]
		for (i = 0; i < X - 1; ++i) {
 800b05c:	2300      	movs	r3, #0
 800b05e:	61bb      	str	r3, [r7, #24]
 800b060:	e009      	b.n	800b076 <getWTREECoeffs+0xa2>
			t2 *= 2;
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	613b      	str	r3, [r7, #16]
			t += t2;
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	4413      	add	r3, r2
 800b06e:	617b      	str	r3, [r7, #20]
		for (i = 0; i < X - 1; ++i) {
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	3301      	adds	r3, #1
 800b074:	61bb      	str	r3, [r7, #24]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	3b01      	subs	r3, #1
 800b07a:	69ba      	ldr	r2, [r7, #24]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	dbf0      	blt.n	800b062 <getWTREECoeffs+0x8e>
		}
	}

	t += Y;
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4413      	add	r3, r2
 800b086:	617b      	str	r3, [r7, #20]
	t2 = wt->nodelength[t];
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	613b      	str	r3, [r7, #16]
	for (i = 0; i < N; ++i) {
 800b098:	2300      	movs	r3, #0
 800b09a:	61bb      	str	r3, [r7, #24]
 800b09c:	e012      	b.n	800b0c4 <getWTREECoeffs+0xf0>
		coeffs[i] = wt->output[t2+i];
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800b0a4:	6939      	ldr	r1, [r7, #16]
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	440b      	add	r3, r1
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	4413      	add	r3, r2
 800b0ae:	69ba      	ldr	r2, [r7, #24]
 800b0b0:	00d2      	lsls	r2, r2, #3
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	4411      	add	r1, r2
 800b0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ba:	e9c1 2300 	strd	r2, r3, [r1]
	for (i = 0; i < N; ++i) {
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	61bb      	str	r3, [r7, #24]
 800b0c4:	69ba      	ldr	r2, [r7, #24]
 800b0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	dbe8      	blt.n	800b09e <getWTREECoeffs+0xca>
	}

}
 800b0cc:	bf00      	nop
 800b0ce:	bf00      	nop
 800b0d0:	3720      	adds	r7, #32
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	08011774 	.word	0x08011774
 800b0dc:	0801179c 	.word	0x0801179c

0800b0e0 <setWTREEExtension>:
		printf("Signal extension can be either per or sym");
		exit(-1);
	}
}

void setWTREEExtension(wtree_object wt, const char *extension) {
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
	if (!strcmp(extension, "sym")) {
 800b0ea:	4912      	ldr	r1, [pc, #72]	; (800b134 <setWTREEExtension+0x54>)
 800b0ec:	6838      	ldr	r0, [r7, #0]
 800b0ee:	f7f5 f8a7 	bl	8000240 <strcmp>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d105      	bne.n	800b104 <setWTREEExtension+0x24>
		strcpy(wt->ext, "sym");
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	332c      	adds	r3, #44	; 0x2c
 800b0fc:	4a0d      	ldr	r2, [pc, #52]	; (800b134 <setWTREEExtension+0x54>)
 800b0fe:	6810      	ldr	r0, [r2, #0]
 800b100:	6018      	str	r0, [r3, #0]
	}
	else {
		printf("Signal extension can be either per or sym");
		exit(-1);
	}
}
 800b102:	e013      	b.n	800b12c <setWTREEExtension+0x4c>
	else if (!strcmp(extension, "per")) {
 800b104:	490c      	ldr	r1, [pc, #48]	; (800b138 <setWTREEExtension+0x58>)
 800b106:	6838      	ldr	r0, [r7, #0]
 800b108:	f7f5 f89a 	bl	8000240 <strcmp>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d105      	bne.n	800b11e <setWTREEExtension+0x3e>
		strcpy(wt->ext, "per");
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	332c      	adds	r3, #44	; 0x2c
 800b116:	4a08      	ldr	r2, [pc, #32]	; (800b138 <setWTREEExtension+0x58>)
 800b118:	6810      	ldr	r0, [r2, #0]
 800b11a:	6018      	str	r0, [r3, #0]
}
 800b11c:	e006      	b.n	800b12c <setWTREEExtension+0x4c>
		printf("Signal extension can be either per or sym");
 800b11e:	4807      	ldr	r0, [pc, #28]	; (800b13c <setWTREEExtension+0x5c>)
 800b120:	f001 f8d2 	bl	800c2c8 <iprintf>
		exit(-1);
 800b124:	f04f 30ff 	mov.w	r0, #4294967295
 800b128:	f000 f870 	bl	800b20c <exit>
}
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	080114cc 	.word	0x080114cc
 800b138:	0801151c 	.word	0x0801151c
 800b13c:	0801173c 	.word	0x0801173c

0800b140 <wave_free>:
		printf("Diagonal Coefficients access at wt->coeffaccess[%d]=%d, Vector size:%d  \r\n \r\n", t, wt->coeffaccess[t], vsize);
	}

}

void wave_free(wave_object object) {
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
	free(object);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f879 	bl	800b240 <free>
}
 800b14e:	bf00      	nop
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <wtree_free>:

void wt_free(wt_object object) {
	free(object);
}

void wtree_free(wtree_object object) {
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
	free(object);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f86e 	bl	800b240 <free>
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	0000      	movs	r0, r0
	...

0800b170 <wmaxiter>:

	return ret;

}

int wmaxiter(int sig_len, int filt_len) {
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
	int lev;
	double temp;

	temp = log((double)sig_len / ((double)filt_len - 1.0)) / log(2.0);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	ee07 3a90 	vmov	s15, r3
 800b180:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	ee07 3a90 	vmov	s15, r3
 800b18a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b18e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800b192:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b196:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800b19a:	eeb0 0b45 	vmov.f64	d0, d5
 800b19e:	f005 f9eb 	bl	8010578 <log>
 800b1a2:	eeb0 6b40 	vmov.f64	d6, d0
 800b1a6:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 800b1d0 <wmaxiter+0x60>
 800b1aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b1ae:	ed87 7b04 	vstr	d7, [r7, #16]
	lev = (int)temp;
 800b1b2:	ed97 7b04 	vldr	d7, [r7, #16]
 800b1b6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b1ba:	ee17 3a90 	vmov	r3, s15
 800b1be:	60fb      	str	r3, [r7, #12]

	return lev;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3718      	adds	r7, #24
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	f3af 8000 	nop.w
 800b1d0:	fefa39ef 	.word	0xfefa39ef
 800b1d4:	3fe62e42 	.word	0x3fe62e42

0800b1d8 <atoi>:
 800b1d8:	220a      	movs	r2, #10
 800b1da:	2100      	movs	r1, #0
 800b1dc:	f000 b968 	b.w	800b4b0 <strtol>

0800b1e0 <_calloc_r>:
 800b1e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1e2:	fba1 2402 	umull	r2, r4, r1, r2
 800b1e6:	b94c      	cbnz	r4, 800b1fc <_calloc_r+0x1c>
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	9201      	str	r2, [sp, #4]
 800b1ec:	f000 f850 	bl	800b290 <_malloc_r>
 800b1f0:	9a01      	ldr	r2, [sp, #4]
 800b1f2:	4605      	mov	r5, r0
 800b1f4:	b930      	cbnz	r0, 800b204 <_calloc_r+0x24>
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	b003      	add	sp, #12
 800b1fa:	bd30      	pop	{r4, r5, pc}
 800b1fc:	220c      	movs	r2, #12
 800b1fe:	6002      	str	r2, [r0, #0]
 800b200:	2500      	movs	r5, #0
 800b202:	e7f8      	b.n	800b1f6 <_calloc_r+0x16>
 800b204:	4621      	mov	r1, r4
 800b206:	f001 fa85 	bl	800c714 <memset>
 800b20a:	e7f4      	b.n	800b1f6 <_calloc_r+0x16>

0800b20c <exit>:
 800b20c:	b508      	push	{r3, lr}
 800b20e:	4b06      	ldr	r3, [pc, #24]	; (800b228 <exit+0x1c>)
 800b210:	4604      	mov	r4, r0
 800b212:	b113      	cbz	r3, 800b21a <exit+0xe>
 800b214:	2100      	movs	r1, #0
 800b216:	f3af 8000 	nop.w
 800b21a:	4b04      	ldr	r3, [pc, #16]	; (800b22c <exit+0x20>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	b103      	cbz	r3, 800b222 <exit+0x16>
 800b220:	4798      	blx	r3
 800b222:	4620      	mov	r0, r4
 800b224:	f005 fdf4 	bl	8010e10 <_exit>
 800b228:	00000000 	.word	0x00000000
 800b22c:	20003b74 	.word	0x20003b74

0800b230 <malloc>:
 800b230:	4b02      	ldr	r3, [pc, #8]	; (800b23c <malloc+0xc>)
 800b232:	4601      	mov	r1, r0
 800b234:	6818      	ldr	r0, [r3, #0]
 800b236:	f000 b82b 	b.w	800b290 <_malloc_r>
 800b23a:	bf00      	nop
 800b23c:	200008e0 	.word	0x200008e0

0800b240 <free>:
 800b240:	4b02      	ldr	r3, [pc, #8]	; (800b24c <free+0xc>)
 800b242:	4601      	mov	r1, r0
 800b244:	6818      	ldr	r0, [r3, #0]
 800b246:	f002 b91b 	b.w	800d480 <_free_r>
 800b24a:	bf00      	nop
 800b24c:	200008e0 	.word	0x200008e0

0800b250 <sbrk_aligned>:
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	4e0e      	ldr	r6, [pc, #56]	; (800b28c <sbrk_aligned+0x3c>)
 800b254:	460c      	mov	r4, r1
 800b256:	6831      	ldr	r1, [r6, #0]
 800b258:	4605      	mov	r5, r0
 800b25a:	b911      	cbnz	r1, 800b262 <sbrk_aligned+0x12>
 800b25c:	f001 fab0 	bl	800c7c0 <_sbrk_r>
 800b260:	6030      	str	r0, [r6, #0]
 800b262:	4621      	mov	r1, r4
 800b264:	4628      	mov	r0, r5
 800b266:	f001 faab 	bl	800c7c0 <_sbrk_r>
 800b26a:	1c43      	adds	r3, r0, #1
 800b26c:	d00a      	beq.n	800b284 <sbrk_aligned+0x34>
 800b26e:	1cc4      	adds	r4, r0, #3
 800b270:	f024 0403 	bic.w	r4, r4, #3
 800b274:	42a0      	cmp	r0, r4
 800b276:	d007      	beq.n	800b288 <sbrk_aligned+0x38>
 800b278:	1a21      	subs	r1, r4, r0
 800b27a:	4628      	mov	r0, r5
 800b27c:	f001 faa0 	bl	800c7c0 <_sbrk_r>
 800b280:	3001      	adds	r0, #1
 800b282:	d101      	bne.n	800b288 <sbrk_aligned+0x38>
 800b284:	f04f 34ff 	mov.w	r4, #4294967295
 800b288:	4620      	mov	r0, r4
 800b28a:	bd70      	pop	{r4, r5, r6, pc}
 800b28c:	20003a38 	.word	0x20003a38

0800b290 <_malloc_r>:
 800b290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b294:	1ccd      	adds	r5, r1, #3
 800b296:	f025 0503 	bic.w	r5, r5, #3
 800b29a:	3508      	adds	r5, #8
 800b29c:	2d0c      	cmp	r5, #12
 800b29e:	bf38      	it	cc
 800b2a0:	250c      	movcc	r5, #12
 800b2a2:	2d00      	cmp	r5, #0
 800b2a4:	4607      	mov	r7, r0
 800b2a6:	db01      	blt.n	800b2ac <_malloc_r+0x1c>
 800b2a8:	42a9      	cmp	r1, r5
 800b2aa:	d905      	bls.n	800b2b8 <_malloc_r+0x28>
 800b2ac:	230c      	movs	r3, #12
 800b2ae:	603b      	str	r3, [r7, #0]
 800b2b0:	2600      	movs	r6, #0
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b38c <_malloc_r+0xfc>
 800b2bc:	f000 f868 	bl	800b390 <__malloc_lock>
 800b2c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b2c4:	461c      	mov	r4, r3
 800b2c6:	bb5c      	cbnz	r4, 800b320 <_malloc_r+0x90>
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	4638      	mov	r0, r7
 800b2cc:	f7ff ffc0 	bl	800b250 <sbrk_aligned>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	d155      	bne.n	800b382 <_malloc_r+0xf2>
 800b2d6:	f8d8 4000 	ldr.w	r4, [r8]
 800b2da:	4626      	mov	r6, r4
 800b2dc:	2e00      	cmp	r6, #0
 800b2de:	d145      	bne.n	800b36c <_malloc_r+0xdc>
 800b2e0:	2c00      	cmp	r4, #0
 800b2e2:	d048      	beq.n	800b376 <_malloc_r+0xe6>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	4631      	mov	r1, r6
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	eb04 0903 	add.w	r9, r4, r3
 800b2ee:	f001 fa67 	bl	800c7c0 <_sbrk_r>
 800b2f2:	4581      	cmp	r9, r0
 800b2f4:	d13f      	bne.n	800b376 <_malloc_r+0xe6>
 800b2f6:	6821      	ldr	r1, [r4, #0]
 800b2f8:	1a6d      	subs	r5, r5, r1
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	f7ff ffa7 	bl	800b250 <sbrk_aligned>
 800b302:	3001      	adds	r0, #1
 800b304:	d037      	beq.n	800b376 <_malloc_r+0xe6>
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	442b      	add	r3, r5
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	f8d8 3000 	ldr.w	r3, [r8]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d038      	beq.n	800b386 <_malloc_r+0xf6>
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	42a2      	cmp	r2, r4
 800b318:	d12b      	bne.n	800b372 <_malloc_r+0xe2>
 800b31a:	2200      	movs	r2, #0
 800b31c:	605a      	str	r2, [r3, #4]
 800b31e:	e00f      	b.n	800b340 <_malloc_r+0xb0>
 800b320:	6822      	ldr	r2, [r4, #0]
 800b322:	1b52      	subs	r2, r2, r5
 800b324:	d41f      	bmi.n	800b366 <_malloc_r+0xd6>
 800b326:	2a0b      	cmp	r2, #11
 800b328:	d917      	bls.n	800b35a <_malloc_r+0xca>
 800b32a:	1961      	adds	r1, r4, r5
 800b32c:	42a3      	cmp	r3, r4
 800b32e:	6025      	str	r5, [r4, #0]
 800b330:	bf18      	it	ne
 800b332:	6059      	strne	r1, [r3, #4]
 800b334:	6863      	ldr	r3, [r4, #4]
 800b336:	bf08      	it	eq
 800b338:	f8c8 1000 	streq.w	r1, [r8]
 800b33c:	5162      	str	r2, [r4, r5]
 800b33e:	604b      	str	r3, [r1, #4]
 800b340:	4638      	mov	r0, r7
 800b342:	f104 060b 	add.w	r6, r4, #11
 800b346:	f000 f829 	bl	800b39c <__malloc_unlock>
 800b34a:	f026 0607 	bic.w	r6, r6, #7
 800b34e:	1d23      	adds	r3, r4, #4
 800b350:	1af2      	subs	r2, r6, r3
 800b352:	d0ae      	beq.n	800b2b2 <_malloc_r+0x22>
 800b354:	1b9b      	subs	r3, r3, r6
 800b356:	50a3      	str	r3, [r4, r2]
 800b358:	e7ab      	b.n	800b2b2 <_malloc_r+0x22>
 800b35a:	42a3      	cmp	r3, r4
 800b35c:	6862      	ldr	r2, [r4, #4]
 800b35e:	d1dd      	bne.n	800b31c <_malloc_r+0x8c>
 800b360:	f8c8 2000 	str.w	r2, [r8]
 800b364:	e7ec      	b.n	800b340 <_malloc_r+0xb0>
 800b366:	4623      	mov	r3, r4
 800b368:	6864      	ldr	r4, [r4, #4]
 800b36a:	e7ac      	b.n	800b2c6 <_malloc_r+0x36>
 800b36c:	4634      	mov	r4, r6
 800b36e:	6876      	ldr	r6, [r6, #4]
 800b370:	e7b4      	b.n	800b2dc <_malloc_r+0x4c>
 800b372:	4613      	mov	r3, r2
 800b374:	e7cc      	b.n	800b310 <_malloc_r+0x80>
 800b376:	230c      	movs	r3, #12
 800b378:	603b      	str	r3, [r7, #0]
 800b37a:	4638      	mov	r0, r7
 800b37c:	f000 f80e 	bl	800b39c <__malloc_unlock>
 800b380:	e797      	b.n	800b2b2 <_malloc_r+0x22>
 800b382:	6025      	str	r5, [r4, #0]
 800b384:	e7dc      	b.n	800b340 <_malloc_r+0xb0>
 800b386:	605b      	str	r3, [r3, #4]
 800b388:	deff      	udf	#255	; 0xff
 800b38a:	bf00      	nop
 800b38c:	20003a34 	.word	0x20003a34

0800b390 <__malloc_lock>:
 800b390:	4801      	ldr	r0, [pc, #4]	; (800b398 <__malloc_lock+0x8>)
 800b392:	f001 ba62 	b.w	800c85a <__retarget_lock_acquire_recursive>
 800b396:	bf00      	nop
 800b398:	20003b7c 	.word	0x20003b7c

0800b39c <__malloc_unlock>:
 800b39c:	4801      	ldr	r0, [pc, #4]	; (800b3a4 <__malloc_unlock+0x8>)
 800b39e:	f001 ba5d 	b.w	800c85c <__retarget_lock_release_recursive>
 800b3a2:	bf00      	nop
 800b3a4:	20003b7c 	.word	0x20003b7c

0800b3a8 <_strtol_l.constprop.0>:
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ae:	d001      	beq.n	800b3b4 <_strtol_l.constprop.0+0xc>
 800b3b0:	2b24      	cmp	r3, #36	; 0x24
 800b3b2:	d906      	bls.n	800b3c2 <_strtol_l.constprop.0+0x1a>
 800b3b4:	f001 fa26 	bl	800c804 <__errno>
 800b3b8:	2316      	movs	r3, #22
 800b3ba:	6003      	str	r3, [r0, #0]
 800b3bc:	2000      	movs	r0, #0
 800b3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b4a8 <_strtol_l.constprop.0+0x100>
 800b3c6:	460d      	mov	r5, r1
 800b3c8:	462e      	mov	r6, r5
 800b3ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3ce:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b3d2:	f017 0708 	ands.w	r7, r7, #8
 800b3d6:	d1f7      	bne.n	800b3c8 <_strtol_l.constprop.0+0x20>
 800b3d8:	2c2d      	cmp	r4, #45	; 0x2d
 800b3da:	d132      	bne.n	800b442 <_strtol_l.constprop.0+0x9a>
 800b3dc:	782c      	ldrb	r4, [r5, #0]
 800b3de:	2701      	movs	r7, #1
 800b3e0:	1cb5      	adds	r5, r6, #2
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d05b      	beq.n	800b49e <_strtol_l.constprop.0+0xf6>
 800b3e6:	2b10      	cmp	r3, #16
 800b3e8:	d109      	bne.n	800b3fe <_strtol_l.constprop.0+0x56>
 800b3ea:	2c30      	cmp	r4, #48	; 0x30
 800b3ec:	d107      	bne.n	800b3fe <_strtol_l.constprop.0+0x56>
 800b3ee:	782c      	ldrb	r4, [r5, #0]
 800b3f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b3f4:	2c58      	cmp	r4, #88	; 0x58
 800b3f6:	d14d      	bne.n	800b494 <_strtol_l.constprop.0+0xec>
 800b3f8:	786c      	ldrb	r4, [r5, #1]
 800b3fa:	2310      	movs	r3, #16
 800b3fc:	3502      	adds	r5, #2
 800b3fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b402:	f108 38ff 	add.w	r8, r8, #4294967295
 800b406:	f04f 0e00 	mov.w	lr, #0
 800b40a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b40e:	4676      	mov	r6, lr
 800b410:	fb03 8a19 	mls	sl, r3, r9, r8
 800b414:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b418:	f1bc 0f09 	cmp.w	ip, #9
 800b41c:	d816      	bhi.n	800b44c <_strtol_l.constprop.0+0xa4>
 800b41e:	4664      	mov	r4, ip
 800b420:	42a3      	cmp	r3, r4
 800b422:	dd24      	ble.n	800b46e <_strtol_l.constprop.0+0xc6>
 800b424:	f1be 3fff 	cmp.w	lr, #4294967295
 800b428:	d008      	beq.n	800b43c <_strtol_l.constprop.0+0x94>
 800b42a:	45b1      	cmp	r9, r6
 800b42c:	d31c      	bcc.n	800b468 <_strtol_l.constprop.0+0xc0>
 800b42e:	d101      	bne.n	800b434 <_strtol_l.constprop.0+0x8c>
 800b430:	45a2      	cmp	sl, r4
 800b432:	db19      	blt.n	800b468 <_strtol_l.constprop.0+0xc0>
 800b434:	fb06 4603 	mla	r6, r6, r3, r4
 800b438:	f04f 0e01 	mov.w	lr, #1
 800b43c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b440:	e7e8      	b.n	800b414 <_strtol_l.constprop.0+0x6c>
 800b442:	2c2b      	cmp	r4, #43	; 0x2b
 800b444:	bf04      	itt	eq
 800b446:	782c      	ldrbeq	r4, [r5, #0]
 800b448:	1cb5      	addeq	r5, r6, #2
 800b44a:	e7ca      	b.n	800b3e2 <_strtol_l.constprop.0+0x3a>
 800b44c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b450:	f1bc 0f19 	cmp.w	ip, #25
 800b454:	d801      	bhi.n	800b45a <_strtol_l.constprop.0+0xb2>
 800b456:	3c37      	subs	r4, #55	; 0x37
 800b458:	e7e2      	b.n	800b420 <_strtol_l.constprop.0+0x78>
 800b45a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b45e:	f1bc 0f19 	cmp.w	ip, #25
 800b462:	d804      	bhi.n	800b46e <_strtol_l.constprop.0+0xc6>
 800b464:	3c57      	subs	r4, #87	; 0x57
 800b466:	e7db      	b.n	800b420 <_strtol_l.constprop.0+0x78>
 800b468:	f04f 3eff 	mov.w	lr, #4294967295
 800b46c:	e7e6      	b.n	800b43c <_strtol_l.constprop.0+0x94>
 800b46e:	f1be 3fff 	cmp.w	lr, #4294967295
 800b472:	d105      	bne.n	800b480 <_strtol_l.constprop.0+0xd8>
 800b474:	2322      	movs	r3, #34	; 0x22
 800b476:	6003      	str	r3, [r0, #0]
 800b478:	4646      	mov	r6, r8
 800b47a:	b942      	cbnz	r2, 800b48e <_strtol_l.constprop.0+0xe6>
 800b47c:	4630      	mov	r0, r6
 800b47e:	e79e      	b.n	800b3be <_strtol_l.constprop.0+0x16>
 800b480:	b107      	cbz	r7, 800b484 <_strtol_l.constprop.0+0xdc>
 800b482:	4276      	negs	r6, r6
 800b484:	2a00      	cmp	r2, #0
 800b486:	d0f9      	beq.n	800b47c <_strtol_l.constprop.0+0xd4>
 800b488:	f1be 0f00 	cmp.w	lr, #0
 800b48c:	d000      	beq.n	800b490 <_strtol_l.constprop.0+0xe8>
 800b48e:	1e69      	subs	r1, r5, #1
 800b490:	6011      	str	r1, [r2, #0]
 800b492:	e7f3      	b.n	800b47c <_strtol_l.constprop.0+0xd4>
 800b494:	2430      	movs	r4, #48	; 0x30
 800b496:	2b00      	cmp	r3, #0
 800b498:	d1b1      	bne.n	800b3fe <_strtol_l.constprop.0+0x56>
 800b49a:	2308      	movs	r3, #8
 800b49c:	e7af      	b.n	800b3fe <_strtol_l.constprop.0+0x56>
 800b49e:	2c30      	cmp	r4, #48	; 0x30
 800b4a0:	d0a5      	beq.n	800b3ee <_strtol_l.constprop.0+0x46>
 800b4a2:	230a      	movs	r3, #10
 800b4a4:	e7ab      	b.n	800b3fe <_strtol_l.constprop.0+0x56>
 800b4a6:	bf00      	nop
 800b4a8:	08018539 	.word	0x08018539

0800b4ac <_strtol_r>:
 800b4ac:	f7ff bf7c 	b.w	800b3a8 <_strtol_l.constprop.0>

0800b4b0 <strtol>:
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	460a      	mov	r2, r1
 800b4b4:	4601      	mov	r1, r0
 800b4b6:	4802      	ldr	r0, [pc, #8]	; (800b4c0 <strtol+0x10>)
 800b4b8:	6800      	ldr	r0, [r0, #0]
 800b4ba:	f7ff bf75 	b.w	800b3a8 <_strtol_l.constprop.0>
 800b4be:	bf00      	nop
 800b4c0:	200008e0 	.word	0x200008e0

0800b4c4 <__cvt>:
 800b4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4c6:	ed2d 8b02 	vpush	{d8}
 800b4ca:	eeb0 8b40 	vmov.f64	d8, d0
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	4617      	mov	r7, r2
 800b4d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b4d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b4d6:	ee18 2a90 	vmov	r2, s17
 800b4da:	f025 0520 	bic.w	r5, r5, #32
 800b4de:	2a00      	cmp	r2, #0
 800b4e0:	bfb6      	itet	lt
 800b4e2:	222d      	movlt	r2, #45	; 0x2d
 800b4e4:	2200      	movge	r2, #0
 800b4e6:	eeb1 8b40 	vneglt.f64	d8, d0
 800b4ea:	2d46      	cmp	r5, #70	; 0x46
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	701a      	strb	r2, [r3, #0]
 800b4f0:	d004      	beq.n	800b4fc <__cvt+0x38>
 800b4f2:	2d45      	cmp	r5, #69	; 0x45
 800b4f4:	d100      	bne.n	800b4f8 <__cvt+0x34>
 800b4f6:	3401      	adds	r4, #1
 800b4f8:	2102      	movs	r1, #2
 800b4fa:	e000      	b.n	800b4fe <__cvt+0x3a>
 800b4fc:	2103      	movs	r1, #3
 800b4fe:	ab03      	add	r3, sp, #12
 800b500:	9301      	str	r3, [sp, #4]
 800b502:	ab02      	add	r3, sp, #8
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	4622      	mov	r2, r4
 800b508:	4633      	mov	r3, r6
 800b50a:	eeb0 0b48 	vmov.f64	d0, d8
 800b50e:	f001 fa4b 	bl	800c9a8 <_dtoa_r>
 800b512:	2d47      	cmp	r5, #71	; 0x47
 800b514:	d101      	bne.n	800b51a <__cvt+0x56>
 800b516:	07fb      	lsls	r3, r7, #31
 800b518:	d51a      	bpl.n	800b550 <__cvt+0x8c>
 800b51a:	2d46      	cmp	r5, #70	; 0x46
 800b51c:	eb00 0204 	add.w	r2, r0, r4
 800b520:	d10c      	bne.n	800b53c <__cvt+0x78>
 800b522:	7803      	ldrb	r3, [r0, #0]
 800b524:	2b30      	cmp	r3, #48	; 0x30
 800b526:	d107      	bne.n	800b538 <__cvt+0x74>
 800b528:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b530:	bf1c      	itt	ne
 800b532:	f1c4 0401 	rsbne	r4, r4, #1
 800b536:	6034      	strne	r4, [r6, #0]
 800b538:	6833      	ldr	r3, [r6, #0]
 800b53a:	441a      	add	r2, r3
 800b53c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b544:	bf08      	it	eq
 800b546:	9203      	streq	r2, [sp, #12]
 800b548:	2130      	movs	r1, #48	; 0x30
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d307      	bcc.n	800b560 <__cvt+0x9c>
 800b550:	9b03      	ldr	r3, [sp, #12]
 800b552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b554:	1a1b      	subs	r3, r3, r0
 800b556:	6013      	str	r3, [r2, #0]
 800b558:	b005      	add	sp, #20
 800b55a:	ecbd 8b02 	vpop	{d8}
 800b55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b560:	1c5c      	adds	r4, r3, #1
 800b562:	9403      	str	r4, [sp, #12]
 800b564:	7019      	strb	r1, [r3, #0]
 800b566:	e7f0      	b.n	800b54a <__cvt+0x86>

0800b568 <__exponent>:
 800b568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b56a:	4603      	mov	r3, r0
 800b56c:	2900      	cmp	r1, #0
 800b56e:	bfb8      	it	lt
 800b570:	4249      	neglt	r1, r1
 800b572:	f803 2b02 	strb.w	r2, [r3], #2
 800b576:	bfb4      	ite	lt
 800b578:	222d      	movlt	r2, #45	; 0x2d
 800b57a:	222b      	movge	r2, #43	; 0x2b
 800b57c:	2909      	cmp	r1, #9
 800b57e:	7042      	strb	r2, [r0, #1]
 800b580:	dd2a      	ble.n	800b5d8 <__exponent+0x70>
 800b582:	f10d 0207 	add.w	r2, sp, #7
 800b586:	4617      	mov	r7, r2
 800b588:	260a      	movs	r6, #10
 800b58a:	4694      	mov	ip, r2
 800b58c:	fb91 f5f6 	sdiv	r5, r1, r6
 800b590:	fb06 1415 	mls	r4, r6, r5, r1
 800b594:	3430      	adds	r4, #48	; 0x30
 800b596:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b59a:	460c      	mov	r4, r1
 800b59c:	2c63      	cmp	r4, #99	; 0x63
 800b59e:	f102 32ff 	add.w	r2, r2, #4294967295
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	dcf1      	bgt.n	800b58a <__exponent+0x22>
 800b5a6:	3130      	adds	r1, #48	; 0x30
 800b5a8:	f1ac 0402 	sub.w	r4, ip, #2
 800b5ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b5b0:	1c41      	adds	r1, r0, #1
 800b5b2:	4622      	mov	r2, r4
 800b5b4:	42ba      	cmp	r2, r7
 800b5b6:	d30a      	bcc.n	800b5ce <__exponent+0x66>
 800b5b8:	f10d 0209 	add.w	r2, sp, #9
 800b5bc:	eba2 020c 	sub.w	r2, r2, ip
 800b5c0:	42bc      	cmp	r4, r7
 800b5c2:	bf88      	it	hi
 800b5c4:	2200      	movhi	r2, #0
 800b5c6:	4413      	add	r3, r2
 800b5c8:	1a18      	subs	r0, r3, r0
 800b5ca:	b003      	add	sp, #12
 800b5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5ce:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b5d2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b5d6:	e7ed      	b.n	800b5b4 <__exponent+0x4c>
 800b5d8:	2330      	movs	r3, #48	; 0x30
 800b5da:	3130      	adds	r1, #48	; 0x30
 800b5dc:	7083      	strb	r3, [r0, #2]
 800b5de:	70c1      	strb	r1, [r0, #3]
 800b5e0:	1d03      	adds	r3, r0, #4
 800b5e2:	e7f1      	b.n	800b5c8 <__exponent+0x60>
 800b5e4:	0000      	movs	r0, r0
	...

0800b5e8 <_printf_float>:
 800b5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ec:	b08b      	sub	sp, #44	; 0x2c
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b5f4:	4616      	mov	r6, r2
 800b5f6:	461f      	mov	r7, r3
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	f001 f8a9 	bl	800c750 <_localeconv_r>
 800b5fe:	f8d0 b000 	ldr.w	fp, [r0]
 800b602:	4658      	mov	r0, fp
 800b604:	f7f4 fe7c 	bl	8000300 <strlen>
 800b608:	2300      	movs	r3, #0
 800b60a:	9308      	str	r3, [sp, #32]
 800b60c:	f8d8 3000 	ldr.w	r3, [r8]
 800b610:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b614:	6822      	ldr	r2, [r4, #0]
 800b616:	3307      	adds	r3, #7
 800b618:	f023 0307 	bic.w	r3, r3, #7
 800b61c:	f103 0108 	add.w	r1, r3, #8
 800b620:	f8c8 1000 	str.w	r1, [r8]
 800b624:	ed93 0b00 	vldr	d0, [r3]
 800b628:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800b888 <_printf_float+0x2a0>
 800b62c:	eeb0 7bc0 	vabs.f64	d7, d0
 800b630:	eeb4 7b46 	vcmp.f64	d7, d6
 800b634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b638:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800b63c:	4682      	mov	sl, r0
 800b63e:	dd24      	ble.n	800b68a <_printf_float+0xa2>
 800b640:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b648:	d502      	bpl.n	800b650 <_printf_float+0x68>
 800b64a:	232d      	movs	r3, #45	; 0x2d
 800b64c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b650:	498f      	ldr	r1, [pc, #572]	; (800b890 <_printf_float+0x2a8>)
 800b652:	4b90      	ldr	r3, [pc, #576]	; (800b894 <_printf_float+0x2ac>)
 800b654:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b658:	bf94      	ite	ls
 800b65a:	4688      	movls	r8, r1
 800b65c:	4698      	movhi	r8, r3
 800b65e:	2303      	movs	r3, #3
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	f022 0204 	bic.w	r2, r2, #4
 800b666:	2300      	movs	r3, #0
 800b668:	6022      	str	r2, [r4, #0]
 800b66a:	9304      	str	r3, [sp, #16]
 800b66c:	9700      	str	r7, [sp, #0]
 800b66e:	4633      	mov	r3, r6
 800b670:	aa09      	add	r2, sp, #36	; 0x24
 800b672:	4621      	mov	r1, r4
 800b674:	4628      	mov	r0, r5
 800b676:	f000 f9d1 	bl	800ba1c <_printf_common>
 800b67a:	3001      	adds	r0, #1
 800b67c:	f040 808a 	bne.w	800b794 <_printf_float+0x1ac>
 800b680:	f04f 30ff 	mov.w	r0, #4294967295
 800b684:	b00b      	add	sp, #44	; 0x2c
 800b686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68a:	eeb4 0b40 	vcmp.f64	d0, d0
 800b68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b692:	d709      	bvc.n	800b6a8 <_printf_float+0xc0>
 800b694:	ee10 3a90 	vmov	r3, s1
 800b698:	2b00      	cmp	r3, #0
 800b69a:	bfbc      	itt	lt
 800b69c:	232d      	movlt	r3, #45	; 0x2d
 800b69e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b6a2:	497d      	ldr	r1, [pc, #500]	; (800b898 <_printf_float+0x2b0>)
 800b6a4:	4b7d      	ldr	r3, [pc, #500]	; (800b89c <_printf_float+0x2b4>)
 800b6a6:	e7d5      	b.n	800b654 <_printf_float+0x6c>
 800b6a8:	6863      	ldr	r3, [r4, #4]
 800b6aa:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b6ae:	9104      	str	r1, [sp, #16]
 800b6b0:	1c59      	adds	r1, r3, #1
 800b6b2:	d13c      	bne.n	800b72e <_printf_float+0x146>
 800b6b4:	2306      	movs	r3, #6
 800b6b6:	6063      	str	r3, [r4, #4]
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	9303      	str	r3, [sp, #12]
 800b6bc:	ab08      	add	r3, sp, #32
 800b6be:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b6c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b6c6:	ab07      	add	r3, sp, #28
 800b6c8:	6861      	ldr	r1, [r4, #4]
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	6022      	str	r2, [r4, #0]
 800b6ce:	f10d 031b 	add.w	r3, sp, #27
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f7ff fef6 	bl	800b4c4 <__cvt>
 800b6d8:	9b04      	ldr	r3, [sp, #16]
 800b6da:	9907      	ldr	r1, [sp, #28]
 800b6dc:	2b47      	cmp	r3, #71	; 0x47
 800b6de:	4680      	mov	r8, r0
 800b6e0:	d108      	bne.n	800b6f4 <_printf_float+0x10c>
 800b6e2:	1cc8      	adds	r0, r1, #3
 800b6e4:	db02      	blt.n	800b6ec <_printf_float+0x104>
 800b6e6:	6863      	ldr	r3, [r4, #4]
 800b6e8:	4299      	cmp	r1, r3
 800b6ea:	dd41      	ble.n	800b770 <_printf_float+0x188>
 800b6ec:	f1a9 0902 	sub.w	r9, r9, #2
 800b6f0:	fa5f f989 	uxtb.w	r9, r9
 800b6f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b6f8:	d820      	bhi.n	800b73c <_printf_float+0x154>
 800b6fa:	3901      	subs	r1, #1
 800b6fc:	464a      	mov	r2, r9
 800b6fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b702:	9107      	str	r1, [sp, #28]
 800b704:	f7ff ff30 	bl	800b568 <__exponent>
 800b708:	9a08      	ldr	r2, [sp, #32]
 800b70a:	9004      	str	r0, [sp, #16]
 800b70c:	1813      	adds	r3, r2, r0
 800b70e:	2a01      	cmp	r2, #1
 800b710:	6123      	str	r3, [r4, #16]
 800b712:	dc02      	bgt.n	800b71a <_printf_float+0x132>
 800b714:	6822      	ldr	r2, [r4, #0]
 800b716:	07d2      	lsls	r2, r2, #31
 800b718:	d501      	bpl.n	800b71e <_printf_float+0x136>
 800b71a:	3301      	adds	r3, #1
 800b71c:	6123      	str	r3, [r4, #16]
 800b71e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d0a2      	beq.n	800b66c <_printf_float+0x84>
 800b726:	232d      	movs	r3, #45	; 0x2d
 800b728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b72c:	e79e      	b.n	800b66c <_printf_float+0x84>
 800b72e:	9904      	ldr	r1, [sp, #16]
 800b730:	2947      	cmp	r1, #71	; 0x47
 800b732:	d1c1      	bne.n	800b6b8 <_printf_float+0xd0>
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1bf      	bne.n	800b6b8 <_printf_float+0xd0>
 800b738:	2301      	movs	r3, #1
 800b73a:	e7bc      	b.n	800b6b6 <_printf_float+0xce>
 800b73c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b740:	d118      	bne.n	800b774 <_printf_float+0x18c>
 800b742:	2900      	cmp	r1, #0
 800b744:	6863      	ldr	r3, [r4, #4]
 800b746:	dd0b      	ble.n	800b760 <_printf_float+0x178>
 800b748:	6121      	str	r1, [r4, #16]
 800b74a:	b913      	cbnz	r3, 800b752 <_printf_float+0x16a>
 800b74c:	6822      	ldr	r2, [r4, #0]
 800b74e:	07d0      	lsls	r0, r2, #31
 800b750:	d502      	bpl.n	800b758 <_printf_float+0x170>
 800b752:	3301      	adds	r3, #1
 800b754:	440b      	add	r3, r1
 800b756:	6123      	str	r3, [r4, #16]
 800b758:	2300      	movs	r3, #0
 800b75a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b75c:	9304      	str	r3, [sp, #16]
 800b75e:	e7de      	b.n	800b71e <_printf_float+0x136>
 800b760:	b913      	cbnz	r3, 800b768 <_printf_float+0x180>
 800b762:	6822      	ldr	r2, [r4, #0]
 800b764:	07d2      	lsls	r2, r2, #31
 800b766:	d501      	bpl.n	800b76c <_printf_float+0x184>
 800b768:	3302      	adds	r3, #2
 800b76a:	e7f4      	b.n	800b756 <_printf_float+0x16e>
 800b76c:	2301      	movs	r3, #1
 800b76e:	e7f2      	b.n	800b756 <_printf_float+0x16e>
 800b770:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b774:	9b08      	ldr	r3, [sp, #32]
 800b776:	4299      	cmp	r1, r3
 800b778:	db05      	blt.n	800b786 <_printf_float+0x19e>
 800b77a:	6823      	ldr	r3, [r4, #0]
 800b77c:	6121      	str	r1, [r4, #16]
 800b77e:	07d8      	lsls	r0, r3, #31
 800b780:	d5ea      	bpl.n	800b758 <_printf_float+0x170>
 800b782:	1c4b      	adds	r3, r1, #1
 800b784:	e7e7      	b.n	800b756 <_printf_float+0x16e>
 800b786:	2900      	cmp	r1, #0
 800b788:	bfd4      	ite	le
 800b78a:	f1c1 0202 	rsble	r2, r1, #2
 800b78e:	2201      	movgt	r2, #1
 800b790:	4413      	add	r3, r2
 800b792:	e7e0      	b.n	800b756 <_printf_float+0x16e>
 800b794:	6823      	ldr	r3, [r4, #0]
 800b796:	055a      	lsls	r2, r3, #21
 800b798:	d407      	bmi.n	800b7aa <_printf_float+0x1c2>
 800b79a:	6923      	ldr	r3, [r4, #16]
 800b79c:	4642      	mov	r2, r8
 800b79e:	4631      	mov	r1, r6
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	47b8      	blx	r7
 800b7a4:	3001      	adds	r0, #1
 800b7a6:	d12a      	bne.n	800b7fe <_printf_float+0x216>
 800b7a8:	e76a      	b.n	800b680 <_printf_float+0x98>
 800b7aa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b7ae:	f240 80e0 	bls.w	800b972 <_printf_float+0x38a>
 800b7b2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b7b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7be:	d133      	bne.n	800b828 <_printf_float+0x240>
 800b7c0:	4a37      	ldr	r2, [pc, #220]	; (800b8a0 <_printf_float+0x2b8>)
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	4631      	mov	r1, r6
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	47b8      	blx	r7
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	f43f af58 	beq.w	800b680 <_printf_float+0x98>
 800b7d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	db02      	blt.n	800b7de <_printf_float+0x1f6>
 800b7d8:	6823      	ldr	r3, [r4, #0]
 800b7da:	07d8      	lsls	r0, r3, #31
 800b7dc:	d50f      	bpl.n	800b7fe <_printf_float+0x216>
 800b7de:	4653      	mov	r3, sl
 800b7e0:	465a      	mov	r2, fp
 800b7e2:	4631      	mov	r1, r6
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	47b8      	blx	r7
 800b7e8:	3001      	adds	r0, #1
 800b7ea:	f43f af49 	beq.w	800b680 <_printf_float+0x98>
 800b7ee:	f04f 0800 	mov.w	r8, #0
 800b7f2:	f104 091a 	add.w	r9, r4, #26
 800b7f6:	9b08      	ldr	r3, [sp, #32]
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	4543      	cmp	r3, r8
 800b7fc:	dc09      	bgt.n	800b812 <_printf_float+0x22a>
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	079b      	lsls	r3, r3, #30
 800b802:	f100 8106 	bmi.w	800ba12 <_printf_float+0x42a>
 800b806:	68e0      	ldr	r0, [r4, #12]
 800b808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b80a:	4298      	cmp	r0, r3
 800b80c:	bfb8      	it	lt
 800b80e:	4618      	movlt	r0, r3
 800b810:	e738      	b.n	800b684 <_printf_float+0x9c>
 800b812:	2301      	movs	r3, #1
 800b814:	464a      	mov	r2, r9
 800b816:	4631      	mov	r1, r6
 800b818:	4628      	mov	r0, r5
 800b81a:	47b8      	blx	r7
 800b81c:	3001      	adds	r0, #1
 800b81e:	f43f af2f 	beq.w	800b680 <_printf_float+0x98>
 800b822:	f108 0801 	add.w	r8, r8, #1
 800b826:	e7e6      	b.n	800b7f6 <_printf_float+0x20e>
 800b828:	9b07      	ldr	r3, [sp, #28]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	dc3a      	bgt.n	800b8a4 <_printf_float+0x2bc>
 800b82e:	4a1c      	ldr	r2, [pc, #112]	; (800b8a0 <_printf_float+0x2b8>)
 800b830:	2301      	movs	r3, #1
 800b832:	4631      	mov	r1, r6
 800b834:	4628      	mov	r0, r5
 800b836:	47b8      	blx	r7
 800b838:	3001      	adds	r0, #1
 800b83a:	f43f af21 	beq.w	800b680 <_printf_float+0x98>
 800b83e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800b842:	4313      	orrs	r3, r2
 800b844:	d102      	bne.n	800b84c <_printf_float+0x264>
 800b846:	6823      	ldr	r3, [r4, #0]
 800b848:	07d9      	lsls	r1, r3, #31
 800b84a:	d5d8      	bpl.n	800b7fe <_printf_float+0x216>
 800b84c:	4653      	mov	r3, sl
 800b84e:	465a      	mov	r2, fp
 800b850:	4631      	mov	r1, r6
 800b852:	4628      	mov	r0, r5
 800b854:	47b8      	blx	r7
 800b856:	3001      	adds	r0, #1
 800b858:	f43f af12 	beq.w	800b680 <_printf_float+0x98>
 800b85c:	f04f 0900 	mov.w	r9, #0
 800b860:	f104 0a1a 	add.w	sl, r4, #26
 800b864:	9b07      	ldr	r3, [sp, #28]
 800b866:	425b      	negs	r3, r3
 800b868:	454b      	cmp	r3, r9
 800b86a:	dc01      	bgt.n	800b870 <_printf_float+0x288>
 800b86c:	9b08      	ldr	r3, [sp, #32]
 800b86e:	e795      	b.n	800b79c <_printf_float+0x1b4>
 800b870:	2301      	movs	r3, #1
 800b872:	4652      	mov	r2, sl
 800b874:	4631      	mov	r1, r6
 800b876:	4628      	mov	r0, r5
 800b878:	47b8      	blx	r7
 800b87a:	3001      	adds	r0, #1
 800b87c:	f43f af00 	beq.w	800b680 <_printf_float+0x98>
 800b880:	f109 0901 	add.w	r9, r9, #1
 800b884:	e7ee      	b.n	800b864 <_printf_float+0x27c>
 800b886:	bf00      	nop
 800b888:	ffffffff 	.word	0xffffffff
 800b88c:	7fefffff 	.word	0x7fefffff
 800b890:	08018639 	.word	0x08018639
 800b894:	0801863d 	.word	0x0801863d
 800b898:	08018641 	.word	0x08018641
 800b89c:	08018645 	.word	0x08018645
 800b8a0:	080188cf 	.word	0x080188cf
 800b8a4:	9a08      	ldr	r2, [sp, #32]
 800b8a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	bfa8      	it	ge
 800b8ac:	461a      	movge	r2, r3
 800b8ae:	2a00      	cmp	r2, #0
 800b8b0:	4691      	mov	r9, r2
 800b8b2:	dc38      	bgt.n	800b926 <_printf_float+0x33e>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	9305      	str	r3, [sp, #20]
 800b8b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8bc:	f104 021a 	add.w	r2, r4, #26
 800b8c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8c2:	9905      	ldr	r1, [sp, #20]
 800b8c4:	9304      	str	r3, [sp, #16]
 800b8c6:	eba3 0309 	sub.w	r3, r3, r9
 800b8ca:	428b      	cmp	r3, r1
 800b8cc:	dc33      	bgt.n	800b936 <_printf_float+0x34e>
 800b8ce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	db3c      	blt.n	800b950 <_printf_float+0x368>
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	07da      	lsls	r2, r3, #31
 800b8da:	d439      	bmi.n	800b950 <_printf_float+0x368>
 800b8dc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800b8e0:	eba2 0903 	sub.w	r9, r2, r3
 800b8e4:	9b04      	ldr	r3, [sp, #16]
 800b8e6:	1ad2      	subs	r2, r2, r3
 800b8e8:	4591      	cmp	r9, r2
 800b8ea:	bfa8      	it	ge
 800b8ec:	4691      	movge	r9, r2
 800b8ee:	f1b9 0f00 	cmp.w	r9, #0
 800b8f2:	dc35      	bgt.n	800b960 <_printf_float+0x378>
 800b8f4:	f04f 0800 	mov.w	r8, #0
 800b8f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8fc:	f104 0a1a 	add.w	sl, r4, #26
 800b900:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b904:	1a9b      	subs	r3, r3, r2
 800b906:	eba3 0309 	sub.w	r3, r3, r9
 800b90a:	4543      	cmp	r3, r8
 800b90c:	f77f af77 	ble.w	800b7fe <_printf_float+0x216>
 800b910:	2301      	movs	r3, #1
 800b912:	4652      	mov	r2, sl
 800b914:	4631      	mov	r1, r6
 800b916:	4628      	mov	r0, r5
 800b918:	47b8      	blx	r7
 800b91a:	3001      	adds	r0, #1
 800b91c:	f43f aeb0 	beq.w	800b680 <_printf_float+0x98>
 800b920:	f108 0801 	add.w	r8, r8, #1
 800b924:	e7ec      	b.n	800b900 <_printf_float+0x318>
 800b926:	4613      	mov	r3, r2
 800b928:	4631      	mov	r1, r6
 800b92a:	4642      	mov	r2, r8
 800b92c:	4628      	mov	r0, r5
 800b92e:	47b8      	blx	r7
 800b930:	3001      	adds	r0, #1
 800b932:	d1bf      	bne.n	800b8b4 <_printf_float+0x2cc>
 800b934:	e6a4      	b.n	800b680 <_printf_float+0x98>
 800b936:	2301      	movs	r3, #1
 800b938:	4631      	mov	r1, r6
 800b93a:	4628      	mov	r0, r5
 800b93c:	9204      	str	r2, [sp, #16]
 800b93e:	47b8      	blx	r7
 800b940:	3001      	adds	r0, #1
 800b942:	f43f ae9d 	beq.w	800b680 <_printf_float+0x98>
 800b946:	9b05      	ldr	r3, [sp, #20]
 800b948:	9a04      	ldr	r2, [sp, #16]
 800b94a:	3301      	adds	r3, #1
 800b94c:	9305      	str	r3, [sp, #20]
 800b94e:	e7b7      	b.n	800b8c0 <_printf_float+0x2d8>
 800b950:	4653      	mov	r3, sl
 800b952:	465a      	mov	r2, fp
 800b954:	4631      	mov	r1, r6
 800b956:	4628      	mov	r0, r5
 800b958:	47b8      	blx	r7
 800b95a:	3001      	adds	r0, #1
 800b95c:	d1be      	bne.n	800b8dc <_printf_float+0x2f4>
 800b95e:	e68f      	b.n	800b680 <_printf_float+0x98>
 800b960:	9a04      	ldr	r2, [sp, #16]
 800b962:	464b      	mov	r3, r9
 800b964:	4442      	add	r2, r8
 800b966:	4631      	mov	r1, r6
 800b968:	4628      	mov	r0, r5
 800b96a:	47b8      	blx	r7
 800b96c:	3001      	adds	r0, #1
 800b96e:	d1c1      	bne.n	800b8f4 <_printf_float+0x30c>
 800b970:	e686      	b.n	800b680 <_printf_float+0x98>
 800b972:	9a08      	ldr	r2, [sp, #32]
 800b974:	2a01      	cmp	r2, #1
 800b976:	dc01      	bgt.n	800b97c <_printf_float+0x394>
 800b978:	07db      	lsls	r3, r3, #31
 800b97a:	d537      	bpl.n	800b9ec <_printf_float+0x404>
 800b97c:	2301      	movs	r3, #1
 800b97e:	4642      	mov	r2, r8
 800b980:	4631      	mov	r1, r6
 800b982:	4628      	mov	r0, r5
 800b984:	47b8      	blx	r7
 800b986:	3001      	adds	r0, #1
 800b988:	f43f ae7a 	beq.w	800b680 <_printf_float+0x98>
 800b98c:	4653      	mov	r3, sl
 800b98e:	465a      	mov	r2, fp
 800b990:	4631      	mov	r1, r6
 800b992:	4628      	mov	r0, r5
 800b994:	47b8      	blx	r7
 800b996:	3001      	adds	r0, #1
 800b998:	f43f ae72 	beq.w	800b680 <_printf_float+0x98>
 800b99c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b9a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9a8:	9b08      	ldr	r3, [sp, #32]
 800b9aa:	d01a      	beq.n	800b9e2 <_printf_float+0x3fa>
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	f108 0201 	add.w	r2, r8, #1
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	47b8      	blx	r7
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	d10e      	bne.n	800b9da <_printf_float+0x3f2>
 800b9bc:	e660      	b.n	800b680 <_printf_float+0x98>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	464a      	mov	r2, r9
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	47b8      	blx	r7
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	f43f ae59 	beq.w	800b680 <_printf_float+0x98>
 800b9ce:	f108 0801 	add.w	r8, r8, #1
 800b9d2:	9b08      	ldr	r3, [sp, #32]
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	4543      	cmp	r3, r8
 800b9d8:	dcf1      	bgt.n	800b9be <_printf_float+0x3d6>
 800b9da:	9b04      	ldr	r3, [sp, #16]
 800b9dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b9e0:	e6dd      	b.n	800b79e <_printf_float+0x1b6>
 800b9e2:	f04f 0800 	mov.w	r8, #0
 800b9e6:	f104 091a 	add.w	r9, r4, #26
 800b9ea:	e7f2      	b.n	800b9d2 <_printf_float+0x3ea>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	4642      	mov	r2, r8
 800b9f0:	e7df      	b.n	800b9b2 <_printf_float+0x3ca>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	464a      	mov	r2, r9
 800b9f6:	4631      	mov	r1, r6
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	47b8      	blx	r7
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	f43f ae3f 	beq.w	800b680 <_printf_float+0x98>
 800ba02:	f108 0801 	add.w	r8, r8, #1
 800ba06:	68e3      	ldr	r3, [r4, #12]
 800ba08:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba0a:	1a5b      	subs	r3, r3, r1
 800ba0c:	4543      	cmp	r3, r8
 800ba0e:	dcf0      	bgt.n	800b9f2 <_printf_float+0x40a>
 800ba10:	e6f9      	b.n	800b806 <_printf_float+0x21e>
 800ba12:	f04f 0800 	mov.w	r8, #0
 800ba16:	f104 0919 	add.w	r9, r4, #25
 800ba1a:	e7f4      	b.n	800ba06 <_printf_float+0x41e>

0800ba1c <_printf_common>:
 800ba1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba20:	4616      	mov	r6, r2
 800ba22:	4699      	mov	r9, r3
 800ba24:	688a      	ldr	r2, [r1, #8]
 800ba26:	690b      	ldr	r3, [r1, #16]
 800ba28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	bfb8      	it	lt
 800ba30:	4613      	movlt	r3, r2
 800ba32:	6033      	str	r3, [r6, #0]
 800ba34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba38:	4607      	mov	r7, r0
 800ba3a:	460c      	mov	r4, r1
 800ba3c:	b10a      	cbz	r2, 800ba42 <_printf_common+0x26>
 800ba3e:	3301      	adds	r3, #1
 800ba40:	6033      	str	r3, [r6, #0]
 800ba42:	6823      	ldr	r3, [r4, #0]
 800ba44:	0699      	lsls	r1, r3, #26
 800ba46:	bf42      	ittt	mi
 800ba48:	6833      	ldrmi	r3, [r6, #0]
 800ba4a:	3302      	addmi	r3, #2
 800ba4c:	6033      	strmi	r3, [r6, #0]
 800ba4e:	6825      	ldr	r5, [r4, #0]
 800ba50:	f015 0506 	ands.w	r5, r5, #6
 800ba54:	d106      	bne.n	800ba64 <_printf_common+0x48>
 800ba56:	f104 0a19 	add.w	sl, r4, #25
 800ba5a:	68e3      	ldr	r3, [r4, #12]
 800ba5c:	6832      	ldr	r2, [r6, #0]
 800ba5e:	1a9b      	subs	r3, r3, r2
 800ba60:	42ab      	cmp	r3, r5
 800ba62:	dc26      	bgt.n	800bab2 <_printf_common+0x96>
 800ba64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba68:	1e13      	subs	r3, r2, #0
 800ba6a:	6822      	ldr	r2, [r4, #0]
 800ba6c:	bf18      	it	ne
 800ba6e:	2301      	movne	r3, #1
 800ba70:	0692      	lsls	r2, r2, #26
 800ba72:	d42b      	bmi.n	800bacc <_printf_common+0xb0>
 800ba74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba78:	4649      	mov	r1, r9
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	47c0      	blx	r8
 800ba7e:	3001      	adds	r0, #1
 800ba80:	d01e      	beq.n	800bac0 <_printf_common+0xa4>
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	6922      	ldr	r2, [r4, #16]
 800ba86:	f003 0306 	and.w	r3, r3, #6
 800ba8a:	2b04      	cmp	r3, #4
 800ba8c:	bf02      	ittt	eq
 800ba8e:	68e5      	ldreq	r5, [r4, #12]
 800ba90:	6833      	ldreq	r3, [r6, #0]
 800ba92:	1aed      	subeq	r5, r5, r3
 800ba94:	68a3      	ldr	r3, [r4, #8]
 800ba96:	bf0c      	ite	eq
 800ba98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba9c:	2500      	movne	r5, #0
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	bfc4      	itt	gt
 800baa2:	1a9b      	subgt	r3, r3, r2
 800baa4:	18ed      	addgt	r5, r5, r3
 800baa6:	2600      	movs	r6, #0
 800baa8:	341a      	adds	r4, #26
 800baaa:	42b5      	cmp	r5, r6
 800baac:	d11a      	bne.n	800bae4 <_printf_common+0xc8>
 800baae:	2000      	movs	r0, #0
 800bab0:	e008      	b.n	800bac4 <_printf_common+0xa8>
 800bab2:	2301      	movs	r3, #1
 800bab4:	4652      	mov	r2, sl
 800bab6:	4649      	mov	r1, r9
 800bab8:	4638      	mov	r0, r7
 800baba:	47c0      	blx	r8
 800babc:	3001      	adds	r0, #1
 800babe:	d103      	bne.n	800bac8 <_printf_common+0xac>
 800bac0:	f04f 30ff 	mov.w	r0, #4294967295
 800bac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac8:	3501      	adds	r5, #1
 800baca:	e7c6      	b.n	800ba5a <_printf_common+0x3e>
 800bacc:	18e1      	adds	r1, r4, r3
 800bace:	1c5a      	adds	r2, r3, #1
 800bad0:	2030      	movs	r0, #48	; 0x30
 800bad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bad6:	4422      	add	r2, r4
 800bad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800badc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bae0:	3302      	adds	r3, #2
 800bae2:	e7c7      	b.n	800ba74 <_printf_common+0x58>
 800bae4:	2301      	movs	r3, #1
 800bae6:	4622      	mov	r2, r4
 800bae8:	4649      	mov	r1, r9
 800baea:	4638      	mov	r0, r7
 800baec:	47c0      	blx	r8
 800baee:	3001      	adds	r0, #1
 800baf0:	d0e6      	beq.n	800bac0 <_printf_common+0xa4>
 800baf2:	3601      	adds	r6, #1
 800baf4:	e7d9      	b.n	800baaa <_printf_common+0x8e>
	...

0800baf8 <_printf_i>:
 800baf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bafc:	7e0f      	ldrb	r7, [r1, #24]
 800bafe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb00:	2f78      	cmp	r7, #120	; 0x78
 800bb02:	4691      	mov	r9, r2
 800bb04:	4680      	mov	r8, r0
 800bb06:	460c      	mov	r4, r1
 800bb08:	469a      	mov	sl, r3
 800bb0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb0e:	d807      	bhi.n	800bb20 <_printf_i+0x28>
 800bb10:	2f62      	cmp	r7, #98	; 0x62
 800bb12:	d80a      	bhi.n	800bb2a <_printf_i+0x32>
 800bb14:	2f00      	cmp	r7, #0
 800bb16:	f000 80d4 	beq.w	800bcc2 <_printf_i+0x1ca>
 800bb1a:	2f58      	cmp	r7, #88	; 0x58
 800bb1c:	f000 80c0 	beq.w	800bca0 <_printf_i+0x1a8>
 800bb20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb28:	e03a      	b.n	800bba0 <_printf_i+0xa8>
 800bb2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb2e:	2b15      	cmp	r3, #21
 800bb30:	d8f6      	bhi.n	800bb20 <_printf_i+0x28>
 800bb32:	a101      	add	r1, pc, #4	; (adr r1, 800bb38 <_printf_i+0x40>)
 800bb34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb38:	0800bb91 	.word	0x0800bb91
 800bb3c:	0800bba5 	.word	0x0800bba5
 800bb40:	0800bb21 	.word	0x0800bb21
 800bb44:	0800bb21 	.word	0x0800bb21
 800bb48:	0800bb21 	.word	0x0800bb21
 800bb4c:	0800bb21 	.word	0x0800bb21
 800bb50:	0800bba5 	.word	0x0800bba5
 800bb54:	0800bb21 	.word	0x0800bb21
 800bb58:	0800bb21 	.word	0x0800bb21
 800bb5c:	0800bb21 	.word	0x0800bb21
 800bb60:	0800bb21 	.word	0x0800bb21
 800bb64:	0800bca9 	.word	0x0800bca9
 800bb68:	0800bbd1 	.word	0x0800bbd1
 800bb6c:	0800bc63 	.word	0x0800bc63
 800bb70:	0800bb21 	.word	0x0800bb21
 800bb74:	0800bb21 	.word	0x0800bb21
 800bb78:	0800bccb 	.word	0x0800bccb
 800bb7c:	0800bb21 	.word	0x0800bb21
 800bb80:	0800bbd1 	.word	0x0800bbd1
 800bb84:	0800bb21 	.word	0x0800bb21
 800bb88:	0800bb21 	.word	0x0800bb21
 800bb8c:	0800bc6b 	.word	0x0800bc6b
 800bb90:	682b      	ldr	r3, [r5, #0]
 800bb92:	1d1a      	adds	r2, r3, #4
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	602a      	str	r2, [r5, #0]
 800bb98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bba0:	2301      	movs	r3, #1
 800bba2:	e09f      	b.n	800bce4 <_printf_i+0x1ec>
 800bba4:	6820      	ldr	r0, [r4, #0]
 800bba6:	682b      	ldr	r3, [r5, #0]
 800bba8:	0607      	lsls	r7, r0, #24
 800bbaa:	f103 0104 	add.w	r1, r3, #4
 800bbae:	6029      	str	r1, [r5, #0]
 800bbb0:	d501      	bpl.n	800bbb6 <_printf_i+0xbe>
 800bbb2:	681e      	ldr	r6, [r3, #0]
 800bbb4:	e003      	b.n	800bbbe <_printf_i+0xc6>
 800bbb6:	0646      	lsls	r6, r0, #25
 800bbb8:	d5fb      	bpl.n	800bbb2 <_printf_i+0xba>
 800bbba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bbbe:	2e00      	cmp	r6, #0
 800bbc0:	da03      	bge.n	800bbca <_printf_i+0xd2>
 800bbc2:	232d      	movs	r3, #45	; 0x2d
 800bbc4:	4276      	negs	r6, r6
 800bbc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbca:	485a      	ldr	r0, [pc, #360]	; (800bd34 <_printf_i+0x23c>)
 800bbcc:	230a      	movs	r3, #10
 800bbce:	e012      	b.n	800bbf6 <_printf_i+0xfe>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	6820      	ldr	r0, [r4, #0]
 800bbd4:	1d19      	adds	r1, r3, #4
 800bbd6:	6029      	str	r1, [r5, #0]
 800bbd8:	0605      	lsls	r5, r0, #24
 800bbda:	d501      	bpl.n	800bbe0 <_printf_i+0xe8>
 800bbdc:	681e      	ldr	r6, [r3, #0]
 800bbde:	e002      	b.n	800bbe6 <_printf_i+0xee>
 800bbe0:	0641      	lsls	r1, r0, #25
 800bbe2:	d5fb      	bpl.n	800bbdc <_printf_i+0xe4>
 800bbe4:	881e      	ldrh	r6, [r3, #0]
 800bbe6:	4853      	ldr	r0, [pc, #332]	; (800bd34 <_printf_i+0x23c>)
 800bbe8:	2f6f      	cmp	r7, #111	; 0x6f
 800bbea:	bf0c      	ite	eq
 800bbec:	2308      	moveq	r3, #8
 800bbee:	230a      	movne	r3, #10
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbf6:	6865      	ldr	r5, [r4, #4]
 800bbf8:	60a5      	str	r5, [r4, #8]
 800bbfa:	2d00      	cmp	r5, #0
 800bbfc:	bfa2      	ittt	ge
 800bbfe:	6821      	ldrge	r1, [r4, #0]
 800bc00:	f021 0104 	bicge.w	r1, r1, #4
 800bc04:	6021      	strge	r1, [r4, #0]
 800bc06:	b90e      	cbnz	r6, 800bc0c <_printf_i+0x114>
 800bc08:	2d00      	cmp	r5, #0
 800bc0a:	d04b      	beq.n	800bca4 <_printf_i+0x1ac>
 800bc0c:	4615      	mov	r5, r2
 800bc0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc12:	fb03 6711 	mls	r7, r3, r1, r6
 800bc16:	5dc7      	ldrb	r7, [r0, r7]
 800bc18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc1c:	4637      	mov	r7, r6
 800bc1e:	42bb      	cmp	r3, r7
 800bc20:	460e      	mov	r6, r1
 800bc22:	d9f4      	bls.n	800bc0e <_printf_i+0x116>
 800bc24:	2b08      	cmp	r3, #8
 800bc26:	d10b      	bne.n	800bc40 <_printf_i+0x148>
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	07de      	lsls	r6, r3, #31
 800bc2c:	d508      	bpl.n	800bc40 <_printf_i+0x148>
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	6861      	ldr	r1, [r4, #4]
 800bc32:	4299      	cmp	r1, r3
 800bc34:	bfde      	ittt	le
 800bc36:	2330      	movle	r3, #48	; 0x30
 800bc38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc40:	1b52      	subs	r2, r2, r5
 800bc42:	6122      	str	r2, [r4, #16]
 800bc44:	f8cd a000 	str.w	sl, [sp]
 800bc48:	464b      	mov	r3, r9
 800bc4a:	aa03      	add	r2, sp, #12
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	4640      	mov	r0, r8
 800bc50:	f7ff fee4 	bl	800ba1c <_printf_common>
 800bc54:	3001      	adds	r0, #1
 800bc56:	d14a      	bne.n	800bcee <_printf_i+0x1f6>
 800bc58:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5c:	b004      	add	sp, #16
 800bc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc62:	6823      	ldr	r3, [r4, #0]
 800bc64:	f043 0320 	orr.w	r3, r3, #32
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	4833      	ldr	r0, [pc, #204]	; (800bd38 <_printf_i+0x240>)
 800bc6c:	2778      	movs	r7, #120	; 0x78
 800bc6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc72:	6823      	ldr	r3, [r4, #0]
 800bc74:	6829      	ldr	r1, [r5, #0]
 800bc76:	061f      	lsls	r7, r3, #24
 800bc78:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc7c:	d402      	bmi.n	800bc84 <_printf_i+0x18c>
 800bc7e:	065f      	lsls	r7, r3, #25
 800bc80:	bf48      	it	mi
 800bc82:	b2b6      	uxthmi	r6, r6
 800bc84:	07df      	lsls	r7, r3, #31
 800bc86:	bf48      	it	mi
 800bc88:	f043 0320 	orrmi.w	r3, r3, #32
 800bc8c:	6029      	str	r1, [r5, #0]
 800bc8e:	bf48      	it	mi
 800bc90:	6023      	strmi	r3, [r4, #0]
 800bc92:	b91e      	cbnz	r6, 800bc9c <_printf_i+0x1a4>
 800bc94:	6823      	ldr	r3, [r4, #0]
 800bc96:	f023 0320 	bic.w	r3, r3, #32
 800bc9a:	6023      	str	r3, [r4, #0]
 800bc9c:	2310      	movs	r3, #16
 800bc9e:	e7a7      	b.n	800bbf0 <_printf_i+0xf8>
 800bca0:	4824      	ldr	r0, [pc, #144]	; (800bd34 <_printf_i+0x23c>)
 800bca2:	e7e4      	b.n	800bc6e <_printf_i+0x176>
 800bca4:	4615      	mov	r5, r2
 800bca6:	e7bd      	b.n	800bc24 <_printf_i+0x12c>
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	6826      	ldr	r6, [r4, #0]
 800bcac:	6961      	ldr	r1, [r4, #20]
 800bcae:	1d18      	adds	r0, r3, #4
 800bcb0:	6028      	str	r0, [r5, #0]
 800bcb2:	0635      	lsls	r5, r6, #24
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	d501      	bpl.n	800bcbc <_printf_i+0x1c4>
 800bcb8:	6019      	str	r1, [r3, #0]
 800bcba:	e002      	b.n	800bcc2 <_printf_i+0x1ca>
 800bcbc:	0670      	lsls	r0, r6, #25
 800bcbe:	d5fb      	bpl.n	800bcb8 <_printf_i+0x1c0>
 800bcc0:	8019      	strh	r1, [r3, #0]
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	6123      	str	r3, [r4, #16]
 800bcc6:	4615      	mov	r5, r2
 800bcc8:	e7bc      	b.n	800bc44 <_printf_i+0x14c>
 800bcca:	682b      	ldr	r3, [r5, #0]
 800bccc:	1d1a      	adds	r2, r3, #4
 800bcce:	602a      	str	r2, [r5, #0]
 800bcd0:	681d      	ldr	r5, [r3, #0]
 800bcd2:	6862      	ldr	r2, [r4, #4]
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	f7f4 fac2 	bl	8000260 <memchr>
 800bcdc:	b108      	cbz	r0, 800bce2 <_printf_i+0x1ea>
 800bcde:	1b40      	subs	r0, r0, r5
 800bce0:	6060      	str	r0, [r4, #4]
 800bce2:	6863      	ldr	r3, [r4, #4]
 800bce4:	6123      	str	r3, [r4, #16]
 800bce6:	2300      	movs	r3, #0
 800bce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcec:	e7aa      	b.n	800bc44 <_printf_i+0x14c>
 800bcee:	6923      	ldr	r3, [r4, #16]
 800bcf0:	462a      	mov	r2, r5
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	4640      	mov	r0, r8
 800bcf6:	47d0      	blx	sl
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d0ad      	beq.n	800bc58 <_printf_i+0x160>
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	079b      	lsls	r3, r3, #30
 800bd00:	d413      	bmi.n	800bd2a <_printf_i+0x232>
 800bd02:	68e0      	ldr	r0, [r4, #12]
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	4298      	cmp	r0, r3
 800bd08:	bfb8      	it	lt
 800bd0a:	4618      	movlt	r0, r3
 800bd0c:	e7a6      	b.n	800bc5c <_printf_i+0x164>
 800bd0e:	2301      	movs	r3, #1
 800bd10:	4632      	mov	r2, r6
 800bd12:	4649      	mov	r1, r9
 800bd14:	4640      	mov	r0, r8
 800bd16:	47d0      	blx	sl
 800bd18:	3001      	adds	r0, #1
 800bd1a:	d09d      	beq.n	800bc58 <_printf_i+0x160>
 800bd1c:	3501      	adds	r5, #1
 800bd1e:	68e3      	ldr	r3, [r4, #12]
 800bd20:	9903      	ldr	r1, [sp, #12]
 800bd22:	1a5b      	subs	r3, r3, r1
 800bd24:	42ab      	cmp	r3, r5
 800bd26:	dcf2      	bgt.n	800bd0e <_printf_i+0x216>
 800bd28:	e7eb      	b.n	800bd02 <_printf_i+0x20a>
 800bd2a:	2500      	movs	r5, #0
 800bd2c:	f104 0619 	add.w	r6, r4, #25
 800bd30:	e7f5      	b.n	800bd1e <_printf_i+0x226>
 800bd32:	bf00      	nop
 800bd34:	08018649 	.word	0x08018649
 800bd38:	0801865a 	.word	0x0801865a

0800bd3c <_scanf_float>:
 800bd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd40:	b087      	sub	sp, #28
 800bd42:	4617      	mov	r7, r2
 800bd44:	9303      	str	r3, [sp, #12]
 800bd46:	688b      	ldr	r3, [r1, #8]
 800bd48:	1e5a      	subs	r2, r3, #1
 800bd4a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bd4e:	bf83      	ittte	hi
 800bd50:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bd54:	195b      	addhi	r3, r3, r5
 800bd56:	9302      	strhi	r3, [sp, #8]
 800bd58:	2300      	movls	r3, #0
 800bd5a:	bf86      	itte	hi
 800bd5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bd60:	608b      	strhi	r3, [r1, #8]
 800bd62:	9302      	strls	r3, [sp, #8]
 800bd64:	680b      	ldr	r3, [r1, #0]
 800bd66:	468b      	mov	fp, r1
 800bd68:	2500      	movs	r5, #0
 800bd6a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bd6e:	f84b 3b1c 	str.w	r3, [fp], #28
 800bd72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bd76:	4680      	mov	r8, r0
 800bd78:	460c      	mov	r4, r1
 800bd7a:	465e      	mov	r6, fp
 800bd7c:	46aa      	mov	sl, r5
 800bd7e:	46a9      	mov	r9, r5
 800bd80:	9501      	str	r5, [sp, #4]
 800bd82:	68a2      	ldr	r2, [r4, #8]
 800bd84:	b152      	cbz	r2, 800bd9c <_scanf_float+0x60>
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	2b4e      	cmp	r3, #78	; 0x4e
 800bd8c:	d864      	bhi.n	800be58 <_scanf_float+0x11c>
 800bd8e:	2b40      	cmp	r3, #64	; 0x40
 800bd90:	d83c      	bhi.n	800be0c <_scanf_float+0xd0>
 800bd92:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bd96:	b2c8      	uxtb	r0, r1
 800bd98:	280e      	cmp	r0, #14
 800bd9a:	d93a      	bls.n	800be12 <_scanf_float+0xd6>
 800bd9c:	f1b9 0f00 	cmp.w	r9, #0
 800bda0:	d003      	beq.n	800bdaa <_scanf_float+0x6e>
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdae:	f1ba 0f01 	cmp.w	sl, #1
 800bdb2:	f200 8113 	bhi.w	800bfdc <_scanf_float+0x2a0>
 800bdb6:	455e      	cmp	r6, fp
 800bdb8:	f200 8105 	bhi.w	800bfc6 <_scanf_float+0x28a>
 800bdbc:	2501      	movs	r5, #1
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	b007      	add	sp, #28
 800bdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bdca:	2a0d      	cmp	r2, #13
 800bdcc:	d8e6      	bhi.n	800bd9c <_scanf_float+0x60>
 800bdce:	a101      	add	r1, pc, #4	; (adr r1, 800bdd4 <_scanf_float+0x98>)
 800bdd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bdd4:	0800bf13 	.word	0x0800bf13
 800bdd8:	0800bd9d 	.word	0x0800bd9d
 800bddc:	0800bd9d 	.word	0x0800bd9d
 800bde0:	0800bd9d 	.word	0x0800bd9d
 800bde4:	0800bf73 	.word	0x0800bf73
 800bde8:	0800bf4b 	.word	0x0800bf4b
 800bdec:	0800bd9d 	.word	0x0800bd9d
 800bdf0:	0800bd9d 	.word	0x0800bd9d
 800bdf4:	0800bf21 	.word	0x0800bf21
 800bdf8:	0800bd9d 	.word	0x0800bd9d
 800bdfc:	0800bd9d 	.word	0x0800bd9d
 800be00:	0800bd9d 	.word	0x0800bd9d
 800be04:	0800bd9d 	.word	0x0800bd9d
 800be08:	0800bed9 	.word	0x0800bed9
 800be0c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800be10:	e7db      	b.n	800bdca <_scanf_float+0x8e>
 800be12:	290e      	cmp	r1, #14
 800be14:	d8c2      	bhi.n	800bd9c <_scanf_float+0x60>
 800be16:	a001      	add	r0, pc, #4	; (adr r0, 800be1c <_scanf_float+0xe0>)
 800be18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800be1c:	0800becb 	.word	0x0800becb
 800be20:	0800bd9d 	.word	0x0800bd9d
 800be24:	0800becb 	.word	0x0800becb
 800be28:	0800bf5f 	.word	0x0800bf5f
 800be2c:	0800bd9d 	.word	0x0800bd9d
 800be30:	0800be79 	.word	0x0800be79
 800be34:	0800beb5 	.word	0x0800beb5
 800be38:	0800beb5 	.word	0x0800beb5
 800be3c:	0800beb5 	.word	0x0800beb5
 800be40:	0800beb5 	.word	0x0800beb5
 800be44:	0800beb5 	.word	0x0800beb5
 800be48:	0800beb5 	.word	0x0800beb5
 800be4c:	0800beb5 	.word	0x0800beb5
 800be50:	0800beb5 	.word	0x0800beb5
 800be54:	0800beb5 	.word	0x0800beb5
 800be58:	2b6e      	cmp	r3, #110	; 0x6e
 800be5a:	d809      	bhi.n	800be70 <_scanf_float+0x134>
 800be5c:	2b60      	cmp	r3, #96	; 0x60
 800be5e:	d8b2      	bhi.n	800bdc6 <_scanf_float+0x8a>
 800be60:	2b54      	cmp	r3, #84	; 0x54
 800be62:	d077      	beq.n	800bf54 <_scanf_float+0x218>
 800be64:	2b59      	cmp	r3, #89	; 0x59
 800be66:	d199      	bne.n	800bd9c <_scanf_float+0x60>
 800be68:	2d07      	cmp	r5, #7
 800be6a:	d197      	bne.n	800bd9c <_scanf_float+0x60>
 800be6c:	2508      	movs	r5, #8
 800be6e:	e029      	b.n	800bec4 <_scanf_float+0x188>
 800be70:	2b74      	cmp	r3, #116	; 0x74
 800be72:	d06f      	beq.n	800bf54 <_scanf_float+0x218>
 800be74:	2b79      	cmp	r3, #121	; 0x79
 800be76:	e7f6      	b.n	800be66 <_scanf_float+0x12a>
 800be78:	6821      	ldr	r1, [r4, #0]
 800be7a:	05c8      	lsls	r0, r1, #23
 800be7c:	d51a      	bpl.n	800beb4 <_scanf_float+0x178>
 800be7e:	9b02      	ldr	r3, [sp, #8]
 800be80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800be84:	6021      	str	r1, [r4, #0]
 800be86:	f109 0901 	add.w	r9, r9, #1
 800be8a:	b11b      	cbz	r3, 800be94 <_scanf_float+0x158>
 800be8c:	3b01      	subs	r3, #1
 800be8e:	3201      	adds	r2, #1
 800be90:	9302      	str	r3, [sp, #8]
 800be92:	60a2      	str	r2, [r4, #8]
 800be94:	68a3      	ldr	r3, [r4, #8]
 800be96:	3b01      	subs	r3, #1
 800be98:	60a3      	str	r3, [r4, #8]
 800be9a:	6923      	ldr	r3, [r4, #16]
 800be9c:	3301      	adds	r3, #1
 800be9e:	6123      	str	r3, [r4, #16]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	3b01      	subs	r3, #1
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	607b      	str	r3, [r7, #4]
 800bea8:	f340 8084 	ble.w	800bfb4 <_scanf_float+0x278>
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	3301      	adds	r3, #1
 800beb0:	603b      	str	r3, [r7, #0]
 800beb2:	e766      	b.n	800bd82 <_scanf_float+0x46>
 800beb4:	eb1a 0f05 	cmn.w	sl, r5
 800beb8:	f47f af70 	bne.w	800bd9c <_scanf_float+0x60>
 800bebc:	6822      	ldr	r2, [r4, #0]
 800bebe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bec2:	6022      	str	r2, [r4, #0]
 800bec4:	f806 3b01 	strb.w	r3, [r6], #1
 800bec8:	e7e4      	b.n	800be94 <_scanf_float+0x158>
 800beca:	6822      	ldr	r2, [r4, #0]
 800becc:	0610      	lsls	r0, r2, #24
 800bece:	f57f af65 	bpl.w	800bd9c <_scanf_float+0x60>
 800bed2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bed6:	e7f4      	b.n	800bec2 <_scanf_float+0x186>
 800bed8:	f1ba 0f00 	cmp.w	sl, #0
 800bedc:	d10e      	bne.n	800befc <_scanf_float+0x1c0>
 800bede:	f1b9 0f00 	cmp.w	r9, #0
 800bee2:	d10e      	bne.n	800bf02 <_scanf_float+0x1c6>
 800bee4:	6822      	ldr	r2, [r4, #0]
 800bee6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800beea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800beee:	d108      	bne.n	800bf02 <_scanf_float+0x1c6>
 800bef0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bef4:	6022      	str	r2, [r4, #0]
 800bef6:	f04f 0a01 	mov.w	sl, #1
 800befa:	e7e3      	b.n	800bec4 <_scanf_float+0x188>
 800befc:	f1ba 0f02 	cmp.w	sl, #2
 800bf00:	d055      	beq.n	800bfae <_scanf_float+0x272>
 800bf02:	2d01      	cmp	r5, #1
 800bf04:	d002      	beq.n	800bf0c <_scanf_float+0x1d0>
 800bf06:	2d04      	cmp	r5, #4
 800bf08:	f47f af48 	bne.w	800bd9c <_scanf_float+0x60>
 800bf0c:	3501      	adds	r5, #1
 800bf0e:	b2ed      	uxtb	r5, r5
 800bf10:	e7d8      	b.n	800bec4 <_scanf_float+0x188>
 800bf12:	f1ba 0f01 	cmp.w	sl, #1
 800bf16:	f47f af41 	bne.w	800bd9c <_scanf_float+0x60>
 800bf1a:	f04f 0a02 	mov.w	sl, #2
 800bf1e:	e7d1      	b.n	800bec4 <_scanf_float+0x188>
 800bf20:	b97d      	cbnz	r5, 800bf42 <_scanf_float+0x206>
 800bf22:	f1b9 0f00 	cmp.w	r9, #0
 800bf26:	f47f af3c 	bne.w	800bda2 <_scanf_float+0x66>
 800bf2a:	6822      	ldr	r2, [r4, #0]
 800bf2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bf30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bf34:	f47f af39 	bne.w	800bdaa <_scanf_float+0x6e>
 800bf38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bf3c:	6022      	str	r2, [r4, #0]
 800bf3e:	2501      	movs	r5, #1
 800bf40:	e7c0      	b.n	800bec4 <_scanf_float+0x188>
 800bf42:	2d03      	cmp	r5, #3
 800bf44:	d0e2      	beq.n	800bf0c <_scanf_float+0x1d0>
 800bf46:	2d05      	cmp	r5, #5
 800bf48:	e7de      	b.n	800bf08 <_scanf_float+0x1cc>
 800bf4a:	2d02      	cmp	r5, #2
 800bf4c:	f47f af26 	bne.w	800bd9c <_scanf_float+0x60>
 800bf50:	2503      	movs	r5, #3
 800bf52:	e7b7      	b.n	800bec4 <_scanf_float+0x188>
 800bf54:	2d06      	cmp	r5, #6
 800bf56:	f47f af21 	bne.w	800bd9c <_scanf_float+0x60>
 800bf5a:	2507      	movs	r5, #7
 800bf5c:	e7b2      	b.n	800bec4 <_scanf_float+0x188>
 800bf5e:	6822      	ldr	r2, [r4, #0]
 800bf60:	0591      	lsls	r1, r2, #22
 800bf62:	f57f af1b 	bpl.w	800bd9c <_scanf_float+0x60>
 800bf66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bf6a:	6022      	str	r2, [r4, #0]
 800bf6c:	f8cd 9004 	str.w	r9, [sp, #4]
 800bf70:	e7a8      	b.n	800bec4 <_scanf_float+0x188>
 800bf72:	6822      	ldr	r2, [r4, #0]
 800bf74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bf78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bf7c:	d006      	beq.n	800bf8c <_scanf_float+0x250>
 800bf7e:	0550      	lsls	r0, r2, #21
 800bf80:	f57f af0c 	bpl.w	800bd9c <_scanf_float+0x60>
 800bf84:	f1b9 0f00 	cmp.w	r9, #0
 800bf88:	f43f af0f 	beq.w	800bdaa <_scanf_float+0x6e>
 800bf8c:	0591      	lsls	r1, r2, #22
 800bf8e:	bf58      	it	pl
 800bf90:	9901      	ldrpl	r1, [sp, #4]
 800bf92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bf96:	bf58      	it	pl
 800bf98:	eba9 0101 	subpl.w	r1, r9, r1
 800bf9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bfa0:	bf58      	it	pl
 800bfa2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bfa6:	6022      	str	r2, [r4, #0]
 800bfa8:	f04f 0900 	mov.w	r9, #0
 800bfac:	e78a      	b.n	800bec4 <_scanf_float+0x188>
 800bfae:	f04f 0a03 	mov.w	sl, #3
 800bfb2:	e787      	b.n	800bec4 <_scanf_float+0x188>
 800bfb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bfb8:	4639      	mov	r1, r7
 800bfba:	4640      	mov	r0, r8
 800bfbc:	4798      	blx	r3
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	f43f aedf 	beq.w	800bd82 <_scanf_float+0x46>
 800bfc4:	e6ea      	b.n	800bd9c <_scanf_float+0x60>
 800bfc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bfca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bfce:	463a      	mov	r2, r7
 800bfd0:	4640      	mov	r0, r8
 800bfd2:	4798      	blx	r3
 800bfd4:	6923      	ldr	r3, [r4, #16]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	6123      	str	r3, [r4, #16]
 800bfda:	e6ec      	b.n	800bdb6 <_scanf_float+0x7a>
 800bfdc:	1e6b      	subs	r3, r5, #1
 800bfde:	2b06      	cmp	r3, #6
 800bfe0:	d825      	bhi.n	800c02e <_scanf_float+0x2f2>
 800bfe2:	2d02      	cmp	r5, #2
 800bfe4:	d836      	bhi.n	800c054 <_scanf_float+0x318>
 800bfe6:	455e      	cmp	r6, fp
 800bfe8:	f67f aee8 	bls.w	800bdbc <_scanf_float+0x80>
 800bfec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bff0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bff4:	463a      	mov	r2, r7
 800bff6:	4640      	mov	r0, r8
 800bff8:	4798      	blx	r3
 800bffa:	6923      	ldr	r3, [r4, #16]
 800bffc:	3b01      	subs	r3, #1
 800bffe:	6123      	str	r3, [r4, #16]
 800c000:	e7f1      	b.n	800bfe6 <_scanf_float+0x2aa>
 800c002:	9802      	ldr	r0, [sp, #8]
 800c004:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c008:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c00c:	9002      	str	r0, [sp, #8]
 800c00e:	463a      	mov	r2, r7
 800c010:	4640      	mov	r0, r8
 800c012:	4798      	blx	r3
 800c014:	6923      	ldr	r3, [r4, #16]
 800c016:	3b01      	subs	r3, #1
 800c018:	6123      	str	r3, [r4, #16]
 800c01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c01e:	fa5f fa8a 	uxtb.w	sl, sl
 800c022:	f1ba 0f02 	cmp.w	sl, #2
 800c026:	d1ec      	bne.n	800c002 <_scanf_float+0x2c6>
 800c028:	3d03      	subs	r5, #3
 800c02a:	b2ed      	uxtb	r5, r5
 800c02c:	1b76      	subs	r6, r6, r5
 800c02e:	6823      	ldr	r3, [r4, #0]
 800c030:	05da      	lsls	r2, r3, #23
 800c032:	d52f      	bpl.n	800c094 <_scanf_float+0x358>
 800c034:	055b      	lsls	r3, r3, #21
 800c036:	d510      	bpl.n	800c05a <_scanf_float+0x31e>
 800c038:	455e      	cmp	r6, fp
 800c03a:	f67f aebf 	bls.w	800bdbc <_scanf_float+0x80>
 800c03e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c042:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c046:	463a      	mov	r2, r7
 800c048:	4640      	mov	r0, r8
 800c04a:	4798      	blx	r3
 800c04c:	6923      	ldr	r3, [r4, #16]
 800c04e:	3b01      	subs	r3, #1
 800c050:	6123      	str	r3, [r4, #16]
 800c052:	e7f1      	b.n	800c038 <_scanf_float+0x2fc>
 800c054:	46aa      	mov	sl, r5
 800c056:	9602      	str	r6, [sp, #8]
 800c058:	e7df      	b.n	800c01a <_scanf_float+0x2de>
 800c05a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c05e:	6923      	ldr	r3, [r4, #16]
 800c060:	2965      	cmp	r1, #101	; 0x65
 800c062:	f103 33ff 	add.w	r3, r3, #4294967295
 800c066:	f106 35ff 	add.w	r5, r6, #4294967295
 800c06a:	6123      	str	r3, [r4, #16]
 800c06c:	d00c      	beq.n	800c088 <_scanf_float+0x34c>
 800c06e:	2945      	cmp	r1, #69	; 0x45
 800c070:	d00a      	beq.n	800c088 <_scanf_float+0x34c>
 800c072:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c076:	463a      	mov	r2, r7
 800c078:	4640      	mov	r0, r8
 800c07a:	4798      	blx	r3
 800c07c:	6923      	ldr	r3, [r4, #16]
 800c07e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c082:	3b01      	subs	r3, #1
 800c084:	1eb5      	subs	r5, r6, #2
 800c086:	6123      	str	r3, [r4, #16]
 800c088:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c08c:	463a      	mov	r2, r7
 800c08e:	4640      	mov	r0, r8
 800c090:	4798      	blx	r3
 800c092:	462e      	mov	r6, r5
 800c094:	6825      	ldr	r5, [r4, #0]
 800c096:	f015 0510 	ands.w	r5, r5, #16
 800c09a:	d14d      	bne.n	800c138 <_scanf_float+0x3fc>
 800c09c:	7035      	strb	r5, [r6, #0]
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c0a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0a8:	d11a      	bne.n	800c0e0 <_scanf_float+0x3a4>
 800c0aa:	9b01      	ldr	r3, [sp, #4]
 800c0ac:	454b      	cmp	r3, r9
 800c0ae:	eba3 0209 	sub.w	r2, r3, r9
 800c0b2:	d122      	bne.n	800c0fa <_scanf_float+0x3be>
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	4659      	mov	r1, fp
 800c0b8:	4640      	mov	r0, r8
 800c0ba:	f002 fca3 	bl	800ea04 <_strtod_r>
 800c0be:	9b03      	ldr	r3, [sp, #12]
 800c0c0:	6821      	ldr	r1, [r4, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f011 0f02 	tst.w	r1, #2
 800c0c8:	f103 0204 	add.w	r2, r3, #4
 800c0cc:	d020      	beq.n	800c110 <_scanf_float+0x3d4>
 800c0ce:	9903      	ldr	r1, [sp, #12]
 800c0d0:	600a      	str	r2, [r1, #0]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	ed83 0b00 	vstr	d0, [r3]
 800c0d8:	68e3      	ldr	r3, [r4, #12]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	60e3      	str	r3, [r4, #12]
 800c0de:	e66e      	b.n	800bdbe <_scanf_float+0x82>
 800c0e0:	9b04      	ldr	r3, [sp, #16]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d0e6      	beq.n	800c0b4 <_scanf_float+0x378>
 800c0e6:	9905      	ldr	r1, [sp, #20]
 800c0e8:	230a      	movs	r3, #10
 800c0ea:	462a      	mov	r2, r5
 800c0ec:	3101      	adds	r1, #1
 800c0ee:	4640      	mov	r0, r8
 800c0f0:	f7ff f9dc 	bl	800b4ac <_strtol_r>
 800c0f4:	9b04      	ldr	r3, [sp, #16]
 800c0f6:	9e05      	ldr	r6, [sp, #20]
 800c0f8:	1ac2      	subs	r2, r0, r3
 800c0fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c0fe:	429e      	cmp	r6, r3
 800c100:	bf28      	it	cs
 800c102:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c106:	490d      	ldr	r1, [pc, #52]	; (800c13c <_scanf_float+0x400>)
 800c108:	4630      	mov	r0, r6
 800c10a:	f000 fa0b 	bl	800c524 <siprintf>
 800c10e:	e7d1      	b.n	800c0b4 <_scanf_float+0x378>
 800c110:	f011 0f04 	tst.w	r1, #4
 800c114:	9903      	ldr	r1, [sp, #12]
 800c116:	600a      	str	r2, [r1, #0]
 800c118:	d1db      	bne.n	800c0d2 <_scanf_float+0x396>
 800c11a:	eeb4 0b40 	vcmp.f64	d0, d0
 800c11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c122:	681e      	ldr	r6, [r3, #0]
 800c124:	d705      	bvc.n	800c132 <_scanf_float+0x3f6>
 800c126:	4806      	ldr	r0, [pc, #24]	; (800c140 <_scanf_float+0x404>)
 800c128:	f000 fbb0 	bl	800c88c <nanf>
 800c12c:	ed86 0a00 	vstr	s0, [r6]
 800c130:	e7d2      	b.n	800c0d8 <_scanf_float+0x39c>
 800c132:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c136:	e7f9      	b.n	800c12c <_scanf_float+0x3f0>
 800c138:	2500      	movs	r5, #0
 800c13a:	e640      	b.n	800bdbe <_scanf_float+0x82>
 800c13c:	0801866b 	.word	0x0801866b
 800c140:	08018917 	.word	0x08018917

0800c144 <std>:
 800c144:	2300      	movs	r3, #0
 800c146:	b510      	push	{r4, lr}
 800c148:	4604      	mov	r4, r0
 800c14a:	e9c0 3300 	strd	r3, r3, [r0]
 800c14e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c152:	6083      	str	r3, [r0, #8]
 800c154:	8181      	strh	r1, [r0, #12]
 800c156:	6643      	str	r3, [r0, #100]	; 0x64
 800c158:	81c2      	strh	r2, [r0, #14]
 800c15a:	6183      	str	r3, [r0, #24]
 800c15c:	4619      	mov	r1, r3
 800c15e:	2208      	movs	r2, #8
 800c160:	305c      	adds	r0, #92	; 0x5c
 800c162:	f000 fad7 	bl	800c714 <memset>
 800c166:	4b0d      	ldr	r3, [pc, #52]	; (800c19c <std+0x58>)
 800c168:	6263      	str	r3, [r4, #36]	; 0x24
 800c16a:	4b0d      	ldr	r3, [pc, #52]	; (800c1a0 <std+0x5c>)
 800c16c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c16e:	4b0d      	ldr	r3, [pc, #52]	; (800c1a4 <std+0x60>)
 800c170:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c172:	4b0d      	ldr	r3, [pc, #52]	; (800c1a8 <std+0x64>)
 800c174:	6323      	str	r3, [r4, #48]	; 0x30
 800c176:	4b0d      	ldr	r3, [pc, #52]	; (800c1ac <std+0x68>)
 800c178:	6224      	str	r4, [r4, #32]
 800c17a:	429c      	cmp	r4, r3
 800c17c:	d006      	beq.n	800c18c <std+0x48>
 800c17e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c182:	4294      	cmp	r4, r2
 800c184:	d002      	beq.n	800c18c <std+0x48>
 800c186:	33d0      	adds	r3, #208	; 0xd0
 800c188:	429c      	cmp	r4, r3
 800c18a:	d105      	bne.n	800c198 <std+0x54>
 800c18c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c194:	f000 bb60 	b.w	800c858 <__retarget_lock_init_recursive>
 800c198:	bd10      	pop	{r4, pc}
 800c19a:	bf00      	nop
 800c19c:	0800c565 	.word	0x0800c565
 800c1a0:	0800c587 	.word	0x0800c587
 800c1a4:	0800c5bf 	.word	0x0800c5bf
 800c1a8:	0800c5e3 	.word	0x0800c5e3
 800c1ac:	20003a3c 	.word	0x20003a3c

0800c1b0 <stdio_exit_handler>:
 800c1b0:	4a02      	ldr	r2, [pc, #8]	; (800c1bc <stdio_exit_handler+0xc>)
 800c1b2:	4903      	ldr	r1, [pc, #12]	; (800c1c0 <stdio_exit_handler+0x10>)
 800c1b4:	4803      	ldr	r0, [pc, #12]	; (800c1c4 <stdio_exit_handler+0x14>)
 800c1b6:	f000 b869 	b.w	800c28c <_fwalk_sglue>
 800c1ba:	bf00      	nop
 800c1bc:	20000888 	.word	0x20000888
 800c1c0:	0800f65d 	.word	0x0800f65d
 800c1c4:	20000894 	.word	0x20000894

0800c1c8 <cleanup_stdio>:
 800c1c8:	6841      	ldr	r1, [r0, #4]
 800c1ca:	4b0c      	ldr	r3, [pc, #48]	; (800c1fc <cleanup_stdio+0x34>)
 800c1cc:	4299      	cmp	r1, r3
 800c1ce:	b510      	push	{r4, lr}
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	d001      	beq.n	800c1d8 <cleanup_stdio+0x10>
 800c1d4:	f003 fa42 	bl	800f65c <_fflush_r>
 800c1d8:	68a1      	ldr	r1, [r4, #8]
 800c1da:	4b09      	ldr	r3, [pc, #36]	; (800c200 <cleanup_stdio+0x38>)
 800c1dc:	4299      	cmp	r1, r3
 800c1de:	d002      	beq.n	800c1e6 <cleanup_stdio+0x1e>
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f003 fa3b 	bl	800f65c <_fflush_r>
 800c1e6:	68e1      	ldr	r1, [r4, #12]
 800c1e8:	4b06      	ldr	r3, [pc, #24]	; (800c204 <cleanup_stdio+0x3c>)
 800c1ea:	4299      	cmp	r1, r3
 800c1ec:	d004      	beq.n	800c1f8 <cleanup_stdio+0x30>
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1f4:	f003 ba32 	b.w	800f65c <_fflush_r>
 800c1f8:	bd10      	pop	{r4, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20003a3c 	.word	0x20003a3c
 800c200:	20003aa4 	.word	0x20003aa4
 800c204:	20003b0c 	.word	0x20003b0c

0800c208 <global_stdio_init.part.0>:
 800c208:	b510      	push	{r4, lr}
 800c20a:	4b0b      	ldr	r3, [pc, #44]	; (800c238 <global_stdio_init.part.0+0x30>)
 800c20c:	4c0b      	ldr	r4, [pc, #44]	; (800c23c <global_stdio_init.part.0+0x34>)
 800c20e:	4a0c      	ldr	r2, [pc, #48]	; (800c240 <global_stdio_init.part.0+0x38>)
 800c210:	601a      	str	r2, [r3, #0]
 800c212:	4620      	mov	r0, r4
 800c214:	2200      	movs	r2, #0
 800c216:	2104      	movs	r1, #4
 800c218:	f7ff ff94 	bl	800c144 <std>
 800c21c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c220:	2201      	movs	r2, #1
 800c222:	2109      	movs	r1, #9
 800c224:	f7ff ff8e 	bl	800c144 <std>
 800c228:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c22c:	2202      	movs	r2, #2
 800c22e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c232:	2112      	movs	r1, #18
 800c234:	f7ff bf86 	b.w	800c144 <std>
 800c238:	20003b74 	.word	0x20003b74
 800c23c:	20003a3c 	.word	0x20003a3c
 800c240:	0800c1b1 	.word	0x0800c1b1

0800c244 <__sfp_lock_acquire>:
 800c244:	4801      	ldr	r0, [pc, #4]	; (800c24c <__sfp_lock_acquire+0x8>)
 800c246:	f000 bb08 	b.w	800c85a <__retarget_lock_acquire_recursive>
 800c24a:	bf00      	nop
 800c24c:	20003b7d 	.word	0x20003b7d

0800c250 <__sfp_lock_release>:
 800c250:	4801      	ldr	r0, [pc, #4]	; (800c258 <__sfp_lock_release+0x8>)
 800c252:	f000 bb03 	b.w	800c85c <__retarget_lock_release_recursive>
 800c256:	bf00      	nop
 800c258:	20003b7d 	.word	0x20003b7d

0800c25c <__sinit>:
 800c25c:	b510      	push	{r4, lr}
 800c25e:	4604      	mov	r4, r0
 800c260:	f7ff fff0 	bl	800c244 <__sfp_lock_acquire>
 800c264:	6a23      	ldr	r3, [r4, #32]
 800c266:	b11b      	cbz	r3, 800c270 <__sinit+0x14>
 800c268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c26c:	f7ff bff0 	b.w	800c250 <__sfp_lock_release>
 800c270:	4b04      	ldr	r3, [pc, #16]	; (800c284 <__sinit+0x28>)
 800c272:	6223      	str	r3, [r4, #32]
 800c274:	4b04      	ldr	r3, [pc, #16]	; (800c288 <__sinit+0x2c>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d1f5      	bne.n	800c268 <__sinit+0xc>
 800c27c:	f7ff ffc4 	bl	800c208 <global_stdio_init.part.0>
 800c280:	e7f2      	b.n	800c268 <__sinit+0xc>
 800c282:	bf00      	nop
 800c284:	0800c1c9 	.word	0x0800c1c9
 800c288:	20003b74 	.word	0x20003b74

0800c28c <_fwalk_sglue>:
 800c28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c290:	4607      	mov	r7, r0
 800c292:	4688      	mov	r8, r1
 800c294:	4614      	mov	r4, r2
 800c296:	2600      	movs	r6, #0
 800c298:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c29c:	f1b9 0901 	subs.w	r9, r9, #1
 800c2a0:	d505      	bpl.n	800c2ae <_fwalk_sglue+0x22>
 800c2a2:	6824      	ldr	r4, [r4, #0]
 800c2a4:	2c00      	cmp	r4, #0
 800c2a6:	d1f7      	bne.n	800c298 <_fwalk_sglue+0xc>
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ae:	89ab      	ldrh	r3, [r5, #12]
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d907      	bls.n	800c2c4 <_fwalk_sglue+0x38>
 800c2b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	d003      	beq.n	800c2c4 <_fwalk_sglue+0x38>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	4638      	mov	r0, r7
 800c2c0:	47c0      	blx	r8
 800c2c2:	4306      	orrs	r6, r0
 800c2c4:	3568      	adds	r5, #104	; 0x68
 800c2c6:	e7e9      	b.n	800c29c <_fwalk_sglue+0x10>

0800c2c8 <iprintf>:
 800c2c8:	b40f      	push	{r0, r1, r2, r3}
 800c2ca:	b507      	push	{r0, r1, r2, lr}
 800c2cc:	4906      	ldr	r1, [pc, #24]	; (800c2e8 <iprintf+0x20>)
 800c2ce:	ab04      	add	r3, sp, #16
 800c2d0:	6808      	ldr	r0, [r1, #0]
 800c2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d6:	6881      	ldr	r1, [r0, #8]
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	f002 fd1b 	bl	800ed14 <_vfiprintf_r>
 800c2de:	b003      	add	sp, #12
 800c2e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2e4:	b004      	add	sp, #16
 800c2e6:	4770      	bx	lr
 800c2e8:	200008e0 	.word	0x200008e0

0800c2ec <_puts_r>:
 800c2ec:	6a03      	ldr	r3, [r0, #32]
 800c2ee:	b570      	push	{r4, r5, r6, lr}
 800c2f0:	6884      	ldr	r4, [r0, #8]
 800c2f2:	4605      	mov	r5, r0
 800c2f4:	460e      	mov	r6, r1
 800c2f6:	b90b      	cbnz	r3, 800c2fc <_puts_r+0x10>
 800c2f8:	f7ff ffb0 	bl	800c25c <__sinit>
 800c2fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2fe:	07db      	lsls	r3, r3, #31
 800c300:	d405      	bmi.n	800c30e <_puts_r+0x22>
 800c302:	89a3      	ldrh	r3, [r4, #12]
 800c304:	0598      	lsls	r0, r3, #22
 800c306:	d402      	bmi.n	800c30e <_puts_r+0x22>
 800c308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c30a:	f000 faa6 	bl	800c85a <__retarget_lock_acquire_recursive>
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	0719      	lsls	r1, r3, #28
 800c312:	d513      	bpl.n	800c33c <_puts_r+0x50>
 800c314:	6923      	ldr	r3, [r4, #16]
 800c316:	b18b      	cbz	r3, 800c33c <_puts_r+0x50>
 800c318:	3e01      	subs	r6, #1
 800c31a:	68a3      	ldr	r3, [r4, #8]
 800c31c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c320:	3b01      	subs	r3, #1
 800c322:	60a3      	str	r3, [r4, #8]
 800c324:	b9e9      	cbnz	r1, 800c362 <_puts_r+0x76>
 800c326:	2b00      	cmp	r3, #0
 800c328:	da2e      	bge.n	800c388 <_puts_r+0x9c>
 800c32a:	4622      	mov	r2, r4
 800c32c:	210a      	movs	r1, #10
 800c32e:	4628      	mov	r0, r5
 800c330:	f000 f95b 	bl	800c5ea <__swbuf_r>
 800c334:	3001      	adds	r0, #1
 800c336:	d007      	beq.n	800c348 <_puts_r+0x5c>
 800c338:	250a      	movs	r5, #10
 800c33a:	e007      	b.n	800c34c <_puts_r+0x60>
 800c33c:	4621      	mov	r1, r4
 800c33e:	4628      	mov	r0, r5
 800c340:	f000 f990 	bl	800c664 <__swsetup_r>
 800c344:	2800      	cmp	r0, #0
 800c346:	d0e7      	beq.n	800c318 <_puts_r+0x2c>
 800c348:	f04f 35ff 	mov.w	r5, #4294967295
 800c34c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c34e:	07da      	lsls	r2, r3, #31
 800c350:	d405      	bmi.n	800c35e <_puts_r+0x72>
 800c352:	89a3      	ldrh	r3, [r4, #12]
 800c354:	059b      	lsls	r3, r3, #22
 800c356:	d402      	bmi.n	800c35e <_puts_r+0x72>
 800c358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c35a:	f000 fa7f 	bl	800c85c <__retarget_lock_release_recursive>
 800c35e:	4628      	mov	r0, r5
 800c360:	bd70      	pop	{r4, r5, r6, pc}
 800c362:	2b00      	cmp	r3, #0
 800c364:	da04      	bge.n	800c370 <_puts_r+0x84>
 800c366:	69a2      	ldr	r2, [r4, #24]
 800c368:	429a      	cmp	r2, r3
 800c36a:	dc06      	bgt.n	800c37a <_puts_r+0x8e>
 800c36c:	290a      	cmp	r1, #10
 800c36e:	d004      	beq.n	800c37a <_puts_r+0x8e>
 800c370:	6823      	ldr	r3, [r4, #0]
 800c372:	1c5a      	adds	r2, r3, #1
 800c374:	6022      	str	r2, [r4, #0]
 800c376:	7019      	strb	r1, [r3, #0]
 800c378:	e7cf      	b.n	800c31a <_puts_r+0x2e>
 800c37a:	4622      	mov	r2, r4
 800c37c:	4628      	mov	r0, r5
 800c37e:	f000 f934 	bl	800c5ea <__swbuf_r>
 800c382:	3001      	adds	r0, #1
 800c384:	d1c9      	bne.n	800c31a <_puts_r+0x2e>
 800c386:	e7df      	b.n	800c348 <_puts_r+0x5c>
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	250a      	movs	r5, #10
 800c38c:	1c5a      	adds	r2, r3, #1
 800c38e:	6022      	str	r2, [r4, #0]
 800c390:	701d      	strb	r5, [r3, #0]
 800c392:	e7db      	b.n	800c34c <_puts_r+0x60>

0800c394 <puts>:
 800c394:	4b02      	ldr	r3, [pc, #8]	; (800c3a0 <puts+0xc>)
 800c396:	4601      	mov	r1, r0
 800c398:	6818      	ldr	r0, [r3, #0]
 800c39a:	f7ff bfa7 	b.w	800c2ec <_puts_r>
 800c39e:	bf00      	nop
 800c3a0:	200008e0 	.word	0x200008e0

0800c3a4 <iscanf>:
 800c3a4:	b40f      	push	{r0, r1, r2, r3}
 800c3a6:	b507      	push	{r0, r1, r2, lr}
 800c3a8:	4906      	ldr	r1, [pc, #24]	; (800c3c4 <iscanf+0x20>)
 800c3aa:	ab04      	add	r3, sp, #16
 800c3ac:	6808      	ldr	r0, [r1, #0]
 800c3ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3b2:	6841      	ldr	r1, [r0, #4]
 800c3b4:	9301      	str	r3, [sp, #4]
 800c3b6:	f002 ff69 	bl	800f28c <_vfiscanf_r>
 800c3ba:	b003      	add	sp, #12
 800c3bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3c0:	b004      	add	sp, #16
 800c3c2:	4770      	bx	lr
 800c3c4:	200008e0 	.word	0x200008e0

0800c3c8 <setvbuf>:
 800c3c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3cc:	461d      	mov	r5, r3
 800c3ce:	4b54      	ldr	r3, [pc, #336]	; (800c520 <setvbuf+0x158>)
 800c3d0:	681f      	ldr	r7, [r3, #0]
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	460e      	mov	r6, r1
 800c3d6:	4690      	mov	r8, r2
 800c3d8:	b127      	cbz	r7, 800c3e4 <setvbuf+0x1c>
 800c3da:	6a3b      	ldr	r3, [r7, #32]
 800c3dc:	b913      	cbnz	r3, 800c3e4 <setvbuf+0x1c>
 800c3de:	4638      	mov	r0, r7
 800c3e0:	f7ff ff3c 	bl	800c25c <__sinit>
 800c3e4:	f1b8 0f02 	cmp.w	r8, #2
 800c3e8:	d006      	beq.n	800c3f8 <setvbuf+0x30>
 800c3ea:	f1b8 0f01 	cmp.w	r8, #1
 800c3ee:	f200 8094 	bhi.w	800c51a <setvbuf+0x152>
 800c3f2:	2d00      	cmp	r5, #0
 800c3f4:	f2c0 8091 	blt.w	800c51a <setvbuf+0x152>
 800c3f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3fa:	07da      	lsls	r2, r3, #31
 800c3fc:	d405      	bmi.n	800c40a <setvbuf+0x42>
 800c3fe:	89a3      	ldrh	r3, [r4, #12]
 800c400:	059b      	lsls	r3, r3, #22
 800c402:	d402      	bmi.n	800c40a <setvbuf+0x42>
 800c404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c406:	f000 fa28 	bl	800c85a <__retarget_lock_acquire_recursive>
 800c40a:	4621      	mov	r1, r4
 800c40c:	4638      	mov	r0, r7
 800c40e:	f003 f925 	bl	800f65c <_fflush_r>
 800c412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c414:	b141      	cbz	r1, 800c428 <setvbuf+0x60>
 800c416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c41a:	4299      	cmp	r1, r3
 800c41c:	d002      	beq.n	800c424 <setvbuf+0x5c>
 800c41e:	4638      	mov	r0, r7
 800c420:	f001 f82e 	bl	800d480 <_free_r>
 800c424:	2300      	movs	r3, #0
 800c426:	6363      	str	r3, [r4, #52]	; 0x34
 800c428:	2300      	movs	r3, #0
 800c42a:	61a3      	str	r3, [r4, #24]
 800c42c:	6063      	str	r3, [r4, #4]
 800c42e:	89a3      	ldrh	r3, [r4, #12]
 800c430:	0618      	lsls	r0, r3, #24
 800c432:	d503      	bpl.n	800c43c <setvbuf+0x74>
 800c434:	6921      	ldr	r1, [r4, #16]
 800c436:	4638      	mov	r0, r7
 800c438:	f001 f822 	bl	800d480 <_free_r>
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800c442:	f023 0303 	bic.w	r3, r3, #3
 800c446:	f1b8 0f02 	cmp.w	r8, #2
 800c44a:	81a3      	strh	r3, [r4, #12]
 800c44c:	d05f      	beq.n	800c50e <setvbuf+0x146>
 800c44e:	ab01      	add	r3, sp, #4
 800c450:	466a      	mov	r2, sp
 800c452:	4621      	mov	r1, r4
 800c454:	4638      	mov	r0, r7
 800c456:	f003 f929 	bl	800f6ac <__swhatbuf_r>
 800c45a:	89a3      	ldrh	r3, [r4, #12]
 800c45c:	4318      	orrs	r0, r3
 800c45e:	81a0      	strh	r0, [r4, #12]
 800c460:	bb2d      	cbnz	r5, 800c4ae <setvbuf+0xe6>
 800c462:	9d00      	ldr	r5, [sp, #0]
 800c464:	4628      	mov	r0, r5
 800c466:	f7fe fee3 	bl	800b230 <malloc>
 800c46a:	4606      	mov	r6, r0
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d150      	bne.n	800c512 <setvbuf+0x14a>
 800c470:	f8dd 9000 	ldr.w	r9, [sp]
 800c474:	45a9      	cmp	r9, r5
 800c476:	d13e      	bne.n	800c4f6 <setvbuf+0x12e>
 800c478:	f04f 35ff 	mov.w	r5, #4294967295
 800c47c:	2200      	movs	r2, #0
 800c47e:	60a2      	str	r2, [r4, #8]
 800c480:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800c484:	6022      	str	r2, [r4, #0]
 800c486:	6122      	str	r2, [r4, #16]
 800c488:	2201      	movs	r2, #1
 800c48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c48e:	6162      	str	r2, [r4, #20]
 800c490:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c492:	f043 0302 	orr.w	r3, r3, #2
 800c496:	07d1      	lsls	r1, r2, #31
 800c498:	81a3      	strh	r3, [r4, #12]
 800c49a:	d404      	bmi.n	800c4a6 <setvbuf+0xde>
 800c49c:	059b      	lsls	r3, r3, #22
 800c49e:	d402      	bmi.n	800c4a6 <setvbuf+0xde>
 800c4a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4a2:	f000 f9db 	bl	800c85c <__retarget_lock_release_recursive>
 800c4a6:	4628      	mov	r0, r5
 800c4a8:	b003      	add	sp, #12
 800c4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4ae:	2e00      	cmp	r6, #0
 800c4b0:	d0d8      	beq.n	800c464 <setvbuf+0x9c>
 800c4b2:	6a3b      	ldr	r3, [r7, #32]
 800c4b4:	b913      	cbnz	r3, 800c4bc <setvbuf+0xf4>
 800c4b6:	4638      	mov	r0, r7
 800c4b8:	f7ff fed0 	bl	800c25c <__sinit>
 800c4bc:	f1b8 0f01 	cmp.w	r8, #1
 800c4c0:	bf08      	it	eq
 800c4c2:	89a3      	ldrheq	r3, [r4, #12]
 800c4c4:	6026      	str	r6, [r4, #0]
 800c4c6:	bf04      	itt	eq
 800c4c8:	f043 0301 	orreq.w	r3, r3, #1
 800c4cc:	81a3      	strheq	r3, [r4, #12]
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	f013 0208 	ands.w	r2, r3, #8
 800c4d4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800c4d8:	d01d      	beq.n	800c516 <setvbuf+0x14e>
 800c4da:	07da      	lsls	r2, r3, #31
 800c4dc:	bf41      	itttt	mi
 800c4de:	2200      	movmi	r2, #0
 800c4e0:	426d      	negmi	r5, r5
 800c4e2:	60a2      	strmi	r2, [r4, #8]
 800c4e4:	61a5      	strmi	r5, [r4, #24]
 800c4e6:	bf58      	it	pl
 800c4e8:	60a5      	strpl	r5, [r4, #8]
 800c4ea:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800c4ec:	f015 0501 	ands.w	r5, r5, #1
 800c4f0:	d0d4      	beq.n	800c49c <setvbuf+0xd4>
 800c4f2:	2500      	movs	r5, #0
 800c4f4:	e7d7      	b.n	800c4a6 <setvbuf+0xde>
 800c4f6:	4648      	mov	r0, r9
 800c4f8:	f7fe fe9a 	bl	800b230 <malloc>
 800c4fc:	4606      	mov	r6, r0
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d0ba      	beq.n	800c478 <setvbuf+0xb0>
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c508:	81a3      	strh	r3, [r4, #12]
 800c50a:	464d      	mov	r5, r9
 800c50c:	e7d1      	b.n	800c4b2 <setvbuf+0xea>
 800c50e:	2500      	movs	r5, #0
 800c510:	e7b4      	b.n	800c47c <setvbuf+0xb4>
 800c512:	46a9      	mov	r9, r5
 800c514:	e7f5      	b.n	800c502 <setvbuf+0x13a>
 800c516:	60a2      	str	r2, [r4, #8]
 800c518:	e7e7      	b.n	800c4ea <setvbuf+0x122>
 800c51a:	f04f 35ff 	mov.w	r5, #4294967295
 800c51e:	e7c2      	b.n	800c4a6 <setvbuf+0xde>
 800c520:	200008e0 	.word	0x200008e0

0800c524 <siprintf>:
 800c524:	b40e      	push	{r1, r2, r3}
 800c526:	b500      	push	{lr}
 800c528:	b09c      	sub	sp, #112	; 0x70
 800c52a:	ab1d      	add	r3, sp, #116	; 0x74
 800c52c:	9002      	str	r0, [sp, #8]
 800c52e:	9006      	str	r0, [sp, #24]
 800c530:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c534:	4809      	ldr	r0, [pc, #36]	; (800c55c <siprintf+0x38>)
 800c536:	9107      	str	r1, [sp, #28]
 800c538:	9104      	str	r1, [sp, #16]
 800c53a:	4909      	ldr	r1, [pc, #36]	; (800c560 <siprintf+0x3c>)
 800c53c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c540:	9105      	str	r1, [sp, #20]
 800c542:	6800      	ldr	r0, [r0, #0]
 800c544:	9301      	str	r3, [sp, #4]
 800c546:	a902      	add	r1, sp, #8
 800c548:	f002 fabc 	bl	800eac4 <_svfiprintf_r>
 800c54c:	9b02      	ldr	r3, [sp, #8]
 800c54e:	2200      	movs	r2, #0
 800c550:	701a      	strb	r2, [r3, #0]
 800c552:	b01c      	add	sp, #112	; 0x70
 800c554:	f85d eb04 	ldr.w	lr, [sp], #4
 800c558:	b003      	add	sp, #12
 800c55a:	4770      	bx	lr
 800c55c:	200008e0 	.word	0x200008e0
 800c560:	ffff0208 	.word	0xffff0208

0800c564 <__sread>:
 800c564:	b510      	push	{r4, lr}
 800c566:	460c      	mov	r4, r1
 800c568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c56c:	f000 f916 	bl	800c79c <_read_r>
 800c570:	2800      	cmp	r0, #0
 800c572:	bfab      	itete	ge
 800c574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c576:	89a3      	ldrhlt	r3, [r4, #12]
 800c578:	181b      	addge	r3, r3, r0
 800c57a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c57e:	bfac      	ite	ge
 800c580:	6563      	strge	r3, [r4, #84]	; 0x54
 800c582:	81a3      	strhlt	r3, [r4, #12]
 800c584:	bd10      	pop	{r4, pc}

0800c586 <__swrite>:
 800c586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c58a:	461f      	mov	r7, r3
 800c58c:	898b      	ldrh	r3, [r1, #12]
 800c58e:	05db      	lsls	r3, r3, #23
 800c590:	4605      	mov	r5, r0
 800c592:	460c      	mov	r4, r1
 800c594:	4616      	mov	r6, r2
 800c596:	d505      	bpl.n	800c5a4 <__swrite+0x1e>
 800c598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c59c:	2302      	movs	r3, #2
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f000 f8ea 	bl	800c778 <_lseek_r>
 800c5a4:	89a3      	ldrh	r3, [r4, #12]
 800c5a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5ae:	81a3      	strh	r3, [r4, #12]
 800c5b0:	4632      	mov	r2, r6
 800c5b2:	463b      	mov	r3, r7
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ba:	f000 b911 	b.w	800c7e0 <_write_r>

0800c5be <__sseek>:
 800c5be:	b510      	push	{r4, lr}
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c6:	f000 f8d7 	bl	800c778 <_lseek_r>
 800c5ca:	1c43      	adds	r3, r0, #1
 800c5cc:	89a3      	ldrh	r3, [r4, #12]
 800c5ce:	bf15      	itete	ne
 800c5d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5da:	81a3      	strheq	r3, [r4, #12]
 800c5dc:	bf18      	it	ne
 800c5de:	81a3      	strhne	r3, [r4, #12]
 800c5e0:	bd10      	pop	{r4, pc}

0800c5e2 <__sclose>:
 800c5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e6:	f000 b8b7 	b.w	800c758 <_close_r>

0800c5ea <__swbuf_r>:
 800c5ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ec:	460e      	mov	r6, r1
 800c5ee:	4614      	mov	r4, r2
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	b118      	cbz	r0, 800c5fc <__swbuf_r+0x12>
 800c5f4:	6a03      	ldr	r3, [r0, #32]
 800c5f6:	b90b      	cbnz	r3, 800c5fc <__swbuf_r+0x12>
 800c5f8:	f7ff fe30 	bl	800c25c <__sinit>
 800c5fc:	69a3      	ldr	r3, [r4, #24]
 800c5fe:	60a3      	str	r3, [r4, #8]
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	071a      	lsls	r2, r3, #28
 800c604:	d525      	bpl.n	800c652 <__swbuf_r+0x68>
 800c606:	6923      	ldr	r3, [r4, #16]
 800c608:	b31b      	cbz	r3, 800c652 <__swbuf_r+0x68>
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	6922      	ldr	r2, [r4, #16]
 800c60e:	1a98      	subs	r0, r3, r2
 800c610:	6963      	ldr	r3, [r4, #20]
 800c612:	b2f6      	uxtb	r6, r6
 800c614:	4283      	cmp	r3, r0
 800c616:	4637      	mov	r7, r6
 800c618:	dc04      	bgt.n	800c624 <__swbuf_r+0x3a>
 800c61a:	4621      	mov	r1, r4
 800c61c:	4628      	mov	r0, r5
 800c61e:	f003 f81d 	bl	800f65c <_fflush_r>
 800c622:	b9e0      	cbnz	r0, 800c65e <__swbuf_r+0x74>
 800c624:	68a3      	ldr	r3, [r4, #8]
 800c626:	3b01      	subs	r3, #1
 800c628:	60a3      	str	r3, [r4, #8]
 800c62a:	6823      	ldr	r3, [r4, #0]
 800c62c:	1c5a      	adds	r2, r3, #1
 800c62e:	6022      	str	r2, [r4, #0]
 800c630:	701e      	strb	r6, [r3, #0]
 800c632:	6962      	ldr	r2, [r4, #20]
 800c634:	1c43      	adds	r3, r0, #1
 800c636:	429a      	cmp	r2, r3
 800c638:	d004      	beq.n	800c644 <__swbuf_r+0x5a>
 800c63a:	89a3      	ldrh	r3, [r4, #12]
 800c63c:	07db      	lsls	r3, r3, #31
 800c63e:	d506      	bpl.n	800c64e <__swbuf_r+0x64>
 800c640:	2e0a      	cmp	r6, #10
 800c642:	d104      	bne.n	800c64e <__swbuf_r+0x64>
 800c644:	4621      	mov	r1, r4
 800c646:	4628      	mov	r0, r5
 800c648:	f003 f808 	bl	800f65c <_fflush_r>
 800c64c:	b938      	cbnz	r0, 800c65e <__swbuf_r+0x74>
 800c64e:	4638      	mov	r0, r7
 800c650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c652:	4621      	mov	r1, r4
 800c654:	4628      	mov	r0, r5
 800c656:	f000 f805 	bl	800c664 <__swsetup_r>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d0d5      	beq.n	800c60a <__swbuf_r+0x20>
 800c65e:	f04f 37ff 	mov.w	r7, #4294967295
 800c662:	e7f4      	b.n	800c64e <__swbuf_r+0x64>

0800c664 <__swsetup_r>:
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	4b2a      	ldr	r3, [pc, #168]	; (800c710 <__swsetup_r+0xac>)
 800c668:	4605      	mov	r5, r0
 800c66a:	6818      	ldr	r0, [r3, #0]
 800c66c:	460c      	mov	r4, r1
 800c66e:	b118      	cbz	r0, 800c678 <__swsetup_r+0x14>
 800c670:	6a03      	ldr	r3, [r0, #32]
 800c672:	b90b      	cbnz	r3, 800c678 <__swsetup_r+0x14>
 800c674:	f7ff fdf2 	bl	800c25c <__sinit>
 800c678:	89a3      	ldrh	r3, [r4, #12]
 800c67a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c67e:	0718      	lsls	r0, r3, #28
 800c680:	d422      	bmi.n	800c6c8 <__swsetup_r+0x64>
 800c682:	06d9      	lsls	r1, r3, #27
 800c684:	d407      	bmi.n	800c696 <__swsetup_r+0x32>
 800c686:	2309      	movs	r3, #9
 800c688:	602b      	str	r3, [r5, #0]
 800c68a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c68e:	81a3      	strh	r3, [r4, #12]
 800c690:	f04f 30ff 	mov.w	r0, #4294967295
 800c694:	e034      	b.n	800c700 <__swsetup_r+0x9c>
 800c696:	0758      	lsls	r0, r3, #29
 800c698:	d512      	bpl.n	800c6c0 <__swsetup_r+0x5c>
 800c69a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c69c:	b141      	cbz	r1, 800c6b0 <__swsetup_r+0x4c>
 800c69e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6a2:	4299      	cmp	r1, r3
 800c6a4:	d002      	beq.n	800c6ac <__swsetup_r+0x48>
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	f000 feea 	bl	800d480 <_free_r>
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	6363      	str	r3, [r4, #52]	; 0x34
 800c6b0:	89a3      	ldrh	r3, [r4, #12]
 800c6b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6b6:	81a3      	strh	r3, [r4, #12]
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	6063      	str	r3, [r4, #4]
 800c6bc:	6923      	ldr	r3, [r4, #16]
 800c6be:	6023      	str	r3, [r4, #0]
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	f043 0308 	orr.w	r3, r3, #8
 800c6c6:	81a3      	strh	r3, [r4, #12]
 800c6c8:	6923      	ldr	r3, [r4, #16]
 800c6ca:	b94b      	cbnz	r3, 800c6e0 <__swsetup_r+0x7c>
 800c6cc:	89a3      	ldrh	r3, [r4, #12]
 800c6ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6d6:	d003      	beq.n	800c6e0 <__swsetup_r+0x7c>
 800c6d8:	4621      	mov	r1, r4
 800c6da:	4628      	mov	r0, r5
 800c6dc:	f003 f80c 	bl	800f6f8 <__smakebuf_r>
 800c6e0:	89a0      	ldrh	r0, [r4, #12]
 800c6e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6e6:	f010 0301 	ands.w	r3, r0, #1
 800c6ea:	d00a      	beq.n	800c702 <__swsetup_r+0x9e>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	60a3      	str	r3, [r4, #8]
 800c6f0:	6963      	ldr	r3, [r4, #20]
 800c6f2:	425b      	negs	r3, r3
 800c6f4:	61a3      	str	r3, [r4, #24]
 800c6f6:	6923      	ldr	r3, [r4, #16]
 800c6f8:	b943      	cbnz	r3, 800c70c <__swsetup_r+0xa8>
 800c6fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c6fe:	d1c4      	bne.n	800c68a <__swsetup_r+0x26>
 800c700:	bd38      	pop	{r3, r4, r5, pc}
 800c702:	0781      	lsls	r1, r0, #30
 800c704:	bf58      	it	pl
 800c706:	6963      	ldrpl	r3, [r4, #20]
 800c708:	60a3      	str	r3, [r4, #8]
 800c70a:	e7f4      	b.n	800c6f6 <__swsetup_r+0x92>
 800c70c:	2000      	movs	r0, #0
 800c70e:	e7f7      	b.n	800c700 <__swsetup_r+0x9c>
 800c710:	200008e0 	.word	0x200008e0

0800c714 <memset>:
 800c714:	4402      	add	r2, r0
 800c716:	4603      	mov	r3, r0
 800c718:	4293      	cmp	r3, r2
 800c71a:	d100      	bne.n	800c71e <memset+0xa>
 800c71c:	4770      	bx	lr
 800c71e:	f803 1b01 	strb.w	r1, [r3], #1
 800c722:	e7f9      	b.n	800c718 <memset+0x4>

0800c724 <strstr>:
 800c724:	780a      	ldrb	r2, [r1, #0]
 800c726:	b570      	push	{r4, r5, r6, lr}
 800c728:	b96a      	cbnz	r2, 800c746 <strstr+0x22>
 800c72a:	bd70      	pop	{r4, r5, r6, pc}
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d109      	bne.n	800c744 <strstr+0x20>
 800c730:	460c      	mov	r4, r1
 800c732:	4605      	mov	r5, r0
 800c734:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d0f6      	beq.n	800c72a <strstr+0x6>
 800c73c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c740:	429e      	cmp	r6, r3
 800c742:	d0f7      	beq.n	800c734 <strstr+0x10>
 800c744:	3001      	adds	r0, #1
 800c746:	7803      	ldrb	r3, [r0, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1ef      	bne.n	800c72c <strstr+0x8>
 800c74c:	4618      	mov	r0, r3
 800c74e:	e7ec      	b.n	800c72a <strstr+0x6>

0800c750 <_localeconv_r>:
 800c750:	4800      	ldr	r0, [pc, #0]	; (800c754 <_localeconv_r+0x4>)
 800c752:	4770      	bx	lr
 800c754:	200009d4 	.word	0x200009d4

0800c758 <_close_r>:
 800c758:	b538      	push	{r3, r4, r5, lr}
 800c75a:	4d06      	ldr	r5, [pc, #24]	; (800c774 <_close_r+0x1c>)
 800c75c:	2300      	movs	r3, #0
 800c75e:	4604      	mov	r4, r0
 800c760:	4608      	mov	r0, r1
 800c762:	602b      	str	r3, [r5, #0]
 800c764:	f7f5 f9ca 	bl	8001afc <_close>
 800c768:	1c43      	adds	r3, r0, #1
 800c76a:	d102      	bne.n	800c772 <_close_r+0x1a>
 800c76c:	682b      	ldr	r3, [r5, #0]
 800c76e:	b103      	cbz	r3, 800c772 <_close_r+0x1a>
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	bd38      	pop	{r3, r4, r5, pc}
 800c774:	20003b78 	.word	0x20003b78

0800c778 <_lseek_r>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	4d07      	ldr	r5, [pc, #28]	; (800c798 <_lseek_r+0x20>)
 800c77c:	4604      	mov	r4, r0
 800c77e:	4608      	mov	r0, r1
 800c780:	4611      	mov	r1, r2
 800c782:	2200      	movs	r2, #0
 800c784:	602a      	str	r2, [r5, #0]
 800c786:	461a      	mov	r2, r3
 800c788:	f7f5 f9cf 	bl	8001b2a <_lseek>
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	d102      	bne.n	800c796 <_lseek_r+0x1e>
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	b103      	cbz	r3, 800c796 <_lseek_r+0x1e>
 800c794:	6023      	str	r3, [r4, #0]
 800c796:	bd38      	pop	{r3, r4, r5, pc}
 800c798:	20003b78 	.word	0x20003b78

0800c79c <_read_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	4d07      	ldr	r5, [pc, #28]	; (800c7bc <_read_r+0x20>)
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	4608      	mov	r0, r1
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	602a      	str	r2, [r5, #0]
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	f7f5 f9ce 	bl	8001b4c <_read>
 800c7b0:	1c43      	adds	r3, r0, #1
 800c7b2:	d102      	bne.n	800c7ba <_read_r+0x1e>
 800c7b4:	682b      	ldr	r3, [r5, #0]
 800c7b6:	b103      	cbz	r3, 800c7ba <_read_r+0x1e>
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	bd38      	pop	{r3, r4, r5, pc}
 800c7bc:	20003b78 	.word	0x20003b78

0800c7c0 <_sbrk_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	4d06      	ldr	r5, [pc, #24]	; (800c7dc <_sbrk_r+0x1c>)
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	4608      	mov	r0, r1
 800c7ca:	602b      	str	r3, [r5, #0]
 800c7cc:	f7f5 fc9a 	bl	8002104 <_sbrk>
 800c7d0:	1c43      	adds	r3, r0, #1
 800c7d2:	d102      	bne.n	800c7da <_sbrk_r+0x1a>
 800c7d4:	682b      	ldr	r3, [r5, #0]
 800c7d6:	b103      	cbz	r3, 800c7da <_sbrk_r+0x1a>
 800c7d8:	6023      	str	r3, [r4, #0]
 800c7da:	bd38      	pop	{r3, r4, r5, pc}
 800c7dc:	20003b78 	.word	0x20003b78

0800c7e0 <_write_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4d07      	ldr	r5, [pc, #28]	; (800c800 <_write_r+0x20>)
 800c7e4:	4604      	mov	r4, r0
 800c7e6:	4608      	mov	r0, r1
 800c7e8:	4611      	mov	r1, r2
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	602a      	str	r2, [r5, #0]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	f7f5 f958 	bl	8001aa4 <_write>
 800c7f4:	1c43      	adds	r3, r0, #1
 800c7f6:	d102      	bne.n	800c7fe <_write_r+0x1e>
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	b103      	cbz	r3, 800c7fe <_write_r+0x1e>
 800c7fc:	6023      	str	r3, [r4, #0]
 800c7fe:	bd38      	pop	{r3, r4, r5, pc}
 800c800:	20003b78 	.word	0x20003b78

0800c804 <__errno>:
 800c804:	4b01      	ldr	r3, [pc, #4]	; (800c80c <__errno+0x8>)
 800c806:	6818      	ldr	r0, [r3, #0]
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	200008e0 	.word	0x200008e0

0800c810 <__libc_init_array>:
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	4d0d      	ldr	r5, [pc, #52]	; (800c848 <__libc_init_array+0x38>)
 800c814:	4c0d      	ldr	r4, [pc, #52]	; (800c84c <__libc_init_array+0x3c>)
 800c816:	1b64      	subs	r4, r4, r5
 800c818:	10a4      	asrs	r4, r4, #2
 800c81a:	2600      	movs	r6, #0
 800c81c:	42a6      	cmp	r6, r4
 800c81e:	d109      	bne.n	800c834 <__libc_init_array+0x24>
 800c820:	4d0b      	ldr	r5, [pc, #44]	; (800c850 <__libc_init_array+0x40>)
 800c822:	4c0c      	ldr	r4, [pc, #48]	; (800c854 <__libc_init_array+0x44>)
 800c824:	f004 faf6 	bl	8010e14 <_init>
 800c828:	1b64      	subs	r4, r4, r5
 800c82a:	10a4      	asrs	r4, r4, #2
 800c82c:	2600      	movs	r6, #0
 800c82e:	42a6      	cmp	r6, r4
 800c830:	d105      	bne.n	800c83e <__libc_init_array+0x2e>
 800c832:	bd70      	pop	{r4, r5, r6, pc}
 800c834:	f855 3b04 	ldr.w	r3, [r5], #4
 800c838:	4798      	blx	r3
 800c83a:	3601      	adds	r6, #1
 800c83c:	e7ee      	b.n	800c81c <__libc_init_array+0xc>
 800c83e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c842:	4798      	blx	r3
 800c844:	3601      	adds	r6, #1
 800c846:	e7f2      	b.n	800c82e <__libc_init_array+0x1e>
 800c848:	0801aac8 	.word	0x0801aac8
 800c84c:	0801aac8 	.word	0x0801aac8
 800c850:	0801aac8 	.word	0x0801aac8
 800c854:	0801aacc 	.word	0x0801aacc

0800c858 <__retarget_lock_init_recursive>:
 800c858:	4770      	bx	lr

0800c85a <__retarget_lock_acquire_recursive>:
 800c85a:	4770      	bx	lr

0800c85c <__retarget_lock_release_recursive>:
 800c85c:	4770      	bx	lr

0800c85e <strcpy>:
 800c85e:	4603      	mov	r3, r0
 800c860:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c864:	f803 2b01 	strb.w	r2, [r3], #1
 800c868:	2a00      	cmp	r2, #0
 800c86a:	d1f9      	bne.n	800c860 <strcpy+0x2>
 800c86c:	4770      	bx	lr

0800c86e <memcpy>:
 800c86e:	440a      	add	r2, r1
 800c870:	4291      	cmp	r1, r2
 800c872:	f100 33ff 	add.w	r3, r0, #4294967295
 800c876:	d100      	bne.n	800c87a <memcpy+0xc>
 800c878:	4770      	bx	lr
 800c87a:	b510      	push	{r4, lr}
 800c87c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c880:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c884:	4291      	cmp	r1, r2
 800c886:	d1f9      	bne.n	800c87c <memcpy+0xe>
 800c888:	bd10      	pop	{r4, pc}
	...

0800c88c <nanf>:
 800c88c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c894 <nanf+0x8>
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	7fc00000 	.word	0x7fc00000

0800c898 <quorem>:
 800c898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89c:	6903      	ldr	r3, [r0, #16]
 800c89e:	690c      	ldr	r4, [r1, #16]
 800c8a0:	42a3      	cmp	r3, r4
 800c8a2:	4607      	mov	r7, r0
 800c8a4:	db7e      	blt.n	800c9a4 <quorem+0x10c>
 800c8a6:	3c01      	subs	r4, #1
 800c8a8:	f101 0814 	add.w	r8, r1, #20
 800c8ac:	f100 0514 	add.w	r5, r0, #20
 800c8b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8b4:	9301      	str	r3, [sp, #4]
 800c8b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c8ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c8c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c8ca:	fbb2 f6f3 	udiv	r6, r2, r3
 800c8ce:	d331      	bcc.n	800c934 <quorem+0x9c>
 800c8d0:	f04f 0e00 	mov.w	lr, #0
 800c8d4:	4640      	mov	r0, r8
 800c8d6:	46ac      	mov	ip, r5
 800c8d8:	46f2      	mov	sl, lr
 800c8da:	f850 2b04 	ldr.w	r2, [r0], #4
 800c8de:	b293      	uxth	r3, r2
 800c8e0:	fb06 e303 	mla	r3, r6, r3, lr
 800c8e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c8e8:	0c1a      	lsrs	r2, r3, #16
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	ebaa 0303 	sub.w	r3, sl, r3
 800c8f0:	f8dc a000 	ldr.w	sl, [ip]
 800c8f4:	fa13 f38a 	uxtah	r3, r3, sl
 800c8f8:	fb06 220e 	mla	r2, r6, lr, r2
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	9b00      	ldr	r3, [sp, #0]
 800c900:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c904:	b292      	uxth	r2, r2
 800c906:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c90a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c90e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c912:	4581      	cmp	r9, r0
 800c914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c918:	f84c 3b04 	str.w	r3, [ip], #4
 800c91c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c920:	d2db      	bcs.n	800c8da <quorem+0x42>
 800c922:	f855 300b 	ldr.w	r3, [r5, fp]
 800c926:	b92b      	cbnz	r3, 800c934 <quorem+0x9c>
 800c928:	9b01      	ldr	r3, [sp, #4]
 800c92a:	3b04      	subs	r3, #4
 800c92c:	429d      	cmp	r5, r3
 800c92e:	461a      	mov	r2, r3
 800c930:	d32c      	bcc.n	800c98c <quorem+0xf4>
 800c932:	613c      	str	r4, [r7, #16]
 800c934:	4638      	mov	r0, r7
 800c936:	f001 f8b5 	bl	800daa4 <__mcmp>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	db22      	blt.n	800c984 <quorem+0xec>
 800c93e:	3601      	adds	r6, #1
 800c940:	4629      	mov	r1, r5
 800c942:	2000      	movs	r0, #0
 800c944:	f858 2b04 	ldr.w	r2, [r8], #4
 800c948:	f8d1 c000 	ldr.w	ip, [r1]
 800c94c:	b293      	uxth	r3, r2
 800c94e:	1ac3      	subs	r3, r0, r3
 800c950:	0c12      	lsrs	r2, r2, #16
 800c952:	fa13 f38c 	uxtah	r3, r3, ip
 800c956:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c95a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c95e:	b29b      	uxth	r3, r3
 800c960:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c964:	45c1      	cmp	r9, r8
 800c966:	f841 3b04 	str.w	r3, [r1], #4
 800c96a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c96e:	d2e9      	bcs.n	800c944 <quorem+0xac>
 800c970:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c974:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c978:	b922      	cbnz	r2, 800c984 <quorem+0xec>
 800c97a:	3b04      	subs	r3, #4
 800c97c:	429d      	cmp	r5, r3
 800c97e:	461a      	mov	r2, r3
 800c980:	d30a      	bcc.n	800c998 <quorem+0x100>
 800c982:	613c      	str	r4, [r7, #16]
 800c984:	4630      	mov	r0, r6
 800c986:	b003      	add	sp, #12
 800c988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c98c:	6812      	ldr	r2, [r2, #0]
 800c98e:	3b04      	subs	r3, #4
 800c990:	2a00      	cmp	r2, #0
 800c992:	d1ce      	bne.n	800c932 <quorem+0x9a>
 800c994:	3c01      	subs	r4, #1
 800c996:	e7c9      	b.n	800c92c <quorem+0x94>
 800c998:	6812      	ldr	r2, [r2, #0]
 800c99a:	3b04      	subs	r3, #4
 800c99c:	2a00      	cmp	r2, #0
 800c99e:	d1f0      	bne.n	800c982 <quorem+0xea>
 800c9a0:	3c01      	subs	r4, #1
 800c9a2:	e7eb      	b.n	800c97c <quorem+0xe4>
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	e7ee      	b.n	800c986 <quorem+0xee>

0800c9a8 <_dtoa_r>:
 800c9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ac:	ed2d 8b02 	vpush	{d8}
 800c9b0:	69c5      	ldr	r5, [r0, #28]
 800c9b2:	b091      	sub	sp, #68	; 0x44
 800c9b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c9b8:	ec59 8b10 	vmov	r8, r9, d0
 800c9bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c9be:	9106      	str	r1, [sp, #24]
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	9208      	str	r2, [sp, #32]
 800c9c4:	930c      	str	r3, [sp, #48]	; 0x30
 800c9c6:	b975      	cbnz	r5, 800c9e6 <_dtoa_r+0x3e>
 800c9c8:	2010      	movs	r0, #16
 800c9ca:	f7fe fc31 	bl	800b230 <malloc>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	61f0      	str	r0, [r6, #28]
 800c9d2:	b920      	cbnz	r0, 800c9de <_dtoa_r+0x36>
 800c9d4:	4ba6      	ldr	r3, [pc, #664]	; (800cc70 <_dtoa_r+0x2c8>)
 800c9d6:	21ef      	movs	r1, #239	; 0xef
 800c9d8:	48a6      	ldr	r0, [pc, #664]	; (800cc74 <_dtoa_r+0x2cc>)
 800c9da:	f003 f89d 	bl	800fb18 <__assert_func>
 800c9de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c9e2:	6005      	str	r5, [r0, #0]
 800c9e4:	60c5      	str	r5, [r0, #12]
 800c9e6:	69f3      	ldr	r3, [r6, #28]
 800c9e8:	6819      	ldr	r1, [r3, #0]
 800c9ea:	b151      	cbz	r1, 800ca02 <_dtoa_r+0x5a>
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	604a      	str	r2, [r1, #4]
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	4093      	lsls	r3, r2
 800c9f4:	608b      	str	r3, [r1, #8]
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f000 fdce 	bl	800d598 <_Bfree>
 800c9fc:	69f3      	ldr	r3, [r6, #28]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	601a      	str	r2, [r3, #0]
 800ca02:	f1b9 0300 	subs.w	r3, r9, #0
 800ca06:	bfbb      	ittet	lt
 800ca08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ca0c:	9303      	strlt	r3, [sp, #12]
 800ca0e:	2300      	movge	r3, #0
 800ca10:	2201      	movlt	r2, #1
 800ca12:	bfac      	ite	ge
 800ca14:	6023      	strge	r3, [r4, #0]
 800ca16:	6022      	strlt	r2, [r4, #0]
 800ca18:	4b97      	ldr	r3, [pc, #604]	; (800cc78 <_dtoa_r+0x2d0>)
 800ca1a:	9c03      	ldr	r4, [sp, #12]
 800ca1c:	43a3      	bics	r3, r4
 800ca1e:	d11c      	bne.n	800ca5a <_dtoa_r+0xb2>
 800ca20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca22:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca26:	6013      	str	r3, [r2, #0]
 800ca28:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ca2c:	ea53 0308 	orrs.w	r3, r3, r8
 800ca30:	f000 84fb 	beq.w	800d42a <_dtoa_r+0xa82>
 800ca34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca36:	b963      	cbnz	r3, 800ca52 <_dtoa_r+0xaa>
 800ca38:	4b90      	ldr	r3, [pc, #576]	; (800cc7c <_dtoa_r+0x2d4>)
 800ca3a:	e020      	b.n	800ca7e <_dtoa_r+0xd6>
 800ca3c:	4b90      	ldr	r3, [pc, #576]	; (800cc80 <_dtoa_r+0x2d8>)
 800ca3e:	9301      	str	r3, [sp, #4]
 800ca40:	3308      	adds	r3, #8
 800ca42:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	9801      	ldr	r0, [sp, #4]
 800ca48:	b011      	add	sp, #68	; 0x44
 800ca4a:	ecbd 8b02 	vpop	{d8}
 800ca4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca52:	4b8a      	ldr	r3, [pc, #552]	; (800cc7c <_dtoa_r+0x2d4>)
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	3303      	adds	r3, #3
 800ca58:	e7f3      	b.n	800ca42 <_dtoa_r+0x9a>
 800ca5a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ca5e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ca62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca66:	d10c      	bne.n	800ca82 <_dtoa_r+0xda>
 800ca68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	6013      	str	r3, [r2, #0]
 800ca6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f000 84d7 	beq.w	800d424 <_dtoa_r+0xa7c>
 800ca76:	4b83      	ldr	r3, [pc, #524]	; (800cc84 <_dtoa_r+0x2dc>)
 800ca78:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ca7a:	6013      	str	r3, [r2, #0]
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	9301      	str	r3, [sp, #4]
 800ca80:	e7e1      	b.n	800ca46 <_dtoa_r+0x9e>
 800ca82:	aa0e      	add	r2, sp, #56	; 0x38
 800ca84:	a90f      	add	r1, sp, #60	; 0x3c
 800ca86:	4630      	mov	r0, r6
 800ca88:	eeb0 0b48 	vmov.f64	d0, d8
 800ca8c:	f001 f920 	bl	800dcd0 <__d2b>
 800ca90:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800ca94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca96:	4605      	mov	r5, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d046      	beq.n	800cb2a <_dtoa_r+0x182>
 800ca9c:	eeb0 7b48 	vmov.f64	d7, d8
 800caa0:	ee18 1a90 	vmov	r1, s17
 800caa4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800caa8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800caac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cab0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cab4:	2000      	movs	r0, #0
 800cab6:	ee07 1a90 	vmov	s15, r1
 800caba:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800cabe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800cc58 <_dtoa_r+0x2b0>
 800cac2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cac6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800cc60 <_dtoa_r+0x2b8>
 800caca:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cace:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800cc68 <_dtoa_r+0x2c0>
 800cad2:	ee07 3a90 	vmov	s15, r3
 800cad6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cada:	eeb0 7b46 	vmov.f64	d7, d6
 800cade:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cae2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cae6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800caea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caee:	ee16 ba90 	vmov	fp, s13
 800caf2:	9009      	str	r0, [sp, #36]	; 0x24
 800caf4:	d508      	bpl.n	800cb08 <_dtoa_r+0x160>
 800caf6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cafa:	eeb4 6b47 	vcmp.f64	d6, d7
 800cafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb02:	bf18      	it	ne
 800cb04:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800cb08:	f1bb 0f16 	cmp.w	fp, #22
 800cb0c:	d82b      	bhi.n	800cb66 <_dtoa_r+0x1be>
 800cb0e:	495e      	ldr	r1, [pc, #376]	; (800cc88 <_dtoa_r+0x2e0>)
 800cb10:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800cb14:	ed91 7b00 	vldr	d7, [r1]
 800cb18:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb20:	d501      	bpl.n	800cb26 <_dtoa_r+0x17e>
 800cb22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb26:	2100      	movs	r1, #0
 800cb28:	e01e      	b.n	800cb68 <_dtoa_r+0x1c0>
 800cb2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb2c:	4413      	add	r3, r2
 800cb2e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800cb32:	2920      	cmp	r1, #32
 800cb34:	bfc1      	itttt	gt
 800cb36:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800cb3a:	408c      	lslgt	r4, r1
 800cb3c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800cb40:	fa28 f101 	lsrgt.w	r1, r8, r1
 800cb44:	bfd6      	itet	le
 800cb46:	f1c1 0120 	rsble	r1, r1, #32
 800cb4a:	4321      	orrgt	r1, r4
 800cb4c:	fa08 f101 	lslle.w	r1, r8, r1
 800cb50:	ee07 1a90 	vmov	s15, r1
 800cb54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cb58:	3b01      	subs	r3, #1
 800cb5a:	ee17 1a90 	vmov	r1, s15
 800cb5e:	2001      	movs	r0, #1
 800cb60:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800cb64:	e7a7      	b.n	800cab6 <_dtoa_r+0x10e>
 800cb66:	2101      	movs	r1, #1
 800cb68:	1ad2      	subs	r2, r2, r3
 800cb6a:	1e53      	subs	r3, r2, #1
 800cb6c:	9305      	str	r3, [sp, #20]
 800cb6e:	bf45      	ittet	mi
 800cb70:	f1c2 0301 	rsbmi	r3, r2, #1
 800cb74:	9304      	strmi	r3, [sp, #16]
 800cb76:	2300      	movpl	r3, #0
 800cb78:	2300      	movmi	r3, #0
 800cb7a:	bf4c      	ite	mi
 800cb7c:	9305      	strmi	r3, [sp, #20]
 800cb7e:	9304      	strpl	r3, [sp, #16]
 800cb80:	f1bb 0f00 	cmp.w	fp, #0
 800cb84:	910b      	str	r1, [sp, #44]	; 0x2c
 800cb86:	db18      	blt.n	800cbba <_dtoa_r+0x212>
 800cb88:	9b05      	ldr	r3, [sp, #20]
 800cb8a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800cb8e:	445b      	add	r3, fp
 800cb90:	9305      	str	r3, [sp, #20]
 800cb92:	2300      	movs	r3, #0
 800cb94:	9a06      	ldr	r2, [sp, #24]
 800cb96:	2a09      	cmp	r2, #9
 800cb98:	d848      	bhi.n	800cc2c <_dtoa_r+0x284>
 800cb9a:	2a05      	cmp	r2, #5
 800cb9c:	bfc4      	itt	gt
 800cb9e:	3a04      	subgt	r2, #4
 800cba0:	9206      	strgt	r2, [sp, #24]
 800cba2:	9a06      	ldr	r2, [sp, #24]
 800cba4:	f1a2 0202 	sub.w	r2, r2, #2
 800cba8:	bfcc      	ite	gt
 800cbaa:	2400      	movgt	r4, #0
 800cbac:	2401      	movle	r4, #1
 800cbae:	2a03      	cmp	r2, #3
 800cbb0:	d847      	bhi.n	800cc42 <_dtoa_r+0x29a>
 800cbb2:	e8df f002 	tbb	[pc, r2]
 800cbb6:	2d0b      	.short	0x2d0b
 800cbb8:	392b      	.short	0x392b
 800cbba:	9b04      	ldr	r3, [sp, #16]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	eba3 030b 	sub.w	r3, r3, fp
 800cbc2:	9304      	str	r3, [sp, #16]
 800cbc4:	920a      	str	r2, [sp, #40]	; 0x28
 800cbc6:	f1cb 0300 	rsb	r3, fp, #0
 800cbca:	e7e3      	b.n	800cb94 <_dtoa_r+0x1ec>
 800cbcc:	2200      	movs	r2, #0
 800cbce:	9207      	str	r2, [sp, #28]
 800cbd0:	9a08      	ldr	r2, [sp, #32]
 800cbd2:	2a00      	cmp	r2, #0
 800cbd4:	dc38      	bgt.n	800cc48 <_dtoa_r+0x2a0>
 800cbd6:	f04f 0a01 	mov.w	sl, #1
 800cbda:	46d1      	mov	r9, sl
 800cbdc:	4652      	mov	r2, sl
 800cbde:	f8cd a020 	str.w	sl, [sp, #32]
 800cbe2:	69f7      	ldr	r7, [r6, #28]
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	2004      	movs	r0, #4
 800cbe8:	f100 0c14 	add.w	ip, r0, #20
 800cbec:	4594      	cmp	ip, r2
 800cbee:	d930      	bls.n	800cc52 <_dtoa_r+0x2aa>
 800cbf0:	6079      	str	r1, [r7, #4]
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	930d      	str	r3, [sp, #52]	; 0x34
 800cbf6:	f000 fc8f 	bl	800d518 <_Balloc>
 800cbfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbfc:	9001      	str	r0, [sp, #4]
 800cbfe:	4602      	mov	r2, r0
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d145      	bne.n	800cc90 <_dtoa_r+0x2e8>
 800cc04:	4b21      	ldr	r3, [pc, #132]	; (800cc8c <_dtoa_r+0x2e4>)
 800cc06:	f240 11af 	movw	r1, #431	; 0x1af
 800cc0a:	e6e5      	b.n	800c9d8 <_dtoa_r+0x30>
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	e7de      	b.n	800cbce <_dtoa_r+0x226>
 800cc10:	2200      	movs	r2, #0
 800cc12:	9207      	str	r2, [sp, #28]
 800cc14:	9a08      	ldr	r2, [sp, #32]
 800cc16:	eb0b 0a02 	add.w	sl, fp, r2
 800cc1a:	f10a 0901 	add.w	r9, sl, #1
 800cc1e:	464a      	mov	r2, r9
 800cc20:	2a01      	cmp	r2, #1
 800cc22:	bfb8      	it	lt
 800cc24:	2201      	movlt	r2, #1
 800cc26:	e7dc      	b.n	800cbe2 <_dtoa_r+0x23a>
 800cc28:	2201      	movs	r2, #1
 800cc2a:	e7f2      	b.n	800cc12 <_dtoa_r+0x26a>
 800cc2c:	2401      	movs	r4, #1
 800cc2e:	2200      	movs	r2, #0
 800cc30:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800cc34:	f04f 3aff 	mov.w	sl, #4294967295
 800cc38:	2100      	movs	r1, #0
 800cc3a:	46d1      	mov	r9, sl
 800cc3c:	2212      	movs	r2, #18
 800cc3e:	9108      	str	r1, [sp, #32]
 800cc40:	e7cf      	b.n	800cbe2 <_dtoa_r+0x23a>
 800cc42:	2201      	movs	r2, #1
 800cc44:	9207      	str	r2, [sp, #28]
 800cc46:	e7f5      	b.n	800cc34 <_dtoa_r+0x28c>
 800cc48:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cc4c:	46d1      	mov	r9, sl
 800cc4e:	4652      	mov	r2, sl
 800cc50:	e7c7      	b.n	800cbe2 <_dtoa_r+0x23a>
 800cc52:	3101      	adds	r1, #1
 800cc54:	0040      	lsls	r0, r0, #1
 800cc56:	e7c7      	b.n	800cbe8 <_dtoa_r+0x240>
 800cc58:	636f4361 	.word	0x636f4361
 800cc5c:	3fd287a7 	.word	0x3fd287a7
 800cc60:	8b60c8b3 	.word	0x8b60c8b3
 800cc64:	3fc68a28 	.word	0x3fc68a28
 800cc68:	509f79fb 	.word	0x509f79fb
 800cc6c:	3fd34413 	.word	0x3fd34413
 800cc70:	0801867d 	.word	0x0801867d
 800cc74:	08018694 	.word	0x08018694
 800cc78:	7ff00000 	.word	0x7ff00000
 800cc7c:	08018679 	.word	0x08018679
 800cc80:	08018670 	.word	0x08018670
 800cc84:	080188d0 	.word	0x080188d0
 800cc88:	08018780 	.word	0x08018780
 800cc8c:	080186ec 	.word	0x080186ec
 800cc90:	69f2      	ldr	r2, [r6, #28]
 800cc92:	9901      	ldr	r1, [sp, #4]
 800cc94:	6011      	str	r1, [r2, #0]
 800cc96:	f1b9 0f0e 	cmp.w	r9, #14
 800cc9a:	d86c      	bhi.n	800cd76 <_dtoa_r+0x3ce>
 800cc9c:	2c00      	cmp	r4, #0
 800cc9e:	d06a      	beq.n	800cd76 <_dtoa_r+0x3ce>
 800cca0:	f1bb 0f00 	cmp.w	fp, #0
 800cca4:	f340 80a0 	ble.w	800cde8 <_dtoa_r+0x440>
 800cca8:	4ac1      	ldr	r2, [pc, #772]	; (800cfb0 <_dtoa_r+0x608>)
 800ccaa:	f00b 010f 	and.w	r1, fp, #15
 800ccae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ccb2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ccb6:	ed92 7b00 	vldr	d7, [r2]
 800ccba:	ea4f 122b 	mov.w	r2, fp, asr #4
 800ccbe:	f000 8087 	beq.w	800cdd0 <_dtoa_r+0x428>
 800ccc2:	49bc      	ldr	r1, [pc, #752]	; (800cfb4 <_dtoa_r+0x60c>)
 800ccc4:	ed91 6b08 	vldr	d6, [r1, #32]
 800ccc8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800cccc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ccd0:	f002 020f 	and.w	r2, r2, #15
 800ccd4:	2103      	movs	r1, #3
 800ccd6:	48b7      	ldr	r0, [pc, #732]	; (800cfb4 <_dtoa_r+0x60c>)
 800ccd8:	2a00      	cmp	r2, #0
 800ccda:	d17b      	bne.n	800cdd4 <_dtoa_r+0x42c>
 800ccdc:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cce0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cce4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cce8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ccea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccee:	2a00      	cmp	r2, #0
 800ccf0:	f000 80a0 	beq.w	800ce34 <_dtoa_r+0x48c>
 800ccf4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ccf8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ccfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd00:	f140 8098 	bpl.w	800ce34 <_dtoa_r+0x48c>
 800cd04:	f1b9 0f00 	cmp.w	r9, #0
 800cd08:	f000 8094 	beq.w	800ce34 <_dtoa_r+0x48c>
 800cd0c:	f1ba 0f00 	cmp.w	sl, #0
 800cd10:	dd2f      	ble.n	800cd72 <_dtoa_r+0x3ca>
 800cd12:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800cd16:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd1a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd1e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cd22:	3101      	adds	r1, #1
 800cd24:	4654      	mov	r4, sl
 800cd26:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cd2a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800cd2e:	ee07 1a90 	vmov	s15, r1
 800cd32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cd36:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cd3a:	ee15 7a90 	vmov	r7, s11
 800cd3e:	ec51 0b15 	vmov	r0, r1, d5
 800cd42:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800cd46:	2c00      	cmp	r4, #0
 800cd48:	d177      	bne.n	800ce3a <_dtoa_r+0x492>
 800cd4a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cd4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cd52:	ec41 0b17 	vmov	d7, r0, r1
 800cd56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd5e:	f300 826a 	bgt.w	800d236 <_dtoa_r+0x88e>
 800cd62:	eeb1 7b47 	vneg.f64	d7, d7
 800cd66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd6e:	f100 8260 	bmi.w	800d232 <_dtoa_r+0x88a>
 800cd72:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cd76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd78:	2a00      	cmp	r2, #0
 800cd7a:	f2c0 811d 	blt.w	800cfb8 <_dtoa_r+0x610>
 800cd7e:	f1bb 0f0e 	cmp.w	fp, #14
 800cd82:	f300 8119 	bgt.w	800cfb8 <_dtoa_r+0x610>
 800cd86:	4b8a      	ldr	r3, [pc, #552]	; (800cfb0 <_dtoa_r+0x608>)
 800cd88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cd8c:	ed93 6b00 	vldr	d6, [r3]
 800cd90:	9b08      	ldr	r3, [sp, #32]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f280 80b7 	bge.w	800cf06 <_dtoa_r+0x55e>
 800cd98:	f1b9 0f00 	cmp.w	r9, #0
 800cd9c:	f300 80b3 	bgt.w	800cf06 <_dtoa_r+0x55e>
 800cda0:	f040 8246 	bne.w	800d230 <_dtoa_r+0x888>
 800cda4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cda8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cdac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cdb0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cdb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb8:	464c      	mov	r4, r9
 800cdba:	464f      	mov	r7, r9
 800cdbc:	f280 821c 	bge.w	800d1f8 <_dtoa_r+0x850>
 800cdc0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cdc4:	2331      	movs	r3, #49	; 0x31
 800cdc6:	f808 3b01 	strb.w	r3, [r8], #1
 800cdca:	f10b 0b01 	add.w	fp, fp, #1
 800cdce:	e218      	b.n	800d202 <_dtoa_r+0x85a>
 800cdd0:	2102      	movs	r1, #2
 800cdd2:	e780      	b.n	800ccd6 <_dtoa_r+0x32e>
 800cdd4:	07d4      	lsls	r4, r2, #31
 800cdd6:	d504      	bpl.n	800cde2 <_dtoa_r+0x43a>
 800cdd8:	ed90 6b00 	vldr	d6, [r0]
 800cddc:	3101      	adds	r1, #1
 800cdde:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cde2:	1052      	asrs	r2, r2, #1
 800cde4:	3008      	adds	r0, #8
 800cde6:	e777      	b.n	800ccd8 <_dtoa_r+0x330>
 800cde8:	d022      	beq.n	800ce30 <_dtoa_r+0x488>
 800cdea:	f1cb 0200 	rsb	r2, fp, #0
 800cdee:	4970      	ldr	r1, [pc, #448]	; (800cfb0 <_dtoa_r+0x608>)
 800cdf0:	f002 000f 	and.w	r0, r2, #15
 800cdf4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800cdf8:	ed91 7b00 	vldr	d7, [r1]
 800cdfc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ce00:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce04:	486b      	ldr	r0, [pc, #428]	; (800cfb4 <_dtoa_r+0x60c>)
 800ce06:	1112      	asrs	r2, r2, #4
 800ce08:	2400      	movs	r4, #0
 800ce0a:	2102      	movs	r1, #2
 800ce0c:	b92a      	cbnz	r2, 800ce1a <_dtoa_r+0x472>
 800ce0e:	2c00      	cmp	r4, #0
 800ce10:	f43f af6a 	beq.w	800cce8 <_dtoa_r+0x340>
 800ce14:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce18:	e766      	b.n	800cce8 <_dtoa_r+0x340>
 800ce1a:	07d7      	lsls	r7, r2, #31
 800ce1c:	d505      	bpl.n	800ce2a <_dtoa_r+0x482>
 800ce1e:	ed90 6b00 	vldr	d6, [r0]
 800ce22:	3101      	adds	r1, #1
 800ce24:	2401      	movs	r4, #1
 800ce26:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce2a:	1052      	asrs	r2, r2, #1
 800ce2c:	3008      	adds	r0, #8
 800ce2e:	e7ed      	b.n	800ce0c <_dtoa_r+0x464>
 800ce30:	2102      	movs	r1, #2
 800ce32:	e759      	b.n	800cce8 <_dtoa_r+0x340>
 800ce34:	465a      	mov	r2, fp
 800ce36:	464c      	mov	r4, r9
 800ce38:	e775      	b.n	800cd26 <_dtoa_r+0x37e>
 800ce3a:	ec41 0b17 	vmov	d7, r0, r1
 800ce3e:	495c      	ldr	r1, [pc, #368]	; (800cfb0 <_dtoa_r+0x608>)
 800ce40:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800ce44:	ed11 4b02 	vldr	d4, [r1, #-8]
 800ce48:	9901      	ldr	r1, [sp, #4]
 800ce4a:	440c      	add	r4, r1
 800ce4c:	9907      	ldr	r1, [sp, #28]
 800ce4e:	b351      	cbz	r1, 800cea6 <_dtoa_r+0x4fe>
 800ce50:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ce54:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ce58:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ce5c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ce60:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ce64:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ce68:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ce6c:	ee14 1a90 	vmov	r1, s9
 800ce70:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ce74:	3130      	adds	r1, #48	; 0x30
 800ce76:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ce7a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce82:	f808 1b01 	strb.w	r1, [r8], #1
 800ce86:	d439      	bmi.n	800cefc <_dtoa_r+0x554>
 800ce88:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ce8c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ce90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce94:	d472      	bmi.n	800cf7c <_dtoa_r+0x5d4>
 800ce96:	45a0      	cmp	r8, r4
 800ce98:	f43f af6b 	beq.w	800cd72 <_dtoa_r+0x3ca>
 800ce9c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cea0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cea4:	e7e0      	b.n	800ce68 <_dtoa_r+0x4c0>
 800cea6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ceaa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ceae:	4620      	mov	r0, r4
 800ceb0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ceb4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ceb8:	ee14 1a90 	vmov	r1, s9
 800cebc:	3130      	adds	r1, #48	; 0x30
 800cebe:	f808 1b01 	strb.w	r1, [r8], #1
 800cec2:	45a0      	cmp	r8, r4
 800cec4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cec8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cecc:	d118      	bne.n	800cf00 <_dtoa_r+0x558>
 800cece:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ced2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ced6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ceda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cede:	dc4d      	bgt.n	800cf7c <_dtoa_r+0x5d4>
 800cee0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cee4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800cee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceec:	f57f af41 	bpl.w	800cd72 <_dtoa_r+0x3ca>
 800cef0:	4680      	mov	r8, r0
 800cef2:	3801      	subs	r0, #1
 800cef4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800cef8:	2b30      	cmp	r3, #48	; 0x30
 800cefa:	d0f9      	beq.n	800cef0 <_dtoa_r+0x548>
 800cefc:	4693      	mov	fp, r2
 800cefe:	e02a      	b.n	800cf56 <_dtoa_r+0x5ae>
 800cf00:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cf04:	e7d6      	b.n	800ceb4 <_dtoa_r+0x50c>
 800cf06:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf0a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800cf0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cf12:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cf16:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cf1a:	ee15 3a10 	vmov	r3, s10
 800cf1e:	3330      	adds	r3, #48	; 0x30
 800cf20:	f808 3b01 	strb.w	r3, [r8], #1
 800cf24:	9b01      	ldr	r3, [sp, #4]
 800cf26:	eba8 0303 	sub.w	r3, r8, r3
 800cf2a:	4599      	cmp	r9, r3
 800cf2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cf30:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cf34:	d133      	bne.n	800cf9e <_dtoa_r+0x5f6>
 800cf36:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cf3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cf3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf42:	dc1a      	bgt.n	800cf7a <_dtoa_r+0x5d2>
 800cf44:	eeb4 7b46 	vcmp.f64	d7, d6
 800cf48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf4c:	d103      	bne.n	800cf56 <_dtoa_r+0x5ae>
 800cf4e:	ee15 3a10 	vmov	r3, s10
 800cf52:	07d9      	lsls	r1, r3, #31
 800cf54:	d411      	bmi.n	800cf7a <_dtoa_r+0x5d2>
 800cf56:	4629      	mov	r1, r5
 800cf58:	4630      	mov	r0, r6
 800cf5a:	f000 fb1d 	bl	800d598 <_Bfree>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf62:	f888 3000 	strb.w	r3, [r8]
 800cf66:	f10b 0301 	add.w	r3, fp, #1
 800cf6a:	6013      	str	r3, [r2, #0]
 800cf6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	f43f ad69 	beq.w	800ca46 <_dtoa_r+0x9e>
 800cf74:	f8c3 8000 	str.w	r8, [r3]
 800cf78:	e565      	b.n	800ca46 <_dtoa_r+0x9e>
 800cf7a:	465a      	mov	r2, fp
 800cf7c:	4643      	mov	r3, r8
 800cf7e:	4698      	mov	r8, r3
 800cf80:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800cf84:	2939      	cmp	r1, #57	; 0x39
 800cf86:	d106      	bne.n	800cf96 <_dtoa_r+0x5ee>
 800cf88:	9901      	ldr	r1, [sp, #4]
 800cf8a:	4299      	cmp	r1, r3
 800cf8c:	d1f7      	bne.n	800cf7e <_dtoa_r+0x5d6>
 800cf8e:	9801      	ldr	r0, [sp, #4]
 800cf90:	2130      	movs	r1, #48	; 0x30
 800cf92:	3201      	adds	r2, #1
 800cf94:	7001      	strb	r1, [r0, #0]
 800cf96:	7819      	ldrb	r1, [r3, #0]
 800cf98:	3101      	adds	r1, #1
 800cf9a:	7019      	strb	r1, [r3, #0]
 800cf9c:	e7ae      	b.n	800cefc <_dtoa_r+0x554>
 800cf9e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cfa2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfaa:	d1b2      	bne.n	800cf12 <_dtoa_r+0x56a>
 800cfac:	e7d3      	b.n	800cf56 <_dtoa_r+0x5ae>
 800cfae:	bf00      	nop
 800cfb0:	08018780 	.word	0x08018780
 800cfb4:	08018758 	.word	0x08018758
 800cfb8:	9907      	ldr	r1, [sp, #28]
 800cfba:	2900      	cmp	r1, #0
 800cfbc:	f000 80d0 	beq.w	800d160 <_dtoa_r+0x7b8>
 800cfc0:	9906      	ldr	r1, [sp, #24]
 800cfc2:	2901      	cmp	r1, #1
 800cfc4:	f300 80b4 	bgt.w	800d130 <_dtoa_r+0x788>
 800cfc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfca:	2900      	cmp	r1, #0
 800cfcc:	f000 80ac 	beq.w	800d128 <_dtoa_r+0x780>
 800cfd0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cfd4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cfd8:	461c      	mov	r4, r3
 800cfda:	9309      	str	r3, [sp, #36]	; 0x24
 800cfdc:	9b04      	ldr	r3, [sp, #16]
 800cfde:	4413      	add	r3, r2
 800cfe0:	9304      	str	r3, [sp, #16]
 800cfe2:	9b05      	ldr	r3, [sp, #20]
 800cfe4:	2101      	movs	r1, #1
 800cfe6:	4413      	add	r3, r2
 800cfe8:	4630      	mov	r0, r6
 800cfea:	9305      	str	r3, [sp, #20]
 800cfec:	f000 fbd4 	bl	800d798 <__i2b>
 800cff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff2:	4607      	mov	r7, r0
 800cff4:	f1b8 0f00 	cmp.w	r8, #0
 800cff8:	d00d      	beq.n	800d016 <_dtoa_r+0x66e>
 800cffa:	9a05      	ldr	r2, [sp, #20]
 800cffc:	2a00      	cmp	r2, #0
 800cffe:	dd0a      	ble.n	800d016 <_dtoa_r+0x66e>
 800d000:	4542      	cmp	r2, r8
 800d002:	9904      	ldr	r1, [sp, #16]
 800d004:	bfa8      	it	ge
 800d006:	4642      	movge	r2, r8
 800d008:	1a89      	subs	r1, r1, r2
 800d00a:	9104      	str	r1, [sp, #16]
 800d00c:	9905      	ldr	r1, [sp, #20]
 800d00e:	eba8 0802 	sub.w	r8, r8, r2
 800d012:	1a8a      	subs	r2, r1, r2
 800d014:	9205      	str	r2, [sp, #20]
 800d016:	b303      	cbz	r3, 800d05a <_dtoa_r+0x6b2>
 800d018:	9a07      	ldr	r2, [sp, #28]
 800d01a:	2a00      	cmp	r2, #0
 800d01c:	f000 80a5 	beq.w	800d16a <_dtoa_r+0x7c2>
 800d020:	2c00      	cmp	r4, #0
 800d022:	dd13      	ble.n	800d04c <_dtoa_r+0x6a4>
 800d024:	4639      	mov	r1, r7
 800d026:	4622      	mov	r2, r4
 800d028:	4630      	mov	r0, r6
 800d02a:	930d      	str	r3, [sp, #52]	; 0x34
 800d02c:	f000 fc74 	bl	800d918 <__pow5mult>
 800d030:	462a      	mov	r2, r5
 800d032:	4601      	mov	r1, r0
 800d034:	4607      	mov	r7, r0
 800d036:	4630      	mov	r0, r6
 800d038:	f000 fbc4 	bl	800d7c4 <__multiply>
 800d03c:	4629      	mov	r1, r5
 800d03e:	9009      	str	r0, [sp, #36]	; 0x24
 800d040:	4630      	mov	r0, r6
 800d042:	f000 faa9 	bl	800d598 <_Bfree>
 800d046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d048:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d04a:	4615      	mov	r5, r2
 800d04c:	1b1a      	subs	r2, r3, r4
 800d04e:	d004      	beq.n	800d05a <_dtoa_r+0x6b2>
 800d050:	4629      	mov	r1, r5
 800d052:	4630      	mov	r0, r6
 800d054:	f000 fc60 	bl	800d918 <__pow5mult>
 800d058:	4605      	mov	r5, r0
 800d05a:	2101      	movs	r1, #1
 800d05c:	4630      	mov	r0, r6
 800d05e:	f000 fb9b 	bl	800d798 <__i2b>
 800d062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d064:	2b00      	cmp	r3, #0
 800d066:	4604      	mov	r4, r0
 800d068:	f340 8081 	ble.w	800d16e <_dtoa_r+0x7c6>
 800d06c:	461a      	mov	r2, r3
 800d06e:	4601      	mov	r1, r0
 800d070:	4630      	mov	r0, r6
 800d072:	f000 fc51 	bl	800d918 <__pow5mult>
 800d076:	9b06      	ldr	r3, [sp, #24]
 800d078:	2b01      	cmp	r3, #1
 800d07a:	4604      	mov	r4, r0
 800d07c:	dd7a      	ble.n	800d174 <_dtoa_r+0x7cc>
 800d07e:	2300      	movs	r3, #0
 800d080:	9309      	str	r3, [sp, #36]	; 0x24
 800d082:	6922      	ldr	r2, [r4, #16]
 800d084:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d088:	6910      	ldr	r0, [r2, #16]
 800d08a:	f000 fb37 	bl	800d6fc <__hi0bits>
 800d08e:	f1c0 0020 	rsb	r0, r0, #32
 800d092:	9b05      	ldr	r3, [sp, #20]
 800d094:	4418      	add	r0, r3
 800d096:	f010 001f 	ands.w	r0, r0, #31
 800d09a:	f000 8093 	beq.w	800d1c4 <_dtoa_r+0x81c>
 800d09e:	f1c0 0220 	rsb	r2, r0, #32
 800d0a2:	2a04      	cmp	r2, #4
 800d0a4:	f340 8085 	ble.w	800d1b2 <_dtoa_r+0x80a>
 800d0a8:	9b04      	ldr	r3, [sp, #16]
 800d0aa:	f1c0 001c 	rsb	r0, r0, #28
 800d0ae:	4403      	add	r3, r0
 800d0b0:	9304      	str	r3, [sp, #16]
 800d0b2:	9b05      	ldr	r3, [sp, #20]
 800d0b4:	4480      	add	r8, r0
 800d0b6:	4403      	add	r3, r0
 800d0b8:	9305      	str	r3, [sp, #20]
 800d0ba:	9b04      	ldr	r3, [sp, #16]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	dd05      	ble.n	800d0cc <_dtoa_r+0x724>
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f000 fc81 	bl	800d9cc <__lshift>
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	9b05      	ldr	r3, [sp, #20]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	dd05      	ble.n	800d0de <_dtoa_r+0x736>
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f000 fc78 	bl	800d9cc <__lshift>
 800d0dc:	4604      	mov	r4, r0
 800d0de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d071      	beq.n	800d1c8 <_dtoa_r+0x820>
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	f000 fcdc 	bl	800daa4 <__mcmp>
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	da6b      	bge.n	800d1c8 <_dtoa_r+0x820>
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	220a      	movs	r2, #10
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	f000 fa70 	bl	800d5dc <__multadd>
 800d0fc:	9b07      	ldr	r3, [sp, #28]
 800d0fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d102:	4605      	mov	r5, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	f000 8197 	beq.w	800d438 <_dtoa_r+0xa90>
 800d10a:	4639      	mov	r1, r7
 800d10c:	2300      	movs	r3, #0
 800d10e:	220a      	movs	r2, #10
 800d110:	4630      	mov	r0, r6
 800d112:	f000 fa63 	bl	800d5dc <__multadd>
 800d116:	f1ba 0f00 	cmp.w	sl, #0
 800d11a:	4607      	mov	r7, r0
 800d11c:	f300 8093 	bgt.w	800d246 <_dtoa_r+0x89e>
 800d120:	9b06      	ldr	r3, [sp, #24]
 800d122:	2b02      	cmp	r3, #2
 800d124:	dc57      	bgt.n	800d1d6 <_dtoa_r+0x82e>
 800d126:	e08e      	b.n	800d246 <_dtoa_r+0x89e>
 800d128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d12a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d12e:	e751      	b.n	800cfd4 <_dtoa_r+0x62c>
 800d130:	f109 34ff 	add.w	r4, r9, #4294967295
 800d134:	42a3      	cmp	r3, r4
 800d136:	bfbf      	itttt	lt
 800d138:	1ae2      	sublt	r2, r4, r3
 800d13a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d13c:	189b      	addlt	r3, r3, r2
 800d13e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d140:	bfae      	itee	ge
 800d142:	1b1c      	subge	r4, r3, r4
 800d144:	4623      	movlt	r3, r4
 800d146:	2400      	movlt	r4, #0
 800d148:	f1b9 0f00 	cmp.w	r9, #0
 800d14c:	bfb5      	itete	lt
 800d14e:	9a04      	ldrlt	r2, [sp, #16]
 800d150:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d154:	eba2 0809 	sublt.w	r8, r2, r9
 800d158:	464a      	movge	r2, r9
 800d15a:	bfb8      	it	lt
 800d15c:	2200      	movlt	r2, #0
 800d15e:	e73c      	b.n	800cfda <_dtoa_r+0x632>
 800d160:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d164:	9f07      	ldr	r7, [sp, #28]
 800d166:	461c      	mov	r4, r3
 800d168:	e744      	b.n	800cff4 <_dtoa_r+0x64c>
 800d16a:	461a      	mov	r2, r3
 800d16c:	e770      	b.n	800d050 <_dtoa_r+0x6a8>
 800d16e:	9b06      	ldr	r3, [sp, #24]
 800d170:	2b01      	cmp	r3, #1
 800d172:	dc18      	bgt.n	800d1a6 <_dtoa_r+0x7fe>
 800d174:	9b02      	ldr	r3, [sp, #8]
 800d176:	b9b3      	cbnz	r3, 800d1a6 <_dtoa_r+0x7fe>
 800d178:	9b03      	ldr	r3, [sp, #12]
 800d17a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d17e:	b9a2      	cbnz	r2, 800d1aa <_dtoa_r+0x802>
 800d180:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d184:	0d12      	lsrs	r2, r2, #20
 800d186:	0512      	lsls	r2, r2, #20
 800d188:	b18a      	cbz	r2, 800d1ae <_dtoa_r+0x806>
 800d18a:	9b04      	ldr	r3, [sp, #16]
 800d18c:	3301      	adds	r3, #1
 800d18e:	9304      	str	r3, [sp, #16]
 800d190:	9b05      	ldr	r3, [sp, #20]
 800d192:	3301      	adds	r3, #1
 800d194:	9305      	str	r3, [sp, #20]
 800d196:	2301      	movs	r3, #1
 800d198:	9309      	str	r3, [sp, #36]	; 0x24
 800d19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f47f af70 	bne.w	800d082 <_dtoa_r+0x6da>
 800d1a2:	2001      	movs	r0, #1
 800d1a4:	e775      	b.n	800d092 <_dtoa_r+0x6ea>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	e7f6      	b.n	800d198 <_dtoa_r+0x7f0>
 800d1aa:	9b02      	ldr	r3, [sp, #8]
 800d1ac:	e7f4      	b.n	800d198 <_dtoa_r+0x7f0>
 800d1ae:	9209      	str	r2, [sp, #36]	; 0x24
 800d1b0:	e7f3      	b.n	800d19a <_dtoa_r+0x7f2>
 800d1b2:	d082      	beq.n	800d0ba <_dtoa_r+0x712>
 800d1b4:	9b04      	ldr	r3, [sp, #16]
 800d1b6:	321c      	adds	r2, #28
 800d1b8:	4413      	add	r3, r2
 800d1ba:	9304      	str	r3, [sp, #16]
 800d1bc:	9b05      	ldr	r3, [sp, #20]
 800d1be:	4490      	add	r8, r2
 800d1c0:	4413      	add	r3, r2
 800d1c2:	e779      	b.n	800d0b8 <_dtoa_r+0x710>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	e7f5      	b.n	800d1b4 <_dtoa_r+0x80c>
 800d1c8:	f1b9 0f00 	cmp.w	r9, #0
 800d1cc:	dc36      	bgt.n	800d23c <_dtoa_r+0x894>
 800d1ce:	9b06      	ldr	r3, [sp, #24]
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	dd33      	ble.n	800d23c <_dtoa_r+0x894>
 800d1d4:	46ca      	mov	sl, r9
 800d1d6:	f1ba 0f00 	cmp.w	sl, #0
 800d1da:	d10d      	bne.n	800d1f8 <_dtoa_r+0x850>
 800d1dc:	4621      	mov	r1, r4
 800d1de:	4653      	mov	r3, sl
 800d1e0:	2205      	movs	r2, #5
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f000 f9fa 	bl	800d5dc <__multadd>
 800d1e8:	4601      	mov	r1, r0
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	f000 fc59 	bl	800daa4 <__mcmp>
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	f73f ade4 	bgt.w	800cdc0 <_dtoa_r+0x418>
 800d1f8:	9b08      	ldr	r3, [sp, #32]
 800d1fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d1fe:	ea6f 0b03 	mvn.w	fp, r3
 800d202:	f04f 0900 	mov.w	r9, #0
 800d206:	4621      	mov	r1, r4
 800d208:	4630      	mov	r0, r6
 800d20a:	f000 f9c5 	bl	800d598 <_Bfree>
 800d20e:	2f00      	cmp	r7, #0
 800d210:	f43f aea1 	beq.w	800cf56 <_dtoa_r+0x5ae>
 800d214:	f1b9 0f00 	cmp.w	r9, #0
 800d218:	d005      	beq.n	800d226 <_dtoa_r+0x87e>
 800d21a:	45b9      	cmp	r9, r7
 800d21c:	d003      	beq.n	800d226 <_dtoa_r+0x87e>
 800d21e:	4649      	mov	r1, r9
 800d220:	4630      	mov	r0, r6
 800d222:	f000 f9b9 	bl	800d598 <_Bfree>
 800d226:	4639      	mov	r1, r7
 800d228:	4630      	mov	r0, r6
 800d22a:	f000 f9b5 	bl	800d598 <_Bfree>
 800d22e:	e692      	b.n	800cf56 <_dtoa_r+0x5ae>
 800d230:	2400      	movs	r4, #0
 800d232:	4627      	mov	r7, r4
 800d234:	e7e0      	b.n	800d1f8 <_dtoa_r+0x850>
 800d236:	4693      	mov	fp, r2
 800d238:	4627      	mov	r7, r4
 800d23a:	e5c1      	b.n	800cdc0 <_dtoa_r+0x418>
 800d23c:	9b07      	ldr	r3, [sp, #28]
 800d23e:	46ca      	mov	sl, r9
 800d240:	2b00      	cmp	r3, #0
 800d242:	f000 8100 	beq.w	800d446 <_dtoa_r+0xa9e>
 800d246:	f1b8 0f00 	cmp.w	r8, #0
 800d24a:	dd05      	ble.n	800d258 <_dtoa_r+0x8b0>
 800d24c:	4639      	mov	r1, r7
 800d24e:	4642      	mov	r2, r8
 800d250:	4630      	mov	r0, r6
 800d252:	f000 fbbb 	bl	800d9cc <__lshift>
 800d256:	4607      	mov	r7, r0
 800d258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d05d      	beq.n	800d31a <_dtoa_r+0x972>
 800d25e:	6879      	ldr	r1, [r7, #4]
 800d260:	4630      	mov	r0, r6
 800d262:	f000 f959 	bl	800d518 <_Balloc>
 800d266:	4680      	mov	r8, r0
 800d268:	b928      	cbnz	r0, 800d276 <_dtoa_r+0x8ce>
 800d26a:	4b82      	ldr	r3, [pc, #520]	; (800d474 <_dtoa_r+0xacc>)
 800d26c:	4602      	mov	r2, r0
 800d26e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d272:	f7ff bbb1 	b.w	800c9d8 <_dtoa_r+0x30>
 800d276:	693a      	ldr	r2, [r7, #16]
 800d278:	3202      	adds	r2, #2
 800d27a:	0092      	lsls	r2, r2, #2
 800d27c:	f107 010c 	add.w	r1, r7, #12
 800d280:	300c      	adds	r0, #12
 800d282:	f7ff faf4 	bl	800c86e <memcpy>
 800d286:	2201      	movs	r2, #1
 800d288:	4641      	mov	r1, r8
 800d28a:	4630      	mov	r0, r6
 800d28c:	f000 fb9e 	bl	800d9cc <__lshift>
 800d290:	9b01      	ldr	r3, [sp, #4]
 800d292:	3301      	adds	r3, #1
 800d294:	9304      	str	r3, [sp, #16]
 800d296:	9b01      	ldr	r3, [sp, #4]
 800d298:	4453      	add	r3, sl
 800d29a:	9308      	str	r3, [sp, #32]
 800d29c:	9b02      	ldr	r3, [sp, #8]
 800d29e:	f003 0301 	and.w	r3, r3, #1
 800d2a2:	46b9      	mov	r9, r7
 800d2a4:	9307      	str	r3, [sp, #28]
 800d2a6:	4607      	mov	r7, r0
 800d2a8:	9b04      	ldr	r3, [sp, #16]
 800d2aa:	4621      	mov	r1, r4
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	9302      	str	r3, [sp, #8]
 800d2b2:	f7ff faf1 	bl	800c898 <quorem>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	3330      	adds	r3, #48	; 0x30
 800d2ba:	9005      	str	r0, [sp, #20]
 800d2bc:	4649      	mov	r1, r9
 800d2be:	4628      	mov	r0, r5
 800d2c0:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c2:	f000 fbef 	bl	800daa4 <__mcmp>
 800d2c6:	463a      	mov	r2, r7
 800d2c8:	4682      	mov	sl, r0
 800d2ca:	4621      	mov	r1, r4
 800d2cc:	4630      	mov	r0, r6
 800d2ce:	f000 fc05 	bl	800dadc <__mdiff>
 800d2d2:	68c2      	ldr	r2, [r0, #12]
 800d2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2d6:	4680      	mov	r8, r0
 800d2d8:	bb0a      	cbnz	r2, 800d31e <_dtoa_r+0x976>
 800d2da:	4601      	mov	r1, r0
 800d2dc:	4628      	mov	r0, r5
 800d2de:	f000 fbe1 	bl	800daa4 <__mcmp>
 800d2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	4641      	mov	r1, r8
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d2ee:	f000 f953 	bl	800d598 <_Bfree>
 800d2f2:	9b06      	ldr	r3, [sp, #24]
 800d2f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2f6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d2fa:	ea43 0102 	orr.w	r1, r3, r2
 800d2fe:	9b07      	ldr	r3, [sp, #28]
 800d300:	4319      	orrs	r1, r3
 800d302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d304:	d10d      	bne.n	800d322 <_dtoa_r+0x97a>
 800d306:	2b39      	cmp	r3, #57	; 0x39
 800d308:	d029      	beq.n	800d35e <_dtoa_r+0x9b6>
 800d30a:	f1ba 0f00 	cmp.w	sl, #0
 800d30e:	dd01      	ble.n	800d314 <_dtoa_r+0x96c>
 800d310:	9b05      	ldr	r3, [sp, #20]
 800d312:	3331      	adds	r3, #49	; 0x31
 800d314:	9a02      	ldr	r2, [sp, #8]
 800d316:	7013      	strb	r3, [r2, #0]
 800d318:	e775      	b.n	800d206 <_dtoa_r+0x85e>
 800d31a:	4638      	mov	r0, r7
 800d31c:	e7b8      	b.n	800d290 <_dtoa_r+0x8e8>
 800d31e:	2201      	movs	r2, #1
 800d320:	e7e1      	b.n	800d2e6 <_dtoa_r+0x93e>
 800d322:	f1ba 0f00 	cmp.w	sl, #0
 800d326:	db06      	blt.n	800d336 <_dtoa_r+0x98e>
 800d328:	9906      	ldr	r1, [sp, #24]
 800d32a:	ea41 0a0a 	orr.w	sl, r1, sl
 800d32e:	9907      	ldr	r1, [sp, #28]
 800d330:	ea5a 0a01 	orrs.w	sl, sl, r1
 800d334:	d120      	bne.n	800d378 <_dtoa_r+0x9d0>
 800d336:	2a00      	cmp	r2, #0
 800d338:	ddec      	ble.n	800d314 <_dtoa_r+0x96c>
 800d33a:	4629      	mov	r1, r5
 800d33c:	2201      	movs	r2, #1
 800d33e:	4630      	mov	r0, r6
 800d340:	9304      	str	r3, [sp, #16]
 800d342:	f000 fb43 	bl	800d9cc <__lshift>
 800d346:	4621      	mov	r1, r4
 800d348:	4605      	mov	r5, r0
 800d34a:	f000 fbab 	bl	800daa4 <__mcmp>
 800d34e:	2800      	cmp	r0, #0
 800d350:	9b04      	ldr	r3, [sp, #16]
 800d352:	dc02      	bgt.n	800d35a <_dtoa_r+0x9b2>
 800d354:	d1de      	bne.n	800d314 <_dtoa_r+0x96c>
 800d356:	07da      	lsls	r2, r3, #31
 800d358:	d5dc      	bpl.n	800d314 <_dtoa_r+0x96c>
 800d35a:	2b39      	cmp	r3, #57	; 0x39
 800d35c:	d1d8      	bne.n	800d310 <_dtoa_r+0x968>
 800d35e:	9a02      	ldr	r2, [sp, #8]
 800d360:	2339      	movs	r3, #57	; 0x39
 800d362:	7013      	strb	r3, [r2, #0]
 800d364:	4643      	mov	r3, r8
 800d366:	4698      	mov	r8, r3
 800d368:	3b01      	subs	r3, #1
 800d36a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d36e:	2a39      	cmp	r2, #57	; 0x39
 800d370:	d051      	beq.n	800d416 <_dtoa_r+0xa6e>
 800d372:	3201      	adds	r2, #1
 800d374:	701a      	strb	r2, [r3, #0]
 800d376:	e746      	b.n	800d206 <_dtoa_r+0x85e>
 800d378:	2a00      	cmp	r2, #0
 800d37a:	dd03      	ble.n	800d384 <_dtoa_r+0x9dc>
 800d37c:	2b39      	cmp	r3, #57	; 0x39
 800d37e:	d0ee      	beq.n	800d35e <_dtoa_r+0x9b6>
 800d380:	3301      	adds	r3, #1
 800d382:	e7c7      	b.n	800d314 <_dtoa_r+0x96c>
 800d384:	9a04      	ldr	r2, [sp, #16]
 800d386:	9908      	ldr	r1, [sp, #32]
 800d388:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d38c:	428a      	cmp	r2, r1
 800d38e:	d02b      	beq.n	800d3e8 <_dtoa_r+0xa40>
 800d390:	4629      	mov	r1, r5
 800d392:	2300      	movs	r3, #0
 800d394:	220a      	movs	r2, #10
 800d396:	4630      	mov	r0, r6
 800d398:	f000 f920 	bl	800d5dc <__multadd>
 800d39c:	45b9      	cmp	r9, r7
 800d39e:	4605      	mov	r5, r0
 800d3a0:	f04f 0300 	mov.w	r3, #0
 800d3a4:	f04f 020a 	mov.w	r2, #10
 800d3a8:	4649      	mov	r1, r9
 800d3aa:	4630      	mov	r0, r6
 800d3ac:	d107      	bne.n	800d3be <_dtoa_r+0xa16>
 800d3ae:	f000 f915 	bl	800d5dc <__multadd>
 800d3b2:	4681      	mov	r9, r0
 800d3b4:	4607      	mov	r7, r0
 800d3b6:	9b04      	ldr	r3, [sp, #16]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	9304      	str	r3, [sp, #16]
 800d3bc:	e774      	b.n	800d2a8 <_dtoa_r+0x900>
 800d3be:	f000 f90d 	bl	800d5dc <__multadd>
 800d3c2:	4639      	mov	r1, r7
 800d3c4:	4681      	mov	r9, r0
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	220a      	movs	r2, #10
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	f000 f906 	bl	800d5dc <__multadd>
 800d3d0:	4607      	mov	r7, r0
 800d3d2:	e7f0      	b.n	800d3b6 <_dtoa_r+0xa0e>
 800d3d4:	f1ba 0f00 	cmp.w	sl, #0
 800d3d8:	9a01      	ldr	r2, [sp, #4]
 800d3da:	bfcc      	ite	gt
 800d3dc:	46d0      	movgt	r8, sl
 800d3de:	f04f 0801 	movle.w	r8, #1
 800d3e2:	4490      	add	r8, r2
 800d3e4:	f04f 0900 	mov.w	r9, #0
 800d3e8:	4629      	mov	r1, r5
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	9302      	str	r3, [sp, #8]
 800d3f0:	f000 faec 	bl	800d9cc <__lshift>
 800d3f4:	4621      	mov	r1, r4
 800d3f6:	4605      	mov	r5, r0
 800d3f8:	f000 fb54 	bl	800daa4 <__mcmp>
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	dcb1      	bgt.n	800d364 <_dtoa_r+0x9bc>
 800d400:	d102      	bne.n	800d408 <_dtoa_r+0xa60>
 800d402:	9b02      	ldr	r3, [sp, #8]
 800d404:	07db      	lsls	r3, r3, #31
 800d406:	d4ad      	bmi.n	800d364 <_dtoa_r+0x9bc>
 800d408:	4643      	mov	r3, r8
 800d40a:	4698      	mov	r8, r3
 800d40c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d410:	2a30      	cmp	r2, #48	; 0x30
 800d412:	d0fa      	beq.n	800d40a <_dtoa_r+0xa62>
 800d414:	e6f7      	b.n	800d206 <_dtoa_r+0x85e>
 800d416:	9a01      	ldr	r2, [sp, #4]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d1a4      	bne.n	800d366 <_dtoa_r+0x9be>
 800d41c:	f10b 0b01 	add.w	fp, fp, #1
 800d420:	2331      	movs	r3, #49	; 0x31
 800d422:	e778      	b.n	800d316 <_dtoa_r+0x96e>
 800d424:	4b14      	ldr	r3, [pc, #80]	; (800d478 <_dtoa_r+0xad0>)
 800d426:	f7ff bb2a 	b.w	800ca7e <_dtoa_r+0xd6>
 800d42a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f47f ab05 	bne.w	800ca3c <_dtoa_r+0x94>
 800d432:	4b12      	ldr	r3, [pc, #72]	; (800d47c <_dtoa_r+0xad4>)
 800d434:	f7ff bb23 	b.w	800ca7e <_dtoa_r+0xd6>
 800d438:	f1ba 0f00 	cmp.w	sl, #0
 800d43c:	dc03      	bgt.n	800d446 <_dtoa_r+0xa9e>
 800d43e:	9b06      	ldr	r3, [sp, #24]
 800d440:	2b02      	cmp	r3, #2
 800d442:	f73f aec8 	bgt.w	800d1d6 <_dtoa_r+0x82e>
 800d446:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d44a:	4621      	mov	r1, r4
 800d44c:	4628      	mov	r0, r5
 800d44e:	f7ff fa23 	bl	800c898 <quorem>
 800d452:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d456:	f808 3b01 	strb.w	r3, [r8], #1
 800d45a:	9a01      	ldr	r2, [sp, #4]
 800d45c:	eba8 0202 	sub.w	r2, r8, r2
 800d460:	4592      	cmp	sl, r2
 800d462:	ddb7      	ble.n	800d3d4 <_dtoa_r+0xa2c>
 800d464:	4629      	mov	r1, r5
 800d466:	2300      	movs	r3, #0
 800d468:	220a      	movs	r2, #10
 800d46a:	4630      	mov	r0, r6
 800d46c:	f000 f8b6 	bl	800d5dc <__multadd>
 800d470:	4605      	mov	r5, r0
 800d472:	e7ea      	b.n	800d44a <_dtoa_r+0xaa2>
 800d474:	080186ec 	.word	0x080186ec
 800d478:	080188cf 	.word	0x080188cf
 800d47c:	08018670 	.word	0x08018670

0800d480 <_free_r>:
 800d480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d482:	2900      	cmp	r1, #0
 800d484:	d044      	beq.n	800d510 <_free_r+0x90>
 800d486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d48a:	9001      	str	r0, [sp, #4]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f1a1 0404 	sub.w	r4, r1, #4
 800d492:	bfb8      	it	lt
 800d494:	18e4      	addlt	r4, r4, r3
 800d496:	f7fd ff7b 	bl	800b390 <__malloc_lock>
 800d49a:	4a1e      	ldr	r2, [pc, #120]	; (800d514 <_free_r+0x94>)
 800d49c:	9801      	ldr	r0, [sp, #4]
 800d49e:	6813      	ldr	r3, [r2, #0]
 800d4a0:	b933      	cbnz	r3, 800d4b0 <_free_r+0x30>
 800d4a2:	6063      	str	r3, [r4, #4]
 800d4a4:	6014      	str	r4, [r2, #0]
 800d4a6:	b003      	add	sp, #12
 800d4a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4ac:	f7fd bf76 	b.w	800b39c <__malloc_unlock>
 800d4b0:	42a3      	cmp	r3, r4
 800d4b2:	d908      	bls.n	800d4c6 <_free_r+0x46>
 800d4b4:	6825      	ldr	r5, [r4, #0]
 800d4b6:	1961      	adds	r1, r4, r5
 800d4b8:	428b      	cmp	r3, r1
 800d4ba:	bf01      	itttt	eq
 800d4bc:	6819      	ldreq	r1, [r3, #0]
 800d4be:	685b      	ldreq	r3, [r3, #4]
 800d4c0:	1949      	addeq	r1, r1, r5
 800d4c2:	6021      	streq	r1, [r4, #0]
 800d4c4:	e7ed      	b.n	800d4a2 <_free_r+0x22>
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	b10b      	cbz	r3, 800d4d0 <_free_r+0x50>
 800d4cc:	42a3      	cmp	r3, r4
 800d4ce:	d9fa      	bls.n	800d4c6 <_free_r+0x46>
 800d4d0:	6811      	ldr	r1, [r2, #0]
 800d4d2:	1855      	adds	r5, r2, r1
 800d4d4:	42a5      	cmp	r5, r4
 800d4d6:	d10b      	bne.n	800d4f0 <_free_r+0x70>
 800d4d8:	6824      	ldr	r4, [r4, #0]
 800d4da:	4421      	add	r1, r4
 800d4dc:	1854      	adds	r4, r2, r1
 800d4de:	42a3      	cmp	r3, r4
 800d4e0:	6011      	str	r1, [r2, #0]
 800d4e2:	d1e0      	bne.n	800d4a6 <_free_r+0x26>
 800d4e4:	681c      	ldr	r4, [r3, #0]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	6053      	str	r3, [r2, #4]
 800d4ea:	440c      	add	r4, r1
 800d4ec:	6014      	str	r4, [r2, #0]
 800d4ee:	e7da      	b.n	800d4a6 <_free_r+0x26>
 800d4f0:	d902      	bls.n	800d4f8 <_free_r+0x78>
 800d4f2:	230c      	movs	r3, #12
 800d4f4:	6003      	str	r3, [r0, #0]
 800d4f6:	e7d6      	b.n	800d4a6 <_free_r+0x26>
 800d4f8:	6825      	ldr	r5, [r4, #0]
 800d4fa:	1961      	adds	r1, r4, r5
 800d4fc:	428b      	cmp	r3, r1
 800d4fe:	bf04      	itt	eq
 800d500:	6819      	ldreq	r1, [r3, #0]
 800d502:	685b      	ldreq	r3, [r3, #4]
 800d504:	6063      	str	r3, [r4, #4]
 800d506:	bf04      	itt	eq
 800d508:	1949      	addeq	r1, r1, r5
 800d50a:	6021      	streq	r1, [r4, #0]
 800d50c:	6054      	str	r4, [r2, #4]
 800d50e:	e7ca      	b.n	800d4a6 <_free_r+0x26>
 800d510:	b003      	add	sp, #12
 800d512:	bd30      	pop	{r4, r5, pc}
 800d514:	20003a34 	.word	0x20003a34

0800d518 <_Balloc>:
 800d518:	b570      	push	{r4, r5, r6, lr}
 800d51a:	69c6      	ldr	r6, [r0, #28]
 800d51c:	4604      	mov	r4, r0
 800d51e:	460d      	mov	r5, r1
 800d520:	b976      	cbnz	r6, 800d540 <_Balloc+0x28>
 800d522:	2010      	movs	r0, #16
 800d524:	f7fd fe84 	bl	800b230 <malloc>
 800d528:	4602      	mov	r2, r0
 800d52a:	61e0      	str	r0, [r4, #28]
 800d52c:	b920      	cbnz	r0, 800d538 <_Balloc+0x20>
 800d52e:	4b18      	ldr	r3, [pc, #96]	; (800d590 <_Balloc+0x78>)
 800d530:	4818      	ldr	r0, [pc, #96]	; (800d594 <_Balloc+0x7c>)
 800d532:	216b      	movs	r1, #107	; 0x6b
 800d534:	f002 faf0 	bl	800fb18 <__assert_func>
 800d538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d53c:	6006      	str	r6, [r0, #0]
 800d53e:	60c6      	str	r6, [r0, #12]
 800d540:	69e6      	ldr	r6, [r4, #28]
 800d542:	68f3      	ldr	r3, [r6, #12]
 800d544:	b183      	cbz	r3, 800d568 <_Balloc+0x50>
 800d546:	69e3      	ldr	r3, [r4, #28]
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d54e:	b9b8      	cbnz	r0, 800d580 <_Balloc+0x68>
 800d550:	2101      	movs	r1, #1
 800d552:	fa01 f605 	lsl.w	r6, r1, r5
 800d556:	1d72      	adds	r2, r6, #5
 800d558:	0092      	lsls	r2, r2, #2
 800d55a:	4620      	mov	r0, r4
 800d55c:	f7fd fe40 	bl	800b1e0 <_calloc_r>
 800d560:	b160      	cbz	r0, 800d57c <_Balloc+0x64>
 800d562:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d566:	e00e      	b.n	800d586 <_Balloc+0x6e>
 800d568:	2221      	movs	r2, #33	; 0x21
 800d56a:	2104      	movs	r1, #4
 800d56c:	4620      	mov	r0, r4
 800d56e:	f7fd fe37 	bl	800b1e0 <_calloc_r>
 800d572:	69e3      	ldr	r3, [r4, #28]
 800d574:	60f0      	str	r0, [r6, #12]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1e4      	bne.n	800d546 <_Balloc+0x2e>
 800d57c:	2000      	movs	r0, #0
 800d57e:	bd70      	pop	{r4, r5, r6, pc}
 800d580:	6802      	ldr	r2, [r0, #0]
 800d582:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d586:	2300      	movs	r3, #0
 800d588:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d58c:	e7f7      	b.n	800d57e <_Balloc+0x66>
 800d58e:	bf00      	nop
 800d590:	0801867d 	.word	0x0801867d
 800d594:	080186fd 	.word	0x080186fd

0800d598 <_Bfree>:
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	69c6      	ldr	r6, [r0, #28]
 800d59c:	4605      	mov	r5, r0
 800d59e:	460c      	mov	r4, r1
 800d5a0:	b976      	cbnz	r6, 800d5c0 <_Bfree+0x28>
 800d5a2:	2010      	movs	r0, #16
 800d5a4:	f7fd fe44 	bl	800b230 <malloc>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	61e8      	str	r0, [r5, #28]
 800d5ac:	b920      	cbnz	r0, 800d5b8 <_Bfree+0x20>
 800d5ae:	4b09      	ldr	r3, [pc, #36]	; (800d5d4 <_Bfree+0x3c>)
 800d5b0:	4809      	ldr	r0, [pc, #36]	; (800d5d8 <_Bfree+0x40>)
 800d5b2:	218f      	movs	r1, #143	; 0x8f
 800d5b4:	f002 fab0 	bl	800fb18 <__assert_func>
 800d5b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5bc:	6006      	str	r6, [r0, #0]
 800d5be:	60c6      	str	r6, [r0, #12]
 800d5c0:	b13c      	cbz	r4, 800d5d2 <_Bfree+0x3a>
 800d5c2:	69eb      	ldr	r3, [r5, #28]
 800d5c4:	6862      	ldr	r2, [r4, #4]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d5cc:	6021      	str	r1, [r4, #0]
 800d5ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d5d2:	bd70      	pop	{r4, r5, r6, pc}
 800d5d4:	0801867d 	.word	0x0801867d
 800d5d8:	080186fd 	.word	0x080186fd

0800d5dc <__multadd>:
 800d5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e0:	690d      	ldr	r5, [r1, #16]
 800d5e2:	4607      	mov	r7, r0
 800d5e4:	460c      	mov	r4, r1
 800d5e6:	461e      	mov	r6, r3
 800d5e8:	f101 0c14 	add.w	ip, r1, #20
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	f8dc 3000 	ldr.w	r3, [ip]
 800d5f2:	b299      	uxth	r1, r3
 800d5f4:	fb02 6101 	mla	r1, r2, r1, r6
 800d5f8:	0c1e      	lsrs	r6, r3, #16
 800d5fa:	0c0b      	lsrs	r3, r1, #16
 800d5fc:	fb02 3306 	mla	r3, r2, r6, r3
 800d600:	b289      	uxth	r1, r1
 800d602:	3001      	adds	r0, #1
 800d604:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d608:	4285      	cmp	r5, r0
 800d60a:	f84c 1b04 	str.w	r1, [ip], #4
 800d60e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d612:	dcec      	bgt.n	800d5ee <__multadd+0x12>
 800d614:	b30e      	cbz	r6, 800d65a <__multadd+0x7e>
 800d616:	68a3      	ldr	r3, [r4, #8]
 800d618:	42ab      	cmp	r3, r5
 800d61a:	dc19      	bgt.n	800d650 <__multadd+0x74>
 800d61c:	6861      	ldr	r1, [r4, #4]
 800d61e:	4638      	mov	r0, r7
 800d620:	3101      	adds	r1, #1
 800d622:	f7ff ff79 	bl	800d518 <_Balloc>
 800d626:	4680      	mov	r8, r0
 800d628:	b928      	cbnz	r0, 800d636 <__multadd+0x5a>
 800d62a:	4602      	mov	r2, r0
 800d62c:	4b0c      	ldr	r3, [pc, #48]	; (800d660 <__multadd+0x84>)
 800d62e:	480d      	ldr	r0, [pc, #52]	; (800d664 <__multadd+0x88>)
 800d630:	21ba      	movs	r1, #186	; 0xba
 800d632:	f002 fa71 	bl	800fb18 <__assert_func>
 800d636:	6922      	ldr	r2, [r4, #16]
 800d638:	3202      	adds	r2, #2
 800d63a:	f104 010c 	add.w	r1, r4, #12
 800d63e:	0092      	lsls	r2, r2, #2
 800d640:	300c      	adds	r0, #12
 800d642:	f7ff f914 	bl	800c86e <memcpy>
 800d646:	4621      	mov	r1, r4
 800d648:	4638      	mov	r0, r7
 800d64a:	f7ff ffa5 	bl	800d598 <_Bfree>
 800d64e:	4644      	mov	r4, r8
 800d650:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d654:	3501      	adds	r5, #1
 800d656:	615e      	str	r6, [r3, #20]
 800d658:	6125      	str	r5, [r4, #16]
 800d65a:	4620      	mov	r0, r4
 800d65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d660:	080186ec 	.word	0x080186ec
 800d664:	080186fd 	.word	0x080186fd

0800d668 <__s2b>:
 800d668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d66c:	460c      	mov	r4, r1
 800d66e:	4615      	mov	r5, r2
 800d670:	461f      	mov	r7, r3
 800d672:	2209      	movs	r2, #9
 800d674:	3308      	adds	r3, #8
 800d676:	4606      	mov	r6, r0
 800d678:	fb93 f3f2 	sdiv	r3, r3, r2
 800d67c:	2100      	movs	r1, #0
 800d67e:	2201      	movs	r2, #1
 800d680:	429a      	cmp	r2, r3
 800d682:	db09      	blt.n	800d698 <__s2b+0x30>
 800d684:	4630      	mov	r0, r6
 800d686:	f7ff ff47 	bl	800d518 <_Balloc>
 800d68a:	b940      	cbnz	r0, 800d69e <__s2b+0x36>
 800d68c:	4602      	mov	r2, r0
 800d68e:	4b19      	ldr	r3, [pc, #100]	; (800d6f4 <__s2b+0x8c>)
 800d690:	4819      	ldr	r0, [pc, #100]	; (800d6f8 <__s2b+0x90>)
 800d692:	21d3      	movs	r1, #211	; 0xd3
 800d694:	f002 fa40 	bl	800fb18 <__assert_func>
 800d698:	0052      	lsls	r2, r2, #1
 800d69a:	3101      	adds	r1, #1
 800d69c:	e7f0      	b.n	800d680 <__s2b+0x18>
 800d69e:	9b08      	ldr	r3, [sp, #32]
 800d6a0:	6143      	str	r3, [r0, #20]
 800d6a2:	2d09      	cmp	r5, #9
 800d6a4:	f04f 0301 	mov.w	r3, #1
 800d6a8:	6103      	str	r3, [r0, #16]
 800d6aa:	dd16      	ble.n	800d6da <__s2b+0x72>
 800d6ac:	f104 0909 	add.w	r9, r4, #9
 800d6b0:	46c8      	mov	r8, r9
 800d6b2:	442c      	add	r4, r5
 800d6b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d6b8:	4601      	mov	r1, r0
 800d6ba:	3b30      	subs	r3, #48	; 0x30
 800d6bc:	220a      	movs	r2, #10
 800d6be:	4630      	mov	r0, r6
 800d6c0:	f7ff ff8c 	bl	800d5dc <__multadd>
 800d6c4:	45a0      	cmp	r8, r4
 800d6c6:	d1f5      	bne.n	800d6b4 <__s2b+0x4c>
 800d6c8:	f1a5 0408 	sub.w	r4, r5, #8
 800d6cc:	444c      	add	r4, r9
 800d6ce:	1b2d      	subs	r5, r5, r4
 800d6d0:	1963      	adds	r3, r4, r5
 800d6d2:	42bb      	cmp	r3, r7
 800d6d4:	db04      	blt.n	800d6e0 <__s2b+0x78>
 800d6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6da:	340a      	adds	r4, #10
 800d6dc:	2509      	movs	r5, #9
 800d6de:	e7f6      	b.n	800d6ce <__s2b+0x66>
 800d6e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d6e4:	4601      	mov	r1, r0
 800d6e6:	3b30      	subs	r3, #48	; 0x30
 800d6e8:	220a      	movs	r2, #10
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	f7ff ff76 	bl	800d5dc <__multadd>
 800d6f0:	e7ee      	b.n	800d6d0 <__s2b+0x68>
 800d6f2:	bf00      	nop
 800d6f4:	080186ec 	.word	0x080186ec
 800d6f8:	080186fd 	.word	0x080186fd

0800d6fc <__hi0bits>:
 800d6fc:	0c03      	lsrs	r3, r0, #16
 800d6fe:	041b      	lsls	r3, r3, #16
 800d700:	b9d3      	cbnz	r3, 800d738 <__hi0bits+0x3c>
 800d702:	0400      	lsls	r0, r0, #16
 800d704:	2310      	movs	r3, #16
 800d706:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d70a:	bf04      	itt	eq
 800d70c:	0200      	lsleq	r0, r0, #8
 800d70e:	3308      	addeq	r3, #8
 800d710:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d714:	bf04      	itt	eq
 800d716:	0100      	lsleq	r0, r0, #4
 800d718:	3304      	addeq	r3, #4
 800d71a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d71e:	bf04      	itt	eq
 800d720:	0080      	lsleq	r0, r0, #2
 800d722:	3302      	addeq	r3, #2
 800d724:	2800      	cmp	r0, #0
 800d726:	db05      	blt.n	800d734 <__hi0bits+0x38>
 800d728:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d72c:	f103 0301 	add.w	r3, r3, #1
 800d730:	bf08      	it	eq
 800d732:	2320      	moveq	r3, #32
 800d734:	4618      	mov	r0, r3
 800d736:	4770      	bx	lr
 800d738:	2300      	movs	r3, #0
 800d73a:	e7e4      	b.n	800d706 <__hi0bits+0xa>

0800d73c <__lo0bits>:
 800d73c:	6803      	ldr	r3, [r0, #0]
 800d73e:	f013 0207 	ands.w	r2, r3, #7
 800d742:	d00c      	beq.n	800d75e <__lo0bits+0x22>
 800d744:	07d9      	lsls	r1, r3, #31
 800d746:	d422      	bmi.n	800d78e <__lo0bits+0x52>
 800d748:	079a      	lsls	r2, r3, #30
 800d74a:	bf49      	itett	mi
 800d74c:	085b      	lsrmi	r3, r3, #1
 800d74e:	089b      	lsrpl	r3, r3, #2
 800d750:	6003      	strmi	r3, [r0, #0]
 800d752:	2201      	movmi	r2, #1
 800d754:	bf5c      	itt	pl
 800d756:	6003      	strpl	r3, [r0, #0]
 800d758:	2202      	movpl	r2, #2
 800d75a:	4610      	mov	r0, r2
 800d75c:	4770      	bx	lr
 800d75e:	b299      	uxth	r1, r3
 800d760:	b909      	cbnz	r1, 800d766 <__lo0bits+0x2a>
 800d762:	0c1b      	lsrs	r3, r3, #16
 800d764:	2210      	movs	r2, #16
 800d766:	b2d9      	uxtb	r1, r3
 800d768:	b909      	cbnz	r1, 800d76e <__lo0bits+0x32>
 800d76a:	3208      	adds	r2, #8
 800d76c:	0a1b      	lsrs	r3, r3, #8
 800d76e:	0719      	lsls	r1, r3, #28
 800d770:	bf04      	itt	eq
 800d772:	091b      	lsreq	r3, r3, #4
 800d774:	3204      	addeq	r2, #4
 800d776:	0799      	lsls	r1, r3, #30
 800d778:	bf04      	itt	eq
 800d77a:	089b      	lsreq	r3, r3, #2
 800d77c:	3202      	addeq	r2, #2
 800d77e:	07d9      	lsls	r1, r3, #31
 800d780:	d403      	bmi.n	800d78a <__lo0bits+0x4e>
 800d782:	085b      	lsrs	r3, r3, #1
 800d784:	f102 0201 	add.w	r2, r2, #1
 800d788:	d003      	beq.n	800d792 <__lo0bits+0x56>
 800d78a:	6003      	str	r3, [r0, #0]
 800d78c:	e7e5      	b.n	800d75a <__lo0bits+0x1e>
 800d78e:	2200      	movs	r2, #0
 800d790:	e7e3      	b.n	800d75a <__lo0bits+0x1e>
 800d792:	2220      	movs	r2, #32
 800d794:	e7e1      	b.n	800d75a <__lo0bits+0x1e>
	...

0800d798 <__i2b>:
 800d798:	b510      	push	{r4, lr}
 800d79a:	460c      	mov	r4, r1
 800d79c:	2101      	movs	r1, #1
 800d79e:	f7ff febb 	bl	800d518 <_Balloc>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	b928      	cbnz	r0, 800d7b2 <__i2b+0x1a>
 800d7a6:	4b05      	ldr	r3, [pc, #20]	; (800d7bc <__i2b+0x24>)
 800d7a8:	4805      	ldr	r0, [pc, #20]	; (800d7c0 <__i2b+0x28>)
 800d7aa:	f240 1145 	movw	r1, #325	; 0x145
 800d7ae:	f002 f9b3 	bl	800fb18 <__assert_func>
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	6144      	str	r4, [r0, #20]
 800d7b6:	6103      	str	r3, [r0, #16]
 800d7b8:	bd10      	pop	{r4, pc}
 800d7ba:	bf00      	nop
 800d7bc:	080186ec 	.word	0x080186ec
 800d7c0:	080186fd 	.word	0x080186fd

0800d7c4 <__multiply>:
 800d7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c8:	4691      	mov	r9, r2
 800d7ca:	690a      	ldr	r2, [r1, #16]
 800d7cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	bfb8      	it	lt
 800d7d4:	460b      	movlt	r3, r1
 800d7d6:	460c      	mov	r4, r1
 800d7d8:	bfbc      	itt	lt
 800d7da:	464c      	movlt	r4, r9
 800d7dc:	4699      	movlt	r9, r3
 800d7de:	6927      	ldr	r7, [r4, #16]
 800d7e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d7e4:	68a3      	ldr	r3, [r4, #8]
 800d7e6:	6861      	ldr	r1, [r4, #4]
 800d7e8:	eb07 060a 	add.w	r6, r7, sl
 800d7ec:	42b3      	cmp	r3, r6
 800d7ee:	b085      	sub	sp, #20
 800d7f0:	bfb8      	it	lt
 800d7f2:	3101      	addlt	r1, #1
 800d7f4:	f7ff fe90 	bl	800d518 <_Balloc>
 800d7f8:	b930      	cbnz	r0, 800d808 <__multiply+0x44>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	4b44      	ldr	r3, [pc, #272]	; (800d910 <__multiply+0x14c>)
 800d7fe:	4845      	ldr	r0, [pc, #276]	; (800d914 <__multiply+0x150>)
 800d800:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d804:	f002 f988 	bl	800fb18 <__assert_func>
 800d808:	f100 0514 	add.w	r5, r0, #20
 800d80c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d810:	462b      	mov	r3, r5
 800d812:	2200      	movs	r2, #0
 800d814:	4543      	cmp	r3, r8
 800d816:	d321      	bcc.n	800d85c <__multiply+0x98>
 800d818:	f104 0314 	add.w	r3, r4, #20
 800d81c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d820:	f109 0314 	add.w	r3, r9, #20
 800d824:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d828:	9202      	str	r2, [sp, #8]
 800d82a:	1b3a      	subs	r2, r7, r4
 800d82c:	3a15      	subs	r2, #21
 800d82e:	f022 0203 	bic.w	r2, r2, #3
 800d832:	3204      	adds	r2, #4
 800d834:	f104 0115 	add.w	r1, r4, #21
 800d838:	428f      	cmp	r7, r1
 800d83a:	bf38      	it	cc
 800d83c:	2204      	movcc	r2, #4
 800d83e:	9201      	str	r2, [sp, #4]
 800d840:	9a02      	ldr	r2, [sp, #8]
 800d842:	9303      	str	r3, [sp, #12]
 800d844:	429a      	cmp	r2, r3
 800d846:	d80c      	bhi.n	800d862 <__multiply+0x9e>
 800d848:	2e00      	cmp	r6, #0
 800d84a:	dd03      	ble.n	800d854 <__multiply+0x90>
 800d84c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d850:	2b00      	cmp	r3, #0
 800d852:	d05b      	beq.n	800d90c <__multiply+0x148>
 800d854:	6106      	str	r6, [r0, #16]
 800d856:	b005      	add	sp, #20
 800d858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85c:	f843 2b04 	str.w	r2, [r3], #4
 800d860:	e7d8      	b.n	800d814 <__multiply+0x50>
 800d862:	f8b3 a000 	ldrh.w	sl, [r3]
 800d866:	f1ba 0f00 	cmp.w	sl, #0
 800d86a:	d024      	beq.n	800d8b6 <__multiply+0xf2>
 800d86c:	f104 0e14 	add.w	lr, r4, #20
 800d870:	46a9      	mov	r9, r5
 800d872:	f04f 0c00 	mov.w	ip, #0
 800d876:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d87a:	f8d9 1000 	ldr.w	r1, [r9]
 800d87e:	fa1f fb82 	uxth.w	fp, r2
 800d882:	b289      	uxth	r1, r1
 800d884:	fb0a 110b 	mla	r1, sl, fp, r1
 800d888:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d88c:	f8d9 2000 	ldr.w	r2, [r9]
 800d890:	4461      	add	r1, ip
 800d892:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d896:	fb0a c20b 	mla	r2, sl, fp, ip
 800d89a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d89e:	b289      	uxth	r1, r1
 800d8a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d8a4:	4577      	cmp	r7, lr
 800d8a6:	f849 1b04 	str.w	r1, [r9], #4
 800d8aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d8ae:	d8e2      	bhi.n	800d876 <__multiply+0xb2>
 800d8b0:	9a01      	ldr	r2, [sp, #4]
 800d8b2:	f845 c002 	str.w	ip, [r5, r2]
 800d8b6:	9a03      	ldr	r2, [sp, #12]
 800d8b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d8bc:	3304      	adds	r3, #4
 800d8be:	f1b9 0f00 	cmp.w	r9, #0
 800d8c2:	d021      	beq.n	800d908 <__multiply+0x144>
 800d8c4:	6829      	ldr	r1, [r5, #0]
 800d8c6:	f104 0c14 	add.w	ip, r4, #20
 800d8ca:	46ae      	mov	lr, r5
 800d8cc:	f04f 0a00 	mov.w	sl, #0
 800d8d0:	f8bc b000 	ldrh.w	fp, [ip]
 800d8d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d8d8:	fb09 220b 	mla	r2, r9, fp, r2
 800d8dc:	4452      	add	r2, sl
 800d8de:	b289      	uxth	r1, r1
 800d8e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d8e4:	f84e 1b04 	str.w	r1, [lr], #4
 800d8e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d8ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d8f0:	f8be 1000 	ldrh.w	r1, [lr]
 800d8f4:	fb09 110a 	mla	r1, r9, sl, r1
 800d8f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d8fc:	4567      	cmp	r7, ip
 800d8fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d902:	d8e5      	bhi.n	800d8d0 <__multiply+0x10c>
 800d904:	9a01      	ldr	r2, [sp, #4]
 800d906:	50a9      	str	r1, [r5, r2]
 800d908:	3504      	adds	r5, #4
 800d90a:	e799      	b.n	800d840 <__multiply+0x7c>
 800d90c:	3e01      	subs	r6, #1
 800d90e:	e79b      	b.n	800d848 <__multiply+0x84>
 800d910:	080186ec 	.word	0x080186ec
 800d914:	080186fd 	.word	0x080186fd

0800d918 <__pow5mult>:
 800d918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d91c:	4615      	mov	r5, r2
 800d91e:	f012 0203 	ands.w	r2, r2, #3
 800d922:	4606      	mov	r6, r0
 800d924:	460f      	mov	r7, r1
 800d926:	d007      	beq.n	800d938 <__pow5mult+0x20>
 800d928:	4c25      	ldr	r4, [pc, #148]	; (800d9c0 <__pow5mult+0xa8>)
 800d92a:	3a01      	subs	r2, #1
 800d92c:	2300      	movs	r3, #0
 800d92e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d932:	f7ff fe53 	bl	800d5dc <__multadd>
 800d936:	4607      	mov	r7, r0
 800d938:	10ad      	asrs	r5, r5, #2
 800d93a:	d03d      	beq.n	800d9b8 <__pow5mult+0xa0>
 800d93c:	69f4      	ldr	r4, [r6, #28]
 800d93e:	b97c      	cbnz	r4, 800d960 <__pow5mult+0x48>
 800d940:	2010      	movs	r0, #16
 800d942:	f7fd fc75 	bl	800b230 <malloc>
 800d946:	4602      	mov	r2, r0
 800d948:	61f0      	str	r0, [r6, #28]
 800d94a:	b928      	cbnz	r0, 800d958 <__pow5mult+0x40>
 800d94c:	4b1d      	ldr	r3, [pc, #116]	; (800d9c4 <__pow5mult+0xac>)
 800d94e:	481e      	ldr	r0, [pc, #120]	; (800d9c8 <__pow5mult+0xb0>)
 800d950:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d954:	f002 f8e0 	bl	800fb18 <__assert_func>
 800d958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d95c:	6004      	str	r4, [r0, #0]
 800d95e:	60c4      	str	r4, [r0, #12]
 800d960:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d964:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d968:	b94c      	cbnz	r4, 800d97e <__pow5mult+0x66>
 800d96a:	f240 2171 	movw	r1, #625	; 0x271
 800d96e:	4630      	mov	r0, r6
 800d970:	f7ff ff12 	bl	800d798 <__i2b>
 800d974:	2300      	movs	r3, #0
 800d976:	f8c8 0008 	str.w	r0, [r8, #8]
 800d97a:	4604      	mov	r4, r0
 800d97c:	6003      	str	r3, [r0, #0]
 800d97e:	f04f 0900 	mov.w	r9, #0
 800d982:	07eb      	lsls	r3, r5, #31
 800d984:	d50a      	bpl.n	800d99c <__pow5mult+0x84>
 800d986:	4639      	mov	r1, r7
 800d988:	4622      	mov	r2, r4
 800d98a:	4630      	mov	r0, r6
 800d98c:	f7ff ff1a 	bl	800d7c4 <__multiply>
 800d990:	4639      	mov	r1, r7
 800d992:	4680      	mov	r8, r0
 800d994:	4630      	mov	r0, r6
 800d996:	f7ff fdff 	bl	800d598 <_Bfree>
 800d99a:	4647      	mov	r7, r8
 800d99c:	106d      	asrs	r5, r5, #1
 800d99e:	d00b      	beq.n	800d9b8 <__pow5mult+0xa0>
 800d9a0:	6820      	ldr	r0, [r4, #0]
 800d9a2:	b938      	cbnz	r0, 800d9b4 <__pow5mult+0x9c>
 800d9a4:	4622      	mov	r2, r4
 800d9a6:	4621      	mov	r1, r4
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f7ff ff0b 	bl	800d7c4 <__multiply>
 800d9ae:	6020      	str	r0, [r4, #0]
 800d9b0:	f8c0 9000 	str.w	r9, [r0]
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	e7e4      	b.n	800d982 <__pow5mult+0x6a>
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9be:	bf00      	nop
 800d9c0:	08018848 	.word	0x08018848
 800d9c4:	0801867d 	.word	0x0801867d
 800d9c8:	080186fd 	.word	0x080186fd

0800d9cc <__lshift>:
 800d9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d0:	460c      	mov	r4, r1
 800d9d2:	6849      	ldr	r1, [r1, #4]
 800d9d4:	6923      	ldr	r3, [r4, #16]
 800d9d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d9da:	68a3      	ldr	r3, [r4, #8]
 800d9dc:	4607      	mov	r7, r0
 800d9de:	4691      	mov	r9, r2
 800d9e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d9e4:	f108 0601 	add.w	r6, r8, #1
 800d9e8:	42b3      	cmp	r3, r6
 800d9ea:	db0b      	blt.n	800da04 <__lshift+0x38>
 800d9ec:	4638      	mov	r0, r7
 800d9ee:	f7ff fd93 	bl	800d518 <_Balloc>
 800d9f2:	4605      	mov	r5, r0
 800d9f4:	b948      	cbnz	r0, 800da0a <__lshift+0x3e>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	4b28      	ldr	r3, [pc, #160]	; (800da9c <__lshift+0xd0>)
 800d9fa:	4829      	ldr	r0, [pc, #164]	; (800daa0 <__lshift+0xd4>)
 800d9fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800da00:	f002 f88a 	bl	800fb18 <__assert_func>
 800da04:	3101      	adds	r1, #1
 800da06:	005b      	lsls	r3, r3, #1
 800da08:	e7ee      	b.n	800d9e8 <__lshift+0x1c>
 800da0a:	2300      	movs	r3, #0
 800da0c:	f100 0114 	add.w	r1, r0, #20
 800da10:	f100 0210 	add.w	r2, r0, #16
 800da14:	4618      	mov	r0, r3
 800da16:	4553      	cmp	r3, sl
 800da18:	db33      	blt.n	800da82 <__lshift+0xb6>
 800da1a:	6920      	ldr	r0, [r4, #16]
 800da1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da20:	f104 0314 	add.w	r3, r4, #20
 800da24:	f019 091f 	ands.w	r9, r9, #31
 800da28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da30:	d02b      	beq.n	800da8a <__lshift+0xbe>
 800da32:	f1c9 0e20 	rsb	lr, r9, #32
 800da36:	468a      	mov	sl, r1
 800da38:	2200      	movs	r2, #0
 800da3a:	6818      	ldr	r0, [r3, #0]
 800da3c:	fa00 f009 	lsl.w	r0, r0, r9
 800da40:	4310      	orrs	r0, r2
 800da42:	f84a 0b04 	str.w	r0, [sl], #4
 800da46:	f853 2b04 	ldr.w	r2, [r3], #4
 800da4a:	459c      	cmp	ip, r3
 800da4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800da50:	d8f3      	bhi.n	800da3a <__lshift+0x6e>
 800da52:	ebac 0304 	sub.w	r3, ip, r4
 800da56:	3b15      	subs	r3, #21
 800da58:	f023 0303 	bic.w	r3, r3, #3
 800da5c:	3304      	adds	r3, #4
 800da5e:	f104 0015 	add.w	r0, r4, #21
 800da62:	4584      	cmp	ip, r0
 800da64:	bf38      	it	cc
 800da66:	2304      	movcc	r3, #4
 800da68:	50ca      	str	r2, [r1, r3]
 800da6a:	b10a      	cbz	r2, 800da70 <__lshift+0xa4>
 800da6c:	f108 0602 	add.w	r6, r8, #2
 800da70:	3e01      	subs	r6, #1
 800da72:	4638      	mov	r0, r7
 800da74:	612e      	str	r6, [r5, #16]
 800da76:	4621      	mov	r1, r4
 800da78:	f7ff fd8e 	bl	800d598 <_Bfree>
 800da7c:	4628      	mov	r0, r5
 800da7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da82:	f842 0f04 	str.w	r0, [r2, #4]!
 800da86:	3301      	adds	r3, #1
 800da88:	e7c5      	b.n	800da16 <__lshift+0x4a>
 800da8a:	3904      	subs	r1, #4
 800da8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da90:	f841 2f04 	str.w	r2, [r1, #4]!
 800da94:	459c      	cmp	ip, r3
 800da96:	d8f9      	bhi.n	800da8c <__lshift+0xc0>
 800da98:	e7ea      	b.n	800da70 <__lshift+0xa4>
 800da9a:	bf00      	nop
 800da9c:	080186ec 	.word	0x080186ec
 800daa0:	080186fd 	.word	0x080186fd

0800daa4 <__mcmp>:
 800daa4:	b530      	push	{r4, r5, lr}
 800daa6:	6902      	ldr	r2, [r0, #16]
 800daa8:	690c      	ldr	r4, [r1, #16]
 800daaa:	1b12      	subs	r2, r2, r4
 800daac:	d10e      	bne.n	800dacc <__mcmp+0x28>
 800daae:	f100 0314 	add.w	r3, r0, #20
 800dab2:	3114      	adds	r1, #20
 800dab4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dab8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dabc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dac0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dac4:	42a5      	cmp	r5, r4
 800dac6:	d003      	beq.n	800dad0 <__mcmp+0x2c>
 800dac8:	d305      	bcc.n	800dad6 <__mcmp+0x32>
 800daca:	2201      	movs	r2, #1
 800dacc:	4610      	mov	r0, r2
 800dace:	bd30      	pop	{r4, r5, pc}
 800dad0:	4283      	cmp	r3, r0
 800dad2:	d3f3      	bcc.n	800dabc <__mcmp+0x18>
 800dad4:	e7fa      	b.n	800dacc <__mcmp+0x28>
 800dad6:	f04f 32ff 	mov.w	r2, #4294967295
 800dada:	e7f7      	b.n	800dacc <__mcmp+0x28>

0800dadc <__mdiff>:
 800dadc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae0:	460c      	mov	r4, r1
 800dae2:	4606      	mov	r6, r0
 800dae4:	4611      	mov	r1, r2
 800dae6:	4620      	mov	r0, r4
 800dae8:	4690      	mov	r8, r2
 800daea:	f7ff ffdb 	bl	800daa4 <__mcmp>
 800daee:	1e05      	subs	r5, r0, #0
 800daf0:	d110      	bne.n	800db14 <__mdiff+0x38>
 800daf2:	4629      	mov	r1, r5
 800daf4:	4630      	mov	r0, r6
 800daf6:	f7ff fd0f 	bl	800d518 <_Balloc>
 800dafa:	b930      	cbnz	r0, 800db0a <__mdiff+0x2e>
 800dafc:	4b3a      	ldr	r3, [pc, #232]	; (800dbe8 <__mdiff+0x10c>)
 800dafe:	4602      	mov	r2, r0
 800db00:	f240 2137 	movw	r1, #567	; 0x237
 800db04:	4839      	ldr	r0, [pc, #228]	; (800dbec <__mdiff+0x110>)
 800db06:	f002 f807 	bl	800fb18 <__assert_func>
 800db0a:	2301      	movs	r3, #1
 800db0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db14:	bfa4      	itt	ge
 800db16:	4643      	movge	r3, r8
 800db18:	46a0      	movge	r8, r4
 800db1a:	4630      	mov	r0, r6
 800db1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800db20:	bfa6      	itte	ge
 800db22:	461c      	movge	r4, r3
 800db24:	2500      	movge	r5, #0
 800db26:	2501      	movlt	r5, #1
 800db28:	f7ff fcf6 	bl	800d518 <_Balloc>
 800db2c:	b920      	cbnz	r0, 800db38 <__mdiff+0x5c>
 800db2e:	4b2e      	ldr	r3, [pc, #184]	; (800dbe8 <__mdiff+0x10c>)
 800db30:	4602      	mov	r2, r0
 800db32:	f240 2145 	movw	r1, #581	; 0x245
 800db36:	e7e5      	b.n	800db04 <__mdiff+0x28>
 800db38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800db3c:	6926      	ldr	r6, [r4, #16]
 800db3e:	60c5      	str	r5, [r0, #12]
 800db40:	f104 0914 	add.w	r9, r4, #20
 800db44:	f108 0514 	add.w	r5, r8, #20
 800db48:	f100 0e14 	add.w	lr, r0, #20
 800db4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800db50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800db54:	f108 0210 	add.w	r2, r8, #16
 800db58:	46f2      	mov	sl, lr
 800db5a:	2100      	movs	r1, #0
 800db5c:	f859 3b04 	ldr.w	r3, [r9], #4
 800db60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800db64:	fa11 f88b 	uxtah	r8, r1, fp
 800db68:	b299      	uxth	r1, r3
 800db6a:	0c1b      	lsrs	r3, r3, #16
 800db6c:	eba8 0801 	sub.w	r8, r8, r1
 800db70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800db74:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800db78:	fa1f f888 	uxth.w	r8, r8
 800db7c:	1419      	asrs	r1, r3, #16
 800db7e:	454e      	cmp	r6, r9
 800db80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800db84:	f84a 3b04 	str.w	r3, [sl], #4
 800db88:	d8e8      	bhi.n	800db5c <__mdiff+0x80>
 800db8a:	1b33      	subs	r3, r6, r4
 800db8c:	3b15      	subs	r3, #21
 800db8e:	f023 0303 	bic.w	r3, r3, #3
 800db92:	3304      	adds	r3, #4
 800db94:	3415      	adds	r4, #21
 800db96:	42a6      	cmp	r6, r4
 800db98:	bf38      	it	cc
 800db9a:	2304      	movcc	r3, #4
 800db9c:	441d      	add	r5, r3
 800db9e:	4473      	add	r3, lr
 800dba0:	469e      	mov	lr, r3
 800dba2:	462e      	mov	r6, r5
 800dba4:	4566      	cmp	r6, ip
 800dba6:	d30e      	bcc.n	800dbc6 <__mdiff+0xea>
 800dba8:	f10c 0203 	add.w	r2, ip, #3
 800dbac:	1b52      	subs	r2, r2, r5
 800dbae:	f022 0203 	bic.w	r2, r2, #3
 800dbb2:	3d03      	subs	r5, #3
 800dbb4:	45ac      	cmp	ip, r5
 800dbb6:	bf38      	it	cc
 800dbb8:	2200      	movcc	r2, #0
 800dbba:	4413      	add	r3, r2
 800dbbc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dbc0:	b17a      	cbz	r2, 800dbe2 <__mdiff+0x106>
 800dbc2:	6107      	str	r7, [r0, #16]
 800dbc4:	e7a4      	b.n	800db10 <__mdiff+0x34>
 800dbc6:	f856 8b04 	ldr.w	r8, [r6], #4
 800dbca:	fa11 f288 	uxtah	r2, r1, r8
 800dbce:	1414      	asrs	r4, r2, #16
 800dbd0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dbd4:	b292      	uxth	r2, r2
 800dbd6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dbda:	f84e 2b04 	str.w	r2, [lr], #4
 800dbde:	1421      	asrs	r1, r4, #16
 800dbe0:	e7e0      	b.n	800dba4 <__mdiff+0xc8>
 800dbe2:	3f01      	subs	r7, #1
 800dbe4:	e7ea      	b.n	800dbbc <__mdiff+0xe0>
 800dbe6:	bf00      	nop
 800dbe8:	080186ec 	.word	0x080186ec
 800dbec:	080186fd 	.word	0x080186fd

0800dbf0 <__ulp>:
 800dbf0:	b082      	sub	sp, #8
 800dbf2:	ed8d 0b00 	vstr	d0, [sp]
 800dbf6:	9a01      	ldr	r2, [sp, #4]
 800dbf8:	4b0f      	ldr	r3, [pc, #60]	; (800dc38 <__ulp+0x48>)
 800dbfa:	4013      	ands	r3, r2
 800dbfc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	dc08      	bgt.n	800dc16 <__ulp+0x26>
 800dc04:	425b      	negs	r3, r3
 800dc06:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800dc0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dc0e:	da04      	bge.n	800dc1a <__ulp+0x2a>
 800dc10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dc14:	4113      	asrs	r3, r2
 800dc16:	2200      	movs	r2, #0
 800dc18:	e008      	b.n	800dc2c <__ulp+0x3c>
 800dc1a:	f1a2 0314 	sub.w	r3, r2, #20
 800dc1e:	2b1e      	cmp	r3, #30
 800dc20:	bfda      	itte	le
 800dc22:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800dc26:	40da      	lsrle	r2, r3
 800dc28:	2201      	movgt	r2, #1
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	4610      	mov	r0, r2
 800dc30:	ec41 0b10 	vmov	d0, r0, r1
 800dc34:	b002      	add	sp, #8
 800dc36:	4770      	bx	lr
 800dc38:	7ff00000 	.word	0x7ff00000

0800dc3c <__b2d>:
 800dc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc40:	6906      	ldr	r6, [r0, #16]
 800dc42:	f100 0814 	add.w	r8, r0, #20
 800dc46:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dc4a:	1f37      	subs	r7, r6, #4
 800dc4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dc50:	4610      	mov	r0, r2
 800dc52:	f7ff fd53 	bl	800d6fc <__hi0bits>
 800dc56:	f1c0 0320 	rsb	r3, r0, #32
 800dc5a:	280a      	cmp	r0, #10
 800dc5c:	600b      	str	r3, [r1, #0]
 800dc5e:	491b      	ldr	r1, [pc, #108]	; (800dccc <__b2d+0x90>)
 800dc60:	dc15      	bgt.n	800dc8e <__b2d+0x52>
 800dc62:	f1c0 0c0b 	rsb	ip, r0, #11
 800dc66:	fa22 f30c 	lsr.w	r3, r2, ip
 800dc6a:	45b8      	cmp	r8, r7
 800dc6c:	ea43 0501 	orr.w	r5, r3, r1
 800dc70:	bf34      	ite	cc
 800dc72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dc76:	2300      	movcs	r3, #0
 800dc78:	3015      	adds	r0, #21
 800dc7a:	fa02 f000 	lsl.w	r0, r2, r0
 800dc7e:	fa23 f30c 	lsr.w	r3, r3, ip
 800dc82:	4303      	orrs	r3, r0
 800dc84:	461c      	mov	r4, r3
 800dc86:	ec45 4b10 	vmov	d0, r4, r5
 800dc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc8e:	45b8      	cmp	r8, r7
 800dc90:	bf3a      	itte	cc
 800dc92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dc96:	f1a6 0708 	subcc.w	r7, r6, #8
 800dc9a:	2300      	movcs	r3, #0
 800dc9c:	380b      	subs	r0, #11
 800dc9e:	d012      	beq.n	800dcc6 <__b2d+0x8a>
 800dca0:	f1c0 0120 	rsb	r1, r0, #32
 800dca4:	fa23 f401 	lsr.w	r4, r3, r1
 800dca8:	4082      	lsls	r2, r0
 800dcaa:	4322      	orrs	r2, r4
 800dcac:	4547      	cmp	r7, r8
 800dcae:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800dcb2:	bf8c      	ite	hi
 800dcb4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dcb8:	2200      	movls	r2, #0
 800dcba:	4083      	lsls	r3, r0
 800dcbc:	40ca      	lsrs	r2, r1
 800dcbe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	e7de      	b.n	800dc84 <__b2d+0x48>
 800dcc6:	ea42 0501 	orr.w	r5, r2, r1
 800dcca:	e7db      	b.n	800dc84 <__b2d+0x48>
 800dccc:	3ff00000 	.word	0x3ff00000

0800dcd0 <__d2b>:
 800dcd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dcd4:	460f      	mov	r7, r1
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	ec59 8b10 	vmov	r8, r9, d0
 800dcdc:	4616      	mov	r6, r2
 800dcde:	f7ff fc1b 	bl	800d518 <_Balloc>
 800dce2:	4604      	mov	r4, r0
 800dce4:	b930      	cbnz	r0, 800dcf4 <__d2b+0x24>
 800dce6:	4602      	mov	r2, r0
 800dce8:	4b24      	ldr	r3, [pc, #144]	; (800dd7c <__d2b+0xac>)
 800dcea:	4825      	ldr	r0, [pc, #148]	; (800dd80 <__d2b+0xb0>)
 800dcec:	f240 310f 	movw	r1, #783	; 0x30f
 800dcf0:	f001 ff12 	bl	800fb18 <__assert_func>
 800dcf4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dcf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dcfc:	bb2d      	cbnz	r5, 800dd4a <__d2b+0x7a>
 800dcfe:	9301      	str	r3, [sp, #4]
 800dd00:	f1b8 0300 	subs.w	r3, r8, #0
 800dd04:	d026      	beq.n	800dd54 <__d2b+0x84>
 800dd06:	4668      	mov	r0, sp
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	f7ff fd17 	bl	800d73c <__lo0bits>
 800dd0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd12:	b1e8      	cbz	r0, 800dd50 <__d2b+0x80>
 800dd14:	f1c0 0320 	rsb	r3, r0, #32
 800dd18:	fa02 f303 	lsl.w	r3, r2, r3
 800dd1c:	430b      	orrs	r3, r1
 800dd1e:	40c2      	lsrs	r2, r0
 800dd20:	6163      	str	r3, [r4, #20]
 800dd22:	9201      	str	r2, [sp, #4]
 800dd24:	9b01      	ldr	r3, [sp, #4]
 800dd26:	61a3      	str	r3, [r4, #24]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	bf14      	ite	ne
 800dd2c:	2202      	movne	r2, #2
 800dd2e:	2201      	moveq	r2, #1
 800dd30:	6122      	str	r2, [r4, #16]
 800dd32:	b1bd      	cbz	r5, 800dd64 <__d2b+0x94>
 800dd34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dd38:	4405      	add	r5, r0
 800dd3a:	603d      	str	r5, [r7, #0]
 800dd3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd40:	6030      	str	r0, [r6, #0]
 800dd42:	4620      	mov	r0, r4
 800dd44:	b003      	add	sp, #12
 800dd46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd4e:	e7d6      	b.n	800dcfe <__d2b+0x2e>
 800dd50:	6161      	str	r1, [r4, #20]
 800dd52:	e7e7      	b.n	800dd24 <__d2b+0x54>
 800dd54:	a801      	add	r0, sp, #4
 800dd56:	f7ff fcf1 	bl	800d73c <__lo0bits>
 800dd5a:	9b01      	ldr	r3, [sp, #4]
 800dd5c:	6163      	str	r3, [r4, #20]
 800dd5e:	3020      	adds	r0, #32
 800dd60:	2201      	movs	r2, #1
 800dd62:	e7e5      	b.n	800dd30 <__d2b+0x60>
 800dd64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd6c:	6038      	str	r0, [r7, #0]
 800dd6e:	6918      	ldr	r0, [r3, #16]
 800dd70:	f7ff fcc4 	bl	800d6fc <__hi0bits>
 800dd74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd78:	e7e2      	b.n	800dd40 <__d2b+0x70>
 800dd7a:	bf00      	nop
 800dd7c:	080186ec 	.word	0x080186ec
 800dd80:	080186fd 	.word	0x080186fd

0800dd84 <__ratio>:
 800dd84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd88:	4688      	mov	r8, r1
 800dd8a:	4669      	mov	r1, sp
 800dd8c:	4681      	mov	r9, r0
 800dd8e:	f7ff ff55 	bl	800dc3c <__b2d>
 800dd92:	a901      	add	r1, sp, #4
 800dd94:	4640      	mov	r0, r8
 800dd96:	ec55 4b10 	vmov	r4, r5, d0
 800dd9a:	ee10 aa10 	vmov	sl, s0
 800dd9e:	f7ff ff4d 	bl	800dc3c <__b2d>
 800dda2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dda6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ddaa:	1ad2      	subs	r2, r2, r3
 800ddac:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ddb0:	1a5b      	subs	r3, r3, r1
 800ddb2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ddb6:	ec57 6b10 	vmov	r6, r7, d0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	bfd6      	itet	le
 800ddbe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ddc2:	462a      	movgt	r2, r5
 800ddc4:	463a      	movle	r2, r7
 800ddc6:	46ab      	mov	fp, r5
 800ddc8:	bfd6      	itet	le
 800ddca:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ddce:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ddd2:	ee00 3a90 	vmovle	s1, r3
 800ddd6:	ec4b ab17 	vmov	d7, sl, fp
 800ddda:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ddde:	b003      	add	sp, #12
 800dde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dde4 <__copybits>:
 800dde4:	3901      	subs	r1, #1
 800dde6:	b570      	push	{r4, r5, r6, lr}
 800dde8:	1149      	asrs	r1, r1, #5
 800ddea:	6914      	ldr	r4, [r2, #16]
 800ddec:	3101      	adds	r1, #1
 800ddee:	f102 0314 	add.w	r3, r2, #20
 800ddf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ddf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ddfa:	1f05      	subs	r5, r0, #4
 800ddfc:	42a3      	cmp	r3, r4
 800ddfe:	d30c      	bcc.n	800de1a <__copybits+0x36>
 800de00:	1aa3      	subs	r3, r4, r2
 800de02:	3b11      	subs	r3, #17
 800de04:	f023 0303 	bic.w	r3, r3, #3
 800de08:	3211      	adds	r2, #17
 800de0a:	42a2      	cmp	r2, r4
 800de0c:	bf88      	it	hi
 800de0e:	2300      	movhi	r3, #0
 800de10:	4418      	add	r0, r3
 800de12:	2300      	movs	r3, #0
 800de14:	4288      	cmp	r0, r1
 800de16:	d305      	bcc.n	800de24 <__copybits+0x40>
 800de18:	bd70      	pop	{r4, r5, r6, pc}
 800de1a:	f853 6b04 	ldr.w	r6, [r3], #4
 800de1e:	f845 6f04 	str.w	r6, [r5, #4]!
 800de22:	e7eb      	b.n	800ddfc <__copybits+0x18>
 800de24:	f840 3b04 	str.w	r3, [r0], #4
 800de28:	e7f4      	b.n	800de14 <__copybits+0x30>

0800de2a <__any_on>:
 800de2a:	f100 0214 	add.w	r2, r0, #20
 800de2e:	6900      	ldr	r0, [r0, #16]
 800de30:	114b      	asrs	r3, r1, #5
 800de32:	4298      	cmp	r0, r3
 800de34:	b510      	push	{r4, lr}
 800de36:	db11      	blt.n	800de5c <__any_on+0x32>
 800de38:	dd0a      	ble.n	800de50 <__any_on+0x26>
 800de3a:	f011 011f 	ands.w	r1, r1, #31
 800de3e:	d007      	beq.n	800de50 <__any_on+0x26>
 800de40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800de44:	fa24 f001 	lsr.w	r0, r4, r1
 800de48:	fa00 f101 	lsl.w	r1, r0, r1
 800de4c:	428c      	cmp	r4, r1
 800de4e:	d10b      	bne.n	800de68 <__any_on+0x3e>
 800de50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800de54:	4293      	cmp	r3, r2
 800de56:	d803      	bhi.n	800de60 <__any_on+0x36>
 800de58:	2000      	movs	r0, #0
 800de5a:	bd10      	pop	{r4, pc}
 800de5c:	4603      	mov	r3, r0
 800de5e:	e7f7      	b.n	800de50 <__any_on+0x26>
 800de60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800de64:	2900      	cmp	r1, #0
 800de66:	d0f5      	beq.n	800de54 <__any_on+0x2a>
 800de68:	2001      	movs	r0, #1
 800de6a:	e7f6      	b.n	800de5a <__any_on+0x30>

0800de6c <sulp>:
 800de6c:	b570      	push	{r4, r5, r6, lr}
 800de6e:	4604      	mov	r4, r0
 800de70:	460d      	mov	r5, r1
 800de72:	4616      	mov	r6, r2
 800de74:	ec45 4b10 	vmov	d0, r4, r5
 800de78:	f7ff feba 	bl	800dbf0 <__ulp>
 800de7c:	b17e      	cbz	r6, 800de9e <sulp+0x32>
 800de7e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800de82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800de86:	2b00      	cmp	r3, #0
 800de88:	dd09      	ble.n	800de9e <sulp+0x32>
 800de8a:	051b      	lsls	r3, r3, #20
 800de8c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800de90:	2000      	movs	r0, #0
 800de92:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800de96:	ec41 0b17 	vmov	d7, r0, r1
 800de9a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800de9e:	bd70      	pop	{r4, r5, r6, pc}

0800dea0 <_strtod_l>:
 800dea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea4:	ed2d 8b0e 	vpush	{d8-d14}
 800dea8:	b097      	sub	sp, #92	; 0x5c
 800deaa:	4604      	mov	r4, r0
 800deac:	920d      	str	r2, [sp, #52]	; 0x34
 800deae:	2200      	movs	r2, #0
 800deb0:	9212      	str	r2, [sp, #72]	; 0x48
 800deb2:	468a      	mov	sl, r1
 800deb4:	f04f 0800 	mov.w	r8, #0
 800deb8:	f04f 0900 	mov.w	r9, #0
 800debc:	460a      	mov	r2, r1
 800debe:	9211      	str	r2, [sp, #68]	; 0x44
 800dec0:	7811      	ldrb	r1, [r2, #0]
 800dec2:	292b      	cmp	r1, #43	; 0x2b
 800dec4:	d04c      	beq.n	800df60 <_strtod_l+0xc0>
 800dec6:	d839      	bhi.n	800df3c <_strtod_l+0x9c>
 800dec8:	290d      	cmp	r1, #13
 800deca:	d833      	bhi.n	800df34 <_strtod_l+0x94>
 800decc:	2908      	cmp	r1, #8
 800dece:	d833      	bhi.n	800df38 <_strtod_l+0x98>
 800ded0:	2900      	cmp	r1, #0
 800ded2:	d03c      	beq.n	800df4e <_strtod_l+0xae>
 800ded4:	2200      	movs	r2, #0
 800ded6:	9208      	str	r2, [sp, #32]
 800ded8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800deda:	7832      	ldrb	r2, [r6, #0]
 800dedc:	2a30      	cmp	r2, #48	; 0x30
 800dede:	f040 80b8 	bne.w	800e052 <_strtod_l+0x1b2>
 800dee2:	7872      	ldrb	r2, [r6, #1]
 800dee4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800dee8:	2a58      	cmp	r2, #88	; 0x58
 800deea:	d170      	bne.n	800dfce <_strtod_l+0x12e>
 800deec:	9302      	str	r3, [sp, #8]
 800deee:	9b08      	ldr	r3, [sp, #32]
 800def0:	9301      	str	r3, [sp, #4]
 800def2:	ab12      	add	r3, sp, #72	; 0x48
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	4a91      	ldr	r2, [pc, #580]	; (800e13c <_strtod_l+0x29c>)
 800def8:	ab13      	add	r3, sp, #76	; 0x4c
 800defa:	a911      	add	r1, sp, #68	; 0x44
 800defc:	4620      	mov	r0, r4
 800defe:	f001 fe91 	bl	800fc24 <__gethex>
 800df02:	f010 070f 	ands.w	r7, r0, #15
 800df06:	4605      	mov	r5, r0
 800df08:	d005      	beq.n	800df16 <_strtod_l+0x76>
 800df0a:	2f06      	cmp	r7, #6
 800df0c:	d12a      	bne.n	800df64 <_strtod_l+0xc4>
 800df0e:	3601      	adds	r6, #1
 800df10:	2300      	movs	r3, #0
 800df12:	9611      	str	r6, [sp, #68]	; 0x44
 800df14:	9308      	str	r3, [sp, #32]
 800df16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f040 8555 	bne.w	800e9c8 <_strtod_l+0xb28>
 800df1e:	9b08      	ldr	r3, [sp, #32]
 800df20:	ec49 8b10 	vmov	d0, r8, r9
 800df24:	b1cb      	cbz	r3, 800df5a <_strtod_l+0xba>
 800df26:	eeb1 0b40 	vneg.f64	d0, d0
 800df2a:	b017      	add	sp, #92	; 0x5c
 800df2c:	ecbd 8b0e 	vpop	{d8-d14}
 800df30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df34:	2920      	cmp	r1, #32
 800df36:	d1cd      	bne.n	800ded4 <_strtod_l+0x34>
 800df38:	3201      	adds	r2, #1
 800df3a:	e7c0      	b.n	800debe <_strtod_l+0x1e>
 800df3c:	292d      	cmp	r1, #45	; 0x2d
 800df3e:	d1c9      	bne.n	800ded4 <_strtod_l+0x34>
 800df40:	2101      	movs	r1, #1
 800df42:	9108      	str	r1, [sp, #32]
 800df44:	1c51      	adds	r1, r2, #1
 800df46:	9111      	str	r1, [sp, #68]	; 0x44
 800df48:	7852      	ldrb	r2, [r2, #1]
 800df4a:	2a00      	cmp	r2, #0
 800df4c:	d1c4      	bne.n	800ded8 <_strtod_l+0x38>
 800df4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df50:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800df54:	2b00      	cmp	r3, #0
 800df56:	f040 8535 	bne.w	800e9c4 <_strtod_l+0xb24>
 800df5a:	ec49 8b10 	vmov	d0, r8, r9
 800df5e:	e7e4      	b.n	800df2a <_strtod_l+0x8a>
 800df60:	2100      	movs	r1, #0
 800df62:	e7ee      	b.n	800df42 <_strtod_l+0xa2>
 800df64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800df66:	b13a      	cbz	r2, 800df78 <_strtod_l+0xd8>
 800df68:	2135      	movs	r1, #53	; 0x35
 800df6a:	a814      	add	r0, sp, #80	; 0x50
 800df6c:	f7ff ff3a 	bl	800dde4 <__copybits>
 800df70:	9912      	ldr	r1, [sp, #72]	; 0x48
 800df72:	4620      	mov	r0, r4
 800df74:	f7ff fb10 	bl	800d598 <_Bfree>
 800df78:	1e7b      	subs	r3, r7, #1
 800df7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800df7c:	2b04      	cmp	r3, #4
 800df7e:	d806      	bhi.n	800df8e <_strtod_l+0xee>
 800df80:	e8df f003 	tbb	[pc, r3]
 800df84:	201d0314 	.word	0x201d0314
 800df88:	14          	.byte	0x14
 800df89:	00          	.byte	0x00
 800df8a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800df8e:	05eb      	lsls	r3, r5, #23
 800df90:	bf48      	it	mi
 800df92:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800df96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800df9a:	0d1b      	lsrs	r3, r3, #20
 800df9c:	051b      	lsls	r3, r3, #20
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d1b9      	bne.n	800df16 <_strtod_l+0x76>
 800dfa2:	f7fe fc2f 	bl	800c804 <__errno>
 800dfa6:	2322      	movs	r3, #34	; 0x22
 800dfa8:	6003      	str	r3, [r0, #0]
 800dfaa:	e7b4      	b.n	800df16 <_strtod_l+0x76>
 800dfac:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800dfb0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dfb4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dfb8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800dfbc:	e7e7      	b.n	800df8e <_strtod_l+0xee>
 800dfbe:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800e144 <_strtod_l+0x2a4>
 800dfc2:	e7e4      	b.n	800df8e <_strtod_l+0xee>
 800dfc4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800dfc8:	f04f 38ff 	mov.w	r8, #4294967295
 800dfcc:	e7df      	b.n	800df8e <_strtod_l+0xee>
 800dfce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dfd0:	1c5a      	adds	r2, r3, #1
 800dfd2:	9211      	str	r2, [sp, #68]	; 0x44
 800dfd4:	785b      	ldrb	r3, [r3, #1]
 800dfd6:	2b30      	cmp	r3, #48	; 0x30
 800dfd8:	d0f9      	beq.n	800dfce <_strtod_l+0x12e>
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d09b      	beq.n	800df16 <_strtod_l+0x76>
 800dfde:	2301      	movs	r3, #1
 800dfe0:	9306      	str	r3, [sp, #24]
 800dfe2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dfe4:	9309      	str	r3, [sp, #36]	; 0x24
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	9305      	str	r3, [sp, #20]
 800dfea:	9307      	str	r3, [sp, #28]
 800dfec:	461e      	mov	r6, r3
 800dfee:	220a      	movs	r2, #10
 800dff0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800dff2:	7805      	ldrb	r5, [r0, #0]
 800dff4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800dff8:	b2d9      	uxtb	r1, r3
 800dffa:	2909      	cmp	r1, #9
 800dffc:	d92b      	bls.n	800e056 <_strtod_l+0x1b6>
 800dffe:	4950      	ldr	r1, [pc, #320]	; (800e140 <_strtod_l+0x2a0>)
 800e000:	2201      	movs	r2, #1
 800e002:	f001 fd4c 	bl	800fa9e <strncmp>
 800e006:	2800      	cmp	r0, #0
 800e008:	d035      	beq.n	800e076 <_strtod_l+0x1d6>
 800e00a:	2000      	movs	r0, #0
 800e00c:	462a      	mov	r2, r5
 800e00e:	4633      	mov	r3, r6
 800e010:	4683      	mov	fp, r0
 800e012:	4601      	mov	r1, r0
 800e014:	2a65      	cmp	r2, #101	; 0x65
 800e016:	d001      	beq.n	800e01c <_strtod_l+0x17c>
 800e018:	2a45      	cmp	r2, #69	; 0x45
 800e01a:	d118      	bne.n	800e04e <_strtod_l+0x1ae>
 800e01c:	b91b      	cbnz	r3, 800e026 <_strtod_l+0x186>
 800e01e:	9b06      	ldr	r3, [sp, #24]
 800e020:	4303      	orrs	r3, r0
 800e022:	d094      	beq.n	800df4e <_strtod_l+0xae>
 800e024:	2300      	movs	r3, #0
 800e026:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800e02a:	f10a 0201 	add.w	r2, sl, #1
 800e02e:	9211      	str	r2, [sp, #68]	; 0x44
 800e030:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800e034:	2a2b      	cmp	r2, #43	; 0x2b
 800e036:	d075      	beq.n	800e124 <_strtod_l+0x284>
 800e038:	2a2d      	cmp	r2, #45	; 0x2d
 800e03a:	d07b      	beq.n	800e134 <_strtod_l+0x294>
 800e03c:	f04f 0e00 	mov.w	lr, #0
 800e040:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e044:	2d09      	cmp	r5, #9
 800e046:	f240 8083 	bls.w	800e150 <_strtod_l+0x2b0>
 800e04a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800e04e:	2500      	movs	r5, #0
 800e050:	e09e      	b.n	800e190 <_strtod_l+0x2f0>
 800e052:	2300      	movs	r3, #0
 800e054:	e7c4      	b.n	800dfe0 <_strtod_l+0x140>
 800e056:	2e08      	cmp	r6, #8
 800e058:	bfd5      	itete	le
 800e05a:	9907      	ldrle	r1, [sp, #28]
 800e05c:	9905      	ldrgt	r1, [sp, #20]
 800e05e:	fb02 3301 	mlale	r3, r2, r1, r3
 800e062:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e066:	f100 0001 	add.w	r0, r0, #1
 800e06a:	bfd4      	ite	le
 800e06c:	9307      	strle	r3, [sp, #28]
 800e06e:	9305      	strgt	r3, [sp, #20]
 800e070:	3601      	adds	r6, #1
 800e072:	9011      	str	r0, [sp, #68]	; 0x44
 800e074:	e7bc      	b.n	800dff0 <_strtod_l+0x150>
 800e076:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	9211      	str	r2, [sp, #68]	; 0x44
 800e07c:	785a      	ldrb	r2, [r3, #1]
 800e07e:	b3ae      	cbz	r6, 800e0ec <_strtod_l+0x24c>
 800e080:	4683      	mov	fp, r0
 800e082:	4633      	mov	r3, r6
 800e084:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e088:	2909      	cmp	r1, #9
 800e08a:	d912      	bls.n	800e0b2 <_strtod_l+0x212>
 800e08c:	2101      	movs	r1, #1
 800e08e:	e7c1      	b.n	800e014 <_strtod_l+0x174>
 800e090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e092:	1c5a      	adds	r2, r3, #1
 800e094:	9211      	str	r2, [sp, #68]	; 0x44
 800e096:	785a      	ldrb	r2, [r3, #1]
 800e098:	3001      	adds	r0, #1
 800e09a:	2a30      	cmp	r2, #48	; 0x30
 800e09c:	d0f8      	beq.n	800e090 <_strtod_l+0x1f0>
 800e09e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e0a2:	2b08      	cmp	r3, #8
 800e0a4:	f200 8495 	bhi.w	800e9d2 <_strtod_l+0xb32>
 800e0a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ac:	4683      	mov	fp, r0
 800e0ae:	2000      	movs	r0, #0
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	3a30      	subs	r2, #48	; 0x30
 800e0b4:	f100 0101 	add.w	r1, r0, #1
 800e0b8:	d012      	beq.n	800e0e0 <_strtod_l+0x240>
 800e0ba:	448b      	add	fp, r1
 800e0bc:	eb00 0c03 	add.w	ip, r0, r3
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	250a      	movs	r5, #10
 800e0c4:	4561      	cmp	r1, ip
 800e0c6:	d113      	bne.n	800e0f0 <_strtod_l+0x250>
 800e0c8:	1819      	adds	r1, r3, r0
 800e0ca:	2908      	cmp	r1, #8
 800e0cc:	f103 0301 	add.w	r3, r3, #1
 800e0d0:	4403      	add	r3, r0
 800e0d2:	dc1b      	bgt.n	800e10c <_strtod_l+0x26c>
 800e0d4:	9807      	ldr	r0, [sp, #28]
 800e0d6:	210a      	movs	r1, #10
 800e0d8:	fb01 2200 	mla	r2, r1, r0, r2
 800e0dc:	9207      	str	r2, [sp, #28]
 800e0de:	2100      	movs	r1, #0
 800e0e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e0e2:	1c50      	adds	r0, r2, #1
 800e0e4:	9011      	str	r0, [sp, #68]	; 0x44
 800e0e6:	7852      	ldrb	r2, [r2, #1]
 800e0e8:	4608      	mov	r0, r1
 800e0ea:	e7cb      	b.n	800e084 <_strtod_l+0x1e4>
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	e7d4      	b.n	800e09a <_strtod_l+0x1fa>
 800e0f0:	2908      	cmp	r1, #8
 800e0f2:	f101 0101 	add.w	r1, r1, #1
 800e0f6:	dc03      	bgt.n	800e100 <_strtod_l+0x260>
 800e0f8:	9f07      	ldr	r7, [sp, #28]
 800e0fa:	436f      	muls	r7, r5
 800e0fc:	9707      	str	r7, [sp, #28]
 800e0fe:	e7e1      	b.n	800e0c4 <_strtod_l+0x224>
 800e100:	2910      	cmp	r1, #16
 800e102:	bfde      	ittt	le
 800e104:	9f05      	ldrle	r7, [sp, #20]
 800e106:	436f      	mulle	r7, r5
 800e108:	9705      	strle	r7, [sp, #20]
 800e10a:	e7db      	b.n	800e0c4 <_strtod_l+0x224>
 800e10c:	2b10      	cmp	r3, #16
 800e10e:	bfdf      	itttt	le
 800e110:	9805      	ldrle	r0, [sp, #20]
 800e112:	210a      	movle	r1, #10
 800e114:	fb01 2200 	mlale	r2, r1, r0, r2
 800e118:	9205      	strle	r2, [sp, #20]
 800e11a:	e7e0      	b.n	800e0de <_strtod_l+0x23e>
 800e11c:	f04f 0b00 	mov.w	fp, #0
 800e120:	2101      	movs	r1, #1
 800e122:	e77c      	b.n	800e01e <_strtod_l+0x17e>
 800e124:	f04f 0e00 	mov.w	lr, #0
 800e128:	f10a 0202 	add.w	r2, sl, #2
 800e12c:	9211      	str	r2, [sp, #68]	; 0x44
 800e12e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800e132:	e785      	b.n	800e040 <_strtod_l+0x1a0>
 800e134:	f04f 0e01 	mov.w	lr, #1
 800e138:	e7f6      	b.n	800e128 <_strtod_l+0x288>
 800e13a:	bf00      	nop
 800e13c:	08018858 	.word	0x08018858
 800e140:	08018854 	.word	0x08018854
 800e144:	7ff00000 	.word	0x7ff00000
 800e148:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e14a:	1c55      	adds	r5, r2, #1
 800e14c:	9511      	str	r5, [sp, #68]	; 0x44
 800e14e:	7852      	ldrb	r2, [r2, #1]
 800e150:	2a30      	cmp	r2, #48	; 0x30
 800e152:	d0f9      	beq.n	800e148 <_strtod_l+0x2a8>
 800e154:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800e158:	2d08      	cmp	r5, #8
 800e15a:	f63f af78 	bhi.w	800e04e <_strtod_l+0x1ae>
 800e15e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e162:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e164:	920a      	str	r2, [sp, #40]	; 0x28
 800e166:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e168:	1c55      	adds	r5, r2, #1
 800e16a:	9511      	str	r5, [sp, #68]	; 0x44
 800e16c:	7852      	ldrb	r2, [r2, #1]
 800e16e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800e172:	2f09      	cmp	r7, #9
 800e174:	d937      	bls.n	800e1e6 <_strtod_l+0x346>
 800e176:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e178:	1bed      	subs	r5, r5, r7
 800e17a:	2d08      	cmp	r5, #8
 800e17c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e180:	dc02      	bgt.n	800e188 <_strtod_l+0x2e8>
 800e182:	4565      	cmp	r5, ip
 800e184:	bfa8      	it	ge
 800e186:	4665      	movge	r5, ip
 800e188:	f1be 0f00 	cmp.w	lr, #0
 800e18c:	d000      	beq.n	800e190 <_strtod_l+0x2f0>
 800e18e:	426d      	negs	r5, r5
 800e190:	2b00      	cmp	r3, #0
 800e192:	d14d      	bne.n	800e230 <_strtod_l+0x390>
 800e194:	9b06      	ldr	r3, [sp, #24]
 800e196:	4303      	orrs	r3, r0
 800e198:	f47f aebd 	bne.w	800df16 <_strtod_l+0x76>
 800e19c:	2900      	cmp	r1, #0
 800e19e:	f47f aed6 	bne.w	800df4e <_strtod_l+0xae>
 800e1a2:	2a69      	cmp	r2, #105	; 0x69
 800e1a4:	d027      	beq.n	800e1f6 <_strtod_l+0x356>
 800e1a6:	dc24      	bgt.n	800e1f2 <_strtod_l+0x352>
 800e1a8:	2a49      	cmp	r2, #73	; 0x49
 800e1aa:	d024      	beq.n	800e1f6 <_strtod_l+0x356>
 800e1ac:	2a4e      	cmp	r2, #78	; 0x4e
 800e1ae:	f47f aece 	bne.w	800df4e <_strtod_l+0xae>
 800e1b2:	4995      	ldr	r1, [pc, #596]	; (800e408 <_strtod_l+0x568>)
 800e1b4:	a811      	add	r0, sp, #68	; 0x44
 800e1b6:	f001 ff75 	bl	80100a4 <__match>
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	f43f aec7 	beq.w	800df4e <_strtod_l+0xae>
 800e1c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	2b28      	cmp	r3, #40	; 0x28
 800e1c6:	d12d      	bne.n	800e224 <_strtod_l+0x384>
 800e1c8:	4990      	ldr	r1, [pc, #576]	; (800e40c <_strtod_l+0x56c>)
 800e1ca:	aa14      	add	r2, sp, #80	; 0x50
 800e1cc:	a811      	add	r0, sp, #68	; 0x44
 800e1ce:	f001 ff7d 	bl	80100cc <__hexnan>
 800e1d2:	2805      	cmp	r0, #5
 800e1d4:	d126      	bne.n	800e224 <_strtod_l+0x384>
 800e1d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1d8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e1dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e1e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e1e4:	e697      	b.n	800df16 <_strtod_l+0x76>
 800e1e6:	250a      	movs	r5, #10
 800e1e8:	fb05 2c0c 	mla	ip, r5, ip, r2
 800e1ec:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800e1f0:	e7b9      	b.n	800e166 <_strtod_l+0x2c6>
 800e1f2:	2a6e      	cmp	r2, #110	; 0x6e
 800e1f4:	e7db      	b.n	800e1ae <_strtod_l+0x30e>
 800e1f6:	4986      	ldr	r1, [pc, #536]	; (800e410 <_strtod_l+0x570>)
 800e1f8:	a811      	add	r0, sp, #68	; 0x44
 800e1fa:	f001 ff53 	bl	80100a4 <__match>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	f43f aea5 	beq.w	800df4e <_strtod_l+0xae>
 800e204:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e206:	4983      	ldr	r1, [pc, #524]	; (800e414 <_strtod_l+0x574>)
 800e208:	3b01      	subs	r3, #1
 800e20a:	a811      	add	r0, sp, #68	; 0x44
 800e20c:	9311      	str	r3, [sp, #68]	; 0x44
 800e20e:	f001 ff49 	bl	80100a4 <__match>
 800e212:	b910      	cbnz	r0, 800e21a <_strtod_l+0x37a>
 800e214:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e216:	3301      	adds	r3, #1
 800e218:	9311      	str	r3, [sp, #68]	; 0x44
 800e21a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800e428 <_strtod_l+0x588>
 800e21e:	f04f 0800 	mov.w	r8, #0
 800e222:	e678      	b.n	800df16 <_strtod_l+0x76>
 800e224:	487c      	ldr	r0, [pc, #496]	; (800e418 <_strtod_l+0x578>)
 800e226:	f001 fc6f 	bl	800fb08 <nan>
 800e22a:	ec59 8b10 	vmov	r8, r9, d0
 800e22e:	e672      	b.n	800df16 <_strtod_l+0x76>
 800e230:	eddd 7a07 	vldr	s15, [sp, #28]
 800e234:	eba5 020b 	sub.w	r2, r5, fp
 800e238:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e23c:	2e00      	cmp	r6, #0
 800e23e:	bf08      	it	eq
 800e240:	461e      	moveq	r6, r3
 800e242:	2b10      	cmp	r3, #16
 800e244:	9206      	str	r2, [sp, #24]
 800e246:	461a      	mov	r2, r3
 800e248:	bfa8      	it	ge
 800e24a:	2210      	movge	r2, #16
 800e24c:	2b09      	cmp	r3, #9
 800e24e:	ec59 8b17 	vmov	r8, r9, d7
 800e252:	dd0c      	ble.n	800e26e <_strtod_l+0x3ce>
 800e254:	4971      	ldr	r1, [pc, #452]	; (800e41c <_strtod_l+0x57c>)
 800e256:	eddd 6a05 	vldr	s13, [sp, #20]
 800e25a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e25e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800e262:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e266:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e26a:	ec59 8b16 	vmov	r8, r9, d6
 800e26e:	2b0f      	cmp	r3, #15
 800e270:	dc37      	bgt.n	800e2e2 <_strtod_l+0x442>
 800e272:	9906      	ldr	r1, [sp, #24]
 800e274:	2900      	cmp	r1, #0
 800e276:	f43f ae4e 	beq.w	800df16 <_strtod_l+0x76>
 800e27a:	dd23      	ble.n	800e2c4 <_strtod_l+0x424>
 800e27c:	2916      	cmp	r1, #22
 800e27e:	dc0b      	bgt.n	800e298 <_strtod_l+0x3f8>
 800e280:	4b66      	ldr	r3, [pc, #408]	; (800e41c <_strtod_l+0x57c>)
 800e282:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e286:	ed93 7b00 	vldr	d7, [r3]
 800e28a:	ec49 8b16 	vmov	d6, r8, r9
 800e28e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e292:	ec59 8b17 	vmov	r8, r9, d7
 800e296:	e63e      	b.n	800df16 <_strtod_l+0x76>
 800e298:	9806      	ldr	r0, [sp, #24]
 800e29a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800e29e:	4281      	cmp	r1, r0
 800e2a0:	db1f      	blt.n	800e2e2 <_strtod_l+0x442>
 800e2a2:	4a5e      	ldr	r2, [pc, #376]	; (800e41c <_strtod_l+0x57c>)
 800e2a4:	f1c3 030f 	rsb	r3, r3, #15
 800e2a8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e2ac:	ed91 7b00 	vldr	d7, [r1]
 800e2b0:	ec49 8b16 	vmov	d6, r8, r9
 800e2b4:	1ac3      	subs	r3, r0, r3
 800e2b6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e2ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e2be:	ed92 6b00 	vldr	d6, [r2]
 800e2c2:	e7e4      	b.n	800e28e <_strtod_l+0x3ee>
 800e2c4:	9906      	ldr	r1, [sp, #24]
 800e2c6:	3116      	adds	r1, #22
 800e2c8:	db0b      	blt.n	800e2e2 <_strtod_l+0x442>
 800e2ca:	4b54      	ldr	r3, [pc, #336]	; (800e41c <_strtod_l+0x57c>)
 800e2cc:	ebab 0505 	sub.w	r5, fp, r5
 800e2d0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e2d4:	ed95 7b00 	vldr	d7, [r5]
 800e2d8:	ec49 8b16 	vmov	d6, r8, r9
 800e2dc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e2e0:	e7d7      	b.n	800e292 <_strtod_l+0x3f2>
 800e2e2:	9906      	ldr	r1, [sp, #24]
 800e2e4:	1a9a      	subs	r2, r3, r2
 800e2e6:	440a      	add	r2, r1
 800e2e8:	2a00      	cmp	r2, #0
 800e2ea:	dd6e      	ble.n	800e3ca <_strtod_l+0x52a>
 800e2ec:	f012 000f 	ands.w	r0, r2, #15
 800e2f0:	d00a      	beq.n	800e308 <_strtod_l+0x468>
 800e2f2:	494a      	ldr	r1, [pc, #296]	; (800e41c <_strtod_l+0x57c>)
 800e2f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e2f8:	ed91 7b00 	vldr	d7, [r1]
 800e2fc:	ec49 8b16 	vmov	d6, r8, r9
 800e300:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e304:	ec59 8b17 	vmov	r8, r9, d7
 800e308:	f032 020f 	bics.w	r2, r2, #15
 800e30c:	d04e      	beq.n	800e3ac <_strtod_l+0x50c>
 800e30e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800e312:	dd22      	ble.n	800e35a <_strtod_l+0x4ba>
 800e314:	2500      	movs	r5, #0
 800e316:	462e      	mov	r6, r5
 800e318:	9507      	str	r5, [sp, #28]
 800e31a:	462f      	mov	r7, r5
 800e31c:	2322      	movs	r3, #34	; 0x22
 800e31e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e428 <_strtod_l+0x588>
 800e322:	6023      	str	r3, [r4, #0]
 800e324:	f04f 0800 	mov.w	r8, #0
 800e328:	9b07      	ldr	r3, [sp, #28]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f43f adf3 	beq.w	800df16 <_strtod_l+0x76>
 800e330:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e332:	4620      	mov	r0, r4
 800e334:	f7ff f930 	bl	800d598 <_Bfree>
 800e338:	4639      	mov	r1, r7
 800e33a:	4620      	mov	r0, r4
 800e33c:	f7ff f92c 	bl	800d598 <_Bfree>
 800e340:	4631      	mov	r1, r6
 800e342:	4620      	mov	r0, r4
 800e344:	f7ff f928 	bl	800d598 <_Bfree>
 800e348:	9907      	ldr	r1, [sp, #28]
 800e34a:	4620      	mov	r0, r4
 800e34c:	f7ff f924 	bl	800d598 <_Bfree>
 800e350:	4629      	mov	r1, r5
 800e352:	4620      	mov	r0, r4
 800e354:	f7ff f920 	bl	800d598 <_Bfree>
 800e358:	e5dd      	b.n	800df16 <_strtod_l+0x76>
 800e35a:	2000      	movs	r0, #0
 800e35c:	ec49 8b17 	vmov	d7, r8, r9
 800e360:	4f2f      	ldr	r7, [pc, #188]	; (800e420 <_strtod_l+0x580>)
 800e362:	1112      	asrs	r2, r2, #4
 800e364:	4601      	mov	r1, r0
 800e366:	2a01      	cmp	r2, #1
 800e368:	dc23      	bgt.n	800e3b2 <_strtod_l+0x512>
 800e36a:	b108      	cbz	r0, 800e370 <_strtod_l+0x4d0>
 800e36c:	ec59 8b17 	vmov	r8, r9, d7
 800e370:	4a2b      	ldr	r2, [pc, #172]	; (800e420 <_strtod_l+0x580>)
 800e372:	482c      	ldr	r0, [pc, #176]	; (800e424 <_strtod_l+0x584>)
 800e374:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e378:	ed92 7b00 	vldr	d7, [r2]
 800e37c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e380:	ec49 8b16 	vmov	d6, r8, r9
 800e384:	4a28      	ldr	r2, [pc, #160]	; (800e428 <_strtod_l+0x588>)
 800e386:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e38a:	ee17 1a90 	vmov	r1, s15
 800e38e:	400a      	ands	r2, r1
 800e390:	4282      	cmp	r2, r0
 800e392:	ec59 8b17 	vmov	r8, r9, d7
 800e396:	d8bd      	bhi.n	800e314 <_strtod_l+0x474>
 800e398:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800e39c:	4282      	cmp	r2, r0
 800e39e:	bf86      	itte	hi
 800e3a0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800e42c <_strtod_l+0x58c>
 800e3a4:	f04f 38ff 	movhi.w	r8, #4294967295
 800e3a8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	9205      	str	r2, [sp, #20]
 800e3b0:	e076      	b.n	800e4a0 <_strtod_l+0x600>
 800e3b2:	f012 0f01 	tst.w	r2, #1
 800e3b6:	d004      	beq.n	800e3c2 <_strtod_l+0x522>
 800e3b8:	ed97 6b00 	vldr	d6, [r7]
 800e3bc:	2001      	movs	r0, #1
 800e3be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e3c2:	3101      	adds	r1, #1
 800e3c4:	1052      	asrs	r2, r2, #1
 800e3c6:	3708      	adds	r7, #8
 800e3c8:	e7cd      	b.n	800e366 <_strtod_l+0x4c6>
 800e3ca:	d0ef      	beq.n	800e3ac <_strtod_l+0x50c>
 800e3cc:	4252      	negs	r2, r2
 800e3ce:	f012 000f 	ands.w	r0, r2, #15
 800e3d2:	d00a      	beq.n	800e3ea <_strtod_l+0x54a>
 800e3d4:	4911      	ldr	r1, [pc, #68]	; (800e41c <_strtod_l+0x57c>)
 800e3d6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e3da:	ed91 7b00 	vldr	d7, [r1]
 800e3de:	ec49 8b16 	vmov	d6, r8, r9
 800e3e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e3e6:	ec59 8b17 	vmov	r8, r9, d7
 800e3ea:	1112      	asrs	r2, r2, #4
 800e3ec:	d0de      	beq.n	800e3ac <_strtod_l+0x50c>
 800e3ee:	2a1f      	cmp	r2, #31
 800e3f0:	dd1e      	ble.n	800e430 <_strtod_l+0x590>
 800e3f2:	2500      	movs	r5, #0
 800e3f4:	462e      	mov	r6, r5
 800e3f6:	9507      	str	r5, [sp, #28]
 800e3f8:	462f      	mov	r7, r5
 800e3fa:	2322      	movs	r3, #34	; 0x22
 800e3fc:	f04f 0800 	mov.w	r8, #0
 800e400:	f04f 0900 	mov.w	r9, #0
 800e404:	6023      	str	r3, [r4, #0]
 800e406:	e78f      	b.n	800e328 <_strtod_l+0x488>
 800e408:	08018646 	.word	0x08018646
 800e40c:	0801886c 	.word	0x0801886c
 800e410:	0801863e 	.word	0x0801863e
 800e414:	08018673 	.word	0x08018673
 800e418:	08018917 	.word	0x08018917
 800e41c:	08018780 	.word	0x08018780
 800e420:	08018758 	.word	0x08018758
 800e424:	7ca00000 	.word	0x7ca00000
 800e428:	7ff00000 	.word	0x7ff00000
 800e42c:	7fefffff 	.word	0x7fefffff
 800e430:	f012 0110 	ands.w	r1, r2, #16
 800e434:	bf18      	it	ne
 800e436:	216a      	movne	r1, #106	; 0x6a
 800e438:	9105      	str	r1, [sp, #20]
 800e43a:	ec49 8b17 	vmov	d7, r8, r9
 800e43e:	49be      	ldr	r1, [pc, #760]	; (800e738 <_strtod_l+0x898>)
 800e440:	2000      	movs	r0, #0
 800e442:	07d7      	lsls	r7, r2, #31
 800e444:	d504      	bpl.n	800e450 <_strtod_l+0x5b0>
 800e446:	ed91 6b00 	vldr	d6, [r1]
 800e44a:	2001      	movs	r0, #1
 800e44c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e450:	1052      	asrs	r2, r2, #1
 800e452:	f101 0108 	add.w	r1, r1, #8
 800e456:	d1f4      	bne.n	800e442 <_strtod_l+0x5a2>
 800e458:	b108      	cbz	r0, 800e45e <_strtod_l+0x5be>
 800e45a:	ec59 8b17 	vmov	r8, r9, d7
 800e45e:	9a05      	ldr	r2, [sp, #20]
 800e460:	b1ba      	cbz	r2, 800e492 <_strtod_l+0x5f2>
 800e462:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800e466:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800e46a:	2a00      	cmp	r2, #0
 800e46c:	4648      	mov	r0, r9
 800e46e:	dd10      	ble.n	800e492 <_strtod_l+0x5f2>
 800e470:	2a1f      	cmp	r2, #31
 800e472:	f340 812c 	ble.w	800e6ce <_strtod_l+0x82e>
 800e476:	2a34      	cmp	r2, #52	; 0x34
 800e478:	bfde      	ittt	le
 800e47a:	f04f 32ff 	movle.w	r2, #4294967295
 800e47e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800e482:	408a      	lslle	r2, r1
 800e484:	f04f 0800 	mov.w	r8, #0
 800e488:	bfcc      	ite	gt
 800e48a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e48e:	ea02 0900 	andle.w	r9, r2, r0
 800e492:	ec49 8b17 	vmov	d7, r8, r9
 800e496:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e49e:	d0a8      	beq.n	800e3f2 <_strtod_l+0x552>
 800e4a0:	9a07      	ldr	r2, [sp, #28]
 800e4a2:	9200      	str	r2, [sp, #0]
 800e4a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4a6:	4632      	mov	r2, r6
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	f7ff f8dd 	bl	800d668 <__s2b>
 800e4ae:	9007      	str	r0, [sp, #28]
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	f43f af2f 	beq.w	800e314 <_strtod_l+0x474>
 800e4b6:	9a06      	ldr	r2, [sp, #24]
 800e4b8:	2a00      	cmp	r2, #0
 800e4ba:	ebab 0305 	sub.w	r3, fp, r5
 800e4be:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800e718 <_strtod_l+0x878>
 800e4c2:	bfa8      	it	ge
 800e4c4:	2300      	movge	r3, #0
 800e4c6:	ed9f ab96 	vldr	d10, [pc, #600]	; 800e720 <_strtod_l+0x880>
 800e4ca:	ed9f bb97 	vldr	d11, [pc, #604]	; 800e728 <_strtod_l+0x888>
 800e4ce:	9309      	str	r3, [sp, #36]	; 0x24
 800e4d0:	2500      	movs	r5, #0
 800e4d2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e4d6:	930c      	str	r3, [sp, #48]	; 0x30
 800e4d8:	462e      	mov	r6, r5
 800e4da:	9b07      	ldr	r3, [sp, #28]
 800e4dc:	4620      	mov	r0, r4
 800e4de:	6859      	ldr	r1, [r3, #4]
 800e4e0:	f7ff f81a 	bl	800d518 <_Balloc>
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	f43f af18 	beq.w	800e31c <_strtod_l+0x47c>
 800e4ec:	9b07      	ldr	r3, [sp, #28]
 800e4ee:	691a      	ldr	r2, [r3, #16]
 800e4f0:	3202      	adds	r2, #2
 800e4f2:	f103 010c 	add.w	r1, r3, #12
 800e4f6:	0092      	lsls	r2, r2, #2
 800e4f8:	300c      	adds	r0, #12
 800e4fa:	f7fe f9b8 	bl	800c86e <memcpy>
 800e4fe:	ec49 8b10 	vmov	d0, r8, r9
 800e502:	aa14      	add	r2, sp, #80	; 0x50
 800e504:	a913      	add	r1, sp, #76	; 0x4c
 800e506:	4620      	mov	r0, r4
 800e508:	f7ff fbe2 	bl	800dcd0 <__d2b>
 800e50c:	ec49 8b18 	vmov	d8, r8, r9
 800e510:	9012      	str	r0, [sp, #72]	; 0x48
 800e512:	2800      	cmp	r0, #0
 800e514:	f43f af02 	beq.w	800e31c <_strtod_l+0x47c>
 800e518:	2101      	movs	r1, #1
 800e51a:	4620      	mov	r0, r4
 800e51c:	f7ff f93c 	bl	800d798 <__i2b>
 800e520:	4606      	mov	r6, r0
 800e522:	2800      	cmp	r0, #0
 800e524:	f43f aefa 	beq.w	800e31c <_strtod_l+0x47c>
 800e528:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e52a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	bfab      	itete	ge
 800e530:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800e532:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800e534:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800e538:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800e53c:	bfac      	ite	ge
 800e53e:	eb03 0b02 	addge.w	fp, r3, r2
 800e542:	eba2 0a03 	sublt.w	sl, r2, r3
 800e546:	9a05      	ldr	r2, [sp, #20]
 800e548:	1a9b      	subs	r3, r3, r2
 800e54a:	440b      	add	r3, r1
 800e54c:	4a7b      	ldr	r2, [pc, #492]	; (800e73c <_strtod_l+0x89c>)
 800e54e:	3b01      	subs	r3, #1
 800e550:	4293      	cmp	r3, r2
 800e552:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800e556:	f280 80cd 	bge.w	800e6f4 <_strtod_l+0x854>
 800e55a:	1ad2      	subs	r2, r2, r3
 800e55c:	2a1f      	cmp	r2, #31
 800e55e:	eba1 0102 	sub.w	r1, r1, r2
 800e562:	f04f 0001 	mov.w	r0, #1
 800e566:	f300 80b9 	bgt.w	800e6dc <_strtod_l+0x83c>
 800e56a:	fa00 f302 	lsl.w	r3, r0, r2
 800e56e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e570:	2300      	movs	r3, #0
 800e572:	930a      	str	r3, [sp, #40]	; 0x28
 800e574:	eb0b 0301 	add.w	r3, fp, r1
 800e578:	9a05      	ldr	r2, [sp, #20]
 800e57a:	459b      	cmp	fp, r3
 800e57c:	448a      	add	sl, r1
 800e57e:	4492      	add	sl, r2
 800e580:	465a      	mov	r2, fp
 800e582:	bfa8      	it	ge
 800e584:	461a      	movge	r2, r3
 800e586:	4552      	cmp	r2, sl
 800e588:	bfa8      	it	ge
 800e58a:	4652      	movge	r2, sl
 800e58c:	2a00      	cmp	r2, #0
 800e58e:	bfc2      	ittt	gt
 800e590:	1a9b      	subgt	r3, r3, r2
 800e592:	ebaa 0a02 	subgt.w	sl, sl, r2
 800e596:	ebab 0b02 	subgt.w	fp, fp, r2
 800e59a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e59c:	2a00      	cmp	r2, #0
 800e59e:	dd18      	ble.n	800e5d2 <_strtod_l+0x732>
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5a6:	f7ff f9b7 	bl	800d918 <__pow5mult>
 800e5aa:	4606      	mov	r6, r0
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	f43f aeb5 	beq.w	800e31c <_strtod_l+0x47c>
 800e5b2:	4601      	mov	r1, r0
 800e5b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	f7ff f904 	bl	800d7c4 <__multiply>
 800e5bc:	900e      	str	r0, [sp, #56]	; 0x38
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	f43f aeac 	beq.w	800e31c <_strtod_l+0x47c>
 800e5c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	f7fe ffe6 	bl	800d598 <_Bfree>
 800e5cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5d0:	9212      	str	r2, [sp, #72]	; 0x48
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f300 8093 	bgt.w	800e6fe <_strtod_l+0x85e>
 800e5d8:	9b06      	ldr	r3, [sp, #24]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	dd08      	ble.n	800e5f0 <_strtod_l+0x750>
 800e5de:	4639      	mov	r1, r7
 800e5e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	f7ff f998 	bl	800d918 <__pow5mult>
 800e5e8:	4607      	mov	r7, r0
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	f43f ae96 	beq.w	800e31c <_strtod_l+0x47c>
 800e5f0:	f1ba 0f00 	cmp.w	sl, #0
 800e5f4:	dd08      	ble.n	800e608 <_strtod_l+0x768>
 800e5f6:	4639      	mov	r1, r7
 800e5f8:	4652      	mov	r2, sl
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f7ff f9e6 	bl	800d9cc <__lshift>
 800e600:	4607      	mov	r7, r0
 800e602:	2800      	cmp	r0, #0
 800e604:	f43f ae8a 	beq.w	800e31c <_strtod_l+0x47c>
 800e608:	f1bb 0f00 	cmp.w	fp, #0
 800e60c:	dd08      	ble.n	800e620 <_strtod_l+0x780>
 800e60e:	4631      	mov	r1, r6
 800e610:	465a      	mov	r2, fp
 800e612:	4620      	mov	r0, r4
 800e614:	f7ff f9da 	bl	800d9cc <__lshift>
 800e618:	4606      	mov	r6, r0
 800e61a:	2800      	cmp	r0, #0
 800e61c:	f43f ae7e 	beq.w	800e31c <_strtod_l+0x47c>
 800e620:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e622:	463a      	mov	r2, r7
 800e624:	4620      	mov	r0, r4
 800e626:	f7ff fa59 	bl	800dadc <__mdiff>
 800e62a:	4605      	mov	r5, r0
 800e62c:	2800      	cmp	r0, #0
 800e62e:	f43f ae75 	beq.w	800e31c <_strtod_l+0x47c>
 800e632:	2300      	movs	r3, #0
 800e634:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800e638:	60c3      	str	r3, [r0, #12]
 800e63a:	4631      	mov	r1, r6
 800e63c:	f7ff fa32 	bl	800daa4 <__mcmp>
 800e640:	2800      	cmp	r0, #0
 800e642:	da7f      	bge.n	800e744 <_strtod_l+0x8a4>
 800e644:	ea5a 0a08 	orrs.w	sl, sl, r8
 800e648:	f040 80a5 	bne.w	800e796 <_strtod_l+0x8f6>
 800e64c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e650:	2b00      	cmp	r3, #0
 800e652:	f040 80a0 	bne.w	800e796 <_strtod_l+0x8f6>
 800e656:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e65a:	0d1b      	lsrs	r3, r3, #20
 800e65c:	051b      	lsls	r3, r3, #20
 800e65e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e662:	f240 8098 	bls.w	800e796 <_strtod_l+0x8f6>
 800e666:	696b      	ldr	r3, [r5, #20]
 800e668:	b91b      	cbnz	r3, 800e672 <_strtod_l+0x7d2>
 800e66a:	692b      	ldr	r3, [r5, #16]
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	f340 8092 	ble.w	800e796 <_strtod_l+0x8f6>
 800e672:	4629      	mov	r1, r5
 800e674:	2201      	movs	r2, #1
 800e676:	4620      	mov	r0, r4
 800e678:	f7ff f9a8 	bl	800d9cc <__lshift>
 800e67c:	4631      	mov	r1, r6
 800e67e:	4605      	mov	r5, r0
 800e680:	f7ff fa10 	bl	800daa4 <__mcmp>
 800e684:	2800      	cmp	r0, #0
 800e686:	f340 8086 	ble.w	800e796 <_strtod_l+0x8f6>
 800e68a:	9905      	ldr	r1, [sp, #20]
 800e68c:	4a2c      	ldr	r2, [pc, #176]	; (800e740 <_strtod_l+0x8a0>)
 800e68e:	464b      	mov	r3, r9
 800e690:	2900      	cmp	r1, #0
 800e692:	f000 809f 	beq.w	800e7d4 <_strtod_l+0x934>
 800e696:	ea02 0109 	and.w	r1, r2, r9
 800e69a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e69e:	f300 8099 	bgt.w	800e7d4 <_strtod_l+0x934>
 800e6a2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e6a6:	f77f aea8 	ble.w	800e3fa <_strtod_l+0x55a>
 800e6aa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e730 <_strtod_l+0x890>
 800e6ae:	ec49 8b16 	vmov	d6, r8, r9
 800e6b2:	4b23      	ldr	r3, [pc, #140]	; (800e740 <_strtod_l+0x8a0>)
 800e6b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e6b8:	ee17 2a90 	vmov	r2, s15
 800e6bc:	4013      	ands	r3, r2
 800e6be:	ec59 8b17 	vmov	r8, r9, d7
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	f47f ae34 	bne.w	800e330 <_strtod_l+0x490>
 800e6c8:	2322      	movs	r3, #34	; 0x22
 800e6ca:	6023      	str	r3, [r4, #0]
 800e6cc:	e630      	b.n	800e330 <_strtod_l+0x490>
 800e6ce:	f04f 31ff 	mov.w	r1, #4294967295
 800e6d2:	fa01 f202 	lsl.w	r2, r1, r2
 800e6d6:	ea02 0808 	and.w	r8, r2, r8
 800e6da:	e6da      	b.n	800e492 <_strtod_l+0x5f2>
 800e6dc:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800e6e0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800e6e4:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800e6e8:	33e2      	adds	r3, #226	; 0xe2
 800e6ea:	fa00 f303 	lsl.w	r3, r0, r3
 800e6ee:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800e6f2:	e73f      	b.n	800e574 <_strtod_l+0x6d4>
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e6fc:	e73a      	b.n	800e574 <_strtod_l+0x6d4>
 800e6fe:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e700:	461a      	mov	r2, r3
 800e702:	4620      	mov	r0, r4
 800e704:	f7ff f962 	bl	800d9cc <__lshift>
 800e708:	9012      	str	r0, [sp, #72]	; 0x48
 800e70a:	2800      	cmp	r0, #0
 800e70c:	f47f af64 	bne.w	800e5d8 <_strtod_l+0x738>
 800e710:	e604      	b.n	800e31c <_strtod_l+0x47c>
 800e712:	bf00      	nop
 800e714:	f3af 8000 	nop.w
 800e718:	94a03595 	.word	0x94a03595
 800e71c:	3fcfffff 	.word	0x3fcfffff
 800e720:	94a03595 	.word	0x94a03595
 800e724:	3fdfffff 	.word	0x3fdfffff
 800e728:	35afe535 	.word	0x35afe535
 800e72c:	3fe00000 	.word	0x3fe00000
 800e730:	00000000 	.word	0x00000000
 800e734:	39500000 	.word	0x39500000
 800e738:	08018880 	.word	0x08018880
 800e73c:	fffffc02 	.word	0xfffffc02
 800e740:	7ff00000 	.word	0x7ff00000
 800e744:	46cb      	mov	fp, r9
 800e746:	d15f      	bne.n	800e808 <_strtod_l+0x968>
 800e748:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e74c:	f1ba 0f00 	cmp.w	sl, #0
 800e750:	d02a      	beq.n	800e7a8 <_strtod_l+0x908>
 800e752:	4aa7      	ldr	r2, [pc, #668]	; (800e9f0 <_strtod_l+0xb50>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d12b      	bne.n	800e7b0 <_strtod_l+0x910>
 800e758:	9b05      	ldr	r3, [sp, #20]
 800e75a:	4642      	mov	r2, r8
 800e75c:	b1fb      	cbz	r3, 800e79e <_strtod_l+0x8fe>
 800e75e:	4ba5      	ldr	r3, [pc, #660]	; (800e9f4 <_strtod_l+0xb54>)
 800e760:	ea09 0303 	and.w	r3, r9, r3
 800e764:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e768:	f04f 31ff 	mov.w	r1, #4294967295
 800e76c:	d81a      	bhi.n	800e7a4 <_strtod_l+0x904>
 800e76e:	0d1b      	lsrs	r3, r3, #20
 800e770:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e774:	fa01 f303 	lsl.w	r3, r1, r3
 800e778:	429a      	cmp	r2, r3
 800e77a:	d119      	bne.n	800e7b0 <_strtod_l+0x910>
 800e77c:	4b9e      	ldr	r3, [pc, #632]	; (800e9f8 <_strtod_l+0xb58>)
 800e77e:	459b      	cmp	fp, r3
 800e780:	d102      	bne.n	800e788 <_strtod_l+0x8e8>
 800e782:	3201      	adds	r2, #1
 800e784:	f43f adca 	beq.w	800e31c <_strtod_l+0x47c>
 800e788:	4b9a      	ldr	r3, [pc, #616]	; (800e9f4 <_strtod_l+0xb54>)
 800e78a:	ea0b 0303 	and.w	r3, fp, r3
 800e78e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e792:	f04f 0800 	mov.w	r8, #0
 800e796:	9b05      	ldr	r3, [sp, #20]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d186      	bne.n	800e6aa <_strtod_l+0x80a>
 800e79c:	e5c8      	b.n	800e330 <_strtod_l+0x490>
 800e79e:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a2:	e7e9      	b.n	800e778 <_strtod_l+0x8d8>
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	e7e7      	b.n	800e778 <_strtod_l+0x8d8>
 800e7a8:	ea53 0308 	orrs.w	r3, r3, r8
 800e7ac:	f43f af6d 	beq.w	800e68a <_strtod_l+0x7ea>
 800e7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7b2:	b1cb      	cbz	r3, 800e7e8 <_strtod_l+0x948>
 800e7b4:	ea13 0f0b 	tst.w	r3, fp
 800e7b8:	d0ed      	beq.n	800e796 <_strtod_l+0x8f6>
 800e7ba:	9a05      	ldr	r2, [sp, #20]
 800e7bc:	4640      	mov	r0, r8
 800e7be:	4649      	mov	r1, r9
 800e7c0:	f1ba 0f00 	cmp.w	sl, #0
 800e7c4:	d014      	beq.n	800e7f0 <_strtod_l+0x950>
 800e7c6:	f7ff fb51 	bl	800de6c <sulp>
 800e7ca:	ee38 7b00 	vadd.f64	d7, d8, d0
 800e7ce:	ec59 8b17 	vmov	r8, r9, d7
 800e7d2:	e7e0      	b.n	800e796 <_strtod_l+0x8f6>
 800e7d4:	4013      	ands	r3, r2
 800e7d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e7da:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e7de:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e7e2:	f04f 38ff 	mov.w	r8, #4294967295
 800e7e6:	e7d6      	b.n	800e796 <_strtod_l+0x8f6>
 800e7e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7ea:	ea13 0f08 	tst.w	r3, r8
 800e7ee:	e7e3      	b.n	800e7b8 <_strtod_l+0x918>
 800e7f0:	f7ff fb3c 	bl	800de6c <sulp>
 800e7f4:	ee38 0b40 	vsub.f64	d0, d8, d0
 800e7f8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e800:	ec59 8b10 	vmov	r8, r9, d0
 800e804:	d1c7      	bne.n	800e796 <_strtod_l+0x8f6>
 800e806:	e5f8      	b.n	800e3fa <_strtod_l+0x55a>
 800e808:	4631      	mov	r1, r6
 800e80a:	4628      	mov	r0, r5
 800e80c:	f7ff faba 	bl	800dd84 <__ratio>
 800e810:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e814:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e81c:	d85f      	bhi.n	800e8de <_strtod_l+0xa3e>
 800e81e:	f1ba 0f00 	cmp.w	sl, #0
 800e822:	d166      	bne.n	800e8f2 <_strtod_l+0xa52>
 800e824:	f1b8 0f00 	cmp.w	r8, #0
 800e828:	d14d      	bne.n	800e8c6 <_strtod_l+0xa26>
 800e82a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e82e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d162      	bne.n	800e8fc <_strtod_l+0xa5c>
 800e836:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800e83a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800e83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e842:	d401      	bmi.n	800e848 <_strtod_l+0x9a8>
 800e844:	ee20 db0d 	vmul.f64	d13, d0, d13
 800e848:	eeb1 cb4d 	vneg.f64	d12, d13
 800e84c:	4869      	ldr	r0, [pc, #420]	; (800e9f4 <_strtod_l+0xb54>)
 800e84e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800ea00 <_strtod_l+0xb60>
 800e852:	ea0b 0100 	and.w	r1, fp, r0
 800e856:	4561      	cmp	r1, ip
 800e858:	ec53 2b1c 	vmov	r2, r3, d12
 800e85c:	d17a      	bne.n	800e954 <_strtod_l+0xab4>
 800e85e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800e862:	ec49 8b10 	vmov	d0, r8, r9
 800e866:	910a      	str	r1, [sp, #40]	; 0x28
 800e868:	f7ff f9c2 	bl	800dbf0 <__ulp>
 800e86c:	ec49 8b1e 	vmov	d14, r8, r9
 800e870:	4860      	ldr	r0, [pc, #384]	; (800e9f4 <_strtod_l+0xb54>)
 800e872:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800e876:	ee1e 3a90 	vmov	r3, s29
 800e87a:	4a60      	ldr	r2, [pc, #384]	; (800e9fc <_strtod_l+0xb5c>)
 800e87c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e87e:	4018      	ands	r0, r3
 800e880:	4290      	cmp	r0, r2
 800e882:	ec59 8b1e 	vmov	r8, r9, d14
 800e886:	d93c      	bls.n	800e902 <_strtod_l+0xa62>
 800e888:	ee18 2a90 	vmov	r2, s17
 800e88c:	4b5a      	ldr	r3, [pc, #360]	; (800e9f8 <_strtod_l+0xb58>)
 800e88e:	429a      	cmp	r2, r3
 800e890:	d104      	bne.n	800e89c <_strtod_l+0x9fc>
 800e892:	ee18 3a10 	vmov	r3, s16
 800e896:	3301      	adds	r3, #1
 800e898:	f43f ad40 	beq.w	800e31c <_strtod_l+0x47c>
 800e89c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800e9f8 <_strtod_l+0xb58>
 800e8a0:	f04f 38ff 	mov.w	r8, #4294967295
 800e8a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f7fe fe76 	bl	800d598 <_Bfree>
 800e8ac:	4639      	mov	r1, r7
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	f7fe fe72 	bl	800d598 <_Bfree>
 800e8b4:	4631      	mov	r1, r6
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f7fe fe6e 	bl	800d598 <_Bfree>
 800e8bc:	4629      	mov	r1, r5
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f7fe fe6a 	bl	800d598 <_Bfree>
 800e8c4:	e609      	b.n	800e4da <_strtod_l+0x63a>
 800e8c6:	f1b8 0f01 	cmp.w	r8, #1
 800e8ca:	d103      	bne.n	800e8d4 <_strtod_l+0xa34>
 800e8cc:	f1b9 0f00 	cmp.w	r9, #0
 800e8d0:	f43f ad93 	beq.w	800e3fa <_strtod_l+0x55a>
 800e8d4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800e8d8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800e8dc:	e7b6      	b.n	800e84c <_strtod_l+0x9ac>
 800e8de:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800e8e2:	ee20 db0d 	vmul.f64	d13, d0, d13
 800e8e6:	f1ba 0f00 	cmp.w	sl, #0
 800e8ea:	d0ad      	beq.n	800e848 <_strtod_l+0x9a8>
 800e8ec:	eeb0 cb4d 	vmov.f64	d12, d13
 800e8f0:	e7ac      	b.n	800e84c <_strtod_l+0x9ac>
 800e8f2:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800e8f6:	eeb0 db4c 	vmov.f64	d13, d12
 800e8fa:	e7a7      	b.n	800e84c <_strtod_l+0x9ac>
 800e8fc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800e900:	e7a4      	b.n	800e84c <_strtod_l+0x9ac>
 800e902:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e906:	9b05      	ldr	r3, [sp, #20]
 800e908:	46cb      	mov	fp, r9
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d1ca      	bne.n	800e8a4 <_strtod_l+0xa04>
 800e90e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e912:	0d1b      	lsrs	r3, r3, #20
 800e914:	051b      	lsls	r3, r3, #20
 800e916:	4299      	cmp	r1, r3
 800e918:	d1c4      	bne.n	800e8a4 <_strtod_l+0xa04>
 800e91a:	ec51 0b1d 	vmov	r0, r1, d13
 800e91e:	f7f1 fecb 	bl	80006b8 <__aeabi_d2lz>
 800e922:	f7f1 fe83 	bl	800062c <__aeabi_l2d>
 800e926:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800e92a:	ec41 0b17 	vmov	d7, r0, r1
 800e92e:	ea4b 0b08 	orr.w	fp, fp, r8
 800e932:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800e936:	ee3d db47 	vsub.f64	d13, d13, d7
 800e93a:	d03c      	beq.n	800e9b6 <_strtod_l+0xb16>
 800e93c:	eeb4 dbca 	vcmpe.f64	d13, d10
 800e940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e944:	f53f acf4 	bmi.w	800e330 <_strtod_l+0x490>
 800e948:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800e94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e950:	dda8      	ble.n	800e8a4 <_strtod_l+0xa04>
 800e952:	e4ed      	b.n	800e330 <_strtod_l+0x490>
 800e954:	9805      	ldr	r0, [sp, #20]
 800e956:	b1f0      	cbz	r0, 800e996 <_strtod_l+0xaf6>
 800e958:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800e95c:	d81b      	bhi.n	800e996 <_strtod_l+0xaf6>
 800e95e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800e9e8 <_strtod_l+0xb48>
 800e962:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800e966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e96a:	d811      	bhi.n	800e990 <_strtod_l+0xaf0>
 800e96c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800e970:	ee1d 3a10 	vmov	r3, s26
 800e974:	2b01      	cmp	r3, #1
 800e976:	bf38      	it	cc
 800e978:	2301      	movcc	r3, #1
 800e97a:	ee0d 3a10 	vmov	s26, r3
 800e97e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800e982:	f1ba 0f00 	cmp.w	sl, #0
 800e986:	d113      	bne.n	800e9b0 <_strtod_l+0xb10>
 800e988:	eeb1 7b4d 	vneg.f64	d7, d13
 800e98c:	ec53 2b17 	vmov	r2, r3, d7
 800e990:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800e994:	1a43      	subs	r3, r0, r1
 800e996:	eeb0 0b48 	vmov.f64	d0, d8
 800e99a:	ec43 2b1c 	vmov	d12, r2, r3
 800e99e:	910a      	str	r1, [sp, #40]	; 0x28
 800e9a0:	f7ff f926 	bl	800dbf0 <__ulp>
 800e9a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e9a6:	eeac 8b00 	vfma.f64	d8, d12, d0
 800e9aa:	ec59 8b18 	vmov	r8, r9, d8
 800e9ae:	e7aa      	b.n	800e906 <_strtod_l+0xa66>
 800e9b0:	eeb0 7b4d 	vmov.f64	d7, d13
 800e9b4:	e7ea      	b.n	800e98c <_strtod_l+0xaec>
 800e9b6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800e9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9be:	f57f af71 	bpl.w	800e8a4 <_strtod_l+0xa04>
 800e9c2:	e4b5      	b.n	800e330 <_strtod_l+0x490>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	9308      	str	r3, [sp, #32]
 800e9c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e9cc:	6013      	str	r3, [r2, #0]
 800e9ce:	f7ff baa6 	b.w	800df1e <_strtod_l+0x7e>
 800e9d2:	2a65      	cmp	r2, #101	; 0x65
 800e9d4:	f43f aba2 	beq.w	800e11c <_strtod_l+0x27c>
 800e9d8:	2a45      	cmp	r2, #69	; 0x45
 800e9da:	f43f ab9f 	beq.w	800e11c <_strtod_l+0x27c>
 800e9de:	2101      	movs	r1, #1
 800e9e0:	f7ff bbd8 	b.w	800e194 <_strtod_l+0x2f4>
 800e9e4:	f3af 8000 	nop.w
 800e9e8:	ffc00000 	.word	0xffc00000
 800e9ec:	41dfffff 	.word	0x41dfffff
 800e9f0:	000fffff 	.word	0x000fffff
 800e9f4:	7ff00000 	.word	0x7ff00000
 800e9f8:	7fefffff 	.word	0x7fefffff
 800e9fc:	7c9fffff 	.word	0x7c9fffff
 800ea00:	7fe00000 	.word	0x7fe00000

0800ea04 <_strtod_r>:
 800ea04:	4b01      	ldr	r3, [pc, #4]	; (800ea0c <_strtod_r+0x8>)
 800ea06:	f7ff ba4b 	b.w	800dea0 <_strtod_l>
 800ea0a:	bf00      	nop
 800ea0c:	200008e4 	.word	0x200008e4

0800ea10 <__ssputs_r>:
 800ea10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea14:	688e      	ldr	r6, [r1, #8]
 800ea16:	461f      	mov	r7, r3
 800ea18:	42be      	cmp	r6, r7
 800ea1a:	680b      	ldr	r3, [r1, #0]
 800ea1c:	4682      	mov	sl, r0
 800ea1e:	460c      	mov	r4, r1
 800ea20:	4690      	mov	r8, r2
 800ea22:	d82c      	bhi.n	800ea7e <__ssputs_r+0x6e>
 800ea24:	898a      	ldrh	r2, [r1, #12]
 800ea26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea2a:	d026      	beq.n	800ea7a <__ssputs_r+0x6a>
 800ea2c:	6965      	ldr	r5, [r4, #20]
 800ea2e:	6909      	ldr	r1, [r1, #16]
 800ea30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea34:	eba3 0901 	sub.w	r9, r3, r1
 800ea38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea3c:	1c7b      	adds	r3, r7, #1
 800ea3e:	444b      	add	r3, r9
 800ea40:	106d      	asrs	r5, r5, #1
 800ea42:	429d      	cmp	r5, r3
 800ea44:	bf38      	it	cc
 800ea46:	461d      	movcc	r5, r3
 800ea48:	0553      	lsls	r3, r2, #21
 800ea4a:	d527      	bpl.n	800ea9c <__ssputs_r+0x8c>
 800ea4c:	4629      	mov	r1, r5
 800ea4e:	f7fc fc1f 	bl	800b290 <_malloc_r>
 800ea52:	4606      	mov	r6, r0
 800ea54:	b360      	cbz	r0, 800eab0 <__ssputs_r+0xa0>
 800ea56:	6921      	ldr	r1, [r4, #16]
 800ea58:	464a      	mov	r2, r9
 800ea5a:	f7fd ff08 	bl	800c86e <memcpy>
 800ea5e:	89a3      	ldrh	r3, [r4, #12]
 800ea60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea68:	81a3      	strh	r3, [r4, #12]
 800ea6a:	6126      	str	r6, [r4, #16]
 800ea6c:	6165      	str	r5, [r4, #20]
 800ea6e:	444e      	add	r6, r9
 800ea70:	eba5 0509 	sub.w	r5, r5, r9
 800ea74:	6026      	str	r6, [r4, #0]
 800ea76:	60a5      	str	r5, [r4, #8]
 800ea78:	463e      	mov	r6, r7
 800ea7a:	42be      	cmp	r6, r7
 800ea7c:	d900      	bls.n	800ea80 <__ssputs_r+0x70>
 800ea7e:	463e      	mov	r6, r7
 800ea80:	6820      	ldr	r0, [r4, #0]
 800ea82:	4632      	mov	r2, r6
 800ea84:	4641      	mov	r1, r8
 800ea86:	f000 fff0 	bl	800fa6a <memmove>
 800ea8a:	68a3      	ldr	r3, [r4, #8]
 800ea8c:	1b9b      	subs	r3, r3, r6
 800ea8e:	60a3      	str	r3, [r4, #8]
 800ea90:	6823      	ldr	r3, [r4, #0]
 800ea92:	4433      	add	r3, r6
 800ea94:	6023      	str	r3, [r4, #0]
 800ea96:	2000      	movs	r0, #0
 800ea98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea9c:	462a      	mov	r2, r5
 800ea9e:	f001 fbc2 	bl	8010226 <_realloc_r>
 800eaa2:	4606      	mov	r6, r0
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	d1e0      	bne.n	800ea6a <__ssputs_r+0x5a>
 800eaa8:	6921      	ldr	r1, [r4, #16]
 800eaaa:	4650      	mov	r0, sl
 800eaac:	f7fe fce8 	bl	800d480 <_free_r>
 800eab0:	230c      	movs	r3, #12
 800eab2:	f8ca 3000 	str.w	r3, [sl]
 800eab6:	89a3      	ldrh	r3, [r4, #12]
 800eab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eabc:	81a3      	strh	r3, [r4, #12]
 800eabe:	f04f 30ff 	mov.w	r0, #4294967295
 800eac2:	e7e9      	b.n	800ea98 <__ssputs_r+0x88>

0800eac4 <_svfiprintf_r>:
 800eac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac8:	4698      	mov	r8, r3
 800eaca:	898b      	ldrh	r3, [r1, #12]
 800eacc:	061b      	lsls	r3, r3, #24
 800eace:	b09d      	sub	sp, #116	; 0x74
 800ead0:	4607      	mov	r7, r0
 800ead2:	460d      	mov	r5, r1
 800ead4:	4614      	mov	r4, r2
 800ead6:	d50e      	bpl.n	800eaf6 <_svfiprintf_r+0x32>
 800ead8:	690b      	ldr	r3, [r1, #16]
 800eada:	b963      	cbnz	r3, 800eaf6 <_svfiprintf_r+0x32>
 800eadc:	2140      	movs	r1, #64	; 0x40
 800eade:	f7fc fbd7 	bl	800b290 <_malloc_r>
 800eae2:	6028      	str	r0, [r5, #0]
 800eae4:	6128      	str	r0, [r5, #16]
 800eae6:	b920      	cbnz	r0, 800eaf2 <_svfiprintf_r+0x2e>
 800eae8:	230c      	movs	r3, #12
 800eaea:	603b      	str	r3, [r7, #0]
 800eaec:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf0:	e0d0      	b.n	800ec94 <_svfiprintf_r+0x1d0>
 800eaf2:	2340      	movs	r3, #64	; 0x40
 800eaf4:	616b      	str	r3, [r5, #20]
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	9309      	str	r3, [sp, #36]	; 0x24
 800eafa:	2320      	movs	r3, #32
 800eafc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb00:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb04:	2330      	movs	r3, #48	; 0x30
 800eb06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ecac <_svfiprintf_r+0x1e8>
 800eb0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb0e:	f04f 0901 	mov.w	r9, #1
 800eb12:	4623      	mov	r3, r4
 800eb14:	469a      	mov	sl, r3
 800eb16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb1a:	b10a      	cbz	r2, 800eb20 <_svfiprintf_r+0x5c>
 800eb1c:	2a25      	cmp	r2, #37	; 0x25
 800eb1e:	d1f9      	bne.n	800eb14 <_svfiprintf_r+0x50>
 800eb20:	ebba 0b04 	subs.w	fp, sl, r4
 800eb24:	d00b      	beq.n	800eb3e <_svfiprintf_r+0x7a>
 800eb26:	465b      	mov	r3, fp
 800eb28:	4622      	mov	r2, r4
 800eb2a:	4629      	mov	r1, r5
 800eb2c:	4638      	mov	r0, r7
 800eb2e:	f7ff ff6f 	bl	800ea10 <__ssputs_r>
 800eb32:	3001      	adds	r0, #1
 800eb34:	f000 80a9 	beq.w	800ec8a <_svfiprintf_r+0x1c6>
 800eb38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb3a:	445a      	add	r2, fp
 800eb3c:	9209      	str	r2, [sp, #36]	; 0x24
 800eb3e:	f89a 3000 	ldrb.w	r3, [sl]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	f000 80a1 	beq.w	800ec8a <_svfiprintf_r+0x1c6>
 800eb48:	2300      	movs	r3, #0
 800eb4a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb52:	f10a 0a01 	add.w	sl, sl, #1
 800eb56:	9304      	str	r3, [sp, #16]
 800eb58:	9307      	str	r3, [sp, #28]
 800eb5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb5e:	931a      	str	r3, [sp, #104]	; 0x68
 800eb60:	4654      	mov	r4, sl
 800eb62:	2205      	movs	r2, #5
 800eb64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb68:	4850      	ldr	r0, [pc, #320]	; (800ecac <_svfiprintf_r+0x1e8>)
 800eb6a:	f7f1 fb79 	bl	8000260 <memchr>
 800eb6e:	9a04      	ldr	r2, [sp, #16]
 800eb70:	b9d8      	cbnz	r0, 800ebaa <_svfiprintf_r+0xe6>
 800eb72:	06d0      	lsls	r0, r2, #27
 800eb74:	bf44      	itt	mi
 800eb76:	2320      	movmi	r3, #32
 800eb78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb7c:	0711      	lsls	r1, r2, #28
 800eb7e:	bf44      	itt	mi
 800eb80:	232b      	movmi	r3, #43	; 0x2b
 800eb82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb86:	f89a 3000 	ldrb.w	r3, [sl]
 800eb8a:	2b2a      	cmp	r3, #42	; 0x2a
 800eb8c:	d015      	beq.n	800ebba <_svfiprintf_r+0xf6>
 800eb8e:	9a07      	ldr	r2, [sp, #28]
 800eb90:	4654      	mov	r4, sl
 800eb92:	2000      	movs	r0, #0
 800eb94:	f04f 0c0a 	mov.w	ip, #10
 800eb98:	4621      	mov	r1, r4
 800eb9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb9e:	3b30      	subs	r3, #48	; 0x30
 800eba0:	2b09      	cmp	r3, #9
 800eba2:	d94d      	bls.n	800ec40 <_svfiprintf_r+0x17c>
 800eba4:	b1b0      	cbz	r0, 800ebd4 <_svfiprintf_r+0x110>
 800eba6:	9207      	str	r2, [sp, #28]
 800eba8:	e014      	b.n	800ebd4 <_svfiprintf_r+0x110>
 800ebaa:	eba0 0308 	sub.w	r3, r0, r8
 800ebae:	fa09 f303 	lsl.w	r3, r9, r3
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	9304      	str	r3, [sp, #16]
 800ebb6:	46a2      	mov	sl, r4
 800ebb8:	e7d2      	b.n	800eb60 <_svfiprintf_r+0x9c>
 800ebba:	9b03      	ldr	r3, [sp, #12]
 800ebbc:	1d19      	adds	r1, r3, #4
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	9103      	str	r1, [sp, #12]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	bfbb      	ittet	lt
 800ebc6:	425b      	neglt	r3, r3
 800ebc8:	f042 0202 	orrlt.w	r2, r2, #2
 800ebcc:	9307      	strge	r3, [sp, #28]
 800ebce:	9307      	strlt	r3, [sp, #28]
 800ebd0:	bfb8      	it	lt
 800ebd2:	9204      	strlt	r2, [sp, #16]
 800ebd4:	7823      	ldrb	r3, [r4, #0]
 800ebd6:	2b2e      	cmp	r3, #46	; 0x2e
 800ebd8:	d10c      	bne.n	800ebf4 <_svfiprintf_r+0x130>
 800ebda:	7863      	ldrb	r3, [r4, #1]
 800ebdc:	2b2a      	cmp	r3, #42	; 0x2a
 800ebde:	d134      	bne.n	800ec4a <_svfiprintf_r+0x186>
 800ebe0:	9b03      	ldr	r3, [sp, #12]
 800ebe2:	1d1a      	adds	r2, r3, #4
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	9203      	str	r2, [sp, #12]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	bfb8      	it	lt
 800ebec:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebf0:	3402      	adds	r4, #2
 800ebf2:	9305      	str	r3, [sp, #20]
 800ebf4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ecbc <_svfiprintf_r+0x1f8>
 800ebf8:	7821      	ldrb	r1, [r4, #0]
 800ebfa:	2203      	movs	r2, #3
 800ebfc:	4650      	mov	r0, sl
 800ebfe:	f7f1 fb2f 	bl	8000260 <memchr>
 800ec02:	b138      	cbz	r0, 800ec14 <_svfiprintf_r+0x150>
 800ec04:	9b04      	ldr	r3, [sp, #16]
 800ec06:	eba0 000a 	sub.w	r0, r0, sl
 800ec0a:	2240      	movs	r2, #64	; 0x40
 800ec0c:	4082      	lsls	r2, r0
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	3401      	adds	r4, #1
 800ec12:	9304      	str	r3, [sp, #16]
 800ec14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec18:	4825      	ldr	r0, [pc, #148]	; (800ecb0 <_svfiprintf_r+0x1ec>)
 800ec1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec1e:	2206      	movs	r2, #6
 800ec20:	f7f1 fb1e 	bl	8000260 <memchr>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	d038      	beq.n	800ec9a <_svfiprintf_r+0x1d6>
 800ec28:	4b22      	ldr	r3, [pc, #136]	; (800ecb4 <_svfiprintf_r+0x1f0>)
 800ec2a:	bb1b      	cbnz	r3, 800ec74 <_svfiprintf_r+0x1b0>
 800ec2c:	9b03      	ldr	r3, [sp, #12]
 800ec2e:	3307      	adds	r3, #7
 800ec30:	f023 0307 	bic.w	r3, r3, #7
 800ec34:	3308      	adds	r3, #8
 800ec36:	9303      	str	r3, [sp, #12]
 800ec38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec3a:	4433      	add	r3, r6
 800ec3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec3e:	e768      	b.n	800eb12 <_svfiprintf_r+0x4e>
 800ec40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec44:	460c      	mov	r4, r1
 800ec46:	2001      	movs	r0, #1
 800ec48:	e7a6      	b.n	800eb98 <_svfiprintf_r+0xd4>
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	3401      	adds	r4, #1
 800ec4e:	9305      	str	r3, [sp, #20]
 800ec50:	4619      	mov	r1, r3
 800ec52:	f04f 0c0a 	mov.w	ip, #10
 800ec56:	4620      	mov	r0, r4
 800ec58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec5c:	3a30      	subs	r2, #48	; 0x30
 800ec5e:	2a09      	cmp	r2, #9
 800ec60:	d903      	bls.n	800ec6a <_svfiprintf_r+0x1a6>
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d0c6      	beq.n	800ebf4 <_svfiprintf_r+0x130>
 800ec66:	9105      	str	r1, [sp, #20]
 800ec68:	e7c4      	b.n	800ebf4 <_svfiprintf_r+0x130>
 800ec6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec6e:	4604      	mov	r4, r0
 800ec70:	2301      	movs	r3, #1
 800ec72:	e7f0      	b.n	800ec56 <_svfiprintf_r+0x192>
 800ec74:	ab03      	add	r3, sp, #12
 800ec76:	9300      	str	r3, [sp, #0]
 800ec78:	462a      	mov	r2, r5
 800ec7a:	4b0f      	ldr	r3, [pc, #60]	; (800ecb8 <_svfiprintf_r+0x1f4>)
 800ec7c:	a904      	add	r1, sp, #16
 800ec7e:	4638      	mov	r0, r7
 800ec80:	f7fc fcb2 	bl	800b5e8 <_printf_float>
 800ec84:	1c42      	adds	r2, r0, #1
 800ec86:	4606      	mov	r6, r0
 800ec88:	d1d6      	bne.n	800ec38 <_svfiprintf_r+0x174>
 800ec8a:	89ab      	ldrh	r3, [r5, #12]
 800ec8c:	065b      	lsls	r3, r3, #25
 800ec8e:	f53f af2d 	bmi.w	800eaec <_svfiprintf_r+0x28>
 800ec92:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec94:	b01d      	add	sp, #116	; 0x74
 800ec96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec9a:	ab03      	add	r3, sp, #12
 800ec9c:	9300      	str	r3, [sp, #0]
 800ec9e:	462a      	mov	r2, r5
 800eca0:	4b05      	ldr	r3, [pc, #20]	; (800ecb8 <_svfiprintf_r+0x1f4>)
 800eca2:	a904      	add	r1, sp, #16
 800eca4:	4638      	mov	r0, r7
 800eca6:	f7fc ff27 	bl	800baf8 <_printf_i>
 800ecaa:	e7eb      	b.n	800ec84 <_svfiprintf_r+0x1c0>
 800ecac:	080188a8 	.word	0x080188a8
 800ecb0:	080188b2 	.word	0x080188b2
 800ecb4:	0800b5e9 	.word	0x0800b5e9
 800ecb8:	0800ea11 	.word	0x0800ea11
 800ecbc:	080188ae 	.word	0x080188ae

0800ecc0 <__sfputc_r>:
 800ecc0:	6893      	ldr	r3, [r2, #8]
 800ecc2:	3b01      	subs	r3, #1
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	b410      	push	{r4}
 800ecc8:	6093      	str	r3, [r2, #8]
 800ecca:	da08      	bge.n	800ecde <__sfputc_r+0x1e>
 800eccc:	6994      	ldr	r4, [r2, #24]
 800ecce:	42a3      	cmp	r3, r4
 800ecd0:	db01      	blt.n	800ecd6 <__sfputc_r+0x16>
 800ecd2:	290a      	cmp	r1, #10
 800ecd4:	d103      	bne.n	800ecde <__sfputc_r+0x1e>
 800ecd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecda:	f7fd bc86 	b.w	800c5ea <__swbuf_r>
 800ecde:	6813      	ldr	r3, [r2, #0]
 800ece0:	1c58      	adds	r0, r3, #1
 800ece2:	6010      	str	r0, [r2, #0]
 800ece4:	7019      	strb	r1, [r3, #0]
 800ece6:	4608      	mov	r0, r1
 800ece8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecec:	4770      	bx	lr

0800ecee <__sfputs_r>:
 800ecee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf0:	4606      	mov	r6, r0
 800ecf2:	460f      	mov	r7, r1
 800ecf4:	4614      	mov	r4, r2
 800ecf6:	18d5      	adds	r5, r2, r3
 800ecf8:	42ac      	cmp	r4, r5
 800ecfa:	d101      	bne.n	800ed00 <__sfputs_r+0x12>
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	e007      	b.n	800ed10 <__sfputs_r+0x22>
 800ed00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed04:	463a      	mov	r2, r7
 800ed06:	4630      	mov	r0, r6
 800ed08:	f7ff ffda 	bl	800ecc0 <__sfputc_r>
 800ed0c:	1c43      	adds	r3, r0, #1
 800ed0e:	d1f3      	bne.n	800ecf8 <__sfputs_r+0xa>
 800ed10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed14 <_vfiprintf_r>:
 800ed14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed18:	460d      	mov	r5, r1
 800ed1a:	b09d      	sub	sp, #116	; 0x74
 800ed1c:	4614      	mov	r4, r2
 800ed1e:	4698      	mov	r8, r3
 800ed20:	4606      	mov	r6, r0
 800ed22:	b118      	cbz	r0, 800ed2c <_vfiprintf_r+0x18>
 800ed24:	6a03      	ldr	r3, [r0, #32]
 800ed26:	b90b      	cbnz	r3, 800ed2c <_vfiprintf_r+0x18>
 800ed28:	f7fd fa98 	bl	800c25c <__sinit>
 800ed2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed2e:	07d9      	lsls	r1, r3, #31
 800ed30:	d405      	bmi.n	800ed3e <_vfiprintf_r+0x2a>
 800ed32:	89ab      	ldrh	r3, [r5, #12]
 800ed34:	059a      	lsls	r2, r3, #22
 800ed36:	d402      	bmi.n	800ed3e <_vfiprintf_r+0x2a>
 800ed38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed3a:	f7fd fd8e 	bl	800c85a <__retarget_lock_acquire_recursive>
 800ed3e:	89ab      	ldrh	r3, [r5, #12]
 800ed40:	071b      	lsls	r3, r3, #28
 800ed42:	d501      	bpl.n	800ed48 <_vfiprintf_r+0x34>
 800ed44:	692b      	ldr	r3, [r5, #16]
 800ed46:	b99b      	cbnz	r3, 800ed70 <_vfiprintf_r+0x5c>
 800ed48:	4629      	mov	r1, r5
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	f7fd fc8a 	bl	800c664 <__swsetup_r>
 800ed50:	b170      	cbz	r0, 800ed70 <_vfiprintf_r+0x5c>
 800ed52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed54:	07dc      	lsls	r4, r3, #31
 800ed56:	d504      	bpl.n	800ed62 <_vfiprintf_r+0x4e>
 800ed58:	f04f 30ff 	mov.w	r0, #4294967295
 800ed5c:	b01d      	add	sp, #116	; 0x74
 800ed5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed62:	89ab      	ldrh	r3, [r5, #12]
 800ed64:	0598      	lsls	r0, r3, #22
 800ed66:	d4f7      	bmi.n	800ed58 <_vfiprintf_r+0x44>
 800ed68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed6a:	f7fd fd77 	bl	800c85c <__retarget_lock_release_recursive>
 800ed6e:	e7f3      	b.n	800ed58 <_vfiprintf_r+0x44>
 800ed70:	2300      	movs	r3, #0
 800ed72:	9309      	str	r3, [sp, #36]	; 0x24
 800ed74:	2320      	movs	r3, #32
 800ed76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed7e:	2330      	movs	r3, #48	; 0x30
 800ed80:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ef34 <_vfiprintf_r+0x220>
 800ed84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed88:	f04f 0901 	mov.w	r9, #1
 800ed8c:	4623      	mov	r3, r4
 800ed8e:	469a      	mov	sl, r3
 800ed90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed94:	b10a      	cbz	r2, 800ed9a <_vfiprintf_r+0x86>
 800ed96:	2a25      	cmp	r2, #37	; 0x25
 800ed98:	d1f9      	bne.n	800ed8e <_vfiprintf_r+0x7a>
 800ed9a:	ebba 0b04 	subs.w	fp, sl, r4
 800ed9e:	d00b      	beq.n	800edb8 <_vfiprintf_r+0xa4>
 800eda0:	465b      	mov	r3, fp
 800eda2:	4622      	mov	r2, r4
 800eda4:	4629      	mov	r1, r5
 800eda6:	4630      	mov	r0, r6
 800eda8:	f7ff ffa1 	bl	800ecee <__sfputs_r>
 800edac:	3001      	adds	r0, #1
 800edae:	f000 80a9 	beq.w	800ef04 <_vfiprintf_r+0x1f0>
 800edb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edb4:	445a      	add	r2, fp
 800edb6:	9209      	str	r2, [sp, #36]	; 0x24
 800edb8:	f89a 3000 	ldrb.w	r3, [sl]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f000 80a1 	beq.w	800ef04 <_vfiprintf_r+0x1f0>
 800edc2:	2300      	movs	r3, #0
 800edc4:	f04f 32ff 	mov.w	r2, #4294967295
 800edc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edcc:	f10a 0a01 	add.w	sl, sl, #1
 800edd0:	9304      	str	r3, [sp, #16]
 800edd2:	9307      	str	r3, [sp, #28]
 800edd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800edd8:	931a      	str	r3, [sp, #104]	; 0x68
 800edda:	4654      	mov	r4, sl
 800eddc:	2205      	movs	r2, #5
 800edde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ede2:	4854      	ldr	r0, [pc, #336]	; (800ef34 <_vfiprintf_r+0x220>)
 800ede4:	f7f1 fa3c 	bl	8000260 <memchr>
 800ede8:	9a04      	ldr	r2, [sp, #16]
 800edea:	b9d8      	cbnz	r0, 800ee24 <_vfiprintf_r+0x110>
 800edec:	06d1      	lsls	r1, r2, #27
 800edee:	bf44      	itt	mi
 800edf0:	2320      	movmi	r3, #32
 800edf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edf6:	0713      	lsls	r3, r2, #28
 800edf8:	bf44      	itt	mi
 800edfa:	232b      	movmi	r3, #43	; 0x2b
 800edfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee00:	f89a 3000 	ldrb.w	r3, [sl]
 800ee04:	2b2a      	cmp	r3, #42	; 0x2a
 800ee06:	d015      	beq.n	800ee34 <_vfiprintf_r+0x120>
 800ee08:	9a07      	ldr	r2, [sp, #28]
 800ee0a:	4654      	mov	r4, sl
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	f04f 0c0a 	mov.w	ip, #10
 800ee12:	4621      	mov	r1, r4
 800ee14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee18:	3b30      	subs	r3, #48	; 0x30
 800ee1a:	2b09      	cmp	r3, #9
 800ee1c:	d94d      	bls.n	800eeba <_vfiprintf_r+0x1a6>
 800ee1e:	b1b0      	cbz	r0, 800ee4e <_vfiprintf_r+0x13a>
 800ee20:	9207      	str	r2, [sp, #28]
 800ee22:	e014      	b.n	800ee4e <_vfiprintf_r+0x13a>
 800ee24:	eba0 0308 	sub.w	r3, r0, r8
 800ee28:	fa09 f303 	lsl.w	r3, r9, r3
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	9304      	str	r3, [sp, #16]
 800ee30:	46a2      	mov	sl, r4
 800ee32:	e7d2      	b.n	800edda <_vfiprintf_r+0xc6>
 800ee34:	9b03      	ldr	r3, [sp, #12]
 800ee36:	1d19      	adds	r1, r3, #4
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	9103      	str	r1, [sp, #12]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	bfbb      	ittet	lt
 800ee40:	425b      	neglt	r3, r3
 800ee42:	f042 0202 	orrlt.w	r2, r2, #2
 800ee46:	9307      	strge	r3, [sp, #28]
 800ee48:	9307      	strlt	r3, [sp, #28]
 800ee4a:	bfb8      	it	lt
 800ee4c:	9204      	strlt	r2, [sp, #16]
 800ee4e:	7823      	ldrb	r3, [r4, #0]
 800ee50:	2b2e      	cmp	r3, #46	; 0x2e
 800ee52:	d10c      	bne.n	800ee6e <_vfiprintf_r+0x15a>
 800ee54:	7863      	ldrb	r3, [r4, #1]
 800ee56:	2b2a      	cmp	r3, #42	; 0x2a
 800ee58:	d134      	bne.n	800eec4 <_vfiprintf_r+0x1b0>
 800ee5a:	9b03      	ldr	r3, [sp, #12]
 800ee5c:	1d1a      	adds	r2, r3, #4
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	9203      	str	r2, [sp, #12]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	bfb8      	it	lt
 800ee66:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee6a:	3402      	adds	r4, #2
 800ee6c:	9305      	str	r3, [sp, #20]
 800ee6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ef44 <_vfiprintf_r+0x230>
 800ee72:	7821      	ldrb	r1, [r4, #0]
 800ee74:	2203      	movs	r2, #3
 800ee76:	4650      	mov	r0, sl
 800ee78:	f7f1 f9f2 	bl	8000260 <memchr>
 800ee7c:	b138      	cbz	r0, 800ee8e <_vfiprintf_r+0x17a>
 800ee7e:	9b04      	ldr	r3, [sp, #16]
 800ee80:	eba0 000a 	sub.w	r0, r0, sl
 800ee84:	2240      	movs	r2, #64	; 0x40
 800ee86:	4082      	lsls	r2, r0
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	3401      	adds	r4, #1
 800ee8c:	9304      	str	r3, [sp, #16]
 800ee8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee92:	4829      	ldr	r0, [pc, #164]	; (800ef38 <_vfiprintf_r+0x224>)
 800ee94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee98:	2206      	movs	r2, #6
 800ee9a:	f7f1 f9e1 	bl	8000260 <memchr>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	d03f      	beq.n	800ef22 <_vfiprintf_r+0x20e>
 800eea2:	4b26      	ldr	r3, [pc, #152]	; (800ef3c <_vfiprintf_r+0x228>)
 800eea4:	bb1b      	cbnz	r3, 800eeee <_vfiprintf_r+0x1da>
 800eea6:	9b03      	ldr	r3, [sp, #12]
 800eea8:	3307      	adds	r3, #7
 800eeaa:	f023 0307 	bic.w	r3, r3, #7
 800eeae:	3308      	adds	r3, #8
 800eeb0:	9303      	str	r3, [sp, #12]
 800eeb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeb4:	443b      	add	r3, r7
 800eeb6:	9309      	str	r3, [sp, #36]	; 0x24
 800eeb8:	e768      	b.n	800ed8c <_vfiprintf_r+0x78>
 800eeba:	fb0c 3202 	mla	r2, ip, r2, r3
 800eebe:	460c      	mov	r4, r1
 800eec0:	2001      	movs	r0, #1
 800eec2:	e7a6      	b.n	800ee12 <_vfiprintf_r+0xfe>
 800eec4:	2300      	movs	r3, #0
 800eec6:	3401      	adds	r4, #1
 800eec8:	9305      	str	r3, [sp, #20]
 800eeca:	4619      	mov	r1, r3
 800eecc:	f04f 0c0a 	mov.w	ip, #10
 800eed0:	4620      	mov	r0, r4
 800eed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eed6:	3a30      	subs	r2, #48	; 0x30
 800eed8:	2a09      	cmp	r2, #9
 800eeda:	d903      	bls.n	800eee4 <_vfiprintf_r+0x1d0>
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d0c6      	beq.n	800ee6e <_vfiprintf_r+0x15a>
 800eee0:	9105      	str	r1, [sp, #20]
 800eee2:	e7c4      	b.n	800ee6e <_vfiprintf_r+0x15a>
 800eee4:	fb0c 2101 	mla	r1, ip, r1, r2
 800eee8:	4604      	mov	r4, r0
 800eeea:	2301      	movs	r3, #1
 800eeec:	e7f0      	b.n	800eed0 <_vfiprintf_r+0x1bc>
 800eeee:	ab03      	add	r3, sp, #12
 800eef0:	9300      	str	r3, [sp, #0]
 800eef2:	462a      	mov	r2, r5
 800eef4:	4b12      	ldr	r3, [pc, #72]	; (800ef40 <_vfiprintf_r+0x22c>)
 800eef6:	a904      	add	r1, sp, #16
 800eef8:	4630      	mov	r0, r6
 800eefa:	f7fc fb75 	bl	800b5e8 <_printf_float>
 800eefe:	4607      	mov	r7, r0
 800ef00:	1c78      	adds	r0, r7, #1
 800ef02:	d1d6      	bne.n	800eeb2 <_vfiprintf_r+0x19e>
 800ef04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef06:	07d9      	lsls	r1, r3, #31
 800ef08:	d405      	bmi.n	800ef16 <_vfiprintf_r+0x202>
 800ef0a:	89ab      	ldrh	r3, [r5, #12]
 800ef0c:	059a      	lsls	r2, r3, #22
 800ef0e:	d402      	bmi.n	800ef16 <_vfiprintf_r+0x202>
 800ef10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef12:	f7fd fca3 	bl	800c85c <__retarget_lock_release_recursive>
 800ef16:	89ab      	ldrh	r3, [r5, #12]
 800ef18:	065b      	lsls	r3, r3, #25
 800ef1a:	f53f af1d 	bmi.w	800ed58 <_vfiprintf_r+0x44>
 800ef1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef20:	e71c      	b.n	800ed5c <_vfiprintf_r+0x48>
 800ef22:	ab03      	add	r3, sp, #12
 800ef24:	9300      	str	r3, [sp, #0]
 800ef26:	462a      	mov	r2, r5
 800ef28:	4b05      	ldr	r3, [pc, #20]	; (800ef40 <_vfiprintf_r+0x22c>)
 800ef2a:	a904      	add	r1, sp, #16
 800ef2c:	4630      	mov	r0, r6
 800ef2e:	f7fc fde3 	bl	800baf8 <_printf_i>
 800ef32:	e7e4      	b.n	800eefe <_vfiprintf_r+0x1ea>
 800ef34:	080188a8 	.word	0x080188a8
 800ef38:	080188b2 	.word	0x080188b2
 800ef3c:	0800b5e9 	.word	0x0800b5e9
 800ef40:	0800ecef 	.word	0x0800ecef
 800ef44:	080188ae 	.word	0x080188ae

0800ef48 <__svfiscanf_r>:
 800ef48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef4c:	461d      	mov	r5, r3
 800ef4e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ef50:	07df      	lsls	r7, r3, #31
 800ef52:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ef56:	4606      	mov	r6, r0
 800ef58:	460c      	mov	r4, r1
 800ef5a:	4692      	mov	sl, r2
 800ef5c:	d405      	bmi.n	800ef6a <__svfiscanf_r+0x22>
 800ef5e:	898b      	ldrh	r3, [r1, #12]
 800ef60:	0598      	lsls	r0, r3, #22
 800ef62:	d402      	bmi.n	800ef6a <__svfiscanf_r+0x22>
 800ef64:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800ef66:	f7fd fc78 	bl	800c85a <__retarget_lock_acquire_recursive>
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800ef70:	4baa      	ldr	r3, [pc, #680]	; (800f21c <__svfiscanf_r+0x2d4>)
 800ef72:	93a0      	str	r3, [sp, #640]	; 0x280
 800ef74:	f10d 0804 	add.w	r8, sp, #4
 800ef78:	4ba9      	ldr	r3, [pc, #676]	; (800f220 <__svfiscanf_r+0x2d8>)
 800ef7a:	4faa      	ldr	r7, [pc, #680]	; (800f224 <__svfiscanf_r+0x2dc>)
 800ef7c:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800f228 <__svfiscanf_r+0x2e0>
 800ef80:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ef84:	93a1      	str	r3, [sp, #644]	; 0x284
 800ef86:	9500      	str	r5, [sp, #0]
 800ef88:	f89a 3000 	ldrb.w	r3, [sl]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f000 8170 	beq.w	800f272 <__svfiscanf_r+0x32a>
 800ef92:	5cf9      	ldrb	r1, [r7, r3]
 800ef94:	f011 0108 	ands.w	r1, r1, #8
 800ef98:	f10a 0501 	add.w	r5, sl, #1
 800ef9c:	d019      	beq.n	800efd2 <__svfiscanf_r+0x8a>
 800ef9e:	6863      	ldr	r3, [r4, #4]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	dd0f      	ble.n	800efc4 <__svfiscanf_r+0x7c>
 800efa4:	6823      	ldr	r3, [r4, #0]
 800efa6:	781a      	ldrb	r2, [r3, #0]
 800efa8:	5cba      	ldrb	r2, [r7, r2]
 800efaa:	0711      	lsls	r1, r2, #28
 800efac:	d401      	bmi.n	800efb2 <__svfiscanf_r+0x6a>
 800efae:	46aa      	mov	sl, r5
 800efb0:	e7ea      	b.n	800ef88 <__svfiscanf_r+0x40>
 800efb2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800efb4:	3201      	adds	r2, #1
 800efb6:	9245      	str	r2, [sp, #276]	; 0x114
 800efb8:	6862      	ldr	r2, [r4, #4]
 800efba:	3301      	adds	r3, #1
 800efbc:	3a01      	subs	r2, #1
 800efbe:	6062      	str	r2, [r4, #4]
 800efc0:	6023      	str	r3, [r4, #0]
 800efc2:	e7ec      	b.n	800ef9e <__svfiscanf_r+0x56>
 800efc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800efc6:	4621      	mov	r1, r4
 800efc8:	4630      	mov	r0, r6
 800efca:	4798      	blx	r3
 800efcc:	2800      	cmp	r0, #0
 800efce:	d0e9      	beq.n	800efa4 <__svfiscanf_r+0x5c>
 800efd0:	e7ed      	b.n	800efae <__svfiscanf_r+0x66>
 800efd2:	2b25      	cmp	r3, #37	; 0x25
 800efd4:	d012      	beq.n	800effc <__svfiscanf_r+0xb4>
 800efd6:	469a      	mov	sl, r3
 800efd8:	6863      	ldr	r3, [r4, #4]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f340 8093 	ble.w	800f106 <__svfiscanf_r+0x1be>
 800efe0:	6822      	ldr	r2, [r4, #0]
 800efe2:	7813      	ldrb	r3, [r2, #0]
 800efe4:	4553      	cmp	r3, sl
 800efe6:	f040 8144 	bne.w	800f272 <__svfiscanf_r+0x32a>
 800efea:	6863      	ldr	r3, [r4, #4]
 800efec:	3b01      	subs	r3, #1
 800efee:	6063      	str	r3, [r4, #4]
 800eff0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800eff2:	3201      	adds	r2, #1
 800eff4:	3301      	adds	r3, #1
 800eff6:	6022      	str	r2, [r4, #0]
 800eff8:	9345      	str	r3, [sp, #276]	; 0x114
 800effa:	e7d8      	b.n	800efae <__svfiscanf_r+0x66>
 800effc:	9141      	str	r1, [sp, #260]	; 0x104
 800effe:	9143      	str	r1, [sp, #268]	; 0x10c
 800f000:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800f004:	2b2a      	cmp	r3, #42	; 0x2a
 800f006:	bf02      	ittt	eq
 800f008:	2310      	moveq	r3, #16
 800f00a:	9341      	streq	r3, [sp, #260]	; 0x104
 800f00c:	f10a 0502 	addeq.w	r5, sl, #2
 800f010:	220a      	movs	r2, #10
 800f012:	46aa      	mov	sl, r5
 800f014:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f018:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f01c:	2b09      	cmp	r3, #9
 800f01e:	d91d      	bls.n	800f05c <__svfiscanf_r+0x114>
 800f020:	4881      	ldr	r0, [pc, #516]	; (800f228 <__svfiscanf_r+0x2e0>)
 800f022:	2203      	movs	r2, #3
 800f024:	f7f1 f91c 	bl	8000260 <memchr>
 800f028:	b138      	cbz	r0, 800f03a <__svfiscanf_r+0xf2>
 800f02a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f02c:	eba0 0009 	sub.w	r0, r0, r9
 800f030:	2301      	movs	r3, #1
 800f032:	4083      	lsls	r3, r0
 800f034:	4313      	orrs	r3, r2
 800f036:	9341      	str	r3, [sp, #260]	; 0x104
 800f038:	4655      	mov	r5, sl
 800f03a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f03e:	2b78      	cmp	r3, #120	; 0x78
 800f040:	d807      	bhi.n	800f052 <__svfiscanf_r+0x10a>
 800f042:	2b57      	cmp	r3, #87	; 0x57
 800f044:	d811      	bhi.n	800f06a <__svfiscanf_r+0x122>
 800f046:	2b25      	cmp	r3, #37	; 0x25
 800f048:	d0c5      	beq.n	800efd6 <__svfiscanf_r+0x8e>
 800f04a:	d857      	bhi.n	800f0fc <__svfiscanf_r+0x1b4>
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	f000 80c6 	beq.w	800f1de <__svfiscanf_r+0x296>
 800f052:	2303      	movs	r3, #3
 800f054:	9347      	str	r3, [sp, #284]	; 0x11c
 800f056:	230a      	movs	r3, #10
 800f058:	9342      	str	r3, [sp, #264]	; 0x108
 800f05a:	e07f      	b.n	800f15c <__svfiscanf_r+0x214>
 800f05c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f05e:	fb02 1103 	mla	r1, r2, r3, r1
 800f062:	3930      	subs	r1, #48	; 0x30
 800f064:	9143      	str	r1, [sp, #268]	; 0x10c
 800f066:	4655      	mov	r5, sl
 800f068:	e7d3      	b.n	800f012 <__svfiscanf_r+0xca>
 800f06a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f06e:	2a20      	cmp	r2, #32
 800f070:	d8ef      	bhi.n	800f052 <__svfiscanf_r+0x10a>
 800f072:	a101      	add	r1, pc, #4	; (adr r1, 800f078 <__svfiscanf_r+0x130>)
 800f074:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f078:	0800f13f 	.word	0x0800f13f
 800f07c:	0800f053 	.word	0x0800f053
 800f080:	0800f053 	.word	0x0800f053
 800f084:	0800f19d 	.word	0x0800f19d
 800f088:	0800f053 	.word	0x0800f053
 800f08c:	0800f053 	.word	0x0800f053
 800f090:	0800f053 	.word	0x0800f053
 800f094:	0800f053 	.word	0x0800f053
 800f098:	0800f053 	.word	0x0800f053
 800f09c:	0800f053 	.word	0x0800f053
 800f0a0:	0800f053 	.word	0x0800f053
 800f0a4:	0800f1b3 	.word	0x0800f1b3
 800f0a8:	0800f199 	.word	0x0800f199
 800f0ac:	0800f103 	.word	0x0800f103
 800f0b0:	0800f103 	.word	0x0800f103
 800f0b4:	0800f103 	.word	0x0800f103
 800f0b8:	0800f053 	.word	0x0800f053
 800f0bc:	0800f155 	.word	0x0800f155
 800f0c0:	0800f053 	.word	0x0800f053
 800f0c4:	0800f053 	.word	0x0800f053
 800f0c8:	0800f053 	.word	0x0800f053
 800f0cc:	0800f053 	.word	0x0800f053
 800f0d0:	0800f1c3 	.word	0x0800f1c3
 800f0d4:	0800f191 	.word	0x0800f191
 800f0d8:	0800f137 	.word	0x0800f137
 800f0dc:	0800f053 	.word	0x0800f053
 800f0e0:	0800f053 	.word	0x0800f053
 800f0e4:	0800f1bf 	.word	0x0800f1bf
 800f0e8:	0800f053 	.word	0x0800f053
 800f0ec:	0800f199 	.word	0x0800f199
 800f0f0:	0800f053 	.word	0x0800f053
 800f0f4:	0800f053 	.word	0x0800f053
 800f0f8:	0800f13f 	.word	0x0800f13f
 800f0fc:	3b45      	subs	r3, #69	; 0x45
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	d8a7      	bhi.n	800f052 <__svfiscanf_r+0x10a>
 800f102:	2305      	movs	r3, #5
 800f104:	e029      	b.n	800f15a <__svfiscanf_r+0x212>
 800f106:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f108:	4621      	mov	r1, r4
 800f10a:	4630      	mov	r0, r6
 800f10c:	4798      	blx	r3
 800f10e:	2800      	cmp	r0, #0
 800f110:	f43f af66 	beq.w	800efe0 <__svfiscanf_r+0x98>
 800f114:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f116:	07da      	lsls	r2, r3, #31
 800f118:	f140 80a3 	bpl.w	800f262 <__svfiscanf_r+0x31a>
 800f11c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f11e:	2800      	cmp	r0, #0
 800f120:	d066      	beq.n	800f1f0 <__svfiscanf_r+0x2a8>
 800f122:	89a3      	ldrh	r3, [r4, #12]
 800f124:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f128:	bf18      	it	ne
 800f12a:	f04f 30ff 	movne.w	r0, #4294967295
 800f12e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f136:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f138:	f042 0220 	orr.w	r2, r2, #32
 800f13c:	9241      	str	r2, [sp, #260]	; 0x104
 800f13e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f144:	9241      	str	r2, [sp, #260]	; 0x104
 800f146:	2210      	movs	r2, #16
 800f148:	2b6f      	cmp	r3, #111	; 0x6f
 800f14a:	9242      	str	r2, [sp, #264]	; 0x108
 800f14c:	bf34      	ite	cc
 800f14e:	2303      	movcc	r3, #3
 800f150:	2304      	movcs	r3, #4
 800f152:	e002      	b.n	800f15a <__svfiscanf_r+0x212>
 800f154:	2300      	movs	r3, #0
 800f156:	9342      	str	r3, [sp, #264]	; 0x108
 800f158:	2303      	movs	r3, #3
 800f15a:	9347      	str	r3, [sp, #284]	; 0x11c
 800f15c:	6863      	ldr	r3, [r4, #4]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	dd49      	ble.n	800f1f6 <__svfiscanf_r+0x2ae>
 800f162:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f164:	065b      	lsls	r3, r3, #25
 800f166:	d404      	bmi.n	800f172 <__svfiscanf_r+0x22a>
 800f168:	6823      	ldr	r3, [r4, #0]
 800f16a:	781a      	ldrb	r2, [r3, #0]
 800f16c:	5cba      	ldrb	r2, [r7, r2]
 800f16e:	0710      	lsls	r0, r2, #28
 800f170:	d448      	bmi.n	800f204 <__svfiscanf_r+0x2bc>
 800f172:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f174:	2b02      	cmp	r3, #2
 800f176:	dc60      	bgt.n	800f23a <__svfiscanf_r+0x2f2>
 800f178:	466b      	mov	r3, sp
 800f17a:	4622      	mov	r2, r4
 800f17c:	a941      	add	r1, sp, #260	; 0x104
 800f17e:	4630      	mov	r0, r6
 800f180:	f000 f898 	bl	800f2b4 <_scanf_chars>
 800f184:	2801      	cmp	r0, #1
 800f186:	d074      	beq.n	800f272 <__svfiscanf_r+0x32a>
 800f188:	2802      	cmp	r0, #2
 800f18a:	f47f af10 	bne.w	800efae <__svfiscanf_r+0x66>
 800f18e:	e7c1      	b.n	800f114 <__svfiscanf_r+0x1cc>
 800f190:	2308      	movs	r3, #8
 800f192:	9342      	str	r3, [sp, #264]	; 0x108
 800f194:	2304      	movs	r3, #4
 800f196:	e7e0      	b.n	800f15a <__svfiscanf_r+0x212>
 800f198:	220a      	movs	r2, #10
 800f19a:	e7d5      	b.n	800f148 <__svfiscanf_r+0x200>
 800f19c:	4629      	mov	r1, r5
 800f19e:	4640      	mov	r0, r8
 800f1a0:	f000 fb6c 	bl	800f87c <__sccl>
 800f1a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1aa:	9341      	str	r3, [sp, #260]	; 0x104
 800f1ac:	4605      	mov	r5, r0
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	e7d3      	b.n	800f15a <__svfiscanf_r+0x212>
 800f1b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1b8:	9341      	str	r3, [sp, #260]	; 0x104
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	e7cd      	b.n	800f15a <__svfiscanf_r+0x212>
 800f1be:	2302      	movs	r3, #2
 800f1c0:	e7cb      	b.n	800f15a <__svfiscanf_r+0x212>
 800f1c2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f1c4:	06c3      	lsls	r3, r0, #27
 800f1c6:	f53f aef2 	bmi.w	800efae <__svfiscanf_r+0x66>
 800f1ca:	9b00      	ldr	r3, [sp, #0]
 800f1cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f1ce:	1d19      	adds	r1, r3, #4
 800f1d0:	9100      	str	r1, [sp, #0]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	07c0      	lsls	r0, r0, #31
 800f1d6:	bf4c      	ite	mi
 800f1d8:	801a      	strhmi	r2, [r3, #0]
 800f1da:	601a      	strpl	r2, [r3, #0]
 800f1dc:	e6e7      	b.n	800efae <__svfiscanf_r+0x66>
 800f1de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1e0:	07d8      	lsls	r0, r3, #31
 800f1e2:	d405      	bmi.n	800f1f0 <__svfiscanf_r+0x2a8>
 800f1e4:	89a3      	ldrh	r3, [r4, #12]
 800f1e6:	0599      	lsls	r1, r3, #22
 800f1e8:	d402      	bmi.n	800f1f0 <__svfiscanf_r+0x2a8>
 800f1ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1ec:	f7fd fb36 	bl	800c85c <__retarget_lock_release_recursive>
 800f1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f4:	e79b      	b.n	800f12e <__svfiscanf_r+0x1e6>
 800f1f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	4798      	blx	r3
 800f1fe:	2800      	cmp	r0, #0
 800f200:	d0af      	beq.n	800f162 <__svfiscanf_r+0x21a>
 800f202:	e787      	b.n	800f114 <__svfiscanf_r+0x1cc>
 800f204:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f206:	3201      	adds	r2, #1
 800f208:	9245      	str	r2, [sp, #276]	; 0x114
 800f20a:	6862      	ldr	r2, [r4, #4]
 800f20c:	3a01      	subs	r2, #1
 800f20e:	2a00      	cmp	r2, #0
 800f210:	6062      	str	r2, [r4, #4]
 800f212:	dd0b      	ble.n	800f22c <__svfiscanf_r+0x2e4>
 800f214:	3301      	adds	r3, #1
 800f216:	6023      	str	r3, [r4, #0]
 800f218:	e7a6      	b.n	800f168 <__svfiscanf_r+0x220>
 800f21a:	bf00      	nop
 800f21c:	0800f963 	.word	0x0800f963
 800f220:	0800f78d 	.word	0x0800f78d
 800f224:	08018539 	.word	0x08018539
 800f228:	080188ae 	.word	0x080188ae
 800f22c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f22e:	4621      	mov	r1, r4
 800f230:	4630      	mov	r0, r6
 800f232:	4798      	blx	r3
 800f234:	2800      	cmp	r0, #0
 800f236:	d097      	beq.n	800f168 <__svfiscanf_r+0x220>
 800f238:	e76c      	b.n	800f114 <__svfiscanf_r+0x1cc>
 800f23a:	2b04      	cmp	r3, #4
 800f23c:	dc06      	bgt.n	800f24c <__svfiscanf_r+0x304>
 800f23e:	466b      	mov	r3, sp
 800f240:	4622      	mov	r2, r4
 800f242:	a941      	add	r1, sp, #260	; 0x104
 800f244:	4630      	mov	r0, r6
 800f246:	f000 f88f 	bl	800f368 <_scanf_i>
 800f24a:	e79b      	b.n	800f184 <__svfiscanf_r+0x23c>
 800f24c:	4b0e      	ldr	r3, [pc, #56]	; (800f288 <__svfiscanf_r+0x340>)
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f43f aead 	beq.w	800efae <__svfiscanf_r+0x66>
 800f254:	466b      	mov	r3, sp
 800f256:	4622      	mov	r2, r4
 800f258:	a941      	add	r1, sp, #260	; 0x104
 800f25a:	4630      	mov	r0, r6
 800f25c:	f7fc fd6e 	bl	800bd3c <_scanf_float>
 800f260:	e790      	b.n	800f184 <__svfiscanf_r+0x23c>
 800f262:	89a3      	ldrh	r3, [r4, #12]
 800f264:	0599      	lsls	r1, r3, #22
 800f266:	f53f af59 	bmi.w	800f11c <__svfiscanf_r+0x1d4>
 800f26a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f26c:	f7fd faf6 	bl	800c85c <__retarget_lock_release_recursive>
 800f270:	e754      	b.n	800f11c <__svfiscanf_r+0x1d4>
 800f272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f274:	07da      	lsls	r2, r3, #31
 800f276:	d405      	bmi.n	800f284 <__svfiscanf_r+0x33c>
 800f278:	89a3      	ldrh	r3, [r4, #12]
 800f27a:	059b      	lsls	r3, r3, #22
 800f27c:	d402      	bmi.n	800f284 <__svfiscanf_r+0x33c>
 800f27e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f280:	f7fd faec 	bl	800c85c <__retarget_lock_release_recursive>
 800f284:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f286:	e752      	b.n	800f12e <__svfiscanf_r+0x1e6>
 800f288:	0800bd3d 	.word	0x0800bd3d

0800f28c <_vfiscanf_r>:
 800f28c:	b530      	push	{r4, r5, lr}
 800f28e:	4604      	mov	r4, r0
 800f290:	b085      	sub	sp, #20
 800f292:	b148      	cbz	r0, 800f2a8 <_vfiscanf_r+0x1c>
 800f294:	6a05      	ldr	r5, [r0, #32]
 800f296:	b93d      	cbnz	r5, 800f2a8 <_vfiscanf_r+0x1c>
 800f298:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f29c:	9101      	str	r1, [sp, #4]
 800f29e:	f7fc ffdd 	bl	800c25c <__sinit>
 800f2a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f2a6:	9901      	ldr	r1, [sp, #4]
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	b005      	add	sp, #20
 800f2ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f2b0:	f7ff be4a 	b.w	800ef48 <__svfiscanf_r>

0800f2b4 <_scanf_chars>:
 800f2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2b8:	4615      	mov	r5, r2
 800f2ba:	688a      	ldr	r2, [r1, #8]
 800f2bc:	4680      	mov	r8, r0
 800f2be:	460c      	mov	r4, r1
 800f2c0:	b932      	cbnz	r2, 800f2d0 <_scanf_chars+0x1c>
 800f2c2:	698a      	ldr	r2, [r1, #24]
 800f2c4:	2a00      	cmp	r2, #0
 800f2c6:	bf0c      	ite	eq
 800f2c8:	2201      	moveq	r2, #1
 800f2ca:	f04f 32ff 	movne.w	r2, #4294967295
 800f2ce:	608a      	str	r2, [r1, #8]
 800f2d0:	6822      	ldr	r2, [r4, #0]
 800f2d2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f364 <_scanf_chars+0xb0>
 800f2d6:	06d1      	lsls	r1, r2, #27
 800f2d8:	bf5f      	itttt	pl
 800f2da:	681a      	ldrpl	r2, [r3, #0]
 800f2dc:	1d11      	addpl	r1, r2, #4
 800f2de:	6019      	strpl	r1, [r3, #0]
 800f2e0:	6816      	ldrpl	r6, [r2, #0]
 800f2e2:	2700      	movs	r7, #0
 800f2e4:	69a0      	ldr	r0, [r4, #24]
 800f2e6:	b188      	cbz	r0, 800f30c <_scanf_chars+0x58>
 800f2e8:	2801      	cmp	r0, #1
 800f2ea:	d107      	bne.n	800f2fc <_scanf_chars+0x48>
 800f2ec:	682a      	ldr	r2, [r5, #0]
 800f2ee:	7811      	ldrb	r1, [r2, #0]
 800f2f0:	6962      	ldr	r2, [r4, #20]
 800f2f2:	5c52      	ldrb	r2, [r2, r1]
 800f2f4:	b952      	cbnz	r2, 800f30c <_scanf_chars+0x58>
 800f2f6:	2f00      	cmp	r7, #0
 800f2f8:	d031      	beq.n	800f35e <_scanf_chars+0xaa>
 800f2fa:	e022      	b.n	800f342 <_scanf_chars+0x8e>
 800f2fc:	2802      	cmp	r0, #2
 800f2fe:	d120      	bne.n	800f342 <_scanf_chars+0x8e>
 800f300:	682b      	ldr	r3, [r5, #0]
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f308:	071b      	lsls	r3, r3, #28
 800f30a:	d41a      	bmi.n	800f342 <_scanf_chars+0x8e>
 800f30c:	6823      	ldr	r3, [r4, #0]
 800f30e:	06da      	lsls	r2, r3, #27
 800f310:	bf5e      	ittt	pl
 800f312:	682b      	ldrpl	r3, [r5, #0]
 800f314:	781b      	ldrbpl	r3, [r3, #0]
 800f316:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f31a:	682a      	ldr	r2, [r5, #0]
 800f31c:	686b      	ldr	r3, [r5, #4]
 800f31e:	3201      	adds	r2, #1
 800f320:	602a      	str	r2, [r5, #0]
 800f322:	68a2      	ldr	r2, [r4, #8]
 800f324:	3b01      	subs	r3, #1
 800f326:	3a01      	subs	r2, #1
 800f328:	606b      	str	r3, [r5, #4]
 800f32a:	3701      	adds	r7, #1
 800f32c:	60a2      	str	r2, [r4, #8]
 800f32e:	b142      	cbz	r2, 800f342 <_scanf_chars+0x8e>
 800f330:	2b00      	cmp	r3, #0
 800f332:	dcd7      	bgt.n	800f2e4 <_scanf_chars+0x30>
 800f334:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f338:	4629      	mov	r1, r5
 800f33a:	4640      	mov	r0, r8
 800f33c:	4798      	blx	r3
 800f33e:	2800      	cmp	r0, #0
 800f340:	d0d0      	beq.n	800f2e4 <_scanf_chars+0x30>
 800f342:	6823      	ldr	r3, [r4, #0]
 800f344:	f013 0310 	ands.w	r3, r3, #16
 800f348:	d105      	bne.n	800f356 <_scanf_chars+0xa2>
 800f34a:	68e2      	ldr	r2, [r4, #12]
 800f34c:	3201      	adds	r2, #1
 800f34e:	60e2      	str	r2, [r4, #12]
 800f350:	69a2      	ldr	r2, [r4, #24]
 800f352:	b102      	cbz	r2, 800f356 <_scanf_chars+0xa2>
 800f354:	7033      	strb	r3, [r6, #0]
 800f356:	6923      	ldr	r3, [r4, #16]
 800f358:	443b      	add	r3, r7
 800f35a:	6123      	str	r3, [r4, #16]
 800f35c:	2000      	movs	r0, #0
 800f35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f362:	bf00      	nop
 800f364:	08018539 	.word	0x08018539

0800f368 <_scanf_i>:
 800f368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f36c:	4698      	mov	r8, r3
 800f36e:	4b74      	ldr	r3, [pc, #464]	; (800f540 <_scanf_i+0x1d8>)
 800f370:	460c      	mov	r4, r1
 800f372:	4682      	mov	sl, r0
 800f374:	4616      	mov	r6, r2
 800f376:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f37a:	b087      	sub	sp, #28
 800f37c:	ab03      	add	r3, sp, #12
 800f37e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f382:	4b70      	ldr	r3, [pc, #448]	; (800f544 <_scanf_i+0x1dc>)
 800f384:	69a1      	ldr	r1, [r4, #24]
 800f386:	4a70      	ldr	r2, [pc, #448]	; (800f548 <_scanf_i+0x1e0>)
 800f388:	2903      	cmp	r1, #3
 800f38a:	bf18      	it	ne
 800f38c:	461a      	movne	r2, r3
 800f38e:	68a3      	ldr	r3, [r4, #8]
 800f390:	9201      	str	r2, [sp, #4]
 800f392:	1e5a      	subs	r2, r3, #1
 800f394:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f398:	bf88      	it	hi
 800f39a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f39e:	4627      	mov	r7, r4
 800f3a0:	bf82      	ittt	hi
 800f3a2:	eb03 0905 	addhi.w	r9, r3, r5
 800f3a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f3aa:	60a3      	strhi	r3, [r4, #8]
 800f3ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f3b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f3b4:	bf98      	it	ls
 800f3b6:	f04f 0900 	movls.w	r9, #0
 800f3ba:	6023      	str	r3, [r4, #0]
 800f3bc:	463d      	mov	r5, r7
 800f3be:	f04f 0b00 	mov.w	fp, #0
 800f3c2:	6831      	ldr	r1, [r6, #0]
 800f3c4:	ab03      	add	r3, sp, #12
 800f3c6:	7809      	ldrb	r1, [r1, #0]
 800f3c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f3cc:	2202      	movs	r2, #2
 800f3ce:	f7f0 ff47 	bl	8000260 <memchr>
 800f3d2:	b328      	cbz	r0, 800f420 <_scanf_i+0xb8>
 800f3d4:	f1bb 0f01 	cmp.w	fp, #1
 800f3d8:	d159      	bne.n	800f48e <_scanf_i+0x126>
 800f3da:	6862      	ldr	r2, [r4, #4]
 800f3dc:	b92a      	cbnz	r2, 800f3ea <_scanf_i+0x82>
 800f3de:	6822      	ldr	r2, [r4, #0]
 800f3e0:	2308      	movs	r3, #8
 800f3e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3e6:	6063      	str	r3, [r4, #4]
 800f3e8:	6022      	str	r2, [r4, #0]
 800f3ea:	6822      	ldr	r2, [r4, #0]
 800f3ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f3f0:	6022      	str	r2, [r4, #0]
 800f3f2:	68a2      	ldr	r2, [r4, #8]
 800f3f4:	1e51      	subs	r1, r2, #1
 800f3f6:	60a1      	str	r1, [r4, #8]
 800f3f8:	b192      	cbz	r2, 800f420 <_scanf_i+0xb8>
 800f3fa:	6832      	ldr	r2, [r6, #0]
 800f3fc:	1c51      	adds	r1, r2, #1
 800f3fe:	6031      	str	r1, [r6, #0]
 800f400:	7812      	ldrb	r2, [r2, #0]
 800f402:	f805 2b01 	strb.w	r2, [r5], #1
 800f406:	6872      	ldr	r2, [r6, #4]
 800f408:	3a01      	subs	r2, #1
 800f40a:	2a00      	cmp	r2, #0
 800f40c:	6072      	str	r2, [r6, #4]
 800f40e:	dc07      	bgt.n	800f420 <_scanf_i+0xb8>
 800f410:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f414:	4631      	mov	r1, r6
 800f416:	4650      	mov	r0, sl
 800f418:	4790      	blx	r2
 800f41a:	2800      	cmp	r0, #0
 800f41c:	f040 8085 	bne.w	800f52a <_scanf_i+0x1c2>
 800f420:	f10b 0b01 	add.w	fp, fp, #1
 800f424:	f1bb 0f03 	cmp.w	fp, #3
 800f428:	d1cb      	bne.n	800f3c2 <_scanf_i+0x5a>
 800f42a:	6863      	ldr	r3, [r4, #4]
 800f42c:	b90b      	cbnz	r3, 800f432 <_scanf_i+0xca>
 800f42e:	230a      	movs	r3, #10
 800f430:	6063      	str	r3, [r4, #4]
 800f432:	6863      	ldr	r3, [r4, #4]
 800f434:	4945      	ldr	r1, [pc, #276]	; (800f54c <_scanf_i+0x1e4>)
 800f436:	6960      	ldr	r0, [r4, #20]
 800f438:	1ac9      	subs	r1, r1, r3
 800f43a:	f000 fa1f 	bl	800f87c <__sccl>
 800f43e:	f04f 0b00 	mov.w	fp, #0
 800f442:	68a3      	ldr	r3, [r4, #8]
 800f444:	6822      	ldr	r2, [r4, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d03d      	beq.n	800f4c6 <_scanf_i+0x15e>
 800f44a:	6831      	ldr	r1, [r6, #0]
 800f44c:	6960      	ldr	r0, [r4, #20]
 800f44e:	f891 c000 	ldrb.w	ip, [r1]
 800f452:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f456:	2800      	cmp	r0, #0
 800f458:	d035      	beq.n	800f4c6 <_scanf_i+0x15e>
 800f45a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f45e:	d124      	bne.n	800f4aa <_scanf_i+0x142>
 800f460:	0510      	lsls	r0, r2, #20
 800f462:	d522      	bpl.n	800f4aa <_scanf_i+0x142>
 800f464:	f10b 0b01 	add.w	fp, fp, #1
 800f468:	f1b9 0f00 	cmp.w	r9, #0
 800f46c:	d003      	beq.n	800f476 <_scanf_i+0x10e>
 800f46e:	3301      	adds	r3, #1
 800f470:	f109 39ff 	add.w	r9, r9, #4294967295
 800f474:	60a3      	str	r3, [r4, #8]
 800f476:	6873      	ldr	r3, [r6, #4]
 800f478:	3b01      	subs	r3, #1
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	6073      	str	r3, [r6, #4]
 800f47e:	dd1b      	ble.n	800f4b8 <_scanf_i+0x150>
 800f480:	6833      	ldr	r3, [r6, #0]
 800f482:	3301      	adds	r3, #1
 800f484:	6033      	str	r3, [r6, #0]
 800f486:	68a3      	ldr	r3, [r4, #8]
 800f488:	3b01      	subs	r3, #1
 800f48a:	60a3      	str	r3, [r4, #8]
 800f48c:	e7d9      	b.n	800f442 <_scanf_i+0xda>
 800f48e:	f1bb 0f02 	cmp.w	fp, #2
 800f492:	d1ae      	bne.n	800f3f2 <_scanf_i+0x8a>
 800f494:	6822      	ldr	r2, [r4, #0]
 800f496:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f49a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f49e:	d1bf      	bne.n	800f420 <_scanf_i+0xb8>
 800f4a0:	2310      	movs	r3, #16
 800f4a2:	6063      	str	r3, [r4, #4]
 800f4a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f4a8:	e7a2      	b.n	800f3f0 <_scanf_i+0x88>
 800f4aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f4ae:	6022      	str	r2, [r4, #0]
 800f4b0:	780b      	ldrb	r3, [r1, #0]
 800f4b2:	f805 3b01 	strb.w	r3, [r5], #1
 800f4b6:	e7de      	b.n	800f476 <_scanf_i+0x10e>
 800f4b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f4bc:	4631      	mov	r1, r6
 800f4be:	4650      	mov	r0, sl
 800f4c0:	4798      	blx	r3
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d0df      	beq.n	800f486 <_scanf_i+0x11e>
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	05d9      	lsls	r1, r3, #23
 800f4ca:	d50d      	bpl.n	800f4e8 <_scanf_i+0x180>
 800f4cc:	42bd      	cmp	r5, r7
 800f4ce:	d909      	bls.n	800f4e4 <_scanf_i+0x17c>
 800f4d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f4d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4d8:	4632      	mov	r2, r6
 800f4da:	4650      	mov	r0, sl
 800f4dc:	4798      	blx	r3
 800f4de:	f105 39ff 	add.w	r9, r5, #4294967295
 800f4e2:	464d      	mov	r5, r9
 800f4e4:	42bd      	cmp	r5, r7
 800f4e6:	d028      	beq.n	800f53a <_scanf_i+0x1d2>
 800f4e8:	6822      	ldr	r2, [r4, #0]
 800f4ea:	f012 0210 	ands.w	r2, r2, #16
 800f4ee:	d113      	bne.n	800f518 <_scanf_i+0x1b0>
 800f4f0:	702a      	strb	r2, [r5, #0]
 800f4f2:	6863      	ldr	r3, [r4, #4]
 800f4f4:	9e01      	ldr	r6, [sp, #4]
 800f4f6:	4639      	mov	r1, r7
 800f4f8:	4650      	mov	r0, sl
 800f4fa:	47b0      	blx	r6
 800f4fc:	f8d8 3000 	ldr.w	r3, [r8]
 800f500:	6821      	ldr	r1, [r4, #0]
 800f502:	1d1a      	adds	r2, r3, #4
 800f504:	f8c8 2000 	str.w	r2, [r8]
 800f508:	f011 0f20 	tst.w	r1, #32
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	d00f      	beq.n	800f530 <_scanf_i+0x1c8>
 800f510:	6018      	str	r0, [r3, #0]
 800f512:	68e3      	ldr	r3, [r4, #12]
 800f514:	3301      	adds	r3, #1
 800f516:	60e3      	str	r3, [r4, #12]
 800f518:	6923      	ldr	r3, [r4, #16]
 800f51a:	1bed      	subs	r5, r5, r7
 800f51c:	445d      	add	r5, fp
 800f51e:	442b      	add	r3, r5
 800f520:	6123      	str	r3, [r4, #16]
 800f522:	2000      	movs	r0, #0
 800f524:	b007      	add	sp, #28
 800f526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f52a:	f04f 0b00 	mov.w	fp, #0
 800f52e:	e7ca      	b.n	800f4c6 <_scanf_i+0x15e>
 800f530:	07ca      	lsls	r2, r1, #31
 800f532:	bf4c      	ite	mi
 800f534:	8018      	strhmi	r0, [r3, #0]
 800f536:	6018      	strpl	r0, [r3, #0]
 800f538:	e7eb      	b.n	800f512 <_scanf_i+0x1aa>
 800f53a:	2001      	movs	r0, #1
 800f53c:	e7f2      	b.n	800f524 <_scanf_i+0x1bc>
 800f53e:	bf00      	nop
 800f540:	080121e0 	.word	0x080121e0
 800f544:	08010369 	.word	0x08010369
 800f548:	0800b4ad 	.word	0x0800b4ad
 800f54c:	080188c9 	.word	0x080188c9

0800f550 <__sflush_r>:
 800f550:	898a      	ldrh	r2, [r1, #12]
 800f552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f556:	4605      	mov	r5, r0
 800f558:	0710      	lsls	r0, r2, #28
 800f55a:	460c      	mov	r4, r1
 800f55c:	d458      	bmi.n	800f610 <__sflush_r+0xc0>
 800f55e:	684b      	ldr	r3, [r1, #4]
 800f560:	2b00      	cmp	r3, #0
 800f562:	dc05      	bgt.n	800f570 <__sflush_r+0x20>
 800f564:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f566:	2b00      	cmp	r3, #0
 800f568:	dc02      	bgt.n	800f570 <__sflush_r+0x20>
 800f56a:	2000      	movs	r0, #0
 800f56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f572:	2e00      	cmp	r6, #0
 800f574:	d0f9      	beq.n	800f56a <__sflush_r+0x1a>
 800f576:	2300      	movs	r3, #0
 800f578:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f57c:	682f      	ldr	r7, [r5, #0]
 800f57e:	6a21      	ldr	r1, [r4, #32]
 800f580:	602b      	str	r3, [r5, #0]
 800f582:	d032      	beq.n	800f5ea <__sflush_r+0x9a>
 800f584:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f586:	89a3      	ldrh	r3, [r4, #12]
 800f588:	075a      	lsls	r2, r3, #29
 800f58a:	d505      	bpl.n	800f598 <__sflush_r+0x48>
 800f58c:	6863      	ldr	r3, [r4, #4]
 800f58e:	1ac0      	subs	r0, r0, r3
 800f590:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f592:	b10b      	cbz	r3, 800f598 <__sflush_r+0x48>
 800f594:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f596:	1ac0      	subs	r0, r0, r3
 800f598:	2300      	movs	r3, #0
 800f59a:	4602      	mov	r2, r0
 800f59c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f59e:	6a21      	ldr	r1, [r4, #32]
 800f5a0:	4628      	mov	r0, r5
 800f5a2:	47b0      	blx	r6
 800f5a4:	1c43      	adds	r3, r0, #1
 800f5a6:	89a3      	ldrh	r3, [r4, #12]
 800f5a8:	d106      	bne.n	800f5b8 <__sflush_r+0x68>
 800f5aa:	6829      	ldr	r1, [r5, #0]
 800f5ac:	291d      	cmp	r1, #29
 800f5ae:	d82b      	bhi.n	800f608 <__sflush_r+0xb8>
 800f5b0:	4a29      	ldr	r2, [pc, #164]	; (800f658 <__sflush_r+0x108>)
 800f5b2:	410a      	asrs	r2, r1
 800f5b4:	07d6      	lsls	r6, r2, #31
 800f5b6:	d427      	bmi.n	800f608 <__sflush_r+0xb8>
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	6062      	str	r2, [r4, #4]
 800f5bc:	04d9      	lsls	r1, r3, #19
 800f5be:	6922      	ldr	r2, [r4, #16]
 800f5c0:	6022      	str	r2, [r4, #0]
 800f5c2:	d504      	bpl.n	800f5ce <__sflush_r+0x7e>
 800f5c4:	1c42      	adds	r2, r0, #1
 800f5c6:	d101      	bne.n	800f5cc <__sflush_r+0x7c>
 800f5c8:	682b      	ldr	r3, [r5, #0]
 800f5ca:	b903      	cbnz	r3, 800f5ce <__sflush_r+0x7e>
 800f5cc:	6560      	str	r0, [r4, #84]	; 0x54
 800f5ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5d0:	602f      	str	r7, [r5, #0]
 800f5d2:	2900      	cmp	r1, #0
 800f5d4:	d0c9      	beq.n	800f56a <__sflush_r+0x1a>
 800f5d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5da:	4299      	cmp	r1, r3
 800f5dc:	d002      	beq.n	800f5e4 <__sflush_r+0x94>
 800f5de:	4628      	mov	r0, r5
 800f5e0:	f7fd ff4e 	bl	800d480 <_free_r>
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	6360      	str	r0, [r4, #52]	; 0x34
 800f5e8:	e7c0      	b.n	800f56c <__sflush_r+0x1c>
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	47b0      	blx	r6
 800f5f0:	1c41      	adds	r1, r0, #1
 800f5f2:	d1c8      	bne.n	800f586 <__sflush_r+0x36>
 800f5f4:	682b      	ldr	r3, [r5, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d0c5      	beq.n	800f586 <__sflush_r+0x36>
 800f5fa:	2b1d      	cmp	r3, #29
 800f5fc:	d001      	beq.n	800f602 <__sflush_r+0xb2>
 800f5fe:	2b16      	cmp	r3, #22
 800f600:	d101      	bne.n	800f606 <__sflush_r+0xb6>
 800f602:	602f      	str	r7, [r5, #0]
 800f604:	e7b1      	b.n	800f56a <__sflush_r+0x1a>
 800f606:	89a3      	ldrh	r3, [r4, #12]
 800f608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f60c:	81a3      	strh	r3, [r4, #12]
 800f60e:	e7ad      	b.n	800f56c <__sflush_r+0x1c>
 800f610:	690f      	ldr	r7, [r1, #16]
 800f612:	2f00      	cmp	r7, #0
 800f614:	d0a9      	beq.n	800f56a <__sflush_r+0x1a>
 800f616:	0793      	lsls	r3, r2, #30
 800f618:	680e      	ldr	r6, [r1, #0]
 800f61a:	bf08      	it	eq
 800f61c:	694b      	ldreq	r3, [r1, #20]
 800f61e:	600f      	str	r7, [r1, #0]
 800f620:	bf18      	it	ne
 800f622:	2300      	movne	r3, #0
 800f624:	eba6 0807 	sub.w	r8, r6, r7
 800f628:	608b      	str	r3, [r1, #8]
 800f62a:	f1b8 0f00 	cmp.w	r8, #0
 800f62e:	dd9c      	ble.n	800f56a <__sflush_r+0x1a>
 800f630:	6a21      	ldr	r1, [r4, #32]
 800f632:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f634:	4643      	mov	r3, r8
 800f636:	463a      	mov	r2, r7
 800f638:	4628      	mov	r0, r5
 800f63a:	47b0      	blx	r6
 800f63c:	2800      	cmp	r0, #0
 800f63e:	dc06      	bgt.n	800f64e <__sflush_r+0xfe>
 800f640:	89a3      	ldrh	r3, [r4, #12]
 800f642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f646:	81a3      	strh	r3, [r4, #12]
 800f648:	f04f 30ff 	mov.w	r0, #4294967295
 800f64c:	e78e      	b.n	800f56c <__sflush_r+0x1c>
 800f64e:	4407      	add	r7, r0
 800f650:	eba8 0800 	sub.w	r8, r8, r0
 800f654:	e7e9      	b.n	800f62a <__sflush_r+0xda>
 800f656:	bf00      	nop
 800f658:	dfbffffe 	.word	0xdfbffffe

0800f65c <_fflush_r>:
 800f65c:	b538      	push	{r3, r4, r5, lr}
 800f65e:	690b      	ldr	r3, [r1, #16]
 800f660:	4605      	mov	r5, r0
 800f662:	460c      	mov	r4, r1
 800f664:	b913      	cbnz	r3, 800f66c <_fflush_r+0x10>
 800f666:	2500      	movs	r5, #0
 800f668:	4628      	mov	r0, r5
 800f66a:	bd38      	pop	{r3, r4, r5, pc}
 800f66c:	b118      	cbz	r0, 800f676 <_fflush_r+0x1a>
 800f66e:	6a03      	ldr	r3, [r0, #32]
 800f670:	b90b      	cbnz	r3, 800f676 <_fflush_r+0x1a>
 800f672:	f7fc fdf3 	bl	800c25c <__sinit>
 800f676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d0f3      	beq.n	800f666 <_fflush_r+0xa>
 800f67e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f680:	07d0      	lsls	r0, r2, #31
 800f682:	d404      	bmi.n	800f68e <_fflush_r+0x32>
 800f684:	0599      	lsls	r1, r3, #22
 800f686:	d402      	bmi.n	800f68e <_fflush_r+0x32>
 800f688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f68a:	f7fd f8e6 	bl	800c85a <__retarget_lock_acquire_recursive>
 800f68e:	4628      	mov	r0, r5
 800f690:	4621      	mov	r1, r4
 800f692:	f7ff ff5d 	bl	800f550 <__sflush_r>
 800f696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f698:	07da      	lsls	r2, r3, #31
 800f69a:	4605      	mov	r5, r0
 800f69c:	d4e4      	bmi.n	800f668 <_fflush_r+0xc>
 800f69e:	89a3      	ldrh	r3, [r4, #12]
 800f6a0:	059b      	lsls	r3, r3, #22
 800f6a2:	d4e1      	bmi.n	800f668 <_fflush_r+0xc>
 800f6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6a6:	f7fd f8d9 	bl	800c85c <__retarget_lock_release_recursive>
 800f6aa:	e7dd      	b.n	800f668 <_fflush_r+0xc>

0800f6ac <__swhatbuf_r>:
 800f6ac:	b570      	push	{r4, r5, r6, lr}
 800f6ae:	460c      	mov	r4, r1
 800f6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6b4:	2900      	cmp	r1, #0
 800f6b6:	b096      	sub	sp, #88	; 0x58
 800f6b8:	4615      	mov	r5, r2
 800f6ba:	461e      	mov	r6, r3
 800f6bc:	da0d      	bge.n	800f6da <__swhatbuf_r+0x2e>
 800f6be:	89a3      	ldrh	r3, [r4, #12]
 800f6c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f6c4:	f04f 0100 	mov.w	r1, #0
 800f6c8:	bf0c      	ite	eq
 800f6ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f6ce:	2340      	movne	r3, #64	; 0x40
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	6031      	str	r1, [r6, #0]
 800f6d4:	602b      	str	r3, [r5, #0]
 800f6d6:	b016      	add	sp, #88	; 0x58
 800f6d8:	bd70      	pop	{r4, r5, r6, pc}
 800f6da:	466a      	mov	r2, sp
 800f6dc:	f000 f9f2 	bl	800fac4 <_fstat_r>
 800f6e0:	2800      	cmp	r0, #0
 800f6e2:	dbec      	blt.n	800f6be <__swhatbuf_r+0x12>
 800f6e4:	9901      	ldr	r1, [sp, #4]
 800f6e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f6ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f6ee:	4259      	negs	r1, r3
 800f6f0:	4159      	adcs	r1, r3
 800f6f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6f6:	e7eb      	b.n	800f6d0 <__swhatbuf_r+0x24>

0800f6f8 <__smakebuf_r>:
 800f6f8:	898b      	ldrh	r3, [r1, #12]
 800f6fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6fc:	079d      	lsls	r5, r3, #30
 800f6fe:	4606      	mov	r6, r0
 800f700:	460c      	mov	r4, r1
 800f702:	d507      	bpl.n	800f714 <__smakebuf_r+0x1c>
 800f704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f708:	6023      	str	r3, [r4, #0]
 800f70a:	6123      	str	r3, [r4, #16]
 800f70c:	2301      	movs	r3, #1
 800f70e:	6163      	str	r3, [r4, #20]
 800f710:	b002      	add	sp, #8
 800f712:	bd70      	pop	{r4, r5, r6, pc}
 800f714:	ab01      	add	r3, sp, #4
 800f716:	466a      	mov	r2, sp
 800f718:	f7ff ffc8 	bl	800f6ac <__swhatbuf_r>
 800f71c:	9900      	ldr	r1, [sp, #0]
 800f71e:	4605      	mov	r5, r0
 800f720:	4630      	mov	r0, r6
 800f722:	f7fb fdb5 	bl	800b290 <_malloc_r>
 800f726:	b948      	cbnz	r0, 800f73c <__smakebuf_r+0x44>
 800f728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f72c:	059a      	lsls	r2, r3, #22
 800f72e:	d4ef      	bmi.n	800f710 <__smakebuf_r+0x18>
 800f730:	f023 0303 	bic.w	r3, r3, #3
 800f734:	f043 0302 	orr.w	r3, r3, #2
 800f738:	81a3      	strh	r3, [r4, #12]
 800f73a:	e7e3      	b.n	800f704 <__smakebuf_r+0xc>
 800f73c:	89a3      	ldrh	r3, [r4, #12]
 800f73e:	6020      	str	r0, [r4, #0]
 800f740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f744:	81a3      	strh	r3, [r4, #12]
 800f746:	9b00      	ldr	r3, [sp, #0]
 800f748:	6163      	str	r3, [r4, #20]
 800f74a:	9b01      	ldr	r3, [sp, #4]
 800f74c:	6120      	str	r0, [r4, #16]
 800f74e:	b15b      	cbz	r3, 800f768 <__smakebuf_r+0x70>
 800f750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f754:	4630      	mov	r0, r6
 800f756:	f000 f9c7 	bl	800fae8 <_isatty_r>
 800f75a:	b128      	cbz	r0, 800f768 <__smakebuf_r+0x70>
 800f75c:	89a3      	ldrh	r3, [r4, #12]
 800f75e:	f023 0303 	bic.w	r3, r3, #3
 800f762:	f043 0301 	orr.w	r3, r3, #1
 800f766:	81a3      	strh	r3, [r4, #12]
 800f768:	89a3      	ldrh	r3, [r4, #12]
 800f76a:	431d      	orrs	r5, r3
 800f76c:	81a5      	strh	r5, [r4, #12]
 800f76e:	e7cf      	b.n	800f710 <__smakebuf_r+0x18>

0800f770 <lflush>:
 800f770:	898b      	ldrh	r3, [r1, #12]
 800f772:	f003 0309 	and.w	r3, r3, #9
 800f776:	2b09      	cmp	r3, #9
 800f778:	d103      	bne.n	800f782 <lflush+0x12>
 800f77a:	4b03      	ldr	r3, [pc, #12]	; (800f788 <lflush+0x18>)
 800f77c:	6818      	ldr	r0, [r3, #0]
 800f77e:	f7ff bf6d 	b.w	800f65c <_fflush_r>
 800f782:	2000      	movs	r0, #0
 800f784:	4770      	bx	lr
 800f786:	bf00      	nop
 800f788:	200008e0 	.word	0x200008e0

0800f78c <__srefill_r>:
 800f78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78e:	460c      	mov	r4, r1
 800f790:	4605      	mov	r5, r0
 800f792:	b118      	cbz	r0, 800f79c <__srefill_r+0x10>
 800f794:	6a03      	ldr	r3, [r0, #32]
 800f796:	b90b      	cbnz	r3, 800f79c <__srefill_r+0x10>
 800f798:	f7fc fd60 	bl	800c25c <__sinit>
 800f79c:	2300      	movs	r3, #0
 800f79e:	6063      	str	r3, [r4, #4]
 800f7a0:	89a3      	ldrh	r3, [r4, #12]
 800f7a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7a6:	069e      	lsls	r6, r3, #26
 800f7a8:	d502      	bpl.n	800f7b0 <__srefill_r+0x24>
 800f7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ae:	e05c      	b.n	800f86a <__srefill_r+0xde>
 800f7b0:	0758      	lsls	r0, r3, #29
 800f7b2:	d448      	bmi.n	800f846 <__srefill_r+0xba>
 800f7b4:	06d9      	lsls	r1, r3, #27
 800f7b6:	d405      	bmi.n	800f7c4 <__srefill_r+0x38>
 800f7b8:	2309      	movs	r3, #9
 800f7ba:	602b      	str	r3, [r5, #0]
 800f7bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f7c0:	81a3      	strh	r3, [r4, #12]
 800f7c2:	e7f2      	b.n	800f7aa <__srefill_r+0x1e>
 800f7c4:	071a      	lsls	r2, r3, #28
 800f7c6:	d50b      	bpl.n	800f7e0 <__srefill_r+0x54>
 800f7c8:	4621      	mov	r1, r4
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	f7ff ff46 	bl	800f65c <_fflush_r>
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d1ea      	bne.n	800f7aa <__srefill_r+0x1e>
 800f7d4:	89a3      	ldrh	r3, [r4, #12]
 800f7d6:	60a0      	str	r0, [r4, #8]
 800f7d8:	f023 0308 	bic.w	r3, r3, #8
 800f7dc:	81a3      	strh	r3, [r4, #12]
 800f7de:	61a0      	str	r0, [r4, #24]
 800f7e0:	89a3      	ldrh	r3, [r4, #12]
 800f7e2:	f043 0304 	orr.w	r3, r3, #4
 800f7e6:	81a3      	strh	r3, [r4, #12]
 800f7e8:	6923      	ldr	r3, [r4, #16]
 800f7ea:	b91b      	cbnz	r3, 800f7f4 <__srefill_r+0x68>
 800f7ec:	4621      	mov	r1, r4
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	f7ff ff82 	bl	800f6f8 <__smakebuf_r>
 800f7f4:	89a6      	ldrh	r6, [r4, #12]
 800f7f6:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800f7fa:	07b3      	lsls	r3, r6, #30
 800f7fc:	d00f      	beq.n	800f81e <__srefill_r+0x92>
 800f7fe:	2301      	movs	r3, #1
 800f800:	4a1b      	ldr	r2, [pc, #108]	; (800f870 <__srefill_r+0xe4>)
 800f802:	491c      	ldr	r1, [pc, #112]	; (800f874 <__srefill_r+0xe8>)
 800f804:	481c      	ldr	r0, [pc, #112]	; (800f878 <__srefill_r+0xec>)
 800f806:	81a3      	strh	r3, [r4, #12]
 800f808:	f006 0609 	and.w	r6, r6, #9
 800f80c:	f7fc fd3e 	bl	800c28c <_fwalk_sglue>
 800f810:	2e09      	cmp	r6, #9
 800f812:	81a7      	strh	r7, [r4, #12]
 800f814:	d103      	bne.n	800f81e <__srefill_r+0x92>
 800f816:	4621      	mov	r1, r4
 800f818:	4628      	mov	r0, r5
 800f81a:	f7ff fe99 	bl	800f550 <__sflush_r>
 800f81e:	6922      	ldr	r2, [r4, #16]
 800f820:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f822:	6963      	ldr	r3, [r4, #20]
 800f824:	6a21      	ldr	r1, [r4, #32]
 800f826:	6022      	str	r2, [r4, #0]
 800f828:	4628      	mov	r0, r5
 800f82a:	47b0      	blx	r6
 800f82c:	2800      	cmp	r0, #0
 800f82e:	6060      	str	r0, [r4, #4]
 800f830:	dc1c      	bgt.n	800f86c <__srefill_r+0xe0>
 800f832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f836:	bf17      	itett	ne
 800f838:	2200      	movne	r2, #0
 800f83a:	f043 0320 	orreq.w	r3, r3, #32
 800f83e:	6062      	strne	r2, [r4, #4]
 800f840:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800f844:	e7bc      	b.n	800f7c0 <__srefill_r+0x34>
 800f846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f848:	2900      	cmp	r1, #0
 800f84a:	d0cd      	beq.n	800f7e8 <__srefill_r+0x5c>
 800f84c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f850:	4299      	cmp	r1, r3
 800f852:	d002      	beq.n	800f85a <__srefill_r+0xce>
 800f854:	4628      	mov	r0, r5
 800f856:	f7fd fe13 	bl	800d480 <_free_r>
 800f85a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f85c:	6063      	str	r3, [r4, #4]
 800f85e:	2000      	movs	r0, #0
 800f860:	6360      	str	r0, [r4, #52]	; 0x34
 800f862:	2b00      	cmp	r3, #0
 800f864:	d0c0      	beq.n	800f7e8 <__srefill_r+0x5c>
 800f866:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f868:	6023      	str	r3, [r4, #0]
 800f86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f86c:	2000      	movs	r0, #0
 800f86e:	e7fc      	b.n	800f86a <__srefill_r+0xde>
 800f870:	20000888 	.word	0x20000888
 800f874:	0800f771 	.word	0x0800f771
 800f878:	20000894 	.word	0x20000894

0800f87c <__sccl>:
 800f87c:	b570      	push	{r4, r5, r6, lr}
 800f87e:	780b      	ldrb	r3, [r1, #0]
 800f880:	4604      	mov	r4, r0
 800f882:	2b5e      	cmp	r3, #94	; 0x5e
 800f884:	bf0b      	itete	eq
 800f886:	784b      	ldrbeq	r3, [r1, #1]
 800f888:	1c4a      	addne	r2, r1, #1
 800f88a:	1c8a      	addeq	r2, r1, #2
 800f88c:	2100      	movne	r1, #0
 800f88e:	bf08      	it	eq
 800f890:	2101      	moveq	r1, #1
 800f892:	3801      	subs	r0, #1
 800f894:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800f898:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f89c:	42a8      	cmp	r0, r5
 800f89e:	d1fb      	bne.n	800f898 <__sccl+0x1c>
 800f8a0:	b90b      	cbnz	r3, 800f8a6 <__sccl+0x2a>
 800f8a2:	1e50      	subs	r0, r2, #1
 800f8a4:	bd70      	pop	{r4, r5, r6, pc}
 800f8a6:	f081 0101 	eor.w	r1, r1, #1
 800f8aa:	54e1      	strb	r1, [r4, r3]
 800f8ac:	4610      	mov	r0, r2
 800f8ae:	4602      	mov	r2, r0
 800f8b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f8b4:	2d2d      	cmp	r5, #45	; 0x2d
 800f8b6:	d005      	beq.n	800f8c4 <__sccl+0x48>
 800f8b8:	2d5d      	cmp	r5, #93	; 0x5d
 800f8ba:	d016      	beq.n	800f8ea <__sccl+0x6e>
 800f8bc:	2d00      	cmp	r5, #0
 800f8be:	d0f1      	beq.n	800f8a4 <__sccl+0x28>
 800f8c0:	462b      	mov	r3, r5
 800f8c2:	e7f2      	b.n	800f8aa <__sccl+0x2e>
 800f8c4:	7846      	ldrb	r6, [r0, #1]
 800f8c6:	2e5d      	cmp	r6, #93	; 0x5d
 800f8c8:	d0fa      	beq.n	800f8c0 <__sccl+0x44>
 800f8ca:	42b3      	cmp	r3, r6
 800f8cc:	dcf8      	bgt.n	800f8c0 <__sccl+0x44>
 800f8ce:	3002      	adds	r0, #2
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	3201      	adds	r2, #1
 800f8d4:	4296      	cmp	r6, r2
 800f8d6:	54a1      	strb	r1, [r4, r2]
 800f8d8:	dcfb      	bgt.n	800f8d2 <__sccl+0x56>
 800f8da:	1af2      	subs	r2, r6, r3
 800f8dc:	3a01      	subs	r2, #1
 800f8de:	1c5d      	adds	r5, r3, #1
 800f8e0:	42b3      	cmp	r3, r6
 800f8e2:	bfa8      	it	ge
 800f8e4:	2200      	movge	r2, #0
 800f8e6:	18ab      	adds	r3, r5, r2
 800f8e8:	e7e1      	b.n	800f8ae <__sccl+0x32>
 800f8ea:	4610      	mov	r0, r2
 800f8ec:	e7da      	b.n	800f8a4 <__sccl+0x28>

0800f8ee <__submore>:
 800f8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8f2:	460c      	mov	r4, r1
 800f8f4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f8f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8fa:	4299      	cmp	r1, r3
 800f8fc:	d11d      	bne.n	800f93a <__submore+0x4c>
 800f8fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f902:	f7fb fcc5 	bl	800b290 <_malloc_r>
 800f906:	b918      	cbnz	r0, 800f910 <__submore+0x22>
 800f908:	f04f 30ff 	mov.w	r0, #4294967295
 800f90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f914:	63a3      	str	r3, [r4, #56]	; 0x38
 800f916:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f91a:	6360      	str	r0, [r4, #52]	; 0x34
 800f91c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800f920:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f924:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800f928:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f92c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800f930:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800f934:	6020      	str	r0, [r4, #0]
 800f936:	2000      	movs	r0, #0
 800f938:	e7e8      	b.n	800f90c <__submore+0x1e>
 800f93a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f93c:	0077      	lsls	r7, r6, #1
 800f93e:	463a      	mov	r2, r7
 800f940:	f000 fc71 	bl	8010226 <_realloc_r>
 800f944:	4605      	mov	r5, r0
 800f946:	2800      	cmp	r0, #0
 800f948:	d0de      	beq.n	800f908 <__submore+0x1a>
 800f94a:	eb00 0806 	add.w	r8, r0, r6
 800f94e:	4601      	mov	r1, r0
 800f950:	4632      	mov	r2, r6
 800f952:	4640      	mov	r0, r8
 800f954:	f7fc ff8b 	bl	800c86e <memcpy>
 800f958:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800f95c:	f8c4 8000 	str.w	r8, [r4]
 800f960:	e7e9      	b.n	800f936 <__submore+0x48>

0800f962 <_ungetc_r>:
 800f962:	b570      	push	{r4, r5, r6, lr}
 800f964:	4614      	mov	r4, r2
 800f966:	1c4a      	adds	r2, r1, #1
 800f968:	4606      	mov	r6, r0
 800f96a:	460d      	mov	r5, r1
 800f96c:	d103      	bne.n	800f976 <_ungetc_r+0x14>
 800f96e:	f04f 35ff 	mov.w	r5, #4294967295
 800f972:	4628      	mov	r0, r5
 800f974:	bd70      	pop	{r4, r5, r6, pc}
 800f976:	b118      	cbz	r0, 800f980 <_ungetc_r+0x1e>
 800f978:	6a03      	ldr	r3, [r0, #32]
 800f97a:	b90b      	cbnz	r3, 800f980 <_ungetc_r+0x1e>
 800f97c:	f7fc fc6e 	bl	800c25c <__sinit>
 800f980:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f982:	07db      	lsls	r3, r3, #31
 800f984:	d405      	bmi.n	800f992 <_ungetc_r+0x30>
 800f986:	89a3      	ldrh	r3, [r4, #12]
 800f988:	0598      	lsls	r0, r3, #22
 800f98a:	d402      	bmi.n	800f992 <_ungetc_r+0x30>
 800f98c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f98e:	f7fc ff64 	bl	800c85a <__retarget_lock_acquire_recursive>
 800f992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f996:	f023 0320 	bic.w	r3, r3, #32
 800f99a:	0759      	lsls	r1, r3, #29
 800f99c:	81a3      	strh	r3, [r4, #12]
 800f99e:	b29a      	uxth	r2, r3
 800f9a0:	d423      	bmi.n	800f9ea <_ungetc_r+0x88>
 800f9a2:	06d3      	lsls	r3, r2, #27
 800f9a4:	d409      	bmi.n	800f9ba <_ungetc_r+0x58>
 800f9a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9a8:	07dd      	lsls	r5, r3, #31
 800f9aa:	d4e0      	bmi.n	800f96e <_ungetc_r+0xc>
 800f9ac:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f9b0:	d1dd      	bne.n	800f96e <_ungetc_r+0xc>
 800f9b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9b4:	f7fc ff52 	bl	800c85c <__retarget_lock_release_recursive>
 800f9b8:	e7d9      	b.n	800f96e <_ungetc_r+0xc>
 800f9ba:	0710      	lsls	r0, r2, #28
 800f9bc:	d511      	bpl.n	800f9e2 <_ungetc_r+0x80>
 800f9be:	4621      	mov	r1, r4
 800f9c0:	4630      	mov	r0, r6
 800f9c2:	f7ff fe4b 	bl	800f65c <_fflush_r>
 800f9c6:	b130      	cbz	r0, 800f9d6 <_ungetc_r+0x74>
 800f9c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9ca:	07d9      	lsls	r1, r3, #31
 800f9cc:	d4cf      	bmi.n	800f96e <_ungetc_r+0xc>
 800f9ce:	89a3      	ldrh	r3, [r4, #12]
 800f9d0:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f9d4:	e7ec      	b.n	800f9b0 <_ungetc_r+0x4e>
 800f9d6:	89a3      	ldrh	r3, [r4, #12]
 800f9d8:	60a0      	str	r0, [r4, #8]
 800f9da:	f023 0308 	bic.w	r3, r3, #8
 800f9de:	81a3      	strh	r3, [r4, #12]
 800f9e0:	61a0      	str	r0, [r4, #24]
 800f9e2:	89a3      	ldrh	r3, [r4, #12]
 800f9e4:	f043 0304 	orr.w	r3, r3, #4
 800f9e8:	81a3      	strh	r3, [r4, #12]
 800f9ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9ec:	6862      	ldr	r2, [r4, #4]
 800f9ee:	b2ed      	uxtb	r5, r5
 800f9f0:	b1d3      	cbz	r3, 800fa28 <_ungetc_r+0xc6>
 800f9f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	dc05      	bgt.n	800fa04 <_ungetc_r+0xa2>
 800f9f8:	4621      	mov	r1, r4
 800f9fa:	4630      	mov	r0, r6
 800f9fc:	f7ff ff77 	bl	800f8ee <__submore>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d1e1      	bne.n	800f9c8 <_ungetc_r+0x66>
 800fa04:	6823      	ldr	r3, [r4, #0]
 800fa06:	1e5a      	subs	r2, r3, #1
 800fa08:	6022      	str	r2, [r4, #0]
 800fa0a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fa0e:	6863      	ldr	r3, [r4, #4]
 800fa10:	3301      	adds	r3, #1
 800fa12:	6063      	str	r3, [r4, #4]
 800fa14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa16:	07da      	lsls	r2, r3, #31
 800fa18:	d4ab      	bmi.n	800f972 <_ungetc_r+0x10>
 800fa1a:	89a3      	ldrh	r3, [r4, #12]
 800fa1c:	059b      	lsls	r3, r3, #22
 800fa1e:	d4a8      	bmi.n	800f972 <_ungetc_r+0x10>
 800fa20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa22:	f7fc ff1b 	bl	800c85c <__retarget_lock_release_recursive>
 800fa26:	e7a4      	b.n	800f972 <_ungetc_r+0x10>
 800fa28:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800fa2a:	6920      	ldr	r0, [r4, #16]
 800fa2c:	6823      	ldr	r3, [r4, #0]
 800fa2e:	f001 0101 	and.w	r1, r1, #1
 800fa32:	b160      	cbz	r0, 800fa4e <_ungetc_r+0xec>
 800fa34:	4298      	cmp	r0, r3
 800fa36:	d20a      	bcs.n	800fa4e <_ungetc_r+0xec>
 800fa38:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800fa3c:	42a8      	cmp	r0, r5
 800fa3e:	d106      	bne.n	800fa4e <_ungetc_r+0xec>
 800fa40:	3b01      	subs	r3, #1
 800fa42:	3201      	adds	r2, #1
 800fa44:	6023      	str	r3, [r4, #0]
 800fa46:	6062      	str	r2, [r4, #4]
 800fa48:	2900      	cmp	r1, #0
 800fa4a:	d192      	bne.n	800f972 <_ungetc_r+0x10>
 800fa4c:	e7e5      	b.n	800fa1a <_ungetc_r+0xb8>
 800fa4e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800fa52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa56:	6363      	str	r3, [r4, #52]	; 0x34
 800fa58:	2303      	movs	r3, #3
 800fa5a:	63a3      	str	r3, [r4, #56]	; 0x38
 800fa5c:	4623      	mov	r3, r4
 800fa5e:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fa62:	6023      	str	r3, [r4, #0]
 800fa64:	2301      	movs	r3, #1
 800fa66:	6063      	str	r3, [r4, #4]
 800fa68:	e7ee      	b.n	800fa48 <_ungetc_r+0xe6>

0800fa6a <memmove>:
 800fa6a:	4288      	cmp	r0, r1
 800fa6c:	b510      	push	{r4, lr}
 800fa6e:	eb01 0402 	add.w	r4, r1, r2
 800fa72:	d902      	bls.n	800fa7a <memmove+0x10>
 800fa74:	4284      	cmp	r4, r0
 800fa76:	4623      	mov	r3, r4
 800fa78:	d807      	bhi.n	800fa8a <memmove+0x20>
 800fa7a:	1e43      	subs	r3, r0, #1
 800fa7c:	42a1      	cmp	r1, r4
 800fa7e:	d008      	beq.n	800fa92 <memmove+0x28>
 800fa80:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa84:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa88:	e7f8      	b.n	800fa7c <memmove+0x12>
 800fa8a:	4402      	add	r2, r0
 800fa8c:	4601      	mov	r1, r0
 800fa8e:	428a      	cmp	r2, r1
 800fa90:	d100      	bne.n	800fa94 <memmove+0x2a>
 800fa92:	bd10      	pop	{r4, pc}
 800fa94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa98:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa9c:	e7f7      	b.n	800fa8e <memmove+0x24>

0800fa9e <strncmp>:
 800fa9e:	b510      	push	{r4, lr}
 800faa0:	b16a      	cbz	r2, 800fabe <strncmp+0x20>
 800faa2:	3901      	subs	r1, #1
 800faa4:	1884      	adds	r4, r0, r2
 800faa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faaa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800faae:	429a      	cmp	r2, r3
 800fab0:	d103      	bne.n	800faba <strncmp+0x1c>
 800fab2:	42a0      	cmp	r0, r4
 800fab4:	d001      	beq.n	800faba <strncmp+0x1c>
 800fab6:	2a00      	cmp	r2, #0
 800fab8:	d1f5      	bne.n	800faa6 <strncmp+0x8>
 800faba:	1ad0      	subs	r0, r2, r3
 800fabc:	bd10      	pop	{r4, pc}
 800fabe:	4610      	mov	r0, r2
 800fac0:	e7fc      	b.n	800fabc <strncmp+0x1e>
	...

0800fac4 <_fstat_r>:
 800fac4:	b538      	push	{r3, r4, r5, lr}
 800fac6:	4d07      	ldr	r5, [pc, #28]	; (800fae4 <_fstat_r+0x20>)
 800fac8:	2300      	movs	r3, #0
 800faca:	4604      	mov	r4, r0
 800facc:	4608      	mov	r0, r1
 800face:	4611      	mov	r1, r2
 800fad0:	602b      	str	r3, [r5, #0]
 800fad2:	f7f2 f863 	bl	8001b9c <_fstat>
 800fad6:	1c43      	adds	r3, r0, #1
 800fad8:	d102      	bne.n	800fae0 <_fstat_r+0x1c>
 800fada:	682b      	ldr	r3, [r5, #0]
 800fadc:	b103      	cbz	r3, 800fae0 <_fstat_r+0x1c>
 800fade:	6023      	str	r3, [r4, #0]
 800fae0:	bd38      	pop	{r3, r4, r5, pc}
 800fae2:	bf00      	nop
 800fae4:	20003b78 	.word	0x20003b78

0800fae8 <_isatty_r>:
 800fae8:	b538      	push	{r3, r4, r5, lr}
 800faea:	4d06      	ldr	r5, [pc, #24]	; (800fb04 <_isatty_r+0x1c>)
 800faec:	2300      	movs	r3, #0
 800faee:	4604      	mov	r4, r0
 800faf0:	4608      	mov	r0, r1
 800faf2:	602b      	str	r3, [r5, #0]
 800faf4:	f7f1 ffc0 	bl	8001a78 <_isatty>
 800faf8:	1c43      	adds	r3, r0, #1
 800fafa:	d102      	bne.n	800fb02 <_isatty_r+0x1a>
 800fafc:	682b      	ldr	r3, [r5, #0]
 800fafe:	b103      	cbz	r3, 800fb02 <_isatty_r+0x1a>
 800fb00:	6023      	str	r3, [r4, #0]
 800fb02:	bd38      	pop	{r3, r4, r5, pc}
 800fb04:	20003b78 	.word	0x20003b78

0800fb08 <nan>:
 800fb08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fb10 <nan+0x8>
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop
 800fb10:	00000000 	.word	0x00000000
 800fb14:	7ff80000 	.word	0x7ff80000

0800fb18 <__assert_func>:
 800fb18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb1a:	4614      	mov	r4, r2
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	4b09      	ldr	r3, [pc, #36]	; (800fb44 <__assert_func+0x2c>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	4605      	mov	r5, r0
 800fb24:	68d8      	ldr	r0, [r3, #12]
 800fb26:	b14c      	cbz	r4, 800fb3c <__assert_func+0x24>
 800fb28:	4b07      	ldr	r3, [pc, #28]	; (800fb48 <__assert_func+0x30>)
 800fb2a:	9100      	str	r1, [sp, #0]
 800fb2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb30:	4906      	ldr	r1, [pc, #24]	; (800fb4c <__assert_func+0x34>)
 800fb32:	462b      	mov	r3, r5
 800fb34:	f000 fc28 	bl	8010388 <fiprintf>
 800fb38:	f000 fc38 	bl	80103ac <abort>
 800fb3c:	4b04      	ldr	r3, [pc, #16]	; (800fb50 <__assert_func+0x38>)
 800fb3e:	461c      	mov	r4, r3
 800fb40:	e7f3      	b.n	800fb2a <__assert_func+0x12>
 800fb42:	bf00      	nop
 800fb44:	200008e0 	.word	0x200008e0
 800fb48:	080188dc 	.word	0x080188dc
 800fb4c:	080188e9 	.word	0x080188e9
 800fb50:	08018917 	.word	0x08018917

0800fb54 <rshift>:
 800fb54:	6903      	ldr	r3, [r0, #16]
 800fb56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fb5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fb62:	f100 0414 	add.w	r4, r0, #20
 800fb66:	dd45      	ble.n	800fbf4 <rshift+0xa0>
 800fb68:	f011 011f 	ands.w	r1, r1, #31
 800fb6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fb70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fb74:	d10c      	bne.n	800fb90 <rshift+0x3c>
 800fb76:	f100 0710 	add.w	r7, r0, #16
 800fb7a:	4629      	mov	r1, r5
 800fb7c:	42b1      	cmp	r1, r6
 800fb7e:	d334      	bcc.n	800fbea <rshift+0x96>
 800fb80:	1a9b      	subs	r3, r3, r2
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	1eea      	subs	r2, r5, #3
 800fb86:	4296      	cmp	r6, r2
 800fb88:	bf38      	it	cc
 800fb8a:	2300      	movcc	r3, #0
 800fb8c:	4423      	add	r3, r4
 800fb8e:	e015      	b.n	800fbbc <rshift+0x68>
 800fb90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fb94:	f1c1 0820 	rsb	r8, r1, #32
 800fb98:	40cf      	lsrs	r7, r1
 800fb9a:	f105 0e04 	add.w	lr, r5, #4
 800fb9e:	46a1      	mov	r9, r4
 800fba0:	4576      	cmp	r6, lr
 800fba2:	46f4      	mov	ip, lr
 800fba4:	d815      	bhi.n	800fbd2 <rshift+0x7e>
 800fba6:	1a9a      	subs	r2, r3, r2
 800fba8:	0092      	lsls	r2, r2, #2
 800fbaa:	3a04      	subs	r2, #4
 800fbac:	3501      	adds	r5, #1
 800fbae:	42ae      	cmp	r6, r5
 800fbb0:	bf38      	it	cc
 800fbb2:	2200      	movcc	r2, #0
 800fbb4:	18a3      	adds	r3, r4, r2
 800fbb6:	50a7      	str	r7, [r4, r2]
 800fbb8:	b107      	cbz	r7, 800fbbc <rshift+0x68>
 800fbba:	3304      	adds	r3, #4
 800fbbc:	1b1a      	subs	r2, r3, r4
 800fbbe:	42a3      	cmp	r3, r4
 800fbc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fbc4:	bf08      	it	eq
 800fbc6:	2300      	moveq	r3, #0
 800fbc8:	6102      	str	r2, [r0, #16]
 800fbca:	bf08      	it	eq
 800fbcc:	6143      	streq	r3, [r0, #20]
 800fbce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbd2:	f8dc c000 	ldr.w	ip, [ip]
 800fbd6:	fa0c fc08 	lsl.w	ip, ip, r8
 800fbda:	ea4c 0707 	orr.w	r7, ip, r7
 800fbde:	f849 7b04 	str.w	r7, [r9], #4
 800fbe2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fbe6:	40cf      	lsrs	r7, r1
 800fbe8:	e7da      	b.n	800fba0 <rshift+0x4c>
 800fbea:	f851 cb04 	ldr.w	ip, [r1], #4
 800fbee:	f847 cf04 	str.w	ip, [r7, #4]!
 800fbf2:	e7c3      	b.n	800fb7c <rshift+0x28>
 800fbf4:	4623      	mov	r3, r4
 800fbf6:	e7e1      	b.n	800fbbc <rshift+0x68>

0800fbf8 <__hexdig_fun>:
 800fbf8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fbfc:	2b09      	cmp	r3, #9
 800fbfe:	d802      	bhi.n	800fc06 <__hexdig_fun+0xe>
 800fc00:	3820      	subs	r0, #32
 800fc02:	b2c0      	uxtb	r0, r0
 800fc04:	4770      	bx	lr
 800fc06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fc0a:	2b05      	cmp	r3, #5
 800fc0c:	d801      	bhi.n	800fc12 <__hexdig_fun+0x1a>
 800fc0e:	3847      	subs	r0, #71	; 0x47
 800fc10:	e7f7      	b.n	800fc02 <__hexdig_fun+0xa>
 800fc12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fc16:	2b05      	cmp	r3, #5
 800fc18:	d801      	bhi.n	800fc1e <__hexdig_fun+0x26>
 800fc1a:	3827      	subs	r0, #39	; 0x27
 800fc1c:	e7f1      	b.n	800fc02 <__hexdig_fun+0xa>
 800fc1e:	2000      	movs	r0, #0
 800fc20:	4770      	bx	lr
	...

0800fc24 <__gethex>:
 800fc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc28:	4617      	mov	r7, r2
 800fc2a:	680a      	ldr	r2, [r1, #0]
 800fc2c:	b085      	sub	sp, #20
 800fc2e:	f102 0b02 	add.w	fp, r2, #2
 800fc32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fc36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fc3a:	4681      	mov	r9, r0
 800fc3c:	468a      	mov	sl, r1
 800fc3e:	9302      	str	r3, [sp, #8]
 800fc40:	32fe      	adds	r2, #254	; 0xfe
 800fc42:	eb02 030b 	add.w	r3, r2, fp
 800fc46:	46d8      	mov	r8, fp
 800fc48:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800fc4c:	9301      	str	r3, [sp, #4]
 800fc4e:	2830      	cmp	r0, #48	; 0x30
 800fc50:	d0f7      	beq.n	800fc42 <__gethex+0x1e>
 800fc52:	f7ff ffd1 	bl	800fbf8 <__hexdig_fun>
 800fc56:	4604      	mov	r4, r0
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	d138      	bne.n	800fcce <__gethex+0xaa>
 800fc5c:	49a7      	ldr	r1, [pc, #668]	; (800fefc <__gethex+0x2d8>)
 800fc5e:	2201      	movs	r2, #1
 800fc60:	4640      	mov	r0, r8
 800fc62:	f7ff ff1c 	bl	800fa9e <strncmp>
 800fc66:	4606      	mov	r6, r0
 800fc68:	2800      	cmp	r0, #0
 800fc6a:	d169      	bne.n	800fd40 <__gethex+0x11c>
 800fc6c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800fc70:	465d      	mov	r5, fp
 800fc72:	f7ff ffc1 	bl	800fbf8 <__hexdig_fun>
 800fc76:	2800      	cmp	r0, #0
 800fc78:	d064      	beq.n	800fd44 <__gethex+0x120>
 800fc7a:	465a      	mov	r2, fp
 800fc7c:	7810      	ldrb	r0, [r2, #0]
 800fc7e:	2830      	cmp	r0, #48	; 0x30
 800fc80:	4690      	mov	r8, r2
 800fc82:	f102 0201 	add.w	r2, r2, #1
 800fc86:	d0f9      	beq.n	800fc7c <__gethex+0x58>
 800fc88:	f7ff ffb6 	bl	800fbf8 <__hexdig_fun>
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	fab0 f480 	clz	r4, r0
 800fc92:	0964      	lsrs	r4, r4, #5
 800fc94:	465e      	mov	r6, fp
 800fc96:	9301      	str	r3, [sp, #4]
 800fc98:	4642      	mov	r2, r8
 800fc9a:	4615      	mov	r5, r2
 800fc9c:	3201      	adds	r2, #1
 800fc9e:	7828      	ldrb	r0, [r5, #0]
 800fca0:	f7ff ffaa 	bl	800fbf8 <__hexdig_fun>
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d1f8      	bne.n	800fc9a <__gethex+0x76>
 800fca8:	4994      	ldr	r1, [pc, #592]	; (800fefc <__gethex+0x2d8>)
 800fcaa:	2201      	movs	r2, #1
 800fcac:	4628      	mov	r0, r5
 800fcae:	f7ff fef6 	bl	800fa9e <strncmp>
 800fcb2:	b978      	cbnz	r0, 800fcd4 <__gethex+0xb0>
 800fcb4:	b946      	cbnz	r6, 800fcc8 <__gethex+0xa4>
 800fcb6:	1c6e      	adds	r6, r5, #1
 800fcb8:	4632      	mov	r2, r6
 800fcba:	4615      	mov	r5, r2
 800fcbc:	3201      	adds	r2, #1
 800fcbe:	7828      	ldrb	r0, [r5, #0]
 800fcc0:	f7ff ff9a 	bl	800fbf8 <__hexdig_fun>
 800fcc4:	2800      	cmp	r0, #0
 800fcc6:	d1f8      	bne.n	800fcba <__gethex+0x96>
 800fcc8:	1b73      	subs	r3, r6, r5
 800fcca:	009e      	lsls	r6, r3, #2
 800fccc:	e004      	b.n	800fcd8 <__gethex+0xb4>
 800fcce:	2400      	movs	r4, #0
 800fcd0:	4626      	mov	r6, r4
 800fcd2:	e7e1      	b.n	800fc98 <__gethex+0x74>
 800fcd4:	2e00      	cmp	r6, #0
 800fcd6:	d1f7      	bne.n	800fcc8 <__gethex+0xa4>
 800fcd8:	782b      	ldrb	r3, [r5, #0]
 800fcda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fcde:	2b50      	cmp	r3, #80	; 0x50
 800fce0:	d13d      	bne.n	800fd5e <__gethex+0x13a>
 800fce2:	786b      	ldrb	r3, [r5, #1]
 800fce4:	2b2b      	cmp	r3, #43	; 0x2b
 800fce6:	d02f      	beq.n	800fd48 <__gethex+0x124>
 800fce8:	2b2d      	cmp	r3, #45	; 0x2d
 800fcea:	d031      	beq.n	800fd50 <__gethex+0x12c>
 800fcec:	1c69      	adds	r1, r5, #1
 800fcee:	f04f 0b00 	mov.w	fp, #0
 800fcf2:	7808      	ldrb	r0, [r1, #0]
 800fcf4:	f7ff ff80 	bl	800fbf8 <__hexdig_fun>
 800fcf8:	1e42      	subs	r2, r0, #1
 800fcfa:	b2d2      	uxtb	r2, r2
 800fcfc:	2a18      	cmp	r2, #24
 800fcfe:	d82e      	bhi.n	800fd5e <__gethex+0x13a>
 800fd00:	f1a0 0210 	sub.w	r2, r0, #16
 800fd04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fd08:	f7ff ff76 	bl	800fbf8 <__hexdig_fun>
 800fd0c:	f100 3cff 	add.w	ip, r0, #4294967295
 800fd10:	fa5f fc8c 	uxtb.w	ip, ip
 800fd14:	f1bc 0f18 	cmp.w	ip, #24
 800fd18:	d91d      	bls.n	800fd56 <__gethex+0x132>
 800fd1a:	f1bb 0f00 	cmp.w	fp, #0
 800fd1e:	d000      	beq.n	800fd22 <__gethex+0xfe>
 800fd20:	4252      	negs	r2, r2
 800fd22:	4416      	add	r6, r2
 800fd24:	f8ca 1000 	str.w	r1, [sl]
 800fd28:	b1dc      	cbz	r4, 800fd62 <__gethex+0x13e>
 800fd2a:	9b01      	ldr	r3, [sp, #4]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	bf14      	ite	ne
 800fd30:	f04f 0800 	movne.w	r8, #0
 800fd34:	f04f 0806 	moveq.w	r8, #6
 800fd38:	4640      	mov	r0, r8
 800fd3a:	b005      	add	sp, #20
 800fd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd40:	4645      	mov	r5, r8
 800fd42:	4626      	mov	r6, r4
 800fd44:	2401      	movs	r4, #1
 800fd46:	e7c7      	b.n	800fcd8 <__gethex+0xb4>
 800fd48:	f04f 0b00 	mov.w	fp, #0
 800fd4c:	1ca9      	adds	r1, r5, #2
 800fd4e:	e7d0      	b.n	800fcf2 <__gethex+0xce>
 800fd50:	f04f 0b01 	mov.w	fp, #1
 800fd54:	e7fa      	b.n	800fd4c <__gethex+0x128>
 800fd56:	230a      	movs	r3, #10
 800fd58:	fb03 0002 	mla	r0, r3, r2, r0
 800fd5c:	e7d0      	b.n	800fd00 <__gethex+0xdc>
 800fd5e:	4629      	mov	r1, r5
 800fd60:	e7e0      	b.n	800fd24 <__gethex+0x100>
 800fd62:	eba5 0308 	sub.w	r3, r5, r8
 800fd66:	3b01      	subs	r3, #1
 800fd68:	4621      	mov	r1, r4
 800fd6a:	2b07      	cmp	r3, #7
 800fd6c:	dc0a      	bgt.n	800fd84 <__gethex+0x160>
 800fd6e:	4648      	mov	r0, r9
 800fd70:	f7fd fbd2 	bl	800d518 <_Balloc>
 800fd74:	4604      	mov	r4, r0
 800fd76:	b940      	cbnz	r0, 800fd8a <__gethex+0x166>
 800fd78:	4b61      	ldr	r3, [pc, #388]	; (800ff00 <__gethex+0x2dc>)
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	21e4      	movs	r1, #228	; 0xe4
 800fd7e:	4861      	ldr	r0, [pc, #388]	; (800ff04 <__gethex+0x2e0>)
 800fd80:	f7ff feca 	bl	800fb18 <__assert_func>
 800fd84:	3101      	adds	r1, #1
 800fd86:	105b      	asrs	r3, r3, #1
 800fd88:	e7ef      	b.n	800fd6a <__gethex+0x146>
 800fd8a:	f100 0a14 	add.w	sl, r0, #20
 800fd8e:	2300      	movs	r3, #0
 800fd90:	495a      	ldr	r1, [pc, #360]	; (800fefc <__gethex+0x2d8>)
 800fd92:	f8cd a004 	str.w	sl, [sp, #4]
 800fd96:	469b      	mov	fp, r3
 800fd98:	45a8      	cmp	r8, r5
 800fd9a:	d342      	bcc.n	800fe22 <__gethex+0x1fe>
 800fd9c:	9801      	ldr	r0, [sp, #4]
 800fd9e:	f840 bb04 	str.w	fp, [r0], #4
 800fda2:	eba0 000a 	sub.w	r0, r0, sl
 800fda6:	1080      	asrs	r0, r0, #2
 800fda8:	6120      	str	r0, [r4, #16]
 800fdaa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800fdae:	4658      	mov	r0, fp
 800fdb0:	f7fd fca4 	bl	800d6fc <__hi0bits>
 800fdb4:	683d      	ldr	r5, [r7, #0]
 800fdb6:	eba8 0000 	sub.w	r0, r8, r0
 800fdba:	42a8      	cmp	r0, r5
 800fdbc:	dd59      	ble.n	800fe72 <__gethex+0x24e>
 800fdbe:	eba0 0805 	sub.w	r8, r0, r5
 800fdc2:	4641      	mov	r1, r8
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	f7fe f830 	bl	800de2a <__any_on>
 800fdca:	4683      	mov	fp, r0
 800fdcc:	b1b8      	cbz	r0, 800fdfe <__gethex+0x1da>
 800fdce:	f108 33ff 	add.w	r3, r8, #4294967295
 800fdd2:	1159      	asrs	r1, r3, #5
 800fdd4:	f003 021f 	and.w	r2, r3, #31
 800fdd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fddc:	f04f 0b01 	mov.w	fp, #1
 800fde0:	fa0b f202 	lsl.w	r2, fp, r2
 800fde4:	420a      	tst	r2, r1
 800fde6:	d00a      	beq.n	800fdfe <__gethex+0x1da>
 800fde8:	455b      	cmp	r3, fp
 800fdea:	dd06      	ble.n	800fdfa <__gethex+0x1d6>
 800fdec:	f1a8 0102 	sub.w	r1, r8, #2
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	f7fe f81a 	bl	800de2a <__any_on>
 800fdf6:	2800      	cmp	r0, #0
 800fdf8:	d138      	bne.n	800fe6c <__gethex+0x248>
 800fdfa:	f04f 0b02 	mov.w	fp, #2
 800fdfe:	4641      	mov	r1, r8
 800fe00:	4620      	mov	r0, r4
 800fe02:	f7ff fea7 	bl	800fb54 <rshift>
 800fe06:	4446      	add	r6, r8
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	42b3      	cmp	r3, r6
 800fe0c:	da41      	bge.n	800fe92 <__gethex+0x26e>
 800fe0e:	4621      	mov	r1, r4
 800fe10:	4648      	mov	r0, r9
 800fe12:	f7fd fbc1 	bl	800d598 <_Bfree>
 800fe16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe18:	2300      	movs	r3, #0
 800fe1a:	6013      	str	r3, [r2, #0]
 800fe1c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800fe20:	e78a      	b.n	800fd38 <__gethex+0x114>
 800fe22:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800fe26:	2a2e      	cmp	r2, #46	; 0x2e
 800fe28:	d014      	beq.n	800fe54 <__gethex+0x230>
 800fe2a:	2b20      	cmp	r3, #32
 800fe2c:	d106      	bne.n	800fe3c <__gethex+0x218>
 800fe2e:	9b01      	ldr	r3, [sp, #4]
 800fe30:	f843 bb04 	str.w	fp, [r3], #4
 800fe34:	f04f 0b00 	mov.w	fp, #0
 800fe38:	9301      	str	r3, [sp, #4]
 800fe3a:	465b      	mov	r3, fp
 800fe3c:	7828      	ldrb	r0, [r5, #0]
 800fe3e:	9303      	str	r3, [sp, #12]
 800fe40:	f7ff feda 	bl	800fbf8 <__hexdig_fun>
 800fe44:	9b03      	ldr	r3, [sp, #12]
 800fe46:	f000 000f 	and.w	r0, r0, #15
 800fe4a:	4098      	lsls	r0, r3
 800fe4c:	ea4b 0b00 	orr.w	fp, fp, r0
 800fe50:	3304      	adds	r3, #4
 800fe52:	e7a1      	b.n	800fd98 <__gethex+0x174>
 800fe54:	45a8      	cmp	r8, r5
 800fe56:	d8e8      	bhi.n	800fe2a <__gethex+0x206>
 800fe58:	2201      	movs	r2, #1
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	9303      	str	r3, [sp, #12]
 800fe5e:	f7ff fe1e 	bl	800fa9e <strncmp>
 800fe62:	4926      	ldr	r1, [pc, #152]	; (800fefc <__gethex+0x2d8>)
 800fe64:	9b03      	ldr	r3, [sp, #12]
 800fe66:	2800      	cmp	r0, #0
 800fe68:	d1df      	bne.n	800fe2a <__gethex+0x206>
 800fe6a:	e795      	b.n	800fd98 <__gethex+0x174>
 800fe6c:	f04f 0b03 	mov.w	fp, #3
 800fe70:	e7c5      	b.n	800fdfe <__gethex+0x1da>
 800fe72:	da0b      	bge.n	800fe8c <__gethex+0x268>
 800fe74:	eba5 0800 	sub.w	r8, r5, r0
 800fe78:	4621      	mov	r1, r4
 800fe7a:	4642      	mov	r2, r8
 800fe7c:	4648      	mov	r0, r9
 800fe7e:	f7fd fda5 	bl	800d9cc <__lshift>
 800fe82:	eba6 0608 	sub.w	r6, r6, r8
 800fe86:	4604      	mov	r4, r0
 800fe88:	f100 0a14 	add.w	sl, r0, #20
 800fe8c:	f04f 0b00 	mov.w	fp, #0
 800fe90:	e7ba      	b.n	800fe08 <__gethex+0x1e4>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	42b3      	cmp	r3, r6
 800fe96:	dd73      	ble.n	800ff80 <__gethex+0x35c>
 800fe98:	1b9e      	subs	r6, r3, r6
 800fe9a:	42b5      	cmp	r5, r6
 800fe9c:	dc34      	bgt.n	800ff08 <__gethex+0x2e4>
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2b02      	cmp	r3, #2
 800fea2:	d023      	beq.n	800feec <__gethex+0x2c8>
 800fea4:	2b03      	cmp	r3, #3
 800fea6:	d025      	beq.n	800fef4 <__gethex+0x2d0>
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d115      	bne.n	800fed8 <__gethex+0x2b4>
 800feac:	42b5      	cmp	r5, r6
 800feae:	d113      	bne.n	800fed8 <__gethex+0x2b4>
 800feb0:	2d01      	cmp	r5, #1
 800feb2:	d10b      	bne.n	800fecc <__gethex+0x2a8>
 800feb4:	9a02      	ldr	r2, [sp, #8]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6013      	str	r3, [r2, #0]
 800feba:	2301      	movs	r3, #1
 800febc:	6123      	str	r3, [r4, #16]
 800febe:	f8ca 3000 	str.w	r3, [sl]
 800fec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fec4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800fec8:	601c      	str	r4, [r3, #0]
 800feca:	e735      	b.n	800fd38 <__gethex+0x114>
 800fecc:	1e69      	subs	r1, r5, #1
 800fece:	4620      	mov	r0, r4
 800fed0:	f7fd ffab 	bl	800de2a <__any_on>
 800fed4:	2800      	cmp	r0, #0
 800fed6:	d1ed      	bne.n	800feb4 <__gethex+0x290>
 800fed8:	4621      	mov	r1, r4
 800feda:	4648      	mov	r0, r9
 800fedc:	f7fd fb5c 	bl	800d598 <_Bfree>
 800fee0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fee2:	2300      	movs	r3, #0
 800fee4:	6013      	str	r3, [r2, #0]
 800fee6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800feea:	e725      	b.n	800fd38 <__gethex+0x114>
 800feec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1f2      	bne.n	800fed8 <__gethex+0x2b4>
 800fef2:	e7df      	b.n	800feb4 <__gethex+0x290>
 800fef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d1dc      	bne.n	800feb4 <__gethex+0x290>
 800fefa:	e7ed      	b.n	800fed8 <__gethex+0x2b4>
 800fefc:	08018854 	.word	0x08018854
 800ff00:	080186ec 	.word	0x080186ec
 800ff04:	08018918 	.word	0x08018918
 800ff08:	f106 38ff 	add.w	r8, r6, #4294967295
 800ff0c:	f1bb 0f00 	cmp.w	fp, #0
 800ff10:	d133      	bne.n	800ff7a <__gethex+0x356>
 800ff12:	f1b8 0f00 	cmp.w	r8, #0
 800ff16:	d004      	beq.n	800ff22 <__gethex+0x2fe>
 800ff18:	4641      	mov	r1, r8
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	f7fd ff85 	bl	800de2a <__any_on>
 800ff20:	4683      	mov	fp, r0
 800ff22:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ff26:	2301      	movs	r3, #1
 800ff28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ff2c:	f008 081f 	and.w	r8, r8, #31
 800ff30:	fa03 f308 	lsl.w	r3, r3, r8
 800ff34:	4213      	tst	r3, r2
 800ff36:	4631      	mov	r1, r6
 800ff38:	4620      	mov	r0, r4
 800ff3a:	bf18      	it	ne
 800ff3c:	f04b 0b02 	orrne.w	fp, fp, #2
 800ff40:	1bad      	subs	r5, r5, r6
 800ff42:	f7ff fe07 	bl	800fb54 <rshift>
 800ff46:	687e      	ldr	r6, [r7, #4]
 800ff48:	f04f 0802 	mov.w	r8, #2
 800ff4c:	f1bb 0f00 	cmp.w	fp, #0
 800ff50:	d04a      	beq.n	800ffe8 <__gethex+0x3c4>
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	2b02      	cmp	r3, #2
 800ff56:	d016      	beq.n	800ff86 <__gethex+0x362>
 800ff58:	2b03      	cmp	r3, #3
 800ff5a:	d018      	beq.n	800ff8e <__gethex+0x36a>
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d109      	bne.n	800ff74 <__gethex+0x350>
 800ff60:	f01b 0f02 	tst.w	fp, #2
 800ff64:	d006      	beq.n	800ff74 <__gethex+0x350>
 800ff66:	f8da 3000 	ldr.w	r3, [sl]
 800ff6a:	ea4b 0b03 	orr.w	fp, fp, r3
 800ff6e:	f01b 0f01 	tst.w	fp, #1
 800ff72:	d10f      	bne.n	800ff94 <__gethex+0x370>
 800ff74:	f048 0810 	orr.w	r8, r8, #16
 800ff78:	e036      	b.n	800ffe8 <__gethex+0x3c4>
 800ff7a:	f04f 0b01 	mov.w	fp, #1
 800ff7e:	e7d0      	b.n	800ff22 <__gethex+0x2fe>
 800ff80:	f04f 0801 	mov.w	r8, #1
 800ff84:	e7e2      	b.n	800ff4c <__gethex+0x328>
 800ff86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff88:	f1c3 0301 	rsb	r3, r3, #1
 800ff8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d0ef      	beq.n	800ff74 <__gethex+0x350>
 800ff94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ff98:	f104 0214 	add.w	r2, r4, #20
 800ff9c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ffa0:	9301      	str	r3, [sp, #4]
 800ffa2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	4694      	mov	ip, r2
 800ffaa:	f852 1b04 	ldr.w	r1, [r2], #4
 800ffae:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ffb2:	d01e      	beq.n	800fff2 <__gethex+0x3ce>
 800ffb4:	3101      	adds	r1, #1
 800ffb6:	f8cc 1000 	str.w	r1, [ip]
 800ffba:	f1b8 0f02 	cmp.w	r8, #2
 800ffbe:	f104 0214 	add.w	r2, r4, #20
 800ffc2:	d13d      	bne.n	8010040 <__gethex+0x41c>
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	3b01      	subs	r3, #1
 800ffc8:	42ab      	cmp	r3, r5
 800ffca:	d10b      	bne.n	800ffe4 <__gethex+0x3c0>
 800ffcc:	1169      	asrs	r1, r5, #5
 800ffce:	2301      	movs	r3, #1
 800ffd0:	f005 051f 	and.w	r5, r5, #31
 800ffd4:	fa03 f505 	lsl.w	r5, r3, r5
 800ffd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ffdc:	421d      	tst	r5, r3
 800ffde:	bf18      	it	ne
 800ffe0:	f04f 0801 	movne.w	r8, #1
 800ffe4:	f048 0820 	orr.w	r8, r8, #32
 800ffe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffea:	601c      	str	r4, [r3, #0]
 800ffec:	9b02      	ldr	r3, [sp, #8]
 800ffee:	601e      	str	r6, [r3, #0]
 800fff0:	e6a2      	b.n	800fd38 <__gethex+0x114>
 800fff2:	4290      	cmp	r0, r2
 800fff4:	f842 3c04 	str.w	r3, [r2, #-4]
 800fff8:	d8d6      	bhi.n	800ffa8 <__gethex+0x384>
 800fffa:	68a2      	ldr	r2, [r4, #8]
 800fffc:	4593      	cmp	fp, r2
 800fffe:	db17      	blt.n	8010030 <__gethex+0x40c>
 8010000:	6861      	ldr	r1, [r4, #4]
 8010002:	4648      	mov	r0, r9
 8010004:	3101      	adds	r1, #1
 8010006:	f7fd fa87 	bl	800d518 <_Balloc>
 801000a:	4682      	mov	sl, r0
 801000c:	b918      	cbnz	r0, 8010016 <__gethex+0x3f2>
 801000e:	4b1b      	ldr	r3, [pc, #108]	; (801007c <__gethex+0x458>)
 8010010:	4602      	mov	r2, r0
 8010012:	2184      	movs	r1, #132	; 0x84
 8010014:	e6b3      	b.n	800fd7e <__gethex+0x15a>
 8010016:	6922      	ldr	r2, [r4, #16]
 8010018:	3202      	adds	r2, #2
 801001a:	f104 010c 	add.w	r1, r4, #12
 801001e:	0092      	lsls	r2, r2, #2
 8010020:	300c      	adds	r0, #12
 8010022:	f7fc fc24 	bl	800c86e <memcpy>
 8010026:	4621      	mov	r1, r4
 8010028:	4648      	mov	r0, r9
 801002a:	f7fd fab5 	bl	800d598 <_Bfree>
 801002e:	4654      	mov	r4, sl
 8010030:	6922      	ldr	r2, [r4, #16]
 8010032:	1c51      	adds	r1, r2, #1
 8010034:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010038:	6121      	str	r1, [r4, #16]
 801003a:	2101      	movs	r1, #1
 801003c:	6151      	str	r1, [r2, #20]
 801003e:	e7bc      	b.n	800ffba <__gethex+0x396>
 8010040:	6921      	ldr	r1, [r4, #16]
 8010042:	4559      	cmp	r1, fp
 8010044:	dd0b      	ble.n	801005e <__gethex+0x43a>
 8010046:	2101      	movs	r1, #1
 8010048:	4620      	mov	r0, r4
 801004a:	f7ff fd83 	bl	800fb54 <rshift>
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	3601      	adds	r6, #1
 8010052:	42b3      	cmp	r3, r6
 8010054:	f6ff aedb 	blt.w	800fe0e <__gethex+0x1ea>
 8010058:	f04f 0801 	mov.w	r8, #1
 801005c:	e7c2      	b.n	800ffe4 <__gethex+0x3c0>
 801005e:	f015 051f 	ands.w	r5, r5, #31
 8010062:	d0f9      	beq.n	8010058 <__gethex+0x434>
 8010064:	9b01      	ldr	r3, [sp, #4]
 8010066:	441a      	add	r2, r3
 8010068:	f1c5 0520 	rsb	r5, r5, #32
 801006c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8010070:	f7fd fb44 	bl	800d6fc <__hi0bits>
 8010074:	42a8      	cmp	r0, r5
 8010076:	dbe6      	blt.n	8010046 <__gethex+0x422>
 8010078:	e7ee      	b.n	8010058 <__gethex+0x434>
 801007a:	bf00      	nop
 801007c:	080186ec 	.word	0x080186ec

08010080 <L_shift>:
 8010080:	f1c2 0208 	rsb	r2, r2, #8
 8010084:	0092      	lsls	r2, r2, #2
 8010086:	b570      	push	{r4, r5, r6, lr}
 8010088:	f1c2 0620 	rsb	r6, r2, #32
 801008c:	6843      	ldr	r3, [r0, #4]
 801008e:	6804      	ldr	r4, [r0, #0]
 8010090:	fa03 f506 	lsl.w	r5, r3, r6
 8010094:	432c      	orrs	r4, r5
 8010096:	40d3      	lsrs	r3, r2
 8010098:	6004      	str	r4, [r0, #0]
 801009a:	f840 3f04 	str.w	r3, [r0, #4]!
 801009e:	4288      	cmp	r0, r1
 80100a0:	d3f4      	bcc.n	801008c <L_shift+0xc>
 80100a2:	bd70      	pop	{r4, r5, r6, pc}

080100a4 <__match>:
 80100a4:	b530      	push	{r4, r5, lr}
 80100a6:	6803      	ldr	r3, [r0, #0]
 80100a8:	3301      	adds	r3, #1
 80100aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100ae:	b914      	cbnz	r4, 80100b6 <__match+0x12>
 80100b0:	6003      	str	r3, [r0, #0]
 80100b2:	2001      	movs	r0, #1
 80100b4:	bd30      	pop	{r4, r5, pc}
 80100b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80100be:	2d19      	cmp	r5, #25
 80100c0:	bf98      	it	ls
 80100c2:	3220      	addls	r2, #32
 80100c4:	42a2      	cmp	r2, r4
 80100c6:	d0f0      	beq.n	80100aa <__match+0x6>
 80100c8:	2000      	movs	r0, #0
 80100ca:	e7f3      	b.n	80100b4 <__match+0x10>

080100cc <__hexnan>:
 80100cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d0:	680b      	ldr	r3, [r1, #0]
 80100d2:	6801      	ldr	r1, [r0, #0]
 80100d4:	115e      	asrs	r6, r3, #5
 80100d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80100da:	f013 031f 	ands.w	r3, r3, #31
 80100de:	b087      	sub	sp, #28
 80100e0:	bf18      	it	ne
 80100e2:	3604      	addne	r6, #4
 80100e4:	2500      	movs	r5, #0
 80100e6:	1f37      	subs	r7, r6, #4
 80100e8:	4682      	mov	sl, r0
 80100ea:	4690      	mov	r8, r2
 80100ec:	9301      	str	r3, [sp, #4]
 80100ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80100f2:	46b9      	mov	r9, r7
 80100f4:	463c      	mov	r4, r7
 80100f6:	9502      	str	r5, [sp, #8]
 80100f8:	46ab      	mov	fp, r5
 80100fa:	784a      	ldrb	r2, [r1, #1]
 80100fc:	1c4b      	adds	r3, r1, #1
 80100fe:	9303      	str	r3, [sp, #12]
 8010100:	b342      	cbz	r2, 8010154 <__hexnan+0x88>
 8010102:	4610      	mov	r0, r2
 8010104:	9105      	str	r1, [sp, #20]
 8010106:	9204      	str	r2, [sp, #16]
 8010108:	f7ff fd76 	bl	800fbf8 <__hexdig_fun>
 801010c:	2800      	cmp	r0, #0
 801010e:	d14f      	bne.n	80101b0 <__hexnan+0xe4>
 8010110:	9a04      	ldr	r2, [sp, #16]
 8010112:	9905      	ldr	r1, [sp, #20]
 8010114:	2a20      	cmp	r2, #32
 8010116:	d818      	bhi.n	801014a <__hexnan+0x7e>
 8010118:	9b02      	ldr	r3, [sp, #8]
 801011a:	459b      	cmp	fp, r3
 801011c:	dd13      	ble.n	8010146 <__hexnan+0x7a>
 801011e:	454c      	cmp	r4, r9
 8010120:	d206      	bcs.n	8010130 <__hexnan+0x64>
 8010122:	2d07      	cmp	r5, #7
 8010124:	dc04      	bgt.n	8010130 <__hexnan+0x64>
 8010126:	462a      	mov	r2, r5
 8010128:	4649      	mov	r1, r9
 801012a:	4620      	mov	r0, r4
 801012c:	f7ff ffa8 	bl	8010080 <L_shift>
 8010130:	4544      	cmp	r4, r8
 8010132:	d950      	bls.n	80101d6 <__hexnan+0x10a>
 8010134:	2300      	movs	r3, #0
 8010136:	f1a4 0904 	sub.w	r9, r4, #4
 801013a:	f844 3c04 	str.w	r3, [r4, #-4]
 801013e:	f8cd b008 	str.w	fp, [sp, #8]
 8010142:	464c      	mov	r4, r9
 8010144:	461d      	mov	r5, r3
 8010146:	9903      	ldr	r1, [sp, #12]
 8010148:	e7d7      	b.n	80100fa <__hexnan+0x2e>
 801014a:	2a29      	cmp	r2, #41	; 0x29
 801014c:	d155      	bne.n	80101fa <__hexnan+0x12e>
 801014e:	3102      	adds	r1, #2
 8010150:	f8ca 1000 	str.w	r1, [sl]
 8010154:	f1bb 0f00 	cmp.w	fp, #0
 8010158:	d04f      	beq.n	80101fa <__hexnan+0x12e>
 801015a:	454c      	cmp	r4, r9
 801015c:	d206      	bcs.n	801016c <__hexnan+0xa0>
 801015e:	2d07      	cmp	r5, #7
 8010160:	dc04      	bgt.n	801016c <__hexnan+0xa0>
 8010162:	462a      	mov	r2, r5
 8010164:	4649      	mov	r1, r9
 8010166:	4620      	mov	r0, r4
 8010168:	f7ff ff8a 	bl	8010080 <L_shift>
 801016c:	4544      	cmp	r4, r8
 801016e:	d934      	bls.n	80101da <__hexnan+0x10e>
 8010170:	f1a8 0204 	sub.w	r2, r8, #4
 8010174:	4623      	mov	r3, r4
 8010176:	f853 1b04 	ldr.w	r1, [r3], #4
 801017a:	f842 1f04 	str.w	r1, [r2, #4]!
 801017e:	429f      	cmp	r7, r3
 8010180:	d2f9      	bcs.n	8010176 <__hexnan+0xaa>
 8010182:	1b3b      	subs	r3, r7, r4
 8010184:	f023 0303 	bic.w	r3, r3, #3
 8010188:	3304      	adds	r3, #4
 801018a:	3e03      	subs	r6, #3
 801018c:	3401      	adds	r4, #1
 801018e:	42a6      	cmp	r6, r4
 8010190:	bf38      	it	cc
 8010192:	2304      	movcc	r3, #4
 8010194:	4443      	add	r3, r8
 8010196:	2200      	movs	r2, #0
 8010198:	f843 2b04 	str.w	r2, [r3], #4
 801019c:	429f      	cmp	r7, r3
 801019e:	d2fb      	bcs.n	8010198 <__hexnan+0xcc>
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	b91b      	cbnz	r3, 80101ac <__hexnan+0xe0>
 80101a4:	4547      	cmp	r7, r8
 80101a6:	d126      	bne.n	80101f6 <__hexnan+0x12a>
 80101a8:	2301      	movs	r3, #1
 80101aa:	603b      	str	r3, [r7, #0]
 80101ac:	2005      	movs	r0, #5
 80101ae:	e025      	b.n	80101fc <__hexnan+0x130>
 80101b0:	3501      	adds	r5, #1
 80101b2:	2d08      	cmp	r5, #8
 80101b4:	f10b 0b01 	add.w	fp, fp, #1
 80101b8:	dd06      	ble.n	80101c8 <__hexnan+0xfc>
 80101ba:	4544      	cmp	r4, r8
 80101bc:	d9c3      	bls.n	8010146 <__hexnan+0x7a>
 80101be:	2300      	movs	r3, #0
 80101c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80101c4:	2501      	movs	r5, #1
 80101c6:	3c04      	subs	r4, #4
 80101c8:	6822      	ldr	r2, [r4, #0]
 80101ca:	f000 000f 	and.w	r0, r0, #15
 80101ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80101d2:	6020      	str	r0, [r4, #0]
 80101d4:	e7b7      	b.n	8010146 <__hexnan+0x7a>
 80101d6:	2508      	movs	r5, #8
 80101d8:	e7b5      	b.n	8010146 <__hexnan+0x7a>
 80101da:	9b01      	ldr	r3, [sp, #4]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d0df      	beq.n	80101a0 <__hexnan+0xd4>
 80101e0:	f1c3 0320 	rsb	r3, r3, #32
 80101e4:	f04f 32ff 	mov.w	r2, #4294967295
 80101e8:	40da      	lsrs	r2, r3
 80101ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80101ee:	4013      	ands	r3, r2
 80101f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80101f4:	e7d4      	b.n	80101a0 <__hexnan+0xd4>
 80101f6:	3f04      	subs	r7, #4
 80101f8:	e7d2      	b.n	80101a0 <__hexnan+0xd4>
 80101fa:	2004      	movs	r0, #4
 80101fc:	b007      	add	sp, #28
 80101fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010202 <__ascii_mbtowc>:
 8010202:	b082      	sub	sp, #8
 8010204:	b901      	cbnz	r1, 8010208 <__ascii_mbtowc+0x6>
 8010206:	a901      	add	r1, sp, #4
 8010208:	b142      	cbz	r2, 801021c <__ascii_mbtowc+0x1a>
 801020a:	b14b      	cbz	r3, 8010220 <__ascii_mbtowc+0x1e>
 801020c:	7813      	ldrb	r3, [r2, #0]
 801020e:	600b      	str	r3, [r1, #0]
 8010210:	7812      	ldrb	r2, [r2, #0]
 8010212:	1e10      	subs	r0, r2, #0
 8010214:	bf18      	it	ne
 8010216:	2001      	movne	r0, #1
 8010218:	b002      	add	sp, #8
 801021a:	4770      	bx	lr
 801021c:	4610      	mov	r0, r2
 801021e:	e7fb      	b.n	8010218 <__ascii_mbtowc+0x16>
 8010220:	f06f 0001 	mvn.w	r0, #1
 8010224:	e7f8      	b.n	8010218 <__ascii_mbtowc+0x16>

08010226 <_realloc_r>:
 8010226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801022a:	4680      	mov	r8, r0
 801022c:	4614      	mov	r4, r2
 801022e:	460e      	mov	r6, r1
 8010230:	b921      	cbnz	r1, 801023c <_realloc_r+0x16>
 8010232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010236:	4611      	mov	r1, r2
 8010238:	f7fb b82a 	b.w	800b290 <_malloc_r>
 801023c:	b92a      	cbnz	r2, 801024a <_realloc_r+0x24>
 801023e:	f7fd f91f 	bl	800d480 <_free_r>
 8010242:	4625      	mov	r5, r4
 8010244:	4628      	mov	r0, r5
 8010246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801024a:	f000 f8b6 	bl	80103ba <_malloc_usable_size_r>
 801024e:	4284      	cmp	r4, r0
 8010250:	4607      	mov	r7, r0
 8010252:	d802      	bhi.n	801025a <_realloc_r+0x34>
 8010254:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010258:	d812      	bhi.n	8010280 <_realloc_r+0x5a>
 801025a:	4621      	mov	r1, r4
 801025c:	4640      	mov	r0, r8
 801025e:	f7fb f817 	bl	800b290 <_malloc_r>
 8010262:	4605      	mov	r5, r0
 8010264:	2800      	cmp	r0, #0
 8010266:	d0ed      	beq.n	8010244 <_realloc_r+0x1e>
 8010268:	42bc      	cmp	r4, r7
 801026a:	4622      	mov	r2, r4
 801026c:	4631      	mov	r1, r6
 801026e:	bf28      	it	cs
 8010270:	463a      	movcs	r2, r7
 8010272:	f7fc fafc 	bl	800c86e <memcpy>
 8010276:	4631      	mov	r1, r6
 8010278:	4640      	mov	r0, r8
 801027a:	f7fd f901 	bl	800d480 <_free_r>
 801027e:	e7e1      	b.n	8010244 <_realloc_r+0x1e>
 8010280:	4635      	mov	r5, r6
 8010282:	e7df      	b.n	8010244 <_realloc_r+0x1e>

08010284 <_strtoul_l.constprop.0>:
 8010284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010288:	4f36      	ldr	r7, [pc, #216]	; (8010364 <_strtoul_l.constprop.0+0xe0>)
 801028a:	4686      	mov	lr, r0
 801028c:	460d      	mov	r5, r1
 801028e:	4628      	mov	r0, r5
 8010290:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010294:	5d3e      	ldrb	r6, [r7, r4]
 8010296:	f016 0608 	ands.w	r6, r6, #8
 801029a:	d1f8      	bne.n	801028e <_strtoul_l.constprop.0+0xa>
 801029c:	2c2d      	cmp	r4, #45	; 0x2d
 801029e:	d130      	bne.n	8010302 <_strtoul_l.constprop.0+0x7e>
 80102a0:	782c      	ldrb	r4, [r5, #0]
 80102a2:	2601      	movs	r6, #1
 80102a4:	1c85      	adds	r5, r0, #2
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d057      	beq.n	801035a <_strtoul_l.constprop.0+0xd6>
 80102aa:	2b10      	cmp	r3, #16
 80102ac:	d109      	bne.n	80102c2 <_strtoul_l.constprop.0+0x3e>
 80102ae:	2c30      	cmp	r4, #48	; 0x30
 80102b0:	d107      	bne.n	80102c2 <_strtoul_l.constprop.0+0x3e>
 80102b2:	7828      	ldrb	r0, [r5, #0]
 80102b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80102b8:	2858      	cmp	r0, #88	; 0x58
 80102ba:	d149      	bne.n	8010350 <_strtoul_l.constprop.0+0xcc>
 80102bc:	786c      	ldrb	r4, [r5, #1]
 80102be:	2310      	movs	r3, #16
 80102c0:	3502      	adds	r5, #2
 80102c2:	f04f 38ff 	mov.w	r8, #4294967295
 80102c6:	2700      	movs	r7, #0
 80102c8:	fbb8 f8f3 	udiv	r8, r8, r3
 80102cc:	fb03 f908 	mul.w	r9, r3, r8
 80102d0:	ea6f 0909 	mvn.w	r9, r9
 80102d4:	4638      	mov	r0, r7
 80102d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80102da:	f1bc 0f09 	cmp.w	ip, #9
 80102de:	d815      	bhi.n	801030c <_strtoul_l.constprop.0+0x88>
 80102e0:	4664      	mov	r4, ip
 80102e2:	42a3      	cmp	r3, r4
 80102e4:	dd23      	ble.n	801032e <_strtoul_l.constprop.0+0xaa>
 80102e6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80102ea:	d007      	beq.n	80102fc <_strtoul_l.constprop.0+0x78>
 80102ec:	4580      	cmp	r8, r0
 80102ee:	d31b      	bcc.n	8010328 <_strtoul_l.constprop.0+0xa4>
 80102f0:	d101      	bne.n	80102f6 <_strtoul_l.constprop.0+0x72>
 80102f2:	45a1      	cmp	r9, r4
 80102f4:	db18      	blt.n	8010328 <_strtoul_l.constprop.0+0xa4>
 80102f6:	fb00 4003 	mla	r0, r0, r3, r4
 80102fa:	2701      	movs	r7, #1
 80102fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010300:	e7e9      	b.n	80102d6 <_strtoul_l.constprop.0+0x52>
 8010302:	2c2b      	cmp	r4, #43	; 0x2b
 8010304:	bf04      	itt	eq
 8010306:	782c      	ldrbeq	r4, [r5, #0]
 8010308:	1c85      	addeq	r5, r0, #2
 801030a:	e7cc      	b.n	80102a6 <_strtoul_l.constprop.0+0x22>
 801030c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010310:	f1bc 0f19 	cmp.w	ip, #25
 8010314:	d801      	bhi.n	801031a <_strtoul_l.constprop.0+0x96>
 8010316:	3c37      	subs	r4, #55	; 0x37
 8010318:	e7e3      	b.n	80102e2 <_strtoul_l.constprop.0+0x5e>
 801031a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801031e:	f1bc 0f19 	cmp.w	ip, #25
 8010322:	d804      	bhi.n	801032e <_strtoul_l.constprop.0+0xaa>
 8010324:	3c57      	subs	r4, #87	; 0x57
 8010326:	e7dc      	b.n	80102e2 <_strtoul_l.constprop.0+0x5e>
 8010328:	f04f 37ff 	mov.w	r7, #4294967295
 801032c:	e7e6      	b.n	80102fc <_strtoul_l.constprop.0+0x78>
 801032e:	1c7b      	adds	r3, r7, #1
 8010330:	d106      	bne.n	8010340 <_strtoul_l.constprop.0+0xbc>
 8010332:	2322      	movs	r3, #34	; 0x22
 8010334:	f8ce 3000 	str.w	r3, [lr]
 8010338:	4638      	mov	r0, r7
 801033a:	b932      	cbnz	r2, 801034a <_strtoul_l.constprop.0+0xc6>
 801033c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010340:	b106      	cbz	r6, 8010344 <_strtoul_l.constprop.0+0xc0>
 8010342:	4240      	negs	r0, r0
 8010344:	2a00      	cmp	r2, #0
 8010346:	d0f9      	beq.n	801033c <_strtoul_l.constprop.0+0xb8>
 8010348:	b107      	cbz	r7, 801034c <_strtoul_l.constprop.0+0xc8>
 801034a:	1e69      	subs	r1, r5, #1
 801034c:	6011      	str	r1, [r2, #0]
 801034e:	e7f5      	b.n	801033c <_strtoul_l.constprop.0+0xb8>
 8010350:	2430      	movs	r4, #48	; 0x30
 8010352:	2b00      	cmp	r3, #0
 8010354:	d1b5      	bne.n	80102c2 <_strtoul_l.constprop.0+0x3e>
 8010356:	2308      	movs	r3, #8
 8010358:	e7b3      	b.n	80102c2 <_strtoul_l.constprop.0+0x3e>
 801035a:	2c30      	cmp	r4, #48	; 0x30
 801035c:	d0a9      	beq.n	80102b2 <_strtoul_l.constprop.0+0x2e>
 801035e:	230a      	movs	r3, #10
 8010360:	e7af      	b.n	80102c2 <_strtoul_l.constprop.0+0x3e>
 8010362:	bf00      	nop
 8010364:	08018539 	.word	0x08018539

08010368 <_strtoul_r>:
 8010368:	f7ff bf8c 	b.w	8010284 <_strtoul_l.constprop.0>

0801036c <__ascii_wctomb>:
 801036c:	b149      	cbz	r1, 8010382 <__ascii_wctomb+0x16>
 801036e:	2aff      	cmp	r2, #255	; 0xff
 8010370:	bf85      	ittet	hi
 8010372:	238a      	movhi	r3, #138	; 0x8a
 8010374:	6003      	strhi	r3, [r0, #0]
 8010376:	700a      	strbls	r2, [r1, #0]
 8010378:	f04f 30ff 	movhi.w	r0, #4294967295
 801037c:	bf98      	it	ls
 801037e:	2001      	movls	r0, #1
 8010380:	4770      	bx	lr
 8010382:	4608      	mov	r0, r1
 8010384:	4770      	bx	lr
	...

08010388 <fiprintf>:
 8010388:	b40e      	push	{r1, r2, r3}
 801038a:	b503      	push	{r0, r1, lr}
 801038c:	4601      	mov	r1, r0
 801038e:	ab03      	add	r3, sp, #12
 8010390:	4805      	ldr	r0, [pc, #20]	; (80103a8 <fiprintf+0x20>)
 8010392:	f853 2b04 	ldr.w	r2, [r3], #4
 8010396:	6800      	ldr	r0, [r0, #0]
 8010398:	9301      	str	r3, [sp, #4]
 801039a:	f7fe fcbb 	bl	800ed14 <_vfiprintf_r>
 801039e:	b002      	add	sp, #8
 80103a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80103a4:	b003      	add	sp, #12
 80103a6:	4770      	bx	lr
 80103a8:	200008e0 	.word	0x200008e0

080103ac <abort>:
 80103ac:	b508      	push	{r3, lr}
 80103ae:	2006      	movs	r0, #6
 80103b0:	f000 f834 	bl	801041c <raise>
 80103b4:	2001      	movs	r0, #1
 80103b6:	f000 fd2b 	bl	8010e10 <_exit>

080103ba <_malloc_usable_size_r>:
 80103ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103be:	1f18      	subs	r0, r3, #4
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	bfbc      	itt	lt
 80103c4:	580b      	ldrlt	r3, [r1, r0]
 80103c6:	18c0      	addlt	r0, r0, r3
 80103c8:	4770      	bx	lr

080103ca <_raise_r>:
 80103ca:	291f      	cmp	r1, #31
 80103cc:	b538      	push	{r3, r4, r5, lr}
 80103ce:	4604      	mov	r4, r0
 80103d0:	460d      	mov	r5, r1
 80103d2:	d904      	bls.n	80103de <_raise_r+0x14>
 80103d4:	2316      	movs	r3, #22
 80103d6:	6003      	str	r3, [r0, #0]
 80103d8:	f04f 30ff 	mov.w	r0, #4294967295
 80103dc:	bd38      	pop	{r3, r4, r5, pc}
 80103de:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80103e0:	b112      	cbz	r2, 80103e8 <_raise_r+0x1e>
 80103e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103e6:	b94b      	cbnz	r3, 80103fc <_raise_r+0x32>
 80103e8:	4620      	mov	r0, r4
 80103ea:	f000 f831 	bl	8010450 <_getpid_r>
 80103ee:	462a      	mov	r2, r5
 80103f0:	4601      	mov	r1, r0
 80103f2:	4620      	mov	r0, r4
 80103f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103f8:	f000 b818 	b.w	801042c <_kill_r>
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	d00a      	beq.n	8010416 <_raise_r+0x4c>
 8010400:	1c59      	adds	r1, r3, #1
 8010402:	d103      	bne.n	801040c <_raise_r+0x42>
 8010404:	2316      	movs	r3, #22
 8010406:	6003      	str	r3, [r0, #0]
 8010408:	2001      	movs	r0, #1
 801040a:	e7e7      	b.n	80103dc <_raise_r+0x12>
 801040c:	2400      	movs	r4, #0
 801040e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010412:	4628      	mov	r0, r5
 8010414:	4798      	blx	r3
 8010416:	2000      	movs	r0, #0
 8010418:	e7e0      	b.n	80103dc <_raise_r+0x12>
	...

0801041c <raise>:
 801041c:	4b02      	ldr	r3, [pc, #8]	; (8010428 <raise+0xc>)
 801041e:	4601      	mov	r1, r0
 8010420:	6818      	ldr	r0, [r3, #0]
 8010422:	f7ff bfd2 	b.w	80103ca <_raise_r>
 8010426:	bf00      	nop
 8010428:	200008e0 	.word	0x200008e0

0801042c <_kill_r>:
 801042c:	b538      	push	{r3, r4, r5, lr}
 801042e:	4d07      	ldr	r5, [pc, #28]	; (801044c <_kill_r+0x20>)
 8010430:	2300      	movs	r3, #0
 8010432:	4604      	mov	r4, r0
 8010434:	4608      	mov	r0, r1
 8010436:	4611      	mov	r1, r2
 8010438:	602b      	str	r3, [r5, #0]
 801043a:	f000 fce1 	bl	8010e00 <_kill>
 801043e:	1c43      	adds	r3, r0, #1
 8010440:	d102      	bne.n	8010448 <_kill_r+0x1c>
 8010442:	682b      	ldr	r3, [r5, #0]
 8010444:	b103      	cbz	r3, 8010448 <_kill_r+0x1c>
 8010446:	6023      	str	r3, [r4, #0]
 8010448:	bd38      	pop	{r3, r4, r5, pc}
 801044a:	bf00      	nop
 801044c:	20003b78 	.word	0x20003b78

08010450 <_getpid_r>:
 8010450:	f000 bcce 	b.w	8010df0 <_getpid>
 8010454:	0000      	movs	r0, r0
	...

08010458 <sqrt>:
 8010458:	b508      	push	{r3, lr}
 801045a:	ed2d 8b04 	vpush	{d8-d9}
 801045e:	eeb0 8b40 	vmov.f64	d8, d0
 8010462:	f000 fc05 	bl	8010c70 <__ieee754_sqrt>
 8010466:	eeb4 8b48 	vcmp.f64	d8, d8
 801046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046e:	d60c      	bvs.n	801048a <sqrt+0x32>
 8010470:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8010490 <sqrt+0x38>
 8010474:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801047c:	d505      	bpl.n	801048a <sqrt+0x32>
 801047e:	f7fc f9c1 	bl	800c804 <__errno>
 8010482:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010486:	2321      	movs	r3, #33	; 0x21
 8010488:	6003      	str	r3, [r0, #0]
 801048a:	ecbd 8b04 	vpop	{d8-d9}
 801048e:	bd08      	pop	{r3, pc}
	...

08010498 <with_errno>:
 8010498:	b513      	push	{r0, r1, r4, lr}
 801049a:	4604      	mov	r4, r0
 801049c:	ed8d 0b00 	vstr	d0, [sp]
 80104a0:	f7fc f9b0 	bl	800c804 <__errno>
 80104a4:	ed9d 0b00 	vldr	d0, [sp]
 80104a8:	6004      	str	r4, [r0, #0]
 80104aa:	b002      	add	sp, #8
 80104ac:	bd10      	pop	{r4, pc}

080104ae <xflow>:
 80104ae:	b082      	sub	sp, #8
 80104b0:	b158      	cbz	r0, 80104ca <xflow+0x1c>
 80104b2:	eeb1 7b40 	vneg.f64	d7, d0
 80104b6:	ed8d 7b00 	vstr	d7, [sp]
 80104ba:	ed9d 7b00 	vldr	d7, [sp]
 80104be:	2022      	movs	r0, #34	; 0x22
 80104c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80104c4:	b002      	add	sp, #8
 80104c6:	f7ff bfe7 	b.w	8010498 <with_errno>
 80104ca:	eeb0 7b40 	vmov.f64	d7, d0
 80104ce:	e7f2      	b.n	80104b6 <xflow+0x8>

080104d0 <__math_uflow>:
 80104d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80104d8 <__math_uflow+0x8>
 80104d4:	f7ff bfeb 	b.w	80104ae <xflow>
 80104d8:	00000000 	.word	0x00000000
 80104dc:	10000000 	.word	0x10000000

080104e0 <__math_oflow>:
 80104e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80104e8 <__math_oflow+0x8>
 80104e4:	f7ff bfe3 	b.w	80104ae <xflow>
 80104e8:	00000000 	.word	0x00000000
 80104ec:	70000000 	.word	0x70000000

080104f0 <__math_divzero>:
 80104f0:	b082      	sub	sp, #8
 80104f2:	2800      	cmp	r0, #0
 80104f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80104f8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80104fc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010500:	ed8d 7b00 	vstr	d7, [sp]
 8010504:	ed9d 0b00 	vldr	d0, [sp]
 8010508:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010518 <__math_divzero+0x28>
 801050c:	2022      	movs	r0, #34	; 0x22
 801050e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8010512:	b002      	add	sp, #8
 8010514:	f7ff bfc0 	b.w	8010498 <with_errno>
	...

08010520 <__math_invalid>:
 8010520:	eeb0 7b40 	vmov.f64	d7, d0
 8010524:	eeb4 7b47 	vcmp.f64	d7, d7
 8010528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801052c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010530:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8010534:	d602      	bvs.n	801053c <__math_invalid+0x1c>
 8010536:	2021      	movs	r0, #33	; 0x21
 8010538:	f7ff bfae 	b.w	8010498 <with_errno>
 801053c:	4770      	bx	lr

0801053e <__math_check_uflow>:
 801053e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010546:	d102      	bne.n	801054e <__math_check_uflow+0x10>
 8010548:	2022      	movs	r0, #34	; 0x22
 801054a:	f7ff bfa5 	b.w	8010498 <with_errno>
 801054e:	4770      	bx	lr

08010550 <__math_check_oflow>:
 8010550:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8010570 <__math_check_oflow+0x20>
 8010554:	eeb0 7bc0 	vabs.f64	d7, d0
 8010558:	eeb4 7b46 	vcmp.f64	d7, d6
 801055c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010560:	dd02      	ble.n	8010568 <__math_check_oflow+0x18>
 8010562:	2022      	movs	r0, #34	; 0x22
 8010564:	f7ff bf98 	b.w	8010498 <with_errno>
 8010568:	4770      	bx	lr
 801056a:	bf00      	nop
 801056c:	f3af 8000 	nop.w
 8010570:	ffffffff 	.word	0xffffffff
 8010574:	7fefffff 	.word	0x7fefffff

08010578 <log>:
 8010578:	b470      	push	{r4, r5, r6}
 801057a:	ee10 1a90 	vmov	r1, s1
 801057e:	ee10 3a10 	vmov	r3, s0
 8010582:	f04f 34ff 	mov.w	r4, #4294967295
 8010586:	429c      	cmp	r4, r3
 8010588:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 801058c:	4c72      	ldr	r4, [pc, #456]	; (8010758 <log+0x1e0>)
 801058e:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 8010592:	4184      	sbcs	r4, r0
 8010594:	ed2d 8b02 	vpush	{d8}
 8010598:	ea4f 4211 	mov.w	r2, r1, lsr #16
 801059c:	d35a      	bcc.n	8010654 <log+0xdc>
 801059e:	4a6f      	ldr	r2, [pc, #444]	; (801075c <log+0x1e4>)
 80105a0:	4291      	cmp	r1, r2
 80105a2:	bf08      	it	eq
 80105a4:	2b00      	cmpeq	r3, #0
 80105a6:	f000 80c5 	beq.w	8010734 <log+0x1bc>
 80105aa:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80105ae:	ee30 0b47 	vsub.f64	d0, d0, d7
 80105b2:	4b6b      	ldr	r3, [pc, #428]	; (8010760 <log+0x1e8>)
 80105b4:	ee20 2b00 	vmul.f64	d2, d0, d0
 80105b8:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80105bc:	ee20 4b02 	vmul.f64	d4, d0, d2
 80105c0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80105c4:	eea6 7b00 	vfma.f64	d7, d6, d0
 80105c8:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80105cc:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 80105d0:	eea6 7b02 	vfma.f64	d7, d6, d2
 80105d4:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80105d8:	eea5 6b00 	vfma.f64	d6, d5, d0
 80105dc:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 80105e0:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 80105e4:	eea5 6b02 	vfma.f64	d6, d5, d2
 80105e8:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 80105ec:	eea3 5b00 	vfma.f64	d5, d3, d0
 80105f0:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 80105f4:	eea3 5b02 	vfma.f64	d5, d3, d2
 80105f8:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 80105fc:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010600:	eea5 6b04 	vfma.f64	d6, d5, d4
 8010604:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8010608:	eea6 7b04 	vfma.f64	d7, d6, d4
 801060c:	eeb0 2b47 	vmov.f64	d2, d7
 8010610:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010740 <log+0x1c8>
 8010614:	eeb0 6b40 	vmov.f64	d6, d0
 8010618:	eeb0 3b40 	vmov.f64	d3, d0
 801061c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010620:	eea0 6b47 	vfms.f64	d6, d0, d7
 8010624:	ee30 8b46 	vsub.f64	d8, d0, d6
 8010628:	ee26 1b06 	vmul.f64	d1, d6, d6
 801062c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8010630:	ee30 7b43 	vsub.f64	d7, d0, d3
 8010634:	ee30 0b06 	vadd.f64	d0, d0, d6
 8010638:	eea1 7b05 	vfma.f64	d7, d1, d5
 801063c:	ee25 5b08 	vmul.f64	d5, d5, d8
 8010640:	eea5 7b00 	vfma.f64	d7, d5, d0
 8010644:	eea2 7b04 	vfma.f64	d7, d2, d4
 8010648:	ee33 0b07 	vadd.f64	d0, d3, d7
 801064c:	ecbd 8b02 	vpop	{d8}
 8010650:	bc70      	pop	{r4, r5, r6}
 8010652:	4770      	bx	lr
 8010654:	f1a2 0410 	sub.w	r4, r2, #16
 8010658:	f647 70df 	movw	r0, #32735	; 0x7fdf
 801065c:	4284      	cmp	r4, r0
 801065e:	d924      	bls.n	80106aa <log+0x132>
 8010660:	18d8      	adds	r0, r3, r3
 8010662:	eb41 0401 	adc.w	r4, r1, r1
 8010666:	4320      	orrs	r0, r4
 8010668:	d105      	bne.n	8010676 <log+0xfe>
 801066a:	ecbd 8b02 	vpop	{d8}
 801066e:	2001      	movs	r0, #1
 8010670:	bc70      	pop	{r4, r5, r6}
 8010672:	f7ff bf3d 	b.w	80104f0 <__math_divzero>
 8010676:	483b      	ldr	r0, [pc, #236]	; (8010764 <log+0x1ec>)
 8010678:	4281      	cmp	r1, r0
 801067a:	bf08      	it	eq
 801067c:	2b00      	cmpeq	r3, #0
 801067e:	d0e5      	beq.n	801064c <log+0xd4>
 8010680:	0413      	lsls	r3, r2, #16
 8010682:	d403      	bmi.n	801068c <log+0x114>
 8010684:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8010688:	4393      	bics	r3, r2
 801068a:	d104      	bne.n	8010696 <log+0x11e>
 801068c:	ecbd 8b02 	vpop	{d8}
 8010690:	bc70      	pop	{r4, r5, r6}
 8010692:	f7ff bf45 	b.w	8010520 <__math_invalid>
 8010696:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8010748 <log+0x1d0>
 801069a:	ee20 7b07 	vmul.f64	d7, d0, d7
 801069e:	ec53 2b17 	vmov	r2, r3, d7
 80106a2:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 80106a6:	ee17 3a10 	vmov	r3, s14
 80106aa:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80106ae:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80106b2:	f502 12d0 	add.w	r2, r2, #1703936	; 0x1a0000
 80106b6:	0d16      	lsrs	r6, r2, #20
 80106b8:	1e1c      	subs	r4, r3, #0
 80106ba:	4b29      	ldr	r3, [pc, #164]	; (8010760 <log+0x1e8>)
 80106bc:	f3c2 3046 	ubfx	r0, r2, #13, #7
 80106c0:	0536      	lsls	r6, r6, #20
 80106c2:	1b8d      	subs	r5, r1, r6
 80106c4:	eb03 1100 	add.w	r1, r3, r0, lsl #4
 80106c8:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 80106cc:	ec45 4b16 	vmov	d6, r4, r5
 80106d0:	1512      	asrs	r2, r2, #20
 80106d2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80106d6:	ee07 2a90 	vmov	s15, r2
 80106da:	ee25 2b05 	vmul.f64	d2, d5, d5
 80106de:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80106e2:	ed93 4b00 	vldr	d4, [r3]
 80106e6:	ee25 1b02 	vmul.f64	d1, d5, d2
 80106ea:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 80106ee:	eea4 7b06 	vfma.f64	d7, d4, d6
 80106f2:	ee35 4b07 	vadd.f64	d4, d5, d7
 80106f6:	ee37 0b44 	vsub.f64	d0, d7, d4
 80106fa:	ed93 7b02 	vldr	d7, [r3, #8]
 80106fe:	ee30 0b05 	vadd.f64	d0, d0, d5
 8010702:	eea7 0b06 	vfma.f64	d0, d7, d6
 8010706:	ed93 7b04 	vldr	d7, [r3, #16]
 801070a:	ed93 6b08 	vldr	d6, [r3, #32]
 801070e:	eea7 0b02 	vfma.f64	d0, d7, d2
 8010712:	ed93 7b06 	vldr	d7, [r3, #24]
 8010716:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 801071a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801071e:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8010722:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010726:	eea6 7b02 	vfma.f64	d7, d6, d2
 801072a:	eea1 0b07 	vfma.f64	d0, d1, d7
 801072e:	ee30 0b04 	vadd.f64	d0, d0, d4
 8010732:	e78b      	b.n	801064c <log+0xd4>
 8010734:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8010750 <log+0x1d8>
 8010738:	e788      	b.n	801064c <log+0xd4>
 801073a:	bf00      	nop
 801073c:	f3af 8000 	nop.w
 8010740:	00000000 	.word	0x00000000
 8010744:	41a00000 	.word	0x41a00000
 8010748:	00000000 	.word	0x00000000
 801074c:	43300000 	.word	0x43300000
	...
 8010758:	000308ff 	.word	0x000308ff
 801075c:	3ff00000 	.word	0x3ff00000
 8010760:	080191e8 	.word	0x080191e8
 8010764:	7ff00000 	.word	0x7ff00000

08010768 <checkint>:
 8010768:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801076c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010770:	429a      	cmp	r2, r3
 8010772:	b570      	push	{r4, r5, r6, lr}
 8010774:	dd2a      	ble.n	80107cc <checkint+0x64>
 8010776:	f240 4333 	movw	r3, #1075	; 0x433
 801077a:	429a      	cmp	r2, r3
 801077c:	dc24      	bgt.n	80107c8 <checkint+0x60>
 801077e:	1a9b      	subs	r3, r3, r2
 8010780:	f1a3 0620 	sub.w	r6, r3, #32
 8010784:	f04f 32ff 	mov.w	r2, #4294967295
 8010788:	fa02 f403 	lsl.w	r4, r2, r3
 801078c:	fa02 f606 	lsl.w	r6, r2, r6
 8010790:	f1c3 0520 	rsb	r5, r3, #32
 8010794:	fa22 f505 	lsr.w	r5, r2, r5
 8010798:	4334      	orrs	r4, r6
 801079a:	432c      	orrs	r4, r5
 801079c:	409a      	lsls	r2, r3
 801079e:	ea20 0202 	bic.w	r2, r0, r2
 80107a2:	ea21 0404 	bic.w	r4, r1, r4
 80107a6:	4322      	orrs	r2, r4
 80107a8:	f1a3 0420 	sub.w	r4, r3, #32
 80107ac:	f1c3 0220 	rsb	r2, r3, #32
 80107b0:	d10c      	bne.n	80107cc <checkint+0x64>
 80107b2:	40d8      	lsrs	r0, r3
 80107b4:	fa01 f302 	lsl.w	r3, r1, r2
 80107b8:	4318      	orrs	r0, r3
 80107ba:	40e1      	lsrs	r1, r4
 80107bc:	4308      	orrs	r0, r1
 80107be:	f000 0001 	and.w	r0, r0, #1
 80107c2:	f1d0 0002 	rsbs	r0, r0, #2
 80107c6:	bd70      	pop	{r4, r5, r6, pc}
 80107c8:	2002      	movs	r0, #2
 80107ca:	e7fc      	b.n	80107c6 <checkint+0x5e>
 80107cc:	2000      	movs	r0, #0
 80107ce:	e7fa      	b.n	80107c6 <checkint+0x5e>

080107d0 <pow>:
 80107d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d4:	ee10 4a90 	vmov	r4, s1
 80107d8:	ed2d 8b0a 	vpush	{d8-d12}
 80107dc:	ea4f 5814 	mov.w	r8, r4, lsr #20
 80107e0:	ee11 aa90 	vmov	sl, s3
 80107e4:	f108 32ff 	add.w	r2, r8, #4294967295
 80107e8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80107ec:	429a      	cmp	r2, r3
 80107ee:	ee10 5a10 	vmov	r5, s0
 80107f2:	ee11 0a10 	vmov	r0, s2
 80107f6:	b087      	sub	sp, #28
 80107f8:	46c4      	mov	ip, r8
 80107fa:	ea4f 561a 	mov.w	r6, sl, lsr #20
 80107fe:	d806      	bhi.n	801080e <pow+0x3e>
 8010800:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8010804:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010808:	2b7f      	cmp	r3, #127	; 0x7f
 801080a:	f240 8156 	bls.w	8010aba <pow+0x2ea>
 801080e:	1802      	adds	r2, r0, r0
 8010810:	eb4a 010a 	adc.w	r1, sl, sl
 8010814:	f06f 0b01 	mvn.w	fp, #1
 8010818:	1e57      	subs	r7, r2, #1
 801081a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801081e:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 8010822:	45bb      	cmp	fp, r7
 8010824:	eb7e 0303 	sbcs.w	r3, lr, r3
 8010828:	d242      	bcs.n	80108b0 <pow+0xe0>
 801082a:	ea52 0301 	orrs.w	r3, r2, r1
 801082e:	f04f 0300 	mov.w	r3, #0
 8010832:	d10c      	bne.n	801084e <pow+0x7e>
 8010834:	196d      	adds	r5, r5, r5
 8010836:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801083a:	4164      	adcs	r4, r4
 801083c:	42ab      	cmp	r3, r5
 801083e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010842:	41a3      	sbcs	r3, r4
 8010844:	f0c0 808f 	bcc.w	8010966 <pow+0x196>
 8010848:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801084c:	e02b      	b.n	80108a6 <pow+0xd6>
 801084e:	4ed4      	ldr	r6, [pc, #848]	; (8010ba0 <pow+0x3d0>)
 8010850:	42b4      	cmp	r4, r6
 8010852:	bf08      	it	eq
 8010854:	429d      	cmpeq	r5, r3
 8010856:	d109      	bne.n	801086c <pow+0x9c>
 8010858:	1800      	adds	r0, r0, r0
 801085a:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 801085e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8010862:	4283      	cmp	r3, r0
 8010864:	4bcf      	ldr	r3, [pc, #828]	; (8010ba4 <pow+0x3d4>)
 8010866:	eb73 030a 	sbcs.w	r3, r3, sl
 801086a:	e7eb      	b.n	8010844 <pow+0x74>
 801086c:	196d      	adds	r5, r5, r5
 801086e:	48ce      	ldr	r0, [pc, #824]	; (8010ba8 <pow+0x3d8>)
 8010870:	4164      	adcs	r4, r4
 8010872:	42ab      	cmp	r3, r5
 8010874:	eb70 0604 	sbcs.w	r6, r0, r4
 8010878:	d375      	bcc.n	8010966 <pow+0x196>
 801087a:	4281      	cmp	r1, r0
 801087c:	bf08      	it	eq
 801087e:	429a      	cmpeq	r2, r3
 8010880:	d171      	bne.n	8010966 <pow+0x196>
 8010882:	4aca      	ldr	r2, [pc, #808]	; (8010bac <pow+0x3dc>)
 8010884:	4294      	cmp	r4, r2
 8010886:	bf08      	it	eq
 8010888:	429d      	cmpeq	r5, r3
 801088a:	d0dd      	beq.n	8010848 <pow+0x78>
 801088c:	4294      	cmp	r4, r2
 801088e:	ea6f 0a0a 	mvn.w	sl, sl
 8010892:	bf34      	ite	cc
 8010894:	2400      	movcc	r4, #0
 8010896:	2401      	movcs	r4, #1
 8010898:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801089c:	4554      	cmp	r4, sl
 801089e:	f040 81dc 	bne.w	8010c5a <pow+0x48a>
 80108a2:	ee21 0b01 	vmul.f64	d0, d1, d1
 80108a6:	b007      	add	sp, #28
 80108a8:	ecbd 8b0a 	vpop	{d8-d12}
 80108ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b0:	196f      	adds	r7, r5, r5
 80108b2:	eb44 0904 	adc.w	r9, r4, r4
 80108b6:	1e7a      	subs	r2, r7, #1
 80108b8:	f169 0300 	sbc.w	r3, r9, #0
 80108bc:	4593      	cmp	fp, r2
 80108be:	eb7e 0303 	sbcs.w	r3, lr, r3
 80108c2:	d225      	bcs.n	8010910 <pow+0x140>
 80108c4:	ee20 0b00 	vmul.f64	d0, d0, d0
 80108c8:	2c00      	cmp	r4, #0
 80108ca:	da13      	bge.n	80108f4 <pow+0x124>
 80108cc:	4651      	mov	r1, sl
 80108ce:	f7ff ff4b 	bl	8010768 <checkint>
 80108d2:	2801      	cmp	r0, #1
 80108d4:	d10e      	bne.n	80108f4 <pow+0x124>
 80108d6:	eeb1 0b40 	vneg.f64	d0, d0
 80108da:	ea57 0909 	orrs.w	r9, r7, r9
 80108de:	d10b      	bne.n	80108f8 <pow+0x128>
 80108e0:	f1ba 0f00 	cmp.w	sl, #0
 80108e4:	dadf      	bge.n	80108a6 <pow+0xd6>
 80108e6:	b007      	add	sp, #28
 80108e8:	ecbd 8b0a 	vpop	{d8-d12}
 80108ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f0:	f7ff bdfe 	b.w	80104f0 <__math_divzero>
 80108f4:	2000      	movs	r0, #0
 80108f6:	e7f0      	b.n	80108da <pow+0x10a>
 80108f8:	f1ba 0f00 	cmp.w	sl, #0
 80108fc:	dad3      	bge.n	80108a6 <pow+0xd6>
 80108fe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010902:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010906:	ed8d 7b00 	vstr	d7, [sp]
 801090a:	ed9d 0b00 	vldr	d0, [sp]
 801090e:	e7ca      	b.n	80108a6 <pow+0xd6>
 8010910:	2c00      	cmp	r4, #0
 8010912:	da2b      	bge.n	801096c <pow+0x19c>
 8010914:	4651      	mov	r1, sl
 8010916:	f7ff ff27 	bl	8010768 <checkint>
 801091a:	b930      	cbnz	r0, 801092a <pow+0x15a>
 801091c:	b007      	add	sp, #28
 801091e:	ecbd 8b0a 	vpop	{d8-d12}
 8010922:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010926:	f7ff bdfb 	b.w	8010520 <__math_invalid>
 801092a:	1e41      	subs	r1, r0, #1
 801092c:	4248      	negs	r0, r1
 801092e:	4148      	adcs	r0, r1
 8010930:	0480      	lsls	r0, r0, #18
 8010932:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010936:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801093a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801093e:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8010942:	2b7f      	cmp	r3, #127	; 0x7f
 8010944:	d92d      	bls.n	80109a2 <pow+0x1d2>
 8010946:	4b96      	ldr	r3, [pc, #600]	; (8010ba0 <pow+0x3d0>)
 8010948:	2000      	movs	r0, #0
 801094a:	429c      	cmp	r4, r3
 801094c:	bf08      	it	eq
 801094e:	4285      	cmpeq	r5, r0
 8010950:	f43f af7a 	beq.w	8010848 <pow+0x78>
 8010954:	f240 31bd 	movw	r1, #957	; 0x3bd
 8010958:	428a      	cmp	r2, r1
 801095a:	d80c      	bhi.n	8010976 <pow+0x1a6>
 801095c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010960:	42a8      	cmp	r0, r5
 8010962:	41a3      	sbcs	r3, r4
 8010964:	d204      	bcs.n	8010970 <pow+0x1a0>
 8010966:	ee31 0b00 	vadd.f64	d0, d1, d0
 801096a:	e79c      	b.n	80108a6 <pow+0xd6>
 801096c:	2000      	movs	r0, #0
 801096e:	e7e4      	b.n	801093a <pow+0x16a>
 8010970:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010974:	e797      	b.n	80108a6 <pow+0xd6>
 8010976:	2d01      	cmp	r5, #1
 8010978:	eb74 0303 	sbcs.w	r3, r4, r3
 801097c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010980:	bf34      	ite	cc
 8010982:	2301      	movcc	r3, #1
 8010984:	2300      	movcs	r3, #0
 8010986:	4296      	cmp	r6, r2
 8010988:	bf8c      	ite	hi
 801098a:	2600      	movhi	r6, #0
 801098c:	2601      	movls	r6, #1
 801098e:	42b3      	cmp	r3, r6
 8010990:	f000 809b 	beq.w	8010aca <pow+0x2fa>
 8010994:	b007      	add	sp, #28
 8010996:	ecbd 8b0a 	vpop	{d8-d12}
 801099a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801099e:	f7ff bd9f 	b.w	80104e0 <__math_oflow>
 80109a2:	f1bc 0f00 	cmp.w	ip, #0
 80109a6:	d10b      	bne.n	80109c0 <pow+0x1f0>
 80109a8:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8010b90 <pow+0x3c0>
 80109ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 80109b0:	ec53 2b17 	vmov	r2, r3, d7
 80109b4:	ee17 5a10 	vmov	r5, s14
 80109b8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80109bc:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80109c0:	4b7b      	ldr	r3, [pc, #492]	; (8010bb0 <pow+0x3e0>)
 80109c2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80109c6:	4423      	add	r3, r4
 80109c8:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80109cc:	1519      	asrs	r1, r3, #20
 80109ce:	0d1b      	lsrs	r3, r3, #20
 80109d0:	051b      	lsls	r3, r3, #20
 80109d2:	1ae7      	subs	r7, r4, r3
 80109d4:	4b77      	ldr	r3, [pc, #476]	; (8010bb4 <pow+0x3e4>)
 80109d6:	ee03 1a10 	vmov	s6, r1
 80109da:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80109de:	1e2e      	subs	r6, r5, #0
 80109e0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80109e4:	ec47 6b15 	vmov	d5, r6, r7
 80109e8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 80109ec:	eea5 6b07 	vfma.f64	d6, d5, d7
 80109f0:	ed93 7b00 	vldr	d7, [r3]
 80109f4:	ed93 5b02 	vldr	d5, [r3, #8]
 80109f8:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80109fc:	eea3 2b07 	vfma.f64	d2, d3, d7
 8010a00:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8010a04:	ee36 4b02 	vadd.f64	d4, d6, d2
 8010a08:	ee32 2b44 	vsub.f64	d2, d2, d4
 8010a0c:	eea3 7b05 	vfma.f64	d7, d3, d5
 8010a10:	ed93 5b04 	vldr	d5, [r3, #16]
 8010a14:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010a18:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010a1c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010a20:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010a24:	ee34 8b00 	vadd.f64	d8, d4, d0
 8010a28:	eeb0 9b40 	vmov.f64	d9, d0
 8010a2c:	ee34 4b48 	vsub.f64	d4, d4, d8
 8010a30:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010a34:	ee34 ab00 	vadd.f64	d10, d4, d0
 8010a38:	ed93 5b06 	vldr	d5, [r3, #24]
 8010a3c:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010a40:	ee37 7b09 	vadd.f64	d7, d7, d9
 8010a44:	ed93 4b08 	vldr	d4, [r3, #32]
 8010a48:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8010a4c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010a50:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010a54:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8010a58:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8010a5c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010a60:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8010a64:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8010a68:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010a6c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010a70:	eeab 7b05 	vfma.f64	d7, d11, d5
 8010a74:	ee38 4b07 	vadd.f64	d4, d8, d7
 8010a78:	ee21 6b04 	vmul.f64	d6, d1, d4
 8010a7c:	ee16 3a90 	vmov	r3, s13
 8010a80:	eeb0 5b46 	vmov.f64	d5, d6
 8010a84:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8010a88:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8010a8c:	18b2      	adds	r2, r6, r2
 8010a8e:	2a3e      	cmp	r2, #62	; 0x3e
 8010a90:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8010a94:	ee38 8b44 	vsub.f64	d8, d8, d4
 8010a98:	ee38 8b07 	vadd.f64	d8, d8, d7
 8010a9c:	eea1 5b08 	vfma.f64	d5, d1, d8
 8010aa0:	d91b      	bls.n	8010ada <pow+0x30a>
 8010aa2:	2a00      	cmp	r2, #0
 8010aa4:	da0b      	bge.n	8010abe <pow+0x2ee>
 8010aa6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010aaa:	ee36 0b00 	vadd.f64	d0, d6, d0
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	f43f aef9 	beq.w	80108a6 <pow+0xd6>
 8010ab4:	eeb1 0b40 	vneg.f64	d0, d0
 8010ab8:	e6f5      	b.n	80108a6 <pow+0xd6>
 8010aba:	2000      	movs	r0, #0
 8010abc:	e780      	b.n	80109c0 <pow+0x1f0>
 8010abe:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8010ac2:	d909      	bls.n	8010ad8 <pow+0x308>
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	f6bf af65 	bge.w	8010994 <pow+0x1c4>
 8010aca:	b007      	add	sp, #28
 8010acc:	ecbd 8b0a 	vpop	{d8-d12}
 8010ad0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad4:	f7ff bcfc 	b.w	80104d0 <__math_uflow>
 8010ad8:	2600      	movs	r6, #0
 8010ada:	4937      	ldr	r1, [pc, #220]	; (8010bb8 <pow+0x3e8>)
 8010adc:	ed91 4b02 	vldr	d4, [r1, #8]
 8010ae0:	ed91 3b00 	vldr	d3, [r1]
 8010ae4:	eeb0 7b44 	vmov.f64	d7, d4
 8010ae8:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010aec:	ee17 5a10 	vmov	r5, s14
 8010af0:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010af4:	ed91 4b04 	vldr	d4, [r1, #16]
 8010af8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8010afc:	eea7 6b04 	vfma.f64	d6, d7, d4
 8010b00:	ed91 4b06 	vldr	d4, [r1, #24]
 8010b04:	18dc      	adds	r4, r3, r3
 8010b06:	f104 030f 	add.w	r3, r4, #15
 8010b0a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010b0e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8010b12:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8010b16:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010b1a:	ee25 6b05 	vmul.f64	d6, d5, d5
 8010b1e:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8010b22:	ed91 4b08 	vldr	d4, [r1, #32]
 8010b26:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010b2a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010b2e:	eea5 4b03 	vfma.f64	d4, d5, d3
 8010b32:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8010b36:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010b3a:	ee26 6b06 	vmul.f64	d6, d6, d6
 8010b3e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8010b42:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8010b46:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8010b4a:	eea5 4b03 	vfma.f64	d4, d5, d3
 8010b4e:	1940      	adds	r0, r0, r5
 8010b50:	2700      	movs	r7, #0
 8010b52:	eb17 020c 	adds.w	r2, r7, ip
 8010b56:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8010b5a:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010b5e:	2e00      	cmp	r6, #0
 8010b60:	d176      	bne.n	8010c50 <pow+0x480>
 8010b62:	42bd      	cmp	r5, r7
 8010b64:	db2a      	blt.n	8010bbc <pow+0x3ec>
 8010b66:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8010b6a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8010b6e:	4610      	mov	r0, r2
 8010b70:	ec41 0b10 	vmov	d0, r0, r1
 8010b74:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010b78:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8010b98 <pow+0x3c8>
 8010b7c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010b80:	b007      	add	sp, #28
 8010b82:	ecbd 8b0a 	vpop	{d8-d12}
 8010b86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b8a:	f7ff bce1 	b.w	8010550 <__math_check_oflow>
 8010b8e:	bf00      	nop
 8010b90:	00000000 	.word	0x00000000
 8010b94:	43300000 	.word	0x43300000
 8010b98:	00000000 	.word	0x00000000
 8010b9c:	7f000000 	.word	0x7f000000
 8010ba0:	3ff00000 	.word	0x3ff00000
 8010ba4:	fff00000 	.word	0xfff00000
 8010ba8:	ffe00000 	.word	0xffe00000
 8010bac:	7fe00000 	.word	0x7fe00000
 8010bb0:	c0196aab 	.word	0xc0196aab
 8010bb4:	08019a78 	.word	0x08019a78
 8010bb8:	08018978 	.word	0x08018978
 8010bbc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010bc0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8010bc4:	4610      	mov	r0, r2
 8010bc6:	ec41 0b15 	vmov	d5, r0, r1
 8010bca:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8010bce:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010bd2:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010bd6:	eeb0 4bc7 	vabs.f64	d4, d7
 8010bda:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8010bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8010c60 <pow+0x490>
 8010be6:	d52a      	bpl.n	8010c3e <pow+0x46e>
 8010be8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010bec:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf4:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010bf8:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8010bfc:	bf58      	it	pl
 8010bfe:	eeb0 4b43 	vmovpl.f64	d4, d3
 8010c02:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010c06:	ee34 6b43 	vsub.f64	d6, d4, d3
 8010c0a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010c0e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8010c12:	ee36 6b03 	vadd.f64	d6, d6, d3
 8010c16:	ee36 7b44 	vsub.f64	d7, d6, d4
 8010c1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c22:	d104      	bne.n	8010c2e <pow+0x45e>
 8010c24:	4632      	mov	r2, r6
 8010c26:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010c2a:	ec43 2b17 	vmov	d7, r2, r3
 8010c2e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010c32:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c36:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010c3a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010c3e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010c42:	b007      	add	sp, #28
 8010c44:	ecbd 8b0a 	vpop	{d8-d12}
 8010c48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4c:	f7ff bc77 	b.w	801053e <__math_check_uflow>
 8010c50:	ec43 2b10 	vmov	d0, r2, r3
 8010c54:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010c58:	e625      	b.n	80108a6 <pow+0xd6>
 8010c5a:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8010c68 <pow+0x498>
 8010c5e:	e622      	b.n	80108a6 <pow+0xd6>
 8010c60:	00000000 	.word	0x00000000
 8010c64:	00100000 	.word	0x00100000
	...

08010c70 <__ieee754_sqrt>:
 8010c70:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010c74:	4770      	bx	lr
	...

08010c78 <ceil>:
 8010c78:	ee10 1a90 	vmov	r1, s1
 8010c7c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010c80:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8010c84:	2b13      	cmp	r3, #19
 8010c86:	b530      	push	{r4, r5, lr}
 8010c88:	ee10 0a10 	vmov	r0, s0
 8010c8c:	ee10 5a10 	vmov	r5, s0
 8010c90:	dc2f      	bgt.n	8010cf2 <ceil+0x7a>
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	da13      	bge.n	8010cbe <ceil+0x46>
 8010c96:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8010d58 <ceil+0xe0>
 8010c9a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010c9e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca6:	dd05      	ble.n	8010cb4 <ceil+0x3c>
 8010ca8:	2900      	cmp	r1, #0
 8010caa:	db4c      	blt.n	8010d46 <ceil+0xce>
 8010cac:	4301      	orrs	r1, r0
 8010cae:	d04e      	beq.n	8010d4e <ceil+0xd6>
 8010cb0:	492b      	ldr	r1, [pc, #172]	; (8010d60 <ceil+0xe8>)
 8010cb2:	2000      	movs	r0, #0
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	ec43 2b10 	vmov	d0, r2, r3
 8010cbc:	e020      	b.n	8010d00 <ceil+0x88>
 8010cbe:	4a29      	ldr	r2, [pc, #164]	; (8010d64 <ceil+0xec>)
 8010cc0:	411a      	asrs	r2, r3
 8010cc2:	ea01 0402 	and.w	r4, r1, r2
 8010cc6:	4304      	orrs	r4, r0
 8010cc8:	d01a      	beq.n	8010d00 <ceil+0x88>
 8010cca:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8010d58 <ceil+0xe0>
 8010cce:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010cd2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cda:	ddeb      	ble.n	8010cb4 <ceil+0x3c>
 8010cdc:	2900      	cmp	r1, #0
 8010cde:	bfc2      	ittt	gt
 8010ce0:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8010ce4:	fa40 f303 	asrgt.w	r3, r0, r3
 8010ce8:	18c9      	addgt	r1, r1, r3
 8010cea:	ea21 0102 	bic.w	r1, r1, r2
 8010cee:	2000      	movs	r0, #0
 8010cf0:	e7e0      	b.n	8010cb4 <ceil+0x3c>
 8010cf2:	2b33      	cmp	r3, #51	; 0x33
 8010cf4:	dd05      	ble.n	8010d02 <ceil+0x8a>
 8010cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010cfa:	d101      	bne.n	8010d00 <ceil+0x88>
 8010cfc:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010d00:	bd30      	pop	{r4, r5, pc}
 8010d02:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8010d06:	f04f 32ff 	mov.w	r2, #4294967295
 8010d0a:	40e2      	lsrs	r2, r4
 8010d0c:	4210      	tst	r0, r2
 8010d0e:	d0f7      	beq.n	8010d00 <ceil+0x88>
 8010d10:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8010d58 <ceil+0xe0>
 8010d14:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010d18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d20:	ddc8      	ble.n	8010cb4 <ceil+0x3c>
 8010d22:	2900      	cmp	r1, #0
 8010d24:	dd02      	ble.n	8010d2c <ceil+0xb4>
 8010d26:	2b14      	cmp	r3, #20
 8010d28:	d103      	bne.n	8010d32 <ceil+0xba>
 8010d2a:	3101      	adds	r1, #1
 8010d2c:	ea20 0002 	bic.w	r0, r0, r2
 8010d30:	e7c0      	b.n	8010cb4 <ceil+0x3c>
 8010d32:	2401      	movs	r4, #1
 8010d34:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010d38:	fa04 f303 	lsl.w	r3, r4, r3
 8010d3c:	4418      	add	r0, r3
 8010d3e:	4285      	cmp	r5, r0
 8010d40:	bf88      	it	hi
 8010d42:	1909      	addhi	r1, r1, r4
 8010d44:	e7f2      	b.n	8010d2c <ceil+0xb4>
 8010d46:	2000      	movs	r0, #0
 8010d48:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010d4c:	e7b2      	b.n	8010cb4 <ceil+0x3c>
 8010d4e:	4608      	mov	r0, r1
 8010d50:	e7b0      	b.n	8010cb4 <ceil+0x3c>
 8010d52:	bf00      	nop
 8010d54:	f3af 8000 	nop.w
 8010d58:	8800759c 	.word	0x8800759c
 8010d5c:	7e37e43c 	.word	0x7e37e43c
 8010d60:	3ff00000 	.word	0x3ff00000
 8010d64:	000fffff 	.word	0x000fffff

08010d68 <round>:
 8010d68:	ee10 1a90 	vmov	r1, s1
 8010d6c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010d70:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8010d74:	2b13      	cmp	r3, #19
 8010d76:	b510      	push	{r4, lr}
 8010d78:	ee10 4a10 	vmov	r4, s0
 8010d7c:	dc19      	bgt.n	8010db2 <round+0x4a>
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	da09      	bge.n	8010d96 <round+0x2e>
 8010d82:	3301      	adds	r3, #1
 8010d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010d88:	d103      	bne.n	8010d92 <round+0x2a>
 8010d8a:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8010d8e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010d92:	2000      	movs	r0, #0
 8010d94:	e025      	b.n	8010de2 <round+0x7a>
 8010d96:	4815      	ldr	r0, [pc, #84]	; (8010dec <round+0x84>)
 8010d98:	4118      	asrs	r0, r3
 8010d9a:	ea01 0200 	and.w	r2, r1, r0
 8010d9e:	4322      	orrs	r2, r4
 8010da0:	d00e      	beq.n	8010dc0 <round+0x58>
 8010da2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010da6:	fa42 f303 	asr.w	r3, r2, r3
 8010daa:	440b      	add	r3, r1
 8010dac:	ea23 0100 	bic.w	r1, r3, r0
 8010db0:	e7ef      	b.n	8010d92 <round+0x2a>
 8010db2:	2b33      	cmp	r3, #51	; 0x33
 8010db4:	dd05      	ble.n	8010dc2 <round+0x5a>
 8010db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010dba:	d101      	bne.n	8010dc0 <round+0x58>
 8010dbc:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010dc0:	bd10      	pop	{r4, pc}
 8010dc2:	f2a2 4013 	subw	r0, r2, #1043	; 0x413
 8010dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8010dca:	40c2      	lsrs	r2, r0
 8010dcc:	4222      	tst	r2, r4
 8010dce:	d0f7      	beq.n	8010dc0 <round+0x58>
 8010dd0:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8010dd4:	2001      	movs	r0, #1
 8010dd6:	4098      	lsls	r0, r3
 8010dd8:	1900      	adds	r0, r0, r4
 8010dda:	bf28      	it	cs
 8010ddc:	3101      	addcs	r1, #1
 8010dde:	ea20 0002 	bic.w	r0, r0, r2
 8010de2:	460b      	mov	r3, r1
 8010de4:	4602      	mov	r2, r0
 8010de6:	ec43 2b10 	vmov	d0, r2, r3
 8010dea:	e7e9      	b.n	8010dc0 <round+0x58>
 8010dec:	000fffff 	.word	0x000fffff

08010df0 <_getpid>:
 8010df0:	4b02      	ldr	r3, [pc, #8]	; (8010dfc <_getpid+0xc>)
 8010df2:	2258      	movs	r2, #88	; 0x58
 8010df4:	601a      	str	r2, [r3, #0]
 8010df6:	f04f 30ff 	mov.w	r0, #4294967295
 8010dfa:	4770      	bx	lr
 8010dfc:	20003b78 	.word	0x20003b78

08010e00 <_kill>:
 8010e00:	4b02      	ldr	r3, [pc, #8]	; (8010e0c <_kill+0xc>)
 8010e02:	2258      	movs	r2, #88	; 0x58
 8010e04:	601a      	str	r2, [r3, #0]
 8010e06:	f04f 30ff 	mov.w	r0, #4294967295
 8010e0a:	4770      	bx	lr
 8010e0c:	20003b78 	.word	0x20003b78

08010e10 <_exit>:
 8010e10:	e7fe      	b.n	8010e10 <_exit>
	...

08010e14 <_init>:
 8010e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e16:	bf00      	nop
 8010e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e1a:	bc08      	pop	{r3}
 8010e1c:	469e      	mov	lr, r3
 8010e1e:	4770      	bx	lr

08010e20 <_fini>:
 8010e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e22:	bf00      	nop
 8010e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e26:	bc08      	pop	{r3}
 8010e28:	469e      	mov	lr, r3
 8010e2a:	4770      	bx	lr
